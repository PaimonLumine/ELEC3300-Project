
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119dc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004e600  08011bc8  08011bc8  00021bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080601c8  080601c8  000809fc  2**0
                  CONTENTS
  4 .ARM          00000008  080601c8  080601c8  000701c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080601d0  080601d0  000809fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080601d0  080601d0  000701d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080601d8  080601d8  000701d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009fc  20000000  080601dc  00080000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200009fc  08060bd8  000809fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c50  08060bd8  00080c50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000809fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ce  00000000  00000000  00080a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c17  00000000  00000000  00093af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00097710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00098b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b596  00000000  00000000  00099c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b74  00000000  00000000  000b51d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084fa2  00000000  00000000  000cad4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fcec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a70  00000000  00000000  0014fd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200009fc 	.word	0x200009fc
 8000204:	00000000 	.word	0x00000000
 8000208:	08011bac 	.word	0x08011bac

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000a00 	.word	0x20000a00
 8000224:	08011bac 	.word	0x08011bac

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b9ae 	b.w	8000fb4 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f83e 	bl	8000ce0 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_d2lz>:
 8000c70:	b538      	push	{r3, r4, r5, lr}
 8000c72:	4605      	mov	r5, r0
 8000c74:	460c      	mov	r4, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4628      	mov	r0, r5
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	f7ff ff09 	bl	8000a94 <__aeabi_dcmplt>
 8000c82:	b928      	cbnz	r0, 8000c90 <__aeabi_d2lz+0x20>
 8000c84:	4628      	mov	r0, r5
 8000c86:	4621      	mov	r1, r4
 8000c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c8c:	f000 b80a 	b.w	8000ca4 <__aeabi_d2ulz>
 8000c90:	4628      	mov	r0, r5
 8000c92:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c96:	f000 f805 	bl	8000ca4 <__aeabi_d2ulz>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_d2ulz>:
 8000ca4:	b5d0      	push	{r4, r6, r7, lr}
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <__aeabi_d2ulz+0x34>)
 8000caa:	4606      	mov	r6, r0
 8000cac:	460f      	mov	r7, r1
 8000cae:	f7ff fc7f 	bl	80005b0 <__aeabi_dmul>
 8000cb2:	f7ff ff55 	bl	8000b60 <__aeabi_d2uiz>
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	f7ff fc00 	bl	80004bc <__aeabi_ui2d>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <__aeabi_d2ulz+0x38>)
 8000cc0:	f7ff fc76 	bl	80005b0 <__aeabi_dmul>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4630      	mov	r0, r6
 8000cca:	4639      	mov	r1, r7
 8000ccc:	f7ff fab8 	bl	8000240 <__aeabi_dsub>
 8000cd0:	f7ff ff46 	bl	8000b60 <__aeabi_d2uiz>
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd8:	3df00000 	.word	0x3df00000
 8000cdc:	41f00000 	.word	0x41f00000

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	9e08      	ldr	r6, [sp, #32]
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	4688      	mov	r8, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14d      	bne.n	8000d8c <__udivmoddi4+0xac>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4694      	mov	ip, r2
 8000cf4:	d968      	bls.n	8000dc8 <__udivmoddi4+0xe8>
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	b152      	cbz	r2, 8000d12 <__udivmoddi4+0x32>
 8000cfc:	fa01 f302 	lsl.w	r3, r1, r2
 8000d00:	f1c2 0120 	rsb	r1, r2, #32
 8000d04:	fa20 f101 	lsr.w	r1, r0, r1
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	ea41 0803 	orr.w	r8, r1, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d16:	fbb8 f7f1 	udiv	r7, r8, r1
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	fb01 8817 	mls	r8, r1, r7, r8
 8000d22:	fb07 f00e 	mul.w	r0, r7, lr
 8000d26:	0c23      	lsrs	r3, r4, #16
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x66>
 8000d30:	eb1c 0303 	adds.w	r3, ip, r3
 8000d34:	f107 35ff 	add.w	r5, r7, #4294967295
 8000d38:	f080 811e 	bcs.w	8000f78 <__udivmoddi4+0x298>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f240 811b 	bls.w	8000f78 <__udivmoddi4+0x298>
 8000d42:	3f02      	subs	r7, #2
 8000d44:	4463      	add	r3, ip
 8000d46:	1a1b      	subs	r3, r3, r0
 8000d48:	fbb3 f0f1 	udiv	r0, r3, r1
 8000d4c:	fb01 3310 	mls	r3, r1, r0, r3
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	b2a4      	uxth	r4, r4
 8000d56:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	d90a      	bls.n	8000d74 <__udivmoddi4+0x94>
 8000d5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8109 	bcs.w	8000f7c <__udivmoddi4+0x29c>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f240 8106 	bls.w	8000f7c <__udivmoddi4+0x29c>
 8000d70:	4464      	add	r4, ip
 8000d72:	3802      	subs	r0, #2
 8000d74:	2100      	movs	r1, #0
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa8>
 8000d80:	2300      	movs	r3, #0
 8000d82:	40d4      	lsrs	r4, r2
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0xc2>
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	f000 80ee 	beq.w	8000f72 <__udivmoddi4+0x292>
 8000d96:	2100      	movs	r1, #0
 8000d98:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d14a      	bne.n	8000e40 <__udivmoddi4+0x160>
 8000daa:	42ab      	cmp	r3, r5
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xd4>
 8000dae:	4282      	cmp	r2, r0
 8000db0:	f200 80fc 	bhi.w	8000fac <__udivmoddi4+0x2cc>
 8000db4:	1a84      	subs	r4, r0, r2
 8000db6:	eb65 0303 	sbc.w	r3, r5, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	4698      	mov	r8, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d0e2      	beq.n	8000d88 <__udivmoddi4+0xa8>
 8000dc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000dc6:	e7df      	b.n	8000d88 <__udivmoddi4+0xa8>
 8000dc8:	b902      	cbnz	r2, 8000dcc <__udivmoddi4+0xec>
 8000dca:	deff      	udf	#255	; 0xff
 8000dcc:	fab2 f282 	clz	r2, r2
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	f040 8091 	bne.w	8000ef8 <__udivmoddi4+0x218>
 8000dd6:	eba1 000c 	sub.w	r0, r1, ip
 8000dda:	2101      	movs	r1, #1
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000de8:	fb07 0013 	mls	r0, r7, r3, r0
 8000dec:	0c25      	lsrs	r5, r4, #16
 8000dee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000df2:	fb0e f003 	mul.w	r0, lr, r3
 8000df6:	42a8      	cmp	r0, r5
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x12c>
 8000dfa:	eb1c 0505 	adds.w	r5, ip, r5
 8000dfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x12a>
 8000e04:	42a8      	cmp	r0, r5
 8000e06:	f200 80ce 	bhi.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e0a:	4643      	mov	r3, r8
 8000e0c:	1a2d      	subs	r5, r5, r0
 8000e0e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e12:	fb07 5510 	mls	r5, r7, r0, r5
 8000e16:	fb0e fe00 	mul.w	lr, lr, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x156>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x154>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80b6 	bhi.w	8000fa0 <__udivmoddi4+0x2c0>
 8000e34:	4628      	mov	r0, r5
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e3e:	e79e      	b.n	8000d7e <__udivmoddi4+0x9e>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fbba f8f9 	udiv	r8, sl, r9
 8000e5a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e5e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e62:	408d      	lsls	r5, r1
 8000e64:	fa1f fe8c 	uxth.w	lr, ip
 8000e68:	431d      	orrs	r5, r3
 8000e6a:	fa00 f301 	lsl.w	r3, r0, r1
 8000e6e:	fb08 f00e 	mul.w	r0, r8, lr
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e78:	42a0      	cmp	r0, r4
 8000e7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b8>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2bc>
 8000e8c:	42a0      	cmp	r0, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2bc>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1a24      	subs	r4, r4, r0
 8000e9a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000e9e:	fb09 4410 	mls	r4, r9, r0, r4
 8000ea2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea6:	b2ad      	uxth	r5, r5
 8000ea8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1e2>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2b4>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2b4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ec6:	fba0 9502 	umull	r9, r5, r0, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x2a4>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x2a0>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2d0>
 8000edc:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee0:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee4:	fa22 f301 	lsr.w	r3, r2, r1
 8000ee8:	fa04 f707 	lsl.w	r7, r4, r7
 8000eec:	431f      	orrs	r7, r3
 8000eee:	40cc      	lsrs	r4, r1
 8000ef0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa8>
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	f1c2 0120 	rsb	r1, r2, #32
 8000f00:	fa25 f301 	lsr.w	r3, r5, r1
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa20 f101 	lsr.w	r1, r0, r1
 8000f0c:	4095      	lsls	r5, r2
 8000f0e:	430d      	orrs	r5, r1
 8000f10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f14:	fb07 3311 	mls	r3, r7, r1, r3
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	0c28      	lsrs	r0, r5, #16
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	fb01 f30e 	mul.w	r3, r1, lr
 8000f26:	4283      	cmp	r3, r0
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x260>
 8000f2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000f32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b8>
 8000f38:	4283      	cmp	r3, r0
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b8>
 8000f3c:	3902      	subs	r1, #2
 8000f3e:	4460      	add	r0, ip
 8000f40:	1ac0      	subs	r0, r0, r3
 8000f42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000f46:	fb07 0013 	mls	r0, r7, r3, r0
 8000f4a:	b2ad      	uxth	r5, r5
 8000f4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f50:	fb03 f00e 	mul.w	r0, r3, lr
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x28a>
 8000f58:	eb1c 0505 	adds.w	r5, ip, r5
 8000f5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2b0>
 8000f62:	42a8      	cmp	r0, r5
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2b0>
 8000f66:	3b02      	subs	r3, #2
 8000f68:	4465      	add	r5, ip
 8000f6a:	1a28      	subs	r0, r5, r0
 8000f6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0x104>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e707      	b.n	8000d88 <__udivmoddi4+0xa8>
 8000f78:	462f      	mov	r7, r5
 8000f7a:	e6e4      	b.n	8000d46 <__udivmoddi4+0x66>
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	e6f9      	b.n	8000d74 <__udivmoddi4+0x94>
 8000f80:	454b      	cmp	r3, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f8>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3801      	subs	r0, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f8>
 8000f90:	4643      	mov	r3, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x28a>
 8000f94:	4628      	mov	r0, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1e2>
 8000f98:	4641      	mov	r1, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x260>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b8>
 8000fa0:	4464      	add	r4, ip
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	e747      	b.n	8000e36 <__udivmoddi4+0x156>
 8000fa6:	3b02      	subs	r3, #2
 8000fa8:	4465      	add	r5, ip
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x12c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e706      	b.n	8000dbe <__udivmoddi4+0xde>
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa8>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <Check_touchkey>:
#include "UI.h"
#include "lcdtp.h"
#include "rtc.h"
#include "pet.h"
uint8_t Check_touchkey(const int *constraints,
		strType_XPT2046_Coordinate *pDisplayCoordinate) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	8812      	ldrh	r2, [r2, #0]
			&& constraints[1] >= pDisplayCoordinate->x
			&& constraints[2] <= pDisplayCoordinate->y
			&& constraints[3] >= pDisplayCoordinate->y);
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	dc16      	bgt.n	8000ffc <Check_touchkey+0x44>
			&& constraints[1] >= pDisplayCoordinate->x
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	8812      	ldrh	r2, [r2, #0]
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	db0f      	blt.n	8000ffc <Check_touchkey+0x44>
			&& constraints[2] <= pDisplayCoordinate->y
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	8852      	ldrh	r2, [r2, #2]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	dc08      	bgt.n	8000ffc <Check_touchkey+0x44>
			&& constraints[3] >= pDisplayCoordinate->y);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	330c      	adds	r3, #12
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	8852      	ldrh	r2, [r2, #2]
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	db01      	blt.n	8000ffc <Check_touchkey+0x44>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <Check_touchkey+0x46>
 8000ffc:	2300      	movs	r3, #0
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000ffe:	73fb      	strb	r3, [r7, #15]
	return match;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <Render>:

void Render(uint8_t *mode_new, uint8_t *render_status,
		const unsigned char *petStats) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	//Not Render if done
	if (*render_status == 1)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d033      	beq.n	8001088 <Render+0x7c>
		return;

	//Mode 0 = Home, Mode 1 = Drink Water, Mode 2 = Toggle Dark Mode, Mode 3 = Stats,
	switch (*mode_new) {
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b06      	cmp	r3, #6
 8001026:	d82b      	bhi.n	8001080 <Render+0x74>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <Render+0x24>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	0800104d 	.word	0x0800104d
 8001034:	08001053 	.word	0x08001053
 8001038:	0800105f 	.word	0x0800105f
 800103c:	0800106b 	.word	0x0800106b
 8001040:	08001071 	.word	0x08001071
 8001044:	08001077 	.word	0x08001077
 8001048:	0800107d 	.word	0x0800107d
	case (0):
		UI_Home();
 800104c:	f000 f8a4 	bl	8001198 <UI_Home>
		break;
 8001050:	e016      	b.n	8001080 <Render+0x74>
	case (1):
		UI_Drink_Water();
 8001052:	f000 f81d 	bl	8001090 <UI_Drink_Water>
		*mode_new = 0;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
		break;
 800105c:	e010      	b.n	8001080 <Render+0x74>
	case (2):
		LCD_Darkmode_Toggle();
 800105e:	f001 faeb 	bl	8002638 <LCD_Darkmode_Toggle>
		*mode_new = 0;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
		break;
 8001068:	e00a      	b.n	8001080 <Render+0x74>
	case (3):
		UI_Stats();
 800106a:	f000 f9db 	bl	8001424 <UI_Stats>
		break;
 800106e:	e007      	b.n	8001080 <Render+0x74>
	case (4):
		UI_Config();
 8001070:	f000 fc0e 	bl	8001890 <UI_Config>
		break;
 8001074:	e004      	b.n	8001080 <Render+0x74>
	case (5):
		UI_Time_set();
 8001076:	f000 fc25 	bl	80018c4 <UI_Time_set>
		break;
 800107a:	e001      	b.n	8001080 <Render+0x74>
	case (6):
		UI_Set();
 800107c:	f000 fb66 	bl	800174c <UI_Set>
	}
	*render_status = 1;
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e000      	b.n	800108a <Render+0x7e>
		return;
 8001088:	bf00      	nop
}
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <UI_Drink_Water>:

void UI_Drink_Water() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001094:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001098:	22f0      	movs	r2, #240	; 0xf0
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f000 ff9f 	bl	8001fe0 <LCD_Clear>
	extern uint8_t darkmode_toggle;
	LCD_DrawString(10, 220, "Drinked a glass of water");
 80010a2:	4a31      	ldr	r2, [pc, #196]	; (8001168 <UI_Drink_Water+0xd8>)
 80010a4:	21dc      	movs	r1, #220	; 0xdc
 80010a6:	200a      	movs	r0, #10
 80010a8:	f001 f892 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(10, 250, "Return to home in 2s");
 80010ac:	4a2f      	ldr	r2, [pc, #188]	; (800116c <UI_Drink_Water+0xdc>)
 80010ae:	21fa      	movs	r1, #250	; 0xfa
 80010b0:	200a      	movs	r0, #10
 80010b2:	f001 f88d 	bl	80021d0 <LCD_DrawString>
	if(!darkmode_toggle) UI_Home_Display_Pet(60,70,water1);
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <UI_Drink_Water+0xe0>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d105      	bne.n	80010ca <UI_Drink_Water+0x3a>
 80010be:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <UI_Drink_Water+0xe4>)
 80010c0:	2146      	movs	r1, #70	; 0x46
 80010c2:	203c      	movs	r0, #60	; 0x3c
 80010c4:	f000 f93e 	bl	8001344 <UI_Home_Display_Pet>
 80010c8:	e004      	b.n	80010d4 <UI_Drink_Water+0x44>
	else UI_Home_Display_Pet(60,70,water1_night);
 80010ca:	4a2b      	ldr	r2, [pc, #172]	; (8001178 <UI_Drink_Water+0xe8>)
 80010cc:	2146      	movs	r1, #70	; 0x46
 80010ce:	203c      	movs	r0, #60	; 0x3c
 80010d0:	f000 f938 	bl	8001344 <UI_Home_Display_Pet>
	HAL_Delay(1000);
 80010d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d8:	f005 fa48 	bl	800656c <HAL_Delay>

	LCD_Clear(10, 250, 240, 320);
 80010dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010e0:	22f0      	movs	r2, #240	; 0xf0
 80010e2:	21fa      	movs	r1, #250	; 0xfa
 80010e4:	200a      	movs	r0, #10
 80010e6:	f000 ff7b 	bl	8001fe0 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 1s");
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <UI_Drink_Water+0xec>)
 80010ec:	21fa      	movs	r1, #250	; 0xfa
 80010ee:	200a      	movs	r0, #10
 80010f0:	f001 f86e 	bl	80021d0 <LCD_DrawString>
	if(!darkmode_toggle) UI_Home_Display_Pet(60,70,water2);
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <UI_Drink_Water+0xe0>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <UI_Drink_Water+0x78>
 80010fc:	4a20      	ldr	r2, [pc, #128]	; (8001180 <UI_Drink_Water+0xf0>)
 80010fe:	2146      	movs	r1, #70	; 0x46
 8001100:	203c      	movs	r0, #60	; 0x3c
 8001102:	f000 f91f 	bl	8001344 <UI_Home_Display_Pet>
 8001106:	e004      	b.n	8001112 <UI_Drink_Water+0x82>
	else UI_Home_Display_Pet(60,70,water2_night);
 8001108:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <UI_Drink_Water+0xf4>)
 800110a:	2146      	movs	r1, #70	; 0x46
 800110c:	203c      	movs	r0, #60	; 0x3c
 800110e:	f000 f919 	bl	8001344 <UI_Home_Display_Pet>
	HAL_Delay(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001116:	f005 fa29 	bl	800656c <HAL_Delay>

	LCD_Clear(10, 250, 240, 320);
 800111a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800111e:	22f0      	movs	r2, #240	; 0xf0
 8001120:	21fa      	movs	r1, #250	; 0xfa
 8001122:	200a      	movs	r0, #10
 8001124:	f000 ff5c 	bl	8001fe0 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 0s");
 8001128:	4a17      	ldr	r2, [pc, #92]	; (8001188 <UI_Drink_Water+0xf8>)
 800112a:	21fa      	movs	r1, #250	; 0xfa
 800112c:	200a      	movs	r0, #10
 800112e:	f001 f84f 	bl	80021d0 <LCD_DrawString>
	if(!darkmode_toggle) UI_Home_Display_Pet(60,70,water3);
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <UI_Drink_Water+0xe0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d105      	bne.n	8001146 <UI_Drink_Water+0xb6>
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <UI_Drink_Water+0xfc>)
 800113c:	2146      	movs	r1, #70	; 0x46
 800113e:	203c      	movs	r0, #60	; 0x3c
 8001140:	f000 f900 	bl	8001344 <UI_Home_Display_Pet>
 8001144:	e004      	b.n	8001150 <UI_Drink_Water+0xc0>
	else UI_Home_Display_Pet(60,70,water3_night);
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <UI_Drink_Water+0x100>)
 8001148:	2146      	movs	r1, #70	; 0x46
 800114a:	203c      	movs	r0, #60	; 0x3c
 800114c:	f000 f8fa 	bl	8001344 <UI_Home_Display_Pet>
	HAL_Delay(1000);
 8001150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001154:	f005 fa0a 	bl	800656c <HAL_Delay>

	extern uint32_t lastdrink_raw;
	lastdrink_raw = RTC_raw();
 8001158:	f003 ffba 	bl	80050d0 <RTC_raw>
 800115c:	4603      	mov	r3, r0
 800115e:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <UI_Drink_Water+0x104>)
 8001160:	6013      	str	r3, [r2, #0]
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	08011bc8 	.word	0x08011bc8
 800116c:	08011be4 	.word	0x08011be4
 8001170:	20000a18 	.word	0x20000a18
 8001174:	08035848 	.word	0x08035848
 8001178:	0803c8d0 	.word	0x0803c8d0
 800117c:	08011bfc 	.word	0x08011bfc
 8001180:	08043958 	.word	0x08043958
 8001184:	0804a9e0 	.word	0x0804a9e0
 8001188:	08011c14 	.word	0x08011c14
 800118c:	08051a68 	.word	0x08051a68
 8001190:	08058af0 	.word	0x08058af0
 8001194:	20000bcc 	.word	0x20000bcc

08001198 <UI_Home>:

void UI_Home() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

	extern const unsigned char *petStats;
	UI_Home_Display_Button();
 800119c:	f000 f80e 	bl	80011bc <UI_Home_Display_Button>
	UI_Home_Display_Pet(60, 70, petStats);
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <UI_Home+0x20>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	2146      	movs	r1, #70	; 0x46
 80011a8:	203c      	movs	r0, #60	; 0x3c
 80011aa:	f000 f8cb 	bl	8001344 <UI_Home_Display_Pet>
	UI_Home_Display_DHT11();
 80011ae:	f000 f8db 	bl	8001368 <UI_Home_Display_DHT11>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000004 	.word	0x20000004

080011bc <UI_Home_Display_Button>:

void UI_Home_Display_Button() {
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 80011c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011c4:	22f0      	movs	r2, #240	; 0xf0
 80011c6:	2100      	movs	r1, #0
 80011c8:	2000      	movs	r0, #0
 80011ca:	f000 ff09 	bl	8001fe0 <LCD_Clear>
	LCD_DrawString(2, 10, "Config");
 80011ce:	4a19      	ldr	r2, [pc, #100]	; (8001234 <UI_Home_Display_Button+0x78>)
 80011d0:	210a      	movs	r1, #10
 80011d2:	2002      	movs	r0, #2
 80011d4:	f000 fffc 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(200, 10, "Stats");
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <UI_Home_Display_Button+0x7c>)
 80011da:	210a      	movs	r1, #10
 80011dc:	20c8      	movs	r0, #200	; 0xc8
 80011de:	f000 fff7 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(40, 220, "Set");
 80011e2:	4a16      	ldr	r2, [pc, #88]	; (800123c <UI_Home_Display_Button+0x80>)
 80011e4:	21dc      	movs	r1, #220	; 0xdc
 80011e6:	2028      	movs	r0, #40	; 0x28
 80011e8:	f000 fff2 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(40, 240, "Exercise");
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <UI_Home_Display_Button+0x84>)
 80011ee:	21f0      	movs	r1, #240	; 0xf0
 80011f0:	2028      	movs	r0, #40	; 0x28
 80011f2:	f000 ffed 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(40, 260, "Timer");
 80011f6:	4a13      	ldr	r2, [pc, #76]	; (8001244 <UI_Home_Display_Button+0x88>)
 80011f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80011fc:	2028      	movs	r0, #40	; 0x28
 80011fe:	f000 ffe7 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(140, 220, "Drink");
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <UI_Home_Display_Button+0x8c>)
 8001204:	21dc      	movs	r1, #220	; 0xdc
 8001206:	208c      	movs	r0, #140	; 0x8c
 8001208:	f000 ffe2 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(140, 240, "water");
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <UI_Home_Display_Button+0x90>)
 800120e:	21f0      	movs	r1, #240	; 0xf0
 8001210:	208c      	movs	r0, #140	; 0x8c
 8001212:	f000 ffdd 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(200, 260, "Dark");
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <UI_Home_Display_Button+0x94>)
 8001218:	f44f 7182 	mov.w	r1, #260	; 0x104
 800121c:	20c8      	movs	r0, #200	; 0xc8
 800121e:	f000 ffd7 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(200, 280, "mode");
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <UI_Home_Display_Button+0x98>)
 8001224:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001228:	20c8      	movs	r0, #200	; 0xc8
 800122a:	f000 ffd1 	bl	80021d0 <LCD_DrawString>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	08011c2c 	.word	0x08011c2c
 8001238:	08011c34 	.word	0x08011c34
 800123c:	08011c3c 	.word	0x08011c3c
 8001240:	08011c40 	.word	0x08011c40
 8001244:	08011c4c 	.word	0x08011c4c
 8001248:	08011c54 	.word	0x08011c54
 800124c:	08011c5c 	.word	0x08011c5c
 8001250:	08011c64 	.word	0x08011c64
 8001254:	08011c6c 	.word	0x08011c6c

08001258 <UI_Home_Display_Date>:

void UI_Home_Display_Date(uint16_t year, uint8_t month, uint8_t day) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
 8001262:	460b      	mov	r3, r1
 8001264:	717b      	strb	r3, [r7, #5]
 8001266:	4613      	mov	r3, r2
 8001268:	713b      	strb	r3, [r7, #4]
	char str[10];

	//Draw Year
	sprintf(str, "%04i", year);
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4915      	ldr	r1, [pc, #84]	; (80012c8 <UI_Home_Display_Date+0x70>)
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fca8 	bl	8004bc8 <sprintf_>
	LCD_DrawString(86, 10, str);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	461a      	mov	r2, r3
 800127e:	210a      	movs	r1, #10
 8001280:	2056      	movs	r0, #86	; 0x56
 8001282:	f000 ffa5 	bl	80021d0 <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", month);
 8001286:	797a      	ldrb	r2, [r7, #5]
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	490f      	ldr	r1, [pc, #60]	; (80012cc <UI_Home_Display_Date+0x74>)
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fc9a 	bl	8004bc8 <sprintf_>
	LCD_DrawString(125, 10, str);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	461a      	mov	r2, r3
 800129a:	210a      	movs	r1, #10
 800129c:	207d      	movs	r0, #125	; 0x7d
 800129e:	f000 ff97 	bl	80021d0 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", day);
 80012a2:	793a      	ldrb	r2, [r7, #4]
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4908      	ldr	r1, [pc, #32]	; (80012cc <UI_Home_Display_Date+0x74>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fc8c 	bl	8004bc8 <sprintf_>
	LCD_DrawString(145, 10, str);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	461a      	mov	r2, r3
 80012b6:	210a      	movs	r1, #10
 80012b8:	2091      	movs	r0, #145	; 0x91
 80012ba:	f000 ff89 	bl	80021d0 <LCD_DrawString>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08011c74 	.word	0x08011c74
 80012cc:	08011c7c 	.word	0x08011c7c

080012d0 <UI_Home_Display_Time>:

void UI_Home_Display_Time(uint8_t hour, uint8_t minute, uint8_t second) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	460b      	mov	r3, r1
 80012dc:	71bb      	strb	r3, [r7, #6]
 80012de:	4613      	mov	r3, r2
 80012e0:	717b      	strb	r3, [r7, #5]
	char str[10];

	//Draw Hour
	sprintf(str, "%02i", hour);
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4915      	ldr	r1, [pc, #84]	; (8001340 <UI_Home_Display_Time+0x70>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fc6c 	bl	8004bc8 <sprintf_>
	LCD_DrawString(95, 30, str);
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	461a      	mov	r2, r3
 80012f6:	211e      	movs	r1, #30
 80012f8:	205f      	movs	r0, #95	; 0x5f
 80012fa:	f000 ff69 	bl	80021d0 <LCD_DrawString>

	//Draw Minute
	sprintf(str, "%02i", minute);
 80012fe:	79ba      	ldrb	r2, [r7, #6]
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <UI_Home_Display_Time+0x70>)
 8001306:	4618      	mov	r0, r3
 8001308:	f003 fc5e 	bl	8004bc8 <sprintf_>
	LCD_DrawString(115, 30, str);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	461a      	mov	r2, r3
 8001312:	211e      	movs	r1, #30
 8001314:	2073      	movs	r0, #115	; 0x73
 8001316:	f000 ff5b 	bl	80021d0 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", second);
 800131a:	797a      	ldrb	r2, [r7, #5]
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <UI_Home_Display_Time+0x70>)
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fc50 	bl	8004bc8 <sprintf_>
	LCD_DrawString(135, 30, str);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	461a      	mov	r2, r3
 800132e:	211e      	movs	r1, #30
 8001330:	2087      	movs	r0, #135	; 0x87
 8001332:	f000 ff4d 	bl	80021d0 <LCD_DrawString>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08011c7c 	.word	0x08011c7c

08001344 <UI_Home_Display_Pet>:

void UI_Home_Display_Pet(uint16_t StartX, uint16_t StartY, unsigned char *pic) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	603a      	str	r2, [r7, #0]
 800134e:	80fb      	strh	r3, [r7, #6]
 8001350:	460b      	mov	r3, r1
 8001352:	80bb      	strh	r3, [r7, #4]

	LCD_DrawPicture(StartX, StartY, pic);
 8001354:	88b9      	ldrh	r1, [r7, #4]
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f001 f98c 	bl	8002678 <LCD_DrawPicture>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <UI_Home_Display_DHT11>:

void UI_Home_Display_DHT11() {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
	extern DHT11_datastruct DHT11_data;
	char Stemp[10];
	char Shum[10];
	sprintf(Stemp, "%02i", DHT11_data.temp_int);
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <UI_Home_Display_DHT11+0xa0>)
 8001370:	789b      	ldrb	r3, [r3, #2]
 8001372:	461a      	mov	r2, r3
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4924      	ldr	r1, [pc, #144]	; (800140c <UI_Home_Display_DHT11+0xa4>)
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fc24 	bl	8004bc8 <sprintf_>
	LCD_DrawString(10, 50, "T");
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <UI_Home_Display_DHT11+0xa8>)
 8001382:	2132      	movs	r1, #50	; 0x32
 8001384:	200a      	movs	r0, #10
 8001386:	f000 ff23 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(0, 70, Stemp);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	461a      	mov	r2, r3
 8001390:	2146      	movs	r1, #70	; 0x46
 8001392:	2000      	movs	r0, #0
 8001394:	f000 ff1c 	bl	80021d0 <LCD_DrawString>
	if (LCD_GetPointPixel(240, 320) == 0x000000) {
 8001398:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800139c:	20f0      	movs	r0, #240	; 0xf0
 800139e:	f000 fea3 	bl	80020e8 <LCD_GetPointPixel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d107      	bne.n	80013b8 <UI_Home_Display_DHT11+0x50>
		LCD_DrawCircle(17, 72, 2, WHITE);
 80013a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ac:	2202      	movs	r2, #2
 80013ae:	2148      	movs	r1, #72	; 0x48
 80013b0:	2011      	movs	r0, #17
 80013b2:	f000 ff5d 	bl	8002270 <LCD_DrawCircle>
 80013b6:	e005      	b.n	80013c4 <UI_Home_Display_DHT11+0x5c>
	} else {
		LCD_DrawCircle(17, 72, 2, BLACK);
 80013b8:	2300      	movs	r3, #0
 80013ba:	2202      	movs	r2, #2
 80013bc:	2148      	movs	r1, #72	; 0x48
 80013be:	2011      	movs	r0, #17
 80013c0:	f000 ff56 	bl	8002270 <LCD_DrawCircle>
	}
	LCD_DrawString(20, 70, "C");
 80013c4:	4a13      	ldr	r2, [pc, #76]	; (8001414 <UI_Home_Display_DHT11+0xac>)
 80013c6:	2146      	movs	r1, #70	; 0x46
 80013c8:	2014      	movs	r0, #20
 80013ca:	f000 ff01 	bl	80021d0 <LCD_DrawString>
	sprintf(Shum, "%03i", DHT11_data.humid_int);
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <UI_Home_Display_DHT11+0xa0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	463b      	mov	r3, r7
 80013d6:	4910      	ldr	r1, [pc, #64]	; (8001418 <UI_Home_Display_DHT11+0xb0>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 fbf5 	bl	8004bc8 <sprintf_>
	LCD_DrawString(220, 50, "H");
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <UI_Home_Display_DHT11+0xb4>)
 80013e0:	2132      	movs	r1, #50	; 0x32
 80013e2:	20dc      	movs	r0, #220	; 0xdc
 80013e4:	f000 fef4 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(205, 70, Shum);
 80013e8:	463b      	mov	r3, r7
 80013ea:	461a      	mov	r2, r3
 80013ec:	2146      	movs	r1, #70	; 0x46
 80013ee:	20cd      	movs	r0, #205	; 0xcd
 80013f0:	f000 feee 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(230, 70, "%");
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <UI_Home_Display_DHT11+0xb8>)
 80013f6:	2146      	movs	r1, #70	; 0x46
 80013f8:	20e6      	movs	r0, #230	; 0xe6
 80013fa:	f000 fee9 	bl	80021d0 <LCD_DrawString>

}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000bb4 	.word	0x20000bb4
 800140c:	08011c7c 	.word	0x08011c7c
 8001410:	08011c84 	.word	0x08011c84
 8001414:	08011c88 	.word	0x08011c88
 8001418:	08011c8c 	.word	0x08011c8c
 800141c:	08011c94 	.word	0x08011c94
 8001420:	08011c98 	.word	0x08011c98

08001424 <UI_Stats>:

void UI_Stats() {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001428:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800142c:	22f0      	movs	r2, #240	; 0xf0
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f000 fdd5 	bl	8001fe0 <LCD_Clear>
	LCD_DrawString(40, 50, "Time since last drink");
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <UI_Stats+0x44>)
 8001438:	2132      	movs	r1, #50	; 0x32
 800143a:	2028      	movs	r0, #40	; 0x28
 800143c:	f000 fec8 	bl	80021d0 <LCD_DrawString>

	UI_Stats_Update();
 8001440:	f000 f81a 	bl	8001478 <UI_Stats_Update>
	LCD_DrawString(80, 125, "Next drink");
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <UI_Stats+0x48>)
 8001446:	217d      	movs	r1, #125	; 0x7d
 8001448:	2050      	movs	r0, #80	; 0x50
 800144a:	f000 fec1 	bl	80021d0 <LCD_DrawString>
	//TODO: Time Of Next Water Drinking Event
	LCD_DrawString(70, 190, "Exercise Timer");
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <UI_Stats+0x4c>)
 8001450:	21be      	movs	r1, #190	; 0xbe
 8001452:	2046      	movs	r0, #70	; 0x46
 8001454:	f000 febc 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(70, 280, "Back to home");
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <UI_Stats+0x50>)
 800145a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800145e:	2046      	movs	r0, #70	; 0x46
 8001460:	f000 feb6 	bl	80021d0 <LCD_DrawString>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	08011c9c 	.word	0x08011c9c
 800146c:	08011cb4 	.word	0x08011cb4
 8001470:	08011cc0 	.word	0x08011cc0
 8001474:	08011cd0 	.word	0x08011cd0

08001478 <UI_Stats_Update>:
void UI_Stats_Update() {
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af02      	add	r7, sp, #8
	extern uint32_t lastupdate_raw, lastdrink_raw,lastexer_raw;
	uint32_t realtime_raw = RTC_raw();
 800147e:	f003 fe27 	bl	80050d0 <RTC_raw>
 8001482:	6278      	str	r0, [r7, #36]	; 0x24

	if (realtime_raw == lastupdate_raw)
 8001484:	4ba1      	ldr	r3, [pc, #644]	; (800170c <UI_Stats_Update+0x294>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148a:	429a      	cmp	r2, r3
 800148c:	f000 8139 	beq.w	8001702 <UI_Stats_Update+0x28a>
		return;
	uint32_t time_diff = realtime_raw - lastdrink_raw;
 8001490:	4b9f      	ldr	r3, [pc, #636]	; (8001710 <UI_Stats_Update+0x298>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	623b      	str	r3, [r7, #32]

	//Update New Last Drink
	lastupdate_raw = realtime_raw;
 800149a:	4a9c      	ldr	r2, [pc, #624]	; (800170c <UI_Stats_Update+0x294>)
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	6013      	str	r3, [r2, #0]

	char timestr[15];
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	4a9c      	ldr	r2, [pc, #624]	; (8001714 <UI_Stats_Update+0x29c>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0adc      	lsrs	r4, r3, #11
			(time_diff % 3600) / 60, time_diff % 60);
 80014aa:	6a3a      	ldr	r2, [r7, #32]
 80014ac:	4b99      	ldr	r3, [pc, #612]	; (8001714 <UI_Stats_Update+0x29c>)
 80014ae:	fba3 1302 	umull	r1, r3, r3, r2
 80014b2:	0adb      	lsrs	r3, r3, #11
 80014b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 80014be:	4a96      	ldr	r2, [pc, #600]	; (8001718 <UI_Stats_Update+0x2a0>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	095d      	lsrs	r5, r3, #5
 80014c6:	6a39      	ldr	r1, [r7, #32]
 80014c8:	4b93      	ldr	r3, [pc, #588]	; (8001718 <UI_Stats_Update+0x2a0>)
 80014ca:	fba3 2301 	umull	r2, r3, r3, r1
 80014ce:	095a      	lsrs	r2, r3, #5
 80014d0:	4613      	mov	r3, r2
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	1aca      	subs	r2, r1, r3
 80014da:	4638      	mov	r0, r7
 80014dc:	9200      	str	r2, [sp, #0]
 80014de:	462b      	mov	r3, r5
 80014e0:	4622      	mov	r2, r4
 80014e2:	498e      	ldr	r1, [pc, #568]	; (800171c <UI_Stats_Update+0x2a4>)
 80014e4:	f003 fb70 	bl	8004bc8 <sprintf_>
	LCD_DrawString(75, 85, timestr);
 80014e8:	463b      	mov	r3, r7
 80014ea:	461a      	mov	r2, r3
 80014ec:	2155      	movs	r1, #85	; 0x55
 80014ee:	204b      	movs	r0, #75	; 0x4b
 80014f0:	f000 fe6e 	bl	80021d0 <LCD_DrawString>
	extern DHT11_datastruct DHT11_data;
	extern int tilnext; // time till next drink
	extern uint32_t exertimer;
	extern int tilexer;

	double humid = DHT11_data.humid_int;
 80014f4:	4b8a      	ldr	r3, [pc, #552]	; (8001720 <UI_Stats_Update+0x2a8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ffdf 	bl	80004bc <__aeabi_ui2d>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double temp = DHT11_data.temp_int;
 8001506:	4b86      	ldr	r3, [pc, #536]	; (8001720 <UI_Stats_Update+0x2a8>)
 8001508:	789b      	ldrb	r3, [r3, #2]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ffd6 	bl	80004bc <__aeabi_ui2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (next == 9999) { //Initialize
 8001518:	4b82      	ldr	r3, [pc, #520]	; (8001724 <UI_Stats_Update+0x2ac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001520:	4293      	cmp	r3, r2
 8001522:	d15a      	bne.n	80015da <UI_Stats_Update+0x162>
		next = 2400 * (1 + (humid / 100)); //humidity
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b7f      	ldr	r3, [pc, #508]	; (8001728 <UI_Stats_Update+0x2b0>)
 800152a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800152e:	f7ff f969 	bl	8000804 <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b7b      	ldr	r3, [pc, #492]	; (800172c <UI_Stats_Update+0x2b4>)
 8001540:	f7fe fe80 	bl	8000244 <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b77      	ldr	r3, [pc, #476]	; (8001730 <UI_Stats_Update+0x2b8>)
 8001552:	f7ff f82d 	bl	80005b0 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff faff 	bl	8000b60 <__aeabi_d2uiz>
 8001562:	4603      	mov	r3, r0
 8001564:	4a6f      	ldr	r2, [pc, #444]	; (8001724 <UI_Stats_Update+0x2ac>)
 8001566:	6013      	str	r3, [r2, #0]
		if (temp > 26) {
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b71      	ldr	r3, [pc, #452]	; (8001734 <UI_Stats_Update+0x2bc>)
 800156e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001572:	f7ff faad 	bl	8000ad0 <__aeabi_dcmpgt>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d02e      	beq.n	80015da <UI_Stats_Update+0x162>
			next = next / (1 + (temp - 26) / 10); //temperature
 800157c:	4b69      	ldr	r3, [pc, #420]	; (8001724 <UI_Stats_Update+0x2ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ff9b 	bl	80004bc <__aeabi_ui2d>
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b69      	ldr	r3, [pc, #420]	; (8001734 <UI_Stats_Update+0x2bc>)
 8001590:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001594:	f7fe fe54 	bl	8000240 <__aeabi_dsub>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <UI_Stats_Update+0x2c0>)
 80015a6:	f7ff f92d 	bl	8000804 <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b5d      	ldr	r3, [pc, #372]	; (800172c <UI_Stats_Update+0x2b4>)
 80015b8:	f7fe fe44 	bl	8000244 <__adddf3>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7ff f91e 	bl	8000804 <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fac6 	bl	8000b60 <__aeabi_d2uiz>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a53      	ldr	r2, [pc, #332]	; (8001724 <UI_Stats_Update+0x2ac>)
 80015d8:	6013      	str	r3, [r2, #0]
		}
	}
	tilnext = next - time_diff;
 80015da:	4b52      	ldr	r3, [pc, #328]	; (8001724 <UI_Stats_Update+0x2ac>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b55      	ldr	r3, [pc, #340]	; (800173c <UI_Stats_Update+0x2c4>)
 80015e6:	601a      	str	r2, [r3, #0]
	if (tilnext < 0) {
 80015e8:	4b54      	ldr	r3, [pc, #336]	; (800173c <UI_Stats_Update+0x2c4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da02      	bge.n	80015f6 <UI_Stats_Update+0x17e>
		tilnext = 0;
 80015f0:	4b52      	ldr	r3, [pc, #328]	; (800173c <UI_Stats_Update+0x2c4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
	}

	sprintf(timestr, "%02d : %02d : %02d", tilnext / 3600,
 80015f6:	4b51      	ldr	r3, [pc, #324]	; (800173c <UI_Stats_Update+0x2c4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a46      	ldr	r2, [pc, #280]	; (8001714 <UI_Stats_Update+0x29c>)
 80015fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001600:	441a      	add	r2, r3
 8001602:	12d2      	asrs	r2, r2, #11
 8001604:	17db      	asrs	r3, r3, #31
 8001606:	1ad4      	subs	r4, r2, r3
			(tilnext % 3600) / 60, tilnext % 60);
 8001608:	4b4c      	ldr	r3, [pc, #304]	; (800173c <UI_Stats_Update+0x2c4>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <UI_Stats_Update+0x29c>)
 800160e:	fb83 1302 	smull	r1, r3, r3, r2
 8001612:	4413      	add	r3, r2
 8001614:	12d9      	asrs	r1, r3, #11
 8001616:	17d3      	asrs	r3, r2, #31
 8001618:	1acb      	subs	r3, r1, r3
 800161a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", tilnext / 3600,
 8001624:	4a3c      	ldr	r2, [pc, #240]	; (8001718 <UI_Stats_Update+0x2a0>)
 8001626:	fb82 1203 	smull	r1, r2, r2, r3
 800162a:	441a      	add	r2, r3
 800162c:	1152      	asrs	r2, r2, #5
 800162e:	17db      	asrs	r3, r3, #31
 8001630:	1ad5      	subs	r5, r2, r3
 8001632:	4b42      	ldr	r3, [pc, #264]	; (800173c <UI_Stats_Update+0x2c4>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <UI_Stats_Update+0x2a0>)
 8001638:	fb83 1302 	smull	r1, r3, r3, r2
 800163c:	4413      	add	r3, r2
 800163e:	1159      	asrs	r1, r3, #5
 8001640:	17d3      	asrs	r3, r2, #31
 8001642:	1ac9      	subs	r1, r1, r3
 8001644:	460b      	mov	r3, r1
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a5b      	subs	r3, r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	1ad1      	subs	r1, r2, r3
 800164e:	4638      	mov	r0, r7
 8001650:	9100      	str	r1, [sp, #0]
 8001652:	462b      	mov	r3, r5
 8001654:	4622      	mov	r2, r4
 8001656:	4931      	ldr	r1, [pc, #196]	; (800171c <UI_Stats_Update+0x2a4>)
 8001658:	f003 fab6 	bl	8004bc8 <sprintf_>
	LCD_DrawString(75, 155, timestr);
 800165c:	463b      	mov	r3, r7
 800165e:	461a      	mov	r2, r3
 8001660:	219b      	movs	r1, #155	; 0x9b
 8001662:	204b      	movs	r0, #75	; 0x4b
 8001664:	f000 fdb4 	bl	80021d0 <LCD_DrawString>

	time_diff = realtime_raw - lastexer_raw;
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <UI_Stats_Update+0x2c8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	623b      	str	r3, [r7, #32]
	tilexer = exertimer - time_diff;
 8001672:	4b34      	ldr	r3, [pc, #208]	; (8001744 <UI_Stats_Update+0x2cc>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	461a      	mov	r2, r3
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <UI_Stats_Update+0x2d0>)
 800167e:	601a      	str	r2, [r3, #0]
	if (tilexer < 0) {
 8001680:	4b31      	ldr	r3, [pc, #196]	; (8001748 <UI_Stats_Update+0x2d0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da02      	bge.n	800168e <UI_Stats_Update+0x216>
			tilexer = 0;
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <UI_Stats_Update+0x2d0>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
		}
	sprintf(timestr, "%02d : %02d : %02d", tilexer / 3600,
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <UI_Stats_Update+0x2d0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a20      	ldr	r2, [pc, #128]	; (8001714 <UI_Stats_Update+0x29c>)
 8001694:	fb82 1203 	smull	r1, r2, r2, r3
 8001698:	441a      	add	r2, r3
 800169a:	12d2      	asrs	r2, r2, #11
 800169c:	17db      	asrs	r3, r3, #31
 800169e:	1ad4      	subs	r4, r2, r3
				(tilexer % 3600) / 60, tilexer % 60);
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <UI_Stats_Update+0x2d0>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <UI_Stats_Update+0x29c>)
 80016a6:	fb83 1302 	smull	r1, r3, r3, r2
 80016aa:	4413      	add	r3, r2
 80016ac:	12d9      	asrs	r1, r3, #11
 80016ae:	17d3      	asrs	r3, r2, #31
 80016b0:	1acb      	subs	r3, r1, r3
 80016b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", tilexer / 3600,
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <UI_Stats_Update+0x2a0>)
 80016be:	fb82 1203 	smull	r1, r2, r2, r3
 80016c2:	441a      	add	r2, r3
 80016c4:	1152      	asrs	r2, r2, #5
 80016c6:	17db      	asrs	r3, r3, #31
 80016c8:	1ad5      	subs	r5, r2, r3
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <UI_Stats_Update+0x2d0>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <UI_Stats_Update+0x2a0>)
 80016d0:	fb83 1302 	smull	r1, r3, r3, r2
 80016d4:	4413      	add	r3, r2
 80016d6:	1159      	asrs	r1, r3, #5
 80016d8:	17d3      	asrs	r3, r2, #31
 80016da:	1ac9      	subs	r1, r1, r3
 80016dc:	460b      	mov	r3, r1
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a5b      	subs	r3, r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	1ad1      	subs	r1, r2, r3
 80016e6:	4638      	mov	r0, r7
 80016e8:	9100      	str	r1, [sp, #0]
 80016ea:	462b      	mov	r3, r5
 80016ec:	4622      	mov	r2, r4
 80016ee:	490b      	ldr	r1, [pc, #44]	; (800171c <UI_Stats_Update+0x2a4>)
 80016f0:	f003 fa6a 	bl	8004bc8 <sprintf_>
	LCD_DrawString(75, 205, timestr);
 80016f4:	463b      	mov	r3, r7
 80016f6:	461a      	mov	r2, r3
 80016f8:	21cd      	movs	r1, #205	; 0xcd
 80016fa:	204b      	movs	r0, #75	; 0x4b
 80016fc:	f000 fd68 	bl	80021d0 <LCD_DrawString>
 8001700:	e000      	b.n	8001704 <UI_Stats_Update+0x28c>
		return;
 8001702:	bf00      	nop
}
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bdb0      	pop	{r4, r5, r7, pc}
 800170a:	bf00      	nop
 800170c:	20000bc8 	.word	0x20000bc8
 8001710:	20000bcc 	.word	0x20000bcc
 8001714:	91a2b3c5 	.word	0x91a2b3c5
 8001718:	88888889 	.word	0x88888889
 800171c:	08011ce0 	.word	0x08011ce0
 8001720:	20000bb4 	.word	0x20000bb4
 8001724:	20000000 	.word	0x20000000
 8001728:	40590000 	.word	0x40590000
 800172c:	3ff00000 	.word	0x3ff00000
 8001730:	40a2c000 	.word	0x40a2c000
 8001734:	403a0000 	.word	0x403a0000
 8001738:	40240000 	.word	0x40240000
 800173c:	20000bd4 	.word	0x20000bd4
 8001740:	20000bd0 	.word	0x20000bd0
 8001744:	20000bdc 	.word	0x20000bdc
 8001748:	20000be0 	.word	0x20000be0

0800174c <UI_Set>:

void UI_Set() {
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001752:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001756:	22f0      	movs	r2, #240	; 0xf0
 8001758:	2100      	movs	r1, #0
 800175a:	2000      	movs	r0, #0
 800175c:	f000 fc40 	bl	8001fe0 <LCD_Clear>
	extern exertime;
	LCD_DrawString(80, 50, "Hour");
 8001760:	4a25      	ldr	r2, [pc, #148]	; (80017f8 <UI_Set+0xac>)
 8001762:	2132      	movs	r1, #50	; 0x32
 8001764:	2050      	movs	r0, #80	; 0x50
 8001766:	f000 fd33 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(140, 50, "Minute");
 800176a:	4a24      	ldr	r2, [pc, #144]	; (80017fc <UI_Set+0xb0>)
 800176c:	2132      	movs	r1, #50	; 0x32
 800176e:	208c      	movs	r0, #140	; 0x8c
 8001770:	f000 fd2e 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(80, 90, " +       + ");
 8001774:	4a22      	ldr	r2, [pc, #136]	; (8001800 <UI_Set+0xb4>)
 8001776:	215a      	movs	r1, #90	; 0x5a
 8001778:	2050      	movs	r0, #80	; 0x50
 800177a:	f000 fd29 	bl	80021d0 <LCD_DrawString>
	char time[16];
	sprintf(time, "%02d : %02d", exertime / 3600, (exertime % 3600) / 60);
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <UI_Set+0xb8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a21      	ldr	r2, [pc, #132]	; (8001808 <UI_Set+0xbc>)
 8001784:	fb82 1203 	smull	r1, r2, r2, r3
 8001788:	441a      	add	r2, r3
 800178a:	12d2      	asrs	r2, r2, #11
 800178c:	17db      	asrs	r3, r3, #31
 800178e:	1ad4      	subs	r4, r2, r3
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <UI_Set+0xb8>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <UI_Set+0xbc>)
 8001796:	fb83 1302 	smull	r1, r3, r3, r2
 800179a:	4413      	add	r3, r2
 800179c:	12d9      	asrs	r1, r3, #11
 800179e:	17d3      	asrs	r3, r2, #31
 80017a0:	1acb      	subs	r3, r1, r3
 80017a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <UI_Set+0xc0>)
 80017ae:	fb82 1203 	smull	r1, r2, r2, r3
 80017b2:	441a      	add	r2, r3
 80017b4:	1152      	asrs	r2, r2, #5
 80017b6:	17db      	asrs	r3, r3, #31
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	4638      	mov	r0, r7
 80017bc:	4622      	mov	r2, r4
 80017be:	4914      	ldr	r1, [pc, #80]	; (8001810 <UI_Set+0xc4>)
 80017c0:	f003 fa02 	bl	8004bc8 <sprintf_>
	LCD_DrawString(90, 130, time);
 80017c4:	463b      	mov	r3, r7
 80017c6:	461a      	mov	r2, r3
 80017c8:	2182      	movs	r1, #130	; 0x82
 80017ca:	205a      	movs	r0, #90	; 0x5a
 80017cc:	f000 fd00 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(80, 170, " -       -");
 80017d0:	4a10      	ldr	r2, [pc, #64]	; (8001814 <UI_Set+0xc8>)
 80017d2:	21aa      	movs	r1, #170	; 0xaa
 80017d4:	2050      	movs	r0, #80	; 0x50
 80017d6:	f000 fcfb 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(100, 240, "Set");
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <UI_Set+0xcc>)
 80017dc:	21f0      	movs	r1, #240	; 0xf0
 80017de:	2064      	movs	r0, #100	; 0x64
 80017e0:	f000 fcf6 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(70, 280, "Back to home");
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <UI_Set+0xd0>)
 80017e6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80017ea:	2046      	movs	r0, #70	; 0x46
 80017ec:	f000 fcf0 	bl	80021d0 <LCD_DrawString>
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	08011cf4 	.word	0x08011cf4
 80017fc:	08011cfc 	.word	0x08011cfc
 8001800:	08011d04 	.word	0x08011d04
 8001804:	20000bd8 	.word	0x20000bd8
 8001808:	91a2b3c5 	.word	0x91a2b3c5
 800180c:	88888889 	.word	0x88888889
 8001810:	08011d10 	.word	0x08011d10
 8001814:	08011d1c 	.word	0x08011d1c
 8001818:	08011c3c 	.word	0x08011c3c
 800181c:	08011cd0 	.word	0x08011cd0

08001820 <UI_Set_Update>:
void UI_Set_Update() {
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
	extern exertime;
	char time[16];
	sprintf(time, "%02d : %02d", exertime / 3600, (exertime % 3600) / 60);
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <UI_Set_Update+0x60>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a16      	ldr	r2, [pc, #88]	; (8001884 <UI_Set_Update+0x64>)
 800182c:	fb82 1203 	smull	r1, r2, r2, r3
 8001830:	441a      	add	r2, r3
 8001832:	12d2      	asrs	r2, r2, #11
 8001834:	17db      	asrs	r3, r3, #31
 8001836:	1ad4      	subs	r4, r2, r3
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <UI_Set_Update+0x60>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <UI_Set_Update+0x64>)
 800183e:	fb83 1302 	smull	r1, r3, r3, r2
 8001842:	4413      	add	r3, r2
 8001844:	12d9      	asrs	r1, r3, #11
 8001846:	17d3      	asrs	r3, r2, #31
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <UI_Set_Update+0x68>)
 8001856:	fb82 1203 	smull	r1, r2, r2, r3
 800185a:	441a      	add	r2, r3
 800185c:	1152      	asrs	r2, r2, #5
 800185e:	17db      	asrs	r3, r3, #31
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	4638      	mov	r0, r7
 8001864:	4622      	mov	r2, r4
 8001866:	4909      	ldr	r1, [pc, #36]	; (800188c <UI_Set_Update+0x6c>)
 8001868:	f003 f9ae 	bl	8004bc8 <sprintf_>
	LCD_DrawString(90, 130, time);
 800186c:	463b      	mov	r3, r7
 800186e:	461a      	mov	r2, r3
 8001870:	2182      	movs	r1, #130	; 0x82
 8001872:	205a      	movs	r0, #90	; 0x5a
 8001874:	f000 fcac 	bl	80021d0 <LCD_DrawString>
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	20000bd8 	.word	0x20000bd8
 8001884:	91a2b3c5 	.word	0x91a2b3c5
 8001888:	88888889 	.word	0x88888889
 800188c:	08011d10 	.word	0x08011d10

08001890 <UI_Config>:

void UI_Config(){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001894:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001898:	22f0      	movs	r2, #240	; 0xf0
 800189a:	2100      	movs	r1, #0
 800189c:	2000      	movs	r0, #0
 800189e:	f000 fb9f 	bl	8001fe0 <LCD_Clear>
	LCD_DrawString(40, 50, "- Set Time");
 80018a2:	4a06      	ldr	r2, [pc, #24]	; (80018bc <UI_Config+0x2c>)
 80018a4:	2132      	movs	r1, #50	; 0x32
 80018a6:	2028      	movs	r0, #40	; 0x28
 80018a8:	f000 fc92 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(10, 280, "Back");
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <UI_Config+0x30>)
 80018ae:	f44f 718c 	mov.w	r1, #280	; 0x118
 80018b2:	200a      	movs	r0, #10
 80018b4:	f000 fc8c 	bl	80021d0 <LCD_DrawString>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08011d28 	.word	0x08011d28
 80018c0:	08011d34 	.word	0x08011d34

080018c4 <UI_Time_set>:

void UI_Time_set(){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 80018c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018cc:	22f0      	movs	r2, #240	; 0xf0
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 fb85 	bl	8001fe0 <LCD_Clear>
	LCD_DrawString(90, 50, "Set Time");
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <UI_Time_set+0x34>)
 80018d8:	2132      	movs	r1, #50	; 0x32
 80018da:	205a      	movs	r0, #90	; 0x5a
 80018dc:	f000 fc78 	bl	80021d0 <LCD_DrawString>
	LCD_DrawString(10, 280, "Back");
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <UI_Time_set+0x38>)
 80018e2:	f44f 718c 	mov.w	r1, #280	; 0x118
 80018e6:	200a      	movs	r0, #10
 80018e8:	f000 fc72 	bl	80021d0 <LCD_DrawString>
	//Handle In Main
	printf("Pleas Input Date Time: yyyymmddhhmmss");
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <UI_Time_set+0x3c>)
 80018ee:	f003 f94f 	bl	8004b90 <printf_>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	08011d3c 	.word	0x08011d3c
 80018fc:	08011d34 	.word	0x08011d34
 8001900:	08011d48 	.word	0x08011d48

08001904 <Beep_start>:

void Buzzer_INIT(){
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
}

void Beep_start(){
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
		HAL_Delay(50);
	}
	*/
	extern TIM_HandleTypeDef htim1;
	TIM_OC_InitTypeDef sConfigOC = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191c:	2360      	movs	r3, #96	; 0x60
 800191e:	607b      	str	r3, [r7, #4]

	//Change Sound (PWM)
	htim1.Init.Prescaler = 63999;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <Beep_start+0x50>)
 8001922:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001926:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = 1124;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <Beep_start+0x50>)
 800192a:	f240 4264 	movw	r2, #1124	; 0x464
 800192e:	60da      	str	r2, [r3, #12]
	sConfigOC.Pulse = 562;
 8001930:	f240 2332 	movw	r3, #562	; 0x232
 8001934:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <Beep_start+0x50>)
 800193e:	f006 faa7 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>

	//Start Beeping
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001942:	2100      	movs	r1, #0
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <Beep_start+0x50>)
 8001946:	f006 f967 	bl	8007c18 <HAL_TIM_PWM_Start>
}
 800194a:	bf00      	nop
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000a30 	.word	0x20000a30

08001958 <DHT11_IO_OUT>:
#include "dht11.h"
#include "printf.h"
#include "timer.h"

void DHT11_IO_OUT(void) //Set Pin As Output
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 800195e:	463b      	mov	r3, r7
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800196a:	2340      	movs	r3, #64	; 0x40
 800196c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197a:	463b      	mov	r3, r7
 800197c:	4619      	mov	r1, r3
 800197e:	4803      	ldr	r0, [pc, #12]	; (800198c <DHT11_IO_OUT+0x34>)
 8001980:	f004 ff22 	bl	80067c8 <HAL_GPIO_Init>
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40011800 	.word	0x40011800

08001990 <DHT11_IO_IN>:

void DHT11_IO_IN(void) //Set Pin As Input
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a2:	2340      	movs	r3, #64	; 0x40
 80019a4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ae:	463b      	mov	r3, r7
 80019b0:	4619      	mov	r1, r3
 80019b2:	4803      	ldr	r0, [pc, #12]	; (80019c0 <DHT11_IO_IN+0x30>)
 80019b4:	f004 ff08 	bl	80067c8 <HAL_GPIO_Init>
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40011800 	.word	0x40011800

080019c4 <DHT11_RST>:

void DHT11_RST(){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	DHT11_IO_OUT();
 80019c8:	f7ff ffc6 	bl	8001958 <DHT11_IO_OUT>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2140      	movs	r1, #64	; 0x40
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <DHT11_RST+0x2c>)
 80019d2:	f005 f8a8 	bl	8006b26 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80019d6:	2014      	movs	r0, #20
 80019d8:	f004 fdc8 	bl	800656c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	2140      	movs	r1, #64	; 0x40
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <DHT11_RST+0x2c>)
 80019e2:	f005 f8a0 	bl	8006b26 <HAL_GPIO_WritePin>
	delay_us(30);
 80019e6:	201e      	movs	r0, #30
 80019e8:	f003 fec4 	bl	8005774 <delay_us>
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40011800 	.word	0x40011800

080019f4 <Dht11_Check>:

uint8_t Dht11_Check(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]
	DHT11_IO_IN();
 80019fe:	f7ff ffc7 	bl	8001990 <DHT11_IO_IN>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001a02:	e005      	b.n	8001a10 <Dht11_Check+0x1c>
		++retry;
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	3301      	adds	r3, #1
 8001a08:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f003 feb2 	bl	8005774 <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001a10:	2140      	movs	r1, #64	; 0x40
 8001a12:	4815      	ldr	r0, [pc, #84]	; (8001a68 <Dht11_Check+0x74>)
 8001a14:	f005 f870 	bl	8006af8 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <Dht11_Check+0x30>
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b63      	cmp	r3, #99	; 0x63
 8001a22:	d9ef      	bls.n	8001a04 <Dht11_Check+0x10>
	}
	if(retry>=100)return 1; else retry=0;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b63      	cmp	r3, #99	; 0x63
 8001a28:	d901      	bls.n	8001a2e <Dht11_Check+0x3a>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e018      	b.n	8001a60 <Dht11_Check+0x6c>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71fb      	strb	r3, [r7, #7]
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001a32:	e005      	b.n	8001a40 <Dht11_Check+0x4c>
		++retry;
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	3301      	adds	r3, #1
 8001a38:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f003 fe9a 	bl	8005774 <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001a40:	2140      	movs	r1, #64	; 0x40
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <Dht11_Check+0x74>)
 8001a44:	f005 f858 	bl	8006af8 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <Dht11_Check+0x60>
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	2b63      	cmp	r3, #99	; 0x63
 8001a52:	d9ef      	bls.n	8001a34 <Dht11_Check+0x40>
	}
	if(retry>=100)return 1;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2b63      	cmp	r3, #99	; 0x63
 8001a58:	d901      	bls.n	8001a5e <Dht11_Check+0x6a>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <Dht11_Check+0x6c>
	return 0;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40011800 	.word	0x40011800

08001a6c <DHT11_Init>:

uint8_t DHT11_Init(){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	DHT11_RST();
 8001a70:	f7ff ffa8 	bl	80019c4 <DHT11_RST>
	return Dht11_Check();
 8001a74:	f7ff ffbe 	bl	80019f4 <Dht11_Check>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	71fb      	strb	r3, [r7, #7]
	//Wait For Last Set signal end
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001a8a:	e005      	b.n	8001a98 <DHT11_ReadBit+0x18>
		++retry;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f003 fe6e 	bl	8005774 <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001a98:	2140      	movs	r1, #64	; 0x40
 8001a9a:	4816      	ldr	r0, [pc, #88]	; (8001af4 <DHT11_ReadBit+0x74>)
 8001a9c:	f005 f82c 	bl	8006af8 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <DHT11_ReadBit+0x2c>
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b63      	cmp	r3, #99	; 0x63
 8001aaa:	d9ef      	bls.n	8001a8c <DHT11_ReadBit+0xc>
	}
	retry = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	71fb      	strb	r3, [r7, #7]
	//Wait For New Set Signal Begin
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001ab0:	e005      	b.n	8001abe <DHT11_ReadBit+0x3e>
		++retry;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f003 fe5b 	bl	8005774 <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <DHT11_ReadBit+0x74>)
 8001ac2:	f005 f819 	bl	8006af8 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <DHT11_ReadBit+0x52>
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b63      	cmp	r3, #99	; 0x63
 8001ad0:	d9ef      	bls.n	8001ab2 <DHT11_ReadBit+0x32>
	}
	//0: 26-28us   1:70us
	delay_us(40);
 8001ad2:	2028      	movs	r0, #40	; 0x28
 8001ad4:	f003 fe4e 	bl	8005774 <delay_us>
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)) return 1; else return 0;
 8001ad8:	2140      	movs	r1, #64	; 0x40
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <DHT11_ReadBit+0x74>)
 8001adc:	f005 f80c 	bl	8006af8 <HAL_GPIO_ReadPin>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <DHT11_ReadBit+0x6a>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <DHT11_ReadBit+0x6c>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40011800 	.word	0x40011800

08001af8 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	uint8_t i,dat;
	dat=0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 8001b02:	2300      	movs	r3, #0
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	e00c      	b.n	8001b22 <DHT11_ReadByte+0x2a>
		dat<<=1;
 8001b08:	79bb      	ldrb	r3, [r7, #6]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	71bb      	strb	r3, [r7, #6]
		dat|=DHT11_ReadBit();
 8001b0e:	f7ff ffb7 	bl	8001a80 <DHT11_ReadBit>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	79bb      	ldrb	r3, [r7, #6]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	d9ef      	bls.n	8001b08 <DHT11_ReadByte+0x10>
	}
	return dat;
 8001b28:	79bb      	ldrb	r3, [r7, #6]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <DHT11_ReadData>:


uint8_t DHT11_ReadData(DHT11_datastruct *ds){
 8001b32:	b590      	push	{r4, r7, lr}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
	uint8_t buf[5];
	uint8_t i;
	//Reset and Check
	if(DHT11_Init()==0){
 8001b3a:	f7ff ff97 	bl	8001a6c <DHT11_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d133      	bne.n	8001bac <DHT11_ReadData+0x7a>
		for(i=0;i<5;++i){
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e00c      	b.n	8001b64 <DHT11_ReadData+0x32>
			buf[i]=DHT11_ReadByte();
 8001b4a:	7bfc      	ldrb	r4, [r7, #15]
 8001b4c:	f7ff ffd4 	bl	8001af8 <DHT11_ReadByte>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	f104 0310 	add.w	r3, r4, #16
 8001b58:	443b      	add	r3, r7
 8001b5a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(i=0;i<5;++i){
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	3301      	adds	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d9ef      	bls.n	8001b4a <DHT11_ReadData+0x18>
		}
	//i=0,1  = humidity  00.11
	//i=2,3  = temperature 22.33
	//i=4    = Check Sum 0+1+2+3==4
		ds->humid_int = buf[0];
 8001b6a:	7a3a      	ldrb	r2, [r7, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	701a      	strb	r2, [r3, #0]
		ds->humid_dec = buf[1];
 8001b70:	7a7a      	ldrb	r2, [r7, #9]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	705a      	strb	r2, [r3, #1]
		ds->temp_int = buf[2];
 8001b76:	7aba      	ldrb	r2, [r7, #10]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	709a      	strb	r2, [r3, #2]
		ds->temp_dec = buf[3];
 8001b7c:	7afa      	ldrb	r2, [r7, #11]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	70da      	strb	r2, [r3, #3]
		ds->check_sum = buf[4];
 8001b82:	7b3a      	ldrb	r2, [r7, #12]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	711a      	strb	r2, [r3, #4]
		if(ds->humid_int + ds->humid_dec + ds->temp_int + ds->temp_dec != ds->check_sum){
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	785b      	ldrb	r3, [r3, #1]
 8001b92:	4413      	add	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	7892      	ldrb	r2, [r2, #2]
 8001b98:	4413      	add	r3, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	78d2      	ldrb	r2, [r2, #3]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	7912      	ldrb	r2, [r2, #4]
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d003      	beq.n	8001bb0 <DHT11_ReadData+0x7e>
			//Wrong Data
			return 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e002      	b.n	8001bb2 <DHT11_ReadData+0x80>
		}
	}else return 1;//Success
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <DHT11_ReadData+0x80>
	return 0;//Not Responding
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}

08001bba <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	e002      	b.n	8001bca <Delay+0x10>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f9      	bne.n	8001bc4 <Delay+0xa>
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 8001be0:	2001      	movs	r0, #1
 8001be2:	f000 f825 	bl	8001c30 <LCD_BackLed_Control>
	LCD_Rst();
 8001be6:	f000 f80b 	bl	8001c00 <LCD_Rst>
	LCD_REG_Config();
 8001bea:	f000 f867 	bl	8001cbc <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 8001bee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bf2:	22f0      	movs	r2, #240	; 0xf0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f9f2 	bl	8001fe0 <LCD_Clear>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2102      	movs	r1, #2
 8001c08:	4807      	ldr	r0, [pc, #28]	; (8001c28 <LCD_Rst+0x28>)
 8001c0a:	f004 ff8c 	bl	8006b26 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001c0e:	4807      	ldr	r0, [pc, #28]	; (8001c2c <LCD_Rst+0x2c>)
 8001c10:	f7ff ffd3 	bl	8001bba <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2102      	movs	r1, #2
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <LCD_Rst+0x28>)
 8001c1a:	f004 ff84 	bl	8006b26 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <LCD_Rst+0x2c>)
 8001c20:	f7ff ffcb 	bl	8001bba <Delay>
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40011800 	.word	0x40011800
 8001c2c:	0002bffc 	.word	0x0002bffc

08001c30 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <LCD_BackLed_Control+0x34>)
 8001c48:	f004 ff6d 	bl	8006b26 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001c4c:	e005      	b.n	8001c5a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c54:	4803      	ldr	r0, [pc, #12]	; (8001c64 <LCD_BackLed_Control+0x34>)
 8001c56:	f004 ff66 	bl	8006b26 <HAL_GPIO_WritePin>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40011400 	.word	0x40011400

08001c68 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001c72:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	8013      	strh	r3, [r2, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <LCD_Write_Data+0x1c>)
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	8013      	strh	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	60020000 	.word	0x60020000

08001ca4 <LCD_Read_Data>:


uint16_t LCD_Read_Data ( void )
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <LCD_Read_Data+0x14>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	60020000 	.word	0x60020000

08001cbc <LCD_REG_Config>:


void LCD_REG_Config ( void )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001cc0:	20cf      	movs	r0, #207	; 0xcf
 8001cc2:	f7ff ffd1 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff ffdc 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001ccc:	2081      	movs	r0, #129	; 0x81
 8001cce:	f7ff ffd9 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001cd2:	2030      	movs	r0, #48	; 0x30
 8001cd4:	f7ff ffd6 	bl	8001c84 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001cd8:	20ed      	movs	r0, #237	; 0xed
 8001cda:	f7ff ffc5 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001cde:	2064      	movs	r0, #100	; 0x64
 8001ce0:	f7ff ffd0 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f7ff ffcd 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001cea:	2012      	movs	r0, #18
 8001cec:	f7ff ffca 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001cf0:	2081      	movs	r0, #129	; 0x81
 8001cf2:	f7ff ffc7 	bl	8001c84 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001cf6:	20e8      	movs	r0, #232	; 0xe8
 8001cf8:	f7ff ffb6 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001cfc:	2085      	movs	r0, #133	; 0x85
 8001cfe:	f7ff ffc1 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001d02:	2010      	movs	r0, #16
 8001d04:	f7ff ffbe 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001d08:	2078      	movs	r0, #120	; 0x78
 8001d0a:	f7ff ffbb 	bl	8001c84 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001d0e:	20cb      	movs	r0, #203	; 0xcb
 8001d10:	f7ff ffaa 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001d14:	2039      	movs	r0, #57	; 0x39
 8001d16:	f7ff ffb5 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001d1a:	202c      	movs	r0, #44	; 0x2c
 8001d1c:	f7ff ffb2 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff ffaf 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001d26:	2034      	movs	r0, #52	; 0x34
 8001d28:	f7ff ffac 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	f7ff ffa9 	bl	8001c84 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001d32:	20f7      	movs	r0, #247	; 0xf7
 8001d34:	f7ff ff98 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001d38:	2020      	movs	r0, #32
 8001d3a:	f7ff ffa3 	bl	8001c84 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001d3e:	20ea      	movs	r0, #234	; 0xea
 8001d40:	f7ff ff92 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff ff9d 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff ff9a 	bl	8001c84 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001d50:	20b1      	movs	r0, #177	; 0xb1
 8001d52:	f7ff ff89 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff ff94 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001d5c:	201b      	movs	r0, #27
 8001d5e:	f7ff ff91 	bl	8001c84 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001d62:	20b6      	movs	r0, #182	; 0xb6
 8001d64:	f7ff ff80 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001d68:	200a      	movs	r0, #10
 8001d6a:	f7ff ff8b 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001d6e:	20a2      	movs	r0, #162	; 0xa2
 8001d70:	f7ff ff88 	bl	8001c84 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001d74:	20c0      	movs	r0, #192	; 0xc0
 8001d76:	f7ff ff77 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001d7a:	2035      	movs	r0, #53	; 0x35
 8001d7c:	f7ff ff82 	bl	8001c84 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001d80:	20c1      	movs	r0, #193	; 0xc1
 8001d82:	f7ff ff71 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001d86:	2011      	movs	r0, #17
 8001d88:	f7ff ff7c 	bl	8001c84 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001d8c:	20c5      	movs	r0, #197	; 0xc5
 8001d8e:	f7ff ff6b 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001d92:	2045      	movs	r0, #69	; 0x45
 8001d94:	f7ff ff76 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001d98:	2045      	movs	r0, #69	; 0x45
 8001d9a:	f7ff ff73 	bl	8001c84 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001d9e:	20c7      	movs	r0, #199	; 0xc7
 8001da0:	f7ff ff62 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001da4:	20a2      	movs	r0, #162	; 0xa2
 8001da6:	f7ff ff6d 	bl	8001c84 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001daa:	20f2      	movs	r0, #242	; 0xf2
 8001dac:	f7ff ff5c 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff ff67 	bl	8001c84 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001db6:	2026      	movs	r0, #38	; 0x26
 8001db8:	f7ff ff56 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff ff61 	bl	8001c84 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001dc2:	20e0      	movs	r0, #224	; 0xe0
 8001dc4:	f7ff ff50 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001dc8:	200f      	movs	r0, #15
 8001dca:	f7ff ff5b 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001dce:	2026      	movs	r0, #38	; 0x26
 8001dd0:	f7ff ff58 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001dd4:	2024      	movs	r0, #36	; 0x24
 8001dd6:	f7ff ff55 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001dda:	200b      	movs	r0, #11
 8001ddc:	f7ff ff52 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001de0:	200e      	movs	r0, #14
 8001de2:	f7ff ff4f 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001de6:	2009      	movs	r0, #9
 8001de8:	f7ff ff4c 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001dec:	2054      	movs	r0, #84	; 0x54
 8001dee:	f7ff ff49 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001df2:	20a8      	movs	r0, #168	; 0xa8
 8001df4:	f7ff ff46 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001df8:	2046      	movs	r0, #70	; 0x46
 8001dfa:	f7ff ff43 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001dfe:	200c      	movs	r0, #12
 8001e00:	f7ff ff40 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001e04:	2017      	movs	r0, #23
 8001e06:	f7ff ff3d 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001e0a:	2009      	movs	r0, #9
 8001e0c:	f7ff ff3a 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001e10:	200f      	movs	r0, #15
 8001e12:	f7ff ff37 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001e16:	2007      	movs	r0, #7
 8001e18:	f7ff ff34 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff ff31 	bl	8001c84 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001e22:	20e1      	movs	r0, #225	; 0xe1
 8001e24:	f7ff ff20 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff ff2b 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001e2e:	2019      	movs	r0, #25
 8001e30:	f7ff ff28 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001e34:	201b      	movs	r0, #27
 8001e36:	f7ff ff25 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001e3a:	2004      	movs	r0, #4
 8001e3c:	f7ff ff22 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001e40:	2010      	movs	r0, #16
 8001e42:	f7ff ff1f 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001e46:	2007      	movs	r0, #7
 8001e48:	f7ff ff1c 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001e4c:	202a      	movs	r0, #42	; 0x2a
 8001e4e:	f7ff ff19 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001e52:	2047      	movs	r0, #71	; 0x47
 8001e54:	f7ff ff16 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001e58:	2039      	movs	r0, #57	; 0x39
 8001e5a:	f7ff ff13 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001e5e:	2003      	movs	r0, #3
 8001e60:	f7ff ff10 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001e64:	2006      	movs	r0, #6
 8001e66:	f7ff ff0d 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001e6a:	2006      	movs	r0, #6
 8001e6c:	f7ff ff0a 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001e70:	2030      	movs	r0, #48	; 0x30
 8001e72:	f7ff ff07 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001e76:	2038      	movs	r0, #56	; 0x38
 8001e78:	f7ff ff04 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001e7c:	200f      	movs	r0, #15
 8001e7e:	f7ff ff01 	bl	8001c84 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001e82:	2036      	movs	r0, #54	; 0x36
 8001e84:	f7ff fef0 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001e88:	20c8      	movs	r0, #200	; 0xc8
 8001e8a:	f7ff fefb 	bl	8001c84 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001e8e:	202a      	movs	r0, #42	; 0x2a
 8001e90:	f7ff feea 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff fef5 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff fef2 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff feef 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001ea6:	20ef      	movs	r0, #239	; 0xef
 8001ea8:	f7ff feec 	bl	8001c84 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001eac:	202b      	movs	r0, #43	; 0x2b
 8001eae:	f7ff fedb 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fee6 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff fee3 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff fee0 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001ec4:	203f      	movs	r0, #63	; 0x3f
 8001ec6:	f7ff fedd 	bl	8001c84 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001eca:	203a      	movs	r0, #58	; 0x3a
 8001ecc:	f7ff fecc 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001ed0:	2055      	movs	r0, #85	; 0x55
 8001ed2:	f7ff fed7 	bl	8001c84 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001ed6:	2011      	movs	r0, #17
 8001ed8:	f7ff fec6 	bl	8001c68 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <LCD_REG_Config+0x230>)
 8001ede:	f7ff fe6c 	bl	8001bba <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001ee2:	2029      	movs	r0, #41	; 0x29
 8001ee4:	f7ff fec0 	bl	8001c68 <LCD_Write_Cmd>
	
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	0002bffc 	.word	0x0002bffc

08001ef0 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	4623      	mov	r3, r4
 8001f00:	80fb      	strh	r3, [r7, #6]
 8001f02:	4603      	mov	r3, r0
 8001f04:	80bb      	strh	r3, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001f0e:	202a      	movs	r0, #42	; 0x2a
 8001f10:	f7ff feaa 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff feb2 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff feac 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001f2c:	88fa      	ldrh	r2, [r7, #6]
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	4413      	add	r3, r2
 8001f32:	3b01      	subs	r3, #1
 8001f34:	121b      	asrs	r3, r3, #8
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fea3 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001f3e:	88fa      	ldrh	r2, [r7, #6]
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	4413      	add	r3, r2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fe98 	bl	8001c84 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001f54:	202b      	movs	r0, #43	; 0x2b
 8001f56:	f7ff fe87 	bl	8001c68 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fe8f 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fe89 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001f72:	88ba      	ldrh	r2, [r7, #4]
 8001f74:	883b      	ldrh	r3, [r7, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	121b      	asrs	r3, r3, #8
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fe80 	bl	8001c84 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001f84:	88ba      	ldrh	r2, [r7, #4]
 8001f86:	883b      	ldrh	r3, [r7, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fe75 	bl	8001c84 <LCD_Write_Data>
	
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd90      	pop	{r4, r7, pc}

08001fa2 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001fb2:	202c      	movs	r0, #44	; 0x2c
 8001fb4:	f7ff fe58 	bl	8001c68 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e006      	b.n	8001fcc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fe5f 	bl	8001c84 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3f4      	bcc.n	8001fbe <LCD_FillColor+0x1c>
		
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	4623      	mov	r3, r4
 8001ff0:	80fb      	strh	r3, [r7, #6]
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80bb      	strh	r3, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	807b      	strh	r3, [r7, #2]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <LCD_Clear+0x58>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <LCD_Clear+0x2a>
 8002006:	2300      	movs	r3, #0
 8002008:	e001      	b.n	800200e <LCD_Clear+0x2e>
 800200a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800200e:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8002010:	883b      	ldrh	r3, [r7, #0]
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	88b9      	ldrh	r1, [r7, #4]
 8002016:	88f8      	ldrh	r0, [r7, #6]
 8002018:	f7ff ff6a 	bl	8001ef0 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	883a      	ldrh	r2, [r7, #0]
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	461a      	mov	r2, r3
 8002026:	89fb      	ldrh	r3, [r7, #14]
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f7ff ffb9 	bl	8001fa2 <LCD_FillColor>
	
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	20000a18 	.word	0x20000a18

0800203c <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4604      	mov	r4, r0
 8002044:	4608      	mov	r0, r1
 8002046:	4611      	mov	r1, r2
 8002048:	461a      	mov	r2, r3
 800204a:	4623      	mov	r3, r4
 800204c:	80fb      	strh	r3, [r7, #6]
 800204e:	4603      	mov	r3, r0
 8002050:	80bb      	strh	r3, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	807b      	strh	r3, [r7, #2]
 8002056:	4613      	mov	r3, r2
 8002058:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800205a:	883b      	ldrh	r3, [r7, #0]
 800205c:	887a      	ldrh	r2, [r7, #2]
 800205e:	88b9      	ldrh	r1, [r7, #4]
 8002060:	88f8      	ldrh	r0, [r7, #6]
 8002062:	f7ff ff45 	bl	8001ef0 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	883a      	ldrh	r2, [r7, #0]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	461a      	mov	r2, r3
 8002070:	8b3b      	ldrh	r3, [r7, #24]
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f7ff ff94 	bl	8001fa2 <LCD_FillColor>
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}

08002082 <LCD_Read_PixelData>:

uint16_t LCD_Read_PixelData ( void )	
{	
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
	uint16_t usR=0, usG=0, usB=0 ;
 8002088:	2300      	movs	r3, #0
 800208a:	80fb      	strh	r3, [r7, #6]
 800208c:	2300      	movs	r3, #0
 800208e:	80bb      	strh	r3, [r7, #4]
 8002090:	2300      	movs	r3, #0
 8002092:	807b      	strh	r3, [r7, #2]

	
	LCD_Write_Cmd ( 0x2E ); 
 8002094:	202e      	movs	r0, #46	; 0x2e
 8002096:	f7ff fde7 	bl	8001c68 <LCD_Write_Cmd>
	
	usR = LCD_Read_Data (); 	/*FIRST READ OUT DUMMY DATA*/
 800209a:	f7ff fe03 	bl	8001ca4 <LCD_Read_Data>
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
	
	usR = LCD_Read_Data ();  	/*READ OUT RED DATA  */
 80020a2:	f7ff fdff 	bl	8001ca4 <LCD_Read_Data>
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
	usB = LCD_Read_Data ();  	/*READ OUT BLUE DATA*/
 80020aa:	f7ff fdfb 	bl	8001ca4 <LCD_Read_Data>
 80020ae:	4603      	mov	r3, r0
 80020b0:	807b      	strh	r3, [r7, #2]
	usG = LCD_Read_Data ();  	/*READ OUT GREEN DATA*/	
 80020b2:	f7ff fdf7 	bl	8001ca4 <LCD_Read_Data>
 80020b6:	4603      	mov	r3, r0
 80020b8:	80bb      	strh	r3, [r7, #4]
	
  return ( ( ( usR >> 11 ) << 11 ) | ( ( usG >> 10 ) << 5 ) | ( usB >> 11 ) );
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	0adb      	lsrs	r3, r3, #11
 80020be:	b29b      	uxth	r3, r3
 80020c0:	02db      	lsls	r3, r3, #11
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	88bb      	ldrh	r3, [r7, #4]
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	015b      	lsls	r3, r3, #5
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	0adb      	lsrs	r3, r3, #11
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21b      	sxth	r3, r3
 80020de:	b29b      	uxth	r3, r3
	
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <LCD_GetPointPixel>:


uint16_t LCD_GetPointPixel ( uint16_t usCOLUMN, uint16_t usPAGE )
{ 
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	460a      	mov	r2, r1
 80020f2:	80fb      	strh	r3, [r7, #6]
 80020f4:	4613      	mov	r3, r2
 80020f6:	80bb      	strh	r3, [r7, #4]
	uint16_t usPixelData;

	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 80020f8:	88b9      	ldrh	r1, [r7, #4]
 80020fa:	88f8      	ldrh	r0, [r7, #6]
 80020fc:	2301      	movs	r3, #1
 80020fe:	2201      	movs	r2, #1
 8002100:	f7ff fef6 	bl	8001ef0 <LCD_OpenWindow>
	
	usPixelData = LCD_Read_PixelData ();
 8002104:	f7ff ffbd 	bl	8002082 <LCD_Read_PixelData>
 8002108:	4603      	mov	r3, r0
 800210a:	81fb      	strh	r3, [r7, #14]
	
	return usPixelData;
 800210c:	89fb      	ldrh	r3, [r7, #14]
	
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
 8002122:	460b      	mov	r3, r1
 8002124:	80bb      	strh	r3, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <LCD_DrawChar+0xb0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <LCD_DrawChar+0x20>
 8002132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002136:	e000      	b.n	800213a <LCD_DrawChar+0x22>
 8002138:	2300      	movs	r3, #0
 800213a:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <LCD_DrawChar+0xb0>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <LCD_DrawChar+0x30>
 8002144:	2300      	movs	r3, #0
 8002146:	e001      	b.n	800214c <LCD_DrawChar+0x34>
 8002148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800214c:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	3b20      	subs	r3, #32
 8002152:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002154:	88b9      	ldrh	r1, [r7, #4]
 8002156:	88f8      	ldrh	r0, [r7, #6]
 8002158:	2310      	movs	r3, #16
 800215a:	2208      	movs	r2, #8
 800215c:	f7ff fec8 	bl	8001ef0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8002160:	202c      	movs	r0, #44	; 0x2c
 8002162:	f7ff fd81 	bl	8001c68 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002166:	2300      	movs	r3, #0
 8002168:	75bb      	strb	r3, [r7, #22]
 800216a:	e024      	b.n	80021b6 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	7dbb      	ldrb	r3, [r7, #22]
 8002170:	4916      	ldr	r1, [pc, #88]	; (80021cc <LCD_DrawChar+0xb4>)
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	440a      	add	r2, r1
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800217c:	2300      	movs	r3, #0
 800217e:	757b      	strb	r3, [r7, #21]
 8002180:	e013      	b.n	80021aa <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 800218c:	8a7b      	ldrh	r3, [r7, #18]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fd78 	bl	8001c84 <LCD_Write_Data>
 8002194:	e003      	b.n	800219e <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 8002196:	8a3b      	ldrh	r3, [r7, #16]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fd73 	bl	8001c84 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80021a4:	7d7b      	ldrb	r3, [r7, #21]
 80021a6:	3301      	adds	r3, #1
 80021a8:	757b      	strb	r3, [r7, #21]
 80021aa:	7d7b      	ldrb	r3, [r7, #21]
 80021ac:	2b07      	cmp	r3, #7
 80021ae:	d9e8      	bls.n	8002182 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80021b0:	7dbb      	ldrb	r3, [r7, #22]
 80021b2:	3301      	adds	r3, #1
 80021b4:	75bb      	strb	r3, [r7, #22]
 80021b6:	7dbb      	ldrb	r3, [r7, #22]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d9d7      	bls.n	800216c <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000a18 	.word	0x20000a18
 80021cc:	08011e3c 	.word	0x08011e3c

080021d0 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	603a      	str	r2, [r7, #0]
 80021da:	80fb      	strh	r3, [r7, #6]
 80021dc:	460b      	mov	r3, r1
 80021de:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80021e0:	e01c      	b.n	800221c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	2be8      	cmp	r3, #232	; 0xe8
 80021e6:	d904      	bls.n	80021f2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80021e8:	2300      	movs	r3, #0
 80021ea:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	3310      	adds	r3, #16
 80021f0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80021f2:	88bb      	ldrh	r3, [r7, #4]
 80021f4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80021f8:	d903      	bls.n	8002202 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80021fa:	2300      	movs	r3, #0
 80021fc:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80021fe:	2300      	movs	r3, #0
 8002200:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	88b9      	ldrh	r1, [r7, #4]
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff84 	bl	8002118 <LCD_DrawChar>
		
		pStr ++;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	3308      	adds	r3, #8
 800221a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1de      	bne.n	80021e2 <LCD_DrawString+0x12>
		
	}
	
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	80fb      	strh	r3, [r7, #6]
 8002238:	460b      	mov	r3, r1
 800223a:	80bb      	strh	r3, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	2bef      	cmp	r3, #239	; 0xef
 8002244:	d809      	bhi.n	800225a <LCD_DrawDot+0x2c>
 8002246:	88bb      	ldrh	r3, [r7, #4]
 8002248:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800224c:	d205      	bcs.n	800225a <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 800224e:	88b9      	ldrh	r1, [r7, #4]
 8002250:	88f8      	ldrh	r0, [r7, #6]
 8002252:	2301      	movs	r3, #1
 8002254:	2201      	movs	r2, #1
 8002256:	f7ff fe4b 	bl	8001ef0 <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	4619      	mov	r1, r3
 800225e:	2001      	movs	r0, #1
 8002260:	f7ff fe9f 	bl	8001fa2 <LCD_FillColor>

}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	0000      	movs	r0, r0
	...

08002270 <LCD_DrawCircle>:

void LCD_DrawCircle ( uint16_t usC, uint16_t usP, uint16_t R, uint16_t usColor)
{	
 8002270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4604      	mov	r4, r0
 800227a:	4608      	mov	r0, r1
 800227c:	4611      	mov	r1, r2
 800227e:	461a      	mov	r2, r3
 8002280:	4623      	mov	r3, r4
 8002282:	80fb      	strh	r3, [r7, #6]
 8002284:	4603      	mov	r3, r0
 8002286:	80bb      	strh	r3, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	803b      	strh	r3, [r7, #0]
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800229c:	e05a      	b.n	8002354 <LCD_DrawCircle+0xe4>
			int x = usC + R*cos(i);
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f91b 	bl	80004dc <__aeabi_i2d>
 80022a6:	4604      	mov	r4, r0
 80022a8:	460d      	mov	r5, r1
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f915 	bl	80004dc <__aeabi_i2d>
 80022b2:	4680      	mov	r8, r0
 80022b4:	4689      	mov	r9, r1
 80022b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022ba:	f00e fc37 	bl	8010b2c <cos>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4640      	mov	r0, r8
 80022c4:	4649      	mov	r1, r9
 80022c6:	f7fe f973 	bl	80005b0 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4620      	mov	r0, r4
 80022d0:	4629      	mov	r1, r5
 80022d2:	f7fd ffb7 	bl	8000244 <__adddf3>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fc17 	bl	8000b10 <__aeabi_d2iz>
 80022e2:	4603      	mov	r3, r0
 80022e4:	60fb      	str	r3, [r7, #12]
			int y = usP + R*sin(i);
 80022e6:	88bb      	ldrh	r3, [r7, #4]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f8f7 	bl	80004dc <__aeabi_i2d>
 80022ee:	4604      	mov	r4, r0
 80022f0:	460d      	mov	r5, r1
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f8f1 	bl	80004dc <__aeabi_i2d>
 80022fa:	4680      	mov	r8, r0
 80022fc:	4689      	mov	r9, r1
 80022fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002302:	f00e fc59 	bl	8010bb8 <sin>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4640      	mov	r0, r8
 800230c:	4649      	mov	r1, r9
 800230e:	f7fe f94f 	bl	80005b0 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4620      	mov	r0, r4
 8002318:	4629      	mov	r1, r5
 800231a:	f7fd ff93 	bl	8000244 <__adddf3>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f7fe fbf3 	bl	8000b10 <__aeabi_d2iz>
 800232a:	4603      	mov	r3, r0
 800232c:	60bb      	str	r3, [r7, #8]
			LCD_DrawDot(x,y,usColor);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	b29b      	uxth	r3, r3
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	b291      	uxth	r1, r2
 8002336:	883a      	ldrh	r2, [r7, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff78 	bl	800222e <LCD_DrawDot>
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 800233e:	a30e      	add	r3, pc, #56	; (adr r3, 8002378 <LCD_DrawCircle+0x108>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002348:	f7fd ff7c 	bl	8000244 <__adddf3>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002354:	a30a      	add	r3, pc, #40	; (adr r3, 8002380 <LCD_DrawCircle+0x110>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800235e:	f7fe fb99 	bl	8000a94 <__aeabi_dcmplt>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d19a      	bne.n	800229e <LCD_DrawCircle+0x2e>
		}
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002374:	f3af 8000 	nop.w
 8002378:	47ae147b 	.word	0x47ae147b
 800237c:	3f847ae1 	.word	0x3f847ae1
 8002380:	54442d18 	.word	0x54442d18
 8002384:	401921fb 	.word	0x401921fb

08002388 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	4604      	mov	r4, r0
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	80fb      	strh	r3, [r7, #6]
 800239a:	4603      	mov	r3, r0
 800239c:	80bb      	strh	r3, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
 80023a2:	4613      	mov	r3, r2
 80023a4:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	3b20      	subs	r3, #32
 80023aa:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80023ac:	88b9      	ldrh	r1, [r7, #4]
 80023ae:	88f8      	ldrh	r0, [r7, #6]
 80023b0:	2310      	movs	r3, #16
 80023b2:	2208      	movs	r2, #8
 80023b4:	f7ff fd9c 	bl	8001ef0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80023b8:	202c      	movs	r0, #44	; 0x2c
 80023ba:	f7ff fc55 	bl	8001c68 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80023be:	2300      	movs	r3, #0
 80023c0:	73bb      	strb	r3, [r7, #14]
 80023c2:	e024      	b.n	800240e <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80023c4:	7b3a      	ldrb	r2, [r7, #12]
 80023c6:	7bbb      	ldrb	r3, [r7, #14]
 80023c8:	4915      	ldr	r1, [pc, #84]	; (8002420 <LCD_DrawChar_Color+0x98>)
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	440a      	add	r2, r1
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80023d4:	2300      	movs	r3, #0
 80023d6:	737b      	strb	r3, [r7, #13]
 80023d8:	e013      	b.n	8002402 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80023e4:	8c3b      	ldrh	r3, [r7, #32]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fc4c 	bl	8001c84 <LCD_Write_Data>
 80023ec:	e003      	b.n	80023f6 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80023ee:	883b      	ldrh	r3, [r7, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fc47 	bl	8001c84 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80023fc:	7b7b      	ldrb	r3, [r7, #13]
 80023fe:	3301      	adds	r3, #1
 8002400:	737b      	strb	r3, [r7, #13]
 8002402:	7b7b      	ldrb	r3, [r7, #13]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d9e8      	bls.n	80023da <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002408:	7bbb      	ldrb	r3, [r7, #14]
 800240a:	3301      	adds	r3, #1
 800240c:	73bb      	strb	r3, [r7, #14]
 800240e:	7bbb      	ldrb	r3, [r7, #14]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d9d7      	bls.n	80023c4 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bd90      	pop	{r4, r7, pc}
 800241e:	bf00      	nop
 8002420:	08011e3c 	.word	0x08011e3c

08002424 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af02      	add	r7, sp, #8
 800242a:	4603      	mov	r3, r0
 800242c:	460a      	mov	r2, r1
 800242e:	80fb      	strh	r3, [r7, #6]
 8002430:	4613      	mov	r3, r2
 8002432:	80bb      	strh	r3, [r7, #4]
  LCD_Clear_Color ( usX - 10, usY, 20, 1, RED);
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	3b0a      	subs	r3, #10
 8002438:	b298      	uxth	r0, r3
 800243a:	88b9      	ldrh	r1, [r7, #4]
 800243c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2301      	movs	r3, #1
 8002444:	2214      	movs	r2, #20
 8002446:	f7ff fdf9 	bl	800203c <LCD_Clear_Color>
  LCD_Clear_Color ( usX, usY - 10, 1, 20, RED);
 800244a:	88bb      	ldrh	r3, [r7, #4]
 800244c:	3b0a      	subs	r3, #10
 800244e:	b299      	uxth	r1, r3
 8002450:	88f8      	ldrh	r0, [r7, #6]
 8002452:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2314      	movs	r3, #20
 800245a:	2201      	movs	r2, #1
 800245c:	f7ff fdee 	bl	800203c <LCD_Clear_Color>
	
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b087      	sub	sp, #28
 800246c:	af02      	add	r7, sp, #8
 800246e:	60ba      	str	r2, [r7, #8]
 8002470:	461a      	mov	r2, r3
 8002472:	4603      	mov	r3, r0
 8002474:	81fb      	strh	r3, [r7, #14]
 8002476:	460b      	mov	r3, r1
 8002478:	81bb      	strh	r3, [r7, #12]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800247e:	e01f      	b.n	80024c0 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	2be8      	cmp	r3, #232	; 0xe8
 8002484:	d904      	bls.n	8002490 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002486:	2300      	movs	r3, #0
 8002488:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 800248a:	89bb      	ldrh	r3, [r7, #12]
 800248c:	3310      	adds	r3, #16
 800248e:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002490:	89bb      	ldrh	r3, [r7, #12]
 8002492:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002496:	d903      	bls.n	80024a0 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002498:	2300      	movs	r3, #0
 800249a:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 800249c:	2300      	movs	r3, #0
 800249e:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	88fc      	ldrh	r4, [r7, #6]
 80024a6:	89b9      	ldrh	r1, [r7, #12]
 80024a8:	89f8      	ldrh	r0, [r7, #14]
 80024aa:	8c3b      	ldrh	r3, [r7, #32]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4623      	mov	r3, r4
 80024b0:	f7ff ff6a 	bl	8002388 <LCD_DrawChar_Color>
		
		pStr ++;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	3301      	adds	r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80024ba:	89fb      	ldrh	r3, [r7, #14]
 80024bc:	3308      	adds	r3, #8
 80024be:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1db      	bne.n	8002480 <LCD_DrawString_Color+0x18>
		
	}
	
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
	...

080024d4 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	f200 80a0 	bhi.w	8002628 <LCD_GramScan+0x154>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <LCD_GramScan+0x1c>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002501 	.word	0x08002501
 80024f4:	0800254b 	.word	0x0800254b
 80024f8:	08002595 	.word	0x08002595
 80024fc:	080025df 	.word	0x080025df

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002500:	2036      	movs	r0, #54	; 0x36
 8002502:	f7ff fbb1 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 8002506:	20c8      	movs	r0, #200	; 0xc8
 8002508:	f7ff fbbc 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 800250c:	202a      	movs	r0, #42	; 0x2a
 800250e:	f7ff fbab 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff fbb6 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff fbb3 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 800251e:	2000      	movs	r0, #0
 8002520:	f7ff fbb0 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8002524:	20ef      	movs	r0, #239	; 0xef
 8002526:	f7ff fbad 	bl	8001c84 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800252a:	202b      	movs	r0, #43	; 0x2b
 800252c:	f7ff fb9c 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8002530:	2000      	movs	r0, #0
 8002532:	f7ff fba7 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff fba4 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 800253c:	2001      	movs	r0, #1
 800253e:	f7ff fba1 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8002542:	203f      	movs	r0, #63	; 0x3f
 8002544:	f7ff fb9e 	bl	8001c84 <LCD_Write_Data>
					
		  break;
 8002548:	e06e      	b.n	8002628 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 800254a:	2036      	movs	r0, #54	; 0x36
 800254c:	f7ff fb8c 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8002550:	2068      	movs	r0, #104	; 0x68
 8002552:	f7ff fb97 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002556:	202a      	movs	r0, #42	; 0x2a
 8002558:	f7ff fb86 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff fb91 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff fb8e 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002568:	2001      	movs	r0, #1
 800256a:	f7ff fb8b 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 800256e:	203f      	movs	r0, #63	; 0x3f
 8002570:	f7ff fb88 	bl	8001c84 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002574:	202b      	movs	r0, #43	; 0x2b
 8002576:	f7ff fb77 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800257a:	2000      	movs	r0, #0
 800257c:	f7ff fb82 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002580:	2000      	movs	r0, #0
 8002582:	f7ff fb7f 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002586:	2000      	movs	r0, #0
 8002588:	f7ff fb7c 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 800258c:	20ef      	movs	r0, #239	; 0xef
 800258e:	f7ff fb79 	bl	8001c84 <LCD_Write_Data>
		
		  break;
 8002592:	e049      	b.n	8002628 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8002594:	2036      	movs	r0, #54	; 0x36
 8002596:	f7ff fb67 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 800259a:	2028      	movs	r0, #40	; 0x28
 800259c:	f7ff fb72 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80025a0:	202a      	movs	r0, #42	; 0x2a
 80025a2:	f7ff fb61 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7ff fb6c 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7ff fb69 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7ff fb66 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 80025b8:	203f      	movs	r0, #63	; 0x3f
 80025ba:	f7ff fb63 	bl	8001c84 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80025be:	202b      	movs	r0, #43	; 0x2b
 80025c0:	f7ff fb52 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7ff fb5d 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7ff fb5a 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7ff fb57 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 80025d6:	20ef      	movs	r0, #239	; 0xef
 80025d8:	f7ff fb54 	bl	8001c84 <LCD_Write_Data>
		  
		  break;
 80025dc:	e024      	b.n	8002628 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 80025de:	2036      	movs	r0, #54	; 0x36
 80025e0:	f7ff fb42 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 80025e4:	2048      	movs	r0, #72	; 0x48
 80025e6:	f7ff fb4d 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80025ea:	202a      	movs	r0, #42	; 0x2a
 80025ec:	f7ff fb3c 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7ff fb47 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7ff fb44 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff fb41 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8002602:	20ef      	movs	r0, #239	; 0xef
 8002604:	f7ff fb3e 	bl	8001c84 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002608:	202b      	movs	r0, #43	; 0x2b
 800260a:	f7ff fb2d 	bl	8001c68 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800260e:	2000      	movs	r0, #0
 8002610:	f7ff fb38 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002614:	2000      	movs	r0, #0
 8002616:	f7ff fb35 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 800261a:	2001      	movs	r0, #1
 800261c:	f7ff fb32 	bl	8001c84 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8002620:	203f      	movs	r0, #63	; 0x3f
 8002622:	f7ff fb2f 	bl	8001c84 <LCD_Write_Data>
		
	    break;
 8002626:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8002628:	202c      	movs	r0, #44	; 0x2c
 800262a:	f7ff fb1d 	bl	8001c68 <LCD_Write_Cmd>
	
	
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop

08002638 <LCD_Darkmode_Toggle>:

void LCD_Darkmode_Toggle(){
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	extern unsigned char *petStats;
	if (!darkmode_toggle) {
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <LCD_Darkmode_Toggle+0x30>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <LCD_Darkmode_Toggle+0x1a>
		darkmode_toggle = 1;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <LCD_Darkmode_Toggle+0x30>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
		petStats = sleep1;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <LCD_Darkmode_Toggle+0x34>)
 800264c:	4a08      	ldr	r2, [pc, #32]	; (8002670 <LCD_Darkmode_Toggle+0x38>)
 800264e:	601a      	str	r2, [r3, #0]
	}
	else {
		darkmode_toggle = 0;
		petStats = normal;
	}
}
 8002650:	e005      	b.n	800265e <LCD_Darkmode_Toggle+0x26>
		darkmode_toggle = 0;
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <LCD_Darkmode_Toggle+0x30>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
		petStats = normal;
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <LCD_Darkmode_Toggle+0x34>)
 800265a:	4a06      	ldr	r2, [pc, #24]	; (8002674 <LCD_Darkmode_Toggle+0x3c>)
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000a18 	.word	0x20000a18
 800266c:	20000004 	.word	0x20000004
 8002670:	0802e7c0 	.word	0x0802e7c0
 8002674:	08027738 	.word	0x08027738

08002678 <LCD_DrawPicture>:

void LCD_DrawPicture(uint16_t StartX, uint16_t StartY,unsigned char *pic) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	603a      	str	r2, [r7, #0]
 8002682:	80fb      	strh	r3, [r7, #6]
 8002684:	460b      	mov	r3, r1
 8002686:	80bb      	strh	r3, [r7, #4]
		uint32_t i = 8, len;
 8002688:	2308      	movs	r3, #8
 800268a:	617b      	str	r3, [r7, #20]
		uint16_t temp, x, y;

		x = ((uint16_t) (pic[2] << 8) + pic[3]) - 1;	  	//get width
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	3302      	adds	r3, #2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	b29a      	uxth	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	3303      	adds	r3, #3
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	827b      	strh	r3, [r7, #18]
		y = ((uint16_t) (pic[4] << 8) + pic[5]) - 1;	  	//get height
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	3304      	adds	r3, #4
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	3305      	adds	r3, #5
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4413      	add	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	823b      	strh	r3, [r7, #16]

		LCD_OpenWindow ( StartX, StartY, 120,120);
 80026c4:	88b9      	ldrh	r1, [r7, #4]
 80026c6:	88f8      	ldrh	r0, [r7, #6]
 80026c8:	2378      	movs	r3, #120	; 0x78
 80026ca:	2278      	movs	r2, #120	; 0x78
 80026cc:	f7ff fc10 	bl	8001ef0 <LCD_OpenWindow>
		//LCD_FillColor ( StartX*StartY ,0x01010);
		LCD_Write_Cmd(CMD_SetPixel);					//fillcolor
 80026d0:	202c      	movs	r0, #44	; 0x2c
 80026d2:	f7ff fac9 	bl	8001c68 <LCD_Write_Cmd>
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	3302      	adds	r3, #2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	3303      	adds	r3, #3
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
				* ((uint16_t) (pic[4] << 8) + pic[5]);   	//calculate size
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	3204      	adds	r2, #4
 80026f0:	7812      	ldrb	r2, [r2, #0]
 80026f2:	b292      	uxth	r2, r2
 80026f4:	0212      	lsls	r2, r2, #8
 80026f6:	b292      	uxth	r2, r2
 80026f8:	4611      	mov	r1, r2
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	3205      	adds	r2, #5
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	440a      	add	r2, r1
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	005b      	lsls	r3, r3, #1
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8002708:	60fb      	str	r3, [r7, #12]

		while (i < (len + 8)) {							 	//start from the 9th
 800270a:	e015      	b.n	8002738 <LCD_DrawPicture+0xc0>
			temp = (uint16_t) (pic[i] << 8) | pic[i + 1];	//2bits once
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	4413      	add	r3, r2
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	b29a      	uxth	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	440b      	add	r3, r1
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	817b      	strh	r3, [r7, #10]
			LCD_Write_Data(temp);
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff faa9 	bl	8001c84 <LCD_Write_Data>
			i = i + 2;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3302      	adds	r3, #2
 8002736:	617b      	str	r3, [r7, #20]
		while (i < (len + 8)) {							 	//start from the 9th
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3308      	adds	r3, #8
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	429a      	cmp	r2, r3
 8002740:	d3e4      	bcc.n	800270c <LCD_DrawPicture+0x94>
		}
}
 8002742:	bf00      	nop
 8002744:	bf00      	nop
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b08c      	sub	sp, #48	; 0x30
 8002750:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002752:	f003 fea9 	bl	80064a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002756:	f000 fa7d 	bl	8002c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800275a:	f000 fc93 	bl	8003084 <MX_GPIO_Init>
  MX_FSMC_Init();
 800275e:	f000 fd45 	bl	80031ec <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8002762:	f000 fc65 	bl	8003030 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002766:	f000 fb7b 	bl	8002e60 <MX_TIM2_Init>
  MX_TIM3_Init();
 800276a:	f000 fbc5 	bl	8002ef8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800276e:	f000 fc11 	bl	8002f94 <MX_TIM5_Init>
  MX_TIM1_Init();
 8002772:	f000 facf 	bl	8002d14 <MX_TIM1_Init>
  	 * Module Initializations:
  	 * rtc.c
  	 * XPT2046.c
  	 * LCD
  	 */
	RTC_Init(&hrtc);
 8002776:	48a3      	ldr	r0, [pc, #652]	; (8002a04 <main+0x2b8>)
 8002778:	f002 fa42 	bl	8004c00 <RTC_Init>
	macXPT2046_CS_DISABLE();
 800277c:	2200      	movs	r2, #0
 800277e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002782:	48a1      	ldr	r0, [pc, #644]	; (8002a08 <main+0x2bc>)
 8002784:	f004 f9cf 	bl	8006b26 <HAL_GPIO_WritePin>
	LCD_INIT();
 8002788:	f7ff fa28 	bl	8001bdc <LCD_INIT>

	RTC_Get();
 800278c:	f002 fb18 	bl	8004dc0 <RTC_Get>
	get_TimeStamp(&real_time);
 8002790:	489e      	ldr	r0, [pc, #632]	; (8002a0c <main+0x2c0>)
 8002792:	f002 fcb3 	bl	80050fc <get_TimeStamp>
	lastdrink_raw = RTC_raw();
 8002796:	f002 fc9b 	bl	80050d0 <RTC_raw>
 800279a:	4603      	mov	r3, r0
 800279c:	4a9c      	ldr	r2, [pc, #624]	; (8002a10 <main+0x2c4>)
 800279e:	6013      	str	r3, [r2, #0]
	//Flow control of UI
	uint8_t mode = 0; //Current Mode: Mode 0 = Home, Mode 1 = Drink Water, Mode 3 = Pet
 80027a0:	2300      	movs	r3, #0
 80027a2:	77fb      	strb	r3, [r7, #31]
	uint8_t mode_new = 0; //To Determine Whether A Mode is Updated
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
	uint8_t render_done=0;//Set To 1 Whenever Screen Need to Update
 80027a8:	2300      	movs	r3, #0
 80027aa:	73bb      	strb	r3, [r7, #14]
	uint8_t pet_update=0; //Set To 1 Whenever Pet Image Need to Update
 80027ac:	2300      	movs	r3, #0
 80027ae:	77bb      	strb	r3, [r7, #30]


	//Calibration of TouchPad
	while( ! XPT2046_Touch_Calibrate () );
 80027b0:	bf00      	nop
 80027b2:	f003 fba5 	bl	8005f00 <XPT2046_Touch_Calibrate>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0fa      	beq.n	80027b2 <main+0x66>
	Beep_start();
 80027bc:	f7ff f8a2 	bl	8001904 <Beep_start>
	DHT11_ReadData(&DHT11_data);
 80027c0:	4894      	ldr	r0, [pc, #592]	; (8002a14 <main+0x2c8>)
 80027c2:	f7ff f9b6 	bl	8001b32 <DHT11_ReadData>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 80027c6:	f002 ffc3 	bl	8005750 <TIMER_INIT>
	timer_min(1);
 80027ca:	2001      	movs	r0, #1
 80027cc:	f003 f80a 	bl	80057e4 <timer_min>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 80027d0:	4991      	ldr	r1, [pc, #580]	; (8002a18 <main+0x2cc>)
 80027d2:	4892      	ldr	r0, [pc, #584]	; (8002a1c <main+0x2d0>)
 80027d4:	f003 fdac 	bl	8006330 <XPT2046_Get_TouchedPoint>
	  			&strXPT2046_TouchPara);

	  //!!Only For UI that is changing every moment, Just For Testing, Need Refactoring Later
	  if(mode==0) {
 80027d8:	7ffb      	ldrb	r3, [r7, #31]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d114      	bne.n	8002808 <main+0xbc>
		  RTC_Get();
 80027de:	f002 faef 	bl	8004dc0 <RTC_Get>
		  UI_Home_Display_Date(real_time.ryear, real_time.rmon, real_time.rday);
 80027e2:	4b8a      	ldr	r3, [pc, #552]	; (8002a0c <main+0x2c0>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	4a89      	ldr	r2, [pc, #548]	; (8002a0c <main+0x2c0>)
 80027e8:	7891      	ldrb	r1, [r2, #2]
 80027ea:	4a88      	ldr	r2, [pc, #544]	; (8002a0c <main+0x2c0>)
 80027ec:	78d2      	ldrb	r2, [r2, #3]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fd32 	bl	8001258 <UI_Home_Display_Date>
		  UI_Home_Display_Time(real_time.rhour, real_time.rmin, real_time.rsec);
 80027f4:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <main+0x2c0>)
 80027f6:	791b      	ldrb	r3, [r3, #4]
 80027f8:	4a84      	ldr	r2, [pc, #528]	; (8002a0c <main+0x2c0>)
 80027fa:	7951      	ldrb	r1, [r2, #5]
 80027fc:	4a83      	ldr	r2, [pc, #524]	; (8002a0c <main+0x2c0>)
 80027fe:	7992      	ldrb	r2, [r2, #6]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fd65 	bl	80012d0 <UI_Home_Display_Time>
 8002806:	e00c      	b.n	8002822 <main+0xd6>
	  }
	  else if (mode == 3){
 8002808:	7ffb      	ldrb	r3, [r7, #31]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d104      	bne.n	8002818 <main+0xcc>
		  RTC_Get();
 800280e:	f002 fad7 	bl	8004dc0 <RTC_Get>
		  UI_Stats_Update();
 8002812:	f7fe fe31 	bl	8001478 <UI_Stats_Update>
 8002816:	e004      	b.n	8002822 <main+0xd6>
	  }
	  else if (mode == 6){
 8002818:	7ffb      	ldrb	r3, [r7, #31]
 800281a:	2b06      	cmp	r3, #6
 800281c:	d101      	bne.n	8002822 <main+0xd6>
	  		  UI_Set_Update();
 800281e:	f7fe ffff 	bl	8001820 <UI_Set_Update>
	  	  }
	  get_TimeStamp(&real_time);
 8002822:	487a      	ldr	r0, [pc, #488]	; (8002a0c <main+0x2c0>)
 8002824:	f002 fc6a 	bl	80050fc <get_TimeStamp>
	  if (petStats != sleep1 && mode==0){
 8002828:	4b7d      	ldr	r3, [pc, #500]	; (8002a20 <main+0x2d4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <main+0x2d8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01b      	beq.n	800286a <main+0x11e>
 8002832:	7ffb      	ldrb	r3, [r7, #31]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d118      	bne.n	800286a <main+0x11e>
		  if (DHT11_data.temp_int > 27){
 8002838:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <main+0x2c8>)
 800283a:	789b      	ldrb	r3, [r3, #2]
 800283c:	2b1b      	cmp	r3, #27
 800283e:	d905      	bls.n	800284c <main+0x100>
			  petStats = hot1;
 8002840:	4b77      	ldr	r3, [pc, #476]	; (8002a20 <main+0x2d4>)
 8002842:	4a79      	ldr	r2, [pc, #484]	; (8002a28 <main+0x2dc>)
 8002844:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 8002846:	2301      	movs	r3, #1
 8002848:	77bb      	strb	r3, [r7, #30]
 800284a:	e00e      	b.n	800286a <main+0x11e>
		  }
		  else if (DHT11_data.temp_int < 24){
 800284c:	4b71      	ldr	r3, [pc, #452]	; (8002a14 <main+0x2c8>)
 800284e:	789b      	ldrb	r3, [r3, #2]
 8002850:	2b17      	cmp	r3, #23
 8002852:	d805      	bhi.n	8002860 <main+0x114>
			  petStats = cold1;
 8002854:	4b72      	ldr	r3, [pc, #456]	; (8002a20 <main+0x2d4>)
 8002856:	4a75      	ldr	r2, [pc, #468]	; (8002a2c <main+0x2e0>)
 8002858:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 800285a:	2301      	movs	r3, #1
 800285c:	77bb      	strb	r3, [r7, #30]
 800285e:	e004      	b.n	800286a <main+0x11e>
		  }
		  else {
			  petStats = normal;
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <main+0x2d4>)
 8002862:	4a73      	ldr	r2, [pc, #460]	; (8002a30 <main+0x2e4>)
 8002864:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 8002866:	2301      	movs	r3, #1
 8002868:	77bb      	strb	r3, [r7, #30]
		  }
	  }

	  do {
		  //Home Buttons
		  if(mode==0){
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d145      	bne.n	80028fc <main+0x1b0>
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {mode_new = 1; break;}
 8002870:	496a      	ldr	r1, [pc, #424]	; (8002a1c <main+0x2d0>)
 8002872:	4870      	ldr	r0, [pc, #448]	; (8002a34 <main+0x2e8>)
 8002874:	f7fe fba0 	bl	8000fb8 <Check_touchkey>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <main+0x138>
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e124      	b.n	8002ace <main+0x382>
			  if(Check_touchkey(&home_dark_mode,&Coordinate)) {mode_new = 2; break;}
 8002884:	4965      	ldr	r1, [pc, #404]	; (8002a1c <main+0x2d0>)
 8002886:	486c      	ldr	r0, [pc, #432]	; (8002a38 <main+0x2ec>)
 8002888:	f7fe fb96 	bl	8000fb8 <Check_touchkey>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <main+0x14c>
 8002892:	2302      	movs	r3, #2
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e11a      	b.n	8002ace <main+0x382>
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep1) {petStats = happy1;}; break;}
 8002898:	4960      	ldr	r1, [pc, #384]	; (8002a1c <main+0x2d0>)
 800289a:	4868      	ldr	r0, [pc, #416]	; (8002a3c <main+0x2f0>)
 800289c:	f7fe fb8c 	bl	8000fb8 <Check_touchkey>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <main+0x172>
 80028a6:	2301      	movs	r3, #1
 80028a8:	77bb      	strb	r3, [r7, #30]
 80028aa:	4b5d      	ldr	r3, [pc, #372]	; (8002a20 <main+0x2d4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a5d      	ldr	r2, [pc, #372]	; (8002a24 <main+0x2d8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	f000 810b 	beq.w	8002acc <main+0x380>
 80028b6:	4b5a      	ldr	r3, [pc, #360]	; (8002a20 <main+0x2d4>)
 80028b8:	4a61      	ldr	r2, [pc, #388]	; (8002a40 <main+0x2f4>)
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e106      	b.n	8002acc <main+0x380>
			  if(Check_touchkey(&home_stats,&Coordinate)) {mode_new = 3; break;}
 80028be:	4957      	ldr	r1, [pc, #348]	; (8002a1c <main+0x2d0>)
 80028c0:	4860      	ldr	r0, [pc, #384]	; (8002a44 <main+0x2f8>)
 80028c2:	f7fe fb79 	bl	8000fb8 <Check_touchkey>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <main+0x186>
 80028cc:	2303      	movs	r3, #3
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e0fd      	b.n	8002ace <main+0x382>
			  if(Check_touchkey(&home_config,&Coordinate)) {mode_new = 4; break;}
 80028d2:	4952      	ldr	r1, [pc, #328]	; (8002a1c <main+0x2d0>)
 80028d4:	485c      	ldr	r0, [pc, #368]	; (8002a48 <main+0x2fc>)
 80028d6:	f7fe fb6f 	bl	8000fb8 <Check_touchkey>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <main+0x19a>
 80028e0:	2304      	movs	r3, #4
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	e0f3      	b.n	8002ace <main+0x382>
			  if (Check_touchkey(&home_set, &Coordinate)) {
 80028e6:	494d      	ldr	r1, [pc, #308]	; (8002a1c <main+0x2d0>)
 80028e8:	4858      	ldr	r0, [pc, #352]	; (8002a4c <main+0x300>)
 80028ea:	f7fe fb65 	bl	8000fb8 <Check_touchkey>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80ec 	beq.w	8002ace <main+0x382>
			  					mode_new = 6;
 80028f6:	2306      	movs	r3, #6
 80028f8:	73fb      	strb	r3, [r7, #15]
			  					break;
 80028fa:	e0e8      	b.n	8002ace <main+0x382>
			  				}
		  }
		  //Other Buttons In Other Screen
		  else if (mode==3){//Statistics
 80028fc:	7ffb      	ldrb	r3, [r7, #31]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d10a      	bne.n	8002918 <main+0x1cc>
			  if(Check_touchkey(&stats_home,&Coordinate)) {mode_new = 0; break;}
 8002902:	4946      	ldr	r1, [pc, #280]	; (8002a1c <main+0x2d0>)
 8002904:	4852      	ldr	r0, [pc, #328]	; (8002a50 <main+0x304>)
 8002906:	f7fe fb57 	bl	8000fb8 <Check_touchkey>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80de 	beq.w	8002ace <main+0x382>
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
 8002916:	e0da      	b.n	8002ace <main+0x382>
		  }else if (mode==4){//Configuration
 8002918:	7ffb      	ldrb	r3, [r7, #31]
 800291a:	2b04      	cmp	r3, #4
 800291c:	d117      	bne.n	800294e <main+0x202>
			  if(Check_touchkey(&config_home,&Coordinate)) {mode_new = 0; break;}
 800291e:	493f      	ldr	r1, [pc, #252]	; (8002a1c <main+0x2d0>)
 8002920:	484c      	ldr	r0, [pc, #304]	; (8002a54 <main+0x308>)
 8002922:	f7fe fb49 	bl	8000fb8 <Check_touchkey>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <main+0x1e6>
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e0cd      	b.n	8002ace <main+0x382>
			  if(Check_touchkey(&config_set_time,&Coordinate)) {mode_new = 5; USART_READ_FLAG = 1; break;}
 8002932:	493a      	ldr	r1, [pc, #232]	; (8002a1c <main+0x2d0>)
 8002934:	4848      	ldr	r0, [pc, #288]	; (8002a58 <main+0x30c>)
 8002936:	f7fe fb3f 	bl	8000fb8 <Check_touchkey>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80c6 	beq.w	8002ace <main+0x382>
 8002942:	2305      	movs	r3, #5
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	4b45      	ldr	r3, [pc, #276]	; (8002a5c <main+0x310>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e0bf      	b.n	8002ace <main+0x382>
		  }else if (mode==5){
 800294e:	7ffb      	ldrb	r3, [r7, #31]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d10d      	bne.n	8002970 <main+0x224>
			  if(Check_touchkey(&time_set_back,&Coordinate)) {mode_new = 4; USART_READ_FLAG = 0; break;}
 8002954:	4931      	ldr	r1, [pc, #196]	; (8002a1c <main+0x2d0>)
 8002956:	4842      	ldr	r0, [pc, #264]	; (8002a60 <main+0x314>)
 8002958:	f7fe fb2e 	bl	8000fb8 <Check_touchkey>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80b5 	beq.w	8002ace <main+0x382>
 8002964:	2304      	movs	r3, #4
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <main+0x310>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	e0ae      	b.n	8002ace <main+0x382>
		  }
		  else if (mode==6){
 8002970:	7ffb      	ldrb	r3, [r7, #31]
 8002972:	2b06      	cmp	r3, #6
 8002974:	f040 80ab 	bne.w	8002ace <main+0x382>
			  if (Check_touchkey(&stats_home, &Coordinate)) {
 8002978:	4928      	ldr	r1, [pc, #160]	; (8002a1c <main+0x2d0>)
 800297a:	4835      	ldr	r0, [pc, #212]	; (8002a50 <main+0x304>)
 800297c:	f7fe fb1c 	bl	8000fb8 <Check_touchkey>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <main+0x240>
			  					mode_new = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
			  					break;
 800298a:	e0a0      	b.n	8002ace <main+0x382>
			  				}
			  				if (Check_touchkey(&plus_hour, &Coordinate)) {
 800298c:	4923      	ldr	r1, [pc, #140]	; (8002a1c <main+0x2d0>)
 800298e:	4835      	ldr	r0, [pc, #212]	; (8002a64 <main+0x318>)
 8002990:	f7fe fb12 	bl	8000fb8 <Check_touchkey>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <main+0x262>
			  					exertime += 3600;
 800299a:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <main+0x31c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80029a2:	4a31      	ldr	r2, [pc, #196]	; (8002a68 <main+0x31c>)
 80029a4:	6013      	str	r3, [r2, #0]
			  					HAL_Delay(100);
 80029a6:	2064      	movs	r0, #100	; 0x64
 80029a8:	f003 fde0 	bl	800656c <HAL_Delay>
			  					break;
 80029ac:	e08f      	b.n	8002ace <main+0x382>
			  				} else if (Check_touchkey(&minus_hour, &Coordinate)) {
 80029ae:	491b      	ldr	r1, [pc, #108]	; (8002a1c <main+0x2d0>)
 80029b0:	482e      	ldr	r0, [pc, #184]	; (8002a6c <main+0x320>)
 80029b2:	f7fe fb01 	bl	8000fb8 <Check_touchkey>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d012      	beq.n	80029e2 <main+0x296>
			  					if (exertime > 3600) {
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <main+0x31c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80029c4:	d906      	bls.n	80029d4 <main+0x288>
			  						exertime -= 3600;
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <main+0x31c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80029ce:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <main+0x31c>)
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e002      	b.n	80029da <main+0x28e>
			  					} else {
			  						exertime = 0;
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <main+0x31c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
			  					}
			  					HAL_Delay(100);
 80029da:	2064      	movs	r0, #100	; 0x64
 80029dc:	f003 fdc6 	bl	800656c <HAL_Delay>
			  					break;
 80029e0:	e075      	b.n	8002ace <main+0x382>
			  				} else if (Check_touchkey(&plus_min, &Coordinate)) {
 80029e2:	490e      	ldr	r1, [pc, #56]	; (8002a1c <main+0x2d0>)
 80029e4:	4822      	ldr	r0, [pc, #136]	; (8002a70 <main+0x324>)
 80029e6:	f7fe fae7 	bl	8000fb8 <Check_touchkey>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d041      	beq.n	8002a74 <main+0x328>
			  					exertime += 60;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <main+0x31c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	333c      	adds	r3, #60	; 0x3c
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <main+0x31c>)
 80029f8:	6013      	str	r3, [r2, #0]
			  					HAL_Delay(100);
 80029fa:	2064      	movs	r0, #100	; 0x64
 80029fc:	f003 fdb6 	bl	800656c <HAL_Delay>
			  					break;
 8002a00:	e065      	b.n	8002ace <main+0x382>
 8002a02:	bf00      	nop
 8002a04:	20000a1c 	.word	0x20000a1c
 8002a08:	40011400 	.word	0x40011400
 8002a0c:	20000bc0 	.word	0x20000bc0
 8002a10:	20000bcc 	.word	0x20000bcc
 8002a14:	20000bb4 	.word	0x20000bb4
 8002a18:	20000010 	.word	0x20000010
 8002a1c:	20000bbc 	.word	0x20000bbc
 8002a20:	20000004 	.word	0x20000004
 8002a24:	0802e7c0 	.word	0x0802e7c0
 8002a28:	080206b0 	.word	0x080206b0
 8002a2c:	080125a0 	.word	0x080125a0
 8002a30:	08027738 	.word	0x08027738
 8002a34:	0801242c 	.word	0x0801242c
 8002a38:	0801243c 	.word	0x0801243c
 8002a3c:	0801244c 	.word	0x0801244c
 8002a40:	08019628 	.word	0x08019628
 8002a44:	0801245c 	.word	0x0801245c
 8002a48:	0801246c 	.word	0x0801246c
 8002a4c:	080124bc 	.word	0x080124bc
 8002a50:	0801247c 	.word	0x0801247c
 8002a54:	0801249c 	.word	0x0801249c
 8002a58:	0801248c 	.word	0x0801248c
 8002a5c:	20000be4 	.word	0x20000be4
 8002a60:	080124ac 	.word	0x080124ac
 8002a64:	080124cc 	.word	0x080124cc
 8002a68:	20000bd8 	.word	0x20000bd8
 8002a6c:	080124ec 	.word	0x080124ec
 8002a70:	080124dc 	.word	0x080124dc
			  				} else if (Check_touchkey(&minus_min, &Coordinate)) {
 8002a74:	4967      	ldr	r1, [pc, #412]	; (8002c14 <main+0x4c8>)
 8002a76:	4868      	ldr	r0, [pc, #416]	; (8002c18 <main+0x4cc>)
 8002a78:	f7fe fa9e 	bl	8000fb8 <Check_touchkey>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d010      	beq.n	8002aa4 <main+0x358>
			  					if (exertime > 60) {
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <main+0x4d0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b3c      	cmp	r3, #60	; 0x3c
 8002a88:	d905      	bls.n	8002a96 <main+0x34a>
			  						exertime -= 60;
 8002a8a:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <main+0x4d0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3b3c      	subs	r3, #60	; 0x3c
 8002a90:	4a62      	ldr	r2, [pc, #392]	; (8002c1c <main+0x4d0>)
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e002      	b.n	8002a9c <main+0x350>
			  					} else {
			  						exertime = 0;
 8002a96:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <main+0x4d0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
			  					}
			  					HAL_Delay(100);
 8002a9c:	2064      	movs	r0, #100	; 0x64
 8002a9e:	f003 fd65 	bl	800656c <HAL_Delay>
			  					break;
 8002aa2:	e014      	b.n	8002ace <main+0x382>
			  				} else if (Check_touchkey(&set_set, &Coordinate)) {
 8002aa4:	495b      	ldr	r1, [pc, #364]	; (8002c14 <main+0x4c8>)
 8002aa6:	485e      	ldr	r0, [pc, #376]	; (8002c20 <main+0x4d4>)
 8002aa8:	f7fe fa86 	bl	8000fb8 <Check_touchkey>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <main+0x382>
			  					exertimer = exertime;
 8002ab2:	4b5a      	ldr	r3, [pc, #360]	; (8002c1c <main+0x4d0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	; (8002c24 <main+0x4d8>)
 8002ab8:	6013      	str	r3, [r2, #0]
			  					lastexer_raw = RTC_raw();
 8002aba:	f002 fb09 	bl	80050d0 <RTC_raw>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4a59      	ldr	r2, [pc, #356]	; (8002c28 <main+0x4dc>)
 8002ac2:	6013      	str	r3, [r2, #0]
			  					HAL_Delay(100);
 8002ac4:	2064      	movs	r0, #100	; 0x64
 8002ac6:	f003 fd51 	bl	800656c <HAL_Delay>
			  					break;
 8002aca:	e000      	b.n	8002ace <main+0x382>
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep1) {petStats = happy1;}; break;}
 8002acc:	bf00      	nop
		  		  }

	  } while (0);

	  //Reset Coordinates
	  XPT2046_Reset_TouchPoint(&Coordinate);
 8002ace:	4851      	ldr	r0, [pc, #324]	; (8002c14 <main+0x4c8>)
 8002ad0:	f003 fcb5 	bl	800643e <XPT2046_Reset_TouchPoint>

	  if(mode != mode_new){
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	7ffa      	ldrb	r2, [r7, #31]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d003      	beq.n	8002ae4 <main+0x398>
		  mode = mode_new;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	77fb      	strb	r3, [r7, #31]
		  render_done = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73bb      	strb	r3, [r7, #14]
	  }


	  //Render Pet Image If Updated
	  if(pet_update){
 8002ae4:	7fbb      	ldrb	r3, [r7, #30]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <main+0x3b0>
		  UI_Home_Display_Pet(60,70,petStats);
 8002aea:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <main+0x4e0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	2146      	movs	r1, #70	; 0x46
 8002af2:	203c      	movs	r0, #60	; 0x3c
 8002af4:	f7fe fc26 	bl	8001344 <UI_Home_Display_Pet>
		  pet_update = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	77bb      	strb	r3, [r7, #30]
	  }

	  //Flag Enables Every 30 Seconds
	  if(DHT11_SCHEDULE_FLAG){
 8002afc:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <main+0x4e4>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <main+0x3ce>
		  DHT11_ReadData(&DHT11_data);
 8002b04:	484b      	ldr	r0, [pc, #300]	; (8002c34 <main+0x4e8>)
 8002b06:	f7ff f814 	bl	8001b32 <DHT11_ReadData>
		  DHT11_SCHEDULE_FLAG = 0;
 8002b0a:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <main+0x4e4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
		  if(mode==0) UI_Home_Display_DHT11();
 8002b10:	7ffb      	ldrb	r3, [r7, #31]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <main+0x3ce>
 8002b16:	f7fe fc27 	bl	8001368 <UI_Home_Display_DHT11>
	  }

	  //Read Buffer when flag on
	  if(USART_READ_FLAG && mode==5){
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <main+0x4ec>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d06d      	beq.n	8002bfe <main+0x4b2>
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d16a      	bne.n	8002bfe <main+0x4b2>

		  uint8_t valid_input = HAL_UART_Receive(&huart1,USART_DATE_BUFFER,15,100)==HAL_OK;
 8002b28:	2364      	movs	r3, #100	; 0x64
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	4943      	ldr	r1, [pc, #268]	; (8002c3c <main+0x4f0>)
 8002b2e:	4844      	ldr	r0, [pc, #272]	; (8002c40 <main+0x4f4>)
 8002b30:	f006 f829 	bl	8008b86 <HAL_UART_Receive>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf0c      	ite	eq
 8002b3a:	2301      	moveq	r3, #1
 8002b3c:	2300      	movne	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	777b      	strb	r3, [r7, #29]
		  if(valid_input){//Check If data is Numeric
 8002b42:	7f7b      	ldrb	r3, [r7, #29]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d014      	beq.n	8002b72 <main+0x426>
			  for(int i=0; i<14; ++i){
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	e00e      	b.n	8002b6c <main+0x420>
				  uint8_t int_value = USART_DATE_BUFFER[i]  - '0';
 8002b4e:	4a3b      	ldr	r2, [pc, #236]	; (8002c3c <main+0x4f0>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3b30      	subs	r3, #48	; 0x30
 8002b58:	75fb      	strb	r3, [r7, #23]
				  if(!(int_value >= 0 && int_value <= 9)){valid_input = 0; break;}
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	2b09      	cmp	r3, #9
 8002b5e:	d902      	bls.n	8002b66 <main+0x41a>
 8002b60:	2300      	movs	r3, #0
 8002b62:	777b      	strb	r3, [r7, #29]
 8002b64:	e005      	b.n	8002b72 <main+0x426>
			  for(int i=0; i<14; ++i){
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b0d      	cmp	r3, #13
 8002b70:	dded      	ble.n	8002b4e <main+0x402>
			  }
		  }
		  if(!valid_input){//Invalid Input
 8002b72:	7f7b      	ldrb	r3, [r7, #29]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <main+0x442>
			  LCD_DrawString(20, 100, "Waiting For USART Response");
 8002b78:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <main+0x4f8>)
 8002b7a:	2164      	movs	r1, #100	; 0x64
 8002b7c:	2014      	movs	r0, #20
 8002b7e:	f7ff fb27 	bl	80021d0 <LCD_DrawString>
			  LCD_DrawString(20, 130, "(yyyymmddhhmmss)");
 8002b82:	4a31      	ldr	r2, [pc, #196]	; (8002c48 <main+0x4fc>)
 8002b84:	2182      	movs	r1, #130	; 0x82
 8002b86:	2014      	movs	r0, #20
 8002b88:	f7ff fb22 	bl	80021d0 <LCD_DrawString>
 8002b8c:	e037      	b.n	8002bfe <main+0x4b2>
		  }
		  else{//Update Date Time
			  char* t = USART_DATE_BUFFER;
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <main+0x4f0>)
 8002b90:	613b      	str	r3, [r7, #16]
			  uint16_t dt[6];//yearmonth, day, hour, min, sec
			  sscanf(t, "%04d%02d%02d%02d%02d%02d", &dt[0], &dt[1],&dt[2],&dt[3],&dt[4],&dt[5]);
 8002b92:	463b      	mov	r3, r7
 8002b94:	1c99      	adds	r1, r3, #2
 8002b96:	463a      	mov	r2, r7
 8002b98:	463b      	mov	r3, r7
 8002b9a:	330a      	adds	r3, #10
 8002b9c:	9303      	str	r3, [sp, #12]
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	3306      	adds	r3, #6
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	463b      	mov	r3, r7
 8002bac:	3304      	adds	r3, #4
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4926      	ldr	r1, [pc, #152]	; (8002c4c <main+0x500>)
 8002bb4:	6938      	ldr	r0, [r7, #16]
 8002bb6:	f006 fb0d 	bl	80091d4 <sscanf>


			  //Update RTC Success
			  if(RTC_Set(dt[0],dt[1],dt[2],dt[3],dt[4],dt[5])==0){
 8002bba:	8838      	ldrh	r0, [r7, #0]
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	b259      	sxtb	r1, r3
 8002bc0:	88bb      	ldrh	r3, [r7, #4]
 8002bc2:	b2dc      	uxtb	r4, r3
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	b2dd      	uxtb	r5, r3
 8002bc8:	893b      	ldrh	r3, [r7, #8]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	897a      	ldrh	r2, [r7, #10]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	9201      	str	r2, [sp, #4]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	f002 f848 	bl	8004c6c <RTC_Set>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <main+0x4b2>

				  //Update Flag And UI
				  USART_READ_FLAG = 0;
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <main+0x4ec>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
				  LCD_Clear(0, 100, 250,150);
 8002be8:	2396      	movs	r3, #150	; 0x96
 8002bea:	22fa      	movs	r2, #250	; 0xfa
 8002bec:	2164      	movs	r1, #100	; 0x64
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7ff f9f6 	bl	8001fe0 <LCD_Clear>
				  LCD_DrawString(30, 100, "Done...");
 8002bf4:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <main+0x504>)
 8002bf6:	2164      	movs	r1, #100	; 0x64
 8002bf8:	201e      	movs	r0, #30
 8002bfa:	f7ff fae9 	bl	80021d0 <LCD_DrawString>
		  }

	  }

	  //Render LCD If Enter New Mode
	  Render(&mode_new, &render_done,petStats);
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <main+0x4e0>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f107 010e 	add.w	r1, r7, #14
 8002c06:	f107 030f 	add.w	r3, r7, #15
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe f9fe 	bl	800100c <Render>
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8002c10:	e5de      	b.n	80027d0 <main+0x84>
 8002c12:	bf00      	nop
 8002c14:	20000bbc 	.word	0x20000bbc
 8002c18:	080124fc 	.word	0x080124fc
 8002c1c:	20000bd8 	.word	0x20000bd8
 8002c20:	0801250c 	.word	0x0801250c
 8002c24:	20000bdc 	.word	0x20000bdc
 8002c28:	20000bd0 	.word	0x20000bd0
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	20000008 	.word	0x20000008
 8002c34:	20000bb4 	.word	0x20000bb4
 8002c38:	20000be4 	.word	0x20000be4
 8002c3c:	20000be8 	.word	0x20000be8
 8002c40:	20000b30 	.word	0x20000b30
 8002c44:	08011d70 	.word	0x08011d70
 8002c48:	08011d8c 	.word	0x08011d8c
 8002c4c:	08011da0 	.word	0x08011da0
 8002c50:	08011dbc 	.word	0x08011dbc

08002c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b096      	sub	sp, #88	; 0x58
 8002c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c5e:	2228      	movs	r2, #40	; 0x28
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f006 faae 	bl	80091c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	611a      	str	r2, [r3, #16]
 8002c86:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002c88:	2305      	movs	r3, #5
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c92:	2300      	movs	r3, #0
 8002c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c96:	2301      	movs	r3, #1
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ca8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002cac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 ff7e 	bl	8006bb4 <HAL_RCC_OscConfig>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002cbe:	f000 faf9 	bl	80032b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cc2:	230f      	movs	r3, #15
 8002cc4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 f9cc 	bl	800707c <HAL_RCC_ClockConfig>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002cea:	f000 fae3 	bl	80032b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 fb7a 	bl	80073f4 <HAL_RCCEx_PeriphCLKConfig>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002d06:	f000 fad5 	bl	80032b4 <Error_Handler>
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3758      	adds	r7, #88	; 0x58
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b094      	sub	sp, #80	; 0x50
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	615a      	str	r2, [r3, #20]
 8002d44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d46:	463b      	mov	r3, r7
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
 8002d54:	615a      	str	r2, [r3, #20]
 8002d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d58:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002d5a:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <MX_TIM1_Init+0x148>)
 8002d5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8002d5e:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002d60:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d66:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1124;
 8002d6c:	4b3a      	ldr	r3, [pc, #232]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002d6e:	f240 4264 	movw	r2, #1124	; 0x464
 8002d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d74:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d7a:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d80:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d86:	4834      	ldr	r0, [pc, #208]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002d88:	f004 fe5e 	bl	8007a48 <HAL_TIM_Base_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002d92:	f000 fa8f 	bl	80032b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002da0:	4619      	mov	r1, r3
 8002da2:	482d      	ldr	r0, [pc, #180]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002da4:	f005 f93a 	bl	800801c <HAL_TIM_ConfigClockSource>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002dae:	f000 fa81 	bl	80032b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002db2:	4829      	ldr	r0, [pc, #164]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002db4:	f004 fefb 	bl	8007bae <HAL_TIM_PWM_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8002dbe:	f000 fa79 	bl	80032b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4821      	ldr	r0, [pc, #132]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002dd2:	f005 fd9c 	bl	800890e <HAL_TIMEx_MasterConfigSynchronization>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002ddc:	f000 fa6a 	bl	80032b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de0:	2360      	movs	r3, #96	; 0x60
 8002de2:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 500;
 8002de4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002de8:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dfe:	f107 031c 	add.w	r3, r7, #28
 8002e02:	2200      	movs	r2, #0
 8002e04:	4619      	mov	r1, r3
 8002e06:	4814      	ldr	r0, [pc, #80]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002e08:	f005 f842 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8002e12:	f000 fa4f 	bl	80032b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e34:	463b      	mov	r3, r7
 8002e36:	4619      	mov	r1, r3
 8002e38:	4807      	ldr	r0, [pc, #28]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002e3a:	f005 fd10 	bl	800885e <HAL_TIMEx_ConfigBreakDeadTime>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8002e44:	f000 fa36 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e48:	4803      	ldr	r0, [pc, #12]	; (8002e58 <MX_TIM1_Init+0x144>)
 8002e4a:	f002 fa49 	bl	80052e0 <HAL_TIM_MspPostInit>

}
 8002e4e:	bf00      	nop
 8002e50:	3750      	adds	r7, #80	; 0x50
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000a30 	.word	0x20000a30
 8002e5c:	40012c00 	.word	0x40012c00

08002e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e66:	f107 0308 	add.w	r3, r7, #8
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e74:	463b      	mov	r3, r7
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <MX_TIM2_Init+0x94>)
 8002e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <MX_TIM2_Init+0x94>)
 8002e86:	2247      	movs	r2, #71	; 0x47
 8002e88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <MX_TIM2_Init+0x94>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <MX_TIM2_Init+0x94>)
 8002e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <MX_TIM2_Init+0x94>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <MX_TIM2_Init+0x94>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ea4:	4813      	ldr	r0, [pc, #76]	; (8002ef4 <MX_TIM2_Init+0x94>)
 8002ea6:	f004 fdcf 	bl	8007a48 <HAL_TIM_Base_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002eb0:	f000 fa00 	bl	80032b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eba:	f107 0308 	add.w	r3, r7, #8
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <MX_TIM2_Init+0x94>)
 8002ec2:	f005 f8ab 	bl	800801c <HAL_TIM_ConfigClockSource>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ecc:	f000 f9f2 	bl	80032b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ed8:	463b      	mov	r3, r7
 8002eda:	4619      	mov	r1, r3
 8002edc:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <MX_TIM2_Init+0x94>)
 8002ede:	f005 fd16 	bl	800890e <HAL_TIMEx_MasterConfigSynchronization>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ee8:	f000 f9e4 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000a70 	.word	0x20000a70

08002ef8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002efe:	f107 0308 	add.w	r3, r7, #8
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f0c:	463b      	mov	r3, r7
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <MX_TIM3_Init+0x94>)
 8002f16:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <MX_TIM3_Init+0x98>)
 8002f18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <MX_TIM3_Init+0x94>)
 8002f1c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002f20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <MX_TIM3_Init+0x94>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <MX_TIM3_Init+0x94>)
 8002f2a:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8002f2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <MX_TIM3_Init+0x94>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <MX_TIM3_Init+0x94>)
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f3c:	4813      	ldr	r0, [pc, #76]	; (8002f8c <MX_TIM3_Init+0x94>)
 8002f3e:	f004 fd83 	bl	8007a48 <HAL_TIM_Base_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f48:	f000 f9b4 	bl	80032b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	4619      	mov	r1, r3
 8002f58:	480c      	ldr	r0, [pc, #48]	; (8002f8c <MX_TIM3_Init+0x94>)
 8002f5a:	f005 f85f 	bl	800801c <HAL_TIM_ConfigClockSource>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002f64:	f000 f9a6 	bl	80032b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f70:	463b      	mov	r3, r7
 8002f72:	4619      	mov	r1, r3
 8002f74:	4805      	ldr	r0, [pc, #20]	; (8002f8c <MX_TIM3_Init+0x94>)
 8002f76:	f005 fcca 	bl	800890e <HAL_TIMEx_MasterConfigSynchronization>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002f80:	f000 f998 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f84:	bf00      	nop
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000ab0 	.word	0x20000ab0
 8002f90:	40000400 	.word	0x40000400

08002f94 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa8:	463b      	mov	r3, r7
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <MX_TIM5_Init+0x94>)
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	; (800302c <MX_TIM5_Init+0x98>)
 8002fb4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <MX_TIM5_Init+0x94>)
 8002fb8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002fbc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <MX_TIM5_Init+0x94>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <MX_TIM5_Init+0x94>)
 8002fc6:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8002fca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fcc:	4b16      	ldr	r3, [pc, #88]	; (8003028 <MX_TIM5_Init+0x94>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <MX_TIM5_Init+0x94>)
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002fd8:	4813      	ldr	r0, [pc, #76]	; (8003028 <MX_TIM5_Init+0x94>)
 8002fda:	f004 fd35 	bl	8007a48 <HAL_TIM_Base_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002fe4:	f000 f966 	bl	80032b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002fee:	f107 0308 	add.w	r3, r7, #8
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	480c      	ldr	r0, [pc, #48]	; (8003028 <MX_TIM5_Init+0x94>)
 8002ff6:	f005 f811 	bl	800801c <HAL_TIM_ConfigClockSource>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003000:	f000 f958 	bl	80032b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800300c:	463b      	mov	r3, r7
 800300e:	4619      	mov	r1, r3
 8003010:	4805      	ldr	r0, [pc, #20]	; (8003028 <MX_TIM5_Init+0x94>)
 8003012:	f005 fc7c 	bl	800890e <HAL_TIMEx_MasterConfigSynchronization>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800301c:	f000 f94a 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000af0 	.word	0x20000af0
 800302c:	40000c00 	.word	0x40000c00

08003030 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <MX_USART1_UART_Init+0x4c>)
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <MX_USART1_UART_Init+0x50>)
 8003038:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <MX_USART1_UART_Init+0x4c>)
 800303c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003040:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003042:	4b0e      	ldr	r3, [pc, #56]	; (800307c <MX_USART1_UART_Init+0x4c>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <MX_USART1_UART_Init+0x4c>)
 800304a:	2200      	movs	r2, #0
 800304c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <MX_USART1_UART_Init+0x4c>)
 8003050:	2200      	movs	r2, #0
 8003052:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <MX_USART1_UART_Init+0x4c>)
 8003056:	220c      	movs	r2, #12
 8003058:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <MX_USART1_UART_Init+0x4c>)
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <MX_USART1_UART_Init+0x4c>)
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003066:	4805      	ldr	r0, [pc, #20]	; (800307c <MX_USART1_UART_Init+0x4c>)
 8003068:	f005 fca7 	bl	80089ba <HAL_UART_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003072:	f000 f91f 	bl	80032b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000b30 	.word	0x20000b30
 8003080:	40013800 	.word	0x40013800

08003084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308a:	f107 0318 	add.w	r3, r7, #24
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003098:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <MX_GPIO_Init+0x154>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4a4e      	ldr	r2, [pc, #312]	; (80031d8 <MX_GPIO_Init+0x154>)
 800309e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030a2:	6193      	str	r3, [r2, #24]
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b0:	4b49      	ldr	r3, [pc, #292]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a48      	ldr	r2, [pc, #288]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030b6:	f043 0310 	orr.w	r3, r3, #16
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b46      	ldr	r3, [pc, #280]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c8:	4b43      	ldr	r3, [pc, #268]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a42      	ldr	r2, [pc, #264]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030ce:	f043 0308 	orr.w	r3, r3, #8
 80030d2:	6193      	str	r3, [r2, #24]
 80030d4:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e0:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030e6:	f043 0320 	orr.w	r3, r3, #32
 80030ea:	6193      	str	r3, [r2, #24]
 80030ec:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f8:	4b37      	ldr	r3, [pc, #220]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4a36      	ldr	r2, [pc, #216]	; (80031d8 <MX_GPIO_Init+0x154>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	6193      	str	r3, [r2, #24]
 8003104:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <MX_GPIO_Init+0x154>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003110:	2200      	movs	r2, #0
 8003112:	2107      	movs	r1, #7
 8003114:	4831      	ldr	r0, [pc, #196]	; (80031dc <MX_GPIO_Init+0x158>)
 8003116:	f003 fd06 	bl	8006b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 800311a:	2201      	movs	r2, #1
 800311c:	2140      	movs	r1, #64	; 0x40
 800311e:	482f      	ldr	r0, [pc, #188]	; (80031dc <MX_GPIO_Init+0x158>)
 8003120:	f003 fd01 	bl	8006b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8003124:	2201      	movs	r2, #1
 8003126:	2123      	movs	r1, #35	; 0x23
 8003128:	482d      	ldr	r0, [pc, #180]	; (80031e0 <MX_GPIO_Init+0x15c>)
 800312a:	f003 fcfc 	bl	8006b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800312e:	2200      	movs	r2, #0
 8003130:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003134:	482b      	ldr	r0, [pc, #172]	; (80031e4 <MX_GPIO_Init+0x160>)
 8003136:	f003 fcf6 	bl	8006b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 DHT11_Pin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 800313a:	2347      	movs	r3, #71	; 0x47
 800313c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313e:	2301      	movs	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003146:	2303      	movs	r3, #3
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800314a:	f107 0318 	add.w	r3, r7, #24
 800314e:	4619      	mov	r1, r3
 8003150:	4822      	ldr	r0, [pc, #136]	; (80031dc <MX_GPIO_Init+0x158>)
 8003152:	f003 fb39 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003156:	2308      	movs	r3, #8
 8003158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800315e:	2301      	movs	r3, #1
 8003160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003162:	f107 0318 	add.w	r3, r7, #24
 8003166:	4619      	mov	r1, r3
 8003168:	481c      	ldr	r0, [pc, #112]	; (80031dc <MX_GPIO_Init+0x158>)
 800316a:	f003 fb2d 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800316e:	2310      	movs	r3, #16
 8003170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <MX_GPIO_Init+0x164>)
 8003174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003176:	2301      	movs	r3, #1
 8003178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800317a:	f107 0318 	add.w	r3, r7, #24
 800317e:	4619      	mov	r1, r3
 8003180:	4816      	ldr	r0, [pc, #88]	; (80031dc <MX_GPIO_Init+0x158>)
 8003182:	f003 fb21 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8003186:	2323      	movs	r3, #35	; 0x23
 8003188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318a:	2301      	movs	r3, #1
 800318c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003192:	2303      	movs	r3, #3
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	f107 0318 	add.w	r3, r7, #24
 800319a:	4619      	mov	r1, r3
 800319c:	4810      	ldr	r0, [pc, #64]	; (80031e0 <MX_GPIO_Init+0x15c>)
 800319e:	f003 fb13 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80031a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80031a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a8:	2301      	movs	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b4:	f107 0318 	add.w	r3, r7, #24
 80031b8:	4619      	mov	r1, r3
 80031ba:	480a      	ldr	r0, [pc, #40]	; (80031e4 <MX_GPIO_Init+0x160>)
 80031bc:	f003 fb04 	bl	80067c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	200a      	movs	r0, #10
 80031c6:	f003 fac8 	bl	800675a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80031ca:	200a      	movs	r0, #10
 80031cc:	f003 fae1 	bl	8006792 <HAL_NVIC_EnableIRQ>

}
 80031d0:	bf00      	nop
 80031d2:	3728      	adds	r7, #40	; 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40011800 	.word	0x40011800
 80031e0:	40010c00 	.word	0x40010c00
 80031e4:	40011400 	.word	0x40011400
 80031e8:	10210000 	.word	0x10210000

080031ec <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
 8003200:	615a      	str	r2, [r3, #20]
 8003202:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003206:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800320a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800320c:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <MX_FSMC_Init+0xbc>)
 800320e:	4a27      	ldr	r2, [pc, #156]	; (80032ac <MX_FSMC_Init+0xc0>)
 8003210:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003218:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <MX_FSMC_Init+0xbc>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003226:	2210      	movs	r2, #16
 8003228:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <MX_FSMC_Init+0xbc>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003238:	2200      	movs	r2, #0
 800323a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <MX_FSMC_Init+0xbc>)
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003242:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <MX_FSMC_Init+0xbc>)
 800324c:	2200      	movs	r2, #0
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003258:	2200      	movs	r2, #0
 800325a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <MX_FSMC_Init+0xbc>)
 800325e:	2200      	movs	r2, #0
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003262:	230f      	movs	r3, #15
 8003264:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003266:	230f      	movs	r3, #15
 8003268:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800326a:	23ff      	movs	r3, #255	; 0xff
 800326c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800326e:	230f      	movs	r3, #15
 8003270:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003272:	2310      	movs	r3, #16
 8003274:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003276:	2311      	movs	r3, #17
 8003278:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2200      	movs	r2, #0
 8003282:	4619      	mov	r1, r3
 8003284:	4808      	ldr	r0, [pc, #32]	; (80032a8 <MX_FSMC_Init+0xbc>)
 8003286:	f004 fb9b 	bl	80079c0 <HAL_SRAM_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8003290:	f000 f810 	bl	80032b4 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <MX_FSMC_Init+0xc4>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <MX_FSMC_Init+0xc4>)
 800329a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800329e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80032a0:	bf00      	nop
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000b70 	.word	0x20000b70
 80032ac:	a0000104 	.word	0xa0000104
 80032b0:	40010000 	.word	0x40010000

080032b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <_putchar>:
#if defined(PRINTF_SUPPORT_FLOAT)
#include <float.h>
#endif

void _putchar(char character)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
	///注意这里的输出函数需要自己修改，我这里是设置了串口输出
    HAL_UART_Transmit(&huart1 ,(uint8_t*)&character, 1, HAL_MAX_DELAY);
 80032ca:	1df9      	adds	r1, r7, #7
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295
 80032d0:	2201      	movs	r2, #1
 80032d2:	4803      	ldr	r0, [pc, #12]	; (80032e0 <_putchar+0x20>)
 80032d4:	f005 fbbe 	bl	8008a54 <HAL_UART_Transmit>
    // send char to console etc.
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000b30 	.word	0x20000b30

080032e4 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d204      	bcs.n	8003306 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	701a      	strb	r2, [r3, #0]
  }
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4603      	mov	r3, r0
 800331e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <_out_char+0x1e>
    _putchar(character);
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ffbc 	bl	80032c0 <_putchar>
  }
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e002      	b.n	8003366 <_strnlen_s+0x16>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3301      	adds	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <_strnlen_s+0x28>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	1e5a      	subs	r2, r3, #1
 8003372:	603a      	str	r2, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f3      	bne.n	8003360 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	2b2f      	cmp	r3, #47	; 0x2f
 8003396:	d904      	bls.n	80033a2 <_is_digit+0x1a>
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	2b39      	cmp	r3, #57	; 0x39
 800339c:	d801      	bhi.n	80033a2 <_is_digit+0x1a>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <_is_digit+0x1c>
 80033a2:	2300      	movs	r3, #0
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	b2db      	uxtb	r3, r3
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80033c0:	e00e      	b.n	80033e0 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1c59      	adds	r1, r3, #1
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6011      	str	r1, [r2, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	4403      	add	r3, r0
 80033dc:	3b30      	subs	r3, #48	; 0x30
 80033de:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ffce 	bl	8003388 <_is_digit>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e7      	bne.n	80033c2 <_atoi+0xe>
  }
  return i;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800340e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d125      	bne.n	8003464 <_out_rev+0x68>
 8003418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d120      	bne.n	8003464 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e00a      	b.n	800343e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	1c53      	adds	r3, r2, #1
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	68fc      	ldr	r4, [r7, #12]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	2020      	movs	r0, #32
 8003436:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3301      	adds	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	429a      	cmp	r2, r3
 8003444:	d3f0      	bcc.n	8003428 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003446:	e00d      	b.n	8003464 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	3b01      	subs	r3, #1
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003452:	4413      	add	r3, r2
 8003454:	7818      	ldrb	r0, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	1c53      	adds	r3, r2, #1
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	68fc      	ldr	r4, [r7, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	47a0      	blx	r4
  while (len) {
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1ee      	bne.n	8003448 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003474:	e007      	b.n	8003486 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	1c53      	adds	r3, r2, #1
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	68fc      	ldr	r4, [r7, #12]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	2020      	movs	r0, #32
 8003484:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348e:	429a      	cmp	r2, r3
 8003490:	d8f1      	bhi.n	8003476 <_out_rev+0x7a>
    }
  }

  return idx;
 8003492:	687b      	ldr	r3, [r7, #4]
}
 8003494:	4618      	mov	r0, r3
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd90      	pop	{r4, r7, pc}

0800349c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af04      	add	r7, sp, #16
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d136      	bne.n	8003522 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d018      	beq.n	80034ec <_ntoa_format+0x50>
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d013      	beq.n	80034ec <_ntoa_format+0x50>
 80034c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <_ntoa_format+0x3a>
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <_ntoa_format+0x50>
      width--;
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	3b01      	subs	r3, #1
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80034dc:	e006      	b.n	80034ec <_ntoa_format+0x50>
      buf[len++] = '0';
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	61fa      	str	r2, [r7, #28]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4413      	add	r3, r2
 80034e8:	2230      	movs	r2, #48	; 0x30
 80034ea:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d20a      	bcs.n	800350a <_ntoa_format+0x6e>
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b1f      	cmp	r3, #31
 80034f8:	d9f1      	bls.n	80034de <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80034fa:	e006      	b.n	800350a <_ntoa_format+0x6e>
      buf[len++] = '0';
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	61fa      	str	r2, [r7, #28]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4413      	add	r3, r2
 8003506:	2230      	movs	r2, #48	; 0x30
 8003508:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <_ntoa_format+0x86>
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	429a      	cmp	r2, r3
 800351a:	d202      	bcs.n	8003522 <_ntoa_format+0x86>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b1f      	cmp	r3, #31
 8003520:	d9ec      	bls.n	80034fc <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	d058      	beq.n	80035de <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d116      	bne.n	8003564 <_ntoa_format+0xc8>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <_ntoa_format+0xc8>
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	429a      	cmp	r2, r3
 8003542:	d003      	beq.n	800354c <_ntoa_format+0xb0>
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	d10b      	bne.n	8003564 <_ntoa_format+0xc8>
      len--;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3b01      	subs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <_ntoa_format+0xc8>
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	2b10      	cmp	r3, #16
 800355c:	d102      	bne.n	8003564 <_ntoa_format+0xc8>
        len--;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3b01      	subs	r3, #1
 8003562:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	2b10      	cmp	r3, #16
 8003568:	d10f      	bne.n	800358a <_ntoa_format+0xee>
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <_ntoa_format+0xee>
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b1f      	cmp	r3, #31
 8003578:	d807      	bhi.n	800358a <_ntoa_format+0xee>
      buf[len++] = 'x';
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	61fa      	str	r2, [r7, #28]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4413      	add	r3, r2
 8003584:	2278      	movs	r2, #120	; 0x78
 8003586:	701a      	strb	r2, [r3, #0]
 8003588:	e01f      	b.n	80035ca <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2b10      	cmp	r3, #16
 800358e:	d10f      	bne.n	80035b0 <_ntoa_format+0x114>
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <_ntoa_format+0x114>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2b1f      	cmp	r3, #31
 800359e:	d807      	bhi.n	80035b0 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	61fa      	str	r2, [r7, #28]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4413      	add	r3, r2
 80035aa:	2258      	movs	r2, #88	; 0x58
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e00c      	b.n	80035ca <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d109      	bne.n	80035ca <_ntoa_format+0x12e>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b1f      	cmp	r3, #31
 80035ba:	d806      	bhi.n	80035ca <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	61fa      	str	r2, [r7, #28]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4413      	add	r3, r2
 80035c6:	2262      	movs	r2, #98	; 0x62
 80035c8:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b1f      	cmp	r3, #31
 80035ce:	d806      	bhi.n	80035de <_ntoa_format+0x142>
      buf[len++] = '0';
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	61fa      	str	r2, [r7, #28]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4413      	add	r3, r2
 80035da:	2230      	movs	r2, #48	; 0x30
 80035dc:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	2b1f      	cmp	r3, #31
 80035e2:	d824      	bhi.n	800362e <_ntoa_format+0x192>
    if (negative) {
 80035e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <_ntoa_format+0x160>
      buf[len++] = '-';
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	61fa      	str	r2, [r7, #28]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4413      	add	r3, r2
 80035f6:	222d      	movs	r2, #45	; 0x2d
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e018      	b.n	800362e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	61fa      	str	r2, [r7, #28]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4413      	add	r3, r2
 8003610:	222b      	movs	r2, #43	; 0x2b
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e00b      	b.n	800362e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	61fa      	str	r2, [r7, #28]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	2220      	movs	r2, #32
 800362c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	9303      	str	r3, [sp, #12]
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff fed9 	bl	80033fc <_out_rev>
 800364a:	4603      	mov	r3, r0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b096      	sub	sp, #88	; 0x58
 8003658:	af08      	add	r7, sp, #32
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d103      	bne.n	8003674 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800366c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366e:	f023 0310 	bic.w	r3, r3, #16
 8003672:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <_ntoa_long+0x30>
 800367e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d032      	beq.n	80036ea <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003688:	fbb3 f2f2 	udiv	r2, r3, r2
 800368c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800368e:	fb01 f202 	mul.w	r2, r1, r2
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003698:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800369c:	2b09      	cmp	r3, #9
 800369e:	d804      	bhi.n	80036aa <_ntoa_long+0x56>
 80036a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036a4:	3330      	adds	r3, #48	; 0x30
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	e00d      	b.n	80036c6 <_ntoa_long+0x72>
 80036aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <_ntoa_long+0x64>
 80036b4:	2241      	movs	r2, #65	; 0x41
 80036b6:	e000      	b.n	80036ba <_ntoa_long+0x66>
 80036b8:	2261      	movs	r2, #97	; 0x61
 80036ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036be:	4413      	add	r3, r2
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3b0a      	subs	r3, #10
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	1c59      	adds	r1, r3, #1
 80036ca:	6379      	str	r1, [r7, #52]	; 0x34
 80036cc:	3338      	adds	r3, #56	; 0x38
 80036ce:	443b      	add	r3, r7
 80036d0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80036d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <_ntoa_long+0x96>
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e6:	2b1f      	cmp	r3, #31
 80036e8:	d9cc      	bls.n	8003684 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80036ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ec:	9306      	str	r3, [sp, #24]
 80036ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f0:	9305      	str	r3, [sp, #20]
 80036f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f4:	9304      	str	r3, [sp, #16]
 80036f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f8:	9303      	str	r3, [sp, #12]
 80036fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036fe:	9302      	str	r3, [sp, #8]
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	f107 0310 	add.w	r3, r7, #16
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7ff fec3 	bl	800349c <_ntoa_format>
 8003716:	4603      	mov	r3, r0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3738      	adds	r7, #56	; 0x38
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b096      	sub	sp, #88	; 0x58
 8003724:	af08      	add	r7, sp, #32
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003736:	4313      	orrs	r3, r2
 8003738:	d103      	bne.n	8003742 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800373a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800373c:	f023 0310 	bic.w	r3, r3, #16
 8003740:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <_ntoa_long_long+0x34>
 800374c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003750:	4313      	orrs	r3, r2
 8003752:	d037      	beq.n	80037c4 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8003754:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003758:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800375c:	f7fd fa70 	bl	8000c40 <__aeabi_uldivmod>
 8003760:	4613      	mov	r3, r2
 8003762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800376a:	2b09      	cmp	r3, #9
 800376c:	d804      	bhi.n	8003778 <_ntoa_long_long+0x58>
 800376e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003772:	3330      	adds	r3, #48	; 0x30
 8003774:	b2da      	uxtb	r2, r3
 8003776:	e00d      	b.n	8003794 <_ntoa_long_long+0x74>
 8003778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <_ntoa_long_long+0x66>
 8003782:	2241      	movs	r2, #65	; 0x41
 8003784:	e000      	b.n	8003788 <_ntoa_long_long+0x68>
 8003786:	2261      	movs	r2, #97	; 0x61
 8003788:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800378c:	4413      	add	r3, r2
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3b0a      	subs	r3, #10
 8003792:	b2da      	uxtb	r2, r3
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	6379      	str	r1, [r7, #52]	; 0x34
 800379a:	3338      	adds	r3, #56	; 0x38
 800379c:	443b      	add	r3, r7
 800379e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80037a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037aa:	f7fd fa49 	bl	8000c40 <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80037b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037ba:	4313      	orrs	r3, r2
 80037bc:	d002      	beq.n	80037c4 <_ntoa_long_long+0xa4>
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	2b1f      	cmp	r3, #31
 80037c2:	d9c7      	bls.n	8003754 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80037c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037c8:	9206      	str	r2, [sp, #24]
 80037ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037cc:	9205      	str	r2, [sp, #20]
 80037ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037d0:	9204      	str	r2, [sp, #16]
 80037d2:	9303      	str	r3, [sp, #12]
 80037d4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80037d8:	9302      	str	r3, [sp, #8]
 80037da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	f107 0310 	add.w	r3, r7, #16
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff fe56 	bl	800349c <_ntoa_format>
 80037f0:	4603      	mov	r3, r0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3738      	adds	r7, #56	; 0x38
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	0000      	movs	r0, r0
 80037fc:	0000      	movs	r0, r0
	...

08003800 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b09d      	sub	sp, #116	; 0x74
 8003804:	af06      	add	r7, sp, #24
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800381e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003822:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003826:	f7fd f92b 	bl	8000a80 <__aeabi_dcmpeq>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10f      	bne.n	8003850 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003836:	9302      	str	r3, [sp, #8]
 8003838:	2303      	movs	r3, #3
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	4b82      	ldr	r3, [pc, #520]	; (8003a48 <_ftoa+0x248>)
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fdd8 	bl	80033fc <_out_rev>
 800384c:	4603      	mov	r3, r0
 800384e:	e224      	b.n	8003c9a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003850:	f04f 32ff 	mov.w	r2, #4294967295
 8003854:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003858:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800385c:	f7fd f91a 	bl	8000a94 <__aeabi_dcmplt>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00f      	beq.n	8003886 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003868:	9303      	str	r3, [sp, #12]
 800386a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800386c:	9302      	str	r3, [sp, #8]
 800386e:	2304      	movs	r3, #4
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <_ftoa+0x24c>)
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff fdbd 	bl	80033fc <_out_rev>
 8003882:	4603      	mov	r3, r0
 8003884:	e209      	b.n	8003c9a <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003886:	f04f 32ff 	mov.w	r2, #4294967295
 800388a:	4b71      	ldr	r3, [pc, #452]	; (8003a50 <_ftoa+0x250>)
 800388c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003890:	f7fd f91e 	bl	8000ad0 <__aeabi_dcmpgt>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d01d      	beq.n	80038d6 <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800389a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <_ftoa+0xa8>
 80038a4:	4b6b      	ldr	r3, [pc, #428]	; (8003a54 <_ftoa+0x254>)
 80038a6:	e000      	b.n	80038aa <_ftoa+0xaa>
 80038a8:	4b6b      	ldr	r3, [pc, #428]	; (8003a58 <_ftoa+0x258>)
 80038aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038ac:	f002 0204 	and.w	r2, r2, #4
 80038b0:	2a00      	cmp	r2, #0
 80038b2:	d001      	beq.n	80038b8 <_ftoa+0xb8>
 80038b4:	2204      	movs	r2, #4
 80038b6:	e000      	b.n	80038ba <_ftoa+0xba>
 80038b8:	2203      	movs	r2, #3
 80038ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80038bc:	9103      	str	r1, [sp, #12]
 80038be:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80038c0:	9102      	str	r1, [sp, #8]
 80038c2:	9201      	str	r2, [sp, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff fd95 	bl	80033fc <_out_rev>
 80038d2:	4603      	mov	r3, r0
 80038d4:	e1e1      	b.n	8003c9a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80038d6:	a358      	add	r3, pc, #352	; (adr r3, 8003a38 <_ftoa+0x238>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038e0:	f7fd f8f6 	bl	8000ad0 <__aeabi_dcmpgt>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <_ftoa+0xfe>
 80038ea:	a355      	add	r3, pc, #340	; (adr r3, 8003a40 <_ftoa+0x240>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038f4:	f7fd f8ce 	bl	8000a94 <__aeabi_dcmplt>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d011      	beq.n	8003922 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80038fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003900:	9304      	str	r3, [sp, #16]
 8003902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003904:	9303      	str	r3, [sp, #12]
 8003906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003908:	9302      	str	r3, [sp, #8]
 800390a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800390e:	e9cd 2300 	strd	r2, r3, [sp]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f9c9 	bl	8003cb0 <_etoa>
 800391e:	4603      	mov	r3, r0
 8003920:	e1bb      	b.n	8003c9a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003922:	2300      	movs	r3, #0
 8003924:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003934:	f7fd f8ae 	bl	8000a94 <__aeabi_dcmplt>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00e      	beq.n	800395c <_ftoa+0x15c>
    negative = true;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8003944:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003948:	f04f 0000 	mov.w	r0, #0
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	f7fc fc76 	bl	8000240 <__aeabi_dsub>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800395c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10d      	bne.n	8003982 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003966:	2306      	movs	r3, #6
 8003968:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800396a:	e00a      	b.n	8003982 <_ftoa+0x182>
    buf[len++] = '0';
 800396c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	657a      	str	r2, [r7, #84]	; 0x54
 8003972:	3358      	adds	r3, #88	; 0x58
 8003974:	443b      	add	r3, r7
 8003976:	2230      	movs	r2, #48	; 0x30
 8003978:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800397c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800397e:	3b01      	subs	r3, #1
 8003980:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003984:	2b1f      	cmp	r3, #31
 8003986:	d802      	bhi.n	800398e <_ftoa+0x18e>
 8003988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800398a:	2b09      	cmp	r3, #9
 800398c:	d8ee      	bhi.n	800396c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800398e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003992:	f7fd f8bd 	bl	8000b10 <__aeabi_d2iz>
 8003996:	4603      	mov	r3, r0
 8003998:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 800399a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800399c:	f7fc fd9e 	bl	80004dc <__aeabi_i2d>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039a8:	f7fc fc4a 	bl	8000240 <__aeabi_dsub>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <_ftoa+0x25c>)
 80039b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fdf6 	bl	80005b0 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 80039cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80039d0:	f7fd f8c6 	bl	8000b60 <__aeabi_d2uiz>
 80039d4:	4603      	mov	r3, r0
 80039d6:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 80039d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80039da:	f7fc fd6f 	bl	80004bc <__aeabi_ui2d>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80039e6:	f7fc fc2b 	bl	8000240 <__aeabi_dsub>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <_ftoa+0x260>)
 80039f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80039fc:	f7fd f868 	bl	8000ad0 <__aeabi_dcmpgt>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d02e      	beq.n	8003a64 <_ftoa+0x264>
    ++frac;
 8003a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a08:	3301      	adds	r3, #1
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003a0c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003a0e:	f7fc fd55 	bl	80004bc <__aeabi_ui2d>
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <_ftoa+0x25c>)
 8003a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fd f84d 	bl	8000abc <__aeabi_dcmpge>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d032      	beq.n	8003a8e <_ftoa+0x28e>
      frac = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 8003a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2e:	3301      	adds	r3, #1
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a32:	e02c      	b.n	8003a8e <_ftoa+0x28e>
 8003a34:	f3af 8000 	nop.w
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	41cdcd65 	.word	0x41cdcd65
 8003a40:	00000000 	.word	0x00000000
 8003a44:	c1cdcd65 	.word	0xc1cdcd65
 8003a48:	08011dc4 	.word	0x08011dc4
 8003a4c:	08011dc8 	.word	0x08011dc8
 8003a50:	7fefffff 	.word	0x7fefffff
 8003a54:	08011dd0 	.word	0x08011dd0
 8003a58:	08011dd8 	.word	0x08011dd8
 8003a5c:	08012520 	.word	0x08012520
 8003a60:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	4b8e      	ldr	r3, [pc, #568]	; (8003ca4 <_ftoa+0x4a4>)
 8003a6a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003a6e:	f7fd f811 	bl	8000a94 <__aeabi_dcmplt>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <_ftoa+0x288>
 8003a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8003a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d133      	bne.n	8003afc <_ftoa+0x2fc>
    diff = value - (double)whole;
 8003a94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003a96:	f7fc fd21 	bl	80004dc <__aeabi_i2d>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003aa2:	f7fc fbcd 	bl	8000240 <__aeabi_dsub>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003aae:	2301      	movs	r3, #1
 8003ab0:	461c      	mov	r4, r3
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	4b7b      	ldr	r3, [pc, #492]	; (8003ca4 <_ftoa+0x4a4>)
 8003ab8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003abc:	f7fc ffea 	bl	8000a94 <__aeabi_dcmplt>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <_ftoa+0x2ca>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	461c      	mov	r4, r3
 8003aca:	b2e3      	uxtb	r3, r4
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <_ftoa+0x2ea>
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	4b72      	ldr	r3, [pc, #456]	; (8003ca4 <_ftoa+0x4a4>)
 8003adc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003ae0:	f7fc fff6 	bl	8000ad0 <__aeabi_dcmpgt>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d04c      	beq.n	8003b84 <_ftoa+0x384>
 8003aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d069      	beq.n	8003bc8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af6:	3301      	adds	r3, #1
 8003af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003afa:	e065      	b.n	8003bc8 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 8003afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003afe:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003b00:	e01f      	b.n	8003b42 <_ftoa+0x342>
      --count;
 8003b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b04:	3b01      	subs	r3, #1
 8003b06:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8003b08:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b0a:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <_ftoa+0x4a8>)
 8003b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8003b10:	08da      	lsrs	r2, r3, #3
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	1aca      	subs	r2, r1, r3
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b20:	1c59      	adds	r1, r3, #1
 8003b22:	6579      	str	r1, [r7, #84]	; 0x54
 8003b24:	3230      	adds	r2, #48	; 0x30
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	3358      	adds	r3, #88	; 0x58
 8003b2a:	443b      	add	r3, r7
 8003b2c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b32:	4a5d      	ldr	r2, [pc, #372]	; (8003ca8 <_ftoa+0x4a8>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	08db      	lsrs	r3, r3, #3
 8003b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b44:	2b1f      	cmp	r3, #31
 8003b46:	d9dc      	bls.n	8003b02 <_ftoa+0x302>
 8003b48:	e009      	b.n	8003b5e <_ftoa+0x35e>
        break;
 8003b4a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003b4c:	e007      	b.n	8003b5e <_ftoa+0x35e>
      buf[len++] = '0';
 8003b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	657a      	str	r2, [r7, #84]	; 0x54
 8003b54:	3358      	adds	r3, #88	; 0x58
 8003b56:	443b      	add	r3, r7
 8003b58:	2230      	movs	r2, #48	; 0x30
 8003b5a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b60:	2b1f      	cmp	r3, #31
 8003b62:	d804      	bhi.n	8003b6e <_ftoa+0x36e>
 8003b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b66:	1e5a      	subs	r2, r3, #1
 8003b68:	647a      	str	r2, [r7, #68]	; 0x44
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ef      	bne.n	8003b4e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b70:	2b1f      	cmp	r3, #31
 8003b72:	d829      	bhi.n	8003bc8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8003b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	657a      	str	r2, [r7, #84]	; 0x54
 8003b7a:	3358      	adds	r3, #88	; 0x58
 8003b7c:	443b      	add	r3, r7
 8003b7e:	222e      	movs	r2, #46	; 0x2e
 8003b80:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003b84:	e020      	b.n	8003bc8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8003b86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b88:	4b48      	ldr	r3, [pc, #288]	; (8003cac <_ftoa+0x4ac>)
 8003b8a:	fb83 1302 	smull	r1, r3, r3, r2
 8003b8e:	1099      	asrs	r1, r3, #2
 8003b90:	17d3      	asrs	r3, r2, #31
 8003b92:	1ac9      	subs	r1, r1, r3
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	1ad1      	subs	r1, r2, r3
 8003b9e:	b2ca      	uxtb	r2, r1
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	6579      	str	r1, [r7, #84]	; 0x54
 8003ba6:	3230      	adds	r2, #48	; 0x30
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	3358      	adds	r3, #88	; 0x58
 8003bac:	443b      	add	r3, r7
 8003bae:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <_ftoa+0x4ac>)
 8003bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8003bba:	1092      	asrs	r2, r2, #2
 8003bbc:	17db      	asrs	r3, r3, #31
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bca:	2b1f      	cmp	r3, #31
 8003bcc:	d9db      	bls.n	8003b86 <_ftoa+0x386>
 8003bce:	e000      	b.n	8003bd2 <_ftoa+0x3d2>
      break;
 8003bd0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d123      	bne.n	8003c24 <_ftoa+0x424>
 8003bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01e      	beq.n	8003c24 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d014      	beq.n	8003c16 <_ftoa+0x416>
 8003bec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <_ftoa+0x3fe>
 8003bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <_ftoa+0x416>
      width--;
 8003bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c00:	3b01      	subs	r3, #1
 8003c02:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003c04:	e007      	b.n	8003c16 <_ftoa+0x416>
      buf[len++] = '0';
 8003c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	657a      	str	r2, [r7, #84]	; 0x54
 8003c0c:	3358      	adds	r3, #88	; 0x58
 8003c0e:	443b      	add	r3, r7
 8003c10:	2230      	movs	r2, #48	; 0x30
 8003c12:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003c16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d202      	bcs.n	8003c24 <_ftoa+0x424>
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c20:	2b1f      	cmp	r3, #31
 8003c22:	d9f0      	bls.n	8003c06 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c26:	2b1f      	cmp	r3, #31
 8003c28:	d827      	bhi.n	8003c7a <_ftoa+0x47a>
    if (negative) {
 8003c2a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <_ftoa+0x444>
      buf[len++] = '-';
 8003c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	657a      	str	r2, [r7, #84]	; 0x54
 8003c38:	3358      	adds	r3, #88	; 0x58
 8003c3a:	443b      	add	r3, r7
 8003c3c:	222d      	movs	r2, #45	; 0x2d
 8003c3e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003c42:	e01a      	b.n	8003c7a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8003c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	657a      	str	r2, [r7, #84]	; 0x54
 8003c54:	3358      	adds	r3, #88	; 0x58
 8003c56:	443b      	add	r3, r7
 8003c58:	222b      	movs	r2, #43	; 0x2b
 8003c5a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003c5e:	e00c      	b.n	8003c7a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <_ftoa+0x47a>
      buf[len++] = ' ';
 8003c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	657a      	str	r2, [r7, #84]	; 0x54
 8003c70:	3358      	adds	r3, #88	; 0x58
 8003c72:	443b      	add	r3, r7
 8003c74:	2220      	movs	r2, #32
 8003c76:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c7c:	9303      	str	r3, [sp, #12]
 8003c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	f107 0310 	add.w	r3, r7, #16
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff fbb2 	bl	80033fc <_out_rev>
 8003c98:	4603      	mov	r3, r0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	375c      	adds	r7, #92	; 0x5c
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd90      	pop	{r4, r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	3fe00000 	.word	0x3fe00000
 8003ca8:	cccccccd 	.word	0xcccccccd
 8003cac:	66666667 	.word	0x66666667

08003cb0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	b09d      	sub	sp, #116	; 0x74
 8003cb6:	af06      	add	r7, sp, #24
 8003cb8:	61f8      	str	r0, [r7, #28]
 8003cba:	61b9      	str	r1, [r7, #24]
 8003cbc:	617a      	str	r2, [r7, #20]
 8003cbe:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003cc0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003cc4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cc8:	f7fc feda 	bl	8000a80 <__aeabi_dcmpeq>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d014      	beq.n	8003cfc <_etoa+0x4c>
 8003cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd6:	4bc4      	ldr	r3, [pc, #784]	; (8003fe8 <_etoa+0x338>)
 8003cd8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cdc:	f7fc fef8 	bl	8000ad0 <__aeabi_dcmpgt>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <_etoa+0x4c>
 8003ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cea:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cf2:	f7fc fecf 	bl	8000a94 <__aeabi_dcmplt>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d014      	beq.n	8003d26 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d00:	9304      	str	r3, [sp, #16]
 8003d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d0c:	9302      	str	r3, [sp, #8]
 8003d0e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003d12:	e9cd 2300 	strd	r2, r3, [sp]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	69b9      	ldr	r1, [r7, #24]
 8003d1c:	69f8      	ldr	r0, [r7, #28]
 8003d1e:	f7ff fd6f 	bl	8003800 <_ftoa>
 8003d22:	4603      	mov	r3, r0
 8003d24:	e247      	b.n	80041b6 <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 8003d26:	2301      	movs	r3, #1
 8003d28:	461e      	mov	r6, r3
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d36:	f7fc fead 	bl	8000a94 <__aeabi_dcmplt>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <_etoa+0x94>
 8003d40:	2300      	movs	r3, #0
 8003d42:	461e      	mov	r6, r3
 8003d44:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8003d48:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <_etoa+0xb8>
    value = -value;
 8003d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d64:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003d74:	2306      	movs	r3, #6
 8003d76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003d7a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003d7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003d82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	0d0a      	lsrs	r2, r1, #20
 8003d90:	2300      	movs	r3, #0
 8003d92:	4613      	mov	r3, r2
 8003d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003d9c:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003da2:	4690      	mov	r8, r2
 8003da4:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003da8:	4644      	mov	r4, r8
 8003daa:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003dae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003db2:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003db6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003db8:	f7fc fb90 	bl	80004dc <__aeabi_i2d>
 8003dbc:	a37e      	add	r3, pc, #504	; (adr r3, 8003fb8 <_etoa+0x308>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f7fc fbf5 	bl	80005b0 <__aeabi_dmul>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	a37c      	add	r3, pc, #496	; (adr r3, 8003fc0 <_etoa+0x310>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f7fc fa36 	bl	8000244 <__adddf3>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4614      	mov	r4, r2
 8003dde:	461d      	mov	r5, r3
 8003de0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	4b80      	ldr	r3, [pc, #512]	; (8003fec <_etoa+0x33c>)
 8003dea:	f7fc fa29 	bl	8000240 <__aeabi_dsub>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	a374      	add	r3, pc, #464	; (adr r3, 8003fc8 <_etoa+0x318>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc fbd8 	bl	80005b0 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4620      	mov	r0, r4
 8003e06:	4629      	mov	r1, r5
 8003e08:	f7fc fa1c 	bl	8000244 <__adddf3>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	f7fc fe7c 	bl	8000b10 <__aeabi_d2iz>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003e1c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003e1e:	f7fc fb5d 	bl	80004dc <__aeabi_i2d>
 8003e22:	a36b      	add	r3, pc, #428	; (adr r3, 8003fd0 <_etoa+0x320>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f7fc fbc2 	bl	80005b0 <__aeabi_dmul>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <_etoa+0x340>)
 8003e3a:	f7fc fa03 	bl	8000244 <__adddf3>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	f7fc fe63 	bl	8000b10 <__aeabi_d2iz>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003e4e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003e50:	f7fc fb44 	bl	80004dc <__aeabi_i2d>
 8003e54:	a360      	add	r3, pc, #384	; (adr r3, 8003fd8 <_etoa+0x328>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f7fc fba9 	bl	80005b0 <__aeabi_dmul>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4614      	mov	r4, r2
 8003e64:	461d      	mov	r5, r3
 8003e66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003e68:	f7fc fb38 	bl	80004dc <__aeabi_i2d>
 8003e6c:	a35c      	add	r3, pc, #368	; (adr r3, 8003fe0 <_etoa+0x330>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f7fc fb9d 	bl	80005b0 <__aeabi_dmul>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	f7fc f9df 	bl	8000240 <__aeabi_dsub>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8003e8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e8e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003e92:	f7fc fb8d 	bl	80005b0 <__aeabi_dmul>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003ea4:	17da      	asrs	r2, r3, #31
 8003ea6:	469a      	mov	sl, r3
 8003ea8:	4693      	mov	fp, r2
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003ebc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ec0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	f7fc f9bc 	bl	8000244 <__adddf3>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4690      	mov	r8, r2
 8003ed2:	4699      	mov	r9, r3
 8003ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ed8:	f04f 0000 	mov.w	r0, #0
 8003edc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003ee0:	f7fc f9ae 	bl	8000240 <__aeabi_dsub>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4692      	mov	sl, r2
 8003eea:	469b      	mov	fp, r3
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <_etoa+0x344>)
 8003ef2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003ef6:	f7fc fc85 	bl	8000804 <__aeabi_ddiv>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	4b3c      	ldr	r3, [pc, #240]	; (8003ff8 <_etoa+0x348>)
 8003f08:	f7fc f99c 	bl	8000244 <__adddf3>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f14:	f7fc fc76 	bl	8000804 <__aeabi_ddiv>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <_etoa+0x34c>)
 8003f26:	f7fc f98d 	bl	8000244 <__adddf3>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f32:	f7fc fc67 	bl	8000804 <__aeabi_ddiv>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	f7fc f981 	bl	8000244 <__adddf3>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4640      	mov	r0, r8
 8003f48:	4649      	mov	r1, r9
 8003f4a:	f7fc fc5b 	bl	8000804 <__aeabi_ddiv>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <_etoa+0x350>)
 8003f5c:	f7fc f972 	bl	8000244 <__adddf3>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4620      	mov	r0, r4
 8003f66:	4629      	mov	r1, r5
 8003f68:	f7fc fb22 	bl	80005b0 <__aeabi_dmul>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8003f74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f78:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f7c:	f7fc fd8a 	bl	8000a94 <__aeabi_dcmplt>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <_etoa+0x2f2>
    expval--;
 8003f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8003f8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <_etoa+0x348>)
 8003f96:	f7fc fc35 	bl	8000804 <__aeabi_ddiv>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa4:	2b63      	cmp	r3, #99	; 0x63
 8003fa6:	dc2d      	bgt.n	8004004 <_etoa+0x354>
 8003fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003faa:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003fae:	db29      	blt.n	8004004 <_etoa+0x354>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	e028      	b.n	8004006 <_etoa+0x356>
 8003fb4:	f3af 8000 	nop.w
 8003fb8:	509f79fb 	.word	0x509f79fb
 8003fbc:	3fd34413 	.word	0x3fd34413
 8003fc0:	8b60c8b3 	.word	0x8b60c8b3
 8003fc4:	3fc68a28 	.word	0x3fc68a28
 8003fc8:	636f4361 	.word	0x636f4361
 8003fcc:	3fd287a7 	.word	0x3fd287a7
 8003fd0:	0979a371 	.word	0x0979a371
 8003fd4:	400a934f 	.word	0x400a934f
 8003fd8:	bbb55516 	.word	0xbbb55516
 8003fdc:	40026bb1 	.word	0x40026bb1
 8003fe0:	fefa39ef 	.word	0xfefa39ef
 8003fe4:	3fe62e42 	.word	0x3fe62e42
 8003fe8:	7fefffff 	.word	0x7fefffff
 8003fec:	3ff80000 	.word	0x3ff80000
 8003ff0:	3fe00000 	.word	0x3fe00000
 8003ff4:	402c0000 	.word	0x402c0000
 8003ff8:	40240000 	.word	0x40240000
 8003ffc:	40180000 	.word	0x40180000
 8004000:	3ff00000 	.word	0x3ff00000
 8004004:	2305      	movs	r3, #5
 8004006:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004008:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800400c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004010:	2b00      	cmp	r3, #0
 8004012:	d03d      	beq.n	8004090 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004014:	a36a      	add	r3, pc, #424	; (adr r3, 80041c0 <_etoa+0x510>)
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800401e:	f7fc fd4d 	bl	8000abc <__aeabi_dcmpge>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d024      	beq.n	8004072 <_etoa+0x3c2>
 8004028:	a367      	add	r3, pc, #412	; (adr r3, 80041c8 <_etoa+0x518>)
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004032:	f7fc fd2f 	bl	8000a94 <__aeabi_dcmplt>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01a      	beq.n	8004072 <_etoa+0x3c2>
      if ((int)prec > expval) {
 800403c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004040:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004042:	429a      	cmp	r2, r3
 8004044:	da07      	bge.n	8004056 <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8004046:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800404a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004054:	e002      	b.n	800405c <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800405c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	657b      	str	r3, [r7, #84]	; 0x54
 8004070:	e00e      	b.n	8004090 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004072:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <_etoa+0x3e0>
 800407a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800407e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <_etoa+0x3e0>
        --prec;
 8004086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800408a:	3b01      	subs	r3, #1
 800408c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004094:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8004096:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800409a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409c:	429a      	cmp	r2, r3
 800409e:	d904      	bls.n	80040aa <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80040a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a8:	e001      	b.n	80040ae <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80040ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <_etoa+0x414>
 80040ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 80040c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <_etoa+0x42e>
    value /= conv.F;
 80040ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040d2:	f7fc fb97 	bl	8000804 <__aeabi_ddiv>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80040e2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <_etoa+0x44c>
 80040ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	e003      	b.n	8004104 <_etoa+0x454>
 80040fc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004100:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004104:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004110:	9303      	str	r3, [sp, #12]
 8004112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004116:	9302      	str	r3, [sp, #8]
 8004118:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800411c:	e9cd 3400 	strd	r3, r4, [sp]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	69b9      	ldr	r1, [r7, #24]
 8004126:	69f8      	ldr	r0, [r7, #28]
 8004128:	f7ff fb6a 	bl	8003800 <_ftoa>
 800412c:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800412e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004130:	2b00      	cmp	r3, #0
 8004132:	d03f      	beq.n	80041b4 <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <_etoa+0x494>
 8004140:	2045      	movs	r0, #69	; 0x45
 8004142:	e000      	b.n	8004146 <_etoa+0x496>
 8004144:	2065      	movs	r0, #101	; 0x65
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	1c53      	adds	r3, r2, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	69fc      	ldr	r4, [r7, #28]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	69b9      	ldr	r1, [r7, #24]
 8004152:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004156:	2b00      	cmp	r3, #0
 8004158:	bfb8      	it	lt
 800415a:	425b      	neglt	r3, r3
 800415c:	4618      	mov	r0, r3
 800415e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004160:	0fdb      	lsrs	r3, r3, #31
 8004162:	b2db      	uxtb	r3, r3
 8004164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004166:	3a01      	subs	r2, #1
 8004168:	2105      	movs	r1, #5
 800416a:	9105      	str	r1, [sp, #20]
 800416c:	9204      	str	r2, [sp, #16]
 800416e:	2200      	movs	r2, #0
 8004170:	9203      	str	r2, [sp, #12]
 8004172:	220a      	movs	r2, #10
 8004174:	9202      	str	r2, [sp, #8]
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	9000      	str	r0, [sp, #0]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	69f8      	ldr	r0, [r7, #28]
 8004182:	f7ff fa67 	bl	8003654 <_ntoa_long>
 8004186:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00f      	beq.n	80041b4 <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004194:	e007      	b.n	80041a6 <_etoa+0x4f6>
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	1c53      	adds	r3, r2, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	69fc      	ldr	r4, [r7, #28]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	2020      	movs	r0, #32
 80041a4:	47a0      	blx	r4
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d8f0      	bhi.n	8004196 <_etoa+0x4e6>
    }
  }
  return idx;
 80041b4:	697b      	ldr	r3, [r7, #20]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	375c      	adds	r7, #92	; 0x5c
 80041ba:	46bd      	mov	sp, r7
 80041bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c0:	eb1c432d 	.word	0xeb1c432d
 80041c4:	3f1a36e2 	.word	0x3f1a36e2
 80041c8:	00000000 	.word	0x00000000
 80041cc:	412e8480 	.word	0x412e8480

080041d0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	b0a3      	sub	sp, #140	; 0x8c
 80041d6:	af0a      	add	r7, sp, #40	; 0x28
 80041d8:	6178      	str	r0, [r7, #20]
 80041da:	6139      	str	r1, [r7, #16]
 80041dc:	60fa      	str	r2, [r7, #12]
 80041de:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 84ba 	bne.w	8004b60 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 80041ec:	4ba3      	ldr	r3, [pc, #652]	; (800447c <_vsnprintf+0x2ac>)
 80041ee:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80041f0:	f000 bcb6 	b.w	8004b60 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b25      	cmp	r3, #37	; 0x25
 80041fa:	d00d      	beq.n	8004218 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	7818      	ldrb	r0, [r3, #0]
 8004200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004202:	1c53      	adds	r3, r2, #1
 8004204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004206:	697c      	ldr	r4, [r7, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6939      	ldr	r1, [r7, #16]
 800420c:	47a0      	blx	r4
      format++;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3301      	adds	r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
      continue;
 8004214:	f000 bca4 	b.w	8004b60 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	3301      	adds	r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	3b20      	subs	r3, #32
 8004228:	2b10      	cmp	r3, #16
 800422a:	d857      	bhi.n	80042dc <_vsnprintf+0x10c>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <_vsnprintf+0x64>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	080042b5 	.word	0x080042b5
 8004238:	080042dd 	.word	0x080042dd
 800423c:	080042dd 	.word	0x080042dd
 8004240:	080042c9 	.word	0x080042c9
 8004244:	080042dd 	.word	0x080042dd
 8004248:	080042dd 	.word	0x080042dd
 800424c:	080042dd 	.word	0x080042dd
 8004250:	080042dd 	.word	0x080042dd
 8004254:	080042dd 	.word	0x080042dd
 8004258:	080042dd 	.word	0x080042dd
 800425c:	080042dd 	.word	0x080042dd
 8004260:	080042a1 	.word	0x080042a1
 8004264:	080042dd 	.word	0x080042dd
 8004268:	0800428d 	.word	0x0800428d
 800426c:	080042dd 	.word	0x080042dd
 8004270:	080042dd 	.word	0x080042dd
 8004274:	08004279 	.word	0x08004279
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3301      	adds	r3, #1
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	2301      	movs	r3, #1
 8004288:	653b      	str	r3, [r7, #80]	; 0x50
 800428a:	e02a      	b.n	80042e2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800428c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428e:	f043 0302 	orr.w	r3, r3, #2
 8004292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	3301      	adds	r3, #1
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	2301      	movs	r3, #1
 800429c:	653b      	str	r3, [r7, #80]	; 0x50
 800429e:	e020      	b.n	80042e2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80042a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	2301      	movs	r3, #1
 80042b0:	653b      	str	r3, [r7, #80]	; 0x50
 80042b2:	e016      	b.n	80042e2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80042b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b6:	f043 0308 	orr.w	r3, r3, #8
 80042ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	3301      	adds	r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	2301      	movs	r3, #1
 80042c4:	653b      	str	r3, [r7, #80]	; 0x50
 80042c6:	e00c      	b.n	80042e2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80042c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ca:	f043 0310 	orr.w	r3, r3, #16
 80042ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3301      	adds	r3, #1
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	2301      	movs	r3, #1
 80042d8:	653b      	str	r3, [r7, #80]	; 0x50
 80042da:	e002      	b.n	80042e2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80042dc:	2300      	movs	r3, #0
 80042de:	653b      	str	r3, [r7, #80]	; 0x50
 80042e0:	bf00      	nop
      }
    } while (n);
 80042e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d19c      	bne.n	8004222 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff f849 	bl	8003388 <_is_digit>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d006      	beq.n	800430a <_vsnprintf+0x13a>
      width = _atoi(&format);
 80042fc:	f107 0308 	add.w	r3, r7, #8
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff f857 	bl	80033b4 <_atoi>
 8004306:	65b8      	str	r0, [r7, #88]	; 0x58
 8004308:	e01a      	b.n	8004340 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b2a      	cmp	r3, #42	; 0x2a
 8004310:	d116      	bne.n	8004340 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004316:	1d1a      	adds	r2, r3, #4
 8004318:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	2b00      	cmp	r3, #0
 8004324:	da07      	bge.n	8004336 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	425b      	negs	r3, r3
 8004332:	65bb      	str	r3, [r7, #88]	; 0x58
 8004334:	e001      	b.n	800433a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3301      	adds	r3, #1
 800433e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b2e      	cmp	r3, #46	; 0x2e
 800434a:	d127      	bne.n	800439c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800434c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004352:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3301      	adds	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff f812 	bl	8003388 <_is_digit>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800436a:	f107 0308 	add.w	r3, r7, #8
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff f820 	bl	80033b4 <_atoi>
 8004374:	6578      	str	r0, [r7, #84]	; 0x54
 8004376:	e011      	b.n	800439c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b2a      	cmp	r3, #42	; 0x2a
 800437e:	d10d      	bne.n	800439c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004384:	1d1a      	adds	r2, r3, #4
 8004386:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800438e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004390:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004394:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3301      	adds	r3, #1
 800439a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	3b68      	subs	r3, #104	; 0x68
 80043a2:	2b12      	cmp	r3, #18
 80043a4:	d866      	bhi.n	8004474 <_vsnprintf+0x2a4>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <_vsnprintf+0x1dc>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	0800441f 	.word	0x0800441f
 80043b0:	08004475 	.word	0x08004475
 80043b4:	08004455 	.word	0x08004455
 80043b8:	08004475 	.word	0x08004475
 80043bc:	080043f9 	.word	0x080043f9
 80043c0:	08004475 	.word	0x08004475
 80043c4:	08004475 	.word	0x08004475
 80043c8:	08004475 	.word	0x08004475
 80043cc:	08004475 	.word	0x08004475
 80043d0:	08004475 	.word	0x08004475
 80043d4:	08004475 	.word	0x08004475
 80043d8:	08004475 	.word	0x08004475
 80043dc:	08004445 	.word	0x08004445
 80043e0:	08004475 	.word	0x08004475
 80043e4:	08004475 	.word	0x08004475
 80043e8:	08004475 	.word	0x08004475
 80043ec:	08004475 	.word	0x08004475
 80043f0:	08004475 	.word	0x08004475
 80043f4:	08004465 	.word	0x08004465
      case 'l' :
        flags |= FLAGS_LONG;
 80043f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fe:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	3301      	adds	r3, #1
 8004404:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b6c      	cmp	r3, #108	; 0x6c
 800440c:	d134      	bne.n	8004478 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800440e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004414:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3301      	adds	r3, #1
 800441a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800441c:	e02c      	b.n	8004478 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800441e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004424:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	3301      	adds	r3, #1
 800442a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b68      	cmp	r3, #104	; 0x68
 8004432:	d125      	bne.n	8004480 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8004434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800443a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	3301      	adds	r3, #1
 8004440:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004442:	e01d      	b.n	8004480 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	3301      	adds	r3, #1
 8004450:	60bb      	str	r3, [r7, #8]
        break;
 8004452:	e016      	b.n	8004482 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800445a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	3301      	adds	r3, #1
 8004460:	60bb      	str	r3, [r7, #8]
        break;
 8004462:	e00e      	b.n	8004482 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	3301      	adds	r3, #1
 8004470:	60bb      	str	r3, [r7, #8]
        break;
 8004472:	e006      	b.n	8004482 <_vsnprintf+0x2b2>
      default :
        break;
 8004474:	bf00      	nop
 8004476:	e004      	b.n	8004482 <_vsnprintf+0x2b2>
        break;
 8004478:	bf00      	nop
 800447a:	e002      	b.n	8004482 <_vsnprintf+0x2b2>
 800447c:	08003311 	.word	0x08003311
        break;
 8004480:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3b25      	subs	r3, #37	; 0x25
 8004488:	2b53      	cmp	r3, #83	; 0x53
 800448a:	f200 835c 	bhi.w	8004b46 <_vsnprintf+0x976>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <_vsnprintf+0x2c4>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	08004b2f 	.word	0x08004b2f
 8004498:	08004b47 	.word	0x08004b47
 800449c:	08004b47 	.word	0x08004b47
 80044a0:	08004b47 	.word	0x08004b47
 80044a4:	08004b47 	.word	0x08004b47
 80044a8:	08004b47 	.word	0x08004b47
 80044ac:	08004b47 	.word	0x08004b47
 80044b0:	08004b47 	.word	0x08004b47
 80044b4:	08004b47 	.word	0x08004b47
 80044b8:	08004b47 	.word	0x08004b47
 80044bc:	08004b47 	.word	0x08004b47
 80044c0:	08004b47 	.word	0x08004b47
 80044c4:	08004b47 	.word	0x08004b47
 80044c8:	08004b47 	.word	0x08004b47
 80044cc:	08004b47 	.word	0x08004b47
 80044d0:	08004b47 	.word	0x08004b47
 80044d4:	08004b47 	.word	0x08004b47
 80044d8:	08004b47 	.word	0x08004b47
 80044dc:	08004b47 	.word	0x08004b47
 80044e0:	08004b47 	.word	0x08004b47
 80044e4:	08004b47 	.word	0x08004b47
 80044e8:	08004b47 	.word	0x08004b47
 80044ec:	08004b47 	.word	0x08004b47
 80044f0:	08004b47 	.word	0x08004b47
 80044f4:	08004b47 	.word	0x08004b47
 80044f8:	08004b47 	.word	0x08004b47
 80044fc:	08004b47 	.word	0x08004b47
 8004500:	08004b47 	.word	0x08004b47
 8004504:	08004b47 	.word	0x08004b47
 8004508:	08004b47 	.word	0x08004b47
 800450c:	08004b47 	.word	0x08004b47
 8004510:	08004b47 	.word	0x08004b47
 8004514:	080048e7 	.word	0x080048e7
 8004518:	0800489b 	.word	0x0800489b
 800451c:	080048e7 	.word	0x080048e7
 8004520:	08004b47 	.word	0x08004b47
 8004524:	08004b47 	.word	0x08004b47
 8004528:	08004b47 	.word	0x08004b47
 800452c:	08004b47 	.word	0x08004b47
 8004530:	08004b47 	.word	0x08004b47
 8004534:	08004b47 	.word	0x08004b47
 8004538:	08004b47 	.word	0x08004b47
 800453c:	08004b47 	.word	0x08004b47
 8004540:	08004b47 	.word	0x08004b47
 8004544:	08004b47 	.word	0x08004b47
 8004548:	08004b47 	.word	0x08004b47
 800454c:	08004b47 	.word	0x08004b47
 8004550:	08004b47 	.word	0x08004b47
 8004554:	08004b47 	.word	0x08004b47
 8004558:	08004b47 	.word	0x08004b47
 800455c:	08004b47 	.word	0x08004b47
 8004560:	080045e5 	.word	0x080045e5
 8004564:	08004b47 	.word	0x08004b47
 8004568:	08004b47 	.word	0x08004b47
 800456c:	08004b47 	.word	0x08004b47
 8004570:	08004b47 	.word	0x08004b47
 8004574:	08004b47 	.word	0x08004b47
 8004578:	08004b47 	.word	0x08004b47
 800457c:	08004b47 	.word	0x08004b47
 8004580:	08004b47 	.word	0x08004b47
 8004584:	08004b47 	.word	0x08004b47
 8004588:	080045e5 	.word	0x080045e5
 800458c:	08004953 	.word	0x08004953
 8004590:	080045e5 	.word	0x080045e5
 8004594:	080048e7 	.word	0x080048e7
 8004598:	0800489b 	.word	0x0800489b
 800459c:	080048e7 	.word	0x080048e7
 80045a0:	08004b47 	.word	0x08004b47
 80045a4:	080045e5 	.word	0x080045e5
 80045a8:	08004b47 	.word	0x08004b47
 80045ac:	08004b47 	.word	0x08004b47
 80045b0:	08004b47 	.word	0x08004b47
 80045b4:	08004b47 	.word	0x08004b47
 80045b8:	08004b47 	.word	0x08004b47
 80045bc:	080045e5 	.word	0x080045e5
 80045c0:	08004a93 	.word	0x08004a93
 80045c4:	08004b47 	.word	0x08004b47
 80045c8:	08004b47 	.word	0x08004b47
 80045cc:	080049cb 	.word	0x080049cb
 80045d0:	08004b47 	.word	0x08004b47
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	08004b47 	.word	0x08004b47
 80045dc:	08004b47 	.word	0x08004b47
 80045e0:	080045e5 	.word	0x080045e5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b78      	cmp	r3, #120	; 0x78
 80045ea:	d003      	beq.n	80045f4 <_vsnprintf+0x424>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b58      	cmp	r3, #88	; 0x58
 80045f2:	d102      	bne.n	80045fa <_vsnprintf+0x42a>
          base = 16U;
 80045f4:	2310      	movs	r3, #16
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f8:	e013      	b.n	8004622 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b6f      	cmp	r3, #111	; 0x6f
 8004600:	d102      	bne.n	8004608 <_vsnprintf+0x438>
          base =  8U;
 8004602:	2308      	movs	r3, #8
 8004604:	64bb      	str	r3, [r7, #72]	; 0x48
 8004606:	e00c      	b.n	8004622 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b62      	cmp	r3, #98	; 0x62
 800460e:	d102      	bne.n	8004616 <_vsnprintf+0x446>
          base =  2U;
 8004610:	2302      	movs	r3, #2
 8004612:	64bb      	str	r3, [r7, #72]	; 0x48
 8004614:	e005      	b.n	8004622 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8004616:	230a      	movs	r3, #10
 8004618:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800461a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461c:	f023 0310 	bic.w	r3, r3, #16
 8004620:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b58      	cmp	r3, #88	; 0x58
 8004628:	d103      	bne.n	8004632 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800462a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462c:	f043 0320 	orr.w	r3, r3, #32
 8004630:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b69      	cmp	r3, #105	; 0x69
 8004638:	d007      	beq.n	800464a <_vsnprintf+0x47a>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d003      	beq.n	800464a <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004644:	f023 030c 	bic.w	r3, r3, #12
 8004648:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800464a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8004654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b69      	cmp	r3, #105	; 0x69
 8004662:	d004      	beq.n	800466e <_vsnprintf+0x49e>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b64      	cmp	r3, #100	; 0x64
 800466a:	f040 8098 	bne.w	800479e <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800466e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004674:	2b00      	cmp	r3, #0
 8004676:	d031      	beq.n	80046dc <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800467c:	3307      	adds	r3, #7
 800467e:	f023 0307 	bic.w	r3, r3, #7
 8004682:	f103 0208 	add.w	r2, r3, #8
 8004686:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	da06      	bge.n	80046a8 <_vsnprintf+0x4d8>
 800469a:	2100      	movs	r1, #0
 800469c:	f1d2 0800 	rsbs	r8, r2, #0
 80046a0:	eb61 0903 	sbc.w	r9, r1, r3
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	69f9      	ldr	r1, [r7, #28]
 80046aa:	0fc9      	lsrs	r1, r1, #31
 80046ac:	b2c9      	uxtb	r1, r1
 80046ae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046b0:	2400      	movs	r4, #0
 80046b2:	4682      	mov	sl, r0
 80046b4:	46a3      	mov	fp, r4
 80046b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80046b8:	9008      	str	r0, [sp, #32]
 80046ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80046bc:	9007      	str	r0, [sp, #28]
 80046be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80046c0:	9006      	str	r0, [sp, #24]
 80046c2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80046c6:	9102      	str	r1, [sp, #8]
 80046c8:	e9cd 2300 	strd	r2, r3, [sp]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046d0:	6939      	ldr	r1, [r7, #16]
 80046d2:	6978      	ldr	r0, [r7, #20]
 80046d4:	f7ff f824 	bl	8003720 <_ntoa_long_long>
 80046d8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80046da:	e0da      	b.n	8004892 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80046dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d020      	beq.n	8004728 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 80046e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bfb8      	it	lt
 80046fa:	425b      	neglt	r3, r3
 80046fc:	4619      	mov	r1, r3
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	0fdb      	lsrs	r3, r3, #31
 8004702:	b2db      	uxtb	r3, r3
 8004704:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004706:	9205      	str	r2, [sp, #20]
 8004708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800470a:	9204      	str	r2, [sp, #16]
 800470c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800470e:	9203      	str	r2, [sp, #12]
 8004710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004712:	9202      	str	r2, [sp, #8]
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	9100      	str	r1, [sp, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800471c:	6939      	ldr	r1, [r7, #16]
 800471e:	6978      	ldr	r0, [r7, #20]
 8004720:	f7fe ff98 	bl	8003654 <_ntoa_long>
 8004724:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004726:	e0b4      	b.n	8004892 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <_vsnprintf+0x572>
 8004732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004736:	1d1a      	adds	r2, r3, #4
 8004738:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	e012      	b.n	8004768 <_vsnprintf+0x598>
 8004742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <_vsnprintf+0x58c>
 800474c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004750:	1d1a      	adds	r2, r3, #4
 8004752:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b21b      	sxth	r3, r3
 800475a:	e005      	b.n	8004768 <_vsnprintf+0x598>
 800475c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004760:	1d1a      	adds	r2, r3, #4
 8004762:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	bfb8      	it	lt
 8004770:	425b      	neglt	r3, r3
 8004772:	4619      	mov	r1, r3
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	0fdb      	lsrs	r3, r3, #31
 8004778:	b2db      	uxtb	r3, r3
 800477a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800477c:	9205      	str	r2, [sp, #20]
 800477e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004780:	9204      	str	r2, [sp, #16]
 8004782:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004784:	9203      	str	r2, [sp, #12]
 8004786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004788:	9202      	str	r2, [sp, #8]
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	9100      	str	r1, [sp, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004792:	6939      	ldr	r1, [r7, #16]
 8004794:	6978      	ldr	r0, [r7, #20]
 8004796:	f7fe ff5d 	bl	8003654 <_ntoa_long>
 800479a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800479c:	e079      	b.n	8004892 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800479e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d022      	beq.n	80047ee <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80047a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047ac:	3307      	adds	r3, #7
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	f103 0208 	add.w	r2, r3, #8
 80047b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80047c0:	2000      	movs	r0, #0
 80047c2:	460d      	mov	r5, r1
 80047c4:	4606      	mov	r6, r0
 80047c6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80047c8:	9108      	str	r1, [sp, #32]
 80047ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047cc:	9107      	str	r1, [sp, #28]
 80047ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047d0:	9106      	str	r1, [sp, #24]
 80047d2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80047d6:	2100      	movs	r1, #0
 80047d8:	9102      	str	r1, [sp, #8]
 80047da:	e9cd 2300 	strd	r2, r3, [sp]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047e2:	6939      	ldr	r1, [r7, #16]
 80047e4:	6978      	ldr	r0, [r7, #20]
 80047e6:	f7fe ff9b 	bl	8003720 <_ntoa_long_long>
 80047ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 80047ec:	e051      	b.n	8004892 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80047ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d018      	beq.n	800482a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80047f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047fc:	1d1a      	adds	r2, r3, #4
 80047fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004806:	9205      	str	r2, [sp, #20]
 8004808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800480a:	9204      	str	r2, [sp, #16]
 800480c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800480e:	9203      	str	r2, [sp, #12]
 8004810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004812:	9202      	str	r2, [sp, #8]
 8004814:	2200      	movs	r2, #0
 8004816:	9201      	str	r2, [sp, #4]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800481e:	6939      	ldr	r1, [r7, #16]
 8004820:	6978      	ldr	r0, [r7, #20]
 8004822:	f7fe ff17 	bl	8003654 <_ntoa_long>
 8004826:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004828:	e033      	b.n	8004892 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800482a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <_vsnprintf+0x674>
 8004834:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004838:	1d1a      	adds	r2, r3, #4
 800483a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e012      	b.n	800486a <_vsnprintf+0x69a>
 8004844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <_vsnprintf+0x68e>
 800484e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004852:	1d1a      	adds	r2, r3, #4
 8004854:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	e005      	b.n	800486a <_vsnprintf+0x69a>
 800485e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800486c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486e:	9305      	str	r3, [sp, #20]
 8004870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004872:	9304      	str	r3, [sp, #16]
 8004874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004876:	9303      	str	r3, [sp, #12]
 8004878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487a:	9302      	str	r3, [sp, #8]
 800487c:	2300      	movs	r3, #0
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004888:	6939      	ldr	r1, [r7, #16]
 800488a:	6978      	ldr	r0, [r7, #20]
 800488c:	f7fe fee2 	bl	8003654 <_ntoa_long>
 8004890:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	3301      	adds	r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
        break;
 8004898:	e162      	b.n	8004b60 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b46      	cmp	r3, #70	; 0x46
 80048a0:	d103      	bne.n	80048aa <_vsnprintf+0x6da>
 80048a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a4:	f043 0320 	orr.w	r3, r3, #32
 80048a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80048aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048ae:	3307      	adds	r3, #7
 80048b0:	f023 0307 	bic.w	r3, r3, #7
 80048b4:	f103 0208 	add.w	r2, r3, #8
 80048b8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80048c2:	9104      	str	r1, [sp, #16]
 80048c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048c6:	9103      	str	r1, [sp, #12]
 80048c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ca:	9102      	str	r1, [sp, #8]
 80048cc:	e9cd 2300 	strd	r2, r3, [sp]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048d4:	6939      	ldr	r1, [r7, #16]
 80048d6:	6978      	ldr	r0, [r7, #20]
 80048d8:	f7fe ff92 	bl	8003800 <_ftoa>
 80048dc:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3301      	adds	r3, #1
 80048e2:	60bb      	str	r3, [r7, #8]
        break;
 80048e4:	e13c      	b.n	8004b60 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b67      	cmp	r3, #103	; 0x67
 80048ec:	d003      	beq.n	80048f6 <_vsnprintf+0x726>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b47      	cmp	r3, #71	; 0x47
 80048f4:	d103      	bne.n	80048fe <_vsnprintf+0x72e>
 80048f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048fc:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b45      	cmp	r3, #69	; 0x45
 8004904:	d003      	beq.n	800490e <_vsnprintf+0x73e>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b47      	cmp	r3, #71	; 0x47
 800490c:	d103      	bne.n	8004916 <_vsnprintf+0x746>
 800490e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004910:	f043 0320 	orr.w	r3, r3, #32
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800491a:	3307      	adds	r3, #7
 800491c:	f023 0307 	bic.w	r3, r3, #7
 8004920:	f103 0208 	add.w	r2, r3, #8
 8004924:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800492e:	9104      	str	r1, [sp, #16]
 8004930:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004932:	9103      	str	r1, [sp, #12]
 8004934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004936:	9102      	str	r1, [sp, #8]
 8004938:	e9cd 2300 	strd	r2, r3, [sp]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004940:	6939      	ldr	r1, [r7, #16]
 8004942:	6978      	ldr	r0, [r7, #20]
 8004944:	f7ff f9b4 	bl	8003cb0 <_etoa>
 8004948:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3301      	adds	r3, #1
 800494e:	60bb      	str	r3, [r7, #8]
        break;
 8004950:	e106      	b.n	8004b60 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004952:	2301      	movs	r3, #1
 8004954:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10e      	bne.n	800497e <_vsnprintf+0x7ae>
          while (l++ < width) {
 8004960:	e007      	b.n	8004972 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8004962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004964:	1c53      	adds	r3, r2, #1
 8004966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004968:	697c      	ldr	r4, [r7, #20]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6939      	ldr	r1, [r7, #16]
 800496e:	2020      	movs	r0, #32
 8004970:	47a0      	blx	r4
          while (l++ < width) {
 8004972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	647a      	str	r2, [r7, #68]	; 0x44
 8004978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800497a:	429a      	cmp	r2, r3
 800497c:	d8f1      	bhi.n	8004962 <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800497e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	b2d8      	uxtb	r0, r3
 800498c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800498e:	1c53      	adds	r3, r2, #1
 8004990:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004992:	697c      	ldr	r4, [r7, #20]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800499a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00e      	beq.n	80049c2 <_vsnprintf+0x7f2>
          while (l++ < width) {
 80049a4:	e007      	b.n	80049b6 <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 80049a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049a8:	1c53      	adds	r3, r2, #1
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ac:	697c      	ldr	r4, [r7, #20]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6939      	ldr	r1, [r7, #16]
 80049b2:	2020      	movs	r0, #32
 80049b4:	47a0      	blx	r4
          while (l++ < width) {
 80049b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	647a      	str	r2, [r7, #68]	; 0x44
 80049bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049be:	429a      	cmp	r2, r3
 80049c0:	d8f1      	bhi.n	80049a6 <_vsnprintf+0x7d6>
          }
        }
        format++;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3301      	adds	r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
        break;
 80049c8:	e0ca      	b.n	8004b60 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80049ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80049d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <_vsnprintf+0x812>
 80049de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e0:	e001      	b.n	80049e6 <_vsnprintf+0x816>
 80049e2:	f04f 33ff 	mov.w	r3, #4294967295
 80049e6:	4619      	mov	r1, r3
 80049e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80049ea:	f7fe fcb1 	bl	8003350 <_strnlen_s>
 80049ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80049f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 80049fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fe:	4293      	cmp	r3, r2
 8004a00:	bf28      	it	cs
 8004a02:	4613      	movcs	r3, r2
 8004a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d11a      	bne.n	8004a46 <_vsnprintf+0x876>
          while (l++ < width) {
 8004a10:	e007      	b.n	8004a22 <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 8004a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a14:	1c53      	adds	r3, r2, #1
 8004a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a18:	697c      	ldr	r4, [r7, #20]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6939      	ldr	r1, [r7, #16]
 8004a1e:	2020      	movs	r0, #32
 8004a20:	47a0      	blx	r4
          while (l++ < width) {
 8004a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d8f1      	bhi.n	8004a12 <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004a2e:	e00a      	b.n	8004a46 <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8004a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	643a      	str	r2, [r7, #64]	; 0x40
 8004a36:	7818      	ldrb	r0, [r3, #0]
 8004a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a3a:	1c53      	adds	r3, r2, #1
 8004a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a3e:	697c      	ldr	r4, [r7, #20]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6939      	ldr	r1, [r7, #16]
 8004a44:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <_vsnprintf+0x892>
 8004a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0eb      	beq.n	8004a30 <_vsnprintf+0x860>
 8004a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5a:	1e5a      	subs	r2, r3, #1
 8004a5c:	657a      	str	r2, [r7, #84]	; 0x54
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e6      	bne.n	8004a30 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00e      	beq.n	8004a8a <_vsnprintf+0x8ba>
          while (l++ < width) {
 8004a6c:	e007      	b.n	8004a7e <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8004a6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a70:	1c53      	adds	r3, r2, #1
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	697c      	ldr	r4, [r7, #20]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6939      	ldr	r1, [r7, #16]
 8004a7a:	2020      	movs	r0, #32
 8004a7c:	47a0      	blx	r4
          while (l++ < width) {
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d8f1      	bhi.n	8004a6e <_vsnprintf+0x89e>
          }
        }
        format++;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	60bb      	str	r3, [r7, #8]
        break;
 8004a90:	e066      	b.n	8004b60 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004a92:	2308      	movs	r3, #8
 8004a94:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a98:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d023      	beq.n	8004af4 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab0:	1d1a      	adds	r2, r3, #4
 8004ab2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2300      	movs	r3, #0
 8004abc:	603a      	str	r2, [r7, #0]
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac2:	9308      	str	r3, [sp, #32]
 8004ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ac6:	9307      	str	r3, [sp, #28]
 8004ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aca:	9306      	str	r3, [sp, #24]
 8004acc:	f04f 0210 	mov.w	r2, #16
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9302      	str	r3, [sp, #8]
 8004adc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004ae0:	e9cd 3400 	strd	r3, r4, [sp]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ae8:	6939      	ldr	r1, [r7, #16]
 8004aea:	6978      	ldr	r0, [r7, #20]
 8004aec:	f7fe fe18 	bl	8003720 <_ntoa_long_long>
 8004af0:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004af2:	e018      	b.n	8004b26 <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004af8:	1d1a      	adds	r2, r3, #4
 8004afa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b08:	9304      	str	r3, [sp, #16]
 8004b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b0c:	9303      	str	r3, [sp, #12]
 8004b0e:	2310      	movs	r3, #16
 8004b10:	9302      	str	r3, [sp, #8]
 8004b12:	2300      	movs	r3, #0
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	9200      	str	r2, [sp, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b1c:	6939      	ldr	r1, [r7, #16]
 8004b1e:	6978      	ldr	r0, [r7, #20]
 8004b20:	f7fe fd98 	bl	8003654 <_ntoa_long>
 8004b24:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60bb      	str	r3, [r7, #8]
        break;
 8004b2c:	e018      	b.n	8004b60 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b30:	1c53      	adds	r3, r2, #1
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	697c      	ldr	r4, [r7, #20]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6939      	ldr	r1, [r7, #16]
 8004b3a:	2025      	movs	r0, #37	; 0x25
 8004b3c:	47a0      	blx	r4
        format++;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	3301      	adds	r3, #1
 8004b42:	60bb      	str	r3, [r7, #8]
        break;
 8004b44:	e00c      	b.n	8004b60 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	7818      	ldrb	r0, [r3, #0]
 8004b4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b4c:	1c53      	adds	r3, r2, #1
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b50:	697c      	ldr	r4, [r7, #20]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6939      	ldr	r1, [r7, #16]
 8004b56:	47a0      	blx	r4
        format++;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60bb      	str	r3, [r7, #8]
        break;
 8004b5e:	bf00      	nop
  while (*format)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f47f ab45 	bne.w	80041f4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004b6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <_vsnprintf+0x9a8>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1e5a      	subs	r2, r3, #1
 8004b76:	e000      	b.n	8004b7a <_vsnprintf+0x9aa>
 8004b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b7a:	697c      	ldr	r4, [r7, #20]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6939      	ldr	r1, [r7, #16]
 8004b80:	2000      	movs	r0, #0
 8004b82:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3764      	adds	r7, #100	; 0x64
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b90 <printf_>:


///

int printf_(const char* format, ...)
{
 8004b90:	b40f      	push	{r0, r1, r2, r3}
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004b98:	f107 031c 	add.w	r3, r7, #28
 8004b9c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004b9e:	1d39      	adds	r1, r7, #4
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8004baa:	4806      	ldr	r0, [pc, #24]	; (8004bc4 <printf_+0x34>)
 8004bac:	f7ff fb10 	bl	80041d0 <_vsnprintf>
 8004bb0:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bbe:	b004      	add	sp, #16
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	0800332b 	.word	0x0800332b

08004bc8 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8004bc8:	b40e      	push	{r1, r2, r3}
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b087      	sub	sp, #28
 8004bce:	af02      	add	r7, sp, #8
 8004bd0:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004bd2:	f107 0320 	add.w	r3, r7, #32
 8004bd6:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4805      	ldr	r0, [pc, #20]	; (8004bfc <sprintf_+0x34>)
 8004be6:	f7ff faf3 	bl	80041d0 <_vsnprintf>
 8004bea:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004bec:	68fb      	ldr	r3, [r7, #12]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bf8:	b003      	add	sp, #12
 8004bfa:	4770      	bx	lr
 8004bfc:	080032e5 	.word	0x080032e5

08004c00 <RTC_Init>:
uint8_t rmon,rday,rhour,rmin,rsec,rweek;
uint8_t const table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5};
uint8_t const mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};

void RTC_Init(RTC_HandleTypeDef* hrtc)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	6078      	str	r0, [r7, #4]
	hrtc->Instance = RTC;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <RTC_Init+0x68>)
 8004c0c:	601a      	str	r2, [r3, #0]
	hrtc->Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295
 8004c14:	605a      	str	r2, [r3, #4]
	hrtc->Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(hrtc) != HAL_OK)
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f002 fd85 	bl	800772c <HAL_RTC_Init>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <RTC_Init+0x2c>
	{
		Error_Handler();
 8004c28:	f7fe fb44 	bl	80032b4 <Error_Handler>
	}
	//Check If first time connect to power source
	if(HAL_RTCEx_BKUPRead(hrtc,RTC_BKP_DR1)!=0x5050){//Deafult Value should be 0xffff
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f002 feaa 	bl	8007988 <HAL_RTCEx_BKUPRead>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f245 0250 	movw	r2, #20560	; 0x5050
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d010      	beq.n	8004c60 <RTC_Init+0x60>
		HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR1,0x5050);
 8004c3e:	f245 0250 	movw	r2, #20560	; 0x5050
 8004c42:	2101      	movs	r1, #1
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f002 fe85 	bl	8007954 <HAL_RTCEx_BKUPWrite>
		RTC_Set(2022,1,1,0,0,0);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	2201      	movs	r2, #1
 8004c56:	2101      	movs	r1, #1
 8004c58:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8004c5c:	f000 f806 	bl	8004c6c <RTC_Set>
	}
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40002800 	.word	0x40002800

08004c6c <RTC_Set>:

uint8_t RTC_Set(uint16_t syear, int8_t smon, uint8_t sday,uint8_t rhour,uint8_t rmin,uint8_t rsec){
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4604      	mov	r4, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4623      	mov	r3, r4
 8004c7c:	80fb      	strh	r3, [r7, #6]
 8004c7e:	4603      	mov	r3, r0
 8004c80:	717b      	strb	r3, [r7, #5]
 8004c82:	460b      	mov	r3, r1
 8004c84:	713b      	strb	r3, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set Time According To Parameters (Be Done Later Using USART)
	 */
	uint16_t t;
	uint32_t seccount=0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
	if(syear<2000||syear>2099)return 1;// Range: 1970-2099
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004c94:	d304      	bcc.n	8004ca0 <RTC_Set+0x34>
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	f640 0233 	movw	r2, #2099	; 0x833
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <RTC_Set+0x38>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e081      	b.n	8004da8 <RTC_Set+0x13c>
	for(t=1970;t<syear;++t){
 8004ca4:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8004ca8:	81fb      	strh	r3, [r7, #14]
 8004caa:	e014      	b.n	8004cd6 <RTC_Set+0x6a>
		if(Is_Leap_Year(t))seccount+=31622400;
 8004cac:	89fb      	ldrh	r3, [r7, #14]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f9dc 	bl	800506c <Is_Leap_Year>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <RTC_Set+0x5c>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
 8004cc0:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	e003      	b.n	8004cd0 <RTC_Set+0x64>
		else seccount+=31536000;
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <RTC_Set+0x144>)
 8004ccc:	4413      	add	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
	for(t=1970;t<syear;++t){
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	81fb      	strh	r3, [r7, #14]
 8004cd6:	89fa      	ldrh	r2, [r7, #14]
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d3e6      	bcc.n	8004cac <RTC_Set+0x40>
	}
	smon-=1;
 8004cde:	797b      	ldrb	r3, [r7, #5]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	717b      	strb	r3, [r7, #5]
	for(t=0;t<smon;t++){
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	81fb      	strh	r3, [r7, #14]
 8004cea:	e01c      	b.n	8004d26 <RTC_Set+0xba>
		seccount+=(uint32_t)mon_table[t]*86400;
 8004cec:	89fb      	ldrh	r3, [r7, #14]
 8004cee:	4a31      	ldr	r2, [pc, #196]	; (8004db4 <RTC_Set+0x148>)
 8004cf0:	5cd3      	ldrb	r3, [r2, r3]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <RTC_Set+0x14c>)
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60bb      	str	r3, [r7, #8]
		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f9b2 	bl	800506c <Is_Leap_Year>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <RTC_Set+0xb4>
 8004d0e:	89fb      	ldrh	r3, [r7, #14]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d105      	bne.n	8004d20 <RTC_Set+0xb4>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004d1a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004d1e:	60bb      	str	r3, [r7, #8]
	for(t=0;t<smon;t++){
 8004d20:	89fb      	ldrh	r3, [r7, #14]
 8004d22:	3301      	adds	r3, #1
 8004d24:	81fb      	strh	r3, [r7, #14]
 8004d26:	89fa      	ldrh	r2, [r7, #14]
 8004d28:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	dbdd      	blt.n	8004cec <RTC_Set+0x80>
	}
	seccount+=(uint32_t)(sday-1)*86400;
 8004d30:	793b      	ldrb	r3, [r7, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <RTC_Set+0x14c>)
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	4413      	add	r3, r2
 8004d40:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rhour*3600;
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004d48:	fb02 f303 	mul.w	r3, r2, r3
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	4413      	add	r3, r2
 8004d50:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rmin*60;
 8004d52:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004d56:	4613      	mov	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4413      	add	r3, r2
 8004d64:	60bb      	str	r3, [r7, #8]
	seccount += rsec;
 8004d66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]

	RTC->CRL|=1<<4;
 8004d70:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <RTC_Set+0x150>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a11      	ldr	r2, [pc, #68]	; (8004dbc <RTC_Set+0x150>)
 8004d76:	f043 0310 	orr.w	r3, r3, #16
 8004d7a:	6053      	str	r3, [r2, #4]
	RTC->CNTL=seccount&0xffff;
 8004d7c:	4a0f      	ldr	r2, [pc, #60]	; (8004dbc <RTC_Set+0x150>)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	61d3      	str	r3, [r2, #28]
	RTC->CNTH=seccount>>16;
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <RTC_Set+0x150>)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	6193      	str	r3, [r2, #24]
	RTC->CRL&=~(1<<4);
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <RTC_Set+0x150>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <RTC_Set+0x150>)
 8004d92:	f023 0310 	bic.w	r3, r3, #16
 8004d96:	6053      	str	r3, [r2, #4]
	while(!(RTC->CRL&(1<<5)));
 8004d98:	bf00      	nop
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <RTC_Set+0x150>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f9      	beq.n	8004d9a <RTC_Set+0x12e>

	return 0;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd90      	pop	{r4, r7, pc}
 8004db0:	01e13380 	.word	0x01e13380
 8004db4:	0801257c 	.word	0x0801257c
 8004db8:	00015180 	.word	0x00015180
 8004dbc:	40002800 	.word	0x40002800

08004dc0 <RTC_Get>:

uint8_t RTC_Get(void){
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
	/*
	 * Refresh Time variables in rtc.c
	 */
	static uint16_t daycnt=0;
	uint32_t timecount=0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
	uint32_t temp=0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
	uint32_t temp1=0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]

	timecount=RTC->CNTH;
 8004dd2:	4b65      	ldr	r3, [pc, #404]	; (8004f68 <RTC_Get+0x1a8>)
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	607b      	str	r3, [r7, #4]
	timecount<<=16;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	607b      	str	r3, [r7, #4]
	timecount+=RTC->CNTL;
 8004dde:	4b62      	ldr	r3, [pc, #392]	; (8004f68 <RTC_Get+0x1a8>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	607b      	str	r3, [r7, #4]

	temp=timecount/86400;//Day
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a60      	ldr	r2, [pc, #384]	; (8004f6c <RTC_Get+0x1ac>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	60fb      	str	r3, [r7, #12]
	if(daycnt!=temp){//New Day
 8004df4:	4b5e      	ldr	r3, [pc, #376]	; (8004f70 <RTC_Get+0x1b0>)
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d066      	beq.n	8004ece <RTC_Get+0x10e>
		daycnt=temp;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	4b5a      	ldr	r3, [pc, #360]	; (8004f70 <RTC_Get+0x1b0>)
 8004e06:	801a      	strh	r2, [r3, #0]
		temp1=1970;
 8004e08:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8004e0c:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8004e0e:	e01b      	b.n	8004e48 <RTC_Get+0x88>
			if(Is_Leap_Year(temp1)){
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f929 	bl	800506c <Is_Leap_Year>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <RTC_Get+0x7a>
				if(temp>=366)temp-=366;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8004e26:	d304      	bcc.n	8004e32 <RTC_Get+0x72>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e007      	b.n	8004e42 <RTC_Get+0x82>
				else{temp1++; break;}
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3301      	adds	r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	e00a      	b.n	8004e50 <RTC_Get+0x90>
			}
			else temp-=365;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 8004e40:	60fb      	str	r3, [r7, #12]
			temp1++;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	3301      	adds	r3, #1
 8004e46:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8004e4e:	d8df      	bhi.n	8004e10 <RTC_Get+0x50>
		}
		ryear=temp1;//Year
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	4b47      	ldr	r3, [pc, #284]	; (8004f74 <RTC_Get+0x1b4>)
 8004e56:	801a      	strh	r2, [r3, #0]
		temp1=0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8004e5c:	e024      	b.n	8004ea8 <RTC_Get+0xe8>
			if(Is_Leap_Year(ryear)&&temp1==1){
 8004e5e:	4b45      	ldr	r3, [pc, #276]	; (8004f74 <RTC_Get+0x1b4>)
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f902 	bl	800506c <Is_Leap_Year>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <RTC_Get+0xc2>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d106      	bne.n	8004e82 <RTC_Get+0xc2>
				if(temp>=29)temp-=29;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b1c      	cmp	r3, #28
 8004e78:	d91a      	bls.n	8004eb0 <RTC_Get+0xf0>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b1d      	subs	r3, #29
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	e00f      	b.n	8004ea2 <RTC_Get+0xe2>
				else break;
			}else{
			if(temp>=mon_table[temp1])temp-=mon_table[temp1];
 8004e82:	4a3d      	ldr	r2, [pc, #244]	; (8004f78 <RTC_Get+0x1b8>)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4413      	add	r3, r2
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d310      	bcc.n	8004eb4 <RTC_Get+0xf4>
 8004e92:	4a39      	ldr	r2, [pc, #228]	; (8004f78 <RTC_Get+0x1b8>)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4413      	add	r3, r2
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
			else break;
			}
			temp1++;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b1b      	cmp	r3, #27
 8004eac:	d8d7      	bhi.n	8004e5e <RTC_Get+0x9e>
 8004eae:	e002      	b.n	8004eb6 <RTC_Get+0xf6>
				else break;
 8004eb0:	bf00      	nop
 8004eb2:	e000      	b.n	8004eb6 <RTC_Get+0xf6>
			else break;
 8004eb4:	bf00      	nop
		}
		rmon=temp1+1;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <RTC_Get+0x1bc>)
 8004ec0:	701a      	strb	r2, [r3, #0]
		rday=temp+1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <RTC_Get+0x1c0>)
 8004ecc:	701a      	strb	r2, [r3, #0]
	}
	temp=timecount%86400;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a26      	ldr	r2, [pc, #152]	; (8004f6c <RTC_Get+0x1ac>)
 8004ed2:	fba2 1203 	umull	r1, r2, r2, r3
 8004ed6:	0c12      	lsrs	r2, r2, #16
 8004ed8:	492a      	ldr	r1, [pc, #168]	; (8004f84 <RTC_Get+0x1c4>)
 8004eda:	fb01 f202 	mul.w	r2, r1, r2
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
	rhour=temp/3600;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a28      	ldr	r2, [pc, #160]	; (8004f88 <RTC_Get+0x1c8>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0adb      	lsrs	r3, r3, #11
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <RTC_Get+0x1cc>)
 8004ef0:	701a      	strb	r2, [r3, #0]
	rmin=(temp%3600)/60;
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <RTC_Get+0x1c8>)
 8004ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8004efa:	0adb      	lsrs	r3, r3, #11
 8004efc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <RTC_Get+0x1d0>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <RTC_Get+0x1d4>)
 8004f12:	701a      	strb	r2, [r3, #0]
	rsec=(temp%3600)%60;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <RTC_Get+0x1c8>)
 8004f18:	fba2 1203 	umull	r1, r2, r2, r3
 8004f1c:	0ad2      	lsrs	r2, r2, #11
 8004f1e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004f22:	fb01 f202 	mul.w	r2, r1, r2
 8004f26:	1a9a      	subs	r2, r3, r2
 8004f28:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <RTC_Get+0x1d0>)
 8004f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f2e:	0959      	lsrs	r1, r3, #5
 8004f30:	460b      	mov	r3, r1
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	1a5b      	subs	r3, r3, r1
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	1ad1      	subs	r1, r2, r3
 8004f3a:	b2ca      	uxtb	r2, r1
 8004f3c:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <RTC_Get+0x1d8>)
 8004f3e:	701a      	strb	r2, [r3, #0]
	rweek=RTC_Get_Week(ryear,rmon,rday);
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <RTC_Get+0x1b4>)
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <RTC_Get+0x1bc>)
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	b291      	uxth	r1, r2
 8004f4a:	4a0d      	ldr	r2, [pc, #52]	; (8004f80 <RTC_Get+0x1c0>)
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	b292      	uxth	r2, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f825 	bl	8004fa0 <RTC_Get_Week>
 8004f56:	4603      	mov	r3, r0
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <RTC_Get+0x1dc>)
 8004f5c:	701a      	strb	r2, [r3, #0]
	return 0;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40002800 	.word	0x40002800
 8004f6c:	c22e4507 	.word	0xc22e4507
 8004f70:	20000c00 	.word	0x20000c00
 8004f74:	20000bf8 	.word	0x20000bf8
 8004f78:	0801257c 	.word	0x0801257c
 8004f7c:	20000bfa 	.word	0x20000bfa
 8004f80:	20000bfb 	.word	0x20000bfb
 8004f84:	00015180 	.word	0x00015180
 8004f88:	91a2b3c5 	.word	0x91a2b3c5
 8004f8c:	20000bfc 	.word	0x20000bfc
 8004f90:	88888889 	.word	0x88888889
 8004f94:	20000bfd 	.word	0x20000bfd
 8004f98:	20000bfe 	.word	0x20000bfe
 8004f9c:	20000bff 	.word	0x20000bff

08004fa0 <RTC_Get_Week>:

uint8_t RTC_Get_Week(uint16_t year, uint16_t month, uint16_t day){
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	80fb      	strh	r3, [r7, #6]
 8004faa:	460b      	mov	r3, r1
 8004fac:	80bb      	strh	r3, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	807b      	strh	r3, [r7, #2]
	uint16_t temp2;
	uint8_t yearH,yearL;
	yearH=year/100;
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	4a2a      	ldr	r2, [pc, #168]	; (8005060 <RTC_Get_Week+0xc0>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	733b      	strb	r3, [r7, #12]
	yearL=year%100;
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	4a27      	ldr	r2, [pc, #156]	; (8005060 <RTC_Get_Week+0xc0>)
 8004fc4:	fba2 1203 	umull	r1, r2, r2, r3
 8004fc8:	0952      	lsrs	r2, r2, #5
 8004fca:	2164      	movs	r1, #100	; 0x64
 8004fcc:	fb01 f202 	mul.w	r2, r1, r2
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	737b      	strb	r3, [r7, #13]
	if (yearH>19)yearL+=100;
 8004fd6:	7b3b      	ldrb	r3, [r7, #12]
 8004fd8:	2b13      	cmp	r3, #19
 8004fda:	d902      	bls.n	8004fe2 <RTC_Get_Week+0x42>
 8004fdc:	7b7b      	ldrb	r3, [r7, #13]
 8004fde:	3364      	adds	r3, #100	; 0x64
 8004fe0:	737b      	strb	r3, [r7, #13]
	temp2=yearL+yearL/4;
 8004fe2:	7b7b      	ldrb	r3, [r7, #13]
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	7b7b      	ldrb	r3, [r7, #13]
 8004fe8:	089b      	lsrs	r3, r3, #2
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	81fb      	strh	r3, [r7, #14]
	temp2=temp2%7;
 8004ff2:	89fa      	ldrh	r2, [r7, #14]
 8004ff4:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <RTC_Get_Week+0xc4>)
 8004ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffa:	1ad1      	subs	r1, r2, r3
 8004ffc:	0849      	lsrs	r1, r1, #1
 8004ffe:	440b      	add	r3, r1
 8005000:	0899      	lsrs	r1, r3, #2
 8005002:	460b      	mov	r3, r1
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	1a5b      	subs	r3, r3, r1
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	81fb      	strh	r3, [r7, #14]
	temp2=temp2+day+table_week[month-1];
 800500c:	89fa      	ldrh	r2, [r7, #14]
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	4413      	add	r3, r2
 8005012:	b29a      	uxth	r2, r3
 8005014:	88bb      	ldrh	r3, [r7, #4]
 8005016:	3b01      	subs	r3, #1
 8005018:	4913      	ldr	r1, [pc, #76]	; (8005068 <RTC_Get_Week+0xc8>)
 800501a:	5ccb      	ldrb	r3, [r1, r3]
 800501c:	b29b      	uxth	r3, r3
 800501e:	4413      	add	r3, r2
 8005020:	81fb      	strh	r3, [r7, #14]
	if (yearL%4==0&&month<3)temp2--;
 8005022:	7b7b      	ldrb	r3, [r7, #13]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d105      	bne.n	800503a <RTC_Get_Week+0x9a>
 800502e:	88bb      	ldrh	r3, [r7, #4]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d802      	bhi.n	800503a <RTC_Get_Week+0x9a>
 8005034:	89fb      	ldrh	r3, [r7, #14]
 8005036:	3b01      	subs	r3, #1
 8005038:	81fb      	strh	r3, [r7, #14]
	return(temp2%7);
 800503a:	89fa      	ldrh	r2, [r7, #14]
 800503c:	4b09      	ldr	r3, [pc, #36]	; (8005064 <RTC_Get_Week+0xc4>)
 800503e:	fba3 1302 	umull	r1, r3, r3, r2
 8005042:	1ad1      	subs	r1, r2, r3
 8005044:	0849      	lsrs	r1, r1, #1
 8005046:	440b      	add	r3, r1
 8005048:	0899      	lsrs	r1, r3, #2
 800504a:	460b      	mov	r3, r1
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	1a5b      	subs	r3, r3, r1
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	b29b      	uxth	r3, r3
 8005054:	b2db      	uxtb	r3, r3
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	51eb851f 	.word	0x51eb851f
 8005064:	24924925 	.word	0x24924925
 8005068:	08012570 	.word	0x08012570

0800506c <Is_Leap_Year>:

uint8_t Is_Leap_Year(uint16_t year){
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	80fb      	strh	r3, [r7, #6]
	if(year%4==0){
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11e      	bne.n	80050c0 <Is_Leap_Year+0x54>
		if(year%100==0){
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	4a11      	ldr	r2, [pc, #68]	; (80050cc <Is_Leap_Year+0x60>)
 8005086:	fba2 1203 	umull	r1, r2, r2, r3
 800508a:	0952      	lsrs	r2, r2, #5
 800508c:	2164      	movs	r1, #100	; 0x64
 800508e:	fb01 f202 	mul.w	r2, r1, r2
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d110      	bne.n	80050bc <Is_Leap_Year+0x50>
			if(year%400==0)return 1;
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <Is_Leap_Year+0x60>)
 800509e:	fba2 1203 	umull	r1, r2, r2, r3
 80050a2:	09d2      	lsrs	r2, r2, #7
 80050a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80050a8:	fb01 f202 	mul.w	r2, r1, r2
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <Is_Leap_Year+0x4c>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e004      	b.n	80050c2 <Is_Leap_Year+0x56>
			else return 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e002      	b.n	80050c2 <Is_Leap_Year+0x56>
		}else return 1;
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <Is_Leap_Year+0x56>
	}else return 0;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	51eb851f 	.word	0x51eb851f

080050d0 <RTC_raw>:

uint32_t RTC_raw(){
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
	uint32_t time;
	time=RTC->CNTH;
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <RTC_raw+0x28>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	607b      	str	r3, [r7, #4]
	time<<=16;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	041b      	lsls	r3, r3, #16
 80050e0:	607b      	str	r3, [r7, #4]
	time+=RTC->CNTL;
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <RTC_raw+0x28>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	607b      	str	r3, [r7, #4]

	return time;
 80050ec:	687b      	ldr	r3, [r7, #4]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr
 80050f8:	40002800 	.word	0x40002800

080050fc <get_TimeStamp>:


void get_TimeStamp(TimeStamp* t){
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	/*
	 * Store Updated Values By a TimeStamp Pointer
	 */
	t->ryear = ryear;
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <get_TimeStamp+0x4c>)
 8005106:	881a      	ldrh	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	801a      	strh	r2, [r3, #0]
	t->rmon = rmon;
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <get_TimeStamp+0x50>)
 800510e:	781a      	ldrb	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	709a      	strb	r2, [r3, #2]
	t->rday = rday;
 8005114:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <get_TimeStamp+0x54>)
 8005116:	781a      	ldrb	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	70da      	strb	r2, [r3, #3]
	t->rhour = rhour;
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <get_TimeStamp+0x58>)
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	711a      	strb	r2, [r3, #4]
	t->rmin = rmin;
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <get_TimeStamp+0x5c>)
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	715a      	strb	r2, [r3, #5]
	t->rsec = rsec;
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <get_TimeStamp+0x60>)
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	719a      	strb	r2, [r3, #6]
	t->rweek = rweek;
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <get_TimeStamp+0x64>)
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	71da      	strb	r2, [r3, #7]
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20000bf8 	.word	0x20000bf8
 800514c:	20000bfa 	.word	0x20000bfa
 8005150:	20000bfb 	.word	0x20000bfb
 8005154:	20000bfc 	.word	0x20000bfc
 8005158:	20000bfd 	.word	0x20000bfd
 800515c:	20000bfe 	.word	0x20000bfe
 8005160:	20000bff 	.word	0x20000bff

08005164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <HAL_MspInit+0x5c>)
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <HAL_MspInit+0x5c>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	6193      	str	r3, [r2, #24]
 8005176:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <HAL_MspInit+0x5c>)
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <HAL_MspInit+0x5c>)
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	4a0e      	ldr	r2, [pc, #56]	; (80051c0 <HAL_MspInit+0x5c>)
 8005188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518c:	61d3      	str	r3, [r2, #28]
 800518e:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <HAL_MspInit+0x5c>)
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <HAL_MspInit+0x60>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	4a04      	ldr	r2, [pc, #16]	; (80051c4 <HAL_MspInit+0x60>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40010000 	.word	0x40010000

080051c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a0b      	ldr	r2, [pc, #44]	; (8005204 <HAL_RTC_MspInit+0x3c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d110      	bne.n	80051fc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80051da:	f001 fcdf 	bl	8006b9c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_RTC_MspInit+0x40>)
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <HAL_RTC_MspInit+0x40>)
 80051e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051e8:	61d3      	str	r3, [r2, #28]
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <HAL_RTC_MspInit+0x40>)
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80051f6:	4b05      	ldr	r3, [pc, #20]	; (800520c <HAL_RTC_MspInit+0x44>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40002800 	.word	0x40002800
 8005208:	40021000 	.word	0x40021000
 800520c:	4242043c 	.word	0x4242043c

08005210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <HAL_TIM_Base_MspInit+0xc0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10c      	bne.n	800523c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005222:	4b2c      	ldr	r3, [pc, #176]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	4a2b      	ldr	r2, [pc, #172]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 8005228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800522c:	6193      	str	r3, [r2, #24]
 800522e:	4b29      	ldr	r3, [pc, #164]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800523a:	e044      	b.n	80052c6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d10c      	bne.n	8005260 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005246:	4b23      	ldr	r3, [pc, #140]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4a22      	ldr	r2, [pc, #136]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	61d3      	str	r3, [r2, #28]
 8005252:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]
}
 800525e:	e032      	b.n	80052c6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <HAL_TIM_Base_MspInit+0xc8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d114      	bne.n	8005294 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800526a:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	61d3      	str	r3, [r2, #28]
 8005276:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005282:	2200      	movs	r2, #0
 8005284:	2100      	movs	r1, #0
 8005286:	201d      	movs	r0, #29
 8005288:	f001 fa67 	bl	800675a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800528c:	201d      	movs	r0, #29
 800528e:	f001 fa80 	bl	8006792 <HAL_NVIC_EnableIRQ>
}
 8005292:	e018      	b.n	80052c6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a10      	ldr	r2, [pc, #64]	; (80052dc <HAL_TIM_Base_MspInit+0xcc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d113      	bne.n	80052c6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 80052a4:	f043 0308 	orr.w	r3, r3, #8
 80052a8:	61d3      	str	r3, [r2, #28]
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_TIM_Base_MspInit+0xc4>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80052b6:	2200      	movs	r2, #0
 80052b8:	2100      	movs	r1, #0
 80052ba:	2032      	movs	r0, #50	; 0x32
 80052bc:	f001 fa4d 	bl	800675a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80052c0:	2032      	movs	r0, #50	; 0x32
 80052c2:	f001 fa66 	bl	8006792 <HAL_NVIC_EnableIRQ>
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000c00 	.word	0x40000c00

080052e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e8:	f107 0310 	add.w	r3, r7, #16
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	609a      	str	r2, [r3, #8]
 80052f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a10      	ldr	r2, [pc, #64]	; (800533c <HAL_TIM_MspPostInit+0x5c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d118      	bne.n	8005332 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <HAL_TIM_MspPostInit+0x60>)
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <HAL_TIM_MspPostInit+0x60>)
 8005306:	f043 0304 	orr.w	r3, r3, #4
 800530a:	6193      	str	r3, [r2, #24]
 800530c:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <HAL_TIM_MspPostInit+0x60>)
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800531c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531e:	2302      	movs	r3, #2
 8005320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005322:	2302      	movs	r3, #2
 8005324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005326:	f107 0310 	add.w	r3, r7, #16
 800532a:	4619      	mov	r1, r3
 800532c:	4805      	ldr	r0, [pc, #20]	; (8005344 <HAL_TIM_MspPostInit+0x64>)
 800532e:	f001 fa4b 	bl	80067c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005332:	bf00      	nop
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40021000 	.word	0x40021000
 8005344:	40010800 	.word	0x40010800

08005348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005350:	f107 0310 	add.w	r3, r7, #16
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_UART_MspInit+0x8c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d131      	bne.n	80053cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <HAL_UART_MspInit+0x90>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <HAL_UART_MspInit+0x90>)
 800536e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005372:	6193      	str	r3, [r2, #24]
 8005374:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <HAL_UART_MspInit+0x90>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005380:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <HAL_UART_MspInit+0x90>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <HAL_UART_MspInit+0x90>)
 8005386:	f043 0304 	orr.w	r3, r3, #4
 800538a:	6193      	str	r3, [r2, #24]
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_UART_MspInit+0x90>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800539c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539e:	2302      	movs	r3, #2
 80053a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053a2:	2303      	movs	r3, #3
 80053a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a6:	f107 0310 	add.w	r3, r7, #16
 80053aa:	4619      	mov	r1, r3
 80053ac:	480b      	ldr	r0, [pc, #44]	; (80053dc <HAL_UART_MspInit+0x94>)
 80053ae:	f001 fa0b 	bl	80067c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80053b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c0:	f107 0310 	add.w	r3, r7, #16
 80053c4:	4619      	mov	r1, r3
 80053c6:	4805      	ldr	r0, [pc, #20]	; (80053dc <HAL_UART_MspInit+0x94>)
 80053c8:	f001 f9fe 	bl	80067c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053cc:	bf00      	nop
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40013800 	.word	0x40013800
 80053d8:	40021000 	.word	0x40021000
 80053dc:	40010800 	.word	0x40010800

080053e0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80053e6:	f107 0308 	add.w	r3, r7, #8
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	609a      	str	r2, [r3, #8]
 80053f2:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <HAL_FSMC_MspInit+0x78>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d129      	bne.n	8005450 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80053fc:	4b16      	ldr	r3, [pc, #88]	; (8005458 <HAL_FSMC_MspInit+0x78>)
 80053fe:	2201      	movs	r2, #1
 8005400:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <HAL_FSMC_MspInit+0x7c>)
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	4a15      	ldr	r2, [pc, #84]	; (800545c <HAL_FSMC_MspInit+0x7c>)
 8005408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540c:	6153      	str	r3, [r2, #20]
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <HAL_FSMC_MspInit+0x7c>)
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800541a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800541e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005420:	2302      	movs	r3, #2
 8005422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005424:	2303      	movs	r3, #3
 8005426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005428:	f107 0308 	add.w	r3, r7, #8
 800542c:	4619      	mov	r1, r3
 800542e:	480c      	ldr	r0, [pc, #48]	; (8005460 <HAL_FSMC_MspInit+0x80>)
 8005430:	f001 f9ca 	bl	80067c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005434:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8005438:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543a:	2302      	movs	r3, #2
 800543c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800543e:	2303      	movs	r3, #3
 8005440:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005442:	f107 0308 	add.w	r3, r7, #8
 8005446:	4619      	mov	r1, r3
 8005448:	4806      	ldr	r0, [pc, #24]	; (8005464 <HAL_FSMC_MspInit+0x84>)
 800544a:	f001 f9bd 	bl	80067c8 <HAL_GPIO_Init>
 800544e:	e000      	b.n	8005452 <HAL_FSMC_MspInit+0x72>
    return;
 8005450:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000c04 	.word	0x20000c04
 800545c:	40021000 	.word	0x40021000
 8005460:	40011800 	.word	0x40011800
 8005464:	40011400 	.word	0x40011400

08005468 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005470:	f7ff ffb6 	bl	80053e0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800548c:	e7fe      	b.n	800548c <HardFault_Handler+0x4>

0800548e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800548e:	b480      	push	{r7}
 8005490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005492:	e7fe      	b.n	8005492 <MemManage_Handler+0x4>

08005494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005498:	e7fe      	b.n	8005498 <BusFault_Handler+0x4>

0800549a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800549a:	b480      	push	{r7}
 800549c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800549e:	e7fe      	b.n	800549e <UsageFault_Handler+0x4>

080054a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054a4:	bf00      	nop
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054b0:	bf00      	nop
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054bc:	bf00      	nop
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054c8:	f001 f834 	bl	8006534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054cc:	bf00      	nop
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <EXTI4_IRQHandler+0x2c>)
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <EXTI4_IRQHandler+0x30>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <EXTI4_IRQHandler+0x2c>)
 80054e8:	2210      	movs	r2, #16
 80054ea:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80054ec:	2010      	movs	r0, #16
 80054ee:	f001 fb4b 	bl	8006b88 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80054f2:	2010      	movs	r0, #16
 80054f4:	f001 fb30 	bl	8006b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80054f8:	bf00      	nop
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40010400 	.word	0x40010400
 8005500:	20000c0e 	.word	0x20000c0e

08005504 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <TIM3_IRQHandler+0x3c>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	3b01      	subs	r3, #1
 800550e:	b2da      	uxtb	r2, r3
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <TIM3_IRQHandler+0x3c>)
 8005512:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <TIM3_IRQHandler+0x3c>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10c      	bne.n	8005536 <TIM3_IRQHandler+0x32>
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <TIM3_IRQHandler+0x40>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d108      	bne.n	8005536 <TIM3_IRQHandler+0x32>
		//LCD_DrawString(5,5,"Hi");



		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 8005524:	4808      	ldr	r0, [pc, #32]	; (8005548 <TIM3_IRQHandler+0x44>)
 8005526:	f002 fad4 	bl	8007ad2 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 800552a:	4807      	ldr	r0, [pc, #28]	; (8005548 <TIM3_IRQHandler+0x44>)
 800552c:	f002 fb15 	bl	8007b5a <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <TIM3_IRQHandler+0x40>)
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005536:	4804      	ldr	r0, [pc, #16]	; (8005548 <TIM3_IRQHandler+0x44>)
 8005538:	f002 fba2 	bl	8007c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800553c:	bf00      	nop
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000c0c 	.word	0x20000c0c
 8005544:	20000c0d 	.word	0x20000c0d
 8005548:	20000ab0 	.word	0x20000ab0

0800554c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 8005550:	4b03      	ldr	r3, [pc, #12]	; (8005560 <TIM5_IRQHandler+0x14>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005556:	4803      	ldr	r0, [pc, #12]	; (8005564 <TIM5_IRQHandler+0x18>)
 8005558:	f002 fb92 	bl	8007c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800555c:	bf00      	nop
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000008 	.word	0x20000008
 8005564:	20000af0 	.word	0x20000af0

08005568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
	return 1;
 800556c:	2301      	movs	r3, #1
}
 800556e:	4618      	mov	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <_kill>:

int _kill(int pid, int sig)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005580:	f003 fdf6 	bl	8009170 <__errno>
 8005584:	4603      	mov	r3, r0
 8005586:	2216      	movs	r2, #22
 8005588:	601a      	str	r2, [r3, #0]
	return -1;
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <_exit>:

void _exit (int status)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800559e:	f04f 31ff 	mov.w	r1, #4294967295
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff ffe7 	bl	8005576 <_kill>
	while (1) {}		/* Make sure we hang here */
 80055a8:	e7fe      	b.n	80055a8 <_exit+0x12>

080055aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b086      	sub	sp, #24
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e00a      	b.n	80055d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055bc:	f3af 8000 	nop.w
 80055c0:	4601      	mov	r1, r0
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	60ba      	str	r2, [r7, #8]
 80055c8:	b2ca      	uxtb	r2, r1
 80055ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	3301      	adds	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	dbf0      	blt.n	80055bc <_read+0x12>
	}

return len;
 80055da:	687b      	ldr	r3, [r7, #4]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e009      	b.n	800560a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	60ba      	str	r2, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	3301      	adds	r3, #1
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	429a      	cmp	r2, r3
 8005610:	dbf1      	blt.n	80055f6 <_write+0x12>
	}
	return len;
 8005612:	687b      	ldr	r3, [r7, #4]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <_close>:

int _close(int file)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	return -1;
 8005624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005642:	605a      	str	r2, [r3, #4]
	return 0;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr

08005650 <_isatty>:

int _isatty(int file)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	return 1;
 8005658:	2301      	movs	r3, #1
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
	return 0;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005684:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <_sbrk+0x5c>)
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <_sbrk+0x60>)
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005690:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <_sbrk+0x64>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d102      	bne.n	800569e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005698:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <_sbrk+0x64>)
 800569a:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <_sbrk+0x68>)
 800569c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <_sbrk+0x64>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d207      	bcs.n	80056bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056ac:	f003 fd60 	bl	8009170 <__errno>
 80056b0:	4603      	mov	r3, r0
 80056b2:	220c      	movs	r2, #12
 80056b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056b6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ba:	e009      	b.n	80056d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056bc:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <_sbrk+0x64>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <_sbrk+0x64>)
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4413      	add	r3, r2
 80056ca:	4a05      	ldr	r2, [pc, #20]	; (80056e0 <_sbrk+0x64>)
 80056cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056ce:	68fb      	ldr	r3, [r7, #12]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20010000 	.word	0x20010000
 80056dc:	00000400 	.word	0x00000400
 80056e0:	20000c08 	.word	0x20000c08
 80056e4:	20000c50 	.word	0x20000c50

080056e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80056ec:	4b15      	ldr	r3, [pc, #84]	; (8005744 <SystemInit+0x5c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a14      	ldr	r2, [pc, #80]	; (8005744 <SystemInit+0x5c>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80056f8:	4b12      	ldr	r3, [pc, #72]	; (8005744 <SystemInit+0x5c>)
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	4911      	ldr	r1, [pc, #68]	; (8005744 <SystemInit+0x5c>)
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <SystemInit+0x60>)
 8005700:	4013      	ands	r3, r2
 8005702:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <SystemInit+0x5c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a0e      	ldr	r2, [pc, #56]	; (8005744 <SystemInit+0x5c>)
 800570a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800570e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005712:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005714:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <SystemInit+0x5c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <SystemInit+0x5c>)
 800571a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005720:	4b08      	ldr	r3, [pc, #32]	; (8005744 <SystemInit+0x5c>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	4a07      	ldr	r2, [pc, #28]	; (8005744 <SystemInit+0x5c>)
 8005726:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800572a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <SystemInit+0x5c>)
 800572e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005732:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <SystemInit+0x64>)
 8005736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800573a:	609a      	str	r2, [r3, #8]
#endif 
}
 800573c:	bf00      	nop
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	40021000 	.word	0x40021000
 8005748:	f8ff0000 	.word	0xf8ff0000
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <TIMER_INIT+0x20>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0201 	mvn.w	r2, #1
 800575c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 800575e:	4804      	ldr	r0, [pc, #16]	; (8005770 <TIMER_INIT+0x20>)
 8005760:	f002 f99d 	bl	8007a9e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8005764:	4802      	ldr	r0, [pc, #8]	; (8005770 <TIMER_INIT+0x20>)
 8005766:	f002 f9de 	bl	8007b26 <HAL_TIM_Base_Start_IT>
}
 800576a:	bf00      	nop
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000af0 	.word	0x20000af0

08005774 <delay_us>:

void delay_us(uint16_t nus)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800577e:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <delay_us+0x6c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim2);
 8005786:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <delay_us+0x6c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <delay_us+0x6c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim2) < nus)
 8005796:	bf00      	nop
 8005798:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <delay_us+0x6c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3f9      	bcc.n	8005798 <delay_us+0x24>
	{
	}
	__HAL_TIM_DISABLE(&htim2);
 80057a4:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <delay_us+0x6c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6a1a      	ldr	r2, [r3, #32]
 80057aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10f      	bne.n	80057d4 <delay_us+0x60>
 80057b4:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <delay_us+0x6c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	f240 4344 	movw	r3, #1092	; 0x444
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d107      	bne.n	80057d4 <delay_us+0x60>
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <delay_us+0x6c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <delay_us+0x6c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0201 	bic.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000a70 	.word	0x20000a70

080057e4 <timer_min>:

void timer_min(uint8_t min)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <timer_min+0x38>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f06f 0201 	mvn.w	r2, #1
 80057f6:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <timer_min+0x3c>)
 8005800:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 8005802:	4b08      	ldr	r3, [pc, #32]	; (8005824 <timer_min+0x40>)
 8005804:	2201      	movs	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8005808:	4804      	ldr	r0, [pc, #16]	; (800581c <timer_min+0x38>)
 800580a:	f002 f948 	bl	8007a9e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 800580e:	4803      	ldr	r0, [pc, #12]	; (800581c <timer_min+0x38>)
 8005810:	f002 f989 	bl	8007b26 <HAL_TIM_Base_Start_IT>
}
 8005814:	bf00      	nop
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000ab0 	.word	0x20000ab0
 8005820:	20000c0c 	.word	0x20000c0c
 8005824:	20000c0d 	.word	0x20000c0d

08005828 <XPT2046_DelayUS>:
		-4.979353, -0.001750, 0.065168, -13.318824 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	e00a      	b.n	800584c <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 8005836:	230c      	movs	r3, #12
 8005838:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 800583a:	bf00      	nop
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	1e5a      	subs	r2, r3, #1
 8005840:	72fa      	strb	r2, [r7, #11]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1fa      	bne.n	800583c <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	429a      	cmp	r2, r3
 8005852:	d3f0      	bcc.n	8005836 <XPT2046_DelayUS+0xe>
			;

	}

}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 800586a:	2200      	movs	r2, #0
 800586c:	2104      	movs	r1, #4
 800586e:	481d      	ldr	r0, [pc, #116]	; (80058e4 <XPT2046_WriteCMD+0x84>)
 8005870:	f001 f959 	bl	8006b26 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8005874:	2200      	movs	r2, #0
 8005876:	2101      	movs	r1, #1
 8005878:	481a      	ldr	r0, [pc, #104]	; (80058e4 <XPT2046_WriteCMD+0x84>)
 800587a:	f001 f954 	bl	8006b26 <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 800587e:	2300      	movs	r3, #0
 8005880:	73fb      	strb	r3, [r7, #15]
 8005882:	e027      	b.n	80058d4 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8005884:	79fa      	ldrb	r2, [r7, #7]
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	f1c3 0307 	rsb	r3, r3, #7
 800588c:	fa42 f303 	asr.w	r3, r2, r3
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <XPT2046_WriteCMD+0x44>
 8005898:	2201      	movs	r2, #1
 800589a:	2104      	movs	r1, #4
 800589c:	4811      	ldr	r0, [pc, #68]	; (80058e4 <XPT2046_WriteCMD+0x84>)
 800589e:	f001 f942 	bl	8006b26 <HAL_GPIO_WritePin>
 80058a2:	e004      	b.n	80058ae <XPT2046_WriteCMD+0x4e>
 80058a4:	2200      	movs	r2, #0
 80058a6:	2104      	movs	r1, #4
 80058a8:	480e      	ldr	r0, [pc, #56]	; (80058e4 <XPT2046_WriteCMD+0x84>)
 80058aa:	f001 f93c 	bl	8006b26 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80058ae:	2005      	movs	r0, #5
 80058b0:	f7ff ffba 	bl	8005828 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 80058b4:	2201      	movs	r2, #1
 80058b6:	2101      	movs	r1, #1
 80058b8:	480a      	ldr	r0, [pc, #40]	; (80058e4 <XPT2046_WriteCMD+0x84>)
 80058ba:	f001 f934 	bl	8006b26 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80058be:	2005      	movs	r0, #5
 80058c0:	f7ff ffb2 	bl	8005828 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80058c4:	2200      	movs	r2, #0
 80058c6:	2101      	movs	r1, #1
 80058c8:	4806      	ldr	r0, [pc, #24]	; (80058e4 <XPT2046_WriteCMD+0x84>)
 80058ca:	f001 f92c 	bl	8006b26 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	3301      	adds	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b07      	cmp	r3, #7
 80058d8:	d9d4      	bls.n	8005884 <XPT2046_WriteCMD+0x24>
	}

}
 80058da:	bf00      	nop
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40011800 	.word	0x40011800

080058e8 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 80058ee:	2300      	movs	r3, #0
 80058f0:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 80058f2:	2200      	movs	r2, #0
 80058f4:	2104      	movs	r1, #4
 80058f6:	4819      	ldr	r0, [pc, #100]	; (800595c <XPT2046_ReadCMD+0x74>)
 80058f8:	f001 f915 	bl	8006b26 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80058fc:	2201      	movs	r2, #1
 80058fe:	2101      	movs	r1, #1
 8005900:	4816      	ldr	r0, [pc, #88]	; (800595c <XPT2046_ReadCMD+0x74>)
 8005902:	f001 f910 	bl	8006b26 <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 8005906:	2300      	movs	r3, #0
 8005908:	71fb      	strb	r3, [r7, #7]
 800590a:	e01e      	b.n	800594a <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 800590c:	2200      	movs	r2, #0
 800590e:	2101      	movs	r1, #1
 8005910:	4812      	ldr	r0, [pc, #72]	; (800595c <XPT2046_ReadCMD+0x74>)
 8005912:	f001 f908 	bl	8006b26 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 8005916:	2108      	movs	r1, #8
 8005918:	4810      	ldr	r0, [pc, #64]	; (800595c <XPT2046_ReadCMD+0x74>)
 800591a:	f001 f8ed 	bl	8006af8 <HAL_GPIO_ReadPin>
 800591e:	4603      	mov	r3, r0
 8005920:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 8005922:	887a      	ldrh	r2, [r7, #2]
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	f1c3 030b 	rsb	r3, r3, #11
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	b21a      	sxth	r2, r3
 8005930:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005934:	4313      	orrs	r3, r2
 8005936:	b21b      	sxth	r3, r3
 8005938:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 800593a:	2201      	movs	r2, #1
 800593c:	2101      	movs	r1, #1
 800593e:	4807      	ldr	r0, [pc, #28]	; (800595c <XPT2046_ReadCMD+0x74>)
 8005940:	f001 f8f1 	bl	8006b26 <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	3301      	adds	r3, #1
 8005948:	71fb      	strb	r3, [r7, #7]
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	2b0b      	cmp	r3, #11
 800594e:	d9dd      	bls.n	800590c <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8005950:	88bb      	ldrh	r3, [r7, #4]

}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40011800 	.word	0x40011800

08005960 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ff77 	bl	8005860 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 8005972:	f7ff ffb9 	bl	80058e8 <XPT2046_ReadCMD>
 8005976:	4603      	mov	r3, r0

}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 800598a:	2090      	movs	r0, #144	; 0x90
 800598c:	f7ff ffe8 	bl	8005960 <XPT2046_ReadAdc>
 8005990:	4603      	mov	r3, r0
 8005992:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8005994:	2001      	movs	r0, #1
 8005996:	f7ff ff47 	bl	8005828 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 800599a:	20d0      	movs	r0, #208	; 0xd0
 800599c:	f7ff ffe0 	bl	8005960 <XPT2046_ReadAdc>
 80059a0:	4603      	mov	r3, r0
 80059a2:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	89fa      	ldrh	r2, [r7, #14]
 80059a8:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	89ba      	ldrh	r2, [r7, #12]
 80059ae:	801a      	strh	r2, [r3, #0]

}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b092      	sub	sp, #72	; 0x48
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 80059c6:	f107 0308 	add.w	r3, r7, #8
 80059ca:	2228      	movs	r2, #40	; 0x28
 80059cc:	2100      	movs	r1, #0
 80059ce:	4618      	mov	r0, r3
 80059d0:	f003 fbf8 	bl	80091c4 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 80059d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80059d8:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff ffce 	bl	8005980 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 80059e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059e8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	3348      	adds	r3, #72	; 0x48
 80059f0:	443b      	add	r3, r7
 80059f2:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 80059f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059fa:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80059fe:	330a      	adds	r3, #10
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	3348      	adds	r3, #72	; 0x48
 8005a04:	443b      	add	r3, r7
 8005a06:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 8005a0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a0e:	3301      	adds	r3, #1
 8005a10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 8005a14:	2110      	movs	r1, #16
 8005a16:	4871      	ldr	r0, [pc, #452]	; (8005bdc <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8005a18:	f001 f86e 	bl	8006af8 <HAL_GPIO_ReadPin>
 8005a1c:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d103      	bne.n	8005a2a <XPT2046_ReadAdc_Smooth_XY+0x72>
 8005a22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a26:	2b09      	cmp	r3, #9
 8005a28:	d9d4      	bls.n	80059d4 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8005a2a:	2110      	movs	r1, #16
 8005a2c:	486b      	ldr	r0, [pc, #428]	; (8005bdc <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8005a2e:	f001 f863 	bl	8006af8 <HAL_GPIO_ReadPin>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8005a38:	4b69      	ldr	r3, [pc, #420]	; (8005be0 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8005a3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a42:	2b0a      	cmp	r3, #10
 8005a44:	f040 80c4 	bne.w	8005bd0 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8005a48:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8005a52:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005a62:	e02b      	b.n	8005abc <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8005a64:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	3348      	adds	r3, #72	; 0x48
 8005a6c:	443b      	add	r3, r7
 8005a6e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005a72:	461a      	mov	r2, r3
 8005a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a76:	4293      	cmp	r3, r2
 8005a78:	dd08      	ble.n	8005a8c <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8005a7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	3348      	adds	r3, #72	; 0x48
 8005a82:	443b      	add	r3, r7
 8005a84:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005a88:	643b      	str	r3, [r7, #64]	; 0x40
 8005a8a:	e012      	b.n	8005ab2 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8005a8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	3348      	adds	r3, #72	; 0x48
 8005a94:	443b      	add	r3, r7
 8005a96:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	da07      	bge.n	8005ab2 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8005aa2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	3348      	adds	r3, #72	; 0x48
 8005aaa:	443b      	add	r3, r7
 8005aac:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8005ab2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005abc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ac0:	2b09      	cmp	r3, #9
 8005ac2:	d9cf      	bls.n	8005a64 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005aca:	e02f      	b.n	8005b2c <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8005acc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ad0:	330a      	adds	r3, #10
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	3348      	adds	r3, #72	; 0x48
 8005ad6:	443b      	add	r3, r7
 8005ad8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005adc:	461a      	mov	r2, r3
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	dd09      	ble.n	8005af8 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8005ae4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ae8:	330a      	adds	r3, #10
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	3348      	adds	r3, #72	; 0x48
 8005aee:	443b      	add	r3, r7
 8005af0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005af4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af6:	e014      	b.n	8005b22 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 8005af8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005afc:	330a      	adds	r3, #10
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	3348      	adds	r3, #72	; 0x48
 8005b02:	443b      	add	r3, r7
 8005b04:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	da08      	bge.n	8005b22 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8005b10:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005b14:	330a      	adds	r3, #10
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	3348      	adds	r3, #72	; 0x48
 8005b1a:	443b      	add	r3, r7
 8005b1c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 8005b22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005b26:	3301      	adds	r3, #1
 8005b28:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005b2c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005b30:	2b09      	cmp	r3, #9
 8005b32:	d9cb      	bls.n	8005acc <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8005b34:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005b3e:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8005b40:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005b50:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8005b52:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005b56:	4413      	add	r3, r2
 8005b58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005b62:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8005b64:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005b6e:	441a      	add	r2, r3
 8005b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b76:	1ad3      	subs	r3, r2, r3
				>> 3;
 8005b78:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8005b80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005b8a:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8005b8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005b90:	4413      	add	r3, r2
 8005b92:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005b96:	4413      	add	r3, r2
 8005b98:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8005b9c:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8005b9e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8005ba8:	4413      	add	r3, r2
 8005baa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8005bae:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8005bb0:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8005bba:	441a      	add	r2, r3
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	1ad2      	subs	r2, r2, r3
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc2:	1ad3      	subs	r3, r2, r3
				>> 3;
 8005bc4:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	805a      	strh	r2, [r3, #2]

		return 1;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8005bd0:	2300      	movs	r3, #0

}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3748      	adds	r7, #72	; 0x48
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40011800 	.word	0x40011800
 8005be0:	20000c0e 	.word	0x20000c0e

08005be4 <XPT2046_Calculate_CalibrationFactor>:
#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(
		strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_Coordinate *pScreenSample,
		strType_XPT2046_Calibration *pCalibrationFactor) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	1ad3      	subs	r3, r2, r3
			* (pScreenSample[1].y - pScreenSample[2].y))
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	3204      	adds	r2, #4
 8005c06:	8852      	ldrh	r2, [r2, #2]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	3208      	adds	r2, #8
 8005c0e:	8852      	ldrh	r2, [r2, #2]
 8005c10:	1a8a      	subs	r2, r1, r2
 8005c12:	fb03 f202 	mul.w	r2, r3, r2
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3308      	adds	r3, #8
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	1acb      	subs	r3, r1, r3
					* (pScreenSample[0].y - pScreenSample[2].y));
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	8849      	ldrh	r1, [r1, #2]
 8005c2a:	4608      	mov	r0, r1
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	3108      	adds	r1, #8
 8005c30:	8849      	ldrh	r1, [r1, #2]
 8005c32:	1a41      	subs	r1, r0, r1
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8005c38:	1ad3      	subs	r3, r2, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fa fc4e 	bl	80004dc <__aeabi_i2d>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	f7fa ff12 	bl	8000a80 <__aeabi_dcmpeq>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]
 8005c66:	e145      	b.n	8005ef4 <XPT2046_Calculate_CalibrationFactor+0x310>

	else {

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].x)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3308      	adds	r3, #8
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	3204      	adds	r2, #4
 8005c7a:	8852      	ldrh	r2, [r2, #2]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	3208      	adds	r2, #8
 8005c82:	8852      	ldrh	r2, [r2, #2]
 8005c84:	1a8a      	subs	r2, r1, r2
 8005c86:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	4619      	mov	r1, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3308      	adds	r3, #8
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	8849      	ldrh	r1, [r1, #2]
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	3108      	adds	r1, #8
 8005ca4:	8849      	ldrh	r1, [r1, #2]
 8005ca6:	1a41      	subs	r1, r0, r1
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8005cac:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fa fc14 	bl	80004dc <__aeabi_i2d>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x))
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	3204      	adds	r2, #4
 8005cd0:	8812      	ldrh	r2, [r2, #0]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	3208      	adds	r2, #8
 8005cd8:	8812      	ldrh	r2, [r2, #0]
 8005cda:	1a8a      	subs	r2, r1, r2
 8005cdc:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	3104      	adds	r1, #4
 8005cf2:	8809      	ldrh	r1, [r1, #0]
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	3108      	adds	r1, #8
 8005cfa:	8809      	ldrh	r1, [r1, #0]
 8005cfc:	1a41      	subs	r1, r0, r1
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8005d02:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fa fbe9 	bl	80004dc <__aeabi_i2d>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	3308      	adds	r3, #8
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].x)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3308      	adds	r3, #8
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	fb01 f303 	mul.w	r3, r1, r3
 8005d38:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	8852      	ldrh	r2, [r2, #2]
 8005d3e:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	4619      	mov	r1, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].x)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	3308      	adds	r3, #8
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	fb00 f303 	mul.w	r3, r0, r3
 8005d62:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	3104      	adds	r1, #4
 8005d68:	8849      	ldrh	r1, [r1, #2]
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8005d6e:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	3304      	adds	r3, #4
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	4619      	mov	r1, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].x)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	fb00 f303 	mul.w	r3, r0, r3
 8005d90:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	3108      	adds	r1, #8
 8005d96:	8849      	ldrh	r1, [r1, #2]
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8005d9c:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fb9c 	bl	80004dc <__aeabi_i2d>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	885b      	ldrh	r3, [r3, #2]
 8005db2:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].y)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3308      	adds	r3, #8
 8005db8:	885b      	ldrh	r3, [r3, #2]
 8005dba:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	3204      	adds	r2, #4
 8005dc0:	8852      	ldrh	r2, [r2, #2]
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	3208      	adds	r2, #8
 8005dc8:	8852      	ldrh	r2, [r2, #2]
 8005dca:	1a8a      	subs	r2, r1, r2
 8005dcc:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	885b      	ldrh	r3, [r3, #2]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	885b      	ldrh	r3, [r3, #2]
 8005dde:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	8849      	ldrh	r1, [r1, #2]
 8005de4:	4608      	mov	r0, r1
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	3108      	adds	r1, #8
 8005dea:	8849      	ldrh	r1, [r1, #2]
 8005dec:	1a41      	subs	r1, r0, r1
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8005df2:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fa fb71 	bl	80004dc <__aeabi_i2d>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y))
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	3204      	adds	r2, #4
 8005e16:	8852      	ldrh	r2, [r2, #2]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	3208      	adds	r2, #8
 8005e1e:	8852      	ldrh	r2, [r2, #2]
 8005e20:	1a8a      	subs	r2, r1, r2
 8005e22:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	885b      	ldrh	r3, [r3, #2]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	885b      	ldrh	r3, [r3, #2]
 8005e32:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	3104      	adds	r1, #4
 8005e38:	8809      	ldrh	r1, [r1, #0]
 8005e3a:	4608      	mov	r0, r1
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	3108      	adds	r1, #8
 8005e40:	8809      	ldrh	r1, [r1, #0]
 8005e42:	1a41      	subs	r1, r0, r1
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8005e48:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fa fb46 	bl	80004dc <__aeabi_i2d>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3304      	adds	r3, #4
 8005e66:	885b      	ldrh	r3, [r3, #2]
 8005e68:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].y)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3308      	adds	r3, #8
 8005e78:	885b      	ldrh	r3, [r3, #2]
 8005e7a:	fb01 f303 	mul.w	r3, r1, r3
 8005e7e:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	8852      	ldrh	r2, [r2, #2]
 8005e84:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3308      	adds	r3, #8
 8005e92:	885b      	ldrh	r3, [r3, #2]
 8005e94:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].y)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	885b      	ldrh	r3, [r3, #2]
 8005ea4:	fb00 f303 	mul.w	r3, r0, r3
 8005ea8:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	3104      	adds	r1, #4
 8005eae:	8849      	ldrh	r1, [r1, #2]
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8005eb4:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	885b      	ldrh	r3, [r3, #2]
 8005ec2:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].y)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	885b      	ldrh	r3, [r3, #2]
 8005ed2:	fb00 f303 	mul.w	r3, r0, r3
 8005ed6:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	3108      	adds	r1, #8
 8005edc:	8849      	ldrh	r1, [r1, #2]
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8005ee2:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fa faf9 	bl	80004dc <__aeabi_i2d>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}

	return ucRet;
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]

}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void) {
 8005f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f04:	b0a0      	sub	sp, #128	; 0x80
 8005f06:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char *pStr = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	66bb      	str	r3, [r7, #104]	; 0x68
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 8005f24:	23f0      	movs	r3, #240	; 0xf0
 8005f26:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 8005f2a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005f2e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	    usScreenWidth = LCD_Default_Max_Heigth;
	    usScreenHeigth = LCD_Default_Max_Width;
	
	  #endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 8005f32:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 8005f3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f42:	089b      	lsrs	r3, r3, #2
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8005f4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8005f52:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8005f56:	4613      	mov	r3, r2
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	4413      	add	r3, r2
 8005f5c:	109b      	asrs	r3, r3, #2
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8005f64:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005f68:	4613      	mov	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4413      	add	r3, r2
 8005f6e:	109b      	asrs	r3, r3, #2
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8005f76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f7a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8005f7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005f82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8005f86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	LCD_GramScan(1);
 8005f8e:	2001      	movs	r0, #1
 8005f90:	f7fc faa0 	bl	80024d4 <LCD_GramScan>

	for (i = 0; i < 4; i++) {
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005f9a:	e047      	b.n	800602c <XPT2046_Touch_Calibrate+0x12c>
		LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8005f9c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fa0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f7fc f81a 	bl	8001fe0 <LCD_Clear>

		pStr = "Touch Calibrate ......";
 8005fac:	4bb6      	ldr	r3, [pc, #728]	; (8006288 <XPT2046_Touch_Calibrate+0x388>)
 8005fae:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color(
				(usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1,
 8005fb0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8005fb4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005fb6:	f7fa f937 	bl	8000228 <strlen>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	3b07      	subs	r3, #7
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	1ae3      	subs	r3, r4, r3
 8005fc2:	085b      	lsrs	r3, r3, #1
		LCD_DrawString_Color(
 8005fc4:	b298      	uxth	r0, r3
 8005fc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	b299      	uxth	r1, r3
 8005fce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fda:	f7fc fa45 	bl	8002468 <LCD_DrawString_Color>
		/*
		sprintf(cStr, "%d", i + 1);
		LCD_DrawString_Color(usScreenWidth >> 1,
				(usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
		*/
		XPT2046_DelayUS(100000);
 8005fde:	48ab      	ldr	r0, [pc, #684]	; (800628c <XPT2046_Touch_Calibrate+0x38c>)
 8005fe0:	f7ff fc22 	bl	8005828 <XPT2046_DelayUS>

		LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8005fe4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	3378      	adds	r3, #120	; 0x78
 8005fec:	443b      	add	r3, r7
 8005fee:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005ff2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	3378      	adds	r3, #120	; 0x78
 8005ffa:	443b      	add	r3, r7
 8005ffc:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7fc fa0e 	bl	8002424 <LCD_DrawCross>

		while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
 8006008:	bf00      	nop
 800600a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800600e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fcce 	bl	80059b8 <XPT2046_ReadAdc_Smooth_XY>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f3      	beq.n	800600a <XPT2046_Touch_Calibrate+0x10a>
	for (i = 0; i < 4; i++) {
 8006022:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006026:	3301      	adds	r3, #1
 8006028:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800602c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006030:	2b03      	cmp	r3, #3
 8006032:	d9b3      	bls.n	8005f9c <XPT2046_Touch_Calibrate+0x9c>
			;

	}

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample,
 8006034:	463a      	mov	r2, r7
 8006036:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800603a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fdd0 	bl	8005be4 <XPT2046_Calculate_CalibrationFactor>
			&CalibrationFactor);

	if (CalibrationFactor.Divider == 0)
 8006044:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	f7fa fd16 	bl	8000a80 <__aeabi_dcmpeq>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	f040 8113 	bne.w	8006282 <XPT2046_Touch_Calibrate+0x382>
		goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 800605c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006060:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006064:	4618      	mov	r0, r3
 8006066:	f7fa fa39 	bl	80004dc <__aeabi_i2d>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4620      	mov	r0, r4
 8006070:	4629      	mov	r1, r5
 8006072:	f7fa fa9d 	bl	80005b0 <__aeabi_dmul>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4690      	mov	r8, r2
 800607c:	4699      	mov	r9, r3
			+ (CalibrationFactor.Bn * strScreenSample[3].y)
 800607e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006082:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006086:	4618      	mov	r0, r3
 8006088:	f7fa fa28 	bl	80004dc <__aeabi_i2d>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4620      	mov	r0, r4
 8006092:	4629      	mov	r1, r5
 8006094:	f7fa fa8c 	bl	80005b0 <__aeabi_dmul>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4640      	mov	r0, r8
 800609e:	4649      	mov	r1, r9
 80060a0:	f7fa f8d0 	bl	8000244 <__adddf3>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
			+ CalibrationFactor.Cn) / CalibrationFactor.Divider;
 80060ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060b0:	f7fa f8c8 	bl	8000244 <__adddf3>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4610      	mov	r0, r2
 80060ba:	4619      	mov	r1, r3
 80060bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80060c0:	f7fa fba0 	bl	8000804 <__aeabi_ddiv>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 80060c8:	4610      	mov	r0, r2
 80060ca:	4619      	mov	r1, r3
 80060cc:	f7fa fd48 	bl	8000b60 <__aeabi_d2uiz>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 80060d6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80060da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa f9fc 	bl	80004dc <__aeabi_i2d>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4620      	mov	r0, r4
 80060ea:	4629      	mov	r1, r5
 80060ec:	f7fa fa60 	bl	80005b0 <__aeabi_dmul>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4690      	mov	r8, r2
 80060f6:	4699      	mov	r9, r3
			+ (CalibrationFactor.En * strScreenSample[3].y)
 80060f8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80060fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006100:	4618      	mov	r0, r3
 8006102:	f7fa f9eb 	bl	80004dc <__aeabi_i2d>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4620      	mov	r0, r4
 800610c:	4629      	mov	r1, r5
 800610e:	f7fa fa4f 	bl	80005b0 <__aeabi_dmul>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4640      	mov	r0, r8
 8006118:	4649      	mov	r1, r9
 800611a:	f7fa f893 	bl	8000244 <__adddf3>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4610      	mov	r0, r2
 8006124:	4619      	mov	r1, r3
			+ CalibrationFactor.Fn) / CalibrationFactor.Divider;
 8006126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800612a:	f7fa f88b 	bl	8000244 <__adddf3>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4610      	mov	r0, r2
 8006134:	4619      	mov	r1, r3
 8006136:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800613a:	f7fa fb63 	bl	8000804 <__aeabi_ddiv>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	f7fa fd0b 	bl	8000b60 <__aeabi_d2uiz>
 800614a:	4603      	mov	r3, r0
 800614c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x =
			(usTest_x > strCrossCoordinate[3].x) ?
 8006150:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8006154:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8006158:	429a      	cmp	r2, r3
 800615a:	d906      	bls.n	800616a <XPT2046_Touch_Calibrate+0x26a>
					(usTest_x - strCrossCoordinate[3].x) :
 800615c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8006160:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	b29b      	uxth	r3, r3
 8006168:	e005      	b.n	8006176 <XPT2046_Touch_Calibrate+0x276>
					(strCrossCoordinate[3].x - usTest_x);
 800616a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	usGap_x =
 800616e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	b29b      	uxth	r3, r3
 8006176:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y =
			(usTest_y > strCrossCoordinate[3].y) ?
 800617a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 800617e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8006182:	429a      	cmp	r2, r3
 8006184:	d906      	bls.n	8006194 <XPT2046_Touch_Calibrate+0x294>
					(usTest_y - strCrossCoordinate[3].y) :
 8006186:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 800618a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	b29b      	uxth	r3, r3
 8006192:	e005      	b.n	80061a0 <XPT2046_Touch_Calibrate+0x2a0>
					(strCrossCoordinate[3].y - usTest_y);
 8006194:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
	usGap_y =
 8006198:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((usGap_x > 10) || (usGap_y > 10))
 80061a4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80061a8:	2b0a      	cmp	r3, #10
 80061aa:	d877      	bhi.n	800629c <XPT2046_Touch_Calibrate+0x39c>
 80061ac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80061b0:	2b0a      	cmp	r3, #10
 80061b2:	d873      	bhi.n	800629c <XPT2046_Touch_Calibrate+0x39c>
		goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 80061b4:	e9d7 0100 	ldrd	r0, r1, [r7]
			/ CalibrationFactor.Divider;
 80061b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061bc:	f7fa fb22 	bl	8000804 <__aeabi_ddiv>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 80061c4:	4932      	ldr	r1, [pc, #200]	; (8006290 <XPT2046_Touch_Calibrate+0x390>)
 80061c6:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 80061ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
			/ CalibrationFactor.Divider;
 80061ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061d2:	f7fa fb17 	bl	8000804 <__aeabi_ddiv>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 80061da:	492d      	ldr	r1, [pc, #180]	; (8006290 <XPT2046_Touch_Calibrate+0x390>)
 80061dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 80061e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
			/ CalibrationFactor.Divider;
 80061e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061e8:	f7fa fb0c 	bl	8000804 <__aeabi_ddiv>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 80061f0:	4927      	ldr	r1, [pc, #156]	; (8006290 <XPT2046_Touch_Calibrate+0x390>)
 80061f2:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 80061f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			/ CalibrationFactor.Divider;
 80061fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061fe:	f7fa fb01 	bl	8000804 <__aeabi_ddiv>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 8006206:	4922      	ldr	r1, [pc, #136]	; (8006290 <XPT2046_Touch_Calibrate+0x390>)
 8006208:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 800620c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
			/ CalibrationFactor.Divider;
 8006210:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006214:	f7fa faf6 	bl	8000804 <__aeabi_ddiv>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 800621c:	491c      	ldr	r1, [pc, #112]	; (8006290 <XPT2046_Touch_Calibrate+0x390>)
 800621e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8006222:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
			/ CalibrationFactor.Divider;
 8006226:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800622a:	f7fa faeb 	bl	8000804 <__aeabi_ddiv>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8006232:	4917      	ldr	r1, [pc, #92]	; (8006290 <XPT2046_Touch_Calibrate+0x390>)
 8006234:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

#endif

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8006238:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800623c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006240:	2100      	movs	r1, #0
 8006242:	2000      	movs	r0, #0
 8006244:	f7fb fecc 	bl	8001fe0 <LCD_Clear>

	pStr = "Welcome !";
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <XPT2046_Touch_Calibrate+0x394>)
 800624a:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 800624c:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8006250:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006252:	f7f9 ffe9 	bl	8000228 <strlen>
 8006256:	4603      	mov	r3, r0
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	1ae3      	subs	r3, r4, r3
 800625c:	085b      	lsrs	r3, r3, #1
 800625e:	b298      	uxth	r0, r3
 8006260:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006264:	085b      	lsrs	r3, r3, #1
 8006266:	b299      	uxth	r1, r3
 8006268:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006272:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006274:	f7fc f8f8 	bl	8002468 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(200000);
 8006278:	4807      	ldr	r0, [pc, #28]	; (8006298 <XPT2046_Touch_Calibrate+0x398>)
 800627a:	f7ff fad5 	bl	8005828 <XPT2046_DelayUS>

	return 1;
 800627e:	2301      	movs	r3, #1
 8006280:	e04b      	b.n	800631a <XPT2046_Touch_Calibrate+0x41a>
		goto Failure;
 8006282:	bf00      	nop
 8006284:	e00b      	b.n	800629e <XPT2046_Touch_Calibrate+0x39e>
 8006286:	bf00      	nop
 8006288:	08011ddc 	.word	0x08011ddc
 800628c:	000186a0 	.word	0x000186a0
 8006290:	20000010 	.word	0x20000010
 8006294:	08011df4 	.word	0x08011df4
 8006298:	00030d40 	.word	0x00030d40
		goto Failure;
 800629c:	bf00      	nop

	Failure:

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 800629e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062a2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80062a6:	2100      	movs	r1, #0
 80062a8:	2000      	movs	r0, #0
 80062aa:	f7fb fe99 	bl	8001fe0 <LCD_Clear>

	pStr = "Calibrate fail";
 80062ae:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <XPT2046_Touch_Calibrate+0x424>)
 80062b0:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 80062b2:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80062b6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80062b8:	f7f9 ffb6 	bl	8000228 <strlen>
 80062bc:	4603      	mov	r3, r0
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	1ae3      	subs	r3, r4, r3
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	b298      	uxth	r0, r3
 80062c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	b299      	uxth	r1, r3
 80062ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062da:	f7fc f8c5 	bl	8002468 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	pStr = "try again";
 80062de:	4b12      	ldr	r3, [pc, #72]	; (8006328 <XPT2046_Touch_Calibrate+0x428>)
 80062e0:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 80062e2:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80062e6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80062e8:	f7f9 ff9e 	bl	8000228 <strlen>
 80062ec:	4603      	mov	r3, r0
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	1ae3      	subs	r3, r4, r3
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	b298      	uxth	r0, r3
 80062f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3310      	adds	r3, #16
 8006300:	b299      	uxth	r1, r3
 8006302:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800630c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800630e:	f7fc f8ab 	bl	8002468 <LCD_DrawString_Color>
			(usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);
 8006312:	4806      	ldr	r0, [pc, #24]	; (800632c <XPT2046_Touch_Calibrate+0x42c>)
 8006314:	f7ff fa88 	bl	8005828 <XPT2046_DelayUS>

	return 0;
 8006318:	2300      	movs	r3, #0

}
 800631a:	4618      	mov	r0, r3
 800631c:	3778      	adds	r7, #120	; 0x78
 800631e:	46bd      	mov	sp, r7
 8006320:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006324:	08011e00 	.word	0x08011e00
 8006328:	08011e10 	.word	0x08011e10
 800632c:	000f4240 	.word	0x000f4240

08006330 <XPT2046_Get_TouchedPoint>:

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8006330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8006340:	f107 0308 	add.w	r3, r7, #8
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fb37 	bl	80059b8 <XPT2046_ReadAdc_Smooth_XY>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d06e      	beq.n	800642e <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006356:	893b      	ldrh	r3, [r7, #8]
 8006358:	4618      	mov	r0, r3
 800635a:	f7fa f8bf 	bl	80004dc <__aeabi_i2d>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7fa f923 	bl	80005b0 <__aeabi_dmul>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4690      	mov	r8, r2
 8006370:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006378:	897b      	ldrh	r3, [r7, #10]
 800637a:	4618      	mov	r0, r3
 800637c:	f7fa f8ae 	bl	80004dc <__aeabi_i2d>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	f7fa f912 	bl	80005b0 <__aeabi_dmul>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7f9 ff56 	bl	8000244 <__adddf3>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80063a6:	f7f9 ff4d 	bl	8000244 <__adddf3>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80063ae:	4610      	mov	r0, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	f7fa fbd5 	bl	8000b60 <__aeabi_d2uiz>
 80063b6:	4603      	mov	r3, r0
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80063c4:	893b      	ldrh	r3, [r7, #8]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fa f888 	bl	80004dc <__aeabi_i2d>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4620      	mov	r0, r4
 80063d2:	4629      	mov	r1, r5
 80063d4:	f7fa f8ec 	bl	80005b0 <__aeabi_dmul>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4690      	mov	r8, r2
 80063de:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80063e6:	897b      	ldrh	r3, [r7, #10]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fa f877 	bl	80004dc <__aeabi_i2d>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4620      	mov	r0, r4
 80063f4:	4629      	mov	r1, r5
 80063f6:	f7fa f8db 	bl	80005b0 <__aeabi_dmul>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4640      	mov	r0, r8
 8006400:	4649      	mov	r1, r9
 8006402:	f7f9 ff1f 	bl	8000244 <__adddf3>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4610      	mov	r0, r2
 800640c:	4619      	mov	r1, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006414:	f7f9 ff16 	bl	8000244 <__adddf3>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 800641c:	4610      	mov	r0, r2
 800641e:	4619      	mov	r1, r3
 8006420:	f7fa fb9e 	bl	8000b60 <__aeabi_d2uiz>
 8006424:	4603      	mov	r3, r0
 8006426:	b29a      	uxth	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	805a      	strh	r2, [r3, #2]
 800642c:	e001      	b.n	8006432 <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 8006432:	7bfb      	ldrb	r3, [r7, #15]

}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800643e <XPT2046_Reset_TouchPoint>:

void XPT2046_Reset_TouchPoint(strType_XPT2046_Coordinate *pDisplayCoordinate){
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
	//Reset X and Y
	pDisplayCoordinate->x = 0;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	801a      	strh	r2, [r3, #0]
	pDisplayCoordinate->y = 0;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	805a      	strh	r2, [r3, #2]
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800645c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800645e:	e003      	b.n	8006468 <LoopCopyDataInit>

08006460 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006460:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006462:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006464:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006466:	3104      	adds	r1, #4

08006468 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006468:	480a      	ldr	r0, [pc, #40]	; (8006494 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800646a:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800646c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800646e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006470:	d3f6      	bcc.n	8006460 <CopyDataInit>
  ldr r2, =_sbss
 8006472:	4a0a      	ldr	r2, [pc, #40]	; (800649c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006474:	e002      	b.n	800647c <LoopFillZerobss>

08006476 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006476:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006478:	f842 3b04 	str.w	r3, [r2], #4

0800647c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800647c:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800647e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006480:	d3f9      	bcc.n	8006476 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006482:	f7ff f931 	bl	80056e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006486:	f002 fe79 	bl	800917c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800648a:	f7fc f95f 	bl	800274c <main>
  bx lr
 800648e:	4770      	bx	lr
  ldr r3, =_sidata
 8006490:	080601dc 	.word	0x080601dc
  ldr r0, =_sdata
 8006494:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006498:	200009fc 	.word	0x200009fc
  ldr r2, =_sbss
 800649c:	200009fc 	.word	0x200009fc
  ldr r3, = _ebss
 80064a0:	20000c50 	.word	0x20000c50

080064a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80064a4:	e7fe      	b.n	80064a4 <ADC1_2_IRQHandler>
	...

080064a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064ac:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <HAL_Init+0x28>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a07      	ldr	r2, [pc, #28]	; (80064d0 <HAL_Init+0x28>)
 80064b2:	f043 0310 	orr.w	r3, r3, #16
 80064b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064b8:	2003      	movs	r0, #3
 80064ba:	f000 f943 	bl	8006744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064be:	2000      	movs	r0, #0
 80064c0:	f000 f808 	bl	80064d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064c4:	f7fe fe4e 	bl	8005164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40022000 	.word	0x40022000

080064d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064dc:	4b12      	ldr	r3, [pc, #72]	; (8006528 <HAL_InitTick+0x54>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	4b12      	ldr	r3, [pc, #72]	; (800652c <HAL_InitTick+0x58>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	4619      	mov	r1, r3
 80064e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 f95b 	bl	80067ae <HAL_SYSTICK_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e00e      	b.n	8006520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b0f      	cmp	r3, #15
 8006506:	d80a      	bhi.n	800651e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006508:	2200      	movs	r2, #0
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	f000 f923 	bl	800675a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006514:	4a06      	ldr	r2, [pc, #24]	; (8006530 <HAL_InitTick+0x5c>)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	e000      	b.n	8006520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	2000000c 	.word	0x2000000c
 800652c:	20000044 	.word	0x20000044
 8006530:	20000040 	.word	0x20000040

08006534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_IncTick+0x1c>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <HAL_IncTick+0x20>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4413      	add	r3, r2
 8006544:	4a03      	ldr	r2, [pc, #12]	; (8006554 <HAL_IncTick+0x20>)
 8006546:	6013      	str	r3, [r2, #0]
}
 8006548:	bf00      	nop
 800654a:	46bd      	mov	sp, r7
 800654c:	bc80      	pop	{r7}
 800654e:	4770      	bx	lr
 8006550:	20000044 	.word	0x20000044
 8006554:	20000c10 	.word	0x20000c10

08006558 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return uwTick;
 800655c:	4b02      	ldr	r3, [pc, #8]	; (8006568 <HAL_GetTick+0x10>)
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	4618      	mov	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr
 8006568:	20000c10 	.word	0x20000c10

0800656c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006574:	f7ff fff0 	bl	8006558 <HAL_GetTick>
 8006578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d005      	beq.n	8006592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <HAL_Delay+0x44>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006592:	bf00      	nop
 8006594:	f7ff ffe0 	bl	8006558 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d8f7      	bhi.n	8006594 <HAL_Delay+0x28>
  {
  }
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000044 	.word	0x20000044

080065b4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <NVIC_SetPriorityGrouping+0x44>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065d0:	4013      	ands	r3, r2
 80065d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065e6:	4a04      	ldr	r2, [pc, #16]	; (80065f8 <NVIC_SetPriorityGrouping+0x44>)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	60d3      	str	r3, [r2, #12]
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	e000ed00 	.word	0xe000ed00

080065fc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006600:	4b04      	ldr	r3, [pc, #16]	; (8006614 <NVIC_GetPriorityGrouping+0x18>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	0a1b      	lsrs	r3, r3, #8
 8006606:	f003 0307 	and.w	r3, r3, #7
}
 800660a:	4618      	mov	r0, r3
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	e000ed00 	.word	0xe000ed00

08006618 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	f003 021f 	and.w	r2, r3, #31
 8006628:	4906      	ldr	r1, [pc, #24]	; (8006644 <NVIC_EnableIRQ+0x2c>)
 800662a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	2001      	movs	r0, #1
 8006632:	fa00 f202 	lsl.w	r2, r0, r2
 8006636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr
 8006644:	e000e100 	.word	0xe000e100

08006648 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	6039      	str	r1, [r7, #0]
 8006652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006658:	2b00      	cmp	r3, #0
 800665a:	da0b      	bge.n	8006674 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	490c      	ldr	r1, [pc, #48]	; (8006694 <NVIC_SetPriority+0x4c>)
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	3b04      	subs	r3, #4
 800666a:	0112      	lsls	r2, r2, #4
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	440b      	add	r3, r1
 8006670:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006672:	e009      	b.n	8006688 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	4907      	ldr	r1, [pc, #28]	; (8006698 <NVIC_SetPriority+0x50>)
 800667a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667e:	0112      	lsls	r2, r2, #4
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	440b      	add	r3, r1
 8006684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	e000ed00 	.word	0xe000ed00
 8006698:	e000e100 	.word	0xe000e100

0800669c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800669c:	b480      	push	{r7}
 800669e:	b089      	sub	sp, #36	; 0x24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f1c3 0307 	rsb	r3, r3, #7
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	bf28      	it	cs
 80066ba:	2304      	movcs	r3, #4
 80066bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3304      	adds	r3, #4
 80066c2:	2b06      	cmp	r3, #6
 80066c4:	d902      	bls.n	80066cc <NVIC_EncodePriority+0x30>
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	3b03      	subs	r3, #3
 80066ca:	e000      	b.n	80066ce <NVIC_EncodePriority+0x32>
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066d0:	f04f 32ff 	mov.w	r2, #4294967295
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	43da      	mvns	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	401a      	ands	r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066e4:	f04f 31ff 	mov.w	r1, #4294967295
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	fa01 f303 	lsl.w	r3, r1, r3
 80066ee:	43d9      	mvns	r1, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066f4:	4313      	orrs	r3, r2
         );
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3724      	adds	r7, #36	; 0x24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3b01      	subs	r3, #1
 800670c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006710:	d301      	bcc.n	8006716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006712:	2301      	movs	r3, #1
 8006714:	e00f      	b.n	8006736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006716:	4a0a      	ldr	r2, [pc, #40]	; (8006740 <SysTick_Config+0x40>)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3b01      	subs	r3, #1
 800671c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800671e:	210f      	movs	r1, #15
 8006720:	f04f 30ff 	mov.w	r0, #4294967295
 8006724:	f7ff ff90 	bl	8006648 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <SysTick_Config+0x40>)
 800672a:	2200      	movs	r2, #0
 800672c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800672e:	4b04      	ldr	r3, [pc, #16]	; (8006740 <SysTick_Config+0x40>)
 8006730:	2207      	movs	r2, #7
 8006732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	e000e010 	.word	0xe000e010

08006744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff ff31 	bl	80065b4 <NVIC_SetPriorityGrouping>
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800675a:	b580      	push	{r7, lr}
 800675c:	b086      	sub	sp, #24
 800675e:	af00      	add	r7, sp, #0
 8006760:	4603      	mov	r3, r0
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
 8006766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800676c:	f7ff ff46 	bl	80065fc <NVIC_GetPriorityGrouping>
 8006770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	6978      	ldr	r0, [r7, #20]
 8006778:	f7ff ff90 	bl	800669c <NVIC_EncodePriority>
 800677c:	4602      	mov	r2, r0
 800677e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006782:	4611      	mov	r1, r2
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff ff5f 	bl	8006648 <NVIC_SetPriority>
}
 800678a:	bf00      	nop
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	4603      	mov	r3, r0
 800679a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800679c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff ff39 	bl	8006618 <NVIC_EnableIRQ>
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff ffa2 	bl	8006700 <SysTick_Config>
 80067bc:	4603      	mov	r3, r0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b08b      	sub	sp, #44	; 0x2c
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80067de:	2300      	movs	r3, #0
 80067e0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ea:	e179      	b.n	8006ae0 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80067ec:	2201      	movs	r2, #1
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	4013      	ands	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	429a      	cmp	r2, r3
 8006806:	f040 8168 	bne.w	8006ada <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	4a96      	ldr	r2, [pc, #600]	; (8006a68 <HAL_GPIO_Init+0x2a0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d05e      	beq.n	80068d2 <HAL_GPIO_Init+0x10a>
 8006814:	4a94      	ldr	r2, [pc, #592]	; (8006a68 <HAL_GPIO_Init+0x2a0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d875      	bhi.n	8006906 <HAL_GPIO_Init+0x13e>
 800681a:	4a94      	ldr	r2, [pc, #592]	; (8006a6c <HAL_GPIO_Init+0x2a4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d058      	beq.n	80068d2 <HAL_GPIO_Init+0x10a>
 8006820:	4a92      	ldr	r2, [pc, #584]	; (8006a6c <HAL_GPIO_Init+0x2a4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d86f      	bhi.n	8006906 <HAL_GPIO_Init+0x13e>
 8006826:	4a92      	ldr	r2, [pc, #584]	; (8006a70 <HAL_GPIO_Init+0x2a8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d052      	beq.n	80068d2 <HAL_GPIO_Init+0x10a>
 800682c:	4a90      	ldr	r2, [pc, #576]	; (8006a70 <HAL_GPIO_Init+0x2a8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d869      	bhi.n	8006906 <HAL_GPIO_Init+0x13e>
 8006832:	4a90      	ldr	r2, [pc, #576]	; (8006a74 <HAL_GPIO_Init+0x2ac>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d04c      	beq.n	80068d2 <HAL_GPIO_Init+0x10a>
 8006838:	4a8e      	ldr	r2, [pc, #568]	; (8006a74 <HAL_GPIO_Init+0x2ac>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d863      	bhi.n	8006906 <HAL_GPIO_Init+0x13e>
 800683e:	4a8e      	ldr	r2, [pc, #568]	; (8006a78 <HAL_GPIO_Init+0x2b0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d046      	beq.n	80068d2 <HAL_GPIO_Init+0x10a>
 8006844:	4a8c      	ldr	r2, [pc, #560]	; (8006a78 <HAL_GPIO_Init+0x2b0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d85d      	bhi.n	8006906 <HAL_GPIO_Init+0x13e>
 800684a:	2b12      	cmp	r3, #18
 800684c:	d82a      	bhi.n	80068a4 <HAL_GPIO_Init+0xdc>
 800684e:	2b12      	cmp	r3, #18
 8006850:	d859      	bhi.n	8006906 <HAL_GPIO_Init+0x13e>
 8006852:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <HAL_GPIO_Init+0x90>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	080068d3 	.word	0x080068d3
 800685c:	080068ad 	.word	0x080068ad
 8006860:	080068bf 	.word	0x080068bf
 8006864:	08006901 	.word	0x08006901
 8006868:	08006907 	.word	0x08006907
 800686c:	08006907 	.word	0x08006907
 8006870:	08006907 	.word	0x08006907
 8006874:	08006907 	.word	0x08006907
 8006878:	08006907 	.word	0x08006907
 800687c:	08006907 	.word	0x08006907
 8006880:	08006907 	.word	0x08006907
 8006884:	08006907 	.word	0x08006907
 8006888:	08006907 	.word	0x08006907
 800688c:	08006907 	.word	0x08006907
 8006890:	08006907 	.word	0x08006907
 8006894:	08006907 	.word	0x08006907
 8006898:	08006907 	.word	0x08006907
 800689c:	080068b5 	.word	0x080068b5
 80068a0:	080068c9 	.word	0x080068c9
 80068a4:	4a75      	ldr	r2, [pc, #468]	; (8006a7c <HAL_GPIO_Init+0x2b4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80068aa:	e02c      	b.n	8006906 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	623b      	str	r3, [r7, #32]
          break;
 80068b2:	e029      	b.n	8006908 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	3304      	adds	r3, #4
 80068ba:	623b      	str	r3, [r7, #32]
          break;
 80068bc:	e024      	b.n	8006908 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	3308      	adds	r3, #8
 80068c4:	623b      	str	r3, [r7, #32]
          break;
 80068c6:	e01f      	b.n	8006908 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	330c      	adds	r3, #12
 80068ce:	623b      	str	r3, [r7, #32]
          break;
 80068d0:	e01a      	b.n	8006908 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80068da:	2304      	movs	r3, #4
 80068dc:	623b      	str	r3, [r7, #32]
          break;
 80068de:	e013      	b.n	8006908 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d105      	bne.n	80068f4 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80068e8:	2308      	movs	r3, #8
 80068ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	611a      	str	r2, [r3, #16]
          break;
 80068f2:	e009      	b.n	8006908 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80068f4:	2308      	movs	r3, #8
 80068f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	615a      	str	r2, [r3, #20]
          break;
 80068fe:	e003      	b.n	8006908 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006900:	2300      	movs	r3, #0
 8006902:	623b      	str	r3, [r7, #32]
          break;
 8006904:	e000      	b.n	8006908 <HAL_GPIO_Init+0x140>
          break;
 8006906:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2bff      	cmp	r3, #255	; 0xff
 800690c:	d801      	bhi.n	8006912 <HAL_GPIO_Init+0x14a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	e001      	b.n	8006916 <HAL_GPIO_Init+0x14e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2bff      	cmp	r3, #255	; 0xff
 800691c:	d802      	bhi.n	8006924 <HAL_GPIO_Init+0x15c>
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	e002      	b.n	800692a <HAL_GPIO_Init+0x162>
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	3b08      	subs	r3, #8
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	210f      	movs	r1, #15
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	fa01 f303 	lsl.w	r3, r1, r3
 8006938:	43db      	mvns	r3, r3
 800693a:	401a      	ands	r2, r3
 800693c:	6a39      	ldr	r1, [r7, #32]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	fa01 f303 	lsl.w	r3, r1, r3
 8006944:	431a      	orrs	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 80c1 	beq.w	8006ada <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006958:	4b49      	ldr	r3, [pc, #292]	; (8006a80 <HAL_GPIO_Init+0x2b8>)
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	4a48      	ldr	r2, [pc, #288]	; (8006a80 <HAL_GPIO_Init+0x2b8>)
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	6193      	str	r3, [r2, #24]
 8006964:	4b46      	ldr	r3, [pc, #280]	; (8006a80 <HAL_GPIO_Init+0x2b8>)
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8006970:	4a44      	ldr	r2, [pc, #272]	; (8006a84 <HAL_GPIO_Init+0x2bc>)
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	089b      	lsrs	r3, r3, #2
 8006976:	3302      	adds	r3, #2
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	220f      	movs	r2, #15
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	43db      	mvns	r3, r3
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4013      	ands	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a3c      	ldr	r2, [pc, #240]	; (8006a88 <HAL_GPIO_Init+0x2c0>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d01f      	beq.n	80069dc <HAL_GPIO_Init+0x214>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a3b      	ldr	r2, [pc, #236]	; (8006a8c <HAL_GPIO_Init+0x2c4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d019      	beq.n	80069d8 <HAL_GPIO_Init+0x210>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a3a      	ldr	r2, [pc, #232]	; (8006a90 <HAL_GPIO_Init+0x2c8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d013      	beq.n	80069d4 <HAL_GPIO_Init+0x20c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a39      	ldr	r2, [pc, #228]	; (8006a94 <HAL_GPIO_Init+0x2cc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00d      	beq.n	80069d0 <HAL_GPIO_Init+0x208>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a38      	ldr	r2, [pc, #224]	; (8006a98 <HAL_GPIO_Init+0x2d0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d007      	beq.n	80069cc <HAL_GPIO_Init+0x204>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a37      	ldr	r2, [pc, #220]	; (8006a9c <HAL_GPIO_Init+0x2d4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d101      	bne.n	80069c8 <HAL_GPIO_Init+0x200>
 80069c4:	2305      	movs	r3, #5
 80069c6:	e00a      	b.n	80069de <HAL_GPIO_Init+0x216>
 80069c8:	2306      	movs	r3, #6
 80069ca:	e008      	b.n	80069de <HAL_GPIO_Init+0x216>
 80069cc:	2304      	movs	r3, #4
 80069ce:	e006      	b.n	80069de <HAL_GPIO_Init+0x216>
 80069d0:	2303      	movs	r3, #3
 80069d2:	e004      	b.n	80069de <HAL_GPIO_Init+0x216>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e002      	b.n	80069de <HAL_GPIO_Init+0x216>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <HAL_GPIO_Init+0x216>
 80069dc:	2300      	movs	r3, #0
 80069de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e0:	f002 0203 	and.w	r2, r2, #3
 80069e4:	0092      	lsls	r2, r2, #2
 80069e6:	4093      	lsls	r3, r2
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80069ee:	4925      	ldr	r1, [pc, #148]	; (8006a84 <HAL_GPIO_Init+0x2bc>)
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	089b      	lsrs	r3, r3, #2
 80069f4:	3302      	adds	r3, #2
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d006      	beq.n	8006a16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006a08:	4b25      	ldr	r3, [pc, #148]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	4924      	ldr	r1, [pc, #144]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	600b      	str	r3, [r1, #0]
 8006a14:	e006      	b.n	8006a24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006a16:	4b22      	ldr	r3, [pc, #136]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	4920      	ldr	r1, [pc, #128]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d006      	beq.n	8006a3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006a30:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	491a      	ldr	r1, [pc, #104]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	604b      	str	r3, [r1, #4]
 8006a3c:	e006      	b.n	8006a4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006a3e:	4b18      	ldr	r3, [pc, #96]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	43db      	mvns	r3, r3
 8006a46:	4916      	ldr	r1, [pc, #88]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d025      	beq.n	8006aa4 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006a58:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	4910      	ldr	r1, [pc, #64]	; (8006aa0 <HAL_GPIO_Init+0x2d8>)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	608b      	str	r3, [r1, #8]
 8006a64:	e025      	b.n	8006ab2 <HAL_GPIO_Init+0x2ea>
 8006a66:	bf00      	nop
 8006a68:	10320000 	.word	0x10320000
 8006a6c:	10310000 	.word	0x10310000
 8006a70:	10220000 	.word	0x10220000
 8006a74:	10210000 	.word	0x10210000
 8006a78:	10120000 	.word	0x10120000
 8006a7c:	10110000 	.word	0x10110000
 8006a80:	40021000 	.word	0x40021000
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40010800 	.word	0x40010800
 8006a8c:	40010c00 	.word	0x40010c00
 8006a90:	40011000 	.word	0x40011000
 8006a94:	40011400 	.word	0x40011400
 8006a98:	40011800 	.word	0x40011800
 8006a9c:	40011c00 	.word	0x40011c00
 8006aa0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006aa4:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <HAL_GPIO_Init+0x32c>)
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	4911      	ldr	r1, [pc, #68]	; (8006af4 <HAL_GPIO_Init+0x32c>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d006      	beq.n	8006acc <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006abe:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <HAL_GPIO_Init+0x32c>)
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	490c      	ldr	r1, [pc, #48]	; (8006af4 <HAL_GPIO_Init+0x32c>)
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60cb      	str	r3, [r1, #12]
 8006aca:	e006      	b.n	8006ada <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006acc:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <HAL_GPIO_Init+0x32c>)
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	4907      	ldr	r1, [pc, #28]	; (8006af4 <HAL_GPIO_Init+0x32c>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	3301      	adds	r3, #1
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	2b0f      	cmp	r3, #15
 8006ae4:	f67f ae82 	bls.w	80067ec <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	372c      	adds	r7, #44	; 0x2c
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr
 8006af4:	40010400 	.word	0x40010400

08006af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	887b      	ldrh	r3, [r7, #2]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
 8006b14:	e001      	b.n	8006b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr

08006b26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	807b      	strh	r3, [r7, #2]
 8006b32:	4613      	mov	r3, r2
 8006b34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b36:	787b      	ldrb	r3, [r7, #1]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b3c:	887a      	ldrh	r2, [r7, #2]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b42:	e003      	b.n	8006b4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b44:	887b      	ldrh	r3, [r7, #2]
 8006b46:	041a      	lsls	r2, r3, #16
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	611a      	str	r2, [r3, #16]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr
	...

08006b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b62:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d006      	beq.n	8006b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b6e:	4a05      	ldr	r2, [pc, #20]	; (8006b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f806 	bl	8006b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	40010400 	.word	0x40010400

08006b88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006ba0:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
}
 8006ba6:	bf00      	nop
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bc80      	pop	{r7}
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	420e0020 	.word	0x420e0020

08006bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8087 	beq.w	8006cdc <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006bce:	4b92      	ldr	r3, [pc, #584]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f003 030c 	and.w	r3, r3, #12
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d00c      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006bda:	4b8f      	ldr	r3, [pc, #572]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f003 030c 	and.w	r3, r3, #12
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d112      	bne.n	8006c0c <HAL_RCC_OscConfig+0x58>
 8006be6:	4b8c      	ldr	r3, [pc, #560]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf2:	d10b      	bne.n	8006c0c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf4:	4b88      	ldr	r3, [pc, #544]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d06c      	beq.n	8006cda <HAL_RCC_OscConfig+0x126>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d168      	bne.n	8006cda <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e22d      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c14:	d106      	bne.n	8006c24 <HAL_RCC_OscConfig+0x70>
 8006c16:	4b80      	ldr	r3, [pc, #512]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a7f      	ldr	r2, [pc, #508]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	e02e      	b.n	8006c82 <HAL_RCC_OscConfig+0xce>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10c      	bne.n	8006c46 <HAL_RCC_OscConfig+0x92>
 8006c2c:	4b7a      	ldr	r3, [pc, #488]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a79      	ldr	r2, [pc, #484]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	4b77      	ldr	r3, [pc, #476]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a76      	ldr	r2, [pc, #472]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	e01d      	b.n	8006c82 <HAL_RCC_OscConfig+0xce>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c4e:	d10c      	bne.n	8006c6a <HAL_RCC_OscConfig+0xb6>
 8006c50:	4b71      	ldr	r3, [pc, #452]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a70      	ldr	r2, [pc, #448]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	4b6e      	ldr	r3, [pc, #440]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a6d      	ldr	r2, [pc, #436]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	e00b      	b.n	8006c82 <HAL_RCC_OscConfig+0xce>
 8006c6a:	4b6b      	ldr	r3, [pc, #428]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a6a      	ldr	r2, [pc, #424]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	4b68      	ldr	r3, [pc, #416]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a67      	ldr	r2, [pc, #412]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c80:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d013      	beq.n	8006cb2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c8a:	f7ff fc65 	bl	8006558 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c92:	f7ff fc61 	bl	8006558 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b64      	cmp	r3, #100	; 0x64
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e1e1      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca4:	4b5c      	ldr	r3, [pc, #368]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0f0      	beq.n	8006c92 <HAL_RCC_OscConfig+0xde>
 8006cb0:	e014      	b.n	8006cdc <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb2:	f7ff fc51 	bl	8006558 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cba:	f7ff fc4d 	bl	8006558 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b64      	cmp	r3, #100	; 0x64
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e1cd      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ccc:	4b52      	ldr	r3, [pc, #328]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f0      	bne.n	8006cba <HAL_RCC_OscConfig+0x106>
 8006cd8:	e000      	b.n	8006cdc <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d063      	beq.n	8006db0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006ce8:	4b4b      	ldr	r3, [pc, #300]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f003 030c 	and.w	r3, r3, #12
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006cf4:	4b48      	ldr	r3, [pc, #288]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f003 030c 	and.w	r3, r3, #12
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d11c      	bne.n	8006d3a <HAL_RCC_OscConfig+0x186>
 8006d00:	4b45      	ldr	r3, [pc, #276]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d116      	bne.n	8006d3a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0c:	4b42      	ldr	r3, [pc, #264]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <HAL_RCC_OscConfig+0x170>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d001      	beq.n	8006d24 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e1a1      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d24:	4b3c      	ldr	r3, [pc, #240]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	4939      	ldr	r1, [pc, #228]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d38:	e03a      	b.n	8006db0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d020      	beq.n	8006d84 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d42:	4b36      	ldr	r3, [pc, #216]	; (8006e1c <HAL_RCC_OscConfig+0x268>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d48:	f7ff fc06 	bl	8006558 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d50:	f7ff fc02 	bl	8006558 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e182      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d62:	4b2d      	ldr	r3, [pc, #180]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0f0      	beq.n	8006d50 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6e:	4b2a      	ldr	r3, [pc, #168]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4926      	ldr	r1, [pc, #152]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	600b      	str	r3, [r1, #0]
 8006d82:	e015      	b.n	8006db0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d84:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <HAL_RCC_OscConfig+0x268>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d8a:	f7ff fbe5 	bl	8006558 <HAL_GetTick>
 8006d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d92:	f7ff fbe1 	bl	8006558 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e161      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006da4:	4b1c      	ldr	r3, [pc, #112]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f0      	bne.n	8006d92 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d039      	beq.n	8006e30 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d019      	beq.n	8006df8 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dc4:	4b16      	ldr	r3, [pc, #88]	; (8006e20 <HAL_RCC_OscConfig+0x26c>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dca:	f7ff fbc5 	bl	8006558 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd2:	f7ff fbc1 	bl	8006558 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e141      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006de4:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <HAL_RCC_OscConfig+0x264>)
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f0      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8006df0:	2001      	movs	r0, #1
 8006df2:	f000 fadf 	bl	80073b4 <RCC_Delay>
 8006df6:	e01b      	b.n	8006e30 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006df8:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <HAL_RCC_OscConfig+0x26c>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dfe:	f7ff fbab 	bl	8006558 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e04:	e00e      	b.n	8006e24 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e06:	f7ff fba7 	bl	8006558 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d907      	bls.n	8006e24 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e127      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	42420000 	.word	0x42420000
 8006e20:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e24:	4b92      	ldr	r3, [pc, #584]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1ea      	bne.n	8006e06 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 80a6 	beq.w	8006f8a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e42:	4b8b      	ldr	r3, [pc, #556]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10d      	bne.n	8006e6a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e4e:	4b88      	ldr	r3, [pc, #544]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	4a87      	ldr	r2, [pc, #540]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e58:	61d3      	str	r3, [r2, #28]
 8006e5a:	4b85      	ldr	r3, [pc, #532]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006e66:	2301      	movs	r3, #1
 8006e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e6a:	4b82      	ldr	r3, [pc, #520]	; (8007074 <HAL_RCC_OscConfig+0x4c0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d118      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e76:	4b7f      	ldr	r3, [pc, #508]	; (8007074 <HAL_RCC_OscConfig+0x4c0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a7e      	ldr	r2, [pc, #504]	; (8007074 <HAL_RCC_OscConfig+0x4c0>)
 8006e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e82:	f7ff fb69 	bl	8006558 <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e8a:	f7ff fb65 	bl	8006558 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b64      	cmp	r3, #100	; 0x64
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e0e5      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e9c:	4b75      	ldr	r3, [pc, #468]	; (8007074 <HAL_RCC_OscConfig+0x4c0>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0f0      	beq.n	8006e8a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d106      	bne.n	8006ebe <HAL_RCC_OscConfig+0x30a>
 8006eb0:	4b6f      	ldr	r3, [pc, #444]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	4a6e      	ldr	r2, [pc, #440]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6213      	str	r3, [r2, #32]
 8006ebc:	e02d      	b.n	8006f1a <HAL_RCC_OscConfig+0x366>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10c      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x32c>
 8006ec6:	4b6a      	ldr	r3, [pc, #424]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	4a69      	ldr	r2, [pc, #420]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006ecc:	f023 0301 	bic.w	r3, r3, #1
 8006ed0:	6213      	str	r3, [r2, #32]
 8006ed2:	4b67      	ldr	r3, [pc, #412]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	4a66      	ldr	r2, [pc, #408]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006ed8:	f023 0304 	bic.w	r3, r3, #4
 8006edc:	6213      	str	r3, [r2, #32]
 8006ede:	e01c      	b.n	8006f1a <HAL_RCC_OscConfig+0x366>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2b05      	cmp	r3, #5
 8006ee6:	d10c      	bne.n	8006f02 <HAL_RCC_OscConfig+0x34e>
 8006ee8:	4b61      	ldr	r3, [pc, #388]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	4a60      	ldr	r2, [pc, #384]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006eee:	f043 0304 	orr.w	r3, r3, #4
 8006ef2:	6213      	str	r3, [r2, #32]
 8006ef4:	4b5e      	ldr	r3, [pc, #376]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	4a5d      	ldr	r2, [pc, #372]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	6213      	str	r3, [r2, #32]
 8006f00:	e00b      	b.n	8006f1a <HAL_RCC_OscConfig+0x366>
 8006f02:	4b5b      	ldr	r3, [pc, #364]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	4a5a      	ldr	r2, [pc, #360]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	6213      	str	r3, [r2, #32]
 8006f0e:	4b58      	ldr	r3, [pc, #352]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	4a57      	ldr	r2, [pc, #348]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006f14:	f023 0304 	bic.w	r3, r3, #4
 8006f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d015      	beq.n	8006f4e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f22:	f7ff fb19 	bl	8006558 <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f28:	e00a      	b.n	8006f40 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2a:	f7ff fb15 	bl	8006558 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e093      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f40:	4b4b      	ldr	r3, [pc, #300]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0ee      	beq.n	8006f2a <HAL_RCC_OscConfig+0x376>
 8006f4c:	e014      	b.n	8006f78 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f4e:	f7ff fb03 	bl	8006558 <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f54:	e00a      	b.n	8006f6c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f56:	f7ff faff 	bl	8006558 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e07d      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f6c:	4b40      	ldr	r3, [pc, #256]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1ee      	bne.n	8006f56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d105      	bne.n	8006f8a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f7e:	4b3c      	ldr	r3, [pc, #240]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	4a3b      	ldr	r2, [pc, #236]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d069      	beq.n	8007066 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f92:	4b37      	ldr	r3, [pc, #220]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f003 030c 	and.w	r3, r3, #12
 8006f9a:	2b08      	cmp	r3, #8
 8006f9c:	d061      	beq.n	8007062 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d146      	bne.n	8007034 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa6:	4b34      	ldr	r3, [pc, #208]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fac:	f7ff fad4 	bl	8006558 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb4:	f7ff fad0 	bl	8006558 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e050      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fc6:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f0      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fda:	d108      	bne.n	8006fee <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006fdc:	4b24      	ldr	r3, [pc, #144]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4921      	ldr	r1, [pc, #132]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fee:	4b20      	ldr	r3, [pc, #128]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a19      	ldr	r1, [r3, #32]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	430b      	orrs	r3, r1
 8007000:	491b      	ldr	r1, [pc, #108]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8007002:	4313      	orrs	r3, r2
 8007004:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007006:	4b1c      	ldr	r3, [pc, #112]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8007008:	2201      	movs	r2, #1
 800700a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800700c:	f7ff faa4 	bl	8006558 <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007014:	f7ff faa0 	bl	8006558 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e020      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007026:	4b12      	ldr	r3, [pc, #72]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0f0      	beq.n	8007014 <HAL_RCC_OscConfig+0x460>
 8007032:	e018      	b.n	8007066 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007034:	4b10      	ldr	r3, [pc, #64]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703a:	f7ff fa8d 	bl	8006558 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007042:	f7ff fa89 	bl	8006558 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e009      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <HAL_RCC_OscConfig+0x4bc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f0      	bne.n	8007042 <HAL_RCC_OscConfig+0x48e>
 8007060:	e001      	b.n	8007066 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	40021000 	.word	0x40021000
 8007074:	40007000 	.word	0x40007000
 8007078:	42420060 	.word	0x42420060

0800707c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800708a:	4b7e      	ldr	r3, [pc, #504]	; (8007284 <HAL_RCC_ClockConfig+0x208>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d910      	bls.n	80070ba <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007098:	4b7a      	ldr	r3, [pc, #488]	; (8007284 <HAL_RCC_ClockConfig+0x208>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f023 0207 	bic.w	r2, r3, #7
 80070a0:	4978      	ldr	r1, [pc, #480]	; (8007284 <HAL_RCC_ClockConfig+0x208>)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80070a8:	4b76      	ldr	r3, [pc, #472]	; (8007284 <HAL_RCC_ClockConfig+0x208>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d001      	beq.n	80070ba <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e0e0      	b.n	800727c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d020      	beq.n	8007108 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070d2:	4b6d      	ldr	r3, [pc, #436]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	4a6c      	ldr	r2, [pc, #432]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 80070d8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070dc:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070ea:	4b67      	ldr	r3, [pc, #412]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	4a66      	ldr	r2, [pc, #408]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 80070f0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80070f4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070f6:	4b64      	ldr	r3, [pc, #400]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	4961      	ldr	r1, [pc, #388]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007104:	4313      	orrs	r3, r2
 8007106:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d06a      	beq.n	80071ea <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d107      	bne.n	800712c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800711c:	4b5a      	ldr	r3, [pc, #360]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d115      	bne.n	8007154 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e0a7      	b.n	800727c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d107      	bne.n	8007144 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007134:	4b54      	ldr	r3, [pc, #336]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d109      	bne.n	8007154 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e09b      	b.n	800727c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007144:	4b50      	ldr	r3, [pc, #320]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e093      	b.n	800727c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007154:	4b4c      	ldr	r3, [pc, #304]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f023 0203 	bic.w	r2, r3, #3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4949      	ldr	r1, [pc, #292]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007162:	4313      	orrs	r3, r2
 8007164:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007166:	f7ff f9f7 	bl	8006558 <HAL_GetTick>
 800716a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d112      	bne.n	800719a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007174:	e00a      	b.n	800718c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007176:	f7ff f9ef 	bl	8006558 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	f241 3288 	movw	r2, #5000	; 0x1388
 8007184:	4293      	cmp	r3, r2
 8007186:	d901      	bls.n	800718c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e077      	b.n	800727c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800718c:	4b3e      	ldr	r3, [pc, #248]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f003 030c 	and.w	r3, r3, #12
 8007194:	2b04      	cmp	r3, #4
 8007196:	d1ee      	bne.n	8007176 <HAL_RCC_ClockConfig+0xfa>
 8007198:	e027      	b.n	80071ea <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d11d      	bne.n	80071de <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a2:	e00a      	b.n	80071ba <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071a4:	f7ff f9d8 	bl	8006558 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e060      	b.n	800727c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071ba:	4b33      	ldr	r3, [pc, #204]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d1ee      	bne.n	80071a4 <HAL_RCC_ClockConfig+0x128>
 80071c6:	e010      	b.n	80071ea <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071c8:	f7ff f9c6 	bl	8006558 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e04e      	b.n	800727c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80071de:	4b2a      	ldr	r3, [pc, #168]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f003 030c 	and.w	r3, r3, #12
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1ee      	bne.n	80071c8 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80071ea:	4b26      	ldr	r3, [pc, #152]	; (8007284 <HAL_RCC_ClockConfig+0x208>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d210      	bcs.n	800721a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071f8:	4b22      	ldr	r3, [pc, #136]	; (8007284 <HAL_RCC_ClockConfig+0x208>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f023 0207 	bic.w	r2, r3, #7
 8007200:	4920      	ldr	r1, [pc, #128]	; (8007284 <HAL_RCC_ClockConfig+0x208>)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	4313      	orrs	r3, r2
 8007206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007208:	4b1e      	ldr	r3, [pc, #120]	; (8007284 <HAL_RCC_ClockConfig+0x208>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d001      	beq.n	800721a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e030      	b.n	800727c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	d008      	beq.n	8007238 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007226:	4b18      	ldr	r3, [pc, #96]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	4915      	ldr	r1, [pc, #84]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007234:	4313      	orrs	r3, r2
 8007236:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007244:	4b10      	ldr	r3, [pc, #64]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	490d      	ldr	r1, [pc, #52]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007254:	4313      	orrs	r3, r2
 8007256:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007258:	f000 f81c 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 800725c:	4602      	mov	r2, r0
 800725e:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <HAL_RCC_ClockConfig+0x20c>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	f003 030f 	and.w	r3, r3, #15
 8007268:	4908      	ldr	r1, [pc, #32]	; (800728c <HAL_RCC_ClockConfig+0x210>)
 800726a:	5ccb      	ldrb	r3, [r1, r3]
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
 8007270:	4a07      	ldr	r2, [pc, #28]	; (8007290 <HAL_RCC_ClockConfig+0x214>)
 8007272:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007274:	2000      	movs	r0, #0
 8007276:	f7ff f92d 	bl	80064d4 <HAL_InitTick>
  
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40022000 	.word	0x40022000
 8007288:	40021000 	.word	0x40021000
 800728c:	08012588 	.word	0x08012588
 8007290:	2000000c 	.word	0x2000000c

08007294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007294:	b490      	push	{r4, r7}
 8007296:	b08a      	sub	sp, #40	; 0x28
 8007298:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800729a:	4b29      	ldr	r3, [pc, #164]	; (8007340 <HAL_RCC_GetSysClockFreq+0xac>)
 800729c:	1d3c      	adds	r4, r7, #4
 800729e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80072a4:	f240 2301 	movw	r3, #513	; 0x201
 80072a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	61fb      	str	r3, [r7, #28]
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	2300      	movs	r3, #0
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80072be:	4b21      	ldr	r3, [pc, #132]	; (8007344 <HAL_RCC_GetSysClockFreq+0xb0>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f003 030c 	and.w	r3, r3, #12
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d002      	beq.n	80072d4 <HAL_RCC_GetSysClockFreq+0x40>
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d003      	beq.n	80072da <HAL_RCC_GetSysClockFreq+0x46>
 80072d2:	e02b      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072d4:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80072d6:	623b      	str	r3, [r7, #32]
      break;
 80072d8:	e02b      	b.n	8007332 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	0c9b      	lsrs	r3, r3, #18
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	3328      	adds	r3, #40	; 0x28
 80072e4:	443b      	add	r3, r7
 80072e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80072ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d012      	beq.n	800731c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072f6:	4b13      	ldr	r3, [pc, #76]	; (8007344 <HAL_RCC_GetSysClockFreq+0xb0>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	0c5b      	lsrs	r3, r3, #17
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	3328      	adds	r3, #40	; 0x28
 8007302:	443b      	add	r3, r7
 8007304:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007308:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	4a0e      	ldr	r2, [pc, #56]	; (8007348 <HAL_RCC_GetSysClockFreq+0xb4>)
 800730e:	fb03 f202 	mul.w	r2, r3, r2
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
 800731a:	e004      	b.n	8007326 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	4a0b      	ldr	r2, [pc, #44]	; (800734c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007320:	fb02 f303 	mul.w	r3, r2, r3
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	623b      	str	r3, [r7, #32]
      break;
 800732a:	e002      	b.n	8007332 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_RCC_GetSysClockFreq+0xb4>)
 800732e:	623b      	str	r3, [r7, #32]
      break;
 8007330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007332:	6a3b      	ldr	r3, [r7, #32]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3728      	adds	r7, #40	; 0x28
 8007338:	46bd      	mov	sp, r7
 800733a:	bc90      	pop	{r4, r7}
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	08011e1c 	.word	0x08011e1c
 8007344:	40021000 	.word	0x40021000
 8007348:	007a1200 	.word	0x007a1200
 800734c:	003d0900 	.word	0x003d0900

08007350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <HAL_RCC_GetHCLKFreq+0x10>)
 8007356:	681b      	ldr	r3, [r3, #0]
}
 8007358:	4618      	mov	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	bc80      	pop	{r7}
 800735e:	4770      	bx	lr
 8007360:	2000000c 	.word	0x2000000c

08007364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007368:	f7ff fff2 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 800736c:	4602      	mov	r2, r0
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	0a1b      	lsrs	r3, r3, #8
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	4903      	ldr	r1, [pc, #12]	; (8007388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800737a:	5ccb      	ldrb	r3, [r1, r3]
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40021000 	.word	0x40021000
 8007388:	08012598 	.word	0x08012598

0800738c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007390:	f7ff ffde 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 8007394:	4602      	mov	r2, r0
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	0adb      	lsrs	r3, r3, #11
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	4903      	ldr	r1, [pc, #12]	; (80073b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073a2:	5ccb      	ldrb	r3, [r1, r3]
 80073a4:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80073a8:	4618      	mov	r0, r3
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40021000 	.word	0x40021000
 80073b0:	08012598 	.word	0x08012598

080073b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073bc:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <RCC_Delay+0x38>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a0b      	ldr	r2, [pc, #44]	; (80073f0 <RCC_Delay+0x3c>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	0a5b      	lsrs	r3, r3, #9
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	fb02 f303 	mul.w	r3, r2, r3
 80073ce:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80073d0:	bf00      	nop
}
 80073d2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	1e5a      	subs	r2, r3, #1
 80073d8:	60fa      	str	r2, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f8      	bne.n	80073d0 <RCC_Delay+0x1c>
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	2000000c 	.word	0x2000000c
 80073f0:	10624dd3 	.word	0x10624dd3

080073f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d07d      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007410:	2300      	movs	r3, #0
 8007412:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007414:	4b4f      	ldr	r3, [pc, #316]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007420:	4b4c      	ldr	r3, [pc, #304]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	4a4b      	ldr	r2, [pc, #300]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800742a:	61d3      	str	r3, [r2, #28]
 800742c:	4b49      	ldr	r3, [pc, #292]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007438:	2301      	movs	r3, #1
 800743a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800743c:	4b46      	ldr	r3, [pc, #280]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d118      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007448:	4b43      	ldr	r3, [pc, #268]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a42      	ldr	r2, [pc, #264]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800744e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007452:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007454:	f7ff f880 	bl	8006558 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745a:	e008      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800745c:	f7ff f87c 	bl	8006558 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b64      	cmp	r3, #100	; 0x64
 8007468:	d901      	bls.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e06d      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800746e:	4b3a      	ldr	r3, [pc, #232]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0f0      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800747a:	4b36      	ldr	r3, [pc, #216]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007482:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d02e      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	429a      	cmp	r2, r3
 8007496:	d027      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007498:	4b2e      	ldr	r3, [pc, #184]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074a2:	4b2e      	ldr	r3, [pc, #184]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074a4:	2201      	movs	r2, #1
 80074a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074a8:	4b2c      	ldr	r3, [pc, #176]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80074ae:	4a29      	ldr	r2, [pc, #164]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d014      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074be:	f7ff f84b 	bl	8006558 <HAL_GetTick>
 80074c2:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074c4:	e00a      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074c6:	f7ff f847 	bl	8006558 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d901      	bls.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e036      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074dc:	4b1d      	ldr	r3, [pc, #116]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0ee      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4917      	ldr	r1, [pc, #92]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d105      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007500:	4b14      	ldr	r3, [pc, #80]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	4a13      	ldr	r2, [pc, #76]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800750a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007518:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	490b      	ldr	r1, [pc, #44]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007526:	4313      	orrs	r3, r2
 8007528:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0310 	and.w	r3, r3, #16
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007536:	4b07      	ldr	r3, [pc, #28]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	4904      	ldr	r1, [pc, #16]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007544:	4313      	orrs	r3, r2
 8007546:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	40021000 	.word	0x40021000
 8007558:	40007000 	.word	0x40007000
 800755c:	42420440 	.word	0x42420440

08007560 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007560:	b590      	push	{r4, r7, lr}
 8007562:	b08d      	sub	sp, #52	; 0x34
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007568:	4b6b      	ldr	r3, [pc, #428]	; (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800756a:	f107 040c 	add.w	r4, r7, #12
 800756e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007574:	f240 2301 	movw	r3, #513	; 0x201
 8007578:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
 800757e:	2300      	movs	r3, #0
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007582:	2300      	movs	r3, #0
 8007584:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
 800758a:	2300      	movs	r3, #0
 800758c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3b01      	subs	r3, #1
 8007592:	2b0f      	cmp	r3, #15
 8007594:	f200 80b7 	bhi.w	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8007598:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800759a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759e:	bf00      	nop
 80075a0:	0800767f 	.word	0x0800767f
 80075a4:	080076eb 	.word	0x080076eb
 80075a8:	08007707 	.word	0x08007707
 80075ac:	0800766f 	.word	0x0800766f
 80075b0:	08007707 	.word	0x08007707
 80075b4:	08007707 	.word	0x08007707
 80075b8:	08007707 	.word	0x08007707
 80075bc:	08007677 	.word	0x08007677
 80075c0:	08007707 	.word	0x08007707
 80075c4:	08007707 	.word	0x08007707
 80075c8:	08007707 	.word	0x08007707
 80075cc:	08007707 	.word	0x08007707
 80075d0:	08007707 	.word	0x08007707
 80075d4:	08007707 	.word	0x08007707
 80075d8:	08007707 	.word	0x08007707
 80075dc:	080075e1 	.word	0x080075e1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80075e0:	4b4e      	ldr	r3, [pc, #312]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80075e6:	4b4d      	ldr	r3, [pc, #308]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 808b 	beq.w	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	0c9b      	lsrs	r3, r3, #18
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	3330      	adds	r3, #48	; 0x30
 80075fe:	443b      	add	r3, r7
 8007600:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007604:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d017      	beq.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007610:	4b42      	ldr	r3, [pc, #264]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	0c5b      	lsrs	r3, r3, #17
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	3330      	adds	r3, #48	; 0x30
 800761c:	443b      	add	r3, r7
 800761e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00d      	beq.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800762e:	4a3c      	ldr	r2, [pc, #240]	; (8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	fbb2 f2f3 	udiv	r2, r2, r3
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	fb02 f303 	mul.w	r3, r2, r3
 800763c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800763e:	e004      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	4a38      	ldr	r2, [pc, #224]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8007644:	fb02 f303 	mul.w	r3, r2, r3
 8007648:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800764a:	4b34      	ldr	r3, [pc, #208]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007656:	d102      	bne.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800765c:	e055      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          frequency = (pllclk * 2) / 3;
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	4a31      	ldr	r2, [pc, #196]	; (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	085b      	lsrs	r3, r3, #1
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800766c:	e04d      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800766e:	f7ff fe11 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8007672:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007674:	e04a      	b.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007676:	f7ff fe0d 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 800767a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800767c:	e046      	b.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800767e:	4b27      	ldr	r3, [pc, #156]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800768a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800768e:	d108      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 800769a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769e:	62bb      	str	r3, [r7, #40]	; 0x28
 80076a0:	e022      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ac:	d109      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80076ae:	4b1b      	ldr	r3, [pc, #108]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80076ba:	f649 4340 	movw	r3, #40000	; 0x9c40
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28
 80076c0:	e012      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076cc:	d109      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = HSE_VALUE / 128U;
 80076da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80076de:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e0:	e002      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80076e6:	e011      	b.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80076e8:	e010      	b.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80076ea:	f7ff fe4f 	bl	800738c <HAL_RCC_GetPCLK2Freq>
 80076ee:	4602      	mov	r2, r0
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	0b9b      	lsrs	r3, r3, #14
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	3301      	adds	r3, #1
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007704:	e002      	b.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  default: 
    {
      break;
 8007706:	bf00      	nop
 8007708:	e000      	b.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 800770a:	bf00      	nop
    }
  }
  return(frequency);
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800770e:	4618      	mov	r0, r3
 8007710:	3734      	adds	r7, #52	; 0x34
 8007712:	46bd      	mov	sp, r7
 8007714:	bd90      	pop	{r4, r7, pc}
 8007716:	bf00      	nop
 8007718:	08011e2c 	.word	0x08011e2c
 800771c:	40021000 	.word	0x40021000
 8007720:	007a1200 	.word	0x007a1200
 8007724:	003d0900 	.word	0x003d0900
 8007728:	aaaaaaab 	.word	0xaaaaaaab

0800772c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e084      	b.n	800784c <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7c5b      	ldrb	r3, [r3, #17]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d105      	bne.n	8007758 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fd fd38 	bl	80051c8 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f87a 	bl	8007858 <HAL_RTC_WaitForSynchro>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2204      	movs	r2, #4
 800776e:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e06b      	b.n	800784c <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f89c 	bl	80078b2 <RTC_EnterInitMode>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2204      	movs	r2, #4
 8007784:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e060      	b.n	800784c <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0207 	bic.w	r2, r2, #7
 8007798:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80077a2:	4b2c      	ldr	r3, [pc, #176]	; (8007854 <HAL_RTC_Init+0x128>)
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	4a2b      	ldr	r2, [pc, #172]	; (8007854 <HAL_RTC_Init+0x128>)
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80077ae:	4b29      	ldr	r3, [pc, #164]	; (8007854 <HAL_RTC_Init+0x128>)
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	4926      	ldr	r1, [pc, #152]	; (8007854 <HAL_RTC_Init+0x128>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c8:	d003      	beq.n	80077d2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	e00e      	b.n	80077f0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80077d2:	2001      	movs	r0, #1
 80077d4:	f7ff fec4 	bl	8007560 <HAL_RCCEx_GetPeriphCLKFreq>
 80077d8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2204      	movs	r2, #4
 80077e4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e030      	b.n	800784c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f023 010f 	bic.w	r1, r3, #15
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	0c1a      	lsrs	r2, r3, #16
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	041b      	lsls	r3, r3, #16
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	b291      	uxth	r1, r2
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	430b      	orrs	r3, r1
 800781a:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f870 	bl	8007902 <RTC_ExitInitMode>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2204      	movs	r2, #4
 800782c:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e00c      	b.n	800784c <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 800784a:	2300      	movs	r3, #0
  }
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40006c00 	.word	0x40006c00

08007858 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e01d      	b.n	80078aa <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0208 	bic.w	r2, r2, #8
 800787c:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800787e:	f7fe fe6b 	bl	8006558 <HAL_GetTick>
 8007882:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007884:	e009      	b.n	800789a <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8007886:	f7fe fe67 	bl	8006558 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007894:	d901      	bls.n	800789a <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e007      	b.n	80078aa <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d0ee      	beq.n	8007886 <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 80078be:	f7fe fe4b 	bl	8006558 <HAL_GetTick>
 80078c2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80078c4:	e009      	b.n	80078da <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80078c6:	f7fe fe47 	bl	8006558 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078d4:	d901      	bls.n	80078da <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e00f      	b.n	80078fa <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d0ee      	beq.n	80078c6 <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0210 	orr.w	r2, r2, #16
 80078f6:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0210 	bic.w	r2, r2, #16
 800791c:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800791e:	f7fe fe1b 	bl	8006558 <HAL_GetTick>
 8007922:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007924:	e009      	b.n	800793a <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007926:	f7fe fe17 	bl	8006558 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007934:	d901      	bls.n	800793a <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e007      	b.n	800794a <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0ee      	beq.n	8007926 <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <HAL_RTCEx_BKUPWrite+0x30>)
 8007966:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4413      	add	r3, r2
 8007970:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	b292      	uxth	r2, r2
 8007978:	601a      	str	r2, [r3, #0]
}
 800797a:	bf00      	nop
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr
 8007984:	40006c00 	.word	0x40006c00

08007988 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 800799a:	4b08      	ldr	r3, [pc, #32]	; (80079bc <HAL_RTCEx_BKUPRead+0x34>)
 800799c:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80079b0:	68bb      	ldr	r3, [r7, #8]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr
 80079bc:	40006c00 	.word	0x40006c00

080079c0 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e034      	b.n	8007a40 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f7fd fd3c 	bl	8005468 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3308      	adds	r3, #8
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f001 facc 	bl	8008f98 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	f001 fb44 	bl	8009098 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6858      	ldr	r0, [r3, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	f001 fb6f 	bl	8009100 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	6892      	ldr	r2, [r2, #8]
 8007a2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	6892      	ldr	r2, [r2, #8]
 8007a36:	f041 0101 	orr.w	r1, r1, #1
 8007a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e01d      	b.n	8007a96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d106      	bne.n	8007a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fd fbce 	bl	8005210 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f000 fbe0 	bl	800824c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f042 0201 	orr.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bc80      	pop	{r7}
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6a1a      	ldr	r2, [r3, #32]
 8007ae8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007aec:	4013      	ands	r3, r2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10f      	bne.n	8007b12 <HAL_TIM_Base_Stop+0x40>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6a1a      	ldr	r2, [r3, #32]
 8007af8:	f240 4344 	movw	r3, #1092	; 0x444
 8007afc:	4013      	ands	r3, r2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <HAL_TIM_Base_Stop+0x40>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0201 	bic.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f042 0201 	orr.w	r2, r2, #1
 8007b3c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr

08007b5a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0201 	bic.w	r2, r2, #1
 8007b70:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6a1a      	ldr	r2, [r3, #32]
 8007b78:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10f      	bne.n	8007ba2 <HAL_TIM_Base_Stop_IT+0x48>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6a1a      	ldr	r2, [r3, #32]
 8007b88:	f240 4344 	movw	r3, #1092	; 0x444
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d107      	bne.n	8007ba2 <HAL_TIM_Base_Stop_IT+0x48>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0201 	bic.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr

08007bae <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e01d      	b.n	8007bfc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d106      	bne.n	8007bda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f815 	bl	8007c04 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f000 fb2d 	bl	800824c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr
	...

08007c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2201      	movs	r2, #1
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fdf5 	bl	800881a <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a10      	ldr	r2, [pc, #64]	; (8007c78 <HAL_TIM_PWM_Start+0x60>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_TIM_PWM_Start+0x2c>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a0f      	ldr	r2, [pc, #60]	; (8007c7c <HAL_TIM_PWM_Start+0x64>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d101      	bne.n	8007c48 <HAL_TIM_PWM_Start+0x30>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e000      	b.n	8007c4a <HAL_TIM_PWM_Start+0x32>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d007      	beq.n	8007c5e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0201 	orr.w	r2, r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40012c00 	.word	0x40012c00
 8007c7c:	40013400 	.word	0x40013400

08007c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d122      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d11b      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0202 	mvn.w	r2, #2
 8007cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 faa7 	bl	8008216 <HAL_TIM_IC_CaptureCallback>
 8007cc8:	e005      	b.n	8007cd6 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa9a 	bl	8008204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 faa9 	bl	8008228 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d122      	bne.n	8007d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d11b      	bne.n	8007d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0204 	mvn.w	r2, #4
 8007d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa7d 	bl	8008216 <HAL_TIM_IC_CaptureCallback>
 8007d1c:	e005      	b.n	8007d2a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa70 	bl	8008204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fa7f 	bl	8008228 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d122      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f003 0308 	and.w	r3, r3, #8
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d11b      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0208 	mvn.w	r2, #8
 8007d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2204      	movs	r2, #4
 8007d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa53 	bl	8008216 <HAL_TIM_IC_CaptureCallback>
 8007d70:	e005      	b.n	8007d7e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa46 	bl	8008204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fa55 	bl	8008228 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d122      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b10      	cmp	r3, #16
 8007d9e:	d11b      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0210 	mvn.w	r2, #16
 8007da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2208      	movs	r2, #8
 8007dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa29 	bl	8008216 <HAL_TIM_IC_CaptureCallback>
 8007dc4:	e005      	b.n	8007dd2 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa1c 	bl	8008204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fa2b 	bl	8008228 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d10e      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d107      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f06f 0201 	mvn.w	r2, #1
 8007dfc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f9f7 	bl	80081f2 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0e:	2b80      	cmp	r3, #128	; 0x80
 8007e10:	d10e      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1c:	2b80      	cmp	r3, #128	; 0x80
 8007e1e:	d107      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fdbc 	bl	80089a8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3a:	2b40      	cmp	r3, #64	; 0x40
 8007e3c:	d10e      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d107      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e54:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f9ef 	bl	800823a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d10e      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d107      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0220 	mvn.w	r2, #32
 8007e80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fd87 	bl	8008996 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e0b4      	b.n	8008014 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b0c      	cmp	r3, #12
 8007ebe:	f200 809f 	bhi.w	8008000 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007ec2:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007efd 	.word	0x08007efd
 8007ecc:	08008001 	.word	0x08008001
 8007ed0:	08008001 	.word	0x08008001
 8007ed4:	08008001 	.word	0x08008001
 8007ed8:	08007f3d 	.word	0x08007f3d
 8007edc:	08008001 	.word	0x08008001
 8007ee0:	08008001 	.word	0x08008001
 8007ee4:	08008001 	.word	0x08008001
 8007ee8:	08007f7f 	.word	0x08007f7f
 8007eec:	08008001 	.word	0x08008001
 8007ef0:	08008001 	.word	0x08008001
 8007ef4:	08008001 	.word	0x08008001
 8007ef8:	08007fbf 	.word	0x08007fbf
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fa20 	bl	8008348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0208 	orr.w	r2, r2, #8
 8007f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	699a      	ldr	r2, [r3, #24]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0204 	bic.w	r2, r2, #4
 8007f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6999      	ldr	r1, [r3, #24]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	691a      	ldr	r2, [r3, #16]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	619a      	str	r2, [r3, #24]
    }
    break;
 8007f3a:	e062      	b.n	8008002 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68b9      	ldr	r1, [r7, #8]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fa76 	bl	8008434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699a      	ldr	r2, [r3, #24]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6999      	ldr	r1, [r3, #24]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	021a      	lsls	r2, r3, #8
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	619a      	str	r2, [r3, #24]
    }
    break;
 8007f7c:	e041      	b.n	8008002 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 facf 	bl	8008528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69da      	ldr	r2, [r3, #28]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0208 	orr.w	r2, r2, #8
 8007f98:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69da      	ldr	r2, [r3, #28]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0204 	bic.w	r2, r2, #4
 8007fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69d9      	ldr	r1, [r3, #28]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	61da      	str	r2, [r3, #28]
    }
    break;
 8007fbc:	e021      	b.n	8008002 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fb29 	bl	800861c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69da      	ldr	r2, [r3, #28]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fd8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69d9      	ldr	r1, [r3, #28]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	021a      	lsls	r2, r3, #8
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	61da      	str	r2, [r3, #28]
    }
    break;
 8007ffe:	e000      	b.n	8008002 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8008000:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_TIM_ConfigClockSource+0x1c>
 8008034:	2302      	movs	r3, #2
 8008036:	e0d8      	b.n	80081ea <HAL_TIM_ConfigClockSource+0x1ce>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800805e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008070:	d052      	beq.n	8008118 <HAL_TIM_ConfigClockSource+0xfc>
 8008072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008076:	f200 80ae 	bhi.w	80081d6 <HAL_TIM_ConfigClockSource+0x1ba>
 800807a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807e:	d027      	beq.n	80080d0 <HAL_TIM_ConfigClockSource+0xb4>
 8008080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008084:	f200 80a7 	bhi.w	80081d6 <HAL_TIM_ConfigClockSource+0x1ba>
 8008088:	2b70      	cmp	r3, #112	; 0x70
 800808a:	d02a      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0xc6>
 800808c:	2b70      	cmp	r3, #112	; 0x70
 800808e:	f200 80a2 	bhi.w	80081d6 <HAL_TIM_ConfigClockSource+0x1ba>
 8008092:	2b60      	cmp	r3, #96	; 0x60
 8008094:	d063      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x142>
 8008096:	2b60      	cmp	r3, #96	; 0x60
 8008098:	f200 809d 	bhi.w	80081d6 <HAL_TIM_ConfigClockSource+0x1ba>
 800809c:	2b50      	cmp	r3, #80	; 0x50
 800809e:	d04e      	beq.n	800813e <HAL_TIM_ConfigClockSource+0x122>
 80080a0:	2b50      	cmp	r3, #80	; 0x50
 80080a2:	f200 8098 	bhi.w	80081d6 <HAL_TIM_ConfigClockSource+0x1ba>
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d069      	beq.n	800817e <HAL_TIM_ConfigClockSource+0x162>
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	f200 8093 	bhi.w	80081d6 <HAL_TIM_ConfigClockSource+0x1ba>
 80080b0:	2b30      	cmp	r3, #48	; 0x30
 80080b2:	f000 8089 	beq.w	80081c8 <HAL_TIM_ConfigClockSource+0x1ac>
 80080b6:	2b30      	cmp	r3, #48	; 0x30
 80080b8:	f200 808d 	bhi.w	80081d6 <HAL_TIM_ConfigClockSource+0x1ba>
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d07c      	beq.n	80081ba <HAL_TIM_ConfigClockSource+0x19e>
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	f200 8088 	bhi.w	80081d6 <HAL_TIM_ConfigClockSource+0x1ba>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d069      	beq.n	800819e <HAL_TIM_ConfigClockSource+0x182>
 80080ca:	2b10      	cmp	r3, #16
 80080cc:	d06e      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80080ce:	e082      	b.n	80081d6 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0207 	bic.w	r2, r2, #7
 80080de:	609a      	str	r2, [r3, #8]
    break;
 80080e0:	e07a      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6899      	ldr	r1, [r3, #8]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f000 fb71 	bl	80087d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008104:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800810c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	609a      	str	r2, [r3, #8]
    break;
 8008116:	e05f      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	6899      	ldr	r1, [r3, #8]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f000 fb56 	bl	80087d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800813a:	609a      	str	r2, [r3, #8]
    break;
 800813c:	e04c      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6818      	ldr	r0, [r3, #0]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	6859      	ldr	r1, [r3, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	461a      	mov	r2, r3
 800814c:	f000 fac0 	bl	80086d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2150      	movs	r1, #80	; 0x50
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fb1f 	bl	800879a <TIM_ITRx_SetConfig>
    break;
 800815c:	e03c      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6859      	ldr	r1, [r3, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	461a      	mov	r2, r3
 800816c:	f000 fae2 	bl	8008734 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2160      	movs	r1, #96	; 0x60
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fb0f 	bl	800879a <TIM_ITRx_SetConfig>
    break;
 800817c:	e02c      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	6859      	ldr	r1, [r3, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	461a      	mov	r2, r3
 800818c:	f000 faa0 	bl	80086d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2140      	movs	r1, #64	; 0x40
 8008196:	4618      	mov	r0, r3
 8008198:	f000 faff 	bl	800879a <TIM_ITRx_SetConfig>
    break;
 800819c:	e01c      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2100      	movs	r1, #0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 faf8 	bl	800879a <TIM_ITRx_SetConfig>
    break;
 80081aa:	e015      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2110      	movs	r1, #16
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 faf1 	bl	800879a <TIM_ITRx_SetConfig>
    break;
 80081b8:	e00e      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2120      	movs	r1, #32
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 faea 	bl	800879a <TIM_ITRx_SetConfig>
    break;
 80081c6:	e007      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2130      	movs	r1, #48	; 0x30
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fae3 	bl	800879a <TIM_ITRx_SetConfig>
    break;
 80081d4:	e000      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 80081d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr

08008204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr

08008216 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800821e:	bf00      	nop
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	bc80      	pop	{r7}
 8008226:	4770      	bx	lr

08008228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr

0800823a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr

0800824c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a34      	ldr	r2, [pc, #208]	; (8008334 <TIM_Base_SetConfig+0xe8>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d013      	beq.n	8008290 <TIM_Base_SetConfig+0x44>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a33      	ldr	r2, [pc, #204]	; (8008338 <TIM_Base_SetConfig+0xec>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00f      	beq.n	8008290 <TIM_Base_SetConfig+0x44>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008276:	d00b      	beq.n	8008290 <TIM_Base_SetConfig+0x44>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a30      	ldr	r2, [pc, #192]	; (800833c <TIM_Base_SetConfig+0xf0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d007      	beq.n	8008290 <TIM_Base_SetConfig+0x44>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a2f      	ldr	r2, [pc, #188]	; (8008340 <TIM_Base_SetConfig+0xf4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_Base_SetConfig+0x44>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a2e      	ldr	r2, [pc, #184]	; (8008344 <TIM_Base_SetConfig+0xf8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d108      	bne.n	80082a2 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a23      	ldr	r2, [pc, #140]	; (8008334 <TIM_Base_SetConfig+0xe8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <TIM_Base_SetConfig+0x86>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a22      	ldr	r2, [pc, #136]	; (8008338 <TIM_Base_SetConfig+0xec>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00f      	beq.n	80082d2 <TIM_Base_SetConfig+0x86>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b8:	d00b      	beq.n	80082d2 <TIM_Base_SetConfig+0x86>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a1f      	ldr	r2, [pc, #124]	; (800833c <TIM_Base_SetConfig+0xf0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d007      	beq.n	80082d2 <TIM_Base_SetConfig+0x86>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <TIM_Base_SetConfig+0xf4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d003      	beq.n	80082d2 <TIM_Base_SetConfig+0x86>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <TIM_Base_SetConfig+0xf8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d108      	bne.n	80082e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ea:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a09      	ldr	r2, [pc, #36]	; (8008334 <TIM_Base_SetConfig+0xe8>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d003      	beq.n	800831c <TIM_Base_SetConfig+0xd0>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a08      	ldr	r2, [pc, #32]	; (8008338 <TIM_Base_SetConfig+0xec>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d103      	bne.n	8008324 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	615a      	str	r2, [r3, #20]
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr
 8008334:	40012c00 	.word	0x40012c00
 8008338:	40013400 	.word	0x40013400
 800833c:	40000400 	.word	0x40000400
 8008340:	40000800 	.word	0x40000800
 8008344:	40000c00 	.word	0x40000c00

08008348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	f023 0201 	bic.w	r2, r3, #1
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f023 0302 	bic.w	r3, r3, #2
 800839c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a20      	ldr	r2, [pc, #128]	; (800842c <TIM_OC1_SetConfig+0xe4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d003      	beq.n	80083b8 <TIM_OC1_SetConfig+0x70>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a1f      	ldr	r2, [pc, #124]	; (8008430 <TIM_OC1_SetConfig+0xe8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d10c      	bne.n	80083d2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f023 0308 	bic.w	r3, r3, #8
 80083be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f023 0304 	bic.w	r3, r3, #4
 80083d0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a15      	ldr	r2, [pc, #84]	; (800842c <TIM_OC1_SetConfig+0xe4>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d003      	beq.n	80083e2 <TIM_OC1_SetConfig+0x9a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a14      	ldr	r2, [pc, #80]	; (8008430 <TIM_OC1_SetConfig+0xe8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d111      	bne.n	8008406 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	4313      	orrs	r3, r2
 8008404:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	621a      	str	r2, [r3, #32]
}
 8008420:	bf00      	nop
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40012c00 	.word	0x40012c00
 8008430:	40013400 	.word	0x40013400

08008434 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	f023 0210 	bic.w	r2, r3, #16
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f023 0320 	bic.w	r3, r3, #32
 800848a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a21      	ldr	r2, [pc, #132]	; (8008520 <TIM_OC2_SetConfig+0xec>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_OC2_SetConfig+0x74>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a20      	ldr	r2, [pc, #128]	; (8008524 <TIM_OC2_SetConfig+0xf0>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d10d      	bne.n	80084c4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c2:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a16      	ldr	r2, [pc, #88]	; (8008520 <TIM_OC2_SetConfig+0xec>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d003      	beq.n	80084d4 <TIM_OC2_SetConfig+0xa0>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a15      	ldr	r2, [pc, #84]	; (8008524 <TIM_OC2_SetConfig+0xf0>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d113      	bne.n	80084fc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	621a      	str	r2, [r3, #32]
}
 8008516:	bf00      	nop
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr
 8008520:	40012c00 	.word	0x40012c00
 8008524:	40013400 	.word	0x40013400

08008528 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0303 	bic.w	r3, r3, #3
 800856a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800857c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	021b      	lsls	r3, r3, #8
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a21      	ldr	r2, [pc, #132]	; (8008614 <TIM_OC3_SetConfig+0xec>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d003      	beq.n	800859a <TIM_OC3_SetConfig+0x72>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a20      	ldr	r2, [pc, #128]	; (8008618 <TIM_OC3_SetConfig+0xf0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d10d      	bne.n	80085b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085b4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a16      	ldr	r2, [pc, #88]	; (8008614 <TIM_OC3_SetConfig+0xec>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d003      	beq.n	80085c6 <TIM_OC3_SetConfig+0x9e>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a15      	ldr	r2, [pc, #84]	; (8008618 <TIM_OC3_SetConfig+0xf0>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d113      	bne.n	80085ee <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	4313      	orrs	r3, r2
 80085e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	621a      	str	r2, [r3, #32]
}
 8008608:	bf00      	nop
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	bc80      	pop	{r7}
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40012c00 	.word	0x40012c00
 8008618:	40013400 	.word	0x40013400

0800861c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008656:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800865e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	021b      	lsls	r3, r3, #8
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008672:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	031b      	lsls	r3, r3, #12
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4313      	orrs	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a11      	ldr	r2, [pc, #68]	; (80086c8 <TIM_OC4_SetConfig+0xac>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d003      	beq.n	8008690 <TIM_OC4_SetConfig+0x74>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a10      	ldr	r2, [pc, #64]	; (80086cc <TIM_OC4_SetConfig+0xb0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d109      	bne.n	80086a4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	019b      	lsls	r3, r3, #6
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	621a      	str	r2, [r3, #32]
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr
 80086c8:	40012c00 	.word	0x40012c00
 80086cc:	40013400 	.word	0x40013400

080086d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f023 0201 	bic.w	r2, r3, #1
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008702:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f023 030a 	bic.w	r3, r3, #10
 8008714:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	4313      	orrs	r3, r2
 800871c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	621a      	str	r2, [r3, #32]
}
 800872a:	bf00      	nop
 800872c:	371c      	adds	r7, #28
 800872e:	46bd      	mov	sp, r7
 8008730:	bc80      	pop	{r7}
 8008732:	4770      	bx	lr

08008734 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	f023 0210 	bic.w	r2, r3, #16
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008766:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	031b      	lsls	r3, r3, #12
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	4313      	orrs	r3, r2
 8008770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	621a      	str	r2, [r3, #32]
}
 8008790:	bf00      	nop
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr

0800879a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800879a:	b480      	push	{r7}
 800879c:	b085      	sub	sp, #20
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b6:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80087b8:	887b      	ldrh	r3, [r7, #2]
 80087ba:	f043 0307 	orr.w	r3, r3, #7
 80087be:	b29b      	uxth	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	609a      	str	r2, [r3, #8]
}
 80087ce:	bf00      	nop
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr

080087d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	021a      	lsls	r2, r3, #8
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	431a      	orrs	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4313      	orrs	r3, r2
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	609a      	str	r2, [r3, #8]
}
 8008810:	bf00      	nop
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr

0800881a <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800881a:	b480      	push	{r7}
 800881c:	b087      	sub	sp, #28
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800882a:	2201      	movs	r2, #1
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	fa02 f303 	lsl.w	r3, r2, r3
 8008832:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a1a      	ldr	r2, [r3, #32]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	43db      	mvns	r3, r3
 800883c:	401a      	ands	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a1a      	ldr	r2, [r3, #32]
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	fa01 f303 	lsl.w	r3, r1, r3
 800884e:	431a      	orrs	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	621a      	str	r2, [r3, #32]
}
 8008854:	bf00      	nop
 8008856:	371c      	adds	r7, #28
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr

0800885e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800885e:	b480      	push	{r7}
 8008860:	b085      	sub	sp, #20
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008872:	2b01      	cmp	r3, #1
 8008874:	d101      	bne.n	800887a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008876:	2302      	movs	r3, #2
 8008878:	e044      	b.n	8008904 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	4313      	orrs	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	bc80      	pop	{r7}
 800890c:	4770      	bx	lr

0800890e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008922:	2302      	movs	r3, #2
 8008924:	e032      	b.n	800898c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2202      	movs	r2, #2
 8008932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008944:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6859      	ldr	r1, [r3, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008966:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6899      	ldr	r1, [r3, #8]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	bc80      	pop	{r7}
 8008994:	4770      	bx	lr

08008996 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr

080089ba <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e03f      	b.n	8008a4c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7fc fcb1 	bl	8005348 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2224      	movs	r2, #36	; 0x24
 80089ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089fc:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f9b2 	bl	8008d68 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695a      	ldr	r2, [r3, #20]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a22:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a32:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	603b      	str	r3, [r7, #0]
 8008a60:	4613      	mov	r3, r2
 8008a62:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	f040 8083 	bne.w	8008b7c <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_UART_Transmit+0x2e>
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e07b      	b.n	8008b7e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_UART_Transmit+0x40>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e074      	b.n	8008b7e <HAL_UART_Transmit+0x12a>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2221      	movs	r2, #33	; 0x21
 8008aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008aaa:	f7fd fd55 	bl	8006558 <HAL_GetTick>
 8008aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	88fa      	ldrh	r2, [r7, #6]
 8008ab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	88fa      	ldrh	r2, [r7, #6]
 8008aba:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8008abc:	e042      	b.n	8008b44 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad4:	d122      	bne.n	8008b1c <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2180      	movs	r1, #128	; 0x80
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 f8f6 	bl	8008cd2 <UART_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e046      	b.n	8008b7e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b02:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d103      	bne.n	8008b14 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	3302      	adds	r3, #2
 8008b10:	60bb      	str	r3, [r7, #8]
 8008b12:	e017      	b.n	8008b44 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	3301      	adds	r3, #1
 8008b18:	60bb      	str	r3, [r7, #8]
 8008b1a:	e013      	b.n	8008b44 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2200      	movs	r2, #0
 8008b24:	2180      	movs	r1, #128	; 0x80
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 f8d3 	bl	8008cd2 <UART_WaitOnFlagUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e023      	b.n	8008b7e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	60ba      	str	r2, [r7, #8]
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1b7      	bne.n	8008abe <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2200      	movs	r2, #0
 8008b56:	2140      	movs	r1, #64	; 0x40
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 f8ba 	bl	8008cd2 <UART_WaitOnFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e00a      	b.n	8008b7e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e000      	b.n	8008b7e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008b7c:	2302      	movs	r3, #2
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b088      	sub	sp, #32
 8008b8a:	af02      	add	r7, sp, #8
 8008b8c:	60f8      	str	r0, [r7, #12]
 8008b8e:	60b9      	str	r1, [r7, #8]
 8008b90:	603b      	str	r3, [r7, #0]
 8008b92:	4613      	mov	r3, r2
 8008b94:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	f040 8090 	bne.w	8008cc8 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d002      	beq.n	8008bb4 <HAL_UART_Receive+0x2e>
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e088      	b.n	8008cca <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <HAL_UART_Receive+0x40>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e081      	b.n	8008cca <HAL_UART_Receive+0x144>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2222      	movs	r2, #34	; 0x22
 8008bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008bdc:	f7fd fcbc 	bl	8006558 <HAL_GetTick>
 8008be0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	88fa      	ldrh	r2, [r7, #6]
 8008be6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	88fa      	ldrh	r2, [r7, #6]
 8008bec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8008bee:	e05c      	b.n	8008caa <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c06:	d12b      	bne.n	8008c60 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	2120      	movs	r1, #32
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 f85d 	bl	8008cd2 <UART_WaitOnFlagUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e053      	b.n	8008cca <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10c      	bne.n	8008c48 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	3302      	adds	r3, #2
 8008c44:	60bb      	str	r3, [r7, #8]
 8008c46:	e030      	b.n	8008caa <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	60bb      	str	r3, [r7, #8]
 8008c5e:	e024      	b.n	8008caa <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2200      	movs	r2, #0
 8008c68:	2120      	movs	r1, #32
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 f831 	bl	8008cd2 <UART_WaitOnFlagUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e027      	b.n	8008cca <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d108      	bne.n	8008c94 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	60ba      	str	r2, [r7, #8]
 8008c8e:	b2ca      	uxtb	r2, r1
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	e00a      	b.n	8008caa <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	1c59      	adds	r1, r3, #1
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d19d      	bne.n	8008bf0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e000      	b.n	8008cca <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008cc8:	2302      	movs	r3, #2
  }
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	603b      	str	r3, [r7, #0]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8008ce2:	e02c      	b.n	8008d3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cea:	d028      	beq.n	8008d3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cf2:	f7fd fc31 	bl	8006558 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d21d      	bcs.n	8008d3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	695a      	ldr	r2, [r3, #20]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
 8008d20:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e00f      	b.n	8008d5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4013      	ands	r3, r2
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	bf0c      	ite	eq
 8008d4e:	2301      	moveq	r3, #1
 8008d50:	2300      	movne	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	461a      	mov	r2, r3
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d0c3      	beq.n	8008ce4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d68:	b5b0      	push	{r4, r5, r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68da      	ldr	r2, [r3, #12]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	431a      	orrs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008daa:	f023 030c 	bic.w	r3, r3, #12
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	6812      	ldr	r2, [r2, #0]
 8008db2:	68f9      	ldr	r1, [r7, #12]
 8008db4:	430b      	orrs	r3, r1
 8008db6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	699a      	ldr	r2, [r3, #24]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a6f      	ldr	r2, [pc, #444]	; (8008f90 <UART_SetConfig+0x228>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d16b      	bne.n	8008eb0 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008dd8:	f7fe fad8 	bl	800738c <HAL_RCC_GetPCLK2Freq>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009a      	lsls	r2, r3, #2
 8008de6:	441a      	add	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df2:	4a68      	ldr	r2, [pc, #416]	; (8008f94 <UART_SetConfig+0x22c>)
 8008df4:	fba2 2303 	umull	r2, r3, r2, r3
 8008df8:	095b      	lsrs	r3, r3, #5
 8008dfa:	011c      	lsls	r4, r3, #4
 8008dfc:	f7fe fac6 	bl	800738c <HAL_RCC_GetPCLK2Freq>
 8008e00:	4602      	mov	r2, r0
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009a      	lsls	r2, r3, #2
 8008e0a:	441a      	add	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	fbb2 f5f3 	udiv	r5, r2, r3
 8008e16:	f7fe fab9 	bl	800738c <HAL_RCC_GetPCLK2Freq>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009a      	lsls	r2, r3, #2
 8008e24:	441a      	add	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e30:	4a58      	ldr	r2, [pc, #352]	; (8008f94 <UART_SetConfig+0x22c>)
 8008e32:	fba2 2303 	umull	r2, r3, r2, r3
 8008e36:	095b      	lsrs	r3, r3, #5
 8008e38:	2264      	movs	r2, #100	; 0x64
 8008e3a:	fb02 f303 	mul.w	r3, r2, r3
 8008e3e:	1aeb      	subs	r3, r5, r3
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	3332      	adds	r3, #50	; 0x32
 8008e44:	4a53      	ldr	r2, [pc, #332]	; (8008f94 <UART_SetConfig+0x22c>)
 8008e46:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4a:	095b      	lsrs	r3, r3, #5
 8008e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e50:	441c      	add	r4, r3
 8008e52:	f7fe fa9b 	bl	800738c <HAL_RCC_GetPCLK2Freq>
 8008e56:	4602      	mov	r2, r0
 8008e58:	4613      	mov	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009a      	lsls	r2, r3, #2
 8008e60:	441a      	add	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	fbb2 f5f3 	udiv	r5, r2, r3
 8008e6c:	f7fe fa8e 	bl	800738c <HAL_RCC_GetPCLK2Freq>
 8008e70:	4602      	mov	r2, r0
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009a      	lsls	r2, r3, #2
 8008e7a:	441a      	add	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e86:	4a43      	ldr	r2, [pc, #268]	; (8008f94 <UART_SetConfig+0x22c>)
 8008e88:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8c:	095b      	lsrs	r3, r3, #5
 8008e8e:	2264      	movs	r2, #100	; 0x64
 8008e90:	fb02 f303 	mul.w	r3, r2, r3
 8008e94:	1aeb      	subs	r3, r5, r3
 8008e96:	011b      	lsls	r3, r3, #4
 8008e98:	3332      	adds	r3, #50	; 0x32
 8008e9a:	4a3e      	ldr	r2, [pc, #248]	; (8008f94 <UART_SetConfig+0x22c>)
 8008e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea0:	095b      	lsrs	r3, r3, #5
 8008ea2:	f003 020f 	and.w	r2, r3, #15
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4422      	add	r2, r4
 8008eac:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008eae:	e06a      	b.n	8008f86 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008eb0:	f7fe fa58 	bl	8007364 <HAL_RCC_GetPCLK1Freq>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009a      	lsls	r2, r3, #2
 8008ebe:	441a      	add	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eca:	4a32      	ldr	r2, [pc, #200]	; (8008f94 <UART_SetConfig+0x22c>)
 8008ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	011c      	lsls	r4, r3, #4
 8008ed4:	f7fe fa46 	bl	8007364 <HAL_RCC_GetPCLK1Freq>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4613      	mov	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	009a      	lsls	r2, r3, #2
 8008ee2:	441a      	add	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	fbb2 f5f3 	udiv	r5, r2, r3
 8008eee:	f7fe fa39 	bl	8007364 <HAL_RCC_GetPCLK1Freq>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	009a      	lsls	r2, r3, #2
 8008efc:	441a      	add	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f08:	4a22      	ldr	r2, [pc, #136]	; (8008f94 <UART_SetConfig+0x22c>)
 8008f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0e:	095b      	lsrs	r3, r3, #5
 8008f10:	2264      	movs	r2, #100	; 0x64
 8008f12:	fb02 f303 	mul.w	r3, r2, r3
 8008f16:	1aeb      	subs	r3, r5, r3
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	3332      	adds	r3, #50	; 0x32
 8008f1c:	4a1d      	ldr	r2, [pc, #116]	; (8008f94 <UART_SetConfig+0x22c>)
 8008f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f22:	095b      	lsrs	r3, r3, #5
 8008f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f28:	441c      	add	r4, r3
 8008f2a:	f7fe fa1b 	bl	8007364 <HAL_RCC_GetPCLK1Freq>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	009a      	lsls	r2, r3, #2
 8008f38:	441a      	add	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	fbb2 f5f3 	udiv	r5, r2, r3
 8008f44:	f7fe fa0e 	bl	8007364 <HAL_RCC_GetPCLK1Freq>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	009a      	lsls	r2, r3, #2
 8008f52:	441a      	add	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5e:	4a0d      	ldr	r2, [pc, #52]	; (8008f94 <UART_SetConfig+0x22c>)
 8008f60:	fba2 2303 	umull	r2, r3, r2, r3
 8008f64:	095b      	lsrs	r3, r3, #5
 8008f66:	2264      	movs	r2, #100	; 0x64
 8008f68:	fb02 f303 	mul.w	r3, r2, r3
 8008f6c:	1aeb      	subs	r3, r5, r3
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	3332      	adds	r3, #50	; 0x32
 8008f72:	4a08      	ldr	r2, [pc, #32]	; (8008f94 <UART_SetConfig+0x22c>)
 8008f74:	fba2 2303 	umull	r2, r3, r2, r3
 8008f78:	095b      	lsrs	r3, r3, #5
 8008f7a:	f003 020f 	and.w	r2, r3, #15
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4422      	add	r2, r4
 8008f84:	609a      	str	r2, [r3, #8]
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	40013800 	.word	0x40013800
 8008f94:	51eb851f 	.word	0x51eb851f

08008f98 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	6812      	ldr	r2, [r2, #0]
 8008fb0:	f023 0101 	bic.w	r1, r3, #1
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d132      	bne.n	8009028 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008fcc:	4b31      	ldr	r3, [pc, #196]	; (8009094 <FSMC_NORSRAM_Init+0xfc>)
 8008fce:	4013      	ands	r3, r2
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	6851      	ldr	r1, [r2, #4]
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	6892      	ldr	r2, [r2, #8]
 8008fd8:	4311      	orrs	r1, r2
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	68d2      	ldr	r2, [r2, #12]
 8008fde:	4311      	orrs	r1, r2
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	6912      	ldr	r2, [r2, #16]
 8008fe4:	4311      	orrs	r1, r2
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	6952      	ldr	r2, [r2, #20]
 8008fea:	4311      	orrs	r1, r2
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	6992      	ldr	r2, [r2, #24]
 8008ff0:	4311      	orrs	r1, r2
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	69d2      	ldr	r2, [r2, #28]
 8008ff6:	4311      	orrs	r1, r2
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	6a12      	ldr	r2, [r2, #32]
 8008ffc:	4311      	orrs	r1, r2
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009002:	4311      	orrs	r1, r2
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009008:	4311      	orrs	r1, r2
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800900e:	4311      	orrs	r1, r2
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009014:	430a      	orrs	r2, r1
 8009016:	4313      	orrs	r3, r2
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	6812      	ldr	r2, [r2, #0]
 800901c:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009026:	e02f      	b.n	8009088 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009032:	4b18      	ldr	r3, [pc, #96]	; (8009094 <FSMC_NORSRAM_Init+0xfc>)
 8009034:	4013      	ands	r3, r2
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	6851      	ldr	r1, [r2, #4]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	6892      	ldr	r2, [r2, #8]
 800903e:	4311      	orrs	r1, r2
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	68d2      	ldr	r2, [r2, #12]
 8009044:	4311      	orrs	r1, r2
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	6912      	ldr	r2, [r2, #16]
 800904a:	4311      	orrs	r1, r2
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	6952      	ldr	r2, [r2, #20]
 8009050:	4311      	orrs	r1, r2
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	6992      	ldr	r2, [r2, #24]
 8009056:	4311      	orrs	r1, r2
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	69d2      	ldr	r2, [r2, #28]
 800905c:	4311      	orrs	r1, r2
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	6a12      	ldr	r2, [r2, #32]
 8009062:	4311      	orrs	r1, r2
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009068:	4311      	orrs	r1, r2
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800906e:	4311      	orrs	r1, r2
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009074:	4311      	orrs	r1, r2
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800907a:	4311      	orrs	r1, r2
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	6812      	ldr	r2, [r2, #0]
 8009080:	4319      	orrs	r1, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr
 8009094:	fff70081 	.word	0xfff70081

08009098 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ae:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	431a      	orrs	r2, r3
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	431a      	orrs	r2, r3
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	041b      	lsls	r3, r3, #16
 80090cc:	431a      	orrs	r2, r3
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	051b      	lsls	r3, r3, #20
 80090d6:	431a      	orrs	r2, r3
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	3b02      	subs	r3, #2
 80090de:	061b      	lsls	r3, r3, #24
 80090e0:	431a      	orrs	r2, r3
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	3201      	adds	r2, #1
 80090ec:	4319      	orrs	r1, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bc80      	pop	{r7}
 80090fe:	4770      	bx	lr

08009100 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009114:	d11d      	bne.n	8009152 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009120:	4013      	ands	r3, r2
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	6811      	ldr	r1, [r2, #0]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	6852      	ldr	r2, [r2, #4]
 800912a:	0112      	lsls	r2, r2, #4
 800912c:	4311      	orrs	r1, r2
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	6892      	ldr	r2, [r2, #8]
 8009132:	0212      	lsls	r2, r2, #8
 8009134:	4311      	orrs	r1, r2
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	6992      	ldr	r2, [r2, #24]
 800913a:	4311      	orrs	r1, r2
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	68d2      	ldr	r2, [r2, #12]
 8009140:	0412      	lsls	r2, r2, #16
 8009142:	430a      	orrs	r2, r1
 8009144:	ea43 0102 	orr.w	r1, r3, r2
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009150:	e005      	b.n	800915e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800915a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	bc80      	pop	{r7}
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	cff00000 	.word	0xcff00000

08009170 <__errno>:
 8009170:	4b01      	ldr	r3, [pc, #4]	; (8009178 <__errno+0x8>)
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	20000048 	.word	0x20000048

0800917c <__libc_init_array>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	2600      	movs	r6, #0
 8009180:	4d0c      	ldr	r5, [pc, #48]	; (80091b4 <__libc_init_array+0x38>)
 8009182:	4c0d      	ldr	r4, [pc, #52]	; (80091b8 <__libc_init_array+0x3c>)
 8009184:	1b64      	subs	r4, r4, r5
 8009186:	10a4      	asrs	r4, r4, #2
 8009188:	42a6      	cmp	r6, r4
 800918a:	d109      	bne.n	80091a0 <__libc_init_array+0x24>
 800918c:	f008 fd0e 	bl	8011bac <_init>
 8009190:	2600      	movs	r6, #0
 8009192:	4d0a      	ldr	r5, [pc, #40]	; (80091bc <__libc_init_array+0x40>)
 8009194:	4c0a      	ldr	r4, [pc, #40]	; (80091c0 <__libc_init_array+0x44>)
 8009196:	1b64      	subs	r4, r4, r5
 8009198:	10a4      	asrs	r4, r4, #2
 800919a:	42a6      	cmp	r6, r4
 800919c:	d105      	bne.n	80091aa <__libc_init_array+0x2e>
 800919e:	bd70      	pop	{r4, r5, r6, pc}
 80091a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a4:	4798      	blx	r3
 80091a6:	3601      	adds	r6, #1
 80091a8:	e7ee      	b.n	8009188 <__libc_init_array+0xc>
 80091aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ae:	4798      	blx	r3
 80091b0:	3601      	adds	r6, #1
 80091b2:	e7f2      	b.n	800919a <__libc_init_array+0x1e>
 80091b4:	080601d0 	.word	0x080601d0
 80091b8:	080601d0 	.word	0x080601d0
 80091bc:	080601d0 	.word	0x080601d0
 80091c0:	080601d8 	.word	0x080601d8

080091c4 <memset>:
 80091c4:	4603      	mov	r3, r0
 80091c6:	4402      	add	r2, r0
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d100      	bne.n	80091ce <memset+0xa>
 80091cc:	4770      	bx	lr
 80091ce:	f803 1b01 	strb.w	r1, [r3], #1
 80091d2:	e7f9      	b.n	80091c8 <memset+0x4>

080091d4 <sscanf>:
 80091d4:	b40e      	push	{r1, r2, r3}
 80091d6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80091da:	b530      	push	{r4, r5, lr}
 80091dc:	b09c      	sub	sp, #112	; 0x70
 80091de:	ac1f      	add	r4, sp, #124	; 0x7c
 80091e0:	f854 5b04 	ldr.w	r5, [r4], #4
 80091e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80091e8:	9002      	str	r0, [sp, #8]
 80091ea:	9006      	str	r0, [sp, #24]
 80091ec:	f7f7 f81c 	bl	8000228 <strlen>
 80091f0:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <sscanf+0x4c>)
 80091f2:	9003      	str	r0, [sp, #12]
 80091f4:	930a      	str	r3, [sp, #40]	; 0x28
 80091f6:	2300      	movs	r3, #0
 80091f8:	930e      	str	r3, [sp, #56]	; 0x38
 80091fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80091fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009200:	9007      	str	r0, [sp, #28]
 8009202:	4808      	ldr	r0, [pc, #32]	; (8009224 <sscanf+0x50>)
 8009204:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009208:	462a      	mov	r2, r5
 800920a:	4623      	mov	r3, r4
 800920c:	a902      	add	r1, sp, #8
 800920e:	6800      	ldr	r0, [r0, #0]
 8009210:	9401      	str	r4, [sp, #4]
 8009212:	f000 f84f 	bl	80092b4 <__ssvfscanf_r>
 8009216:	b01c      	add	sp, #112	; 0x70
 8009218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800921c:	b003      	add	sp, #12
 800921e:	4770      	bx	lr
 8009220:	0800924b 	.word	0x0800924b
 8009224:	20000048 	.word	0x20000048

08009228 <__sread>:
 8009228:	b510      	push	{r4, lr}
 800922a:	460c      	mov	r4, r1
 800922c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009230:	f001 fcaa 	bl	800ab88 <_read_r>
 8009234:	2800      	cmp	r0, #0
 8009236:	bfab      	itete	ge
 8009238:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800923a:	89a3      	ldrhlt	r3, [r4, #12]
 800923c:	181b      	addge	r3, r3, r0
 800923e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009242:	bfac      	ite	ge
 8009244:	6523      	strge	r3, [r4, #80]	; 0x50
 8009246:	81a3      	strhlt	r3, [r4, #12]
 8009248:	bd10      	pop	{r4, pc}

0800924a <__seofread>:
 800924a:	2000      	movs	r0, #0
 800924c:	4770      	bx	lr

0800924e <__swrite>:
 800924e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009252:	461f      	mov	r7, r3
 8009254:	898b      	ldrh	r3, [r1, #12]
 8009256:	4605      	mov	r5, r0
 8009258:	05db      	lsls	r3, r3, #23
 800925a:	460c      	mov	r4, r1
 800925c:	4616      	mov	r6, r2
 800925e:	d505      	bpl.n	800926c <__swrite+0x1e>
 8009260:	2302      	movs	r3, #2
 8009262:	2200      	movs	r2, #0
 8009264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009268:	f001 f9f8 	bl	800a65c <_lseek_r>
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	4632      	mov	r2, r6
 8009270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	4628      	mov	r0, r5
 8009278:	463b      	mov	r3, r7
 800927a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800927e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009282:	f001 b989 	b.w	800a598 <_write_r>

08009286 <__sseek>:
 8009286:	b510      	push	{r4, lr}
 8009288:	460c      	mov	r4, r1
 800928a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928e:	f001 f9e5 	bl	800a65c <_lseek_r>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	bf15      	itete	ne
 8009298:	6520      	strne	r0, [r4, #80]	; 0x50
 800929a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800929e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092a2:	81a3      	strheq	r3, [r4, #12]
 80092a4:	bf18      	it	ne
 80092a6:	81a3      	strhne	r3, [r4, #12]
 80092a8:	bd10      	pop	{r4, pc}

080092aa <__sclose>:
 80092aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ae:	f001 b995 	b.w	800a5dc <_close_r>
	...

080092b4 <__ssvfscanf_r>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80092bc:	461e      	mov	r6, r3
 80092be:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80092c2:	af02      	add	r7, sp, #8
 80092c4:	049d      	lsls	r5, r3, #18
 80092c6:	460c      	mov	r4, r1
 80092c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80092ca:	61ba      	str	r2, [r7, #24]
 80092cc:	d406      	bmi.n	80092dc <__ssvfscanf_r+0x28>
 80092ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80092d2:	818b      	strh	r3, [r1, #12]
 80092d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80092d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092da:	664b      	str	r3, [r1, #100]	; 0x64
 80092dc:	2300      	movs	r3, #0
 80092de:	e9c7 3307 	strd	r3, r3, [r7, #28]
 80092e2:	617b      	str	r3, [r7, #20]
 80092e4:	637b      	str	r3, [r7, #52]	; 0x34
 80092e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	f812 3b01 	ldrb.w	r3, [r2], #1
 80092f0:	61ba      	str	r2, [r7, #24]
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 80d4 	beq.w	80094a2 <__ssvfscanf_r+0x1ee>
 80092fa:	4a85      	ldr	r2, [pc, #532]	; (8009510 <__ssvfscanf_r+0x25c>)
 80092fc:	f813 8002 	ldrb.w	r8, [r3, r2]
 8009300:	f018 0808 	ands.w	r8, r8, #8
 8009304:	d018      	beq.n	8009338 <__ssvfscanf_r+0x84>
 8009306:	6863      	ldr	r3, [r4, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	dd0e      	ble.n	800932a <__ssvfscanf_r+0x76>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	4980      	ldr	r1, [pc, #512]	; (8009510 <__ssvfscanf_r+0x25c>)
 8009310:	781a      	ldrb	r2, [r3, #0]
 8009312:	5c8a      	ldrb	r2, [r1, r2]
 8009314:	0710      	lsls	r0, r2, #28
 8009316:	d5e8      	bpl.n	80092ea <__ssvfscanf_r+0x36>
 8009318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931a:	3301      	adds	r3, #1
 800931c:	3201      	adds	r2, #1
 800931e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009320:	6862      	ldr	r2, [r4, #4]
 8009322:	6023      	str	r3, [r4, #0]
 8009324:	3a01      	subs	r2, #1
 8009326:	6062      	str	r2, [r4, #4]
 8009328:	e7ed      	b.n	8009306 <__ssvfscanf_r+0x52>
 800932a:	4621      	mov	r1, r4
 800932c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932e:	f002 feca 	bl	800c0c6 <__ssrefill_r>
 8009332:	2800      	cmp	r0, #0
 8009334:	d0ea      	beq.n	800930c <__ssvfscanf_r+0x58>
 8009336:	e7d8      	b.n	80092ea <__ssvfscanf_r+0x36>
 8009338:	2b25      	cmp	r3, #37	; 0x25
 800933a:	d165      	bne.n	8009408 <__ssvfscanf_r+0x154>
 800933c:	46c1      	mov	r9, r8
 800933e:	220a      	movs	r2, #10
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8009346:	69b9      	ldr	r1, [r7, #24]
 8009348:	781d      	ldrb	r5, [r3, #0]
 800934a:	3101      	adds	r1, #1
 800934c:	61b9      	str	r1, [r7, #24]
 800934e:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 8009352:	2955      	cmp	r1, #85	; 0x55
 8009354:	f200 816c 	bhi.w	8009630 <__ssvfscanf_r+0x37c>
 8009358:	e8df f011 	tbh	[pc, r1, lsl #1]
 800935c:	016a0056 	.word	0x016a0056
 8009360:	016a016a 	.word	0x016a016a
 8009364:	007c016a 	.word	0x007c016a
 8009368:	016a016a 	.word	0x016a016a
 800936c:	016a016a 	.word	0x016a016a
 8009370:	00b9016a 	.word	0x00b9016a
 8009374:	00b900b9 	.word	0x00b900b9
 8009378:	00b900b9 	.word	0x00b900b9
 800937c:	00b900b9 	.word	0x00b900b9
 8009380:	00b900b9 	.word	0x00b900b9
 8009384:	016a00b9 	.word	0x016a00b9
 8009388:	016a016a 	.word	0x016a016a
 800938c:	016a016a 	.word	0x016a016a
 8009390:	016a016a 	.word	0x016a016a
 8009394:	016a00e0 	.word	0x016a00e0
 8009398:	00c30104 	.word	0x00c30104
 800939c:	00e000e0 	.word	0x00e000e0
 80093a0:	016a00e0 	.word	0x016a00e0
 80093a4:	016a016a 	.word	0x016a016a
 80093a8:	00a0016a 	.word	0x00a0016a
 80093ac:	016a016a 	.word	0x016a016a
 80093b0:	016a00c7 	.word	0x016a00c7
 80093b4:	016a016a 	.word	0x016a016a
 80093b8:	016a00f6 	.word	0x016a00f6
 80093bc:	016a016a 	.word	0x016a016a
 80093c0:	00d3016a 	.word	0x00d3016a
 80093c4:	016a016a 	.word	0x016a016a
 80093c8:	016a00fa 	.word	0x016a00fa
 80093cc:	016a016a 	.word	0x016a016a
 80093d0:	016a016a 	.word	0x016a016a
 80093d4:	016a00e0 	.word	0x016a00e0
 80093d8:	00c50106 	.word	0x00c50106
 80093dc:	00e000e0 	.word	0x00e000e0
 80093e0:	009300e0 	.word	0x009300e0
 80093e4:	00a0012e 	.word	0x00a0012e
 80093e8:	0085016a 	.word	0x0085016a
 80093ec:	010d00ac 	.word	0x010d00ac
 80093f0:	010a00c9 	.word	0x010a00c9
 80093f4:	016a016a 	.word	0x016a016a
 80093f8:	00a800f8 	.word	0x00a800f8
 80093fc:	016a00cf 	.word	0x016a00cf
 8009400:	00d3016a 	.word	0x00d3016a
 8009404:	00a8016a 	.word	0x00a8016a
 8009408:	6863      	ldr	r3, [r4, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	dd0f      	ble.n	800942e <__ssvfscanf_r+0x17a>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	7819      	ldrb	r1, [r3, #0]
 8009414:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8009418:	4291      	cmp	r1, r2
 800941a:	d142      	bne.n	80094a2 <__ssvfscanf_r+0x1ee>
 800941c:	6862      	ldr	r2, [r4, #4]
 800941e:	3301      	adds	r3, #1
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	3a01      	subs	r2, #1
 8009426:	6062      	str	r2, [r4, #4]
 8009428:	3301      	adds	r3, #1
 800942a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800942c:	e75d      	b.n	80092ea <__ssvfscanf_r+0x36>
 800942e:	4621      	mov	r1, r4
 8009430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009432:	f002 fe48 	bl	800c0c6 <__ssrefill_r>
 8009436:	2800      	cmp	r0, #0
 8009438:	d0e9      	beq.n	800940e <__ssvfscanf_r+0x15a>
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	b113      	cbz	r3, 8009444 <__ssvfscanf_r+0x190>
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	065b      	lsls	r3, r3, #25
 8009442:	d52e      	bpl.n	80094a2 <__ssvfscanf_r+0x1ee>
 8009444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009446:	2b00      	cmp	r3, #0
 8009448:	f040 80f7 	bne.w	800963a <__ssvfscanf_r+0x386>
 800944c:	f04f 33ff 	mov.w	r3, #4294967295
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
 8009452:	e102      	b.n	800965a <__ssvfscanf_r+0x3a6>
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	ea53 0309 	orrs.w	r3, r3, r9
 800945a:	633b      	str	r3, [r7, #48]	; 0x30
 800945c:	d121      	bne.n	80094a2 <__ssvfscanf_r+0x1ee>
 800945e:	f04f 0910 	mov.w	r9, #16
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	e76f      	b.n	8009346 <__ssvfscanf_r+0x92>
 8009466:	f019 0f0f 	tst.w	r9, #15
 800946a:	d11a      	bne.n	80094a2 <__ssvfscanf_r+0x1ee>
 800946c:	7859      	ldrb	r1, [r3, #1]
 800946e:	296c      	cmp	r1, #108	; 0x6c
 8009470:	d104      	bne.n	800947c <__ssvfscanf_r+0x1c8>
 8009472:	3302      	adds	r3, #2
 8009474:	61bb      	str	r3, [r7, #24]
 8009476:	f049 0902 	orr.w	r9, r9, #2
 800947a:	e7f2      	b.n	8009462 <__ssvfscanf_r+0x1ae>
 800947c:	f049 0901 	orr.w	r9, r9, #1
 8009480:	e7ef      	b.n	8009462 <__ssvfscanf_r+0x1ae>
 8009482:	f019 0f0f 	tst.w	r9, #15
 8009486:	d10c      	bne.n	80094a2 <__ssvfscanf_r+0x1ee>
 8009488:	7859      	ldrb	r1, [r3, #1]
 800948a:	2968      	cmp	r1, #104	; 0x68
 800948c:	bf03      	ittte	eq
 800948e:	3302      	addeq	r3, #2
 8009490:	61bb      	streq	r3, [r7, #24]
 8009492:	f049 0908 	orreq.w	r9, r9, #8
 8009496:	f049 0904 	orrne.w	r9, r9, #4
 800949a:	e7e2      	b.n	8009462 <__ssvfscanf_r+0x1ae>
 800949c:	f019 0f0f 	tst.w	r9, #15
 80094a0:	d0e9      	beq.n	8009476 <__ssvfscanf_r+0x1c2>
 80094a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f040 80d3 	bne.w	8009650 <__ssvfscanf_r+0x39c>
 80094aa:	e0d6      	b.n	800965a <__ssvfscanf_r+0x3a6>
 80094ac:	f019 0f0f 	tst.w	r9, #15
 80094b0:	d0d7      	beq.n	8009462 <__ssvfscanf_r+0x1ae>
 80094b2:	e7f6      	b.n	80094a2 <__ssvfscanf_r+0x1ee>
 80094b4:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 80094b8:	d1f3      	bne.n	80094a2 <__ssvfscanf_r+0x1ee>
 80094ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094bc:	b921      	cbnz	r1, 80094c8 <__ssvfscanf_r+0x214>
 80094be:	b082      	sub	sp, #8
 80094c0:	a902      	add	r1, sp, #8
 80094c2:	e9c1 3300 	strd	r3, r3, [r1]
 80094c6:	6379      	str	r1, [r7, #52]	; 0x34
 80094c8:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80094cc:	e7c9      	b.n	8009462 <__ssvfscanf_r+0x1ae>
 80094ce:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 80094d2:	d1e6      	bne.n	80094a2 <__ssvfscanf_r+0x1ee>
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	fb02 5503 	mla	r5, r2, r3, r5
 80094da:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80094de:	633b      	str	r3, [r7, #48]	; 0x30
 80094e0:	e7bf      	b.n	8009462 <__ssvfscanf_r+0x1ae>
 80094e2:	f049 0901 	orr.w	r9, r9, #1
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <__ssvfscanf_r+0x260>)
 80094e8:	e008      	b.n	80094fc <__ssvfscanf_r+0x248>
 80094ea:	f049 0901 	orr.w	r9, r9, #1
 80094ee:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <__ssvfscanf_r+0x264>)
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	2308      	movs	r3, #8
 80094f4:	2503      	movs	r5, #3
 80094f6:	61fb      	str	r3, [r7, #28]
 80094f8:	e011      	b.n	800951e <__ssvfscanf_r+0x26a>
 80094fa:	4b07      	ldr	r3, [pc, #28]	; (8009518 <__ssvfscanf_r+0x264>)
 80094fc:	617b      	str	r3, [r7, #20]
 80094fe:	230a      	movs	r3, #10
 8009500:	e7f8      	b.n	80094f4 <__ssvfscanf_r+0x240>
 8009502:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8009506:	4b04      	ldr	r3, [pc, #16]	; (8009518 <__ssvfscanf_r+0x264>)
 8009508:	617b      	str	r3, [r7, #20]
 800950a:	2310      	movs	r3, #16
 800950c:	e7f2      	b.n	80094f4 <__ssvfscanf_r+0x240>
 800950e:	bf00      	nop
 8009510:	0805fba5 	.word	0x0805fba5
 8009514:	0800bcfd 	.word	0x0800bcfd
 8009518:	0800bf15 	.word	0x0800bf15
 800951c:	2504      	movs	r5, #4
 800951e:	6863      	ldr	r3, [r4, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	dd4d      	ble.n	80095c0 <__ssvfscanf_r+0x30c>
 8009524:	f019 0f40 	tst.w	r9, #64	; 0x40
 8009528:	d105      	bne.n	8009536 <__ssvfscanf_r+0x282>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	49a6      	ldr	r1, [pc, #664]	; (80097c8 <__ssvfscanf_r+0x514>)
 800952e:	781a      	ldrb	r2, [r3, #0]
 8009530:	5c52      	ldrb	r2, [r2, r1]
 8009532:	0711      	lsls	r1, r2, #28
 8009534:	d44b      	bmi.n	80095ce <__ssvfscanf_r+0x31a>
 8009536:	3d01      	subs	r5, #1
 8009538:	2d03      	cmp	r5, #3
 800953a:	d85a      	bhi.n	80095f2 <__ssvfscanf_r+0x33e>
 800953c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8009540:	038401cc 	.word	0x038401cc
 8009544:	06060526 	.word	0x06060526
 8009548:	f049 0901 	orr.w	r9, r9, #1
 800954c:	2502      	movs	r5, #2
 800954e:	e7e6      	b.n	800951e <__ssvfscanf_r+0x26a>
 8009550:	69b9      	ldr	r1, [r7, #24]
 8009552:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8009556:	f001 fce9 	bl	800af2c <__sccl>
 800955a:	2501      	movs	r5, #1
 800955c:	61b8      	str	r0, [r7, #24]
 800955e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8009562:	e7dc      	b.n	800951e <__ssvfscanf_r+0x26a>
 8009564:	f049 0901 	orr.w	r9, r9, #1
 8009568:	2500      	movs	r5, #0
 800956a:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 800956e:	e7d6      	b.n	800951e <__ssvfscanf_r+0x26a>
 8009570:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 8009574:	e7c7      	b.n	8009506 <__ssvfscanf_r+0x252>
 8009576:	f019 0f10 	tst.w	r9, #16
 800957a:	f47f aeb6 	bne.w	80092ea <__ssvfscanf_r+0x36>
 800957e:	f019 0f08 	tst.w	r9, #8
 8009582:	f856 3b04 	ldr.w	r3, [r6], #4
 8009586:	d002      	beq.n	800958e <__ssvfscanf_r+0x2da>
 8009588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800958a:	701a      	strb	r2, [r3, #0]
 800958c:	e6ad      	b.n	80092ea <__ssvfscanf_r+0x36>
 800958e:	f019 0f04 	tst.w	r9, #4
 8009592:	d002      	beq.n	800959a <__ssvfscanf_r+0x2e6>
 8009594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009596:	801a      	strh	r2, [r3, #0]
 8009598:	e6a7      	b.n	80092ea <__ssvfscanf_r+0x36>
 800959a:	f019 0f01 	tst.w	r9, #1
 800959e:	d002      	beq.n	80095a6 <__ssvfscanf_r+0x2f2>
 80095a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	e6a1      	b.n	80092ea <__ssvfscanf_r+0x36>
 80095a6:	f019 0f02 	tst.w	r9, #2
 80095aa:	d0f9      	beq.n	80095a0 <__ssvfscanf_r+0x2ec>
 80095ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095b0:	17d2      	asrs	r2, r2, #31
 80095b2:	e9c3 1200 	strd	r1, r2, [r3]
 80095b6:	e698      	b.n	80092ea <__ssvfscanf_r+0x36>
 80095b8:	4b84      	ldr	r3, [pc, #528]	; (80097cc <__ssvfscanf_r+0x518>)
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	2300      	movs	r3, #0
 80095be:	e799      	b.n	80094f4 <__ssvfscanf_r+0x240>
 80095c0:	4621      	mov	r1, r4
 80095c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c4:	f002 fd7f 	bl	800c0c6 <__ssrefill_r>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d0ab      	beq.n	8009524 <__ssvfscanf_r+0x270>
 80095cc:	e735      	b.n	800943a <__ssvfscanf_r+0x186>
 80095ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d0:	3201      	adds	r2, #1
 80095d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095d4:	6862      	ldr	r2, [r4, #4]
 80095d6:	3a01      	subs	r2, #1
 80095d8:	2a00      	cmp	r2, #0
 80095da:	6062      	str	r2, [r4, #4]
 80095dc:	dd02      	ble.n	80095e4 <__ssvfscanf_r+0x330>
 80095de:	3301      	adds	r3, #1
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	e7a2      	b.n	800952a <__ssvfscanf_r+0x276>
 80095e4:	4621      	mov	r1, r4
 80095e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e8:	f002 fd6d 	bl	800c0c6 <__ssrefill_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d09c      	beq.n	800952a <__ssvfscanf_r+0x276>
 80095f0:	e723      	b.n	800943a <__ssvfscanf_r+0x186>
 80095f2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80095f4:	f009 0b10 	and.w	fp, r9, #16
 80095f8:	2d01      	cmp	r5, #1
 80095fa:	bf38      	it	cc
 80095fc:	2501      	movcc	r5, #1
 80095fe:	f019 0801 	ands.w	r8, r9, #1
 8009602:	f000 80f3 	beq.w	80097ec <__ssvfscanf_r+0x538>
 8009606:	f1bb 0f00 	cmp.w	fp, #0
 800960a:	f040 80b2 	bne.w	8009772 <__ssvfscanf_r+0x4be>
 800960e:	4633      	mov	r3, r6
 8009610:	f853 6b04 	ldr.w	r6, [r3], #4
 8009614:	f019 0f80 	tst.w	r9, #128	; 0x80
 8009618:	633b      	str	r3, [r7, #48]	; 0x30
 800961a:	f000 80b1 	beq.w	8009780 <__ssvfscanf_r+0x4cc>
 800961e:	b13e      	cbz	r6, 8009630 <__ssvfscanf_r+0x37c>
 8009620:	2080      	movs	r0, #128	; 0x80
 8009622:	f001 f82d 	bl	800a680 <malloc>
 8009626:	4680      	mov	r8, r0
 8009628:	b9e8      	cbnz	r0, 8009666 <__ssvfscanf_r+0x3b2>
 800962a:	f04f 33ff 	mov.w	r3, #4294967295
 800962e:	627b      	str	r3, [r7, #36]	; 0x24
 8009630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009632:	b193      	cbz	r3, 800965a <__ssvfscanf_r+0x3a6>
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	3301      	adds	r3, #1
 8009638:	d10a      	bne.n	8009650 <__ssvfscanf_r+0x39c>
 800963a:	2400      	movs	r4, #0
 800963c:	4626      	mov	r6, r4
 800963e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009640:	681d      	ldr	r5, [r3, #0]
 8009642:	88db      	ldrh	r3, [r3, #6]
 8009644:	42a3      	cmp	r3, r4
 8009646:	f300 8798 	bgt.w	800a57a <__ssvfscanf_r+0x12c6>
 800964a:	f04f 33ff 	mov.w	r3, #4294967295
 800964e:	627b      	str	r3, [r7, #36]	; 0x24
 8009650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	b108      	cbz	r0, 800965a <__ssvfscanf_r+0x3a6>
 8009656:	f001 f81b 	bl	800a690 <free>
 800965a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800965c:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 8009660:	46bd      	mov	sp, r7
 8009662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009668:	6030      	str	r0, [r6, #0]
 800966a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800966e:	889b      	ldrh	r3, [r3, #4]
 8009670:	4599      	cmp	r9, r3
 8009672:	d312      	bcc.n	800969a <__ssvfscanf_r+0x3e6>
 8009674:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8009678:	4293      	cmp	r3, r2
 800967a:	d8d6      	bhi.n	800962a <__ssvfscanf_r+0x376>
 800967c:	3308      	adds	r3, #8
 800967e:	fa1f fa83 	uxth.w	sl, r3
 8009682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009684:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8009688:	6818      	ldr	r0, [r3, #0]
 800968a:	f001 fa8f 	bl	800abac <realloc>
 800968e:	2800      	cmp	r0, #0
 8009690:	d0cb      	beq.n	800962a <__ssvfscanf_r+0x376>
 8009692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009694:	6018      	str	r0, [r3, #0]
 8009696:	f8a3 a004 	strh.w	sl, [r3, #4]
 800969a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969c:	f109 0201 	add.w	r2, r9, #1
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	46b2      	mov	sl, r6
 80096a4:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 80096a8:	4646      	mov	r6, r8
 80096aa:	f04f 0920 	mov.w	r9, #32
 80096ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096b0:	80ca      	strh	r2, [r1, #6]
 80096b2:	2200      	movs	r2, #0
 80096b4:	613a      	str	r2, [r7, #16]
 80096b6:	f000 ffc3 	bl	800a640 <__locale_mb_cur_max>
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	4290      	cmp	r0, r2
 80096be:	f43f aebc 	beq.w	800943a <__ssvfscanf_r+0x186>
 80096c2:	6821      	ldr	r1, [r4, #0]
 80096c4:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 80096c8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80096cc:	1c53      	adds	r3, r2, #1
 80096ce:	f80c 0002 	strb.w	r0, [ip, r2]
 80096d2:	6862      	ldr	r2, [r4, #4]
 80096d4:	3a01      	subs	r2, #1
 80096d6:	e9c4 1200 	strd	r1, r2, [r4]
 80096da:	6a3a      	ldr	r2, [r7, #32]
 80096dc:	2a03      	cmp	r2, #3
 80096de:	d102      	bne.n	80096e6 <__ssvfscanf_r+0x432>
 80096e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096e2:	2a04      	cmp	r2, #4
 80096e4:	d007      	beq.n	80096f6 <__ssvfscanf_r+0x442>
 80096e6:	2208      	movs	r2, #8
 80096e8:	2100      	movs	r1, #0
 80096ea:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80096ee:	623b      	str	r3, [r7, #32]
 80096f0:	f7ff fd68 	bl	80091c4 <memset>
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096fa:	9200      	str	r2, [sp, #0]
 80096fc:	4631      	mov	r1, r6
 80096fe:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8009702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009704:	613b      	str	r3, [r7, #16]
 8009706:	f001 fa07 	bl	800ab18 <_mbrtowc_r>
 800970a:	1c42      	adds	r2, r0, #1
 800970c:	6238      	str	r0, [r7, #32]
 800970e:	f43f ae94 	beq.w	800943a <__ssvfscanf_r+0x186>
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2800      	cmp	r0, #0
 8009716:	d137      	bne.n	8009788 <__ssvfscanf_r+0x4d4>
 8009718:	f1bb 0f00 	cmp.w	fp, #0
 800971c:	d101      	bne.n	8009722 <__ssvfscanf_r+0x46e>
 800971e:	f8c6 b000 	str.w	fp, [r6]
 8009722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009724:	441a      	add	r2, r3
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800972a:	2b03      	cmp	r3, #3
 800972c:	d102      	bne.n	8009734 <__ssvfscanf_r+0x480>
 800972e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009730:	2b04      	cmp	r3, #4
 8009732:	d000      	beq.n	8009736 <__ssvfscanf_r+0x482>
 8009734:	3d01      	subs	r5, #1
 8009736:	f1bb 0f00 	cmp.w	fp, #0
 800973a:	d118      	bne.n	800976e <__ssvfscanf_r+0x4ba>
 800973c:	f1ba 0f00 	cmp.w	sl, #0
 8009740:	d014      	beq.n	800976c <__ssvfscanf_r+0x4b8>
 8009742:	eba6 0308 	sub.w	r3, r6, r8
 8009746:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800974a:	d80f      	bhi.n	800976c <__ssvfscanf_r+0x4b8>
 800974c:	4640      	mov	r0, r8
 800974e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009752:	613b      	str	r3, [r7, #16]
 8009754:	f001 fa2a 	bl	800abac <realloc>
 8009758:	4680      	mov	r8, r0
 800975a:	2800      	cmp	r0, #0
 800975c:	f43f af65 	beq.w	800962a <__ssvfscanf_r+0x376>
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f8ca 0000 	str.w	r0, [sl]
 8009766:	18c6      	adds	r6, r0, r3
 8009768:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800976c:	3604      	adds	r6, #4
 800976e:	2200      	movs	r2, #0
 8009770:	e00e      	b.n	8009790 <__ssvfscanf_r+0x4dc>
 8009772:	f04f 0900 	mov.w	r9, #0
 8009776:	633e      	str	r6, [r7, #48]	; 0x30
 8009778:	46c8      	mov	r8, r9
 800977a:	46ca      	mov	sl, r9
 800977c:	464e      	mov	r6, r9
 800977e:	e798      	b.n	80096b2 <__ssvfscanf_r+0x3fe>
 8009780:	46d9      	mov	r9, fp
 8009782:	46d8      	mov	r8, fp
 8009784:	46da      	mov	sl, fp
 8009786:	e794      	b.n	80096b2 <__ssvfscanf_r+0x3fe>
 8009788:	6a3a      	ldr	r2, [r7, #32]
 800978a:	3202      	adds	r2, #2
 800978c:	d1c9      	bne.n	8009722 <__ssvfscanf_r+0x46e>
 800978e:	461a      	mov	r2, r3
 8009790:	6863      	ldr	r3, [r4, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	dc14      	bgt.n	80097c0 <__ssvfscanf_r+0x50c>
 8009796:	4621      	mov	r1, r4
 8009798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800979a:	613a      	str	r2, [r7, #16]
 800979c:	f002 fc93 	bl	800c0c6 <__ssrefill_r>
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	b168      	cbz	r0, 80097c0 <__ssvfscanf_r+0x50c>
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	f47f ae48 	bne.w	800943a <__ssvfscanf_r+0x186>
 80097aa:	f1ba 0f00 	cmp.w	sl, #0
 80097ae:	d10f      	bne.n	80097d0 <__ssvfscanf_r+0x51c>
 80097b0:	f1bb 0f00 	cmp.w	fp, #0
 80097b4:	d102      	bne.n	80097bc <__ssvfscanf_r+0x508>
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	3301      	adds	r3, #1
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
 80097bc:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80097be:	e594      	b.n	80092ea <__ssvfscanf_r+0x36>
 80097c0:	2d00      	cmp	r5, #0
 80097c2:	f47f af77 	bne.w	80096b4 <__ssvfscanf_r+0x400>
 80097c6:	e7f0      	b.n	80097aa <__ssvfscanf_r+0x4f6>
 80097c8:	0805fba5 	.word	0x0805fba5
 80097cc:	0800bcfd 	.word	0x0800bcfd
 80097d0:	eba6 0108 	sub.w	r1, r6, r8
 80097d4:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80097d8:	d9ea      	bls.n	80097b0 <__ssvfscanf_r+0x4fc>
 80097da:	f8da 0000 	ldr.w	r0, [sl]
 80097de:	f001 f9e5 	bl	800abac <realloc>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d0e4      	beq.n	80097b0 <__ssvfscanf_r+0x4fc>
 80097e6:	f8ca 0000 	str.w	r0, [sl]
 80097ea:	e7e1      	b.n	80097b0 <__ssvfscanf_r+0x4fc>
 80097ec:	f1bb 0f00 	cmp.w	fp, #0
 80097f0:	d01a      	beq.n	8009828 <__ssvfscanf_r+0x574>
 80097f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80097f6:	429d      	cmp	r5, r3
 80097f8:	dd10      	ble.n	800981c <__ssvfscanf_r+0x568>
 80097fa:	4498      	add	r8, r3
 80097fc:	1aed      	subs	r5, r5, r3
 80097fe:	4413      	add	r3, r2
 8009800:	4621      	mov	r1, r4
 8009802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	f002 fc5e 	bl	800c0c6 <__ssrefill_r>
 800980a:	2800      	cmp	r0, #0
 800980c:	d0f1      	beq.n	80097f2 <__ssvfscanf_r+0x53e>
 800980e:	f1b8 0f00 	cmp.w	r8, #0
 8009812:	f43f ae12 	beq.w	800943a <__ssvfscanf_r+0x186>
 8009816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009818:	4443      	add	r3, r8
 800981a:	e606      	b.n	800942a <__ssvfscanf_r+0x176>
 800981c:	1b5b      	subs	r3, r3, r5
 800981e:	442a      	add	r2, r5
 8009820:	44a8      	add	r8, r5
 8009822:	6063      	str	r3, [r4, #4]
 8009824:	6022      	str	r2, [r4, #0]
 8009826:	e7f6      	b.n	8009816 <__ssvfscanf_r+0x562>
 8009828:	46b0      	mov	r8, r6
 800982a:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800982e:	f858 6b04 	ldr.w	r6, [r8], #4
 8009832:	d031      	beq.n	8009898 <__ssvfscanf_r+0x5e4>
 8009834:	2e00      	cmp	r6, #0
 8009836:	f43f ae34 	beq.w	80094a2 <__ssvfscanf_r+0x1ee>
 800983a:	4628      	mov	r0, r5
 800983c:	f000 ff20 	bl	800a680 <malloc>
 8009840:	4682      	mov	sl, r0
 8009842:	2800      	cmp	r0, #0
 8009844:	f43f adfe 	beq.w	8009444 <__ssvfscanf_r+0x190>
 8009848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800984a:	6030      	str	r0, [r6, #0]
 800984c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8009850:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8009854:	45cb      	cmp	fp, r9
 8009856:	d315      	bcc.n	8009884 <__ssvfscanf_r+0x5d0>
 8009858:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800985c:	4599      	cmp	r9, r3
 800985e:	f63f aeec 	bhi.w	800963a <__ssvfscanf_r+0x386>
 8009862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009864:	f109 0908 	add.w	r9, r9, #8
 8009868:	fa1f f989 	uxth.w	r9, r9
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8009872:	f001 f99b 	bl	800abac <realloc>
 8009876:	2800      	cmp	r0, #0
 8009878:	f43f aedf 	beq.w	800963a <__ssvfscanf_r+0x386>
 800987c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987e:	6018      	str	r0, [r3, #0]
 8009880:	f8a3 9004 	strh.w	r9, [r3, #4]
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009886:	46b1      	mov	r9, r6
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800988c:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8009890:	4656      	mov	r6, sl
 8009892:	f10b 0201 	add.w	r2, fp, #1
 8009896:	80ca      	strh	r2, [r1, #6]
 8009898:	4631      	mov	r1, r6
 800989a:	462b      	mov	r3, r5
 800989c:	2201      	movs	r2, #1
 800989e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098a0:	9400      	str	r4, [sp, #0]
 80098a2:	f002 fc2d 	bl	800c100 <_sfread_r>
 80098a6:	4606      	mov	r6, r0
 80098a8:	2800      	cmp	r0, #0
 80098aa:	f43f adc6 	beq.w	800943a <__ssvfscanf_r+0x186>
 80098ae:	f1b9 0f00 	cmp.w	r9, #0
 80098b2:	d009      	beq.n	80098c8 <__ssvfscanf_r+0x614>
 80098b4:	4285      	cmp	r5, r0
 80098b6:	d907      	bls.n	80098c8 <__ssvfscanf_r+0x614>
 80098b8:	4601      	mov	r1, r0
 80098ba:	f8d9 0000 	ldr.w	r0, [r9]
 80098be:	f001 f975 	bl	800abac <realloc>
 80098c2:	b108      	cbz	r0, 80098c8 <__ssvfscanf_r+0x614>
 80098c4:	f8c9 0000 	str.w	r0, [r9]
 80098c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ca:	4433      	add	r3, r6
 80098cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	4646      	mov	r6, r8
 80098d2:	3301      	adds	r3, #1
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
 80098d6:	e508      	b.n	80092ea <__ssvfscanf_r+0x36>
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	f009 0b10 	and.w	fp, r9, #16
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bf08      	it	eq
 80098e2:	f04f 33ff 	moveq.w	r3, #4294967295
 80098e6:	f019 0501 	ands.w	r5, r9, #1
 80098ea:	633b      	str	r3, [r7, #48]	; 0x30
 80098ec:	f000 8103 	beq.w	8009af6 <__ssvfscanf_r+0x842>
 80098f0:	f1bb 0f00 	cmp.w	fp, #0
 80098f4:	f040 80a5 	bne.w	8009a42 <__ssvfscanf_r+0x78e>
 80098f8:	4633      	mov	r3, r6
 80098fa:	f853 5b04 	ldr.w	r5, [r3], #4
 80098fe:	f019 0f80 	tst.w	r9, #128	; 0x80
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	f000 80a6 	beq.w	8009a54 <__ssvfscanf_r+0x7a0>
 8009908:	2d00      	cmp	r5, #0
 800990a:	f43f ae91 	beq.w	8009630 <__ssvfscanf_r+0x37c>
 800990e:	2080      	movs	r0, #128	; 0x80
 8009910:	f000 feb6 	bl	800a680 <malloc>
 8009914:	4680      	mov	r8, r0
 8009916:	2800      	cmp	r0, #0
 8009918:	f43f ae87 	beq.w	800962a <__ssvfscanf_r+0x376>
 800991c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991e:	6028      	str	r0, [r5, #0]
 8009920:	88de      	ldrh	r6, [r3, #6]
 8009922:	889b      	ldrh	r3, [r3, #4]
 8009924:	429e      	cmp	r6, r3
 8009926:	d314      	bcc.n	8009952 <__ssvfscanf_r+0x69e>
 8009928:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800992c:	4293      	cmp	r3, r2
 800992e:	f63f ae7c 	bhi.w	800962a <__ssvfscanf_r+0x376>
 8009932:	3308      	adds	r3, #8
 8009934:	fa1f f983 	uxth.w	r9, r3
 8009938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993a:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	f001 f934 	bl	800abac <realloc>
 8009944:	2800      	cmp	r0, #0
 8009946:	f43f ae70 	beq.w	800962a <__ssvfscanf_r+0x376>
 800994a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994c:	6018      	str	r0, [r3, #0]
 800994e:	f8a3 9004 	strh.w	r9, [r3, #4]
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	613d      	str	r5, [r7, #16]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f04f 0a20 	mov.w	sl, #32
 800995c:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8009960:	4645      	mov	r5, r8
 8009962:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009964:	1c72      	adds	r2, r6, #1
 8009966:	80ca      	strh	r2, [r1, #6]
 8009968:	2600      	movs	r6, #0
 800996a:	f000 fe69 	bl	800a640 <__locale_mb_cur_max>
 800996e:	42b0      	cmp	r0, r6
 8009970:	f43f ad63 	beq.w	800943a <__ssvfscanf_r+0x186>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800997a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800997e:	f106 0901 	add.w	r9, r6, #1
 8009982:	558a      	strb	r2, [r1, r6]
 8009984:	6862      	ldr	r2, [r4, #4]
 8009986:	3a01      	subs	r2, #1
 8009988:	e9c4 3200 	strd	r3, r2, [r4]
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	2b03      	cmp	r3, #3
 8009990:	d102      	bne.n	8009998 <__ssvfscanf_r+0x6e4>
 8009992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009994:	2b04      	cmp	r3, #4
 8009996:	d005      	beq.n	80099a4 <__ssvfscanf_r+0x6f0>
 8009998:	2208      	movs	r2, #8
 800999a:	2100      	movs	r1, #0
 800999c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80099a0:	f7ff fc10 	bl	80091c4 <memset>
 80099a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	4629      	mov	r1, r5
 80099ac:	464b      	mov	r3, r9
 80099ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099b0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80099b4:	f001 f8b0 	bl	800ab18 <_mbrtowc_r>
 80099b8:	4603      	mov	r3, r0
 80099ba:	6238      	str	r0, [r7, #32]
 80099bc:	1c58      	adds	r0, r3, #1
 80099be:	f43f ad3c 	beq.w	800943a <__ssvfscanf_r+0x186>
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d14b      	bne.n	8009a5e <__ssvfscanf_r+0x7aa>
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	682e      	ldr	r6, [r5, #0]
 80099ca:	1c71      	adds	r1, r6, #1
 80099cc:	d057      	beq.n	8009a7e <__ssvfscanf_r+0x7ca>
 80099ce:	2208      	movs	r2, #8
 80099d0:	2100      	movs	r1, #0
 80099d2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80099d6:	f7ff fbf5 	bl	80091c4 <memset>
 80099da:	4b9a      	ldr	r3, [pc, #616]	; (8009c44 <__ssvfscanf_r+0x990>)
 80099dc:	4632      	mov	r2, r6
 80099de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099e4:	60bb      	str	r3, [r7, #8]
 80099e6:	68be      	ldr	r6, [r7, #8]
 80099e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80099f0:	47b0      	blx	r6
 80099f2:	2801      	cmp	r0, #1
 80099f4:	d145      	bne.n	8009a82 <__ssvfscanf_r+0x7ce>
 80099f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80099fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80099fe:	5c9b      	ldrb	r3, [r3, r2]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d149      	bne.n	8009a98 <__ssvfscanf_r+0x7e4>
 8009a04:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 8009a08:	f1b9 0f00 	cmp.w	r9, #0
 8009a0c:	d13b      	bne.n	8009a86 <__ssvfscanf_r+0x7d2>
 8009a0e:	f1bb 0f00 	cmp.w	fp, #0
 8009a12:	d114      	bne.n	8009a3e <__ssvfscanf_r+0x78a>
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	f8c5 b000 	str.w	fp, [r5]
 8009a1a:	b16b      	cbz	r3, 8009a38 <__ssvfscanf_r+0x784>
 8009a1c:	eba5 0108 	sub.w	r1, r5, r8
 8009a20:	108b      	asrs	r3, r1, #2
 8009a22:	3301      	adds	r3, #1
 8009a24:	459a      	cmp	sl, r3
 8009a26:	d907      	bls.n	8009a38 <__ssvfscanf_r+0x784>
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	3104      	adds	r1, #4
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	f001 f8bd 	bl	800abac <realloc>
 8009a32:	b108      	cbz	r0, 8009a38 <__ssvfscanf_r+0x784>
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	6018      	str	r0, [r3, #0]
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009a3e:	68fe      	ldr	r6, [r7, #12]
 8009a40:	e453      	b.n	80092ea <__ssvfscanf_r+0x36>
 8009a42:	f04f 0a00 	mov.w	sl, #0
 8009a46:	60fe      	str	r6, [r7, #12]
 8009a48:	46d0      	mov	r8, sl
 8009a4a:	f8c7 a010 	str.w	sl, [r7, #16]
 8009a4e:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8009a52:	e789      	b.n	8009968 <__ssvfscanf_r+0x6b4>
 8009a54:	46da      	mov	sl, fp
 8009a56:	46d8      	mov	r8, fp
 8009a58:	f8c7 b010 	str.w	fp, [r7, #16]
 8009a5c:	e784      	b.n	8009968 <__ssvfscanf_r+0x6b4>
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	3302      	adds	r3, #2
 8009a62:	d1b1      	bne.n	80099c8 <__ssvfscanf_r+0x714>
 8009a64:	6863      	ldr	r3, [r4, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	dc40      	bgt.n	8009aec <__ssvfscanf_r+0x838>
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a6e:	f002 fb2a 	bl	800c0c6 <__ssrefill_r>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d03a      	beq.n	8009aec <__ssvfscanf_r+0x838>
 8009a76:	f1b9 0f00 	cmp.w	r9, #0
 8009a7a:	d0c8      	beq.n	8009a0e <__ssvfscanf_r+0x75a>
 8009a7c:	e4dd      	b.n	800943a <__ssvfscanf_r+0x186>
 8009a7e:	4632      	mov	r2, r6
 8009a80:	e7bb      	b.n	80099fa <__ssvfscanf_r+0x746>
 8009a82:	2200      	movs	r2, #0
 8009a84:	e7b9      	b.n	80099fa <__ssvfscanf_r+0x746>
 8009a86:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	f816 1009 	ldrb.w	r1, [r6, r9]
 8009a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a92:	f002 fadb 	bl	800c04c <_sungetc_r>
 8009a96:	e7b7      	b.n	8009a08 <__ssvfscanf_r+0x754>
 8009a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9a:	444b      	add	r3, r9
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d102      	bne.n	8009aaa <__ssvfscanf_r+0x7f6>
 8009aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d002      	beq.n	8009ab0 <__ssvfscanf_r+0x7fc>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	3b01      	subs	r3, #1
 8009aae:	633b      	str	r3, [r7, #48]	; 0x30
 8009ab0:	f1bb 0f00 	cmp.w	fp, #0
 8009ab4:	d117      	bne.n	8009ae6 <__ssvfscanf_r+0x832>
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	3504      	adds	r5, #4
 8009aba:	b1a3      	cbz	r3, 8009ae6 <__ssvfscanf_r+0x832>
 8009abc:	eba5 0608 	sub.w	r6, r5, r8
 8009ac0:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 8009ac4:	d80d      	bhi.n	8009ae2 <__ssvfscanf_r+0x82e>
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 8009acc:	f001 f86e 	bl	800abac <realloc>
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	f43f ada9 	beq.w	800962a <__ssvfscanf_r+0x376>
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	1985      	adds	r5, r0, r6
 8009adc:	6018      	str	r0, [r3, #0]
 8009ade:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8009ae2:	46d9      	mov	r9, fp
 8009ae4:	e7be      	b.n	8009a64 <__ssvfscanf_r+0x7b0>
 8009ae6:	f04f 0900 	mov.w	r9, #0
 8009aea:	e7bb      	b.n	8009a64 <__ssvfscanf_r+0x7b0>
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d08d      	beq.n	8009a0e <__ssvfscanf_r+0x75a>
 8009af2:	464e      	mov	r6, r9
 8009af4:	e739      	b.n	800996a <__ssvfscanf_r+0x6b6>
 8009af6:	f1bb 0f00 	cmp.w	fp, #0
 8009afa:	d01c      	beq.n	8009b36 <__ssvfscanf_r+0x882>
 8009afc:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	781a      	ldrb	r2, [r3, #0]
 8009b04:	f818 2002 	ldrb.w	r2, [r8, r2]
 8009b08:	b90a      	cbnz	r2, 8009b0e <__ssvfscanf_r+0x85a>
 8009b0a:	b98d      	cbnz	r5, 8009b30 <__ssvfscanf_r+0x87c>
 8009b0c:	e4c9      	b.n	80094a2 <__ssvfscanf_r+0x1ee>
 8009b0e:	3301      	adds	r3, #1
 8009b10:	6862      	ldr	r2, [r4, #4]
 8009b12:	6023      	str	r3, [r4, #0]
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	3501      	adds	r5, #1
 8009b18:	3a01      	subs	r2, #1
 8009b1a:	42ab      	cmp	r3, r5
 8009b1c:	6062      	str	r2, [r4, #4]
 8009b1e:	d007      	beq.n	8009b30 <__ssvfscanf_r+0x87c>
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	dced      	bgt.n	8009b00 <__ssvfscanf_r+0x84c>
 8009b24:	4621      	mov	r1, r4
 8009b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b28:	f002 facd 	bl	800c0c6 <__ssrefill_r>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d0e7      	beq.n	8009b00 <__ssvfscanf_r+0x84c>
 8009b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b32:	442b      	add	r3, r5
 8009b34:	e479      	b.n	800942a <__ssvfscanf_r+0x176>
 8009b36:	46b3      	mov	fp, r6
 8009b38:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8009b3c:	f85b 6b04 	ldr.w	r6, [fp], #4
 8009b40:	d07e      	beq.n	8009c40 <__ssvfscanf_r+0x98c>
 8009b42:	2e00      	cmp	r6, #0
 8009b44:	f43f acad 	beq.w	80094a2 <__ssvfscanf_r+0x1ee>
 8009b48:	2020      	movs	r0, #32
 8009b4a:	f000 fd99 	bl	800a680 <malloc>
 8009b4e:	4680      	mov	r8, r0
 8009b50:	2800      	cmp	r0, #0
 8009b52:	f43f ac77 	beq.w	8009444 <__ssvfscanf_r+0x190>
 8009b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b58:	6030      	str	r0, [r6, #0]
 8009b5a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8009b5e:	889d      	ldrh	r5, [r3, #4]
 8009b60:	45a9      	cmp	r9, r5
 8009b62:	d311      	bcc.n	8009b88 <__ssvfscanf_r+0x8d4>
 8009b64:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8009b68:	429d      	cmp	r5, r3
 8009b6a:	f63f ad66 	bhi.w	800963a <__ssvfscanf_r+0x386>
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b70:	3508      	adds	r5, #8
 8009b72:	b2ad      	uxth	r5, r5
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	00a9      	lsls	r1, r5, #2
 8009b78:	f001 f818 	bl	800abac <realloc>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f43f ad5c 	beq.w	800963a <__ssvfscanf_r+0x386>
 8009b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b84:	6018      	str	r0, [r3, #0]
 8009b86:	809d      	strh	r5, [r3, #4]
 8009b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8a:	f109 0201 	add.w	r2, r9, #1
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	46b2      	mov	sl, r6
 8009b92:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8009b96:	4646      	mov	r6, r8
 8009b98:	f04f 0920 	mov.w	r9, #32
 8009b9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b9e:	80ca      	strh	r2, [r1, #6]
 8009ba0:	4635      	mov	r5, r6
 8009ba2:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	781a      	ldrb	r2, [r3, #0]
 8009baa:	f818 2002 	ldrb.w	r2, [r8, r2]
 8009bae:	b362      	cbz	r2, 8009c0a <__ssvfscanf_r+0x956>
 8009bb0:	6862      	ldr	r2, [r4, #4]
 8009bb2:	3a01      	subs	r2, #1
 8009bb4:	6062      	str	r2, [r4, #4]
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	6022      	str	r2, [r4, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	f806 3b01 	strb.w	r3, [r6], #1
 8009bc0:	f1ba 0f00 	cmp.w	sl, #0
 8009bc4:	d011      	beq.n	8009bea <__ssvfscanf_r+0x936>
 8009bc6:	1b73      	subs	r3, r6, r5
 8009bc8:	454b      	cmp	r3, r9
 8009bca:	d30e      	bcc.n	8009bea <__ssvfscanf_r+0x936>
 8009bcc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	613b      	str	r3, [r7, #16]
 8009bd6:	f000 ffe9 	bl	800abac <realloc>
 8009bda:	4605      	mov	r5, r0
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	f43f ac31 	beq.w	8009444 <__ssvfscanf_r+0x190>
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f8ca 0000 	str.w	r0, [sl]
 8009be8:	18c6      	adds	r6, r0, r3
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	3b01      	subs	r3, #1
 8009bee:	633b      	str	r3, [r7, #48]	; 0x30
 8009bf0:	d00b      	beq.n	8009c0a <__ssvfscanf_r+0x956>
 8009bf2:	6863      	ldr	r3, [r4, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dcd6      	bgt.n	8009ba6 <__ssvfscanf_r+0x8f2>
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bfc:	f002 fa63 	bl	800c0c6 <__ssrefill_r>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d0d0      	beq.n	8009ba6 <__ssvfscanf_r+0x8f2>
 8009c04:	42ae      	cmp	r6, r5
 8009c06:	f43f ac18 	beq.w	800943a <__ssvfscanf_r+0x186>
 8009c0a:	1b75      	subs	r5, r6, r5
 8009c0c:	f43f ac49 	beq.w	80094a2 <__ssvfscanf_r+0x1ee>
 8009c10:	2300      	movs	r3, #0
 8009c12:	7033      	strb	r3, [r6, #0]
 8009c14:	f1ba 0f00 	cmp.w	sl, #0
 8009c18:	d009      	beq.n	8009c2e <__ssvfscanf_r+0x97a>
 8009c1a:	1c69      	adds	r1, r5, #1
 8009c1c:	4589      	cmp	r9, r1
 8009c1e:	d906      	bls.n	8009c2e <__ssvfscanf_r+0x97a>
 8009c20:	f8da 0000 	ldr.w	r0, [sl]
 8009c24:	f000 ffc2 	bl	800abac <realloc>
 8009c28:	b108      	cbz	r0, 8009c2e <__ssvfscanf_r+0x97a>
 8009c2a:	f8ca 0000 	str.w	r0, [sl]
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	3301      	adds	r3, #1
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24
 8009c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c36:	442b      	add	r3, r5
 8009c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c3a:	465e      	mov	r6, fp
 8009c3c:	f7ff bb55 	b.w	80092ea <__ssvfscanf_r+0x36>
 8009c40:	46ca      	mov	sl, r9
 8009c42:	e7ad      	b.n	8009ba0 <__ssvfscanf_r+0x8ec>
 8009c44:	2000047c 	.word	0x2000047c
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	f009 0810 	and.w	r8, r9, #16
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	bf08      	it	eq
 8009c52:	f04f 33ff 	moveq.w	r3, #4294967295
 8009c56:	f019 0501 	ands.w	r5, r9, #1
 8009c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8009c5c:	f000 80f8 	beq.w	8009e50 <__ssvfscanf_r+0xb9c>
 8009c60:	f1b8 0f00 	cmp.w	r8, #0
 8009c64:	f040 809f 	bne.w	8009da6 <__ssvfscanf_r+0xaf2>
 8009c68:	4633      	mov	r3, r6
 8009c6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c6e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8009c72:	613b      	str	r3, [r7, #16]
 8009c74:	f000 809f 	beq.w	8009db6 <__ssvfscanf_r+0xb02>
 8009c78:	2e00      	cmp	r6, #0
 8009c7a:	f43f acd9 	beq.w	8009630 <__ssvfscanf_r+0x37c>
 8009c7e:	2080      	movs	r0, #128	; 0x80
 8009c80:	f000 fcfe 	bl	800a680 <malloc>
 8009c84:	4605      	mov	r5, r0
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f43f accf 	beq.w	800962a <__ssvfscanf_r+0x376>
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8e:	6030      	str	r0, [r6, #0]
 8009c90:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8009c94:	889b      	ldrh	r3, [r3, #4]
 8009c96:	4599      	cmp	r9, r3
 8009c98:	d314      	bcc.n	8009cc4 <__ssvfscanf_r+0xa10>
 8009c9a:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	f63f acc3 	bhi.w	800962a <__ssvfscanf_r+0x376>
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	fa1f fa83 	uxth.w	sl, r3
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cac:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	f000 ff7b 	bl	800abac <realloc>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f43f acb7 	beq.w	800962a <__ssvfscanf_r+0x376>
 8009cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cbe:	6018      	str	r0, [r3, #0]
 8009cc0:	f8a3 a004 	strh.w	sl, [r3, #4]
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc6:	f109 0201 	add.w	r2, r9, #1
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	46b2      	mov	sl, r6
 8009cce:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8009cd2:	462e      	mov	r6, r5
 8009cd4:	f04f 0920 	mov.w	r9, #32
 8009cd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009cda:	80ca      	strh	r2, [r1, #6]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	49a8      	ldr	r1, [pc, #672]	; (8009f88 <__ssvfscanf_r+0xcd4>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	5c5b      	ldrb	r3, [r3, r1]
 8009cea:	0718      	lsls	r0, r3, #28
 8009cec:	d440      	bmi.n	8009d70 <__ssvfscanf_r+0xabc>
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d03d      	beq.n	8009d70 <__ssvfscanf_r+0xabc>
 8009cf4:	60fa      	str	r2, [r7, #12]
 8009cf6:	f000 fca3 	bl	800a640 <__locale_mb_cur_max>
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4290      	cmp	r0, r2
 8009cfe:	f43f ab9c 	beq.w	800943a <__ssvfscanf_r+0x186>
 8009d02:	6821      	ldr	r1, [r4, #0]
 8009d04:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 8009d08:	f811 0b01 	ldrb.w	r0, [r1], #1
 8009d0c:	1c53      	adds	r3, r2, #1
 8009d0e:	f80c 0002 	strb.w	r0, [ip, r2]
 8009d12:	6862      	ldr	r2, [r4, #4]
 8009d14:	3a01      	subs	r2, #1
 8009d16:	e9c4 1200 	strd	r1, r2, [r4]
 8009d1a:	6a3a      	ldr	r2, [r7, #32]
 8009d1c:	2a03      	cmp	r2, #3
 8009d1e:	d103      	bne.n	8009d28 <__ssvfscanf_r+0xa74>
 8009d20:	f8db 2000 	ldr.w	r2, [fp]
 8009d24:	2a04      	cmp	r2, #4
 8009d26:	d006      	beq.n	8009d36 <__ssvfscanf_r+0xa82>
 8009d28:	2208      	movs	r2, #8
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	4658      	mov	r0, fp
 8009d2e:	623b      	str	r3, [r7, #32]
 8009d30:	f7ff fa48 	bl	80091c4 <memset>
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d3e:	f8cd b000 	str.w	fp, [sp]
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	f000 fee8 	bl	800ab18 <_mbrtowc_r>
 8009d48:	1c42      	adds	r2, r0, #1
 8009d4a:	6238      	str	r0, [r7, #32]
 8009d4c:	f43f ab75 	beq.w	800943a <__ssvfscanf_r+0x186>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d133      	bne.n	8009dbe <__ssvfscanf_r+0xb0a>
 8009d56:	6030      	str	r0, [r6, #0]
 8009d58:	6830      	ldr	r0, [r6, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	f000 fc62 	bl	800a624 <iswspace>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4602      	mov	r2, r0
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d047      	beq.n	8009df8 <__ssvfscanf_r+0xb44>
 8009d68:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d139      	bne.n	8009de4 <__ssvfscanf_r+0xb30>
 8009d70:	f1b8 0f00 	cmp.w	r8, #0
 8009d74:	d114      	bne.n	8009da0 <__ssvfscanf_r+0xaec>
 8009d76:	f8c6 8000 	str.w	r8, [r6]
 8009d7a:	f1ba 0f00 	cmp.w	sl, #0
 8009d7e:	d00c      	beq.n	8009d9a <__ssvfscanf_r+0xae6>
 8009d80:	1b71      	subs	r1, r6, r5
 8009d82:	108b      	asrs	r3, r1, #2
 8009d84:	3301      	adds	r3, #1
 8009d86:	4599      	cmp	r9, r3
 8009d88:	d907      	bls.n	8009d9a <__ssvfscanf_r+0xae6>
 8009d8a:	f8da 0000 	ldr.w	r0, [sl]
 8009d8e:	3104      	adds	r1, #4
 8009d90:	f000 ff0c 	bl	800abac <realloc>
 8009d94:	b108      	cbz	r0, 8009d9a <__ssvfscanf_r+0xae6>
 8009d96:	f8ca 0000 	str.w	r0, [sl]
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009da0:	693e      	ldr	r6, [r7, #16]
 8009da2:	f7ff baa2 	b.w	80092ea <__ssvfscanf_r+0x36>
 8009da6:	f04f 0900 	mov.w	r9, #0
 8009daa:	613e      	str	r6, [r7, #16]
 8009dac:	464d      	mov	r5, r9
 8009dae:	46ca      	mov	sl, r9
 8009db0:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 8009db4:	e792      	b.n	8009cdc <__ssvfscanf_r+0xa28>
 8009db6:	46c1      	mov	r9, r8
 8009db8:	4645      	mov	r5, r8
 8009dba:	46c2      	mov	sl, r8
 8009dbc:	e78e      	b.n	8009cdc <__ssvfscanf_r+0xa28>
 8009dbe:	6a3a      	ldr	r2, [r7, #32]
 8009dc0:	3202      	adds	r2, #2
 8009dc2:	d1c9      	bne.n	8009d58 <__ssvfscanf_r+0xaa4>
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6863      	ldr	r3, [r4, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	dc8a      	bgt.n	8009ce2 <__ssvfscanf_r+0xa2e>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd0:	60fa      	str	r2, [r7, #12]
 8009dd2:	f002 f978 	bl	800c0c6 <__ssrefill_r>
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d082      	beq.n	8009ce2 <__ssvfscanf_r+0xa2e>
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	f47f ab2c 	bne.w	800943a <__ssvfscanf_r+0x186>
 8009de2:	e7c5      	b.n	8009d70 <__ssvfscanf_r+0xabc>
 8009de4:	3b01      	subs	r3, #1
 8009de6:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8009dea:	4622      	mov	r2, r4
 8009dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dee:	633b      	str	r3, [r7, #48]	; 0x30
 8009df0:	f002 f92c 	bl	800c04c <_sungetc_r>
 8009df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df6:	e7b9      	b.n	8009d6c <__ssvfscanf_r+0xab8>
 8009df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dfa:	4419      	add	r1, r3
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d103      	bne.n	8009e0c <__ssvfscanf_r+0xb58>
 8009e04:	f8db 3000 	ldr.w	r3, [fp]
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	d002      	beq.n	8009e12 <__ssvfscanf_r+0xb5e>
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	633b      	str	r3, [r7, #48]	; 0x30
 8009e12:	f1b8 0f00 	cmp.w	r8, #0
 8009e16:	d1d6      	bne.n	8009dc6 <__ssvfscanf_r+0xb12>
 8009e18:	3604      	adds	r6, #4
 8009e1a:	f1ba 0f00 	cmp.w	sl, #0
 8009e1e:	d015      	beq.n	8009e4c <__ssvfscanf_r+0xb98>
 8009e20:	1b73      	subs	r3, r6, r5
 8009e22:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8009e26:	d80f      	bhi.n	8009e48 <__ssvfscanf_r+0xb94>
 8009e28:	4628      	mov	r0, r5
 8009e2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	f000 febc 	bl	800abac <realloc>
 8009e34:	4605      	mov	r5, r0
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f43f abf7 	beq.w	800962a <__ssvfscanf_r+0x376>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8ca 0000 	str.w	r0, [sl]
 8009e42:	18c6      	adds	r6, r0, r3
 8009e44:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8009e48:	4642      	mov	r2, r8
 8009e4a:	e7bc      	b.n	8009dc6 <__ssvfscanf_r+0xb12>
 8009e4c:	4652      	mov	r2, sl
 8009e4e:	e7ba      	b.n	8009dc6 <__ssvfscanf_r+0xb12>
 8009e50:	f1b8 0f00 	cmp.w	r8, #0
 8009e54:	d019      	beq.n	8009e8a <__ssvfscanf_r+0xbd6>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	494b      	ldr	r1, [pc, #300]	; (8009f88 <__ssvfscanf_r+0xcd4>)
 8009e5a:	781a      	ldrb	r2, [r3, #0]
 8009e5c:	5c52      	ldrb	r2, [r2, r1]
 8009e5e:	0711      	lsls	r1, r2, #28
 8009e60:	f53f ae66 	bmi.w	8009b30 <__ssvfscanf_r+0x87c>
 8009e64:	3301      	adds	r3, #1
 8009e66:	6862      	ldr	r2, [r4, #4]
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	3a01      	subs	r2, #1
 8009e70:	429d      	cmp	r5, r3
 8009e72:	6062      	str	r2, [r4, #4]
 8009e74:	f43f ae5c 	beq.w	8009b30 <__ssvfscanf_r+0x87c>
 8009e78:	2a00      	cmp	r2, #0
 8009e7a:	dcec      	bgt.n	8009e56 <__ssvfscanf_r+0xba2>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e80:	f002 f921 	bl	800c0c6 <__ssrefill_r>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d0e6      	beq.n	8009e56 <__ssvfscanf_r+0xba2>
 8009e88:	e652      	b.n	8009b30 <__ssvfscanf_r+0x87c>
 8009e8a:	46b3      	mov	fp, r6
 8009e8c:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 8009e90:	f85b 6b04 	ldr.w	r6, [fp], #4
 8009e94:	d075      	beq.n	8009f82 <__ssvfscanf_r+0xcce>
 8009e96:	2e00      	cmp	r6, #0
 8009e98:	f43f ab03 	beq.w	80094a2 <__ssvfscanf_r+0x1ee>
 8009e9c:	2020      	movs	r0, #32
 8009e9e:	f000 fbef 	bl	800a680 <malloc>
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f43f aacd 	beq.w	8009444 <__ssvfscanf_r+0x190>
 8009eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eac:	6030      	str	r0, [r6, #0]
 8009eae:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8009eb2:	889d      	ldrh	r5, [r3, #4]
 8009eb4:	45a9      	cmp	r9, r5
 8009eb6:	d311      	bcc.n	8009edc <__ssvfscanf_r+0xc28>
 8009eb8:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8009ebc:	429d      	cmp	r5, r3
 8009ebe:	f63f abbc 	bhi.w	800963a <__ssvfscanf_r+0x386>
 8009ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec4:	3508      	adds	r5, #8
 8009ec6:	b2ad      	uxth	r5, r5
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	00a9      	lsls	r1, r5, #2
 8009ecc:	f000 fe6e 	bl	800abac <realloc>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	f43f abb2 	beq.w	800963a <__ssvfscanf_r+0x386>
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed8:	6018      	str	r0, [r3, #0]
 8009eda:	809d      	strh	r5, [r3, #4]
 8009edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ede:	f109 0201 	add.w	r2, r9, #1
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2520      	movs	r5, #32
 8009ee6:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8009eea:	46b1      	mov	r9, r6
 8009eec:	4646      	mov	r6, r8
 8009eee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ef0:	80ca      	strh	r2, [r1, #6]
 8009ef2:	46b0      	mov	r8, r6
 8009ef4:	6823      	ldr	r3, [r4, #0]
 8009ef6:	4924      	ldr	r1, [pc, #144]	; (8009f88 <__ssvfscanf_r+0xcd4>)
 8009ef8:	781a      	ldrb	r2, [r3, #0]
 8009efa:	5c52      	ldrb	r2, [r2, r1]
 8009efc:	0712      	lsls	r2, r2, #28
 8009efe:	d428      	bmi.n	8009f52 <__ssvfscanf_r+0xc9e>
 8009f00:	6862      	ldr	r2, [r4, #4]
 8009f02:	3a01      	subs	r2, #1
 8009f04:	6062      	str	r2, [r4, #4]
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	6022      	str	r2, [r4, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f10:	f1b9 0f00 	cmp.w	r9, #0
 8009f14:	d010      	beq.n	8009f38 <__ssvfscanf_r+0xc84>
 8009f16:	eba6 0a08 	sub.w	sl, r6, r8
 8009f1a:	45aa      	cmp	sl, r5
 8009f1c:	d30c      	bcc.n	8009f38 <__ssvfscanf_r+0xc84>
 8009f1e:	006d      	lsls	r5, r5, #1
 8009f20:	4640      	mov	r0, r8
 8009f22:	4629      	mov	r1, r5
 8009f24:	f000 fe42 	bl	800abac <realloc>
 8009f28:	4680      	mov	r8, r0
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f43f aa8a 	beq.w	8009444 <__ssvfscanf_r+0x190>
 8009f30:	eb00 060a 	add.w	r6, r0, sl
 8009f34:	f8c9 0000 	str.w	r0, [r9]
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8009f3e:	d008      	beq.n	8009f52 <__ssvfscanf_r+0xc9e>
 8009f40:	6863      	ldr	r3, [r4, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	dcd6      	bgt.n	8009ef4 <__ssvfscanf_r+0xc40>
 8009f46:	4621      	mov	r1, r4
 8009f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f4a:	f002 f8bc 	bl	800c0c6 <__ssrefill_r>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d0d0      	beq.n	8009ef4 <__ssvfscanf_r+0xc40>
 8009f52:	2300      	movs	r3, #0
 8009f54:	7033      	strb	r3, [r6, #0]
 8009f56:	eba6 0608 	sub.w	r6, r6, r8
 8009f5a:	f1b9 0f00 	cmp.w	r9, #0
 8009f5e:	d009      	beq.n	8009f74 <__ssvfscanf_r+0xcc0>
 8009f60:	1c71      	adds	r1, r6, #1
 8009f62:	428d      	cmp	r5, r1
 8009f64:	d906      	bls.n	8009f74 <__ssvfscanf_r+0xcc0>
 8009f66:	f8d9 0000 	ldr.w	r0, [r9]
 8009f6a:	f000 fe1f 	bl	800abac <realloc>
 8009f6e:	b108      	cbz	r0, 8009f74 <__ssvfscanf_r+0xcc0>
 8009f70:	f8c9 0000 	str.w	r0, [r9]
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	4433      	add	r3, r6
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f80:	e65b      	b.n	8009c3a <__ssvfscanf_r+0x986>
 8009f82:	46a9      	mov	r9, r5
 8009f84:	e7b5      	b.n	8009ef2 <__ssvfscanf_r+0xc3e>
 8009f86:	bf00      	nop
 8009f88:	0805fba5 	.word	0x0805fba5
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	f04f 0a00 	mov.w	sl, #0
 8009f92:	3b01      	subs	r3, #1
 8009f94:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009f98:	bf85      	ittet	hi
 8009f9a:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8009f9e:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8009fa0:	f04f 0b00 	movls.w	fp, #0
 8009fa4:	eb03 0b00 	addhi.w	fp, r3, r0
 8009fa8:	bf88      	it	hi
 8009faa:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009fae:	f449 6558 	orr.w	r5, r9, #3456	; 0xd80
 8009fb2:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800a144 <__ssvfscanf_r+0xe90>
 8009fb6:	bf88      	it	hi
 8009fb8:	633b      	strhi	r3, [r7, #48]	; 0x30
 8009fba:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 8009fbe:	6822      	ldr	r2, [r4, #0]
 8009fc0:	7813      	ldrb	r3, [r2, #0]
 8009fc2:	2b39      	cmp	r3, #57	; 0x39
 8009fc4:	d80f      	bhi.n	8009fe6 <__ssvfscanf_r+0xd32>
 8009fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fc8:	d91a      	bls.n	800a000 <__ssvfscanf_r+0xd4c>
 8009fca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009fce:	290e      	cmp	r1, #14
 8009fd0:	d816      	bhi.n	800a000 <__ssvfscanf_r+0xd4c>
 8009fd2:	e8df f001 	tbb	[pc, r1]
 8009fd6:	1573      	.short	0x1573
 8009fd8:	3e151573 	.word	0x3e151573
 8009fdc:	65656565 	.word	0x65656565
 8009fe0:	6c656565 	.word	0x6c656565
 8009fe4:	6c          	.byte	0x6c
 8009fe5:	00          	.byte	0x00
 8009fe6:	2b66      	cmp	r3, #102	; 0x66
 8009fe8:	d831      	bhi.n	800a04e <__ssvfscanf_r+0xd9a>
 8009fea:	2b60      	cmp	r3, #96	; 0x60
 8009fec:	d803      	bhi.n	8009ff6 <__ssvfscanf_r+0xd42>
 8009fee:	2b46      	cmp	r3, #70	; 0x46
 8009ff0:	d804      	bhi.n	8009ffc <__ssvfscanf_r+0xd48>
 8009ff2:	2b40      	cmp	r3, #64	; 0x40
 8009ff4:	d904      	bls.n	800a000 <__ssvfscanf_r+0xd4c>
 8009ff6:	69f9      	ldr	r1, [r7, #28]
 8009ff8:	290a      	cmp	r1, #10
 8009ffa:	e05d      	b.n	800a0b8 <__ssvfscanf_r+0xe04>
 8009ffc:	2b58      	cmp	r3, #88	; 0x58
 8009ffe:	d062      	beq.n	800a0c6 <__ssvfscanf_r+0xe12>
 800a000:	05e8      	lsls	r0, r5, #23
 800a002:	d511      	bpl.n	800a028 <__ssvfscanf_r+0xd74>
 800a004:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800a008:	4598      	cmp	r8, r3
 800a00a:	d908      	bls.n	800a01e <__ssvfscanf_r+0xd6a>
 800a00c:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800a010:	4622      	mov	r2, r4
 800a012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a014:	f108 39ff 	add.w	r9, r8, #4294967295
 800a018:	f002 f818 	bl	800c04c <_sungetc_r>
 800a01c:	46c8      	mov	r8, r9
 800a01e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800a022:	4598      	cmp	r8, r3
 800a024:	f43f aa3d 	beq.w	80094a2 <__ssvfscanf_r+0x1ee>
 800a028:	f015 0210 	ands.w	r2, r5, #16
 800a02c:	d166      	bne.n	800a0fc <__ssvfscanf_r+0xe48>
 800a02e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a036:	f8d7 c014 	ldr.w	ip, [r7, #20]
 800a03a:	f888 2000 	strb.w	r2, [r8]
 800a03e:	47e0      	blx	ip
 800a040:	06a9      	lsls	r1, r5, #26
 800a042:	f106 0904 	add.w	r9, r6, #4
 800a046:	d551      	bpl.n	800a0ec <__ssvfscanf_r+0xe38>
 800a048:	6833      	ldr	r3, [r6, #0]
 800a04a:	6018      	str	r0, [r3, #0]
 800a04c:	e052      	b.n	800a0f4 <__ssvfscanf_r+0xe40>
 800a04e:	2b78      	cmp	r3, #120	; 0x78
 800a050:	e7d5      	b.n	8009ffe <__ssvfscanf_r+0xd4a>
 800a052:	0529      	lsls	r1, r5, #20
 800a054:	d509      	bpl.n	800a06a <__ssvfscanf_r+0xdb6>
 800a056:	69f9      	ldr	r1, [r7, #28]
 800a058:	b919      	cbnz	r1, 800a062 <__ssvfscanf_r+0xdae>
 800a05a:	2108      	movs	r1, #8
 800a05c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 800a060:	61f9      	str	r1, [r7, #28]
 800a062:	0568      	lsls	r0, r5, #21
 800a064:	d504      	bpl.n	800a070 <__ssvfscanf_r+0xdbc>
 800a066:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
 800a06a:	f808 3b01 	strb.w	r3, [r8], #1
 800a06e:	e00b      	b.n	800a088 <__ssvfscanf_r+0xdd4>
 800a070:	f425 7560 	bic.w	r5, r5, #896	; 0x380
 800a074:	f1bb 0f00 	cmp.w	fp, #0
 800a078:	d004      	beq.n	800a084 <__ssvfscanf_r+0xdd0>
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a080:	3301      	adds	r3, #1
 800a082:	633b      	str	r3, [r7, #48]	; 0x30
 800a084:	f10a 0a01 	add.w	sl, sl, #1
 800a088:	6863      	ldr	r3, [r4, #4]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	6063      	str	r3, [r4, #4]
 800a090:	dd25      	ble.n	800a0de <__ssvfscanf_r+0xe2a>
 800a092:	3201      	adds	r2, #1
 800a094:	6022      	str	r2, [r4, #0]
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	3b01      	subs	r3, #1
 800a09a:	633b      	str	r3, [r7, #48]	; 0x30
 800a09c:	d18f      	bne.n	8009fbe <__ssvfscanf_r+0xd0a>
 800a09e:	e7af      	b.n	800a000 <__ssvfscanf_r+0xd4c>
 800a0a0:	69f9      	ldr	r1, [r7, #28]
 800a0a2:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a0a6:	61f9      	str	r1, [r7, #28]
 800a0a8:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
 800a0ac:	e7dd      	b.n	800a06a <__ssvfscanf_r+0xdb6>
 800a0ae:	69f9      	ldr	r1, [r7, #28]
 800a0b0:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a0b4:	61f9      	str	r1, [r7, #28]
 800a0b6:	2908      	cmp	r1, #8
 800a0b8:	dcf6      	bgt.n	800a0a8 <__ssvfscanf_r+0xdf4>
 800a0ba:	e7a1      	b.n	800a000 <__ssvfscanf_r+0xd4c>
 800a0bc:	0629      	lsls	r1, r5, #24
 800a0be:	d59f      	bpl.n	800a000 <__ssvfscanf_r+0xd4c>
 800a0c0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800a0c4:	e7d1      	b.n	800a06a <__ssvfscanf_r+0xdb6>
 800a0c6:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
 800a0ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a0ce:	d197      	bne.n	800a000 <__ssvfscanf_r+0xd4c>
 800a0d0:	2110      	movs	r1, #16
 800a0d2:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 800a0d6:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
 800a0da:	61f9      	str	r1, [r7, #28]
 800a0dc:	e7c5      	b.n	800a06a <__ssvfscanf_r+0xdb6>
 800a0de:	4621      	mov	r1, r4
 800a0e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0e2:	f001 fff0 	bl	800c0c6 <__ssrefill_r>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d0d5      	beq.n	800a096 <__ssvfscanf_r+0xde2>
 800a0ea:	e789      	b.n	800a000 <__ssvfscanf_r+0xd4c>
 800a0ec:	072a      	lsls	r2, r5, #28
 800a0ee:	d50e      	bpl.n	800a10e <__ssvfscanf_r+0xe5a>
 800a0f0:	6833      	ldr	r3, [r6, #0]
 800a0f2:	7018      	strb	r0, [r3, #0]
 800a0f4:	464e      	mov	r6, r9
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a0fc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800a100:	eba8 0803 	sub.w	r8, r8, r3
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	44c2      	add	sl, r8
 800a108:	4453      	add	r3, sl
 800a10a:	f7ff b98e 	b.w	800942a <__ssvfscanf_r+0x176>
 800a10e:	076b      	lsls	r3, r5, #29
 800a110:	d502      	bpl.n	800a118 <__ssvfscanf_r+0xe64>
 800a112:	6833      	ldr	r3, [r6, #0]
 800a114:	8018      	strh	r0, [r3, #0]
 800a116:	e7ed      	b.n	800a0f4 <__ssvfscanf_r+0xe40>
 800a118:	f015 0201 	ands.w	r2, r5, #1
 800a11c:	d194      	bne.n	800a048 <__ssvfscanf_r+0xd94>
 800a11e:	07ad      	lsls	r5, r5, #30
 800a120:	d592      	bpl.n	800a048 <__ssvfscanf_r+0xd94>
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <__ssvfscanf_r+0xe94>)
 800a124:	6979      	ldr	r1, [r7, #20]
 800a126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a128:	4299      	cmp	r1, r3
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800a130:	d105      	bne.n	800a13e <__ssvfscanf_r+0xe8a>
 800a132:	f001 ff89 	bl	800c048 <_strtoull_r>
 800a136:	6833      	ldr	r3, [r6, #0]
 800a138:	e9c3 0100 	strd	r0, r1, [r3]
 800a13c:	e7da      	b.n	800a0f4 <__ssvfscanf_r+0xe40>
 800a13e:	f001 fe75 	bl	800be2c <_strtoll_r>
 800a142:	e7f8      	b.n	800a136 <__ssvfscanf_r+0xe82>
 800a144:	0805fb82 	.word	0x0805fb82
 800a148:	0800bf15 	.word	0x0800bf15
 800a14c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a14e:	f000 fa7d 	bl	800a64c <_localeconv_r>
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	f04f 0b00 	mov.w	fp, #0
 800a158:	3b01      	subs	r3, #1
 800a15a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a15e:	bf85      	ittet	hi
 800a160:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
 800a164:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 800a166:	2300      	movls	r3, #0
 800a168:	185b      	addhi	r3, r3, r1
 800a16a:	bf88      	it	hi
 800a16c:	f240 115d 	movwhi	r1, #349	; 0x15d
 800a170:	46da      	mov	sl, fp
 800a172:	e9c7 bb02 	strd	fp, fp, [r7, #8]
 800a176:	6802      	ldr	r2, [r0, #0]
 800a178:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 800a17c:	bf88      	it	hi
 800a17e:	6339      	strhi	r1, [r7, #48]	; 0x30
 800a180:	f8c7 b010 	str.w	fp, [r7, #16]
 800a184:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 800a188:	6821      	ldr	r1, [r4, #0]
 800a18a:	7808      	ldrb	r0, [r1, #0]
 800a18c:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
 800a190:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 800a194:	f200 8125 	bhi.w	800a3e2 <__ssvfscanf_r+0x112e>
 800a198:	e8df f01c 	tbh	[pc, ip, lsl #1]
 800a19c:	0123008b 	.word	0x0123008b
 800a1a0:	0123008b 	.word	0x0123008b
 800a1a4:	004f0123 	.word	0x004f0123
 800a1a8:	00700070 	.word	0x00700070
 800a1ac:	00700070 	.word	0x00700070
 800a1b0:	00700070 	.word	0x00700070
 800a1b4:	00700070 	.word	0x00700070
 800a1b8:	01230070 	.word	0x01230070
 800a1bc:	01230123 	.word	0x01230123
 800a1c0:	01230123 	.word	0x01230123
 800a1c4:	01230123 	.word	0x01230123
 800a1c8:	006d00b2 	.word	0x006d00b2
 800a1cc:	006d006d 	.word	0x006d006d
 800a1d0:	00ea011f 	.word	0x00ea011f
 800a1d4:	01230123 	.word	0x01230123
 800a1d8:	012300d4 	.word	0x012300d4
 800a1dc:	01230123 	.word	0x01230123
 800a1e0:	00930123 	.word	0x00930123
 800a1e4:	01020123 	.word	0x01020123
 800a1e8:	01230123 	.word	0x01230123
 800a1ec:	00f60123 	.word	0x00f60123
 800a1f0:	01230123 	.word	0x01230123
 800a1f4:	00740123 	.word	0x00740123
 800a1f8:	012300fc 	.word	0x012300fc
 800a1fc:	01230123 	.word	0x01230123
 800a200:	01230123 	.word	0x01230123
 800a204:	01230123 	.word	0x01230123
 800a208:	006d00b2 	.word	0x006d00b2
 800a20c:	006d006d 	.word	0x006d006d
 800a210:	00ea011f 	.word	0x00ea011f
 800a214:	01230123 	.word	0x01230123
 800a218:	012300d4 	.word	0x012300d4
 800a21c:	01230123 	.word	0x01230123
 800a220:	00930123 	.word	0x00930123
 800a224:	01020123 	.word	0x01020123
 800a228:	01230123 	.word	0x01230123
 800a22c:	00f60123 	.word	0x00f60123
 800a230:	01230123 	.word	0x01230123
 800a234:	00740123 	.word	0x00740123
 800a238:	00fc      	.short	0x00fc
 800a23a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800a23e:	d01d      	beq.n	800a27c <__ssvfscanf_r+0xfc8>
 800a240:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800a244:	f10a 0a01 	add.w	sl, sl, #1
 800a248:	b11b      	cbz	r3, 800a252 <__ssvfscanf_r+0xf9e>
 800a24a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a24c:	3b01      	subs	r3, #1
 800a24e:	3001      	adds	r0, #1
 800a250:	6338      	str	r0, [r7, #48]	; 0x30
 800a252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a254:	3801      	subs	r0, #1
 800a256:	6338      	str	r0, [r7, #48]	; 0x30
 800a258:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a25a:	3001      	adds	r0, #1
 800a25c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a25e:	6860      	ldr	r0, [r4, #4]
 800a260:	3801      	subs	r0, #1
 800a262:	2800      	cmp	r0, #0
 800a264:	6060      	str	r0, [r4, #4]
 800a266:	f340 80ce 	ble.w	800a406 <__ssvfscanf_r+0x1152>
 800a26a:	3101      	adds	r1, #1
 800a26c:	6021      	str	r1, [r4, #0]
 800a26e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a270:	2900      	cmp	r1, #0
 800a272:	d189      	bne.n	800a188 <__ssvfscanf_r+0xed4>
 800a274:	e050      	b.n	800a318 <__ssvfscanf_r+0x1064>
 800a276:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800a27a:	d04d      	beq.n	800a318 <__ssvfscanf_r+0x1064>
 800a27c:	eb1b 0f08 	cmn.w	fp, r8
 800a280:	d044      	beq.n	800a30c <__ssvfscanf_r+0x1058>
 800a282:	e049      	b.n	800a318 <__ssvfscanf_r+0x1064>
 800a284:	f405 6c18 	and.w	ip, r5, #2432	; 0x980
 800a288:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800a28c:	d144      	bne.n	800a318 <__ssvfscanf_r+0x1064>
 800a28e:	f1ba 0f01 	cmp.w	sl, #1
 800a292:	d141      	bne.n	800a318 <__ssvfscanf_r+0x1064>
 800a294:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800a298:	f809 cb01 	strb.w	ip, [r9], #1
 800a29c:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 800a2a0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 800a2a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a2a8:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 800a2ac:	f04f 0a00 	mov.w	sl, #0
 800a2b0:	e004      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a2b2:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a2b6:	d02f      	beq.n	800a318 <__ssvfscanf_r+0x1064>
 800a2b8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800a2bc:	f809 0b01 	strb.w	r0, [r9], #1
 800a2c0:	e7c7      	b.n	800a252 <__ssvfscanf_r+0xf9e>
 800a2c2:	f1bb 0f00 	cmp.w	fp, #0
 800a2c6:	d10c      	bne.n	800a2e2 <__ssvfscanf_r+0x102e>
 800a2c8:	f1ba 0f00 	cmp.w	sl, #0
 800a2cc:	d10d      	bne.n	800a2ea <__ssvfscanf_r+0x1036>
 800a2ce:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800a2d2:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800a2d6:	d108      	bne.n	800a2ea <__ssvfscanf_r+0x1036>
 800a2d8:	f04f 0b01 	mov.w	fp, #1
 800a2dc:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800a2e0:	e7ec      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a2e2:	f1bb 0f02 	cmp.w	fp, #2
 800a2e6:	f000 8088 	beq.w	800a3fa <__ssvfscanf_r+0x1146>
 800a2ea:	f1b8 0f01 	cmp.w	r8, #1
 800a2ee:	d002      	beq.n	800a2f6 <__ssvfscanf_r+0x1042>
 800a2f0:	f1b8 0f04 	cmp.w	r8, #4
 800a2f4:	d110      	bne.n	800a318 <__ssvfscanf_r+0x1064>
 800a2f6:	f108 0801 	add.w	r8, r8, #1
 800a2fa:	fa5f f888 	uxtb.w	r8, r8
 800a2fe:	e7dd      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a300:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800a304:	d005      	beq.n	800a312 <__ssvfscanf_r+0x105e>
 800a306:	eb1b 0f08 	cmn.w	fp, r8
 800a30a:	d102      	bne.n	800a312 <__ssvfscanf_r+0x105e>
 800a30c:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 800a310:	e7d4      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a312:	f1bb 0f01 	cmp.w	fp, #1
 800a316:	d073      	beq.n	800a400 <__ssvfscanf_r+0x114c>
 800a318:	f1ba 0f00 	cmp.w	sl, #0
 800a31c:	d001      	beq.n	800a322 <__ssvfscanf_r+0x106e>
 800a31e:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800a322:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a326:	f1bb 0f01 	cmp.w	fp, #1
 800a32a:	d878      	bhi.n	800a41e <__ssvfscanf_r+0x116a>
 800a32c:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800a330:	45a9      	cmp	r9, r5
 800a332:	f67f a8b6 	bls.w	80094a2 <__ssvfscanf_r+0x1ee>
 800a336:	4622      	mov	r2, r4
 800a338:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800a33c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a33e:	f001 fe85 	bl	800c04c <_sungetc_r>
 800a342:	e7f5      	b.n	800a330 <__ssvfscanf_r+0x107c>
 800a344:	f1b8 0f00 	cmp.w	r8, #0
 800a348:	d10c      	bne.n	800a364 <__ssvfscanf_r+0x10b0>
 800a34a:	f1ba 0f00 	cmp.w	sl, #0
 800a34e:	d1e6      	bne.n	800a31e <__ssvfscanf_r+0x106a>
 800a350:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800a354:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800a358:	d1e3      	bne.n	800a322 <__ssvfscanf_r+0x106e>
 800a35a:	f04f 0801 	mov.w	r8, #1
 800a35e:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800a362:	e7ab      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a364:	f1b8 0f03 	cmp.w	r8, #3
 800a368:	d0c5      	beq.n	800a2f6 <__ssvfscanf_r+0x1042>
 800a36a:	f1b8 0f05 	cmp.w	r8, #5
 800a36e:	e7c1      	b.n	800a2f4 <__ssvfscanf_r+0x1040>
 800a370:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800a374:	d002      	beq.n	800a37c <__ssvfscanf_r+0x10c8>
 800a376:	eb1b 0f08 	cmn.w	fp, r8
 800a37a:	d0c7      	beq.n	800a30c <__ssvfscanf_r+0x1058>
 800a37c:	f1b8 0f02 	cmp.w	r8, #2
 800a380:	d1ca      	bne.n	800a318 <__ssvfscanf_r+0x1064>
 800a382:	f04f 0803 	mov.w	r8, #3
 800a386:	e799      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a388:	f1b8 0f06 	cmp.w	r8, #6
 800a38c:	d1c4      	bne.n	800a318 <__ssvfscanf_r+0x1064>
 800a38e:	f04f 0807 	mov.w	r8, #7
 800a392:	e793      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a394:	f1b8 0f07 	cmp.w	r8, #7
 800a398:	d1be      	bne.n	800a318 <__ssvfscanf_r+0x1064>
 800a39a:	f04f 0808 	mov.w	r8, #8
 800a39e:	e78d      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a3a0:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800a3a4:	d0b8      	beq.n	800a318 <__ssvfscanf_r+0x1064>
 800a3a6:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 800a3aa:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800a3ae:	d005      	beq.n	800a3bc <__ssvfscanf_r+0x1108>
 800a3b0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800a3b4:	d0b0      	beq.n	800a318 <__ssvfscanf_r+0x1064>
 800a3b6:	f1ba 0f00 	cmp.w	sl, #0
 800a3ba:	d0b2      	beq.n	800a322 <__ssvfscanf_r+0x106e>
 800a3bc:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a3c0:	bf08      	it	eq
 800a3c2:	f8d7 c010 	ldreq.w	ip, [r7, #16]
 800a3c6:	f425 6578 	bic.w	r5, r5, #3968	; 0xf80
 800a3ca:	bf04      	itt	eq
 800a3cc:	ebaa 0c0c 	subeq.w	ip, sl, ip
 800a3d0:	e9c7 9c02 	strdeq	r9, ip, [r7, #8]
 800a3d4:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 800a3d8:	e768      	b.n	800a2ac <__ssvfscanf_r+0xff8>
 800a3da:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800a3de:	d0e2      	beq.n	800a3a6 <__ssvfscanf_r+0x10f2>
 800a3e0:	e74c      	b.n	800a27c <__ssvfscanf_r+0xfc8>
 800a3e2:	f892 c000 	ldrb.w	ip, [r2]
 800a3e6:	4584      	cmp	ip, r0
 800a3e8:	d196      	bne.n	800a318 <__ssvfscanf_r+0x1064>
 800a3ea:	f415 7f00 	tst.w	r5, #512	; 0x200
 800a3ee:	d093      	beq.n	800a318 <__ssvfscanf_r+0x1064>
 800a3f0:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 800a3f4:	f8c7 a010 	str.w	sl, [r7, #16]
 800a3f8:	e760      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a3fa:	f04f 0b03 	mov.w	fp, #3
 800a3fe:	e75d      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a400:	f04f 0b02 	mov.w	fp, #2
 800a404:	e75a      	b.n	800a2bc <__ssvfscanf_r+0x1008>
 800a406:	4621      	mov	r1, r4
 800a408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a40a:	e9c7 2300 	strd	r2, r3, [r7]
 800a40e:	f001 fe5a 	bl	800c0c6 <__ssrefill_r>
 800a412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a416:	2800      	cmp	r0, #0
 800a418:	f43f af29 	beq.w	800a26e <__ssvfscanf_r+0xfba>
 800a41c:	e77c      	b.n	800a318 <__ssvfscanf_r+0x1064>
 800a41e:	f108 33ff 	add.w	r3, r8, #4294967295
 800a422:	2b06      	cmp	r3, #6
 800a424:	d827      	bhi.n	800a476 <__ssvfscanf_r+0x11c2>
 800a426:	f1b8 0f02 	cmp.w	r8, #2
 800a42a:	d834      	bhi.n	800a496 <__ssvfscanf_r+0x11e2>
 800a42c:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800a430:	45a9      	cmp	r9, r5
 800a432:	f67f a836 	bls.w	80094a2 <__ssvfscanf_r+0x1ee>
 800a436:	4622      	mov	r2, r4
 800a438:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800a43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a43e:	f001 fe05 	bl	800c04c <_sungetc_r>
 800a442:	e7f5      	b.n	800a430 <__ssvfscanf_r+0x117c>
 800a444:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800a448:	4622      	mov	r2, r4
 800a44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44c:	633b      	str	r3, [r7, #48]	; 0x30
 800a44e:	f001 fdfd 	bl	800c04c <_sungetc_r>
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a458:	fa5f fb8b 	uxtb.w	fp, fp
 800a45c:	f1bb 0f02 	cmp.w	fp, #2
 800a460:	d1f0      	bne.n	800a444 <__ssvfscanf_r+0x1190>
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a464:	f1a8 0803 	sub.w	r8, r8, #3
 800a468:	fa5f f888 	uxtb.w	r8, r8
 800a46c:	eba3 0308 	sub.w	r3, r3, r8
 800a470:	eba9 0908 	sub.w	r9, r9, r8
 800a474:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a476:	05e9      	lsls	r1, r5, #23
 800a478:	d52d      	bpl.n	800a4d6 <__ssvfscanf_r+0x1222>
 800a47a:	056a      	lsls	r2, r5, #21
 800a47c:	d50e      	bpl.n	800a49c <__ssvfscanf_r+0x11e8>
 800a47e:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800a482:	45a9      	cmp	r9, r5
 800a484:	f67f a80d 	bls.w	80094a2 <__ssvfscanf_r+0x1ee>
 800a488:	4622      	mov	r2, r4
 800a48a:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800a48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a490:	f001 fddc 	bl	800c04c <_sungetc_r>
 800a494:	e7f5      	b.n	800a482 <__ssvfscanf_r+0x11ce>
 800a496:	46c3      	mov	fp, r8
 800a498:	464b      	mov	r3, r9
 800a49a:	e7db      	b.n	800a454 <__ssvfscanf_r+0x11a0>
 800a49c:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 800a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a2:	2965      	cmp	r1, #101	; 0x65
 800a4a4:	f109 38ff 	add.w	r8, r9, #4294967295
 800a4a8:	f103 3bff 	add.w	fp, r3, #4294967295
 800a4ac:	d00c      	beq.n	800a4c8 <__ssvfscanf_r+0x1214>
 800a4ae:	2945      	cmp	r1, #69	; 0x45
 800a4b0:	d00a      	beq.n	800a4c8 <__ssvfscanf_r+0x1214>
 800a4b2:	4622      	mov	r2, r4
 800a4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b6:	f001 fdc9 	bl	800c04c <_sungetc_r>
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 800a4c0:	f1a9 0802 	sub.w	r8, r9, #2
 800a4c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a4c8:	46c1      	mov	r9, r8
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ce:	f001 fdbd 	bl	800c04c <_sungetc_r>
 800a4d2:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800a4d6:	f015 0210 	ands.w	r2, r5, #16
 800a4da:	f47e af06 	bne.w	80092ea <__ssvfscanf_r+0x36>
 800a4de:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 800a4e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4e6:	f889 2000 	strb.w	r2, [r9]
 800a4ea:	d119      	bne.n	800a520 <__ssvfscanf_r+0x126c>
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	4553      	cmp	r3, sl
 800a4f0:	eba3 020a 	sub.w	r2, r3, sl
 800a4f4:	d121      	bne.n	800a53a <__ssvfscanf_r+0x1286>
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4fa:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800a4fe:	f001 fb7b 	bl	800bbf8 <_strtod_r>
 800a502:	07eb      	lsls	r3, r5, #31
 800a504:	4680      	mov	r8, r0
 800a506:	4689      	mov	r9, r1
 800a508:	f106 0a04 	add.w	sl, r6, #4
 800a50c:	d520      	bpl.n	800a550 <__ssvfscanf_r+0x129c>
 800a50e:	6833      	ldr	r3, [r6, #0]
 800a510:	e9c3 8900 	strd	r8, r9, [r3]
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	4656      	mov	r6, sl
 800a518:	3301      	adds	r3, #1
 800a51a:	627b      	str	r3, [r7, #36]	; 0x24
 800a51c:	f7fe bee5 	b.w	80092ea <__ssvfscanf_r+0x36>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0e7      	beq.n	800a4f6 <__ssvfscanf_r+0x1242>
 800a526:	68b9      	ldr	r1, [r7, #8]
 800a528:	230a      	movs	r3, #10
 800a52a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52c:	3101      	adds	r1, #1
 800a52e:	f001 fbe5 	bl	800bcfc <_strtol_r>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800a538:	1ac2      	subs	r2, r0, r3
 800a53a:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 800a53e:	4599      	cmp	r9, r3
 800a540:	bf28      	it	cs
 800a542:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 800a546:	4648      	mov	r0, r9
 800a548:	4911      	ldr	r1, [pc, #68]	; (800a590 <__ssvfscanf_r+0x12dc>)
 800a54a:	f000 fd2b 	bl	800afa4 <sprintf>
 800a54e:	e7d2      	b.n	800a4f6 <__ssvfscanf_r+0x1242>
 800a550:	07aa      	lsls	r2, r5, #30
 800a552:	6836      	ldr	r6, [r6, #0]
 800a554:	d502      	bpl.n	800a55c <__ssvfscanf_r+0x12a8>
 800a556:	e9c6 8900 	strd	r8, r9, [r6]
 800a55a:	e7db      	b.n	800a514 <__ssvfscanf_r+0x1260>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	f7f6 fac0 	bl	8000ae4 <__aeabi_dcmpun>
 800a564:	b120      	cbz	r0, 800a570 <__ssvfscanf_r+0x12bc>
 800a566:	480b      	ldr	r0, [pc, #44]	; (800a594 <__ssvfscanf_r+0x12e0>)
 800a568:	f000 fd18 	bl	800af9c <nanf>
 800a56c:	6030      	str	r0, [r6, #0]
 800a56e:	e7d1      	b.n	800a514 <__ssvfscanf_r+0x1260>
 800a570:	4640      	mov	r0, r8
 800a572:	4649      	mov	r1, r9
 800a574:	f7f6 fb14 	bl	8000ba0 <__aeabi_d2f>
 800a578:	e7f8      	b.n	800a56c <__ssvfscanf_r+0x12b8>
 800a57a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a57e:	6818      	ldr	r0, [r3, #0]
 800a580:	f000 f886 	bl	800a690 <free>
 800a584:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a588:	3401      	adds	r4, #1
 800a58a:	601e      	str	r6, [r3, #0]
 800a58c:	f7ff b857 	b.w	800963e <__ssvfscanf_r+0x38a>
 800a590:	0805fb7c 	.word	0x0805fb7c
 800a594:	0805ffcf 	.word	0x0805ffcf

0800a598 <_write_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4d05      	ldr	r5, [pc, #20]	; (800a5b8 <_write_r+0x20>)
 800a5a4:	602a      	str	r2, [r5, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f7fb f81c 	bl	80055e4 <_write>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d102      	bne.n	800a5b6 <_write_r+0x1e>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b103      	cbz	r3, 800a5b6 <_write_r+0x1e>
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	20000c4c 	.word	0x20000c4c

0800a5bc <register_fini>:
 800a5bc:	4b02      	ldr	r3, [pc, #8]	; (800a5c8 <register_fini+0xc>)
 800a5be:	b113      	cbz	r3, 800a5c6 <register_fini+0xa>
 800a5c0:	4802      	ldr	r0, [pc, #8]	; (800a5cc <register_fini+0x10>)
 800a5c2:	f000 b805 	b.w	800a5d0 <atexit>
 800a5c6:	4770      	bx	lr
 800a5c8:	00000000 	.word	0x00000000
 800a5cc:	0800a5fd 	.word	0x0800a5fd

0800a5d0 <atexit>:
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f002 bff0 	b.w	800d5bc <__register_exitproc>

0800a5dc <_close_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	2300      	movs	r3, #0
 800a5e0:	4d05      	ldr	r5, [pc, #20]	; (800a5f8 <_close_r+0x1c>)
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	602b      	str	r3, [r5, #0]
 800a5e8:	f7fb f818 	bl	800561c <_close>
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	d102      	bne.n	800a5f6 <_close_r+0x1a>
 800a5f0:	682b      	ldr	r3, [r5, #0]
 800a5f2:	b103      	cbz	r3, 800a5f6 <_close_r+0x1a>
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	bd38      	pop	{r3, r4, r5, pc}
 800a5f8:	20000c4c 	.word	0x20000c4c

0800a5fc <__libc_fini_array>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	4d07      	ldr	r5, [pc, #28]	; (800a61c <__libc_fini_array+0x20>)
 800a600:	4c07      	ldr	r4, [pc, #28]	; (800a620 <__libc_fini_array+0x24>)
 800a602:	1b64      	subs	r4, r4, r5
 800a604:	10a4      	asrs	r4, r4, #2
 800a606:	b91c      	cbnz	r4, 800a610 <__libc_fini_array+0x14>
 800a608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a60c:	f007 bad4 	b.w	8011bb8 <_fini>
 800a610:	3c01      	subs	r4, #1
 800a612:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a616:	4798      	blx	r3
 800a618:	e7f5      	b.n	800a606 <__libc_fini_array+0xa>
 800a61a:	bf00      	nop
 800a61c:	080601d8 	.word	0x080601d8
 800a620:	080601dc 	.word	0x080601dc

0800a624 <iswspace>:
 800a624:	2100      	movs	r1, #0
 800a626:	f000 b801 	b.w	800a62c <iswspace_l>
	...

0800a62c <iswspace_l>:
 800a62c:	28ff      	cmp	r0, #255	; 0xff
 800a62e:	bf9d      	ittte	ls
 800a630:	4b02      	ldrls	r3, [pc, #8]	; (800a63c <iswspace_l+0x10>)
 800a632:	5cc0      	ldrbls	r0, [r0, r3]
 800a634:	f000 0008 	andls.w	r0, r0, #8
 800a638:	2000      	movhi	r0, #0
 800a63a:	4770      	bx	lr
 800a63c:	0805fba5 	.word	0x0805fba5

0800a640 <__locale_mb_cur_max>:
 800a640:	4b01      	ldr	r3, [pc, #4]	; (800a648 <__locale_mb_cur_max+0x8>)
 800a642:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800a646:	4770      	bx	lr
 800a648:	2000047c 	.word	0x2000047c

0800a64c <_localeconv_r>:
 800a64c:	4800      	ldr	r0, [pc, #0]	; (800a650 <_localeconv_r+0x4>)
 800a64e:	4770      	bx	lr
 800a650:	2000056c 	.word	0x2000056c

0800a654 <__retarget_lock_init_recursive>:
 800a654:	4770      	bx	lr

0800a656 <__retarget_lock_close_recursive>:
 800a656:	4770      	bx	lr

0800a658 <__retarget_lock_acquire_recursive>:
 800a658:	4770      	bx	lr

0800a65a <__retarget_lock_release_recursive>:
 800a65a:	4770      	bx	lr

0800a65c <_lseek_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4604      	mov	r4, r0
 800a660:	4608      	mov	r0, r1
 800a662:	4611      	mov	r1, r2
 800a664:	2200      	movs	r2, #0
 800a666:	4d05      	ldr	r5, [pc, #20]	; (800a67c <_lseek_r+0x20>)
 800a668:	602a      	str	r2, [r5, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f7fa fffa 	bl	8005664 <_lseek>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_lseek_r+0x1e>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_lseek_r+0x1e>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20000c4c 	.word	0x20000c4c

0800a680 <malloc>:
 800a680:	4b02      	ldr	r3, [pc, #8]	; (800a68c <malloc+0xc>)
 800a682:	4601      	mov	r1, r0
 800a684:	6818      	ldr	r0, [r3, #0]
 800a686:	f000 b80b 	b.w	800a6a0 <_malloc_r>
 800a68a:	bf00      	nop
 800a68c:	20000048 	.word	0x20000048

0800a690 <free>:
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <free+0xc>)
 800a692:	4601      	mov	r1, r0
 800a694:	6818      	ldr	r0, [r3, #0]
 800a696:	f003 bf85 	b.w	800e5a4 <_free_r>
 800a69a:	bf00      	nop
 800a69c:	20000048 	.word	0x20000048

0800a6a0 <_malloc_r>:
 800a6a0:	f101 030b 	add.w	r3, r1, #11
 800a6a4:	2b16      	cmp	r3, #22
 800a6a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	d906      	bls.n	800a6bc <_malloc_r+0x1c>
 800a6ae:	f033 0707 	bics.w	r7, r3, #7
 800a6b2:	d504      	bpl.n	800a6be <_malloc_r+0x1e>
 800a6b4:	230c      	movs	r3, #12
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	2400      	movs	r4, #0
 800a6ba:	e1a3      	b.n	800aa04 <_malloc_r+0x364>
 800a6bc:	2710      	movs	r7, #16
 800a6be:	42b9      	cmp	r1, r7
 800a6c0:	d8f8      	bhi.n	800a6b4 <_malloc_r+0x14>
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 fa54 	bl	800ab70 <__malloc_lock>
 800a6c8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800a6cc:	4eaf      	ldr	r6, [pc, #700]	; (800a98c <_malloc_r+0x2ec>)
 800a6ce:	d237      	bcs.n	800a740 <_malloc_r+0xa0>
 800a6d0:	f107 0208 	add.w	r2, r7, #8
 800a6d4:	4432      	add	r2, r6
 800a6d6:	6854      	ldr	r4, [r2, #4]
 800a6d8:	f1a2 0108 	sub.w	r1, r2, #8
 800a6dc:	428c      	cmp	r4, r1
 800a6de:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800a6e2:	d102      	bne.n	800a6ea <_malloc_r+0x4a>
 800a6e4:	68d4      	ldr	r4, [r2, #12]
 800a6e6:	42a2      	cmp	r2, r4
 800a6e8:	d010      	beq.n	800a70c <_malloc_r+0x6c>
 800a6ea:	6863      	ldr	r3, [r4, #4]
 800a6ec:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a6f0:	f023 0303 	bic.w	r3, r3, #3
 800a6f4:	60ca      	str	r2, [r1, #12]
 800a6f6:	4423      	add	r3, r4
 800a6f8:	6091      	str	r1, [r2, #8]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	f042 0201 	orr.w	r2, r2, #1
 800a700:	605a      	str	r2, [r3, #4]
 800a702:	4628      	mov	r0, r5
 800a704:	f000 fa3a 	bl	800ab7c <__malloc_unlock>
 800a708:	3408      	adds	r4, #8
 800a70a:	e17b      	b.n	800aa04 <_malloc_r+0x364>
 800a70c:	3302      	adds	r3, #2
 800a70e:	6934      	ldr	r4, [r6, #16]
 800a710:	499f      	ldr	r1, [pc, #636]	; (800a990 <_malloc_r+0x2f0>)
 800a712:	428c      	cmp	r4, r1
 800a714:	d077      	beq.n	800a806 <_malloc_r+0x166>
 800a716:	6862      	ldr	r2, [r4, #4]
 800a718:	f022 0c03 	bic.w	ip, r2, #3
 800a71c:	ebac 0007 	sub.w	r0, ip, r7
 800a720:	280f      	cmp	r0, #15
 800a722:	dd48      	ble.n	800a7b6 <_malloc_r+0x116>
 800a724:	19e2      	adds	r2, r4, r7
 800a726:	f040 0301 	orr.w	r3, r0, #1
 800a72a:	f047 0701 	orr.w	r7, r7, #1
 800a72e:	6067      	str	r7, [r4, #4]
 800a730:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a734:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a738:	6053      	str	r3, [r2, #4]
 800a73a:	f844 000c 	str.w	r0, [r4, ip]
 800a73e:	e7e0      	b.n	800a702 <_malloc_r+0x62>
 800a740:	0a7b      	lsrs	r3, r7, #9
 800a742:	d02a      	beq.n	800a79a <_malloc_r+0xfa>
 800a744:	2b04      	cmp	r3, #4
 800a746:	d812      	bhi.n	800a76e <_malloc_r+0xce>
 800a748:	09bb      	lsrs	r3, r7, #6
 800a74a:	3338      	adds	r3, #56	; 0x38
 800a74c:	1c5a      	adds	r2, r3, #1
 800a74e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800a752:	6854      	ldr	r4, [r2, #4]
 800a754:	f1a2 0c08 	sub.w	ip, r2, #8
 800a758:	4564      	cmp	r4, ip
 800a75a:	d006      	beq.n	800a76a <_malloc_r+0xca>
 800a75c:	6862      	ldr	r2, [r4, #4]
 800a75e:	f022 0203 	bic.w	r2, r2, #3
 800a762:	1bd0      	subs	r0, r2, r7
 800a764:	280f      	cmp	r0, #15
 800a766:	dd1c      	ble.n	800a7a2 <_malloc_r+0x102>
 800a768:	3b01      	subs	r3, #1
 800a76a:	3301      	adds	r3, #1
 800a76c:	e7cf      	b.n	800a70e <_malloc_r+0x6e>
 800a76e:	2b14      	cmp	r3, #20
 800a770:	d801      	bhi.n	800a776 <_malloc_r+0xd6>
 800a772:	335b      	adds	r3, #91	; 0x5b
 800a774:	e7ea      	b.n	800a74c <_malloc_r+0xac>
 800a776:	2b54      	cmp	r3, #84	; 0x54
 800a778:	d802      	bhi.n	800a780 <_malloc_r+0xe0>
 800a77a:	0b3b      	lsrs	r3, r7, #12
 800a77c:	336e      	adds	r3, #110	; 0x6e
 800a77e:	e7e5      	b.n	800a74c <_malloc_r+0xac>
 800a780:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a784:	d802      	bhi.n	800a78c <_malloc_r+0xec>
 800a786:	0bfb      	lsrs	r3, r7, #15
 800a788:	3377      	adds	r3, #119	; 0x77
 800a78a:	e7df      	b.n	800a74c <_malloc_r+0xac>
 800a78c:	f240 5254 	movw	r2, #1364	; 0x554
 800a790:	4293      	cmp	r3, r2
 800a792:	d804      	bhi.n	800a79e <_malloc_r+0xfe>
 800a794:	0cbb      	lsrs	r3, r7, #18
 800a796:	337c      	adds	r3, #124	; 0x7c
 800a798:	e7d8      	b.n	800a74c <_malloc_r+0xac>
 800a79a:	233f      	movs	r3, #63	; 0x3f
 800a79c:	e7d6      	b.n	800a74c <_malloc_r+0xac>
 800a79e:	237e      	movs	r3, #126	; 0x7e
 800a7a0:	e7d4      	b.n	800a74c <_malloc_r+0xac>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	68e1      	ldr	r1, [r4, #12]
 800a7a6:	db04      	blt.n	800a7b2 <_malloc_r+0x112>
 800a7a8:	68a3      	ldr	r3, [r4, #8]
 800a7aa:	60d9      	str	r1, [r3, #12]
 800a7ac:	608b      	str	r3, [r1, #8]
 800a7ae:	18a3      	adds	r3, r4, r2
 800a7b0:	e7a3      	b.n	800a6fa <_malloc_r+0x5a>
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	e7d0      	b.n	800a758 <_malloc_r+0xb8>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800a7bc:	db07      	blt.n	800a7ce <_malloc_r+0x12e>
 800a7be:	44a4      	add	ip, r4
 800a7c0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a7c4:	f043 0301 	orr.w	r3, r3, #1
 800a7c8:	f8cc 3004 	str.w	r3, [ip, #4]
 800a7cc:	e799      	b.n	800a702 <_malloc_r+0x62>
 800a7ce:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800a7d2:	6870      	ldr	r0, [r6, #4]
 800a7d4:	f080 8094 	bcs.w	800a900 <_malloc_r+0x260>
 800a7d8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800a7dc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800a7e0:	f04f 0c01 	mov.w	ip, #1
 800a7e4:	fa0c fc0e 	lsl.w	ip, ip, lr
 800a7e8:	ea4c 0000 	orr.w	r0, ip, r0
 800a7ec:	3201      	adds	r2, #1
 800a7ee:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800a7f2:	6070      	str	r0, [r6, #4]
 800a7f4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800a7f8:	3808      	subs	r0, #8
 800a7fa:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800a7fe:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800a802:	f8cc 400c 	str.w	r4, [ip, #12]
 800a806:	2001      	movs	r0, #1
 800a808:	109a      	asrs	r2, r3, #2
 800a80a:	fa00 f202 	lsl.w	r2, r0, r2
 800a80e:	6870      	ldr	r0, [r6, #4]
 800a810:	4290      	cmp	r0, r2
 800a812:	d326      	bcc.n	800a862 <_malloc_r+0x1c2>
 800a814:	4210      	tst	r0, r2
 800a816:	d106      	bne.n	800a826 <_malloc_r+0x186>
 800a818:	f023 0303 	bic.w	r3, r3, #3
 800a81c:	0052      	lsls	r2, r2, #1
 800a81e:	4210      	tst	r0, r2
 800a820:	f103 0304 	add.w	r3, r3, #4
 800a824:	d0fa      	beq.n	800a81c <_malloc_r+0x17c>
 800a826:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800a82a:	46c1      	mov	r9, r8
 800a82c:	469e      	mov	lr, r3
 800a82e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a832:	454c      	cmp	r4, r9
 800a834:	f040 80b8 	bne.w	800a9a8 <_malloc_r+0x308>
 800a838:	f10e 0e01 	add.w	lr, lr, #1
 800a83c:	f01e 0f03 	tst.w	lr, #3
 800a840:	f109 0908 	add.w	r9, r9, #8
 800a844:	d1f3      	bne.n	800a82e <_malloc_r+0x18e>
 800a846:	0798      	lsls	r0, r3, #30
 800a848:	f040 80e2 	bne.w	800aa10 <_malloc_r+0x370>
 800a84c:	6873      	ldr	r3, [r6, #4]
 800a84e:	ea23 0302 	bic.w	r3, r3, r2
 800a852:	6073      	str	r3, [r6, #4]
 800a854:	6870      	ldr	r0, [r6, #4]
 800a856:	0052      	lsls	r2, r2, #1
 800a858:	4290      	cmp	r0, r2
 800a85a:	d302      	bcc.n	800a862 <_malloc_r+0x1c2>
 800a85c:	2a00      	cmp	r2, #0
 800a85e:	f040 80e3 	bne.w	800aa28 <_malloc_r+0x388>
 800a862:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800a866:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a86a:	f023 0903 	bic.w	r9, r3, #3
 800a86e:	45b9      	cmp	r9, r7
 800a870:	d304      	bcc.n	800a87c <_malloc_r+0x1dc>
 800a872:	eba9 0207 	sub.w	r2, r9, r7
 800a876:	2a0f      	cmp	r2, #15
 800a878:	f300 8141 	bgt.w	800aafe <_malloc_r+0x45e>
 800a87c:	4b45      	ldr	r3, [pc, #276]	; (800a994 <_malloc_r+0x2f4>)
 800a87e:	2008      	movs	r0, #8
 800a880:	6819      	ldr	r1, [r3, #0]
 800a882:	eb0a 0b09 	add.w	fp, sl, r9
 800a886:	3110      	adds	r1, #16
 800a888:	4439      	add	r1, r7
 800a88a:	9101      	str	r1, [sp, #4]
 800a88c:	f002 fe44 	bl	800d518 <sysconf>
 800a890:	4a41      	ldr	r2, [pc, #260]	; (800a998 <_malloc_r+0x2f8>)
 800a892:	9901      	ldr	r1, [sp, #4]
 800a894:	6813      	ldr	r3, [r2, #0]
 800a896:	4680      	mov	r8, r0
 800a898:	3301      	adds	r3, #1
 800a89a:	bf1f      	itttt	ne
 800a89c:	f101 31ff 	addne.w	r1, r1, #4294967295
 800a8a0:	1809      	addne	r1, r1, r0
 800a8a2:	4243      	negne	r3, r0
 800a8a4:	4019      	andne	r1, r3
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	9101      	str	r1, [sp, #4]
 800a8aa:	f000 fb2f 	bl	800af0c <_sbrk_r>
 800a8ae:	1c42      	adds	r2, r0, #1
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	f000 80f7 	beq.w	800aaa4 <_malloc_r+0x404>
 800a8b6:	4583      	cmp	fp, r0
 800a8b8:	9901      	ldr	r1, [sp, #4]
 800a8ba:	4a37      	ldr	r2, [pc, #220]	; (800a998 <_malloc_r+0x2f8>)
 800a8bc:	d902      	bls.n	800a8c4 <_malloc_r+0x224>
 800a8be:	45b2      	cmp	sl, r6
 800a8c0:	f040 80f0 	bne.w	800aaa4 <_malloc_r+0x404>
 800a8c4:	4b35      	ldr	r3, [pc, #212]	; (800a99c <_malloc_r+0x2fc>)
 800a8c6:	45a3      	cmp	fp, r4
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	f108 3cff 	add.w	ip, r8, #4294967295
 800a8ce:	4408      	add	r0, r1
 800a8d0:	6018      	str	r0, [r3, #0]
 800a8d2:	f040 80ab 	bne.w	800aa2c <_malloc_r+0x38c>
 800a8d6:	ea1b 0f0c 	tst.w	fp, ip
 800a8da:	f040 80a7 	bne.w	800aa2c <_malloc_r+0x38c>
 800a8de:	68b2      	ldr	r2, [r6, #8]
 800a8e0:	4449      	add	r1, r9
 800a8e2:	f041 0101 	orr.w	r1, r1, #1
 800a8e6:	6051      	str	r1, [r2, #4]
 800a8e8:	4a2d      	ldr	r2, [pc, #180]	; (800a9a0 <_malloc_r+0x300>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6811      	ldr	r1, [r2, #0]
 800a8ee:	428b      	cmp	r3, r1
 800a8f0:	bf88      	it	hi
 800a8f2:	6013      	strhi	r3, [r2, #0]
 800a8f4:	4a2b      	ldr	r2, [pc, #172]	; (800a9a4 <_malloc_r+0x304>)
 800a8f6:	6811      	ldr	r1, [r2, #0]
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	bf88      	it	hi
 800a8fc:	6013      	strhi	r3, [r2, #0]
 800a8fe:	e0d1      	b.n	800aaa4 <_malloc_r+0x404>
 800a900:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800a904:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800a908:	d218      	bcs.n	800a93c <_malloc_r+0x29c>
 800a90a:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800a90e:	3238      	adds	r2, #56	; 0x38
 800a910:	f102 0e01 	add.w	lr, r2, #1
 800a914:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800a918:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800a91c:	45f0      	cmp	r8, lr
 800a91e:	d12b      	bne.n	800a978 <_malloc_r+0x2d8>
 800a920:	f04f 0c01 	mov.w	ip, #1
 800a924:	1092      	asrs	r2, r2, #2
 800a926:	fa0c f202 	lsl.w	r2, ip, r2
 800a92a:	4310      	orrs	r0, r2
 800a92c:	6070      	str	r0, [r6, #4]
 800a92e:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800a932:	f8c8 4008 	str.w	r4, [r8, #8]
 800a936:	f8ce 400c 	str.w	r4, [lr, #12]
 800a93a:	e764      	b.n	800a806 <_malloc_r+0x166>
 800a93c:	2a14      	cmp	r2, #20
 800a93e:	d801      	bhi.n	800a944 <_malloc_r+0x2a4>
 800a940:	325b      	adds	r2, #91	; 0x5b
 800a942:	e7e5      	b.n	800a910 <_malloc_r+0x270>
 800a944:	2a54      	cmp	r2, #84	; 0x54
 800a946:	d803      	bhi.n	800a950 <_malloc_r+0x2b0>
 800a948:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800a94c:	326e      	adds	r2, #110	; 0x6e
 800a94e:	e7df      	b.n	800a910 <_malloc_r+0x270>
 800a950:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a954:	d803      	bhi.n	800a95e <_malloc_r+0x2be>
 800a956:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800a95a:	3277      	adds	r2, #119	; 0x77
 800a95c:	e7d8      	b.n	800a910 <_malloc_r+0x270>
 800a95e:	f240 5e54 	movw	lr, #1364	; 0x554
 800a962:	4572      	cmp	r2, lr
 800a964:	bf96      	itet	ls
 800a966:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800a96a:	227e      	movhi	r2, #126	; 0x7e
 800a96c:	327c      	addls	r2, #124	; 0x7c
 800a96e:	e7cf      	b.n	800a910 <_malloc_r+0x270>
 800a970:	f8de e008 	ldr.w	lr, [lr, #8]
 800a974:	45f0      	cmp	r8, lr
 800a976:	d005      	beq.n	800a984 <_malloc_r+0x2e4>
 800a978:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a97c:	f022 0203 	bic.w	r2, r2, #3
 800a980:	4562      	cmp	r2, ip
 800a982:	d8f5      	bhi.n	800a970 <_malloc_r+0x2d0>
 800a984:	f8de 800c 	ldr.w	r8, [lr, #12]
 800a988:	e7d1      	b.n	800a92e <_malloc_r+0x28e>
 800a98a:	bf00      	nop
 800a98c:	200005e8 	.word	0x200005e8
 800a990:	200005f0 	.word	0x200005f0
 800a994:	20000c48 	.word	0x20000c48
 800a998:	200009f0 	.word	0x200009f0
 800a99c:	20000c18 	.word	0x20000c18
 800a9a0:	20000c40 	.word	0x20000c40
 800a9a4:	20000c44 	.word	0x20000c44
 800a9a8:	6860      	ldr	r0, [r4, #4]
 800a9aa:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800a9ae:	f020 0003 	bic.w	r0, r0, #3
 800a9b2:	eba0 0a07 	sub.w	sl, r0, r7
 800a9b6:	f1ba 0f0f 	cmp.w	sl, #15
 800a9ba:	dd12      	ble.n	800a9e2 <_malloc_r+0x342>
 800a9bc:	68a3      	ldr	r3, [r4, #8]
 800a9be:	19e2      	adds	r2, r4, r7
 800a9c0:	f047 0701 	orr.w	r7, r7, #1
 800a9c4:	6067      	str	r7, [r4, #4]
 800a9c6:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a9ca:	f8cc 3008 	str.w	r3, [ip, #8]
 800a9ce:	f04a 0301 	orr.w	r3, sl, #1
 800a9d2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a9d6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a9da:	6053      	str	r3, [r2, #4]
 800a9dc:	f844 a000 	str.w	sl, [r4, r0]
 800a9e0:	e68f      	b.n	800a702 <_malloc_r+0x62>
 800a9e2:	f1ba 0f00 	cmp.w	sl, #0
 800a9e6:	db11      	blt.n	800aa0c <_malloc_r+0x36c>
 800a9e8:	4420      	add	r0, r4
 800a9ea:	6843      	ldr	r3, [r0, #4]
 800a9ec:	f043 0301 	orr.w	r3, r3, #1
 800a9f0:	6043      	str	r3, [r0, #4]
 800a9f2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a9fc:	f8cc 3008 	str.w	r3, [ip, #8]
 800aa00:	f000 f8bc 	bl	800ab7c <__malloc_unlock>
 800aa04:	4620      	mov	r0, r4
 800aa06:	b003      	add	sp, #12
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	4664      	mov	r4, ip
 800aa0e:	e710      	b.n	800a832 <_malloc_r+0x192>
 800aa10:	f858 0908 	ldr.w	r0, [r8], #-8
 800aa14:	3b01      	subs	r3, #1
 800aa16:	4540      	cmp	r0, r8
 800aa18:	f43f af15 	beq.w	800a846 <_malloc_r+0x1a6>
 800aa1c:	e71a      	b.n	800a854 <_malloc_r+0x1b4>
 800aa1e:	3304      	adds	r3, #4
 800aa20:	0052      	lsls	r2, r2, #1
 800aa22:	4210      	tst	r0, r2
 800aa24:	d0fb      	beq.n	800aa1e <_malloc_r+0x37e>
 800aa26:	e6fe      	b.n	800a826 <_malloc_r+0x186>
 800aa28:	4673      	mov	r3, lr
 800aa2a:	e7fa      	b.n	800aa22 <_malloc_r+0x382>
 800aa2c:	f8d2 e000 	ldr.w	lr, [r2]
 800aa30:	f1be 3fff 	cmp.w	lr, #4294967295
 800aa34:	bf1b      	ittet	ne
 800aa36:	eba4 0b0b 	subne.w	fp, r4, fp
 800aa3a:	eb0b 0200 	addne.w	r2, fp, r0
 800aa3e:	6014      	streq	r4, [r2, #0]
 800aa40:	601a      	strne	r2, [r3, #0]
 800aa42:	f014 0b07 	ands.w	fp, r4, #7
 800aa46:	bf0e      	itee	eq
 800aa48:	4658      	moveq	r0, fp
 800aa4a:	f1cb 0008 	rsbne	r0, fp, #8
 800aa4e:	1824      	addne	r4, r4, r0
 800aa50:	1862      	adds	r2, r4, r1
 800aa52:	ea02 010c 	and.w	r1, r2, ip
 800aa56:	4480      	add	r8, r0
 800aa58:	eba8 0801 	sub.w	r8, r8, r1
 800aa5c:	ea08 080c 	and.w	r8, r8, ip
 800aa60:	4641      	mov	r1, r8
 800aa62:	4628      	mov	r0, r5
 800aa64:	9201      	str	r2, [sp, #4]
 800aa66:	f000 fa51 	bl	800af0c <_sbrk_r>
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	9a01      	ldr	r2, [sp, #4]
 800aa6e:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <_malloc_r+0x474>)
 800aa70:	d107      	bne.n	800aa82 <_malloc_r+0x3e2>
 800aa72:	f1bb 0f00 	cmp.w	fp, #0
 800aa76:	d023      	beq.n	800aac0 <_malloc_r+0x420>
 800aa78:	f04f 0800 	mov.w	r8, #0
 800aa7c:	f1ab 0008 	sub.w	r0, fp, #8
 800aa80:	4410      	add	r0, r2
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	1b00      	subs	r0, r0, r4
 800aa86:	4440      	add	r0, r8
 800aa88:	4442      	add	r2, r8
 800aa8a:	f040 0001 	orr.w	r0, r0, #1
 800aa8e:	45b2      	cmp	sl, r6
 800aa90:	60b4      	str	r4, [r6, #8]
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	6060      	str	r0, [r4, #4]
 800aa96:	f43f af27 	beq.w	800a8e8 <_malloc_r+0x248>
 800aa9a:	f1b9 0f0f 	cmp.w	r9, #15
 800aa9e:	d812      	bhi.n	800aac6 <_malloc_r+0x426>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	6063      	str	r3, [r4, #4]
 800aaa4:	68b3      	ldr	r3, [r6, #8]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f023 0303 	bic.w	r3, r3, #3
 800aaac:	42bb      	cmp	r3, r7
 800aaae:	eba3 0207 	sub.w	r2, r3, r7
 800aab2:	d301      	bcc.n	800aab8 <_malloc_r+0x418>
 800aab4:	2a0f      	cmp	r2, #15
 800aab6:	dc22      	bgt.n	800aafe <_malloc_r+0x45e>
 800aab8:	4628      	mov	r0, r5
 800aaba:	f000 f85f 	bl	800ab7c <__malloc_unlock>
 800aabe:	e5fb      	b.n	800a6b8 <_malloc_r+0x18>
 800aac0:	4610      	mov	r0, r2
 800aac2:	46d8      	mov	r8, fp
 800aac4:	e7dd      	b.n	800aa82 <_malloc_r+0x3e2>
 800aac6:	2105      	movs	r1, #5
 800aac8:	f8da 2004 	ldr.w	r2, [sl, #4]
 800aacc:	f1a9 090c 	sub.w	r9, r9, #12
 800aad0:	f029 0907 	bic.w	r9, r9, #7
 800aad4:	f002 0201 	and.w	r2, r2, #1
 800aad8:	ea42 0209 	orr.w	r2, r2, r9
 800aadc:	f8ca 2004 	str.w	r2, [sl, #4]
 800aae0:	f1b9 0f0f 	cmp.w	r9, #15
 800aae4:	eb0a 0209 	add.w	r2, sl, r9
 800aae8:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800aaec:	f67f aefc 	bls.w	800a8e8 <_malloc_r+0x248>
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f10a 0108 	add.w	r1, sl, #8
 800aaf6:	f003 fd55 	bl	800e5a4 <_free_r>
 800aafa:	4b06      	ldr	r3, [pc, #24]	; (800ab14 <_malloc_r+0x474>)
 800aafc:	e6f4      	b.n	800a8e8 <_malloc_r+0x248>
 800aafe:	68b4      	ldr	r4, [r6, #8]
 800ab00:	f047 0301 	orr.w	r3, r7, #1
 800ab04:	f042 0201 	orr.w	r2, r2, #1
 800ab08:	4427      	add	r7, r4
 800ab0a:	6063      	str	r3, [r4, #4]
 800ab0c:	60b7      	str	r7, [r6, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	e5f7      	b.n	800a702 <_malloc_r+0x62>
 800ab12:	bf00      	nop
 800ab14:	20000c18 	.word	0x20000c18

0800ab18 <_mbrtowc_r>:
 800ab18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab1a:	9e08      	ldr	r6, [sp, #32]
 800ab1c:	4c09      	ldr	r4, [pc, #36]	; (800ab44 <_mbrtowc_r+0x2c>)
 800ab1e:	4605      	mov	r5, r0
 800ab20:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800ab24:	4614      	mov	r4, r2
 800ab26:	9600      	str	r6, [sp, #0]
 800ab28:	b912      	cbnz	r2, 800ab30 <_mbrtowc_r+0x18>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4a06      	ldr	r2, [pc, #24]	; (800ab48 <_mbrtowc_r+0x30>)
 800ab30:	47b8      	blx	r7
 800ab32:	1c43      	adds	r3, r0, #1
 800ab34:	bf01      	itttt	eq
 800ab36:	2300      	moveq	r3, #0
 800ab38:	6033      	streq	r3, [r6, #0]
 800ab3a:	238a      	moveq	r3, #138	; 0x8a
 800ab3c:	602b      	streq	r3, [r5, #0]
 800ab3e:	b003      	add	sp, #12
 800ab40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab42:	bf00      	nop
 800ab44:	2000047c 	.word	0x2000047c
 800ab48:	0805ffcf 	.word	0x0805ffcf

0800ab4c <__ascii_mbtowc>:
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	b901      	cbnz	r1, 800ab52 <__ascii_mbtowc+0x6>
 800ab50:	a901      	add	r1, sp, #4
 800ab52:	b142      	cbz	r2, 800ab66 <__ascii_mbtowc+0x1a>
 800ab54:	b14b      	cbz	r3, 800ab6a <__ascii_mbtowc+0x1e>
 800ab56:	7813      	ldrb	r3, [r2, #0]
 800ab58:	600b      	str	r3, [r1, #0]
 800ab5a:	7812      	ldrb	r2, [r2, #0]
 800ab5c:	1e10      	subs	r0, r2, #0
 800ab5e:	bf18      	it	ne
 800ab60:	2001      	movne	r0, #1
 800ab62:	b002      	add	sp, #8
 800ab64:	4770      	bx	lr
 800ab66:	4610      	mov	r0, r2
 800ab68:	e7fb      	b.n	800ab62 <__ascii_mbtowc+0x16>
 800ab6a:	f06f 0001 	mvn.w	r0, #1
 800ab6e:	e7f8      	b.n	800ab62 <__ascii_mbtowc+0x16>

0800ab70 <__malloc_lock>:
 800ab70:	4801      	ldr	r0, [pc, #4]	; (800ab78 <__malloc_lock+0x8>)
 800ab72:	f7ff bd71 	b.w	800a658 <__retarget_lock_acquire_recursive>
 800ab76:	bf00      	nop
 800ab78:	20000c15 	.word	0x20000c15

0800ab7c <__malloc_unlock>:
 800ab7c:	4801      	ldr	r0, [pc, #4]	; (800ab84 <__malloc_unlock+0x8>)
 800ab7e:	f7ff bd6c 	b.w	800a65a <__retarget_lock_release_recursive>
 800ab82:	bf00      	nop
 800ab84:	20000c15 	.word	0x20000c15

0800ab88 <_read_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	4611      	mov	r1, r2
 800ab90:	2200      	movs	r2, #0
 800ab92:	4d05      	ldr	r5, [pc, #20]	; (800aba8 <_read_r+0x20>)
 800ab94:	602a      	str	r2, [r5, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	f7fa fd07 	bl	80055aa <_read>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d102      	bne.n	800aba6 <_read_r+0x1e>
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	b103      	cbz	r3, 800aba6 <_read_r+0x1e>
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	20000c4c 	.word	0x20000c4c

0800abac <realloc>:
 800abac:	4b02      	ldr	r3, [pc, #8]	; (800abb8 <realloc+0xc>)
 800abae:	460a      	mov	r2, r1
 800abb0:	4601      	mov	r1, r0
 800abb2:	6818      	ldr	r0, [r3, #0]
 800abb4:	f000 b802 	b.w	800abbc <_realloc_r>
 800abb8:	20000048 	.word	0x20000048

0800abbc <_realloc_r>:
 800abbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	460c      	mov	r4, r1
 800abc2:	4681      	mov	r9, r0
 800abc4:	4611      	mov	r1, r2
 800abc6:	b924      	cbnz	r4, 800abd2 <_realloc_r+0x16>
 800abc8:	b003      	add	sp, #12
 800abca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abce:	f7ff bd67 	b.w	800a6a0 <_malloc_r>
 800abd2:	9201      	str	r2, [sp, #4]
 800abd4:	f7ff ffcc 	bl	800ab70 <__malloc_lock>
 800abd8:	9901      	ldr	r1, [sp, #4]
 800abda:	f101 080b 	add.w	r8, r1, #11
 800abde:	f1b8 0f16 	cmp.w	r8, #22
 800abe2:	d90b      	bls.n	800abfc <_realloc_r+0x40>
 800abe4:	f038 0807 	bics.w	r8, r8, #7
 800abe8:	d50a      	bpl.n	800ac00 <_realloc_r+0x44>
 800abea:	230c      	movs	r3, #12
 800abec:	f04f 0b00 	mov.w	fp, #0
 800abf0:	f8c9 3000 	str.w	r3, [r9]
 800abf4:	4658      	mov	r0, fp
 800abf6:	b003      	add	sp, #12
 800abf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfc:	f04f 0810 	mov.w	r8, #16
 800ac00:	4588      	cmp	r8, r1
 800ac02:	d3f2      	bcc.n	800abea <_realloc_r+0x2e>
 800ac04:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800ac08:	f1a4 0a08 	sub.w	sl, r4, #8
 800ac0c:	f025 0603 	bic.w	r6, r5, #3
 800ac10:	45b0      	cmp	r8, r6
 800ac12:	f340 8171 	ble.w	800aef8 <_realloc_r+0x33c>
 800ac16:	4a9c      	ldr	r2, [pc, #624]	; (800ae88 <_realloc_r+0x2cc>)
 800ac18:	eb0a 0306 	add.w	r3, sl, r6
 800ac1c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	459c      	cmp	ip, r3
 800ac24:	d005      	beq.n	800ac32 <_realloc_r+0x76>
 800ac26:	f022 0001 	bic.w	r0, r2, #1
 800ac2a:	4418      	add	r0, r3
 800ac2c:	6840      	ldr	r0, [r0, #4]
 800ac2e:	07c7      	lsls	r7, r0, #31
 800ac30:	d427      	bmi.n	800ac82 <_realloc_r+0xc6>
 800ac32:	f022 0203 	bic.w	r2, r2, #3
 800ac36:	459c      	cmp	ip, r3
 800ac38:	eb06 0702 	add.w	r7, r6, r2
 800ac3c:	d119      	bne.n	800ac72 <_realloc_r+0xb6>
 800ac3e:	f108 0010 	add.w	r0, r8, #16
 800ac42:	42b8      	cmp	r0, r7
 800ac44:	dc1f      	bgt.n	800ac86 <_realloc_r+0xca>
 800ac46:	4a90      	ldr	r2, [pc, #576]	; (800ae88 <_realloc_r+0x2cc>)
 800ac48:	eba7 0708 	sub.w	r7, r7, r8
 800ac4c:	eb0a 0308 	add.w	r3, sl, r8
 800ac50:	f047 0701 	orr.w	r7, r7, #1
 800ac54:	6093      	str	r3, [r2, #8]
 800ac56:	605f      	str	r7, [r3, #4]
 800ac58:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ac5c:	4648      	mov	r0, r9
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	ea43 0308 	orr.w	r3, r3, r8
 800ac66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac6a:	f7ff ff87 	bl	800ab7c <__malloc_unlock>
 800ac6e:	46a3      	mov	fp, r4
 800ac70:	e7c0      	b.n	800abf4 <_realloc_r+0x38>
 800ac72:	45b8      	cmp	r8, r7
 800ac74:	dc07      	bgt.n	800ac86 <_realloc_r+0xca>
 800ac76:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ac7a:	60da      	str	r2, [r3, #12]
 800ac7c:	6093      	str	r3, [r2, #8]
 800ac7e:	4655      	mov	r5, sl
 800ac80:	e080      	b.n	800ad84 <_realloc_r+0x1c8>
 800ac82:	2200      	movs	r2, #0
 800ac84:	4613      	mov	r3, r2
 800ac86:	07e8      	lsls	r0, r5, #31
 800ac88:	f100 80e8 	bmi.w	800ae5c <_realloc_r+0x2a0>
 800ac8c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800ac90:	ebaa 0505 	sub.w	r5, sl, r5
 800ac94:	6868      	ldr	r0, [r5, #4]
 800ac96:	f020 0003 	bic.w	r0, r0, #3
 800ac9a:	eb00 0b06 	add.w	fp, r0, r6
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f000 80a7 	beq.w	800adf2 <_realloc_r+0x236>
 800aca4:	459c      	cmp	ip, r3
 800aca6:	eb02 070b 	add.w	r7, r2, fp
 800acaa:	d14b      	bne.n	800ad44 <_realloc_r+0x188>
 800acac:	f108 0310 	add.w	r3, r8, #16
 800acb0:	42bb      	cmp	r3, r7
 800acb2:	f300 809e 	bgt.w	800adf2 <_realloc_r+0x236>
 800acb6:	46ab      	mov	fp, r5
 800acb8:	68eb      	ldr	r3, [r5, #12]
 800acba:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800acbe:	60d3      	str	r3, [r2, #12]
 800acc0:	609a      	str	r2, [r3, #8]
 800acc2:	1f32      	subs	r2, r6, #4
 800acc4:	2a24      	cmp	r2, #36	; 0x24
 800acc6:	d838      	bhi.n	800ad3a <_realloc_r+0x17e>
 800acc8:	2a13      	cmp	r2, #19
 800acca:	d934      	bls.n	800ad36 <_realloc_r+0x17a>
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	2a1b      	cmp	r2, #27
 800acd0:	60ab      	str	r3, [r5, #8]
 800acd2:	6863      	ldr	r3, [r4, #4]
 800acd4:	60eb      	str	r3, [r5, #12]
 800acd6:	d81b      	bhi.n	800ad10 <_realloc_r+0x154>
 800acd8:	3408      	adds	r4, #8
 800acda:	f105 0310 	add.w	r3, r5, #16
 800acde:	6822      	ldr	r2, [r4, #0]
 800ace0:	601a      	str	r2, [r3, #0]
 800ace2:	6862      	ldr	r2, [r4, #4]
 800ace4:	605a      	str	r2, [r3, #4]
 800ace6:	68a2      	ldr	r2, [r4, #8]
 800ace8:	609a      	str	r2, [r3, #8]
 800acea:	4a67      	ldr	r2, [pc, #412]	; (800ae88 <_realloc_r+0x2cc>)
 800acec:	eba7 0708 	sub.w	r7, r7, r8
 800acf0:	eb05 0308 	add.w	r3, r5, r8
 800acf4:	f047 0701 	orr.w	r7, r7, #1
 800acf8:	6093      	str	r3, [r2, #8]
 800acfa:	605f      	str	r7, [r3, #4]
 800acfc:	686b      	ldr	r3, [r5, #4]
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	ea43 0308 	orr.w	r3, r3, r8
 800ad06:	606b      	str	r3, [r5, #4]
 800ad08:	4648      	mov	r0, r9
 800ad0a:	f7ff ff37 	bl	800ab7c <__malloc_unlock>
 800ad0e:	e771      	b.n	800abf4 <_realloc_r+0x38>
 800ad10:	68a3      	ldr	r3, [r4, #8]
 800ad12:	2a24      	cmp	r2, #36	; 0x24
 800ad14:	612b      	str	r3, [r5, #16]
 800ad16:	68e3      	ldr	r3, [r4, #12]
 800ad18:	bf18      	it	ne
 800ad1a:	3410      	addne	r4, #16
 800ad1c:	616b      	str	r3, [r5, #20]
 800ad1e:	bf09      	itett	eq
 800ad20:	6923      	ldreq	r3, [r4, #16]
 800ad22:	f105 0318 	addne.w	r3, r5, #24
 800ad26:	61ab      	streq	r3, [r5, #24]
 800ad28:	6962      	ldreq	r2, [r4, #20]
 800ad2a:	bf02      	ittt	eq
 800ad2c:	f105 0320 	addeq.w	r3, r5, #32
 800ad30:	61ea      	streq	r2, [r5, #28]
 800ad32:	3418      	addeq	r4, #24
 800ad34:	e7d3      	b.n	800acde <_realloc_r+0x122>
 800ad36:	465b      	mov	r3, fp
 800ad38:	e7d1      	b.n	800acde <_realloc_r+0x122>
 800ad3a:	4621      	mov	r1, r4
 800ad3c:	4658      	mov	r0, fp
 800ad3e:	f004 f893 	bl	800ee68 <memmove>
 800ad42:	e7d2      	b.n	800acea <_realloc_r+0x12e>
 800ad44:	45b8      	cmp	r8, r7
 800ad46:	dc54      	bgt.n	800adf2 <_realloc_r+0x236>
 800ad48:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	60da      	str	r2, [r3, #12]
 800ad50:	6093      	str	r3, [r2, #8]
 800ad52:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ad56:	68eb      	ldr	r3, [r5, #12]
 800ad58:	60d3      	str	r3, [r2, #12]
 800ad5a:	609a      	str	r2, [r3, #8]
 800ad5c:	1f32      	subs	r2, r6, #4
 800ad5e:	2a24      	cmp	r2, #36	; 0x24
 800ad60:	d843      	bhi.n	800adea <_realloc_r+0x22e>
 800ad62:	2a13      	cmp	r2, #19
 800ad64:	d908      	bls.n	800ad78 <_realloc_r+0x1bc>
 800ad66:	6823      	ldr	r3, [r4, #0]
 800ad68:	2a1b      	cmp	r2, #27
 800ad6a:	60ab      	str	r3, [r5, #8]
 800ad6c:	6863      	ldr	r3, [r4, #4]
 800ad6e:	60eb      	str	r3, [r5, #12]
 800ad70:	d828      	bhi.n	800adc4 <_realloc_r+0x208>
 800ad72:	3408      	adds	r4, #8
 800ad74:	f105 0010 	add.w	r0, r5, #16
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	6003      	str	r3, [r0, #0]
 800ad7c:	6863      	ldr	r3, [r4, #4]
 800ad7e:	6043      	str	r3, [r0, #4]
 800ad80:	68a3      	ldr	r3, [r4, #8]
 800ad82:	6083      	str	r3, [r0, #8]
 800ad84:	686b      	ldr	r3, [r5, #4]
 800ad86:	eba7 0008 	sub.w	r0, r7, r8
 800ad8a:	280f      	cmp	r0, #15
 800ad8c:	f003 0301 	and.w	r3, r3, #1
 800ad90:	eb05 0207 	add.w	r2, r5, r7
 800ad94:	f240 80b2 	bls.w	800aefc <_realloc_r+0x340>
 800ad98:	eb05 0108 	add.w	r1, r5, r8
 800ad9c:	ea48 0303 	orr.w	r3, r8, r3
 800ada0:	f040 0001 	orr.w	r0, r0, #1
 800ada4:	606b      	str	r3, [r5, #4]
 800ada6:	6048      	str	r0, [r1, #4]
 800ada8:	6853      	ldr	r3, [r2, #4]
 800adaa:	4648      	mov	r0, r9
 800adac:	f043 0301 	orr.w	r3, r3, #1
 800adb0:	6053      	str	r3, [r2, #4]
 800adb2:	3108      	adds	r1, #8
 800adb4:	f003 fbf6 	bl	800e5a4 <_free_r>
 800adb8:	4648      	mov	r0, r9
 800adba:	f7ff fedf 	bl	800ab7c <__malloc_unlock>
 800adbe:	f105 0b08 	add.w	fp, r5, #8
 800adc2:	e717      	b.n	800abf4 <_realloc_r+0x38>
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	2a24      	cmp	r2, #36	; 0x24
 800adc8:	612b      	str	r3, [r5, #16]
 800adca:	68e3      	ldr	r3, [r4, #12]
 800adcc:	bf18      	it	ne
 800adce:	f105 0018 	addne.w	r0, r5, #24
 800add2:	616b      	str	r3, [r5, #20]
 800add4:	bf09      	itett	eq
 800add6:	6923      	ldreq	r3, [r4, #16]
 800add8:	3410      	addne	r4, #16
 800adda:	61ab      	streq	r3, [r5, #24]
 800addc:	6963      	ldreq	r3, [r4, #20]
 800adde:	bf02      	ittt	eq
 800ade0:	f105 0020 	addeq.w	r0, r5, #32
 800ade4:	61eb      	streq	r3, [r5, #28]
 800ade6:	3418      	addeq	r4, #24
 800ade8:	e7c6      	b.n	800ad78 <_realloc_r+0x1bc>
 800adea:	4621      	mov	r1, r4
 800adec:	f004 f83c 	bl	800ee68 <memmove>
 800adf0:	e7c8      	b.n	800ad84 <_realloc_r+0x1c8>
 800adf2:	45d8      	cmp	r8, fp
 800adf4:	dc32      	bgt.n	800ae5c <_realloc_r+0x2a0>
 800adf6:	4628      	mov	r0, r5
 800adf8:	68eb      	ldr	r3, [r5, #12]
 800adfa:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800adfe:	60d3      	str	r3, [r2, #12]
 800ae00:	609a      	str	r2, [r3, #8]
 800ae02:	1f32      	subs	r2, r6, #4
 800ae04:	2a24      	cmp	r2, #36	; 0x24
 800ae06:	d825      	bhi.n	800ae54 <_realloc_r+0x298>
 800ae08:	2a13      	cmp	r2, #19
 800ae0a:	d908      	bls.n	800ae1e <_realloc_r+0x262>
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	2a1b      	cmp	r2, #27
 800ae10:	60ab      	str	r3, [r5, #8]
 800ae12:	6863      	ldr	r3, [r4, #4]
 800ae14:	60eb      	str	r3, [r5, #12]
 800ae16:	d80a      	bhi.n	800ae2e <_realloc_r+0x272>
 800ae18:	3408      	adds	r4, #8
 800ae1a:	f105 0010 	add.w	r0, r5, #16
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	6863      	ldr	r3, [r4, #4]
 800ae24:	6043      	str	r3, [r0, #4]
 800ae26:	68a3      	ldr	r3, [r4, #8]
 800ae28:	6083      	str	r3, [r0, #8]
 800ae2a:	465f      	mov	r7, fp
 800ae2c:	e7aa      	b.n	800ad84 <_realloc_r+0x1c8>
 800ae2e:	68a3      	ldr	r3, [r4, #8]
 800ae30:	2a24      	cmp	r2, #36	; 0x24
 800ae32:	612b      	str	r3, [r5, #16]
 800ae34:	68e3      	ldr	r3, [r4, #12]
 800ae36:	bf18      	it	ne
 800ae38:	f105 0018 	addne.w	r0, r5, #24
 800ae3c:	616b      	str	r3, [r5, #20]
 800ae3e:	bf09      	itett	eq
 800ae40:	6923      	ldreq	r3, [r4, #16]
 800ae42:	3410      	addne	r4, #16
 800ae44:	61ab      	streq	r3, [r5, #24]
 800ae46:	6963      	ldreq	r3, [r4, #20]
 800ae48:	bf02      	ittt	eq
 800ae4a:	f105 0020 	addeq.w	r0, r5, #32
 800ae4e:	61eb      	streq	r3, [r5, #28]
 800ae50:	3418      	addeq	r4, #24
 800ae52:	e7e4      	b.n	800ae1e <_realloc_r+0x262>
 800ae54:	4621      	mov	r1, r4
 800ae56:	f004 f807 	bl	800ee68 <memmove>
 800ae5a:	e7e6      	b.n	800ae2a <_realloc_r+0x26e>
 800ae5c:	4648      	mov	r0, r9
 800ae5e:	f7ff fc1f 	bl	800a6a0 <_malloc_r>
 800ae62:	4683      	mov	fp, r0
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f43f af4f 	beq.w	800ad08 <_realloc_r+0x14c>
 800ae6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ae6e:	f1a0 0208 	sub.w	r2, r0, #8
 800ae72:	f023 0301 	bic.w	r3, r3, #1
 800ae76:	4453      	add	r3, sl
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d107      	bne.n	800ae8c <_realloc_r+0x2d0>
 800ae7c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800ae80:	f027 0703 	bic.w	r7, r7, #3
 800ae84:	4437      	add	r7, r6
 800ae86:	e6fa      	b.n	800ac7e <_realloc_r+0xc2>
 800ae88:	200005e8 	.word	0x200005e8
 800ae8c:	1f32      	subs	r2, r6, #4
 800ae8e:	2a24      	cmp	r2, #36	; 0x24
 800ae90:	d82e      	bhi.n	800aef0 <_realloc_r+0x334>
 800ae92:	2a13      	cmp	r2, #19
 800ae94:	d929      	bls.n	800aeea <_realloc_r+0x32e>
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	2a1b      	cmp	r2, #27
 800ae9a:	6003      	str	r3, [r0, #0]
 800ae9c:	6863      	ldr	r3, [r4, #4]
 800ae9e:	6043      	str	r3, [r0, #4]
 800aea0:	d80e      	bhi.n	800aec0 <_realloc_r+0x304>
 800aea2:	f104 0208 	add.w	r2, r4, #8
 800aea6:	f100 0308 	add.w	r3, r0, #8
 800aeaa:	6811      	ldr	r1, [r2, #0]
 800aeac:	6019      	str	r1, [r3, #0]
 800aeae:	6851      	ldr	r1, [r2, #4]
 800aeb0:	6059      	str	r1, [r3, #4]
 800aeb2:	6892      	ldr	r2, [r2, #8]
 800aeb4:	609a      	str	r2, [r3, #8]
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4648      	mov	r0, r9
 800aeba:	f003 fb73 	bl	800e5a4 <_free_r>
 800aebe:	e723      	b.n	800ad08 <_realloc_r+0x14c>
 800aec0:	68a3      	ldr	r3, [r4, #8]
 800aec2:	2a24      	cmp	r2, #36	; 0x24
 800aec4:	6083      	str	r3, [r0, #8]
 800aec6:	68e3      	ldr	r3, [r4, #12]
 800aec8:	bf18      	it	ne
 800aeca:	f104 0210 	addne.w	r2, r4, #16
 800aece:	60c3      	str	r3, [r0, #12]
 800aed0:	bf09      	itett	eq
 800aed2:	6923      	ldreq	r3, [r4, #16]
 800aed4:	f100 0310 	addne.w	r3, r0, #16
 800aed8:	6103      	streq	r3, [r0, #16]
 800aeda:	6961      	ldreq	r1, [r4, #20]
 800aedc:	bf02      	ittt	eq
 800aede:	f104 0218 	addeq.w	r2, r4, #24
 800aee2:	f100 0318 	addeq.w	r3, r0, #24
 800aee6:	6141      	streq	r1, [r0, #20]
 800aee8:	e7df      	b.n	800aeaa <_realloc_r+0x2ee>
 800aeea:	4603      	mov	r3, r0
 800aeec:	4622      	mov	r2, r4
 800aeee:	e7dc      	b.n	800aeaa <_realloc_r+0x2ee>
 800aef0:	4621      	mov	r1, r4
 800aef2:	f003 ffb9 	bl	800ee68 <memmove>
 800aef6:	e7de      	b.n	800aeb6 <_realloc_r+0x2fa>
 800aef8:	4637      	mov	r7, r6
 800aefa:	e6c0      	b.n	800ac7e <_realloc_r+0xc2>
 800aefc:	431f      	orrs	r7, r3
 800aefe:	606f      	str	r7, [r5, #4]
 800af00:	6853      	ldr	r3, [r2, #4]
 800af02:	f043 0301 	orr.w	r3, r3, #1
 800af06:	6053      	str	r3, [r2, #4]
 800af08:	e756      	b.n	800adb8 <_realloc_r+0x1fc>
 800af0a:	bf00      	nop

0800af0c <_sbrk_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	2300      	movs	r3, #0
 800af10:	4d05      	ldr	r5, [pc, #20]	; (800af28 <_sbrk_r+0x1c>)
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f7fa fbb0 	bl	800567c <_sbrk>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_sbrk_r+0x1a>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_sbrk_r+0x1a>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20000c4c 	.word	0x20000c4c

0800af2c <__sccl>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	780b      	ldrb	r3, [r1, #0]
 800af30:	4604      	mov	r4, r0
 800af32:	2b5e      	cmp	r3, #94	; 0x5e
 800af34:	bf13      	iteet	ne
 800af36:	2200      	movne	r2, #0
 800af38:	2201      	moveq	r2, #1
 800af3a:	784b      	ldrbeq	r3, [r1, #1]
 800af3c:	1c48      	addne	r0, r1, #1
 800af3e:	bf08      	it	eq
 800af40:	1c88      	addeq	r0, r1, #2
 800af42:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800af46:	1e61      	subs	r1, r4, #1
 800af48:	f801 2f01 	strb.w	r2, [r1, #1]!
 800af4c:	42a9      	cmp	r1, r5
 800af4e:	d1fb      	bne.n	800af48 <__sccl+0x1c>
 800af50:	b90b      	cbnz	r3, 800af56 <__sccl+0x2a>
 800af52:	3801      	subs	r0, #1
 800af54:	bd70      	pop	{r4, r5, r6, pc}
 800af56:	f082 0201 	eor.w	r2, r2, #1
 800af5a:	4605      	mov	r5, r0
 800af5c:	54e2      	strb	r2, [r4, r3]
 800af5e:	4628      	mov	r0, r5
 800af60:	f810 1b01 	ldrb.w	r1, [r0], #1
 800af64:	292d      	cmp	r1, #45	; 0x2d
 800af66:	d006      	beq.n	800af76 <__sccl+0x4a>
 800af68:	295d      	cmp	r1, #93	; 0x5d
 800af6a:	d0f3      	beq.n	800af54 <__sccl+0x28>
 800af6c:	b909      	cbnz	r1, 800af72 <__sccl+0x46>
 800af6e:	4628      	mov	r0, r5
 800af70:	e7f0      	b.n	800af54 <__sccl+0x28>
 800af72:	460b      	mov	r3, r1
 800af74:	e7f1      	b.n	800af5a <__sccl+0x2e>
 800af76:	786e      	ldrb	r6, [r5, #1]
 800af78:	2e5d      	cmp	r6, #93	; 0x5d
 800af7a:	d0fa      	beq.n	800af72 <__sccl+0x46>
 800af7c:	42b3      	cmp	r3, r6
 800af7e:	dcf8      	bgt.n	800af72 <__sccl+0x46>
 800af80:	4619      	mov	r1, r3
 800af82:	3502      	adds	r5, #2
 800af84:	3101      	adds	r1, #1
 800af86:	428e      	cmp	r6, r1
 800af88:	5462      	strb	r2, [r4, r1]
 800af8a:	dcfb      	bgt.n	800af84 <__sccl+0x58>
 800af8c:	1af1      	subs	r1, r6, r3
 800af8e:	3901      	subs	r1, #1
 800af90:	42b3      	cmp	r3, r6
 800af92:	bfa8      	it	ge
 800af94:	2100      	movge	r1, #0
 800af96:	1c58      	adds	r0, r3, #1
 800af98:	1843      	adds	r3, r0, r1
 800af9a:	e7e0      	b.n	800af5e <__sccl+0x32>

0800af9c <nanf>:
 800af9c:	4800      	ldr	r0, [pc, #0]	; (800afa0 <nanf+0x4>)
 800af9e:	4770      	bx	lr
 800afa0:	7fc00000 	.word	0x7fc00000

0800afa4 <sprintf>:
 800afa4:	b40e      	push	{r1, r2, r3}
 800afa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afaa:	b500      	push	{lr}
 800afac:	b09c      	sub	sp, #112	; 0x70
 800afae:	ab1d      	add	r3, sp, #116	; 0x74
 800afb0:	9002      	str	r0, [sp, #8]
 800afb2:	9006      	str	r0, [sp, #24]
 800afb4:	9107      	str	r1, [sp, #28]
 800afb6:	9104      	str	r1, [sp, #16]
 800afb8:	4808      	ldr	r0, [pc, #32]	; (800afdc <sprintf+0x38>)
 800afba:	4909      	ldr	r1, [pc, #36]	; (800afe0 <sprintf+0x3c>)
 800afbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc0:	9105      	str	r1, [sp, #20]
 800afc2:	6800      	ldr	r0, [r0, #0]
 800afc4:	a902      	add	r1, sp, #8
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	f001 f8d2 	bl	800c170 <_svfprintf_r>
 800afcc:	2200      	movs	r2, #0
 800afce:	9b02      	ldr	r3, [sp, #8]
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	b01c      	add	sp, #112	; 0x70
 800afd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800afd8:	b003      	add	sp, #12
 800afda:	4770      	bx	lr
 800afdc:	20000048 	.word	0x20000048
 800afe0:	ffff0208 	.word	0xffff0208

0800afe4 <sulp>:
 800afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe8:	460f      	mov	r7, r1
 800afea:	4690      	mov	r8, r2
 800afec:	f004 fa78 	bl	800f4e0 <__ulp>
 800aff0:	4604      	mov	r4, r0
 800aff2:	460d      	mov	r5, r1
 800aff4:	f1b8 0f00 	cmp.w	r8, #0
 800aff8:	d011      	beq.n	800b01e <sulp+0x3a>
 800affa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800affe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b002:	2b00      	cmp	r3, #0
 800b004:	dd0b      	ble.n	800b01e <sulp+0x3a>
 800b006:	2400      	movs	r4, #0
 800b008:	051b      	lsls	r3, r3, #20
 800b00a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b00e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b012:	4622      	mov	r2, r4
 800b014:	462b      	mov	r3, r5
 800b016:	f7f5 facb 	bl	80005b0 <__aeabi_dmul>
 800b01a:	4604      	mov	r4, r0
 800b01c:	460d      	mov	r5, r1
 800b01e:	4620      	mov	r0, r4
 800b020:	4629      	mov	r1, r5
 800b022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b028 <_strtod_l>:
 800b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	469b      	mov	fp, r3
 800b02e:	2300      	movs	r3, #0
 800b030:	b09f      	sub	sp, #124	; 0x7c
 800b032:	931a      	str	r3, [sp, #104]	; 0x68
 800b034:	4b9e      	ldr	r3, [pc, #632]	; (800b2b0 <_strtod_l+0x288>)
 800b036:	4682      	mov	sl, r0
 800b038:	681f      	ldr	r7, [r3, #0]
 800b03a:	460e      	mov	r6, r1
 800b03c:	4638      	mov	r0, r7
 800b03e:	9215      	str	r2, [sp, #84]	; 0x54
 800b040:	f7f5 f8f2 	bl	8000228 <strlen>
 800b044:	f04f 0800 	mov.w	r8, #0
 800b048:	4604      	mov	r4, r0
 800b04a:	f04f 0900 	mov.w	r9, #0
 800b04e:	9619      	str	r6, [sp, #100]	; 0x64
 800b050:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b052:	781a      	ldrb	r2, [r3, #0]
 800b054:	2a2b      	cmp	r2, #43	; 0x2b
 800b056:	d04c      	beq.n	800b0f2 <_strtod_l+0xca>
 800b058:	d83a      	bhi.n	800b0d0 <_strtod_l+0xa8>
 800b05a:	2a0d      	cmp	r2, #13
 800b05c:	d833      	bhi.n	800b0c6 <_strtod_l+0x9e>
 800b05e:	2a08      	cmp	r2, #8
 800b060:	d833      	bhi.n	800b0ca <_strtod_l+0xa2>
 800b062:	2a00      	cmp	r2, #0
 800b064:	d03d      	beq.n	800b0e2 <_strtod_l+0xba>
 800b066:	2300      	movs	r3, #0
 800b068:	930a      	str	r3, [sp, #40]	; 0x28
 800b06a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b06c:	782b      	ldrb	r3, [r5, #0]
 800b06e:	2b30      	cmp	r3, #48	; 0x30
 800b070:	f040 80aa 	bne.w	800b1c8 <_strtod_l+0x1a0>
 800b074:	786b      	ldrb	r3, [r5, #1]
 800b076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b07a:	2b58      	cmp	r3, #88	; 0x58
 800b07c:	d166      	bne.n	800b14c <_strtod_l+0x124>
 800b07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b080:	4650      	mov	r0, sl
 800b082:	9301      	str	r3, [sp, #4]
 800b084:	ab1a      	add	r3, sp, #104	; 0x68
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	4a8a      	ldr	r2, [pc, #552]	; (800b2b4 <_strtod_l+0x28c>)
 800b08a:	f8cd b008 	str.w	fp, [sp, #8]
 800b08e:	ab1b      	add	r3, sp, #108	; 0x6c
 800b090:	a919      	add	r1, sp, #100	; 0x64
 800b092:	f003 fbcf 	bl	800e834 <__gethex>
 800b096:	f010 0607 	ands.w	r6, r0, #7
 800b09a:	4604      	mov	r4, r0
 800b09c:	d005      	beq.n	800b0aa <_strtod_l+0x82>
 800b09e:	2e06      	cmp	r6, #6
 800b0a0:	d129      	bne.n	800b0f6 <_strtod_l+0xce>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	3501      	adds	r5, #1
 800b0a6:	9519      	str	r5, [sp, #100]	; 0x64
 800b0a8:	930a      	str	r3, [sp, #40]	; 0x28
 800b0aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f040 858a 	bne.w	800bbc6 <_strtod_l+0xb9e>
 800b0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b4:	b1d3      	cbz	r3, 800b0ec <_strtod_l+0xc4>
 800b0b6:	4642      	mov	r2, r8
 800b0b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0bc:	4610      	mov	r0, r2
 800b0be:	4619      	mov	r1, r3
 800b0c0:	b01f      	add	sp, #124	; 0x7c
 800b0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c6:	2a20      	cmp	r2, #32
 800b0c8:	d1cd      	bne.n	800b066 <_strtod_l+0x3e>
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	9319      	str	r3, [sp, #100]	; 0x64
 800b0ce:	e7bf      	b.n	800b050 <_strtod_l+0x28>
 800b0d0:	2a2d      	cmp	r2, #45	; 0x2d
 800b0d2:	d1c8      	bne.n	800b066 <_strtod_l+0x3e>
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	920a      	str	r2, [sp, #40]	; 0x28
 800b0d8:	1c5a      	adds	r2, r3, #1
 800b0da:	9219      	str	r2, [sp, #100]	; 0x64
 800b0dc:	785b      	ldrb	r3, [r3, #1]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1c3      	bne.n	800b06a <_strtod_l+0x42>
 800b0e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0e4:	9619      	str	r6, [sp, #100]	; 0x64
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f040 856b 	bne.w	800bbc2 <_strtod_l+0xb9a>
 800b0ec:	4642      	mov	r2, r8
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	e7e4      	b.n	800b0bc <_strtod_l+0x94>
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	e7ef      	b.n	800b0d6 <_strtod_l+0xae>
 800b0f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b0f8:	b13a      	cbz	r2, 800b10a <_strtod_l+0xe2>
 800b0fa:	2135      	movs	r1, #53	; 0x35
 800b0fc:	a81c      	add	r0, sp, #112	; 0x70
 800b0fe:	f004 faf3 	bl	800f6e8 <__copybits>
 800b102:	4650      	mov	r0, sl
 800b104:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b106:	f003 feee 	bl	800eee6 <_Bfree>
 800b10a:	3e01      	subs	r6, #1
 800b10c:	2e04      	cmp	r6, #4
 800b10e:	d806      	bhi.n	800b11e <_strtod_l+0xf6>
 800b110:	e8df f006 	tbb	[pc, r6]
 800b114:	1714030a 	.word	0x1714030a
 800b118:	0a          	.byte	0x0a
 800b119:	00          	.byte	0x00
 800b11a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800b11e:	0721      	lsls	r1, r4, #28
 800b120:	d5c3      	bpl.n	800b0aa <_strtod_l+0x82>
 800b122:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800b126:	e7c0      	b.n	800b0aa <_strtod_l+0x82>
 800b128:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b12a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800b12e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b132:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b136:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b13a:	e7f0      	b.n	800b11e <_strtod_l+0xf6>
 800b13c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b2b8 <_strtod_l+0x290>
 800b140:	e7ed      	b.n	800b11e <_strtod_l+0xf6>
 800b142:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b146:	f04f 38ff 	mov.w	r8, #4294967295
 800b14a:	e7e8      	b.n	800b11e <_strtod_l+0xf6>
 800b14c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	9219      	str	r2, [sp, #100]	; 0x64
 800b152:	785b      	ldrb	r3, [r3, #1]
 800b154:	2b30      	cmp	r3, #48	; 0x30
 800b156:	d0f9      	beq.n	800b14c <_strtod_l+0x124>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d0a6      	beq.n	800b0aa <_strtod_l+0x82>
 800b15c:	2301      	movs	r3, #1
 800b15e:	9307      	str	r3, [sp, #28]
 800b160:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b162:	220a      	movs	r2, #10
 800b164:	9308      	str	r3, [sp, #32]
 800b166:	2300      	movs	r3, #0
 800b168:	469b      	mov	fp, r3
 800b16a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b16e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b170:	7805      	ldrb	r5, [r0, #0]
 800b172:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800b176:	b2d9      	uxtb	r1, r3
 800b178:	2909      	cmp	r1, #9
 800b17a:	d927      	bls.n	800b1cc <_strtod_l+0x1a4>
 800b17c:	4622      	mov	r2, r4
 800b17e:	4639      	mov	r1, r7
 800b180:	f004 fb30 	bl	800f7e4 <strncmp>
 800b184:	2800      	cmp	r0, #0
 800b186:	d033      	beq.n	800b1f0 <_strtod_l+0x1c8>
 800b188:	2000      	movs	r0, #0
 800b18a:	462a      	mov	r2, r5
 800b18c:	465c      	mov	r4, fp
 800b18e:	4603      	mov	r3, r0
 800b190:	9004      	str	r0, [sp, #16]
 800b192:	2a65      	cmp	r2, #101	; 0x65
 800b194:	d001      	beq.n	800b19a <_strtod_l+0x172>
 800b196:	2a45      	cmp	r2, #69	; 0x45
 800b198:	d114      	bne.n	800b1c4 <_strtod_l+0x19c>
 800b19a:	b91c      	cbnz	r4, 800b1a4 <_strtod_l+0x17c>
 800b19c:	9a07      	ldr	r2, [sp, #28]
 800b19e:	4302      	orrs	r2, r0
 800b1a0:	d09f      	beq.n	800b0e2 <_strtod_l+0xba>
 800b1a2:	2400      	movs	r4, #0
 800b1a4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b1a6:	1c72      	adds	r2, r6, #1
 800b1a8:	9219      	str	r2, [sp, #100]	; 0x64
 800b1aa:	7872      	ldrb	r2, [r6, #1]
 800b1ac:	2a2b      	cmp	r2, #43	; 0x2b
 800b1ae:	d079      	beq.n	800b2a4 <_strtod_l+0x27c>
 800b1b0:	2a2d      	cmp	r2, #45	; 0x2d
 800b1b2:	f000 8083 	beq.w	800b2bc <_strtod_l+0x294>
 800b1b6:	2700      	movs	r7, #0
 800b1b8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b1bc:	2909      	cmp	r1, #9
 800b1be:	f240 8083 	bls.w	800b2c8 <_strtod_l+0x2a0>
 800b1c2:	9619      	str	r6, [sp, #100]	; 0x64
 800b1c4:	2500      	movs	r5, #0
 800b1c6:	e09f      	b.n	800b308 <_strtod_l+0x2e0>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	e7c8      	b.n	800b15e <_strtod_l+0x136>
 800b1cc:	f1bb 0f08 	cmp.w	fp, #8
 800b1d0:	bfd5      	itete	le
 800b1d2:	9906      	ldrle	r1, [sp, #24]
 800b1d4:	9905      	ldrgt	r1, [sp, #20]
 800b1d6:	fb02 3301 	mlale	r3, r2, r1, r3
 800b1da:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b1de:	f100 0001 	add.w	r0, r0, #1
 800b1e2:	bfd4      	ite	le
 800b1e4:	9306      	strle	r3, [sp, #24]
 800b1e6:	9305      	strgt	r3, [sp, #20]
 800b1e8:	f10b 0b01 	add.w	fp, fp, #1
 800b1ec:	9019      	str	r0, [sp, #100]	; 0x64
 800b1ee:	e7be      	b.n	800b16e <_strtod_l+0x146>
 800b1f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1f2:	191a      	adds	r2, r3, r4
 800b1f4:	9219      	str	r2, [sp, #100]	; 0x64
 800b1f6:	5d1a      	ldrb	r2, [r3, r4]
 800b1f8:	f1bb 0f00 	cmp.w	fp, #0
 800b1fc:	d036      	beq.n	800b26c <_strtod_l+0x244>
 800b1fe:	465c      	mov	r4, fp
 800b200:	9004      	str	r0, [sp, #16]
 800b202:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b206:	2b09      	cmp	r3, #9
 800b208:	d912      	bls.n	800b230 <_strtod_l+0x208>
 800b20a:	2301      	movs	r3, #1
 800b20c:	e7c1      	b.n	800b192 <_strtod_l+0x16a>
 800b20e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b210:	3001      	adds	r0, #1
 800b212:	1c5a      	adds	r2, r3, #1
 800b214:	9219      	str	r2, [sp, #100]	; 0x64
 800b216:	785a      	ldrb	r2, [r3, #1]
 800b218:	2a30      	cmp	r2, #48	; 0x30
 800b21a:	d0f8      	beq.n	800b20e <_strtod_l+0x1e6>
 800b21c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b220:	2b08      	cmp	r3, #8
 800b222:	f200 84d5 	bhi.w	800bbd0 <_strtod_l+0xba8>
 800b226:	9004      	str	r0, [sp, #16]
 800b228:	2000      	movs	r0, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b22e:	9308      	str	r3, [sp, #32]
 800b230:	3a30      	subs	r2, #48	; 0x30
 800b232:	f100 0301 	add.w	r3, r0, #1
 800b236:	d013      	beq.n	800b260 <_strtod_l+0x238>
 800b238:	9904      	ldr	r1, [sp, #16]
 800b23a:	1905      	adds	r5, r0, r4
 800b23c:	4419      	add	r1, r3
 800b23e:	9104      	str	r1, [sp, #16]
 800b240:	4623      	mov	r3, r4
 800b242:	210a      	movs	r1, #10
 800b244:	42ab      	cmp	r3, r5
 800b246:	d113      	bne.n	800b270 <_strtod_l+0x248>
 800b248:	1823      	adds	r3, r4, r0
 800b24a:	2b08      	cmp	r3, #8
 800b24c:	f104 0401 	add.w	r4, r4, #1
 800b250:	4404      	add	r4, r0
 800b252:	dc1b      	bgt.n	800b28c <_strtod_l+0x264>
 800b254:	230a      	movs	r3, #10
 800b256:	9906      	ldr	r1, [sp, #24]
 800b258:	fb03 2301 	mla	r3, r3, r1, r2
 800b25c:	9306      	str	r3, [sp, #24]
 800b25e:	2300      	movs	r3, #0
 800b260:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b262:	4618      	mov	r0, r3
 800b264:	1c51      	adds	r1, r2, #1
 800b266:	9119      	str	r1, [sp, #100]	; 0x64
 800b268:	7852      	ldrb	r2, [r2, #1]
 800b26a:	e7ca      	b.n	800b202 <_strtod_l+0x1da>
 800b26c:	4658      	mov	r0, fp
 800b26e:	e7d3      	b.n	800b218 <_strtod_l+0x1f0>
 800b270:	2b08      	cmp	r3, #8
 800b272:	dc04      	bgt.n	800b27e <_strtod_l+0x256>
 800b274:	9f06      	ldr	r7, [sp, #24]
 800b276:	434f      	muls	r7, r1
 800b278:	9706      	str	r7, [sp, #24]
 800b27a:	3301      	adds	r3, #1
 800b27c:	e7e2      	b.n	800b244 <_strtod_l+0x21c>
 800b27e:	1c5f      	adds	r7, r3, #1
 800b280:	2f10      	cmp	r7, #16
 800b282:	bfde      	ittt	le
 800b284:	9f05      	ldrle	r7, [sp, #20]
 800b286:	434f      	mulle	r7, r1
 800b288:	9705      	strle	r7, [sp, #20]
 800b28a:	e7f6      	b.n	800b27a <_strtod_l+0x252>
 800b28c:	2c10      	cmp	r4, #16
 800b28e:	bfdf      	itttt	le
 800b290:	230a      	movle	r3, #10
 800b292:	9905      	ldrle	r1, [sp, #20]
 800b294:	fb03 2301 	mlale	r3, r3, r1, r2
 800b298:	9305      	strle	r3, [sp, #20]
 800b29a:	e7e0      	b.n	800b25e <_strtod_l+0x236>
 800b29c:	2300      	movs	r3, #0
 800b29e:	9304      	str	r3, [sp, #16]
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e77b      	b.n	800b19c <_strtod_l+0x174>
 800b2a4:	2700      	movs	r7, #0
 800b2a6:	1cb2      	adds	r2, r6, #2
 800b2a8:	9219      	str	r2, [sp, #100]	; 0x64
 800b2aa:	78b2      	ldrb	r2, [r6, #2]
 800b2ac:	e784      	b.n	800b1b8 <_strtod_l+0x190>
 800b2ae:	bf00      	nop
 800b2b0:	0805fe30 	.word	0x0805fe30
 800b2b4:	0805fcb0 	.word	0x0805fcb0
 800b2b8:	7ff00000 	.word	0x7ff00000
 800b2bc:	2701      	movs	r7, #1
 800b2be:	e7f2      	b.n	800b2a6 <_strtod_l+0x27e>
 800b2c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b2c2:	1c51      	adds	r1, r2, #1
 800b2c4:	9119      	str	r1, [sp, #100]	; 0x64
 800b2c6:	7852      	ldrb	r2, [r2, #1]
 800b2c8:	2a30      	cmp	r2, #48	; 0x30
 800b2ca:	d0f9      	beq.n	800b2c0 <_strtod_l+0x298>
 800b2cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b2d0:	2908      	cmp	r1, #8
 800b2d2:	f63f af77 	bhi.w	800b1c4 <_strtod_l+0x19c>
 800b2d6:	f04f 0e0a 	mov.w	lr, #10
 800b2da:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800b2de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b2e0:	9209      	str	r2, [sp, #36]	; 0x24
 800b2e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b2e4:	1c51      	adds	r1, r2, #1
 800b2e6:	9119      	str	r1, [sp, #100]	; 0x64
 800b2e8:	7852      	ldrb	r2, [r2, #1]
 800b2ea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800b2ee:	2d09      	cmp	r5, #9
 800b2f0:	d935      	bls.n	800b35e <_strtod_l+0x336>
 800b2f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b2f4:	1b49      	subs	r1, r1, r5
 800b2f6:	2908      	cmp	r1, #8
 800b2f8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b2fc:	dc02      	bgt.n	800b304 <_strtod_l+0x2dc>
 800b2fe:	4565      	cmp	r5, ip
 800b300:	bfa8      	it	ge
 800b302:	4665      	movge	r5, ip
 800b304:	b107      	cbz	r7, 800b308 <_strtod_l+0x2e0>
 800b306:	426d      	negs	r5, r5
 800b308:	2c00      	cmp	r4, #0
 800b30a:	d14c      	bne.n	800b3a6 <_strtod_l+0x37e>
 800b30c:	9907      	ldr	r1, [sp, #28]
 800b30e:	4301      	orrs	r1, r0
 800b310:	f47f aecb 	bne.w	800b0aa <_strtod_l+0x82>
 800b314:	2b00      	cmp	r3, #0
 800b316:	f47f aee4 	bne.w	800b0e2 <_strtod_l+0xba>
 800b31a:	2a69      	cmp	r2, #105	; 0x69
 800b31c:	d026      	beq.n	800b36c <_strtod_l+0x344>
 800b31e:	dc23      	bgt.n	800b368 <_strtod_l+0x340>
 800b320:	2a49      	cmp	r2, #73	; 0x49
 800b322:	d023      	beq.n	800b36c <_strtod_l+0x344>
 800b324:	2a4e      	cmp	r2, #78	; 0x4e
 800b326:	f47f aedc 	bne.w	800b0e2 <_strtod_l+0xba>
 800b32a:	499d      	ldr	r1, [pc, #628]	; (800b5a0 <_strtod_l+0x578>)
 800b32c:	a819      	add	r0, sp, #100	; 0x64
 800b32e:	f003 fccf 	bl	800ecd0 <__match>
 800b332:	2800      	cmp	r0, #0
 800b334:	f43f aed5 	beq.w	800b0e2 <_strtod_l+0xba>
 800b338:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	2b28      	cmp	r3, #40	; 0x28
 800b33e:	d12c      	bne.n	800b39a <_strtod_l+0x372>
 800b340:	4998      	ldr	r1, [pc, #608]	; (800b5a4 <_strtod_l+0x57c>)
 800b342:	aa1c      	add	r2, sp, #112	; 0x70
 800b344:	a819      	add	r0, sp, #100	; 0x64
 800b346:	f003 fcd7 	bl	800ecf8 <__hexnan>
 800b34a:	2805      	cmp	r0, #5
 800b34c:	d125      	bne.n	800b39a <_strtod_l+0x372>
 800b34e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b350:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800b354:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b358:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b35c:	e6a5      	b.n	800b0aa <_strtod_l+0x82>
 800b35e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800b362:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800b366:	e7bc      	b.n	800b2e2 <_strtod_l+0x2ba>
 800b368:	2a6e      	cmp	r2, #110	; 0x6e
 800b36a:	e7dc      	b.n	800b326 <_strtod_l+0x2fe>
 800b36c:	498e      	ldr	r1, [pc, #568]	; (800b5a8 <_strtod_l+0x580>)
 800b36e:	a819      	add	r0, sp, #100	; 0x64
 800b370:	f003 fcae 	bl	800ecd0 <__match>
 800b374:	2800      	cmp	r0, #0
 800b376:	f43f aeb4 	beq.w	800b0e2 <_strtod_l+0xba>
 800b37a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b37c:	498b      	ldr	r1, [pc, #556]	; (800b5ac <_strtod_l+0x584>)
 800b37e:	3b01      	subs	r3, #1
 800b380:	a819      	add	r0, sp, #100	; 0x64
 800b382:	9319      	str	r3, [sp, #100]	; 0x64
 800b384:	f003 fca4 	bl	800ecd0 <__match>
 800b388:	b910      	cbnz	r0, 800b390 <_strtod_l+0x368>
 800b38a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b38c:	3301      	adds	r3, #1
 800b38e:	9319      	str	r3, [sp, #100]	; 0x64
 800b390:	f04f 0800 	mov.w	r8, #0
 800b394:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800b5b0 <_strtod_l+0x588>
 800b398:	e687      	b.n	800b0aa <_strtod_l+0x82>
 800b39a:	4886      	ldr	r0, [pc, #536]	; (800b5b4 <_strtod_l+0x58c>)
 800b39c:	f004 fa1c 	bl	800f7d8 <nan>
 800b3a0:	4680      	mov	r8, r0
 800b3a2:	4689      	mov	r9, r1
 800b3a4:	e681      	b.n	800b0aa <_strtod_l+0x82>
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	f1bb 0f00 	cmp.w	fp, #0
 800b3ac:	bf08      	it	eq
 800b3ae:	46a3      	moveq	fp, r4
 800b3b0:	1aeb      	subs	r3, r5, r3
 800b3b2:	2c10      	cmp	r4, #16
 800b3b4:	9806      	ldr	r0, [sp, #24]
 800b3b6:	4626      	mov	r6, r4
 800b3b8:	9307      	str	r3, [sp, #28]
 800b3ba:	bfa8      	it	ge
 800b3bc:	2610      	movge	r6, #16
 800b3be:	f7f5 f87d 	bl	80004bc <__aeabi_ui2d>
 800b3c2:	2c09      	cmp	r4, #9
 800b3c4:	4680      	mov	r8, r0
 800b3c6:	4689      	mov	r9, r1
 800b3c8:	dd13      	ble.n	800b3f2 <_strtod_l+0x3ca>
 800b3ca:	4b7b      	ldr	r3, [pc, #492]	; (800b5b8 <_strtod_l+0x590>)
 800b3cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b3d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b3d4:	f7f5 f8ec 	bl	80005b0 <__aeabi_dmul>
 800b3d8:	4680      	mov	r8, r0
 800b3da:	9805      	ldr	r0, [sp, #20]
 800b3dc:	4689      	mov	r9, r1
 800b3de:	f7f5 f86d 	bl	80004bc <__aeabi_ui2d>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	f7f4 ff2b 	bl	8000244 <__adddf3>
 800b3ee:	4680      	mov	r8, r0
 800b3f0:	4689      	mov	r9, r1
 800b3f2:	2c0f      	cmp	r4, #15
 800b3f4:	dc36      	bgt.n	800b464 <_strtod_l+0x43c>
 800b3f6:	9b07      	ldr	r3, [sp, #28]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f43f ae56 	beq.w	800b0aa <_strtod_l+0x82>
 800b3fe:	dd22      	ble.n	800b446 <_strtod_l+0x41e>
 800b400:	2b16      	cmp	r3, #22
 800b402:	dc09      	bgt.n	800b418 <_strtod_l+0x3f0>
 800b404:	496c      	ldr	r1, [pc, #432]	; (800b5b8 <_strtod_l+0x590>)
 800b406:	4642      	mov	r2, r8
 800b408:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b40c:	464b      	mov	r3, r9
 800b40e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b412:	f7f5 f8cd 	bl	80005b0 <__aeabi_dmul>
 800b416:	e7c3      	b.n	800b3a0 <_strtod_l+0x378>
 800b418:	9a07      	ldr	r2, [sp, #28]
 800b41a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b41e:	4293      	cmp	r3, r2
 800b420:	db20      	blt.n	800b464 <_strtod_l+0x43c>
 800b422:	4d65      	ldr	r5, [pc, #404]	; (800b5b8 <_strtod_l+0x590>)
 800b424:	f1c4 040f 	rsb	r4, r4, #15
 800b428:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b42c:	4642      	mov	r2, r8
 800b42e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b432:	464b      	mov	r3, r9
 800b434:	f7f5 f8bc 	bl	80005b0 <__aeabi_dmul>
 800b438:	9b07      	ldr	r3, [sp, #28]
 800b43a:	1b1c      	subs	r4, r3, r4
 800b43c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b440:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b444:	e7e5      	b.n	800b412 <_strtod_l+0x3ea>
 800b446:	9b07      	ldr	r3, [sp, #28]
 800b448:	3316      	adds	r3, #22
 800b44a:	db0b      	blt.n	800b464 <_strtod_l+0x43c>
 800b44c:	9b04      	ldr	r3, [sp, #16]
 800b44e:	4640      	mov	r0, r8
 800b450:	1b5d      	subs	r5, r3, r5
 800b452:	4b59      	ldr	r3, [pc, #356]	; (800b5b8 <_strtod_l+0x590>)
 800b454:	4649      	mov	r1, r9
 800b456:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b45a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b45e:	f7f5 f9d1 	bl	8000804 <__aeabi_ddiv>
 800b462:	e79d      	b.n	800b3a0 <_strtod_l+0x378>
 800b464:	9b07      	ldr	r3, [sp, #28]
 800b466:	1ba6      	subs	r6, r4, r6
 800b468:	441e      	add	r6, r3
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	dd74      	ble.n	800b558 <_strtod_l+0x530>
 800b46e:	f016 030f 	ands.w	r3, r6, #15
 800b472:	d00a      	beq.n	800b48a <_strtod_l+0x462>
 800b474:	4950      	ldr	r1, [pc, #320]	; (800b5b8 <_strtod_l+0x590>)
 800b476:	4642      	mov	r2, r8
 800b478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b47c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b480:	464b      	mov	r3, r9
 800b482:	f7f5 f895 	bl	80005b0 <__aeabi_dmul>
 800b486:	4680      	mov	r8, r0
 800b488:	4689      	mov	r9, r1
 800b48a:	f036 060f 	bics.w	r6, r6, #15
 800b48e:	d052      	beq.n	800b536 <_strtod_l+0x50e>
 800b490:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800b494:	dd27      	ble.n	800b4e6 <_strtod_l+0x4be>
 800b496:	f04f 0b00 	mov.w	fp, #0
 800b49a:	f8cd b010 	str.w	fp, [sp, #16]
 800b49e:	f8cd b020 	str.w	fp, [sp, #32]
 800b4a2:	f8cd b018 	str.w	fp, [sp, #24]
 800b4a6:	2322      	movs	r3, #34	; 0x22
 800b4a8:	f04f 0800 	mov.w	r8, #0
 800b4ac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800b5b0 <_strtod_l+0x588>
 800b4b0:	f8ca 3000 	str.w	r3, [sl]
 800b4b4:	9b08      	ldr	r3, [sp, #32]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f43f adf7 	beq.w	800b0aa <_strtod_l+0x82>
 800b4bc:	4650      	mov	r0, sl
 800b4be:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b4c0:	f003 fd11 	bl	800eee6 <_Bfree>
 800b4c4:	4650      	mov	r0, sl
 800b4c6:	9906      	ldr	r1, [sp, #24]
 800b4c8:	f003 fd0d 	bl	800eee6 <_Bfree>
 800b4cc:	4650      	mov	r0, sl
 800b4ce:	9904      	ldr	r1, [sp, #16]
 800b4d0:	f003 fd09 	bl	800eee6 <_Bfree>
 800b4d4:	4650      	mov	r0, sl
 800b4d6:	9908      	ldr	r1, [sp, #32]
 800b4d8:	f003 fd05 	bl	800eee6 <_Bfree>
 800b4dc:	4659      	mov	r1, fp
 800b4de:	4650      	mov	r0, sl
 800b4e0:	f003 fd01 	bl	800eee6 <_Bfree>
 800b4e4:	e5e1      	b.n	800b0aa <_strtod_l+0x82>
 800b4e6:	4b35      	ldr	r3, [pc, #212]	; (800b5bc <_strtod_l+0x594>)
 800b4e8:	4640      	mov	r0, r8
 800b4ea:	9305      	str	r3, [sp, #20]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	461f      	mov	r7, r3
 800b4f2:	1136      	asrs	r6, r6, #4
 800b4f4:	2e01      	cmp	r6, #1
 800b4f6:	dc21      	bgt.n	800b53c <_strtod_l+0x514>
 800b4f8:	b10b      	cbz	r3, 800b4fe <_strtod_l+0x4d6>
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	4689      	mov	r9, r1
 800b4fe:	4b2f      	ldr	r3, [pc, #188]	; (800b5bc <_strtod_l+0x594>)
 800b500:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b504:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b508:	4642      	mov	r2, r8
 800b50a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b50e:	464b      	mov	r3, r9
 800b510:	f7f5 f84e 	bl	80005b0 <__aeabi_dmul>
 800b514:	4b26      	ldr	r3, [pc, #152]	; (800b5b0 <_strtod_l+0x588>)
 800b516:	460a      	mov	r2, r1
 800b518:	400b      	ands	r3, r1
 800b51a:	4929      	ldr	r1, [pc, #164]	; (800b5c0 <_strtod_l+0x598>)
 800b51c:	4680      	mov	r8, r0
 800b51e:	428b      	cmp	r3, r1
 800b520:	d8b9      	bhi.n	800b496 <_strtod_l+0x46e>
 800b522:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b526:	428b      	cmp	r3, r1
 800b528:	bf86      	itte	hi
 800b52a:	f04f 38ff 	movhi.w	r8, #4294967295
 800b52e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b5c4 <_strtod_l+0x59c>
 800b532:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b536:	2300      	movs	r3, #0
 800b538:	9305      	str	r3, [sp, #20]
 800b53a:	e07f      	b.n	800b63c <_strtod_l+0x614>
 800b53c:	07f2      	lsls	r2, r6, #31
 800b53e:	d505      	bpl.n	800b54c <_strtod_l+0x524>
 800b540:	9b05      	ldr	r3, [sp, #20]
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f5 f833 	bl	80005b0 <__aeabi_dmul>
 800b54a:	2301      	movs	r3, #1
 800b54c:	9a05      	ldr	r2, [sp, #20]
 800b54e:	3701      	adds	r7, #1
 800b550:	3208      	adds	r2, #8
 800b552:	1076      	asrs	r6, r6, #1
 800b554:	9205      	str	r2, [sp, #20]
 800b556:	e7cd      	b.n	800b4f4 <_strtod_l+0x4cc>
 800b558:	d0ed      	beq.n	800b536 <_strtod_l+0x50e>
 800b55a:	4276      	negs	r6, r6
 800b55c:	f016 020f 	ands.w	r2, r6, #15
 800b560:	d00a      	beq.n	800b578 <_strtod_l+0x550>
 800b562:	4b15      	ldr	r3, [pc, #84]	; (800b5b8 <_strtod_l+0x590>)
 800b564:	4640      	mov	r0, r8
 800b566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b56a:	4649      	mov	r1, r9
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f7f5 f948 	bl	8000804 <__aeabi_ddiv>
 800b574:	4680      	mov	r8, r0
 800b576:	4689      	mov	r9, r1
 800b578:	1136      	asrs	r6, r6, #4
 800b57a:	d0dc      	beq.n	800b536 <_strtod_l+0x50e>
 800b57c:	2e1f      	cmp	r6, #31
 800b57e:	dd23      	ble.n	800b5c8 <_strtod_l+0x5a0>
 800b580:	f04f 0b00 	mov.w	fp, #0
 800b584:	f8cd b010 	str.w	fp, [sp, #16]
 800b588:	f8cd b020 	str.w	fp, [sp, #32]
 800b58c:	f8cd b018 	str.w	fp, [sp, #24]
 800b590:	2322      	movs	r3, #34	; 0x22
 800b592:	f04f 0800 	mov.w	r8, #0
 800b596:	f04f 0900 	mov.w	r9, #0
 800b59a:	f8ca 3000 	str.w	r3, [sl]
 800b59e:	e789      	b.n	800b4b4 <_strtod_l+0x48c>
 800b5a0:	0805fd0d 	.word	0x0805fd0d
 800b5a4:	0805fcc4 	.word	0x0805fcc4
 800b5a8:	0805fd05 	.word	0x0805fd05
 800b5ac:	0805fd5b 	.word	0x0805fd5b
 800b5b0:	7ff00000 	.word	0x7ff00000
 800b5b4:	0805ffcf 	.word	0x0805ffcf
 800b5b8:	0805fec0 	.word	0x0805fec0
 800b5bc:	0805fe98 	.word	0x0805fe98
 800b5c0:	7ca00000 	.word	0x7ca00000
 800b5c4:	7fefffff 	.word	0x7fefffff
 800b5c8:	f016 0310 	ands.w	r3, r6, #16
 800b5cc:	bf18      	it	ne
 800b5ce:	236a      	movne	r3, #106	; 0x6a
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	9305      	str	r3, [sp, #20]
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	4fb0      	ldr	r7, [pc, #704]	; (800b89c <_strtod_l+0x874>)
 800b5da:	07f2      	lsls	r2, r6, #31
 800b5dc:	d504      	bpl.n	800b5e8 <_strtod_l+0x5c0>
 800b5de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5e2:	f7f4 ffe5 	bl	80005b0 <__aeabi_dmul>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	1076      	asrs	r6, r6, #1
 800b5ea:	f107 0708 	add.w	r7, r7, #8
 800b5ee:	d1f4      	bne.n	800b5da <_strtod_l+0x5b2>
 800b5f0:	b10b      	cbz	r3, 800b5f6 <_strtod_l+0x5ce>
 800b5f2:	4680      	mov	r8, r0
 800b5f4:	4689      	mov	r9, r1
 800b5f6:	9b05      	ldr	r3, [sp, #20]
 800b5f8:	b1c3      	cbz	r3, 800b62c <_strtod_l+0x604>
 800b5fa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b5fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b602:	2b00      	cmp	r3, #0
 800b604:	4649      	mov	r1, r9
 800b606:	dd11      	ble.n	800b62c <_strtod_l+0x604>
 800b608:	2b1f      	cmp	r3, #31
 800b60a:	f340 8127 	ble.w	800b85c <_strtod_l+0x834>
 800b60e:	2b34      	cmp	r3, #52	; 0x34
 800b610:	bfd8      	it	le
 800b612:	f04f 33ff 	movle.w	r3, #4294967295
 800b616:	f04f 0800 	mov.w	r8, #0
 800b61a:	bfcf      	iteee	gt
 800b61c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b620:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b624:	fa03 f202 	lslle.w	r2, r3, r2
 800b628:	ea02 0901 	andle.w	r9, r2, r1
 800b62c:	2200      	movs	r2, #0
 800b62e:	2300      	movs	r3, #0
 800b630:	4640      	mov	r0, r8
 800b632:	4649      	mov	r1, r9
 800b634:	f7f5 fa24 	bl	8000a80 <__aeabi_dcmpeq>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d1a1      	bne.n	800b580 <_strtod_l+0x558>
 800b63c:	9b06      	ldr	r3, [sp, #24]
 800b63e:	465a      	mov	r2, fp
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	4650      	mov	r0, sl
 800b644:	4623      	mov	r3, r4
 800b646:	9908      	ldr	r1, [sp, #32]
 800b648:	f003 fc9c 	bl	800ef84 <__s2b>
 800b64c:	9008      	str	r0, [sp, #32]
 800b64e:	2800      	cmp	r0, #0
 800b650:	f43f af21 	beq.w	800b496 <_strtod_l+0x46e>
 800b654:	9b04      	ldr	r3, [sp, #16]
 800b656:	f04f 0b00 	mov.w	fp, #0
 800b65a:	1b5d      	subs	r5, r3, r5
 800b65c:	9b07      	ldr	r3, [sp, #28]
 800b65e:	f8cd b010 	str.w	fp, [sp, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	bfb4      	ite	lt
 800b666:	462b      	movlt	r3, r5
 800b668:	2300      	movge	r3, #0
 800b66a:	930e      	str	r3, [sp, #56]	; 0x38
 800b66c:	9b07      	ldr	r3, [sp, #28]
 800b66e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b672:	9314      	str	r3, [sp, #80]	; 0x50
 800b674:	9b08      	ldr	r3, [sp, #32]
 800b676:	4650      	mov	r0, sl
 800b678:	6859      	ldr	r1, [r3, #4]
 800b67a:	f003 fc0f 	bl	800ee9c <_Balloc>
 800b67e:	9006      	str	r0, [sp, #24]
 800b680:	2800      	cmp	r0, #0
 800b682:	f43f af10 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b686:	9b08      	ldr	r3, [sp, #32]
 800b688:	300c      	adds	r0, #12
 800b68a:	691a      	ldr	r2, [r3, #16]
 800b68c:	f103 010c 	add.w	r1, r3, #12
 800b690:	3202      	adds	r2, #2
 800b692:	0092      	lsls	r2, r2, #2
 800b694:	f003 fbda 	bl	800ee4c <memcpy>
 800b698:	ab1c      	add	r3, sp, #112	; 0x70
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	ab1b      	add	r3, sp, #108	; 0x6c
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	464b      	mov	r3, r9
 800b6a4:	4650      	mov	r0, sl
 800b6a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b6aa:	f003 ff93 	bl	800f5d4 <__d2b>
 800b6ae:	901a      	str	r0, [sp, #104]	; 0x68
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	f43f aef8 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	4650      	mov	r0, sl
 800b6ba:	f003 fcfb 	bl	800f0b4 <__i2b>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	9004      	str	r0, [sp, #16]
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	f43f aeef 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b6c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b6ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b6cc:	2d00      	cmp	r5, #0
 800b6ce:	bfab      	itete	ge
 800b6d0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b6d2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b6d4:	18ee      	addge	r6, r5, r3
 800b6d6:	1b5c      	sublt	r4, r3, r5
 800b6d8:	9b05      	ldr	r3, [sp, #20]
 800b6da:	bfa8      	it	ge
 800b6dc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b6de:	eba5 0503 	sub.w	r5, r5, r3
 800b6e2:	4415      	add	r5, r2
 800b6e4:	4b6e      	ldr	r3, [pc, #440]	; (800b8a0 <_strtod_l+0x878>)
 800b6e6:	f105 35ff 	add.w	r5, r5, #4294967295
 800b6ea:	bfb8      	it	lt
 800b6ec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b6ee:	429d      	cmp	r5, r3
 800b6f0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b6f4:	f280 80c4 	bge.w	800b880 <_strtod_l+0x858>
 800b6f8:	1b5b      	subs	r3, r3, r5
 800b6fa:	2b1f      	cmp	r3, #31
 800b6fc:	f04f 0701 	mov.w	r7, #1
 800b700:	eba2 0203 	sub.w	r2, r2, r3
 800b704:	f300 80b1 	bgt.w	800b86a <_strtod_l+0x842>
 800b708:	2500      	movs	r5, #0
 800b70a:	fa07 f303 	lsl.w	r3, r7, r3
 800b70e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b710:	18b7      	adds	r7, r6, r2
 800b712:	9b05      	ldr	r3, [sp, #20]
 800b714:	42be      	cmp	r6, r7
 800b716:	4414      	add	r4, r2
 800b718:	441c      	add	r4, r3
 800b71a:	4633      	mov	r3, r6
 800b71c:	bfa8      	it	ge
 800b71e:	463b      	movge	r3, r7
 800b720:	42a3      	cmp	r3, r4
 800b722:	bfa8      	it	ge
 800b724:	4623      	movge	r3, r4
 800b726:	2b00      	cmp	r3, #0
 800b728:	bfc2      	ittt	gt
 800b72a:	1aff      	subgt	r7, r7, r3
 800b72c:	1ae4      	subgt	r4, r4, r3
 800b72e:	1af6      	subgt	r6, r6, r3
 800b730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b732:	2b00      	cmp	r3, #0
 800b734:	dd17      	ble.n	800b766 <_strtod_l+0x73e>
 800b736:	461a      	mov	r2, r3
 800b738:	4650      	mov	r0, sl
 800b73a:	9904      	ldr	r1, [sp, #16]
 800b73c:	f003 fd78 	bl	800f230 <__pow5mult>
 800b740:	9004      	str	r0, [sp, #16]
 800b742:	2800      	cmp	r0, #0
 800b744:	f43f aeaf 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b748:	4601      	mov	r1, r0
 800b74a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b74c:	4650      	mov	r0, sl
 800b74e:	f003 fcc7 	bl	800f0e0 <__multiply>
 800b752:	9009      	str	r0, [sp, #36]	; 0x24
 800b754:	2800      	cmp	r0, #0
 800b756:	f43f aea6 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b75a:	4650      	mov	r0, sl
 800b75c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b75e:	f003 fbc2 	bl	800eee6 <_Bfree>
 800b762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b764:	931a      	str	r3, [sp, #104]	; 0x68
 800b766:	2f00      	cmp	r7, #0
 800b768:	f300 808e 	bgt.w	800b888 <_strtod_l+0x860>
 800b76c:	9b07      	ldr	r3, [sp, #28]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	dd08      	ble.n	800b784 <_strtod_l+0x75c>
 800b772:	4650      	mov	r0, sl
 800b774:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b776:	9906      	ldr	r1, [sp, #24]
 800b778:	f003 fd5a 	bl	800f230 <__pow5mult>
 800b77c:	9006      	str	r0, [sp, #24]
 800b77e:	2800      	cmp	r0, #0
 800b780:	f43f ae91 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b784:	2c00      	cmp	r4, #0
 800b786:	dd08      	ble.n	800b79a <_strtod_l+0x772>
 800b788:	4622      	mov	r2, r4
 800b78a:	4650      	mov	r0, sl
 800b78c:	9906      	ldr	r1, [sp, #24]
 800b78e:	f003 fd8f 	bl	800f2b0 <__lshift>
 800b792:	9006      	str	r0, [sp, #24]
 800b794:	2800      	cmp	r0, #0
 800b796:	f43f ae86 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b79a:	2e00      	cmp	r6, #0
 800b79c:	dd08      	ble.n	800b7b0 <_strtod_l+0x788>
 800b79e:	4632      	mov	r2, r6
 800b7a0:	4650      	mov	r0, sl
 800b7a2:	9904      	ldr	r1, [sp, #16]
 800b7a4:	f003 fd84 	bl	800f2b0 <__lshift>
 800b7a8:	9004      	str	r0, [sp, #16]
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	f43f ae7b 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b7b0:	4650      	mov	r0, sl
 800b7b2:	9a06      	ldr	r2, [sp, #24]
 800b7b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b7b6:	f003 fe07 	bl	800f3c8 <__mdiff>
 800b7ba:	4683      	mov	fp, r0
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	f43f ae72 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b7c2:	2400      	movs	r4, #0
 800b7c4:	68c3      	ldr	r3, [r0, #12]
 800b7c6:	9904      	ldr	r1, [sp, #16]
 800b7c8:	60c4      	str	r4, [r0, #12]
 800b7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7cc:	f003 fde0 	bl	800f390 <__mcmp>
 800b7d0:	42a0      	cmp	r0, r4
 800b7d2:	da6b      	bge.n	800b8ac <_strtod_l+0x884>
 800b7d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7d6:	ea53 0308 	orrs.w	r3, r3, r8
 800b7da:	f040 8091 	bne.w	800b900 <_strtod_l+0x8d8>
 800b7de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f040 808c 	bne.w	800b900 <_strtod_l+0x8d8>
 800b7e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7ec:	0d1b      	lsrs	r3, r3, #20
 800b7ee:	051b      	lsls	r3, r3, #20
 800b7f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b7f4:	f240 8084 	bls.w	800b900 <_strtod_l+0x8d8>
 800b7f8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b7fc:	b91b      	cbnz	r3, 800b806 <_strtod_l+0x7de>
 800b7fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b802:	2b01      	cmp	r3, #1
 800b804:	dd7c      	ble.n	800b900 <_strtod_l+0x8d8>
 800b806:	4659      	mov	r1, fp
 800b808:	2201      	movs	r2, #1
 800b80a:	4650      	mov	r0, sl
 800b80c:	f003 fd50 	bl	800f2b0 <__lshift>
 800b810:	9904      	ldr	r1, [sp, #16]
 800b812:	4683      	mov	fp, r0
 800b814:	f003 fdbc 	bl	800f390 <__mcmp>
 800b818:	2800      	cmp	r0, #0
 800b81a:	dd71      	ble.n	800b900 <_strtod_l+0x8d8>
 800b81c:	9905      	ldr	r1, [sp, #20]
 800b81e:	464b      	mov	r3, r9
 800b820:	4a20      	ldr	r2, [pc, #128]	; (800b8a4 <_strtod_l+0x87c>)
 800b822:	2900      	cmp	r1, #0
 800b824:	f000 808c 	beq.w	800b940 <_strtod_l+0x918>
 800b828:	ea02 0109 	and.w	r1, r2, r9
 800b82c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b830:	f300 8086 	bgt.w	800b940 <_strtod_l+0x918>
 800b834:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b838:	f77f aeaa 	ble.w	800b590 <_strtod_l+0x568>
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	4b19      	ldr	r3, [pc, #100]	; (800b8a8 <_strtod_l+0x880>)
 800b842:	2200      	movs	r2, #0
 800b844:	f7f4 feb4 	bl	80005b0 <__aeabi_dmul>
 800b848:	460b      	mov	r3, r1
 800b84a:	4303      	orrs	r3, r0
 800b84c:	bf08      	it	eq
 800b84e:	2322      	moveq	r3, #34	; 0x22
 800b850:	4680      	mov	r8, r0
 800b852:	4689      	mov	r9, r1
 800b854:	bf08      	it	eq
 800b856:	f8ca 3000 	streq.w	r3, [sl]
 800b85a:	e62f      	b.n	800b4bc <_strtod_l+0x494>
 800b85c:	f04f 32ff 	mov.w	r2, #4294967295
 800b860:	fa02 f303 	lsl.w	r3, r2, r3
 800b864:	ea03 0808 	and.w	r8, r3, r8
 800b868:	e6e0      	b.n	800b62c <_strtod_l+0x604>
 800b86a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b86e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b872:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b876:	35e2      	adds	r5, #226	; 0xe2
 800b878:	fa07 f505 	lsl.w	r5, r7, r5
 800b87c:	970f      	str	r7, [sp, #60]	; 0x3c
 800b87e:	e747      	b.n	800b710 <_strtod_l+0x6e8>
 800b880:	2301      	movs	r3, #1
 800b882:	2500      	movs	r5, #0
 800b884:	930f      	str	r3, [sp, #60]	; 0x3c
 800b886:	e743      	b.n	800b710 <_strtod_l+0x6e8>
 800b888:	463a      	mov	r2, r7
 800b88a:	4650      	mov	r0, sl
 800b88c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b88e:	f003 fd0f 	bl	800f2b0 <__lshift>
 800b892:	901a      	str	r0, [sp, #104]	; 0x68
 800b894:	2800      	cmp	r0, #0
 800b896:	f47f af69 	bne.w	800b76c <_strtod_l+0x744>
 800b89a:	e604      	b.n	800b4a6 <_strtod_l+0x47e>
 800b89c:	0805fcd8 	.word	0x0805fcd8
 800b8a0:	fffffc02 	.word	0xfffffc02
 800b8a4:	7ff00000 	.word	0x7ff00000
 800b8a8:	39500000 	.word	0x39500000
 800b8ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b8b0:	d165      	bne.n	800b97e <_strtod_l+0x956>
 800b8b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8b8:	b35a      	cbz	r2, 800b912 <_strtod_l+0x8ea>
 800b8ba:	4a99      	ldr	r2, [pc, #612]	; (800bb20 <_strtod_l+0xaf8>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d12b      	bne.n	800b918 <_strtod_l+0x8f0>
 800b8c0:	9b05      	ldr	r3, [sp, #20]
 800b8c2:	4641      	mov	r1, r8
 800b8c4:	b303      	cbz	r3, 800b908 <_strtod_l+0x8e0>
 800b8c6:	464a      	mov	r2, r9
 800b8c8:	4b96      	ldr	r3, [pc, #600]	; (800bb24 <_strtod_l+0xafc>)
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d4:	d81b      	bhi.n	800b90e <_strtod_l+0x8e6>
 800b8d6:	0d1b      	lsrs	r3, r3, #20
 800b8d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e0:	4299      	cmp	r1, r3
 800b8e2:	d119      	bne.n	800b918 <_strtod_l+0x8f0>
 800b8e4:	4b90      	ldr	r3, [pc, #576]	; (800bb28 <_strtod_l+0xb00>)
 800b8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d102      	bne.n	800b8f2 <_strtod_l+0x8ca>
 800b8ec:	3101      	adds	r1, #1
 800b8ee:	f43f adda 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b8f2:	f04f 0800 	mov.w	r8, #0
 800b8f6:	4b8b      	ldr	r3, [pc, #556]	; (800bb24 <_strtod_l+0xafc>)
 800b8f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8fa:	401a      	ands	r2, r3
 800b8fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b900:	9b05      	ldr	r3, [sp, #20]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d19a      	bne.n	800b83c <_strtod_l+0x814>
 800b906:	e5d9      	b.n	800b4bc <_strtod_l+0x494>
 800b908:	f04f 33ff 	mov.w	r3, #4294967295
 800b90c:	e7e8      	b.n	800b8e0 <_strtod_l+0x8b8>
 800b90e:	4613      	mov	r3, r2
 800b910:	e7e6      	b.n	800b8e0 <_strtod_l+0x8b8>
 800b912:	ea53 0308 	orrs.w	r3, r3, r8
 800b916:	d081      	beq.n	800b81c <_strtod_l+0x7f4>
 800b918:	b1e5      	cbz	r5, 800b954 <_strtod_l+0x92c>
 800b91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91c:	421d      	tst	r5, r3
 800b91e:	d0ef      	beq.n	800b900 <_strtod_l+0x8d8>
 800b920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b922:	4640      	mov	r0, r8
 800b924:	4649      	mov	r1, r9
 800b926:	9a05      	ldr	r2, [sp, #20]
 800b928:	b1c3      	cbz	r3, 800b95c <_strtod_l+0x934>
 800b92a:	f7ff fb5b 	bl	800afe4 <sulp>
 800b92e:	4602      	mov	r2, r0
 800b930:	460b      	mov	r3, r1
 800b932:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b936:	f7f4 fc85 	bl	8000244 <__adddf3>
 800b93a:	4680      	mov	r8, r0
 800b93c:	4689      	mov	r9, r1
 800b93e:	e7df      	b.n	800b900 <_strtod_l+0x8d8>
 800b940:	4013      	ands	r3, r2
 800b942:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b946:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b94a:	f04f 38ff 	mov.w	r8, #4294967295
 800b94e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b952:	e7d5      	b.n	800b900 <_strtod_l+0x8d8>
 800b954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b956:	ea13 0f08 	tst.w	r3, r8
 800b95a:	e7e0      	b.n	800b91e <_strtod_l+0x8f6>
 800b95c:	f7ff fb42 	bl	800afe4 <sulp>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b968:	f7f4 fc6a 	bl	8000240 <__aeabi_dsub>
 800b96c:	2200      	movs	r2, #0
 800b96e:	2300      	movs	r3, #0
 800b970:	4680      	mov	r8, r0
 800b972:	4689      	mov	r9, r1
 800b974:	f7f5 f884 	bl	8000a80 <__aeabi_dcmpeq>
 800b978:	2800      	cmp	r0, #0
 800b97a:	d0c1      	beq.n	800b900 <_strtod_l+0x8d8>
 800b97c:	e608      	b.n	800b590 <_strtod_l+0x568>
 800b97e:	4658      	mov	r0, fp
 800b980:	9904      	ldr	r1, [sp, #16]
 800b982:	f003 fe83 	bl	800f68c <__ratio>
 800b986:	2200      	movs	r2, #0
 800b988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b98c:	4606      	mov	r6, r0
 800b98e:	460f      	mov	r7, r1
 800b990:	f7f5 f88a 	bl	8000aa8 <__aeabi_dcmple>
 800b994:	2800      	cmp	r0, #0
 800b996:	d070      	beq.n	800ba7a <_strtod_l+0xa52>
 800b998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d042      	beq.n	800ba24 <_strtod_l+0x9fc>
 800b99e:	2600      	movs	r6, #0
 800b9a0:	4f62      	ldr	r7, [pc, #392]	; (800bb2c <_strtod_l+0xb04>)
 800b9a2:	4d62      	ldr	r5, [pc, #392]	; (800bb2c <_strtod_l+0xb04>)
 800b9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9aa:	0d1b      	lsrs	r3, r3, #20
 800b9ac:	051b      	lsls	r3, r3, #20
 800b9ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9b2:	4b5f      	ldr	r3, [pc, #380]	; (800bb30 <_strtod_l+0xb08>)
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	f040 80c3 	bne.w	800bb40 <_strtod_l+0xb18>
 800b9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9bc:	4640      	mov	r0, r8
 800b9be:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	f003 fd8c 	bl	800f4e0 <__ulp>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	4639      	mov	r1, r7
 800b9d0:	f7f4 fdee 	bl	80005b0 <__aeabi_dmul>
 800b9d4:	4642      	mov	r2, r8
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	f7f4 fc34 	bl	8000244 <__adddf3>
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4951      	ldr	r1, [pc, #324]	; (800bb24 <_strtod_l+0xafc>)
 800b9e0:	4a54      	ldr	r2, [pc, #336]	; (800bb34 <_strtod_l+0xb0c>)
 800b9e2:	4019      	ands	r1, r3
 800b9e4:	4291      	cmp	r1, r2
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	d95d      	bls.n	800baa6 <_strtod_l+0xa7e>
 800b9ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9ec:	4b4e      	ldr	r3, [pc, #312]	; (800bb28 <_strtod_l+0xb00>)
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d103      	bne.n	800b9fa <_strtod_l+0x9d2>
 800b9f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	f43f ad56 	beq.w	800b4a6 <_strtod_l+0x47e>
 800b9fa:	f04f 38ff 	mov.w	r8, #4294967295
 800b9fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800bb28 <_strtod_l+0xb00>
 800ba02:	4650      	mov	r0, sl
 800ba04:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ba06:	f003 fa6e 	bl	800eee6 <_Bfree>
 800ba0a:	4650      	mov	r0, sl
 800ba0c:	9906      	ldr	r1, [sp, #24]
 800ba0e:	f003 fa6a 	bl	800eee6 <_Bfree>
 800ba12:	4650      	mov	r0, sl
 800ba14:	9904      	ldr	r1, [sp, #16]
 800ba16:	f003 fa66 	bl	800eee6 <_Bfree>
 800ba1a:	4659      	mov	r1, fp
 800ba1c:	4650      	mov	r0, sl
 800ba1e:	f003 fa62 	bl	800eee6 <_Bfree>
 800ba22:	e627      	b.n	800b674 <_strtod_l+0x64c>
 800ba24:	f1b8 0f00 	cmp.w	r8, #0
 800ba28:	d119      	bne.n	800ba5e <_strtod_l+0xa36>
 800ba2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba30:	b9e3      	cbnz	r3, 800ba6c <_strtod_l+0xa44>
 800ba32:	2200      	movs	r2, #0
 800ba34:	4630      	mov	r0, r6
 800ba36:	4639      	mov	r1, r7
 800ba38:	4b3c      	ldr	r3, [pc, #240]	; (800bb2c <_strtod_l+0xb04>)
 800ba3a:	f7f5 f82b 	bl	8000a94 <__aeabi_dcmplt>
 800ba3e:	b9c8      	cbnz	r0, 800ba74 <_strtod_l+0xa4c>
 800ba40:	2200      	movs	r2, #0
 800ba42:	4630      	mov	r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	4b3c      	ldr	r3, [pc, #240]	; (800bb38 <_strtod_l+0xb10>)
 800ba48:	f7f4 fdb2 	bl	80005b0 <__aeabi_dmul>
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	460d      	mov	r5, r1
 800ba50:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ba54:	9416      	str	r4, [sp, #88]	; 0x58
 800ba56:	9317      	str	r3, [sp, #92]	; 0x5c
 800ba58:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800ba5c:	e7a2      	b.n	800b9a4 <_strtod_l+0x97c>
 800ba5e:	f1b8 0f01 	cmp.w	r8, #1
 800ba62:	d103      	bne.n	800ba6c <_strtod_l+0xa44>
 800ba64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f43f ad92 	beq.w	800b590 <_strtod_l+0x568>
 800ba6c:	2600      	movs	r6, #0
 800ba6e:	2400      	movs	r4, #0
 800ba70:	4f32      	ldr	r7, [pc, #200]	; (800bb3c <_strtod_l+0xb14>)
 800ba72:	e796      	b.n	800b9a2 <_strtod_l+0x97a>
 800ba74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ba76:	4d30      	ldr	r5, [pc, #192]	; (800bb38 <_strtod_l+0xb10>)
 800ba78:	e7ea      	b.n	800ba50 <_strtod_l+0xa28>
 800ba7a:	4b2f      	ldr	r3, [pc, #188]	; (800bb38 <_strtod_l+0xb10>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	4630      	mov	r0, r6
 800ba80:	4639      	mov	r1, r7
 800ba82:	f7f4 fd95 	bl	80005b0 <__aeabi_dmul>
 800ba86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	b933      	cbnz	r3, 800ba9c <_strtod_l+0xa74>
 800ba8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba92:	9010      	str	r0, [sp, #64]	; 0x40
 800ba94:	9311      	str	r3, [sp, #68]	; 0x44
 800ba96:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ba9a:	e783      	b.n	800b9a4 <_strtod_l+0x97c>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800baa4:	e7f7      	b.n	800ba96 <_strtod_l+0xa6e>
 800baa6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800baaa:	9b05      	ldr	r3, [sp, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1a8      	bne.n	800ba02 <_strtod_l+0x9da>
 800bab0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bab4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bab6:	0d1b      	lsrs	r3, r3, #20
 800bab8:	051b      	lsls	r3, r3, #20
 800baba:	429a      	cmp	r2, r3
 800babc:	d1a1      	bne.n	800ba02 <_strtod_l+0x9da>
 800babe:	4620      	mov	r0, r4
 800bac0:	4629      	mov	r1, r5
 800bac2:	f7f5 f8d5 	bl	8000c70 <__aeabi_d2lz>
 800bac6:	f7f4 fd45 	bl	8000554 <__aeabi_l2d>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4620      	mov	r0, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7f4 fbb5 	bl	8000240 <__aeabi_dsub>
 800bad6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800badc:	ea43 0308 	orr.w	r3, r3, r8
 800bae0:	4313      	orrs	r3, r2
 800bae2:	4604      	mov	r4, r0
 800bae4:	460d      	mov	r5, r1
 800bae6:	d066      	beq.n	800bbb6 <_strtod_l+0xb8e>
 800bae8:	a309      	add	r3, pc, #36	; (adr r3, 800bb10 <_strtod_l+0xae8>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f7f4 ffd1 	bl	8000a94 <__aeabi_dcmplt>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f47f ace2 	bne.w	800b4bc <_strtod_l+0x494>
 800baf8:	a307      	add	r3, pc, #28	; (adr r3, 800bb18 <_strtod_l+0xaf0>)
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	4620      	mov	r0, r4
 800bb00:	4629      	mov	r1, r5
 800bb02:	f7f4 ffe5 	bl	8000ad0 <__aeabi_dcmpgt>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	f43f af7b 	beq.w	800ba02 <_strtod_l+0x9da>
 800bb0c:	e4d6      	b.n	800b4bc <_strtod_l+0x494>
 800bb0e:	bf00      	nop
 800bb10:	94a03595 	.word	0x94a03595
 800bb14:	3fdfffff 	.word	0x3fdfffff
 800bb18:	35afe535 	.word	0x35afe535
 800bb1c:	3fe00000 	.word	0x3fe00000
 800bb20:	000fffff 	.word	0x000fffff
 800bb24:	7ff00000 	.word	0x7ff00000
 800bb28:	7fefffff 	.word	0x7fefffff
 800bb2c:	3ff00000 	.word	0x3ff00000
 800bb30:	7fe00000 	.word	0x7fe00000
 800bb34:	7c9fffff 	.word	0x7c9fffff
 800bb38:	3fe00000 	.word	0x3fe00000
 800bb3c:	bff00000 	.word	0xbff00000
 800bb40:	9b05      	ldr	r3, [sp, #20]
 800bb42:	b313      	cbz	r3, 800bb8a <_strtod_l+0xb62>
 800bb44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bb4a:	d81e      	bhi.n	800bb8a <_strtod_l+0xb62>
 800bb4c:	a326      	add	r3, pc, #152	; (adr r3, 800bbe8 <_strtod_l+0xbc0>)
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	4620      	mov	r0, r4
 800bb54:	4629      	mov	r1, r5
 800bb56:	f7f4 ffa7 	bl	8000aa8 <__aeabi_dcmple>
 800bb5a:	b190      	cbz	r0, 800bb82 <_strtod_l+0xb5a>
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f7f4 fffe 	bl	8000b60 <__aeabi_d2uiz>
 800bb64:	2801      	cmp	r0, #1
 800bb66:	bf38      	it	cc
 800bb68:	2001      	movcc	r0, #1
 800bb6a:	f7f4 fca7 	bl	80004bc <__aeabi_ui2d>
 800bb6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb70:	4604      	mov	r4, r0
 800bb72:	460d      	mov	r5, r1
 800bb74:	b9d3      	cbnz	r3, 800bbac <_strtod_l+0xb84>
 800bb76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb7a:	9012      	str	r0, [sp, #72]	; 0x48
 800bb7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb7e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800bb82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb84:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800bb88:	1a9f      	subs	r7, r3, r2
 800bb8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb8e:	f003 fca7 	bl	800f4e0 <__ulp>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4630      	mov	r0, r6
 800bb98:	4639      	mov	r1, r7
 800bb9a:	f7f4 fd09 	bl	80005b0 <__aeabi_dmul>
 800bb9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bba2:	f7f4 fb4f 	bl	8000244 <__adddf3>
 800bba6:	4680      	mov	r8, r0
 800bba8:	4689      	mov	r9, r1
 800bbaa:	e77e      	b.n	800baaa <_strtod_l+0xa82>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800bbb4:	e7e3      	b.n	800bb7e <_strtod_l+0xb56>
 800bbb6:	a30e      	add	r3, pc, #56	; (adr r3, 800bbf0 <_strtod_l+0xbc8>)
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f7f4 ff6a 	bl	8000a94 <__aeabi_dcmplt>
 800bbc0:	e7a1      	b.n	800bb06 <_strtod_l+0xade>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	930a      	str	r3, [sp, #40]	; 0x28
 800bbc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bbc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	f7ff ba71 	b.w	800b0b2 <_strtod_l+0x8a>
 800bbd0:	2a65      	cmp	r2, #101	; 0x65
 800bbd2:	f43f ab63 	beq.w	800b29c <_strtod_l+0x274>
 800bbd6:	2a45      	cmp	r2, #69	; 0x45
 800bbd8:	f43f ab60 	beq.w	800b29c <_strtod_l+0x274>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	f7ff bb95 	b.w	800b30c <_strtod_l+0x2e4>
 800bbe2:	bf00      	nop
 800bbe4:	f3af 8000 	nop.w
 800bbe8:	ffc00000 	.word	0xffc00000
 800bbec:	41dfffff 	.word	0x41dfffff
 800bbf0:	94a03595 	.word	0x94a03595
 800bbf4:	3fcfffff 	.word	0x3fcfffff

0800bbf8 <_strtod_r>:
 800bbf8:	4b01      	ldr	r3, [pc, #4]	; (800bc00 <_strtod_r+0x8>)
 800bbfa:	f7ff ba15 	b.w	800b028 <_strtod_l>
 800bbfe:	bf00      	nop
 800bc00:	2000047c 	.word	0x2000047c

0800bc04 <_strtol_l.constprop.0>:
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0a:	4680      	mov	r8, r0
 800bc0c:	d001      	beq.n	800bc12 <_strtol_l.constprop.0+0xe>
 800bc0e:	2b24      	cmp	r3, #36	; 0x24
 800bc10:	d906      	bls.n	800bc20 <_strtol_l.constprop.0+0x1c>
 800bc12:	f7fd faad 	bl	8009170 <__errno>
 800bc16:	2316      	movs	r3, #22
 800bc18:	6003      	str	r3, [r0, #0]
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc20:	460d      	mov	r5, r1
 800bc22:	4f35      	ldr	r7, [pc, #212]	; (800bcf8 <_strtol_l.constprop.0+0xf4>)
 800bc24:	4628      	mov	r0, r5
 800bc26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc2a:	5de6      	ldrb	r6, [r4, r7]
 800bc2c:	f016 0608 	ands.w	r6, r6, #8
 800bc30:	d1f8      	bne.n	800bc24 <_strtol_l.constprop.0+0x20>
 800bc32:	2c2d      	cmp	r4, #45	; 0x2d
 800bc34:	d12f      	bne.n	800bc96 <_strtol_l.constprop.0+0x92>
 800bc36:	2601      	movs	r6, #1
 800bc38:	782c      	ldrb	r4, [r5, #0]
 800bc3a:	1c85      	adds	r5, r0, #2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d057      	beq.n	800bcf0 <_strtol_l.constprop.0+0xec>
 800bc40:	2b10      	cmp	r3, #16
 800bc42:	d109      	bne.n	800bc58 <_strtol_l.constprop.0+0x54>
 800bc44:	2c30      	cmp	r4, #48	; 0x30
 800bc46:	d107      	bne.n	800bc58 <_strtol_l.constprop.0+0x54>
 800bc48:	7828      	ldrb	r0, [r5, #0]
 800bc4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bc4e:	2858      	cmp	r0, #88	; 0x58
 800bc50:	d149      	bne.n	800bce6 <_strtol_l.constprop.0+0xe2>
 800bc52:	2310      	movs	r3, #16
 800bc54:	786c      	ldrb	r4, [r5, #1]
 800bc56:	3502      	adds	r5, #2
 800bc58:	2700      	movs	r7, #0
 800bc5a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800bc5e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bc62:	fbbe f9f3 	udiv	r9, lr, r3
 800bc66:	4638      	mov	r0, r7
 800bc68:	fb03 ea19 	mls	sl, r3, r9, lr
 800bc6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bc70:	f1bc 0f09 	cmp.w	ip, #9
 800bc74:	d814      	bhi.n	800bca0 <_strtol_l.constprop.0+0x9c>
 800bc76:	4664      	mov	r4, ip
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	dd22      	ble.n	800bcc2 <_strtol_l.constprop.0+0xbe>
 800bc7c:	2f00      	cmp	r7, #0
 800bc7e:	db1d      	blt.n	800bcbc <_strtol_l.constprop.0+0xb8>
 800bc80:	4581      	cmp	r9, r0
 800bc82:	d31b      	bcc.n	800bcbc <_strtol_l.constprop.0+0xb8>
 800bc84:	d101      	bne.n	800bc8a <_strtol_l.constprop.0+0x86>
 800bc86:	45a2      	cmp	sl, r4
 800bc88:	db18      	blt.n	800bcbc <_strtol_l.constprop.0+0xb8>
 800bc8a:	2701      	movs	r7, #1
 800bc8c:	fb00 4003 	mla	r0, r0, r3, r4
 800bc90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc94:	e7ea      	b.n	800bc6c <_strtol_l.constprop.0+0x68>
 800bc96:	2c2b      	cmp	r4, #43	; 0x2b
 800bc98:	bf04      	itt	eq
 800bc9a:	782c      	ldrbeq	r4, [r5, #0]
 800bc9c:	1c85      	addeq	r5, r0, #2
 800bc9e:	e7cd      	b.n	800bc3c <_strtol_l.constprop.0+0x38>
 800bca0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bca4:	f1bc 0f19 	cmp.w	ip, #25
 800bca8:	d801      	bhi.n	800bcae <_strtol_l.constprop.0+0xaa>
 800bcaa:	3c37      	subs	r4, #55	; 0x37
 800bcac:	e7e4      	b.n	800bc78 <_strtol_l.constprop.0+0x74>
 800bcae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bcb2:	f1bc 0f19 	cmp.w	ip, #25
 800bcb6:	d804      	bhi.n	800bcc2 <_strtol_l.constprop.0+0xbe>
 800bcb8:	3c57      	subs	r4, #87	; 0x57
 800bcba:	e7dd      	b.n	800bc78 <_strtol_l.constprop.0+0x74>
 800bcbc:	f04f 37ff 	mov.w	r7, #4294967295
 800bcc0:	e7e6      	b.n	800bc90 <_strtol_l.constprop.0+0x8c>
 800bcc2:	2f00      	cmp	r7, #0
 800bcc4:	da07      	bge.n	800bcd6 <_strtol_l.constprop.0+0xd2>
 800bcc6:	2322      	movs	r3, #34	; 0x22
 800bcc8:	4670      	mov	r0, lr
 800bcca:	f8c8 3000 	str.w	r3, [r8]
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	d0a4      	beq.n	800bc1c <_strtol_l.constprop.0+0x18>
 800bcd2:	1e69      	subs	r1, r5, #1
 800bcd4:	e005      	b.n	800bce2 <_strtol_l.constprop.0+0xde>
 800bcd6:	b106      	cbz	r6, 800bcda <_strtol_l.constprop.0+0xd6>
 800bcd8:	4240      	negs	r0, r0
 800bcda:	2a00      	cmp	r2, #0
 800bcdc:	d09e      	beq.n	800bc1c <_strtol_l.constprop.0+0x18>
 800bcde:	2f00      	cmp	r7, #0
 800bce0:	d1f7      	bne.n	800bcd2 <_strtol_l.constprop.0+0xce>
 800bce2:	6011      	str	r1, [r2, #0]
 800bce4:	e79a      	b.n	800bc1c <_strtol_l.constprop.0+0x18>
 800bce6:	2430      	movs	r4, #48	; 0x30
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1b5      	bne.n	800bc58 <_strtol_l.constprop.0+0x54>
 800bcec:	2308      	movs	r3, #8
 800bcee:	e7b3      	b.n	800bc58 <_strtol_l.constprop.0+0x54>
 800bcf0:	2c30      	cmp	r4, #48	; 0x30
 800bcf2:	d0a9      	beq.n	800bc48 <_strtol_l.constprop.0+0x44>
 800bcf4:	230a      	movs	r3, #10
 800bcf6:	e7af      	b.n	800bc58 <_strtol_l.constprop.0+0x54>
 800bcf8:	0805fba5 	.word	0x0805fba5

0800bcfc <_strtol_r>:
 800bcfc:	f7ff bf82 	b.w	800bc04 <_strtol_l.constprop.0>

0800bd00 <_strtoll_l.constprop.0>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	4688      	mov	r8, r1
 800bd06:	461e      	mov	r6, r3
 800bd08:	460d      	mov	r5, r1
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	9201      	str	r2, [sp, #4]
 800bd0e:	4a46      	ldr	r2, [pc, #280]	; (800be28 <_strtoll_l.constprop.0+0x128>)
 800bd10:	9003      	str	r0, [sp, #12]
 800bd12:	462b      	mov	r3, r5
 800bd14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd18:	5ca7      	ldrb	r7, [r4, r2]
 800bd1a:	f017 0708 	ands.w	r7, r7, #8
 800bd1e:	d1f8      	bne.n	800bd12 <_strtoll_l.constprop.0+0x12>
 800bd20:	2c2d      	cmp	r4, #45	; 0x2d
 800bd22:	d147      	bne.n	800bdb4 <_strtoll_l.constprop.0+0xb4>
 800bd24:	2701      	movs	r7, #1
 800bd26:	782c      	ldrb	r4, [r5, #0]
 800bd28:	1c9d      	adds	r5, r3, #2
 800bd2a:	2e00      	cmp	r6, #0
 800bd2c:	d077      	beq.n	800be1e <_strtoll_l.constprop.0+0x11e>
 800bd2e:	2e10      	cmp	r6, #16
 800bd30:	d109      	bne.n	800bd46 <_strtoll_l.constprop.0+0x46>
 800bd32:	2c30      	cmp	r4, #48	; 0x30
 800bd34:	d107      	bne.n	800bd46 <_strtoll_l.constprop.0+0x46>
 800bd36:	782b      	ldrb	r3, [r5, #0]
 800bd38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd3c:	2b58      	cmp	r3, #88	; 0x58
 800bd3e:	d169      	bne.n	800be14 <_strtoll_l.constprop.0+0x114>
 800bd40:	2610      	movs	r6, #16
 800bd42:	786c      	ldrb	r4, [r5, #1]
 800bd44:	3502      	adds	r5, #2
 800bd46:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800bd4a:	f107 3bff 	add.w	fp, r7, #4294967295
 800bd4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd52:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800bd56:	4632      	mov	r2, r6
 800bd58:	464b      	mov	r3, r9
 800bd5a:	4658      	mov	r0, fp
 800bd5c:	4651      	mov	r1, sl
 800bd5e:	f7f4 ff6f 	bl	8000c40 <__aeabi_uldivmod>
 800bd62:	2300      	movs	r3, #0
 800bd64:	468c      	mov	ip, r1
 800bd66:	9202      	str	r2, [sp, #8]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bd72:	f1be 0f09 	cmp.w	lr, #9
 800bd76:	d822      	bhi.n	800bdbe <_strtoll_l.constprop.0+0xbe>
 800bd78:	4674      	mov	r4, lr
 800bd7a:	42a6      	cmp	r6, r4
 800bd7c:	dd30      	ble.n	800bde0 <_strtoll_l.constprop.0+0xe0>
 800bd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd82:	d014      	beq.n	800bdae <_strtoll_l.constprop.0+0xae>
 800bd84:	4282      	cmp	r2, r0
 800bd86:	eb7c 0301 	sbcs.w	r3, ip, r1
 800bd8a:	d326      	bcc.n	800bdda <_strtoll_l.constprop.0+0xda>
 800bd8c:	458c      	cmp	ip, r1
 800bd8e:	bf08      	it	eq
 800bd90:	4282      	cmpeq	r2, r0
 800bd92:	d102      	bne.n	800bd9a <_strtoll_l.constprop.0+0x9a>
 800bd94:	9b02      	ldr	r3, [sp, #8]
 800bd96:	42a3      	cmp	r3, r4
 800bd98:	db1f      	blt.n	800bdda <_strtoll_l.constprop.0+0xda>
 800bd9a:	4371      	muls	r1, r6
 800bd9c:	fb00 1109 	mla	r1, r0, r9, r1
 800bda0:	fba6 0300 	umull	r0, r3, r6, r0
 800bda4:	4419      	add	r1, r3
 800bda6:	2301      	movs	r3, #1
 800bda8:	1820      	adds	r0, r4, r0
 800bdaa:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800bdae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdb2:	e7dc      	b.n	800bd6e <_strtoll_l.constprop.0+0x6e>
 800bdb4:	2c2b      	cmp	r4, #43	; 0x2b
 800bdb6:	bf04      	itt	eq
 800bdb8:	782c      	ldrbeq	r4, [r5, #0]
 800bdba:	1c9d      	addeq	r5, r3, #2
 800bdbc:	e7b5      	b.n	800bd2a <_strtoll_l.constprop.0+0x2a>
 800bdbe:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bdc2:	f1be 0f19 	cmp.w	lr, #25
 800bdc6:	d801      	bhi.n	800bdcc <_strtoll_l.constprop.0+0xcc>
 800bdc8:	3c37      	subs	r4, #55	; 0x37
 800bdca:	e7d6      	b.n	800bd7a <_strtoll_l.constprop.0+0x7a>
 800bdcc:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bdd0:	f1be 0f19 	cmp.w	lr, #25
 800bdd4:	d804      	bhi.n	800bde0 <_strtoll_l.constprop.0+0xe0>
 800bdd6:	3c57      	subs	r4, #87	; 0x57
 800bdd8:	e7cf      	b.n	800bd7a <_strtoll_l.constprop.0+0x7a>
 800bdda:	f04f 33ff 	mov.w	r3, #4294967295
 800bdde:	e7e6      	b.n	800bdae <_strtoll_l.constprop.0+0xae>
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	d109      	bne.n	800bdf8 <_strtoll_l.constprop.0+0xf8>
 800bde4:	2322      	movs	r3, #34	; 0x22
 800bde6:	9a03      	ldr	r2, [sp, #12]
 800bde8:	4658      	mov	r0, fp
 800bdea:	6013      	str	r3, [r2, #0]
 800bdec:	9b01      	ldr	r3, [sp, #4]
 800bdee:	4651      	mov	r1, sl
 800bdf0:	b953      	cbnz	r3, 800be08 <_strtoll_l.constprop.0+0x108>
 800bdf2:	b005      	add	sp, #20
 800bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf8:	b117      	cbz	r7, 800be00 <_strtoll_l.constprop.0+0x100>
 800bdfa:	4240      	negs	r0, r0
 800bdfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800be00:	9a01      	ldr	r2, [sp, #4]
 800be02:	2a00      	cmp	r2, #0
 800be04:	d0f5      	beq.n	800bdf2 <_strtoll_l.constprop.0+0xf2>
 800be06:	b10b      	cbz	r3, 800be0c <_strtoll_l.constprop.0+0x10c>
 800be08:	f105 38ff 	add.w	r8, r5, #4294967295
 800be0c:	9b01      	ldr	r3, [sp, #4]
 800be0e:	f8c3 8000 	str.w	r8, [r3]
 800be12:	e7ee      	b.n	800bdf2 <_strtoll_l.constprop.0+0xf2>
 800be14:	2430      	movs	r4, #48	; 0x30
 800be16:	2e00      	cmp	r6, #0
 800be18:	d195      	bne.n	800bd46 <_strtoll_l.constprop.0+0x46>
 800be1a:	2608      	movs	r6, #8
 800be1c:	e793      	b.n	800bd46 <_strtoll_l.constprop.0+0x46>
 800be1e:	2c30      	cmp	r4, #48	; 0x30
 800be20:	d089      	beq.n	800bd36 <_strtoll_l.constprop.0+0x36>
 800be22:	260a      	movs	r6, #10
 800be24:	e78f      	b.n	800bd46 <_strtoll_l.constprop.0+0x46>
 800be26:	bf00      	nop
 800be28:	0805fba5 	.word	0x0805fba5

0800be2c <_strtoll_r>:
 800be2c:	f7ff bf68 	b.w	800bd00 <_strtoll_l.constprop.0>

0800be30 <_strtoul_l.constprop.0>:
 800be30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be34:	4686      	mov	lr, r0
 800be36:	460d      	mov	r5, r1
 800be38:	4f35      	ldr	r7, [pc, #212]	; (800bf10 <_strtoul_l.constprop.0+0xe0>)
 800be3a:	4628      	mov	r0, r5
 800be3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be40:	5de6      	ldrb	r6, [r4, r7]
 800be42:	f016 0608 	ands.w	r6, r6, #8
 800be46:	d1f8      	bne.n	800be3a <_strtoul_l.constprop.0+0xa>
 800be48:	2c2d      	cmp	r4, #45	; 0x2d
 800be4a:	d12f      	bne.n	800beac <_strtoul_l.constprop.0+0x7c>
 800be4c:	2601      	movs	r6, #1
 800be4e:	782c      	ldrb	r4, [r5, #0]
 800be50:	1c85      	adds	r5, r0, #2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d057      	beq.n	800bf06 <_strtoul_l.constprop.0+0xd6>
 800be56:	2b10      	cmp	r3, #16
 800be58:	d109      	bne.n	800be6e <_strtoul_l.constprop.0+0x3e>
 800be5a:	2c30      	cmp	r4, #48	; 0x30
 800be5c:	d107      	bne.n	800be6e <_strtoul_l.constprop.0+0x3e>
 800be5e:	7828      	ldrb	r0, [r5, #0]
 800be60:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800be64:	2858      	cmp	r0, #88	; 0x58
 800be66:	d149      	bne.n	800befc <_strtoul_l.constprop.0+0xcc>
 800be68:	2310      	movs	r3, #16
 800be6a:	786c      	ldrb	r4, [r5, #1]
 800be6c:	3502      	adds	r5, #2
 800be6e:	f04f 38ff 	mov.w	r8, #4294967295
 800be72:	fbb8 f8f3 	udiv	r8, r8, r3
 800be76:	2700      	movs	r7, #0
 800be78:	fb03 f908 	mul.w	r9, r3, r8
 800be7c:	4638      	mov	r0, r7
 800be7e:	ea6f 0909 	mvn.w	r9, r9
 800be82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800be86:	f1bc 0f09 	cmp.w	ip, #9
 800be8a:	d814      	bhi.n	800beb6 <_strtoul_l.constprop.0+0x86>
 800be8c:	4664      	mov	r4, ip
 800be8e:	42a3      	cmp	r3, r4
 800be90:	dd22      	ble.n	800bed8 <_strtoul_l.constprop.0+0xa8>
 800be92:	2f00      	cmp	r7, #0
 800be94:	db1d      	blt.n	800bed2 <_strtoul_l.constprop.0+0xa2>
 800be96:	4580      	cmp	r8, r0
 800be98:	d31b      	bcc.n	800bed2 <_strtoul_l.constprop.0+0xa2>
 800be9a:	d101      	bne.n	800bea0 <_strtoul_l.constprop.0+0x70>
 800be9c:	45a1      	cmp	r9, r4
 800be9e:	db18      	blt.n	800bed2 <_strtoul_l.constprop.0+0xa2>
 800bea0:	2701      	movs	r7, #1
 800bea2:	fb00 4003 	mla	r0, r0, r3, r4
 800bea6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800beaa:	e7ea      	b.n	800be82 <_strtoul_l.constprop.0+0x52>
 800beac:	2c2b      	cmp	r4, #43	; 0x2b
 800beae:	bf04      	itt	eq
 800beb0:	782c      	ldrbeq	r4, [r5, #0]
 800beb2:	1c85      	addeq	r5, r0, #2
 800beb4:	e7cd      	b.n	800be52 <_strtoul_l.constprop.0+0x22>
 800beb6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800beba:	f1bc 0f19 	cmp.w	ip, #25
 800bebe:	d801      	bhi.n	800bec4 <_strtoul_l.constprop.0+0x94>
 800bec0:	3c37      	subs	r4, #55	; 0x37
 800bec2:	e7e4      	b.n	800be8e <_strtoul_l.constprop.0+0x5e>
 800bec4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bec8:	f1bc 0f19 	cmp.w	ip, #25
 800becc:	d804      	bhi.n	800bed8 <_strtoul_l.constprop.0+0xa8>
 800bece:	3c57      	subs	r4, #87	; 0x57
 800bed0:	e7dd      	b.n	800be8e <_strtoul_l.constprop.0+0x5e>
 800bed2:	f04f 37ff 	mov.w	r7, #4294967295
 800bed6:	e7e6      	b.n	800bea6 <_strtoul_l.constprop.0+0x76>
 800bed8:	2f00      	cmp	r7, #0
 800beda:	da07      	bge.n	800beec <_strtoul_l.constprop.0+0xbc>
 800bedc:	2322      	movs	r3, #34	; 0x22
 800bede:	f04f 30ff 	mov.w	r0, #4294967295
 800bee2:	f8ce 3000 	str.w	r3, [lr]
 800bee6:	b932      	cbnz	r2, 800bef6 <_strtoul_l.constprop.0+0xc6>
 800bee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beec:	b106      	cbz	r6, 800bef0 <_strtoul_l.constprop.0+0xc0>
 800beee:	4240      	negs	r0, r0
 800bef0:	2a00      	cmp	r2, #0
 800bef2:	d0f9      	beq.n	800bee8 <_strtoul_l.constprop.0+0xb8>
 800bef4:	b107      	cbz	r7, 800bef8 <_strtoul_l.constprop.0+0xc8>
 800bef6:	1e69      	subs	r1, r5, #1
 800bef8:	6011      	str	r1, [r2, #0]
 800befa:	e7f5      	b.n	800bee8 <_strtoul_l.constprop.0+0xb8>
 800befc:	2430      	movs	r4, #48	; 0x30
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1b5      	bne.n	800be6e <_strtoul_l.constprop.0+0x3e>
 800bf02:	2308      	movs	r3, #8
 800bf04:	e7b3      	b.n	800be6e <_strtoul_l.constprop.0+0x3e>
 800bf06:	2c30      	cmp	r4, #48	; 0x30
 800bf08:	d0a9      	beq.n	800be5e <_strtoul_l.constprop.0+0x2e>
 800bf0a:	230a      	movs	r3, #10
 800bf0c:	e7af      	b.n	800be6e <_strtoul_l.constprop.0+0x3e>
 800bf0e:	bf00      	nop
 800bf10:	0805fba5 	.word	0x0805fba5

0800bf14 <_strtoul_r>:
 800bf14:	f7ff bf8c 	b.w	800be30 <_strtoul_l.constprop.0>

0800bf18 <_strtoull_l.constprop.0>:
 800bf18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	4689      	mov	r9, r1
 800bf1e:	461d      	mov	r5, r3
 800bf20:	460e      	mov	r6, r1
 800bf22:	4692      	mov	sl, r2
 800bf24:	4a47      	ldr	r2, [pc, #284]	; (800c044 <_strtoull_l.constprop.0+0x12c>)
 800bf26:	9001      	str	r0, [sp, #4]
 800bf28:	4633      	mov	r3, r6
 800bf2a:	f816 4b01 	ldrb.w	r4, [r6], #1
 800bf2e:	5ca7      	ldrb	r7, [r4, r2]
 800bf30:	f017 0708 	ands.w	r7, r7, #8
 800bf34:	d1f8      	bne.n	800bf28 <_strtoull_l.constprop.0+0x10>
 800bf36:	2c2d      	cmp	r4, #45	; 0x2d
 800bf38:	d14a      	bne.n	800bfd0 <_strtoull_l.constprop.0+0xb8>
 800bf3a:	2701      	movs	r7, #1
 800bf3c:	7834      	ldrb	r4, [r6, #0]
 800bf3e:	1c9e      	adds	r6, r3, #2
 800bf40:	2d00      	cmp	r5, #0
 800bf42:	d07b      	beq.n	800c03c <_strtoull_l.constprop.0+0x124>
 800bf44:	2d10      	cmp	r5, #16
 800bf46:	d109      	bne.n	800bf5c <_strtoull_l.constprop.0+0x44>
 800bf48:	2c30      	cmp	r4, #48	; 0x30
 800bf4a:	d107      	bne.n	800bf5c <_strtoull_l.constprop.0+0x44>
 800bf4c:	7833      	ldrb	r3, [r6, #0]
 800bf4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf52:	2b58      	cmp	r3, #88	; 0x58
 800bf54:	d16d      	bne.n	800c032 <_strtoull_l.constprop.0+0x11a>
 800bf56:	2510      	movs	r5, #16
 800bf58:	7874      	ldrb	r4, [r6, #1]
 800bf5a:	3602      	adds	r6, #2
 800bf5c:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800bf60:	462a      	mov	r2, r5
 800bf62:	465b      	mov	r3, fp
 800bf64:	f04f 30ff 	mov.w	r0, #4294967295
 800bf68:	f04f 31ff 	mov.w	r1, #4294967295
 800bf6c:	f7f4 fe68 	bl	8000c40 <__aeabi_uldivmod>
 800bf70:	462a      	mov	r2, r5
 800bf72:	9000      	str	r0, [sp, #0]
 800bf74:	4688      	mov	r8, r1
 800bf76:	465b      	mov	r3, fp
 800bf78:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7c:	f04f 31ff 	mov.w	r1, #4294967295
 800bf80:	f7f4 fe5e 	bl	8000c40 <__aeabi_uldivmod>
 800bf84:	2300      	movs	r3, #0
 800bf86:	4618      	mov	r0, r3
 800bf88:	4619      	mov	r1, r3
 800bf8a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bf8e:	f1bc 0f09 	cmp.w	ip, #9
 800bf92:	d822      	bhi.n	800bfda <_strtoull_l.constprop.0+0xc2>
 800bf94:	4664      	mov	r4, ip
 800bf96:	42a5      	cmp	r5, r4
 800bf98:	dd30      	ble.n	800bffc <_strtoull_l.constprop.0+0xe4>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	db2b      	blt.n	800bff6 <_strtoull_l.constprop.0+0xde>
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	4283      	cmp	r3, r0
 800bfa2:	eb78 0301 	sbcs.w	r3, r8, r1
 800bfa6:	d326      	bcc.n	800bff6 <_strtoull_l.constprop.0+0xde>
 800bfa8:	9b00      	ldr	r3, [sp, #0]
 800bfaa:	4588      	cmp	r8, r1
 800bfac:	bf08      	it	eq
 800bfae:	4283      	cmpeq	r3, r0
 800bfb0:	d101      	bne.n	800bfb6 <_strtoull_l.constprop.0+0x9e>
 800bfb2:	42a2      	cmp	r2, r4
 800bfb4:	db1f      	blt.n	800bff6 <_strtoull_l.constprop.0+0xde>
 800bfb6:	4369      	muls	r1, r5
 800bfb8:	fb00 110b 	mla	r1, r0, fp, r1
 800bfbc:	fba5 0300 	umull	r0, r3, r5, r0
 800bfc0:	4419      	add	r1, r3
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	1820      	adds	r0, r4, r0
 800bfc6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800bfca:	f816 4b01 	ldrb.w	r4, [r6], #1
 800bfce:	e7dc      	b.n	800bf8a <_strtoull_l.constprop.0+0x72>
 800bfd0:	2c2b      	cmp	r4, #43	; 0x2b
 800bfd2:	bf04      	itt	eq
 800bfd4:	7834      	ldrbeq	r4, [r6, #0]
 800bfd6:	1c9e      	addeq	r6, r3, #2
 800bfd8:	e7b2      	b.n	800bf40 <_strtoull_l.constprop.0+0x28>
 800bfda:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bfde:	f1bc 0f19 	cmp.w	ip, #25
 800bfe2:	d801      	bhi.n	800bfe8 <_strtoull_l.constprop.0+0xd0>
 800bfe4:	3c37      	subs	r4, #55	; 0x37
 800bfe6:	e7d6      	b.n	800bf96 <_strtoull_l.constprop.0+0x7e>
 800bfe8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bfec:	f1bc 0f19 	cmp.w	ip, #25
 800bff0:	d804      	bhi.n	800bffc <_strtoull_l.constprop.0+0xe4>
 800bff2:	3c57      	subs	r4, #87	; 0x57
 800bff4:	e7cf      	b.n	800bf96 <_strtoull_l.constprop.0+0x7e>
 800bff6:	f04f 33ff 	mov.w	r3, #4294967295
 800bffa:	e7e6      	b.n	800bfca <_strtoull_l.constprop.0+0xb2>
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	da0b      	bge.n	800c018 <_strtoull_l.constprop.0+0x100>
 800c000:	2322      	movs	r3, #34	; 0x22
 800c002:	f04f 30ff 	mov.w	r0, #4294967295
 800c006:	9a01      	ldr	r2, [sp, #4]
 800c008:	4601      	mov	r1, r0
 800c00a:	6013      	str	r3, [r2, #0]
 800c00c:	f1ba 0f00 	cmp.w	sl, #0
 800c010:	d10a      	bne.n	800c028 <_strtoull_l.constprop.0+0x110>
 800c012:	b003      	add	sp, #12
 800c014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c018:	b117      	cbz	r7, 800c020 <_strtoull_l.constprop.0+0x108>
 800c01a:	4240      	negs	r0, r0
 800c01c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c020:	f1ba 0f00 	cmp.w	sl, #0
 800c024:	d0f5      	beq.n	800c012 <_strtoull_l.constprop.0+0xfa>
 800c026:	b10b      	cbz	r3, 800c02c <_strtoull_l.constprop.0+0x114>
 800c028:	f106 39ff 	add.w	r9, r6, #4294967295
 800c02c:	f8ca 9000 	str.w	r9, [sl]
 800c030:	e7ef      	b.n	800c012 <_strtoull_l.constprop.0+0xfa>
 800c032:	2430      	movs	r4, #48	; 0x30
 800c034:	2d00      	cmp	r5, #0
 800c036:	d191      	bne.n	800bf5c <_strtoull_l.constprop.0+0x44>
 800c038:	2508      	movs	r5, #8
 800c03a:	e78f      	b.n	800bf5c <_strtoull_l.constprop.0+0x44>
 800c03c:	2c30      	cmp	r4, #48	; 0x30
 800c03e:	d085      	beq.n	800bf4c <_strtoull_l.constprop.0+0x34>
 800c040:	250a      	movs	r5, #10
 800c042:	e78b      	b.n	800bf5c <_strtoull_l.constprop.0+0x44>
 800c044:	0805fba5 	.word	0x0805fba5

0800c048 <_strtoull_r>:
 800c048:	f7ff bf66 	b.w	800bf18 <_strtoull_l.constprop.0>

0800c04c <_sungetc_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	1c4b      	adds	r3, r1, #1
 800c050:	4614      	mov	r4, r2
 800c052:	d103      	bne.n	800c05c <_sungetc_r+0x10>
 800c054:	f04f 35ff 	mov.w	r5, #4294967295
 800c058:	4628      	mov	r0, r5
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	8993      	ldrh	r3, [r2, #12]
 800c05e:	b2cd      	uxtb	r5, r1
 800c060:	f023 0320 	bic.w	r3, r3, #32
 800c064:	8193      	strh	r3, [r2, #12]
 800c066:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c068:	6852      	ldr	r2, [r2, #4]
 800c06a:	b18b      	cbz	r3, 800c090 <_sungetc_r+0x44>
 800c06c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c06e:	4293      	cmp	r3, r2
 800c070:	dd08      	ble.n	800c084 <_sungetc_r+0x38>
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	1e5a      	subs	r2, r3, #1
 800c076:	6022      	str	r2, [r4, #0]
 800c078:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c07c:	6863      	ldr	r3, [r4, #4]
 800c07e:	3301      	adds	r3, #1
 800c080:	6063      	str	r3, [r4, #4]
 800c082:	e7e9      	b.n	800c058 <_sungetc_r+0xc>
 800c084:	4621      	mov	r1, r4
 800c086:	f001 fa54 	bl	800d532 <__submore>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d0f1      	beq.n	800c072 <_sungetc_r+0x26>
 800c08e:	e7e1      	b.n	800c054 <_sungetc_r+0x8>
 800c090:	6921      	ldr	r1, [r4, #16]
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	b151      	cbz	r1, 800c0ac <_sungetc_r+0x60>
 800c096:	4299      	cmp	r1, r3
 800c098:	d208      	bcs.n	800c0ac <_sungetc_r+0x60>
 800c09a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c09e:	42a9      	cmp	r1, r5
 800c0a0:	d104      	bne.n	800c0ac <_sungetc_r+0x60>
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	3201      	adds	r2, #1
 800c0a6:	6023      	str	r3, [r4, #0]
 800c0a8:	6062      	str	r2, [r4, #4]
 800c0aa:	e7d5      	b.n	800c058 <_sungetc_r+0xc>
 800c0ac:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800c0b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c0b4:	6323      	str	r3, [r4, #48]	; 0x30
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	6363      	str	r3, [r4, #52]	; 0x34
 800c0ba:	4623      	mov	r3, r4
 800c0bc:	f803 5f42 	strb.w	r5, [r3, #66]!
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e7dc      	b.n	800c080 <_sungetc_r+0x34>

0800c0c6 <__ssrefill_r>:
 800c0c6:	b510      	push	{r4, lr}
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800c0cc:	b169      	cbz	r1, 800c0ea <__ssrefill_r+0x24>
 800c0ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c0d2:	4299      	cmp	r1, r3
 800c0d4:	d001      	beq.n	800c0da <__ssrefill_r+0x14>
 800c0d6:	f002 fa65 	bl	800e5a4 <_free_r>
 800c0da:	2000      	movs	r0, #0
 800c0dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c0de:	6320      	str	r0, [r4, #48]	; 0x30
 800c0e0:	6063      	str	r3, [r4, #4]
 800c0e2:	b113      	cbz	r3, 800c0ea <__ssrefill_r+0x24>
 800c0e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0e6:	6023      	str	r3, [r4, #0]
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	6923      	ldr	r3, [r4, #16]
 800c0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	6063      	str	r3, [r4, #4]
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	f043 0320 	orr.w	r3, r3, #32
 800c0fc:	81a3      	strh	r3, [r4, #12]
 800c0fe:	e7f3      	b.n	800c0e8 <__ssrefill_r+0x22>

0800c100 <_sfread_r>:
 800c100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	461f      	mov	r7, r3
 800c106:	4613      	mov	r3, r2
 800c108:	437b      	muls	r3, r7
 800c10a:	4682      	mov	sl, r0
 800c10c:	4688      	mov	r8, r1
 800c10e:	4691      	mov	r9, r2
 800c110:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c112:	d027      	beq.n	800c164 <_sfread_r+0x64>
 800c114:	461e      	mov	r6, r3
 800c116:	e9d4 1500 	ldrd	r1, r5, [r4]
 800c11a:	42b5      	cmp	r5, r6
 800c11c:	d30b      	bcc.n	800c136 <_sfread_r+0x36>
 800c11e:	4632      	mov	r2, r6
 800c120:	4640      	mov	r0, r8
 800c122:	f002 fe93 	bl	800ee4c <memcpy>
 800c126:	6862      	ldr	r2, [r4, #4]
 800c128:	6821      	ldr	r1, [r4, #0]
 800c12a:	1b92      	subs	r2, r2, r6
 800c12c:	4431      	add	r1, r6
 800c12e:	463b      	mov	r3, r7
 800c130:	6062      	str	r2, [r4, #4]
 800c132:	6021      	str	r1, [r4, #0]
 800c134:	e016      	b.n	800c164 <_sfread_r+0x64>
 800c136:	462a      	mov	r2, r5
 800c138:	4640      	mov	r0, r8
 800c13a:	9301      	str	r3, [sp, #4]
 800c13c:	f002 fe86 	bl	800ee4c <memcpy>
 800c140:	2300      	movs	r3, #0
 800c142:	6822      	ldr	r2, [r4, #0]
 800c144:	6063      	str	r3, [r4, #4]
 800c146:	442a      	add	r2, r5
 800c148:	4621      	mov	r1, r4
 800c14a:	4650      	mov	r0, sl
 800c14c:	6022      	str	r2, [r4, #0]
 800c14e:	f7ff ffba 	bl	800c0c6 <__ssrefill_r>
 800c152:	44a8      	add	r8, r5
 800c154:	9b01      	ldr	r3, [sp, #4]
 800c156:	eba6 0b05 	sub.w	fp, r6, r5
 800c15a:	b138      	cbz	r0, 800c16c <_sfread_r+0x6c>
 800c15c:	18e9      	adds	r1, r5, r3
 800c15e:	1b89      	subs	r1, r1, r6
 800c160:	fbb1 f3f9 	udiv	r3, r1, r9
 800c164:	4618      	mov	r0, r3
 800c166:	b003      	add	sp, #12
 800c168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16c:	465e      	mov	r6, fp
 800c16e:	e7d2      	b.n	800c116 <_sfread_r+0x16>

0800c170 <_svfprintf_r>:
 800c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	b0d3      	sub	sp, #332	; 0x14c
 800c176:	468b      	mov	fp, r1
 800c178:	4692      	mov	sl, r2
 800c17a:	461e      	mov	r6, r3
 800c17c:	4681      	mov	r9, r0
 800c17e:	f7fe fa65 	bl	800a64c <_localeconv_r>
 800c182:	6803      	ldr	r3, [r0, #0]
 800c184:	4618      	mov	r0, r3
 800c186:	9317      	str	r3, [sp, #92]	; 0x5c
 800c188:	f7f4 f84e 	bl	8000228 <strlen>
 800c18c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c190:	9012      	str	r0, [sp, #72]	; 0x48
 800c192:	0618      	lsls	r0, r3, #24
 800c194:	d518      	bpl.n	800c1c8 <_svfprintf_r+0x58>
 800c196:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c19a:	b9ab      	cbnz	r3, 800c1c8 <_svfprintf_r+0x58>
 800c19c:	2140      	movs	r1, #64	; 0x40
 800c19e:	4648      	mov	r0, r9
 800c1a0:	f7fe fa7e 	bl	800a6a0 <_malloc_r>
 800c1a4:	f8cb 0000 	str.w	r0, [fp]
 800c1a8:	f8cb 0010 	str.w	r0, [fp, #16]
 800c1ac:	b948      	cbnz	r0, 800c1c2 <_svfprintf_r+0x52>
 800c1ae:	230c      	movs	r3, #12
 800c1b0:	f8c9 3000 	str.w	r3, [r9]
 800c1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c1bc:	b053      	add	sp, #332	; 0x14c
 800c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c2:	2340      	movs	r3, #64	; 0x40
 800c1c4:	f8cb 3014 	str.w	r3, [fp, #20]
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 800c1d2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c1d6:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 800c1da:	ac29      	add	r4, sp, #164	; 0xa4
 800c1dc:	9426      	str	r4, [sp, #152]	; 0x98
 800c1de:	9509      	str	r5, [sp, #36]	; 0x24
 800c1e0:	950d      	str	r5, [sp, #52]	; 0x34
 800c1e2:	9515      	str	r5, [sp, #84]	; 0x54
 800c1e4:	9518      	str	r5, [sp, #96]	; 0x60
 800c1e6:	950f      	str	r5, [sp, #60]	; 0x3c
 800c1e8:	4653      	mov	r3, sl
 800c1ea:	461d      	mov	r5, r3
 800c1ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1f0:	b10a      	cbz	r2, 800c1f6 <_svfprintf_r+0x86>
 800c1f2:	2a25      	cmp	r2, #37	; 0x25
 800c1f4:	d1f9      	bne.n	800c1ea <_svfprintf_r+0x7a>
 800c1f6:	ebb5 070a 	subs.w	r7, r5, sl
 800c1fa:	d00d      	beq.n	800c218 <_svfprintf_r+0xa8>
 800c1fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c1fe:	e9c4 a700 	strd	sl, r7, [r4]
 800c202:	443b      	add	r3, r7
 800c204:	9328      	str	r3, [sp, #160]	; 0xa0
 800c206:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c208:	3301      	adds	r3, #1
 800c20a:	2b07      	cmp	r3, #7
 800c20c:	9327      	str	r3, [sp, #156]	; 0x9c
 800c20e:	dc79      	bgt.n	800c304 <_svfprintf_r+0x194>
 800c210:	3408      	adds	r4, #8
 800c212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c214:	443b      	add	r3, r7
 800c216:	930f      	str	r3, [sp, #60]	; 0x3c
 800c218:	782b      	ldrb	r3, [r5, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f001 813a 	beq.w	800d494 <_svfprintf_r+0x1324>
 800c220:	2300      	movs	r3, #0
 800c222:	f04f 32ff 	mov.w	r2, #4294967295
 800c226:	4698      	mov	r8, r3
 800c228:	9207      	str	r2, [sp, #28]
 800c22a:	270a      	movs	r7, #10
 800c22c:	222b      	movs	r2, #43	; 0x2b
 800c22e:	3501      	adds	r5, #1
 800c230:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c234:	9313      	str	r3, [sp, #76]	; 0x4c
 800c236:	462b      	mov	r3, r5
 800c238:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c23c:	910a      	str	r1, [sp, #40]	; 0x28
 800c23e:	930e      	str	r3, [sp, #56]	; 0x38
 800c240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c242:	3b20      	subs	r3, #32
 800c244:	2b5a      	cmp	r3, #90	; 0x5a
 800c246:	f200 85ac 	bhi.w	800cda2 <_svfprintf_r+0xc32>
 800c24a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c24e:	007e      	.short	0x007e
 800c250:	05aa05aa 	.word	0x05aa05aa
 800c254:	05aa0086 	.word	0x05aa0086
 800c258:	05aa05aa 	.word	0x05aa05aa
 800c25c:	05aa0065 	.word	0x05aa0065
 800c260:	008905aa 	.word	0x008905aa
 800c264:	05aa0093 	.word	0x05aa0093
 800c268:	00960090 	.word	0x00960090
 800c26c:	00b305aa 	.word	0x00b305aa
 800c270:	00b600b6 	.word	0x00b600b6
 800c274:	00b600b6 	.word	0x00b600b6
 800c278:	00b600b6 	.word	0x00b600b6
 800c27c:	00b600b6 	.word	0x00b600b6
 800c280:	05aa00b6 	.word	0x05aa00b6
 800c284:	05aa05aa 	.word	0x05aa05aa
 800c288:	05aa05aa 	.word	0x05aa05aa
 800c28c:	05aa05aa 	.word	0x05aa05aa
 800c290:	05aa0125 	.word	0x05aa0125
 800c294:	00f600e3 	.word	0x00f600e3
 800c298:	01250125 	.word	0x01250125
 800c29c:	05aa0125 	.word	0x05aa0125
 800c2a0:	05aa05aa 	.word	0x05aa05aa
 800c2a4:	00c605aa 	.word	0x00c605aa
 800c2a8:	05aa05aa 	.word	0x05aa05aa
 800c2ac:	05aa0482 	.word	0x05aa0482
 800c2b0:	05aa05aa 	.word	0x05aa05aa
 800c2b4:	05aa04cd 	.word	0x05aa04cd
 800c2b8:	05aa04ee 	.word	0x05aa04ee
 800c2bc:	051005aa 	.word	0x051005aa
 800c2c0:	05aa05aa 	.word	0x05aa05aa
 800c2c4:	05aa05aa 	.word	0x05aa05aa
 800c2c8:	05aa05aa 	.word	0x05aa05aa
 800c2cc:	05aa05aa 	.word	0x05aa05aa
 800c2d0:	05aa0125 	.word	0x05aa0125
 800c2d4:	00f800e3 	.word	0x00f800e3
 800c2d8:	01250125 	.word	0x01250125
 800c2dc:	00c90125 	.word	0x00c90125
 800c2e0:	00dd00f8 	.word	0x00dd00f8
 800c2e4:	00d605aa 	.word	0x00d605aa
 800c2e8:	045d05aa 	.word	0x045d05aa
 800c2ec:	04bb0484 	.word	0x04bb0484
 800c2f0:	05aa00dd 	.word	0x05aa00dd
 800c2f4:	007c04cd 	.word	0x007c04cd
 800c2f8:	05aa04f0 	.word	0x05aa04f0
 800c2fc:	052f05aa 	.word	0x052f05aa
 800c300:	007c05aa 	.word	0x007c05aa
 800c304:	4659      	mov	r1, fp
 800c306:	4648      	mov	r0, r9
 800c308:	aa26      	add	r2, sp, #152	; 0x98
 800c30a:	f003 fa92 	bl	800f832 <__ssprint_r>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f040 812f 	bne.w	800c572 <_svfprintf_r+0x402>
 800c314:	ac29      	add	r4, sp, #164	; 0xa4
 800c316:	e77c      	b.n	800c212 <_svfprintf_r+0xa2>
 800c318:	4648      	mov	r0, r9
 800c31a:	f7fe f997 	bl	800a64c <_localeconv_r>
 800c31e:	6843      	ldr	r3, [r0, #4]
 800c320:	4618      	mov	r0, r3
 800c322:	9318      	str	r3, [sp, #96]	; 0x60
 800c324:	f7f3 ff80 	bl	8000228 <strlen>
 800c328:	9015      	str	r0, [sp, #84]	; 0x54
 800c32a:	4648      	mov	r0, r9
 800c32c:	f7fe f98e 	bl	800a64c <_localeconv_r>
 800c330:	6883      	ldr	r3, [r0, #8]
 800c332:	222b      	movs	r2, #43	; 0x2b
 800c334:	930d      	str	r3, [sp, #52]	; 0x34
 800c336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c338:	b12b      	cbz	r3, 800c346 <_svfprintf_r+0x1d6>
 800c33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c33c:	b11b      	cbz	r3, 800c346 <_svfprintf_r+0x1d6>
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	b10b      	cbz	r3, 800c346 <_svfprintf_r+0x1d6>
 800c342:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 800c346:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c348:	e775      	b.n	800c236 <_svfprintf_r+0xc6>
 800c34a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1f9      	bne.n	800c346 <_svfprintf_r+0x1d6>
 800c352:	2320      	movs	r3, #32
 800c354:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c358:	e7f5      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c35a:	f048 0801 	orr.w	r8, r8, #1
 800c35e:	e7f2      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c360:	f856 3b04 	ldr.w	r3, [r6], #4
 800c364:	2b00      	cmp	r3, #0
 800c366:	9313      	str	r3, [sp, #76]	; 0x4c
 800c368:	daed      	bge.n	800c346 <_svfprintf_r+0x1d6>
 800c36a:	425b      	negs	r3, r3
 800c36c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c36e:	f048 0804 	orr.w	r8, r8, #4
 800c372:	e7e8      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c374:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800c378:	e7e5      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c37a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c37c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c380:	2b2a      	cmp	r3, #42	; 0x2a
 800c382:	930a      	str	r3, [sp, #40]	; 0x28
 800c384:	d113      	bne.n	800c3ae <_svfprintf_r+0x23e>
 800c386:	f856 0b04 	ldr.w	r0, [r6], #4
 800c38a:	950e      	str	r5, [sp, #56]	; 0x38
 800c38c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800c390:	9307      	str	r3, [sp, #28]
 800c392:	e7d8      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c394:	9907      	ldr	r1, [sp, #28]
 800c396:	fb07 3301 	mla	r3, r7, r1, r3
 800c39a:	9307      	str	r3, [sp, #28]
 800c39c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3a0:	930a      	str	r3, [sp, #40]	; 0x28
 800c3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a4:	3b30      	subs	r3, #48	; 0x30
 800c3a6:	2b09      	cmp	r3, #9
 800c3a8:	d9f4      	bls.n	800c394 <_svfprintf_r+0x224>
 800c3aa:	950e      	str	r5, [sp, #56]	; 0x38
 800c3ac:	e748      	b.n	800c240 <_svfprintf_r+0xd0>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9307      	str	r3, [sp, #28]
 800c3b2:	e7f6      	b.n	800c3a2 <_svfprintf_r+0x232>
 800c3b4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 800c3b8:	e7c5      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c3be:	9313      	str	r3, [sp, #76]	; 0x4c
 800c3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c3c4:	3b30      	subs	r3, #48	; 0x30
 800c3c6:	fb07 3301 	mla	r3, r7, r1, r3
 800c3ca:	9313      	str	r3, [sp, #76]	; 0x4c
 800c3cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3d0:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d2:	3b30      	subs	r3, #48	; 0x30
 800c3d4:	2b09      	cmp	r3, #9
 800c3d6:	d9f3      	bls.n	800c3c0 <_svfprintf_r+0x250>
 800c3d8:	e7e7      	b.n	800c3aa <_svfprintf_r+0x23a>
 800c3da:	f048 0808 	orr.w	r8, r8, #8
 800c3de:	e7b2      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b68      	cmp	r3, #104	; 0x68
 800c3e6:	bf01      	itttt	eq
 800c3e8:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 800c3ea:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800c3ee:	3301      	addeq	r3, #1
 800c3f0:	930e      	streq	r3, [sp, #56]	; 0x38
 800c3f2:	bf18      	it	ne
 800c3f4:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 800c3f8:	e7a5      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	2b6c      	cmp	r3, #108	; 0x6c
 800c400:	d105      	bne.n	800c40e <_svfprintf_r+0x29e>
 800c402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c404:	3301      	adds	r3, #1
 800c406:	930e      	str	r3, [sp, #56]	; 0x38
 800c408:	f048 0820 	orr.w	r8, r8, #32
 800c40c:	e79b      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c40e:	f048 0810 	orr.w	r8, r8, #16
 800c412:	e798      	b.n	800c346 <_svfprintf_r+0x1d6>
 800c414:	4632      	mov	r2, r6
 800c416:	2000      	movs	r0, #0
 800c418:	f852 3b04 	ldr.w	r3, [r2], #4
 800c41c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800c420:	920b      	str	r2, [sp, #44]	; 0x2c
 800c422:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800c426:	2301      	movs	r3, #1
 800c428:	4607      	mov	r7, r0
 800c42a:	4606      	mov	r6, r0
 800c42c:	4605      	mov	r5, r0
 800c42e:	9008      	str	r0, [sp, #32]
 800c430:	9307      	str	r3, [sp, #28]
 800c432:	900c      	str	r0, [sp, #48]	; 0x30
 800c434:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 800c438:	e1b0      	b.n	800c79c <_svfprintf_r+0x62c>
 800c43a:	f048 0810 	orr.w	r8, r8, #16
 800c43e:	f018 0f20 	tst.w	r8, #32
 800c442:	d011      	beq.n	800c468 <_svfprintf_r+0x2f8>
 800c444:	1df3      	adds	r3, r6, #7
 800c446:	f023 0307 	bic.w	r3, r3, #7
 800c44a:	461a      	mov	r2, r3
 800c44c:	f852 6b08 	ldr.w	r6, [r2], #8
 800c450:	685f      	ldr	r7, [r3, #4]
 800c452:	920b      	str	r2, [sp, #44]	; 0x2c
 800c454:	2f00      	cmp	r7, #0
 800c456:	da05      	bge.n	800c464 <_svfprintf_r+0x2f4>
 800c458:	232d      	movs	r3, #45	; 0x2d
 800c45a:	4276      	negs	r6, r6
 800c45c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800c460:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c464:	2301      	movs	r3, #1
 800c466:	e387      	b.n	800cb78 <_svfprintf_r+0xa08>
 800c468:	4633      	mov	r3, r6
 800c46a:	f853 7b04 	ldr.w	r7, [r3], #4
 800c46e:	f018 0f10 	tst.w	r8, #16
 800c472:	930b      	str	r3, [sp, #44]	; 0x2c
 800c474:	d002      	beq.n	800c47c <_svfprintf_r+0x30c>
 800c476:	463e      	mov	r6, r7
 800c478:	17ff      	asrs	r7, r7, #31
 800c47a:	e7eb      	b.n	800c454 <_svfprintf_r+0x2e4>
 800c47c:	f018 0f40 	tst.w	r8, #64	; 0x40
 800c480:	d003      	beq.n	800c48a <_svfprintf_r+0x31a>
 800c482:	b23e      	sxth	r6, r7
 800c484:	f347 37c0 	sbfx	r7, r7, #15, #1
 800c488:	e7e4      	b.n	800c454 <_svfprintf_r+0x2e4>
 800c48a:	f418 7f00 	tst.w	r8, #512	; 0x200
 800c48e:	d0f2      	beq.n	800c476 <_svfprintf_r+0x306>
 800c490:	b27e      	sxtb	r6, r7
 800c492:	f347 17c0 	sbfx	r7, r7, #7, #1
 800c496:	e7dd      	b.n	800c454 <_svfprintf_r+0x2e4>
 800c498:	3607      	adds	r6, #7
 800c49a:	f026 0307 	bic.w	r3, r6, #7
 800c49e:	4619      	mov	r1, r3
 800c4a0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c4a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c4a8:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 800c4ac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800c4b0:	910b      	str	r1, [sp, #44]	; 0x2c
 800c4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4b3a      	ldr	r3, [pc, #232]	; (800c5a4 <_svfprintf_r+0x434>)
 800c4bc:	f7f4 fb12 	bl	8000ae4 <__aeabi_dcmpun>
 800c4c0:	bb18      	cbnz	r0, 800c50a <_svfprintf_r+0x39a>
 800c4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4b36      	ldr	r3, [pc, #216]	; (800c5a4 <_svfprintf_r+0x434>)
 800c4cc:	f7f4 faec 	bl	8000aa8 <__aeabi_dcmple>
 800c4d0:	b9d8      	cbnz	r0, 800c50a <_svfprintf_r+0x39a>
 800c4d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f7f4 fadb 	bl	8000a94 <__aeabi_dcmplt>
 800c4de:	b110      	cbz	r0, 800c4e6 <_svfprintf_r+0x376>
 800c4e0:	232d      	movs	r3, #45	; 0x2d
 800c4e2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c4e6:	4a30      	ldr	r2, [pc, #192]	; (800c5a8 <_svfprintf_r+0x438>)
 800c4e8:	4830      	ldr	r0, [pc, #192]	; (800c5ac <_svfprintf_r+0x43c>)
 800c4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	2b47      	cmp	r3, #71	; 0x47
 800c4f0:	bfd4      	ite	le
 800c4f2:	4692      	movle	sl, r2
 800c4f4:	4682      	movgt	sl, r0
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e9cd 3107 	strd	r3, r1, [sp, #28]
 800c4fc:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 800c500:	2700      	movs	r7, #0
 800c502:	463e      	mov	r6, r7
 800c504:	463b      	mov	r3, r7
 800c506:	f000 bfff 	b.w	800d508 <_svfprintf_r+0x1398>
 800c50a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c50e:	4610      	mov	r0, r2
 800c510:	4619      	mov	r1, r3
 800c512:	f7f4 fae7 	bl	8000ae4 <__aeabi_dcmpun>
 800c516:	b148      	cbz	r0, 800c52c <_svfprintf_r+0x3bc>
 800c518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c51a:	4a25      	ldr	r2, [pc, #148]	; (800c5b0 <_svfprintf_r+0x440>)
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	bfb8      	it	lt
 800c520:	232d      	movlt	r3, #45	; 0x2d
 800c522:	4824      	ldr	r0, [pc, #144]	; (800c5b4 <_svfprintf_r+0x444>)
 800c524:	bfb8      	it	lt
 800c526:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800c52a:	e7de      	b.n	800c4ea <_svfprintf_r+0x37a>
 800c52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c52e:	f023 0320 	bic.w	r3, r3, #32
 800c532:	2b41      	cmp	r3, #65	; 0x41
 800c534:	930c      	str	r3, [sp, #48]	; 0x30
 800c536:	d125      	bne.n	800c584 <_svfprintf_r+0x414>
 800c538:	2330      	movs	r3, #48	; 0x30
 800c53a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800c53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c540:	f048 0802 	orr.w	r8, r8, #2
 800c544:	2b61      	cmp	r3, #97	; 0x61
 800c546:	bf0c      	ite	eq
 800c548:	2378      	moveq	r3, #120	; 0x78
 800c54a:	2358      	movne	r3, #88	; 0x58
 800c54c:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800c550:	9b07      	ldr	r3, [sp, #28]
 800c552:	2b63      	cmp	r3, #99	; 0x63
 800c554:	dd30      	ble.n	800c5b8 <_svfprintf_r+0x448>
 800c556:	4648      	mov	r0, r9
 800c558:	1c59      	adds	r1, r3, #1
 800c55a:	f7fe f8a1 	bl	800a6a0 <_malloc_r>
 800c55e:	4682      	mov	sl, r0
 800c560:	2800      	cmp	r0, #0
 800c562:	f040 81f7 	bne.w	800c954 <_svfprintf_r+0x7e4>
 800c566:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c56e:	f8ab 300c 	strh.w	r3, [fp, #12]
 800c572:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c576:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c57a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c57c:	bf18      	it	ne
 800c57e:	f04f 33ff 	movne.w	r3, #4294967295
 800c582:	e619      	b.n	800c1b8 <_svfprintf_r+0x48>
 800c584:	9b07      	ldr	r3, [sp, #28]
 800c586:	3301      	adds	r3, #1
 800c588:	f000 81e6 	beq.w	800c958 <_svfprintf_r+0x7e8>
 800c58c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c58e:	2b47      	cmp	r3, #71	; 0x47
 800c590:	f040 81e5 	bne.w	800c95e <_svfprintf_r+0x7ee>
 800c594:	9b07      	ldr	r3, [sp, #28]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f040 81e1 	bne.w	800c95e <_svfprintf_r+0x7ee>
 800c59c:	9308      	str	r3, [sp, #32]
 800c59e:	2301      	movs	r3, #1
 800c5a0:	9307      	str	r3, [sp, #28]
 800c5a2:	e00c      	b.n	800c5be <_svfprintf_r+0x44e>
 800c5a4:	7fefffff 	.word	0x7fefffff
 800c5a8:	0805fd00 	.word	0x0805fd00
 800c5ac:	0805fd04 	.word	0x0805fd04
 800c5b0:	0805fd08 	.word	0x0805fd08
 800c5b4:	0805fd0c 	.word	0x0805fd0c
 800c5b8:	9008      	str	r0, [sp, #32]
 800c5ba:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 800c5be:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 800c5c2:	9314      	str	r3, [sp, #80]	; 0x50
 800c5c4:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 800c5c8:	1e1d      	subs	r5, r3, #0
 800c5ca:	bfae      	itee	ge
 800c5cc:	2300      	movge	r3, #0
 800c5ce:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 800c5d2:	232d      	movlt	r3, #45	; 0x2d
 800c5d4:	931c      	str	r3, [sp, #112]	; 0x70
 800c5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5d8:	2b41      	cmp	r3, #65	; 0x41
 800c5da:	f040 81d8 	bne.w	800c98e <_svfprintf_r+0x81e>
 800c5de:	4638      	mov	r0, r7
 800c5e0:	aa20      	add	r2, sp, #128	; 0x80
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	f003 f8c4 	bl	800f770 <frexp>
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c5ee:	f7f3 ffdf 	bl	80005b0 <__aeabi_dmul>
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	460f      	mov	r7, r1
 800c5fa:	f7f4 fa41 	bl	8000a80 <__aeabi_dcmpeq>
 800c5fe:	b108      	cbz	r0, 800c604 <_svfprintf_r+0x494>
 800c600:	2301      	movs	r3, #1
 800c602:	9320      	str	r3, [sp, #128]	; 0x80
 800c604:	4bad      	ldr	r3, [pc, #692]	; (800c8bc <_svfprintf_r+0x74c>)
 800c606:	4aae      	ldr	r2, [pc, #696]	; (800c8c0 <_svfprintf_r+0x750>)
 800c608:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c60a:	4655      	mov	r5, sl
 800c60c:	2961      	cmp	r1, #97	; 0x61
 800c60e:	bf18      	it	ne
 800c610:	461a      	movne	r2, r3
 800c612:	9b07      	ldr	r3, [sp, #28]
 800c614:	921b      	str	r2, [sp, #108]	; 0x6c
 800c616:	3b01      	subs	r3, #1
 800c618:	9309      	str	r3, [sp, #36]	; 0x24
 800c61a:	2200      	movs	r2, #0
 800c61c:	4ba9      	ldr	r3, [pc, #676]	; (800c8c4 <_svfprintf_r+0x754>)
 800c61e:	4630      	mov	r0, r6
 800c620:	4639      	mov	r1, r7
 800c622:	f7f3 ffc5 	bl	80005b0 <__aeabi_dmul>
 800c626:	460f      	mov	r7, r1
 800c628:	4606      	mov	r6, r0
 800c62a:	f7f4 fa71 	bl	8000b10 <__aeabi_d2iz>
 800c62e:	901d      	str	r0, [sp, #116]	; 0x74
 800c630:	f7f3 ff54 	bl	80004dc <__aeabi_i2d>
 800c634:	4602      	mov	r2, r0
 800c636:	460b      	mov	r3, r1
 800c638:	4630      	mov	r0, r6
 800c63a:	4639      	mov	r1, r7
 800c63c:	f7f3 fe00 	bl	8000240 <__aeabi_dsub>
 800c640:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c642:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c644:	4606      	mov	r6, r0
 800c646:	5c9b      	ldrb	r3, [r3, r2]
 800c648:	460f      	mov	r7, r1
 800c64a:	f805 3b01 	strb.w	r3, [r5], #1
 800c64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c650:	1c5a      	adds	r2, r3, #1
 800c652:	9316      	str	r3, [sp, #88]	; 0x58
 800c654:	d007      	beq.n	800c666 <_svfprintf_r+0x4f6>
 800c656:	3b01      	subs	r3, #1
 800c658:	9309      	str	r3, [sp, #36]	; 0x24
 800c65a:	2200      	movs	r2, #0
 800c65c:	2300      	movs	r3, #0
 800c65e:	f7f4 fa0f 	bl	8000a80 <__aeabi_dcmpeq>
 800c662:	2800      	cmp	r0, #0
 800c664:	d0d9      	beq.n	800c61a <_svfprintf_r+0x4aa>
 800c666:	2200      	movs	r2, #0
 800c668:	4630      	mov	r0, r6
 800c66a:	4639      	mov	r1, r7
 800c66c:	4b96      	ldr	r3, [pc, #600]	; (800c8c8 <_svfprintf_r+0x758>)
 800c66e:	f7f4 fa2f 	bl	8000ad0 <__aeabi_dcmpgt>
 800c672:	b960      	cbnz	r0, 800c68e <_svfprintf_r+0x51e>
 800c674:	2200      	movs	r2, #0
 800c676:	4630      	mov	r0, r6
 800c678:	4639      	mov	r1, r7
 800c67a:	4b93      	ldr	r3, [pc, #588]	; (800c8c8 <_svfprintf_r+0x758>)
 800c67c:	f7f4 fa00 	bl	8000a80 <__aeabi_dcmpeq>
 800c680:	2800      	cmp	r0, #0
 800c682:	f000 817f 	beq.w	800c984 <_svfprintf_r+0x814>
 800c686:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c688:	07db      	lsls	r3, r3, #31
 800c68a:	f140 817b 	bpl.w	800c984 <_svfprintf_r+0x814>
 800c68e:	2030      	movs	r0, #48	; 0x30
 800c690:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c692:	9524      	str	r5, [sp, #144]	; 0x90
 800c694:	7bd9      	ldrb	r1, [r3, #15]
 800c696:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c698:	1e53      	subs	r3, r2, #1
 800c69a:	9324      	str	r3, [sp, #144]	; 0x90
 800c69c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800c6a0:	428b      	cmp	r3, r1
 800c6a2:	f000 815e 	beq.w	800c962 <_svfprintf_r+0x7f2>
 800c6a6:	2b39      	cmp	r3, #57	; 0x39
 800c6a8:	bf0b      	itete	eq
 800c6aa:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 800c6ac:	3301      	addne	r3, #1
 800c6ae:	7a9b      	ldrbeq	r3, [r3, #10]
 800c6b0:	b2db      	uxtbne	r3, r3
 800c6b2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c6b6:	eba5 030a 	sub.w	r3, r5, sl
 800c6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c6bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6be:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800c6c0:	2b47      	cmp	r3, #71	; 0x47
 800c6c2:	f040 81b1 	bne.w	800ca28 <_svfprintf_r+0x8b8>
 800c6c6:	1cef      	adds	r7, r5, #3
 800c6c8:	db03      	blt.n	800c6d2 <_svfprintf_r+0x562>
 800c6ca:	9b07      	ldr	r3, [sp, #28]
 800c6cc:	42ab      	cmp	r3, r5
 800c6ce:	f280 81d6 	bge.w	800ca7e <_svfprintf_r+0x90e>
 800c6d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d4:	3b02      	subs	r3, #2
 800c6d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c6da:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800c6de:	f021 0120 	bic.w	r1, r1, #32
 800c6e2:	2941      	cmp	r1, #65	; 0x41
 800c6e4:	bf08      	it	eq
 800c6e6:	320f      	addeq	r2, #15
 800c6e8:	f105 33ff 	add.w	r3, r5, #4294967295
 800c6ec:	bf06      	itte	eq
 800c6ee:	b2d2      	uxtbeq	r2, r2
 800c6f0:	2101      	moveq	r1, #1
 800c6f2:	2100      	movne	r1, #0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800c6fa:	bfb4      	ite	lt
 800c6fc:	222d      	movlt	r2, #45	; 0x2d
 800c6fe:	222b      	movge	r2, #43	; 0x2b
 800c700:	9320      	str	r3, [sp, #128]	; 0x80
 800c702:	bfb8      	it	lt
 800c704:	f1c5 0301 	rsblt	r3, r5, #1
 800c708:	2b09      	cmp	r3, #9
 800c70a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800c70e:	f340 81a4 	ble.w	800ca5a <_svfprintf_r+0x8ea>
 800c712:	260a      	movs	r6, #10
 800c714:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800c718:	fb93 f5f6 	sdiv	r5, r3, r6
 800c71c:	4611      	mov	r1, r2
 800c71e:	fb06 3015 	mls	r0, r6, r5, r3
 800c722:	3030      	adds	r0, #48	; 0x30
 800c724:	f801 0c01 	strb.w	r0, [r1, #-1]
 800c728:	4618      	mov	r0, r3
 800c72a:	2863      	cmp	r0, #99	; 0x63
 800c72c:	462b      	mov	r3, r5
 800c72e:	f102 32ff 	add.w	r2, r2, #4294967295
 800c732:	dcf1      	bgt.n	800c718 <_svfprintf_r+0x5a8>
 800c734:	3330      	adds	r3, #48	; 0x30
 800c736:	1e88      	subs	r0, r1, #2
 800c738:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c73c:	4603      	mov	r3, r0
 800c73e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800c742:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 800c746:	42ab      	cmp	r3, r5
 800c748:	f0c0 8182 	bcc.w	800ca50 <_svfprintf_r+0x8e0>
 800c74c:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 800c750:	1a52      	subs	r2, r2, r1
 800c752:	42a8      	cmp	r0, r5
 800c754:	bf88      	it	hi
 800c756:	2200      	movhi	r2, #0
 800c758:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800c75c:	441a      	add	r2, r3
 800c75e:	ab22      	add	r3, sp, #136	; 0x88
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c764:	9319      	str	r3, [sp, #100]	; 0x64
 800c766:	2a01      	cmp	r2, #1
 800c768:	4413      	add	r3, r2
 800c76a:	9307      	str	r3, [sp, #28]
 800c76c:	dc02      	bgt.n	800c774 <_svfprintf_r+0x604>
 800c76e:	f018 0f01 	tst.w	r8, #1
 800c772:	d003      	beq.n	800c77c <_svfprintf_r+0x60c>
 800c774:	9b07      	ldr	r3, [sp, #28]
 800c776:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c778:	4413      	add	r3, r2
 800c77a:	9307      	str	r3, [sp, #28]
 800c77c:	2600      	movs	r6, #0
 800c77e:	4635      	mov	r5, r6
 800c780:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 800c784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c788:	9314      	str	r3, [sp, #80]	; 0x50
 800c78a:	960c      	str	r6, [sp, #48]	; 0x30
 800c78c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c78e:	b113      	cbz	r3, 800c796 <_svfprintf_r+0x626>
 800c790:	232d      	movs	r3, #45	; 0x2d
 800c792:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c796:	2700      	movs	r7, #0
 800c798:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c79c:	9b07      	ldr	r3, [sp, #28]
 800c79e:	42bb      	cmp	r3, r7
 800c7a0:	bfb8      	it	lt
 800c7a2:	463b      	movlt	r3, r7
 800c7a4:	9314      	str	r3, [sp, #80]	; 0x50
 800c7a6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800c7aa:	b113      	cbz	r3, 800c7b2 <_svfprintf_r+0x642>
 800c7ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	9314      	str	r3, [sp, #80]	; 0x50
 800c7b2:	f018 0302 	ands.w	r3, r8, #2
 800c7b6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7b8:	bf1e      	ittt	ne
 800c7ba:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 800c7bc:	3302      	addne	r3, #2
 800c7be:	9314      	strne	r3, [sp, #80]	; 0x50
 800c7c0:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 800c7c4:	931c      	str	r3, [sp, #112]	; 0x70
 800c7c6:	d121      	bne.n	800c80c <_svfprintf_r+0x69c>
 800c7c8:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800c7cc:	1a9b      	subs	r3, r3, r2
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	9316      	str	r3, [sp, #88]	; 0x58
 800c7d2:	dd1b      	ble.n	800c80c <_svfprintf_r+0x69c>
 800c7d4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800c7d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c7da:	3201      	adds	r2, #1
 800c7dc:	2810      	cmp	r0, #16
 800c7de:	483b      	ldr	r0, [pc, #236]	; (800c8cc <_svfprintf_r+0x75c>)
 800c7e0:	f104 0108 	add.w	r1, r4, #8
 800c7e4:	6020      	str	r0, [r4, #0]
 800c7e6:	f300 82eb 	bgt.w	800cdc0 <_svfprintf_r+0xc50>
 800c7ea:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c7ec:	2a07      	cmp	r2, #7
 800c7ee:	4403      	add	r3, r0
 800c7f0:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800c7f4:	6060      	str	r0, [r4, #4]
 800c7f6:	f340 82f8 	ble.w	800cdea <_svfprintf_r+0xc7a>
 800c7fa:	4659      	mov	r1, fp
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	aa26      	add	r2, sp, #152	; 0x98
 800c800:	f003 f817 	bl	800f832 <__ssprint_r>
 800c804:	2800      	cmp	r0, #0
 800c806:	f040 8623 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800c80a:	ac29      	add	r4, sp, #164	; 0xa4
 800c80c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800c810:	b173      	cbz	r3, 800c830 <_svfprintf_r+0x6c0>
 800c812:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800c816:	6023      	str	r3, [r4, #0]
 800c818:	2301      	movs	r3, #1
 800c81a:	6063      	str	r3, [r4, #4]
 800c81c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c81e:	3301      	adds	r3, #1
 800c820:	9328      	str	r3, [sp, #160]	; 0xa0
 800c822:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c824:	3301      	adds	r3, #1
 800c826:	2b07      	cmp	r3, #7
 800c828:	9327      	str	r3, [sp, #156]	; 0x9c
 800c82a:	f300 82e0 	bgt.w	800cdee <_svfprintf_r+0xc7e>
 800c82e:	3408      	adds	r4, #8
 800c830:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c832:	b16b      	cbz	r3, 800c850 <_svfprintf_r+0x6e0>
 800c834:	ab1f      	add	r3, sp, #124	; 0x7c
 800c836:	6023      	str	r3, [r4, #0]
 800c838:	2302      	movs	r3, #2
 800c83a:	6063      	str	r3, [r4, #4]
 800c83c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c83e:	3302      	adds	r3, #2
 800c840:	9328      	str	r3, [sp, #160]	; 0xa0
 800c842:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c844:	3301      	adds	r3, #1
 800c846:	2b07      	cmp	r3, #7
 800c848:	9327      	str	r3, [sp, #156]	; 0x9c
 800c84a:	f300 82da 	bgt.w	800ce02 <_svfprintf_r+0xc92>
 800c84e:	3408      	adds	r4, #8
 800c850:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c852:	2b80      	cmp	r3, #128	; 0x80
 800c854:	d121      	bne.n	800c89a <_svfprintf_r+0x72a>
 800c856:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800c85a:	1a9b      	subs	r3, r3, r2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	9316      	str	r3, [sp, #88]	; 0x58
 800c860:	dd1b      	ble.n	800c89a <_svfprintf_r+0x72a>
 800c862:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800c866:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c868:	3201      	adds	r2, #1
 800c86a:	2810      	cmp	r0, #16
 800c86c:	4818      	ldr	r0, [pc, #96]	; (800c8d0 <_svfprintf_r+0x760>)
 800c86e:	f104 0108 	add.w	r1, r4, #8
 800c872:	6020      	str	r0, [r4, #0]
 800c874:	f300 82cf 	bgt.w	800ce16 <_svfprintf_r+0xca6>
 800c878:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c87a:	2a07      	cmp	r2, #7
 800c87c:	4403      	add	r3, r0
 800c87e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800c882:	6060      	str	r0, [r4, #4]
 800c884:	f340 82dc 	ble.w	800ce40 <_svfprintf_r+0xcd0>
 800c888:	4659      	mov	r1, fp
 800c88a:	4648      	mov	r0, r9
 800c88c:	aa26      	add	r2, sp, #152	; 0x98
 800c88e:	f002 ffd0 	bl	800f832 <__ssprint_r>
 800c892:	2800      	cmp	r0, #0
 800c894:	f040 85dc 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800c898:	ac29      	add	r4, sp, #164	; 0xa4
 800c89a:	9b07      	ldr	r3, [sp, #28]
 800c89c:	1aff      	subs	r7, r7, r3
 800c89e:	2f00      	cmp	r7, #0
 800c8a0:	dd28      	ble.n	800c8f4 <_svfprintf_r+0x784>
 800c8a2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800c8a6:	480a      	ldr	r0, [pc, #40]	; (800c8d0 <_svfprintf_r+0x760>)
 800c8a8:	2f10      	cmp	r7, #16
 800c8aa:	f103 0301 	add.w	r3, r3, #1
 800c8ae:	f104 0108 	add.w	r1, r4, #8
 800c8b2:	6020      	str	r0, [r4, #0]
 800c8b4:	f300 82c6 	bgt.w	800ce44 <_svfprintf_r+0xcd4>
 800c8b8:	e00c      	b.n	800c8d4 <_svfprintf_r+0x764>
 800c8ba:	bf00      	nop
 800c8bc:	0805fd21 	.word	0x0805fd21
 800c8c0:	0805fd10 	.word	0x0805fd10
 800c8c4:	40300000 	.word	0x40300000
 800c8c8:	3fe00000 	.word	0x3fe00000
 800c8cc:	0805fd34 	.word	0x0805fd34
 800c8d0:	0805fd44 	.word	0x0805fd44
 800c8d4:	6067      	str	r7, [r4, #4]
 800c8d6:	2b07      	cmp	r3, #7
 800c8d8:	4417      	add	r7, r2
 800c8da:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800c8de:	f340 82c4 	ble.w	800ce6a <_svfprintf_r+0xcfa>
 800c8e2:	4659      	mov	r1, fp
 800c8e4:	4648      	mov	r0, r9
 800c8e6:	aa26      	add	r2, sp, #152	; 0x98
 800c8e8:	f002 ffa3 	bl	800f832 <__ssprint_r>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	f040 85af 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800c8f2:	ac29      	add	r4, sp, #164	; 0xa4
 800c8f4:	f418 7f80 	tst.w	r8, #256	; 0x100
 800c8f8:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800c8fa:	f040 82bd 	bne.w	800ce78 <_svfprintf_r+0xd08>
 800c8fe:	9b07      	ldr	r3, [sp, #28]
 800c900:	f8c4 a000 	str.w	sl, [r4]
 800c904:	441f      	add	r7, r3
 800c906:	6063      	str	r3, [r4, #4]
 800c908:	9728      	str	r7, [sp, #160]	; 0xa0
 800c90a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c90c:	3301      	adds	r3, #1
 800c90e:	2b07      	cmp	r3, #7
 800c910:	9327      	str	r3, [sp, #156]	; 0x9c
 800c912:	f300 82f6 	bgt.w	800cf02 <_svfprintf_r+0xd92>
 800c916:	3408      	adds	r4, #8
 800c918:	f018 0f04 	tst.w	r8, #4
 800c91c:	f040 857a 	bne.w	800d414 <_svfprintf_r+0x12a4>
 800c920:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 800c924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c926:	428a      	cmp	r2, r1
 800c928:	bfac      	ite	ge
 800c92a:	189b      	addge	r3, r3, r2
 800c92c:	185b      	addlt	r3, r3, r1
 800c92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c930:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c932:	b13b      	cbz	r3, 800c944 <_svfprintf_r+0x7d4>
 800c934:	4659      	mov	r1, fp
 800c936:	4648      	mov	r0, r9
 800c938:	aa26      	add	r2, sp, #152	; 0x98
 800c93a:	f002 ff7a 	bl	800f832 <__ssprint_r>
 800c93e:	2800      	cmp	r0, #0
 800c940:	f040 8586 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800c944:	2300      	movs	r3, #0
 800c946:	9327      	str	r3, [sp, #156]	; 0x9c
 800c948:	9b08      	ldr	r3, [sp, #32]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f040 859c 	bne.w	800d488 <_svfprintf_r+0x1318>
 800c950:	ac29      	add	r4, sp, #164	; 0xa4
 800c952:	e0e4      	b.n	800cb1e <_svfprintf_r+0x9ae>
 800c954:	9008      	str	r0, [sp, #32]
 800c956:	e632      	b.n	800c5be <_svfprintf_r+0x44e>
 800c958:	2306      	movs	r3, #6
 800c95a:	9008      	str	r0, [sp, #32]
 800c95c:	e620      	b.n	800c5a0 <_svfprintf_r+0x430>
 800c95e:	9008      	str	r0, [sp, #32]
 800c960:	e62d      	b.n	800c5be <_svfprintf_r+0x44e>
 800c962:	f802 0c01 	strb.w	r0, [r2, #-1]
 800c966:	e696      	b.n	800c696 <_svfprintf_r+0x526>
 800c968:	f803 0b01 	strb.w	r0, [r3], #1
 800c96c:	1aca      	subs	r2, r1, r3
 800c96e:	2a00      	cmp	r2, #0
 800c970:	dafa      	bge.n	800c968 <_svfprintf_r+0x7f8>
 800c972:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c974:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c976:	3201      	adds	r2, #1
 800c978:	f103 0301 	add.w	r3, r3, #1
 800c97c:	bfb8      	it	lt
 800c97e:	2300      	movlt	r3, #0
 800c980:	441d      	add	r5, r3
 800c982:	e698      	b.n	800c6b6 <_svfprintf_r+0x546>
 800c984:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c986:	462b      	mov	r3, r5
 800c988:	2030      	movs	r0, #48	; 0x30
 800c98a:	18a9      	adds	r1, r5, r2
 800c98c:	e7ee      	b.n	800c96c <_svfprintf_r+0x7fc>
 800c98e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c990:	2b46      	cmp	r3, #70	; 0x46
 800c992:	d005      	beq.n	800c9a0 <_svfprintf_r+0x830>
 800c994:	2b45      	cmp	r3, #69	; 0x45
 800c996:	d11b      	bne.n	800c9d0 <_svfprintf_r+0x860>
 800c998:	9b07      	ldr	r3, [sp, #28]
 800c99a:	1c5e      	adds	r6, r3, #1
 800c99c:	2302      	movs	r3, #2
 800c99e:	e001      	b.n	800c9a4 <_svfprintf_r+0x834>
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	9e07      	ldr	r6, [sp, #28]
 800c9a4:	aa24      	add	r2, sp, #144	; 0x90
 800c9a6:	9204      	str	r2, [sp, #16]
 800c9a8:	aa21      	add	r2, sp, #132	; 0x84
 800c9aa:	9203      	str	r2, [sp, #12]
 800c9ac:	aa20      	add	r2, sp, #128	; 0x80
 800c9ae:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	463a      	mov	r2, r7
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	4648      	mov	r0, r9
 800c9ba:	f000 fecd 	bl	800d758 <_dtoa_r>
 800c9be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9c0:	4682      	mov	sl, r0
 800c9c2:	2b47      	cmp	r3, #71	; 0x47
 800c9c4:	d106      	bne.n	800c9d4 <_svfprintf_r+0x864>
 800c9c6:	f018 0f01 	tst.w	r8, #1
 800c9ca:	d103      	bne.n	800c9d4 <_svfprintf_r+0x864>
 800c9cc:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c9ce:	e672      	b.n	800c6b6 <_svfprintf_r+0x546>
 800c9d0:	9e07      	ldr	r6, [sp, #28]
 800c9d2:	e7e3      	b.n	800c99c <_svfprintf_r+0x82c>
 800c9d4:	eb0a 0306 	add.w	r3, sl, r6
 800c9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c9da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9dc:	2b46      	cmp	r3, #70	; 0x46
 800c9de:	d111      	bne.n	800ca04 <_svfprintf_r+0x894>
 800c9e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e4:	2b30      	cmp	r3, #48	; 0x30
 800c9e6:	d109      	bne.n	800c9fc <_svfprintf_r+0x88c>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4638      	mov	r0, r7
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	f7f4 f846 	bl	8000a80 <__aeabi_dcmpeq>
 800c9f4:	b910      	cbnz	r0, 800c9fc <_svfprintf_r+0x88c>
 800c9f6:	f1c6 0601 	rsb	r6, r6, #1
 800c9fa:	9620      	str	r6, [sp, #128]	; 0x80
 800c9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ca00:	441a      	add	r2, r3
 800ca02:	9209      	str	r2, [sp, #36]	; 0x24
 800ca04:	2200      	movs	r2, #0
 800ca06:	2300      	movs	r3, #0
 800ca08:	4638      	mov	r0, r7
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	f7f4 f838 	bl	8000a80 <__aeabi_dcmpeq>
 800ca10:	b108      	cbz	r0, 800ca16 <_svfprintf_r+0x8a6>
 800ca12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca14:	9324      	str	r3, [sp, #144]	; 0x90
 800ca16:	2230      	movs	r2, #48	; 0x30
 800ca18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ca1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca1c:	4299      	cmp	r1, r3
 800ca1e:	d9d5      	bls.n	800c9cc <_svfprintf_r+0x85c>
 800ca20:	1c59      	adds	r1, r3, #1
 800ca22:	9124      	str	r1, [sp, #144]	; 0x90
 800ca24:	701a      	strb	r2, [r3, #0]
 800ca26:	e7f7      	b.n	800ca18 <_svfprintf_r+0x8a8>
 800ca28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca2a:	2b46      	cmp	r3, #70	; 0x46
 800ca2c:	f47f ae54 	bne.w	800c6d8 <_svfprintf_r+0x568>
 800ca30:	9a07      	ldr	r2, [sp, #28]
 800ca32:	f008 0301 	and.w	r3, r8, #1
 800ca36:	2d00      	cmp	r5, #0
 800ca38:	ea43 0302 	orr.w	r3, r3, r2
 800ca3c:	dd1a      	ble.n	800ca74 <_svfprintf_r+0x904>
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d034      	beq.n	800caac <_svfprintf_r+0x93c>
 800ca42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca44:	18eb      	adds	r3, r5, r3
 800ca46:	441a      	add	r2, r3
 800ca48:	9207      	str	r2, [sp, #28]
 800ca4a:	2366      	movs	r3, #102	; 0x66
 800ca4c:	930a      	str	r3, [sp, #40]	; 0x28
 800ca4e:	e033      	b.n	800cab8 <_svfprintf_r+0x948>
 800ca50:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ca54:	f802 6b01 	strb.w	r6, [r2], #1
 800ca58:	e675      	b.n	800c746 <_svfprintf_r+0x5d6>
 800ca5a:	b941      	cbnz	r1, 800ca6e <_svfprintf_r+0x8fe>
 800ca5c:	2230      	movs	r2, #48	; 0x30
 800ca5e:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800ca62:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 800ca66:	3330      	adds	r3, #48	; 0x30
 800ca68:	f802 3b01 	strb.w	r3, [r2], #1
 800ca6c:	e677      	b.n	800c75e <_svfprintf_r+0x5ee>
 800ca6e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800ca72:	e7f8      	b.n	800ca66 <_svfprintf_r+0x8f6>
 800ca74:	b1e3      	cbz	r3, 800cab0 <_svfprintf_r+0x940>
 800ca76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca78:	9a07      	ldr	r2, [sp, #28]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	e7e3      	b.n	800ca46 <_svfprintf_r+0x8d6>
 800ca7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca80:	429d      	cmp	r5, r3
 800ca82:	db07      	blt.n	800ca94 <_svfprintf_r+0x924>
 800ca84:	f018 0f01 	tst.w	r8, #1
 800ca88:	d02b      	beq.n	800cae2 <_svfprintf_r+0x972>
 800ca8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca8c:	18eb      	adds	r3, r5, r3
 800ca8e:	9307      	str	r3, [sp, #28]
 800ca90:	2367      	movs	r3, #103	; 0x67
 800ca92:	e7db      	b.n	800ca4c <_svfprintf_r+0x8dc>
 800ca94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca98:	2d00      	cmp	r5, #0
 800ca9a:	4413      	add	r3, r2
 800ca9c:	9307      	str	r3, [sp, #28]
 800ca9e:	dcf7      	bgt.n	800ca90 <_svfprintf_r+0x920>
 800caa0:	9a07      	ldr	r2, [sp, #28]
 800caa2:	f1c5 0301 	rsb	r3, r5, #1
 800caa6:	441a      	add	r2, r3
 800caa8:	9207      	str	r2, [sp, #28]
 800caaa:	e7f1      	b.n	800ca90 <_svfprintf_r+0x920>
 800caac:	9507      	str	r5, [sp, #28]
 800caae:	e7cc      	b.n	800ca4a <_svfprintf_r+0x8da>
 800cab0:	2366      	movs	r3, #102	; 0x66
 800cab2:	930a      	str	r3, [sp, #40]	; 0x28
 800cab4:	2301      	movs	r3, #1
 800cab6:	9307      	str	r3, [sp, #28]
 800cab8:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 800cabc:	930c      	str	r3, [sp, #48]	; 0x30
 800cabe:	d021      	beq.n	800cb04 <_svfprintf_r+0x994>
 800cac0:	2600      	movs	r6, #0
 800cac2:	2d00      	cmp	r5, #0
 800cac4:	960c      	str	r6, [sp, #48]	; 0x30
 800cac6:	f77f ae61 	ble.w	800c78c <_svfprintf_r+0x61c>
 800caca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2bff      	cmp	r3, #255	; 0xff
 800cad0:	d109      	bne.n	800cae6 <_svfprintf_r+0x976>
 800cad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cad4:	9a07      	ldr	r2, [sp, #28]
 800cad6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cad8:	4433      	add	r3, r6
 800cada:	fb01 2303 	mla	r3, r1, r3, r2
 800cade:	9307      	str	r3, [sp, #28]
 800cae0:	e654      	b.n	800c78c <_svfprintf_r+0x61c>
 800cae2:	9507      	str	r5, [sp, #28]
 800cae4:	e7d4      	b.n	800ca90 <_svfprintf_r+0x920>
 800cae6:	42ab      	cmp	r3, r5
 800cae8:	daf3      	bge.n	800cad2 <_svfprintf_r+0x962>
 800caea:	1aed      	subs	r5, r5, r3
 800caec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caee:	785b      	ldrb	r3, [r3, #1]
 800caf0:	b133      	cbz	r3, 800cb00 <_svfprintf_r+0x990>
 800caf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caf4:	3301      	adds	r3, #1
 800caf6:	930c      	str	r3, [sp, #48]	; 0x30
 800caf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cafa:	3301      	adds	r3, #1
 800cafc:	930d      	str	r3, [sp, #52]	; 0x34
 800cafe:	e7e4      	b.n	800caca <_svfprintf_r+0x95a>
 800cb00:	3601      	adds	r6, #1
 800cb02:	e7e2      	b.n	800caca <_svfprintf_r+0x95a>
 800cb04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cb06:	e641      	b.n	800c78c <_svfprintf_r+0x61c>
 800cb08:	1d33      	adds	r3, r6, #4
 800cb0a:	f018 0f20 	tst.w	r8, #32
 800cb0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb10:	d00a      	beq.n	800cb28 <_svfprintf_r+0x9b8>
 800cb12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb14:	6833      	ldr	r3, [r6, #0]
 800cb16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cb18:	17d2      	asrs	r2, r2, #31
 800cb1a:	e9c3 1200 	strd	r1, r2, [r3]
 800cb1e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cb20:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800cb24:	f7ff bb60 	b.w	800c1e8 <_svfprintf_r+0x78>
 800cb28:	f018 0f10 	tst.w	r8, #16
 800cb2c:	d003      	beq.n	800cb36 <_svfprintf_r+0x9c6>
 800cb2e:	6833      	ldr	r3, [r6, #0]
 800cb30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	e7f3      	b.n	800cb1e <_svfprintf_r+0x9ae>
 800cb36:	f018 0f40 	tst.w	r8, #64	; 0x40
 800cb3a:	d003      	beq.n	800cb44 <_svfprintf_r+0x9d4>
 800cb3c:	6833      	ldr	r3, [r6, #0]
 800cb3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb40:	801a      	strh	r2, [r3, #0]
 800cb42:	e7ec      	b.n	800cb1e <_svfprintf_r+0x9ae>
 800cb44:	f418 7f00 	tst.w	r8, #512	; 0x200
 800cb48:	d0f1      	beq.n	800cb2e <_svfprintf_r+0x9be>
 800cb4a:	6833      	ldr	r3, [r6, #0]
 800cb4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb4e:	701a      	strb	r2, [r3, #0]
 800cb50:	e7e5      	b.n	800cb1e <_svfprintf_r+0x9ae>
 800cb52:	f048 0810 	orr.w	r8, r8, #16
 800cb56:	f018 0320 	ands.w	r3, r8, #32
 800cb5a:	d020      	beq.n	800cb9e <_svfprintf_r+0xa2e>
 800cb5c:	1df3      	adds	r3, r6, #7
 800cb5e:	f023 0307 	bic.w	r3, r3, #7
 800cb62:	461a      	mov	r2, r3
 800cb64:	f852 6b08 	ldr.w	r6, [r2], #8
 800cb68:	685f      	ldr	r7, [r3, #4]
 800cb6a:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800cb72:	2200      	movs	r2, #0
 800cb74:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800cb78:	9a07      	ldr	r2, [sp, #28]
 800cb7a:	3201      	adds	r2, #1
 800cb7c:	f000 8495 	beq.w	800d4aa <_svfprintf_r+0x133a>
 800cb80:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 800cb84:	9208      	str	r2, [sp, #32]
 800cb86:	ea56 0207 	orrs.w	r2, r6, r7
 800cb8a:	f040 8494 	bne.w	800d4b6 <_svfprintf_r+0x1346>
 800cb8e:	9a07      	ldr	r2, [sp, #28]
 800cb90:	2a00      	cmp	r2, #0
 800cb92:	f000 80fb 	beq.w	800cd8c <_svfprintf_r+0xc1c>
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	f040 8490 	bne.w	800d4bc <_svfprintf_r+0x134c>
 800cb9c:	e09f      	b.n	800ccde <_svfprintf_r+0xb6e>
 800cb9e:	4632      	mov	r2, r6
 800cba0:	f852 6b04 	ldr.w	r6, [r2], #4
 800cba4:	f018 0710 	ands.w	r7, r8, #16
 800cba8:	920b      	str	r2, [sp, #44]	; 0x2c
 800cbaa:	d001      	beq.n	800cbb0 <_svfprintf_r+0xa40>
 800cbac:	461f      	mov	r7, r3
 800cbae:	e7dd      	b.n	800cb6c <_svfprintf_r+0x9fc>
 800cbb0:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800cbb4:	d001      	beq.n	800cbba <_svfprintf_r+0xa4a>
 800cbb6:	b2b6      	uxth	r6, r6
 800cbb8:	e7d8      	b.n	800cb6c <_svfprintf_r+0x9fc>
 800cbba:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800cbbe:	d0d5      	beq.n	800cb6c <_svfprintf_r+0x9fc>
 800cbc0:	b2f6      	uxtb	r6, r6
 800cbc2:	e7f3      	b.n	800cbac <_svfprintf_r+0xa3c>
 800cbc4:	4633      	mov	r3, r6
 800cbc6:	f853 6b04 	ldr.w	r6, [r3], #4
 800cbca:	2278      	movs	r2, #120	; 0x78
 800cbcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbce:	2330      	movs	r3, #48	; 0x30
 800cbd0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800cbd4:	4ba6      	ldr	r3, [pc, #664]	; (800ce70 <_svfprintf_r+0xd00>)
 800cbd6:	2700      	movs	r7, #0
 800cbd8:	931a      	str	r3, [sp, #104]	; 0x68
 800cbda:	f048 0802 	orr.w	r8, r8, #2
 800cbde:	2302      	movs	r3, #2
 800cbe0:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800cbe4:	920a      	str	r2, [sp, #40]	; 0x28
 800cbe6:	e7c4      	b.n	800cb72 <_svfprintf_r+0xa02>
 800cbe8:	4633      	mov	r3, r6
 800cbea:	2500      	movs	r5, #0
 800cbec:	f853 ab04 	ldr.w	sl, [r3], #4
 800cbf0:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 800cbf4:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbf6:	9b07      	ldr	r3, [sp, #28]
 800cbf8:	1c58      	adds	r0, r3, #1
 800cbfa:	d010      	beq.n	800cc1e <_svfprintf_r+0xaae>
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4650      	mov	r0, sl
 800cc02:	f002 f915 	bl	800ee30 <memchr>
 800cc06:	9008      	str	r0, [sp, #32]
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	f000 80d6 	beq.w	800cdba <_svfprintf_r+0xc4a>
 800cc0e:	eba0 030a 	sub.w	r3, r0, sl
 800cc12:	462f      	mov	r7, r5
 800cc14:	462e      	mov	r6, r5
 800cc16:	e9cd 3507 	strd	r3, r5, [sp, #28]
 800cc1a:	950c      	str	r5, [sp, #48]	; 0x30
 800cc1c:	e5be      	b.n	800c79c <_svfprintf_r+0x62c>
 800cc1e:	4650      	mov	r0, sl
 800cc20:	f7f3 fb02 	bl	8000228 <strlen>
 800cc24:	e9cd 0507 	strd	r0, r5, [sp, #28]
 800cc28:	e46a      	b.n	800c500 <_svfprintf_r+0x390>
 800cc2a:	f048 0810 	orr.w	r8, r8, #16
 800cc2e:	f018 0320 	ands.w	r3, r8, #32
 800cc32:	d009      	beq.n	800cc48 <_svfprintf_r+0xad8>
 800cc34:	1df3      	adds	r3, r6, #7
 800cc36:	f023 0307 	bic.w	r3, r3, #7
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	f852 6b08 	ldr.w	r6, [r2], #8
 800cc40:	685f      	ldr	r7, [r3, #4]
 800cc42:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc44:	2301      	movs	r3, #1
 800cc46:	e794      	b.n	800cb72 <_svfprintf_r+0xa02>
 800cc48:	4632      	mov	r2, r6
 800cc4a:	f852 6b04 	ldr.w	r6, [r2], #4
 800cc4e:	f018 0710 	ands.w	r7, r8, #16
 800cc52:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc54:	d001      	beq.n	800cc5a <_svfprintf_r+0xaea>
 800cc56:	461f      	mov	r7, r3
 800cc58:	e7f4      	b.n	800cc44 <_svfprintf_r+0xad4>
 800cc5a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800cc5e:	d001      	beq.n	800cc64 <_svfprintf_r+0xaf4>
 800cc60:	b2b6      	uxth	r6, r6
 800cc62:	e7ef      	b.n	800cc44 <_svfprintf_r+0xad4>
 800cc64:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800cc68:	d0ec      	beq.n	800cc44 <_svfprintf_r+0xad4>
 800cc6a:	b2f6      	uxtb	r6, r6
 800cc6c:	e7f3      	b.n	800cc56 <_svfprintf_r+0xae6>
 800cc6e:	4b81      	ldr	r3, [pc, #516]	; (800ce74 <_svfprintf_r+0xd04>)
 800cc70:	931a      	str	r3, [sp, #104]	; 0x68
 800cc72:	f018 0320 	ands.w	r3, r8, #32
 800cc76:	d01b      	beq.n	800ccb0 <_svfprintf_r+0xb40>
 800cc78:	1df3      	adds	r3, r6, #7
 800cc7a:	f023 0307 	bic.w	r3, r3, #7
 800cc7e:	461a      	mov	r2, r3
 800cc80:	f852 6b08 	ldr.w	r6, [r2], #8
 800cc84:	685f      	ldr	r7, [r3, #4]
 800cc86:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc88:	f018 0f01 	tst.w	r8, #1
 800cc8c:	d00a      	beq.n	800cca4 <_svfprintf_r+0xb34>
 800cc8e:	ea56 0307 	orrs.w	r3, r6, r7
 800cc92:	d007      	beq.n	800cca4 <_svfprintf_r+0xb34>
 800cc94:	2330      	movs	r3, #48	; 0x30
 800cc96:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800cc9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc9c:	f048 0802 	orr.w	r8, r8, #2
 800cca0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800cca4:	2302      	movs	r3, #2
 800cca6:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800ccaa:	e762      	b.n	800cb72 <_svfprintf_r+0xa02>
 800ccac:	4b70      	ldr	r3, [pc, #448]	; (800ce70 <_svfprintf_r+0xd00>)
 800ccae:	e7df      	b.n	800cc70 <_svfprintf_r+0xb00>
 800ccb0:	4632      	mov	r2, r6
 800ccb2:	f852 6b04 	ldr.w	r6, [r2], #4
 800ccb6:	f018 0710 	ands.w	r7, r8, #16
 800ccba:	920b      	str	r2, [sp, #44]	; 0x2c
 800ccbc:	d001      	beq.n	800ccc2 <_svfprintf_r+0xb52>
 800ccbe:	461f      	mov	r7, r3
 800ccc0:	e7e2      	b.n	800cc88 <_svfprintf_r+0xb18>
 800ccc2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800ccc6:	d001      	beq.n	800cccc <_svfprintf_r+0xb5c>
 800ccc8:	b2b6      	uxth	r6, r6
 800ccca:	e7dd      	b.n	800cc88 <_svfprintf_r+0xb18>
 800cccc:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800ccd0:	d0da      	beq.n	800cc88 <_svfprintf_r+0xb18>
 800ccd2:	b2f6      	uxtb	r6, r6
 800ccd4:	e7f3      	b.n	800ccbe <_svfprintf_r+0xb4e>
 800ccd6:	2e0a      	cmp	r6, #10
 800ccd8:	f177 0300 	sbcs.w	r3, r7, #0
 800ccdc:	d206      	bcs.n	800ccec <_svfprintf_r+0xb7c>
 800ccde:	3630      	adds	r6, #48	; 0x30
 800cce0:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 800cce4:	f20d 1a47 	addw	sl, sp, #327	; 0x147
 800cce8:	f000 bc04 	b.w	800d4f4 <_svfprintf_r+0x1384>
 800ccec:	2300      	movs	r3, #0
 800ccee:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf0:	9b08      	ldr	r3, [sp, #32]
 800ccf2:	ad52      	add	r5, sp, #328	; 0x148
 800ccf4:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 800ccf8:	220a      	movs	r2, #10
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	4639      	mov	r1, r7
 800cd00:	f7f3 ff9e 	bl	8000c40 <__aeabi_uldivmod>
 800cd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd06:	3230      	adds	r2, #48	; 0x30
 800cd08:	3301      	adds	r3, #1
 800cd0a:	f105 3aff 	add.w	sl, r5, #4294967295
 800cd0e:	f805 2c01 	strb.w	r2, [r5, #-1]
 800cd12:	9309      	str	r3, [sp, #36]	; 0x24
 800cd14:	f1b8 0f00 	cmp.w	r8, #0
 800cd18:	d019      	beq.n	800cd4e <_svfprintf_r+0xbde>
 800cd1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d114      	bne.n	800cd4e <_svfprintf_r+0xbde>
 800cd24:	2aff      	cmp	r2, #255	; 0xff
 800cd26:	d012      	beq.n	800cd4e <_svfprintf_r+0xbde>
 800cd28:	2e0a      	cmp	r6, #10
 800cd2a:	f177 0300 	sbcs.w	r3, r7, #0
 800cd2e:	d30e      	bcc.n	800cd4e <_svfprintf_r+0xbde>
 800cd30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd32:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd34:	ebaa 0a03 	sub.w	sl, sl, r3
 800cd38:	461a      	mov	r2, r3
 800cd3a:	4650      	mov	r0, sl
 800cd3c:	f002 fd66 	bl	800f80c <strncpy>
 800cd40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd42:	785d      	ldrb	r5, [r3, #1]
 800cd44:	b195      	cbz	r5, 800cd6c <_svfprintf_r+0xbfc>
 800cd46:	3301      	adds	r3, #1
 800cd48:	930d      	str	r3, [sp, #52]	; 0x34
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd4e:	2300      	movs	r3, #0
 800cd50:	220a      	movs	r2, #10
 800cd52:	4630      	mov	r0, r6
 800cd54:	4639      	mov	r1, r7
 800cd56:	f7f3 ff73 	bl	8000c40 <__aeabi_uldivmod>
 800cd5a:	2e0a      	cmp	r6, #10
 800cd5c:	f177 0300 	sbcs.w	r3, r7, #0
 800cd60:	f0c0 83c8 	bcc.w	800d4f4 <_svfprintf_r+0x1384>
 800cd64:	4606      	mov	r6, r0
 800cd66:	460f      	mov	r7, r1
 800cd68:	4655      	mov	r5, sl
 800cd6a:	e7c5      	b.n	800ccf8 <_svfprintf_r+0xb88>
 800cd6c:	9509      	str	r5, [sp, #36]	; 0x24
 800cd6e:	e7ee      	b.n	800cd4e <_svfprintf_r+0xbde>
 800cd70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cd72:	f006 030f 	and.w	r3, r6, #15
 800cd76:	5cd3      	ldrb	r3, [r2, r3]
 800cd78:	0936      	lsrs	r6, r6, #4
 800cd7a:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800cd7e:	093f      	lsrs	r7, r7, #4
 800cd80:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800cd84:	ea56 0307 	orrs.w	r3, r6, r7
 800cd88:	d1f2      	bne.n	800cd70 <_svfprintf_r+0xc00>
 800cd8a:	e3b3      	b.n	800d4f4 <_svfprintf_r+0x1384>
 800cd8c:	b933      	cbnz	r3, 800cd9c <_svfprintf_r+0xc2c>
 800cd8e:	f018 0f01 	tst.w	r8, #1
 800cd92:	d003      	beq.n	800cd9c <_svfprintf_r+0xc2c>
 800cd94:	2330      	movs	r3, #48	; 0x30
 800cd96:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 800cd9a:	e7a3      	b.n	800cce4 <_svfprintf_r+0xb74>
 800cd9c:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800cda0:	e3a8      	b.n	800d4f4 <_svfprintf_r+0x1384>
 800cda2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f000 8375 	beq.w	800d494 <_svfprintf_r+0x1324>
 800cdaa:	2000      	movs	r0, #0
 800cdac:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800cdb0:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800cdb4:	960b      	str	r6, [sp, #44]	; 0x2c
 800cdb6:	f7ff bb36 	b.w	800c426 <_svfprintf_r+0x2b6>
 800cdba:	9f08      	ldr	r7, [sp, #32]
 800cdbc:	f7ff bba1 	b.w	800c502 <_svfprintf_r+0x392>
 800cdc0:	2010      	movs	r0, #16
 800cdc2:	2a07      	cmp	r2, #7
 800cdc4:	4403      	add	r3, r0
 800cdc6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800cdca:	6060      	str	r0, [r4, #4]
 800cdcc:	dd08      	ble.n	800cde0 <_svfprintf_r+0xc70>
 800cdce:	4659      	mov	r1, fp
 800cdd0:	4648      	mov	r0, r9
 800cdd2:	aa26      	add	r2, sp, #152	; 0x98
 800cdd4:	f002 fd2d 	bl	800f832 <__ssprint_r>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	f040 8339 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800cdde:	a929      	add	r1, sp, #164	; 0xa4
 800cde0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cde2:	460c      	mov	r4, r1
 800cde4:	3b10      	subs	r3, #16
 800cde6:	9316      	str	r3, [sp, #88]	; 0x58
 800cde8:	e4f4      	b.n	800c7d4 <_svfprintf_r+0x664>
 800cdea:	460c      	mov	r4, r1
 800cdec:	e50e      	b.n	800c80c <_svfprintf_r+0x69c>
 800cdee:	4659      	mov	r1, fp
 800cdf0:	4648      	mov	r0, r9
 800cdf2:	aa26      	add	r2, sp, #152	; 0x98
 800cdf4:	f002 fd1d 	bl	800f832 <__ssprint_r>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	f040 8329 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800cdfe:	ac29      	add	r4, sp, #164	; 0xa4
 800ce00:	e516      	b.n	800c830 <_svfprintf_r+0x6c0>
 800ce02:	4659      	mov	r1, fp
 800ce04:	4648      	mov	r0, r9
 800ce06:	aa26      	add	r2, sp, #152	; 0x98
 800ce08:	f002 fd13 	bl	800f832 <__ssprint_r>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f040 831f 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800ce12:	ac29      	add	r4, sp, #164	; 0xa4
 800ce14:	e51c      	b.n	800c850 <_svfprintf_r+0x6e0>
 800ce16:	2010      	movs	r0, #16
 800ce18:	2a07      	cmp	r2, #7
 800ce1a:	4403      	add	r3, r0
 800ce1c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800ce20:	6060      	str	r0, [r4, #4]
 800ce22:	dd08      	ble.n	800ce36 <_svfprintf_r+0xcc6>
 800ce24:	4659      	mov	r1, fp
 800ce26:	4648      	mov	r0, r9
 800ce28:	aa26      	add	r2, sp, #152	; 0x98
 800ce2a:	f002 fd02 	bl	800f832 <__ssprint_r>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f040 830e 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800ce34:	a929      	add	r1, sp, #164	; 0xa4
 800ce36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ce38:	460c      	mov	r4, r1
 800ce3a:	3b10      	subs	r3, #16
 800ce3c:	9316      	str	r3, [sp, #88]	; 0x58
 800ce3e:	e510      	b.n	800c862 <_svfprintf_r+0x6f2>
 800ce40:	460c      	mov	r4, r1
 800ce42:	e52a      	b.n	800c89a <_svfprintf_r+0x72a>
 800ce44:	2010      	movs	r0, #16
 800ce46:	2b07      	cmp	r3, #7
 800ce48:	4402      	add	r2, r0
 800ce4a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800ce4e:	6060      	str	r0, [r4, #4]
 800ce50:	dd08      	ble.n	800ce64 <_svfprintf_r+0xcf4>
 800ce52:	4659      	mov	r1, fp
 800ce54:	4648      	mov	r0, r9
 800ce56:	aa26      	add	r2, sp, #152	; 0x98
 800ce58:	f002 fceb 	bl	800f832 <__ssprint_r>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	f040 82f7 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800ce62:	a929      	add	r1, sp, #164	; 0xa4
 800ce64:	460c      	mov	r4, r1
 800ce66:	3f10      	subs	r7, #16
 800ce68:	e51b      	b.n	800c8a2 <_svfprintf_r+0x732>
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	e542      	b.n	800c8f4 <_svfprintf_r+0x784>
 800ce6e:	bf00      	nop
 800ce70:	0805fd10 	.word	0x0805fd10
 800ce74:	0805fd21 	.word	0x0805fd21
 800ce78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce7a:	2b65      	cmp	r3, #101	; 0x65
 800ce7c:	f340 8230 	ble.w	800d2e0 <_svfprintf_r+0x1170>
 800ce80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce84:	2200      	movs	r2, #0
 800ce86:	2300      	movs	r3, #0
 800ce88:	f7f3 fdfa 	bl	8000a80 <__aeabi_dcmpeq>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d068      	beq.n	800cf62 <_svfprintf_r+0xdf2>
 800ce90:	4b6d      	ldr	r3, [pc, #436]	; (800d048 <_svfprintf_r+0xed8>)
 800ce92:	6023      	str	r3, [r4, #0]
 800ce94:	2301      	movs	r3, #1
 800ce96:	441f      	add	r7, r3
 800ce98:	6063      	str	r3, [r4, #4]
 800ce9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ce9c:	9728      	str	r7, [sp, #160]	; 0xa0
 800ce9e:	3301      	adds	r3, #1
 800cea0:	2b07      	cmp	r3, #7
 800cea2:	9327      	str	r3, [sp, #156]	; 0x9c
 800cea4:	dc37      	bgt.n	800cf16 <_svfprintf_r+0xda6>
 800cea6:	3408      	adds	r4, #8
 800cea8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ceaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceac:	4293      	cmp	r3, r2
 800ceae:	db03      	blt.n	800ceb8 <_svfprintf_r+0xd48>
 800ceb0:	f018 0f01 	tst.w	r8, #1
 800ceb4:	f43f ad30 	beq.w	800c918 <_svfprintf_r+0x7a8>
 800ceb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ceba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cec0:	6063      	str	r3, [r4, #4]
 800cec2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cec4:	4413      	add	r3, r2
 800cec6:	9328      	str	r3, [sp, #160]	; 0xa0
 800cec8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ceca:	3301      	adds	r3, #1
 800cecc:	2b07      	cmp	r3, #7
 800cece:	9327      	str	r3, [sp, #156]	; 0x9c
 800ced0:	dc2b      	bgt.n	800cf2a <_svfprintf_r+0xdba>
 800ced2:	3408      	adds	r4, #8
 800ced4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced6:	1e5d      	subs	r5, r3, #1
 800ced8:	2d00      	cmp	r5, #0
 800ceda:	f77f ad1d 	ble.w	800c918 <_svfprintf_r+0x7a8>
 800cede:	2710      	movs	r7, #16
 800cee0:	4e5a      	ldr	r6, [pc, #360]	; (800d04c <_svfprintf_r+0xedc>)
 800cee2:	2d10      	cmp	r5, #16
 800cee4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800cee8:	f104 0108 	add.w	r1, r4, #8
 800ceec:	f103 0301 	add.w	r3, r3, #1
 800cef0:	6026      	str	r6, [r4, #0]
 800cef2:	dc24      	bgt.n	800cf3e <_svfprintf_r+0xdce>
 800cef4:	6065      	str	r5, [r4, #4]
 800cef6:	2b07      	cmp	r3, #7
 800cef8:	4415      	add	r5, r2
 800cefa:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800cefe:	f340 8286 	ble.w	800d40e <_svfprintf_r+0x129e>
 800cf02:	4659      	mov	r1, fp
 800cf04:	4648      	mov	r0, r9
 800cf06:	aa26      	add	r2, sp, #152	; 0x98
 800cf08:	f002 fc93 	bl	800f832 <__ssprint_r>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	f040 829f 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800cf12:	ac29      	add	r4, sp, #164	; 0xa4
 800cf14:	e500      	b.n	800c918 <_svfprintf_r+0x7a8>
 800cf16:	4659      	mov	r1, fp
 800cf18:	4648      	mov	r0, r9
 800cf1a:	aa26      	add	r2, sp, #152	; 0x98
 800cf1c:	f002 fc89 	bl	800f832 <__ssprint_r>
 800cf20:	2800      	cmp	r0, #0
 800cf22:	f040 8295 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800cf26:	ac29      	add	r4, sp, #164	; 0xa4
 800cf28:	e7be      	b.n	800cea8 <_svfprintf_r+0xd38>
 800cf2a:	4659      	mov	r1, fp
 800cf2c:	4648      	mov	r0, r9
 800cf2e:	aa26      	add	r2, sp, #152	; 0x98
 800cf30:	f002 fc7f 	bl	800f832 <__ssprint_r>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	f040 828b 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800cf3a:	ac29      	add	r4, sp, #164	; 0xa4
 800cf3c:	e7ca      	b.n	800ced4 <_svfprintf_r+0xd64>
 800cf3e:	3210      	adds	r2, #16
 800cf40:	2b07      	cmp	r3, #7
 800cf42:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800cf46:	6067      	str	r7, [r4, #4]
 800cf48:	dd08      	ble.n	800cf5c <_svfprintf_r+0xdec>
 800cf4a:	4659      	mov	r1, fp
 800cf4c:	4648      	mov	r0, r9
 800cf4e:	aa26      	add	r2, sp, #152	; 0x98
 800cf50:	f002 fc6f 	bl	800f832 <__ssprint_r>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	f040 827b 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800cf5a:	a929      	add	r1, sp, #164	; 0xa4
 800cf5c:	460c      	mov	r4, r1
 800cf5e:	3d10      	subs	r5, #16
 800cf60:	e7bf      	b.n	800cee2 <_svfprintf_r+0xd72>
 800cf62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	dc73      	bgt.n	800d050 <_svfprintf_r+0xee0>
 800cf68:	4b37      	ldr	r3, [pc, #220]	; (800d048 <_svfprintf_r+0xed8>)
 800cf6a:	6023      	str	r3, [r4, #0]
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	441f      	add	r7, r3
 800cf70:	6063      	str	r3, [r4, #4]
 800cf72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cf74:	9728      	str	r7, [sp, #160]	; 0xa0
 800cf76:	3301      	adds	r3, #1
 800cf78:	2b07      	cmp	r3, #7
 800cf7a:	9327      	str	r3, [sp, #156]	; 0x9c
 800cf7c:	dc3d      	bgt.n	800cffa <_svfprintf_r+0xe8a>
 800cf7e:	3408      	adds	r4, #8
 800cf80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf82:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cf84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cf86:	430a      	orrs	r2, r1
 800cf88:	f008 0101 	and.w	r1, r8, #1
 800cf8c:	430a      	orrs	r2, r1
 800cf8e:	f43f acc3 	beq.w	800c918 <_svfprintf_r+0x7a8>
 800cf92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf94:	6022      	str	r2, [r4, #0]
 800cf96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf98:	4413      	add	r3, r2
 800cf9a:	9328      	str	r3, [sp, #160]	; 0xa0
 800cf9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cf9e:	6062      	str	r2, [r4, #4]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	2b07      	cmp	r3, #7
 800cfa4:	9327      	str	r3, [sp, #156]	; 0x9c
 800cfa6:	dc32      	bgt.n	800d00e <_svfprintf_r+0xe9e>
 800cfa8:	3408      	adds	r4, #8
 800cfaa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800cfac:	2d00      	cmp	r5, #0
 800cfae:	da1b      	bge.n	800cfe8 <_svfprintf_r+0xe78>
 800cfb0:	4623      	mov	r3, r4
 800cfb2:	2710      	movs	r7, #16
 800cfb4:	4e25      	ldr	r6, [pc, #148]	; (800d04c <_svfprintf_r+0xedc>)
 800cfb6:	426d      	negs	r5, r5
 800cfb8:	2d10      	cmp	r5, #16
 800cfba:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800cfbe:	f104 0408 	add.w	r4, r4, #8
 800cfc2:	f102 0201 	add.w	r2, r2, #1
 800cfc6:	601e      	str	r6, [r3, #0]
 800cfc8:	dc2b      	bgt.n	800d022 <_svfprintf_r+0xeb2>
 800cfca:	605d      	str	r5, [r3, #4]
 800cfcc:	2a07      	cmp	r2, #7
 800cfce:	440d      	add	r5, r1
 800cfd0:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800cfd4:	dd08      	ble.n	800cfe8 <_svfprintf_r+0xe78>
 800cfd6:	4659      	mov	r1, fp
 800cfd8:	4648      	mov	r0, r9
 800cfda:	aa26      	add	r2, sp, #152	; 0x98
 800cfdc:	f002 fc29 	bl	800f832 <__ssprint_r>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	f040 8235 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800cfe6:	ac29      	add	r4, sp, #164	; 0xa4
 800cfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfec:	6063      	str	r3, [r4, #4]
 800cfee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cff0:	f8c4 a000 	str.w	sl, [r4]
 800cff4:	4413      	add	r3, r2
 800cff6:	9328      	str	r3, [sp, #160]	; 0xa0
 800cff8:	e487      	b.n	800c90a <_svfprintf_r+0x79a>
 800cffa:	4659      	mov	r1, fp
 800cffc:	4648      	mov	r0, r9
 800cffe:	aa26      	add	r2, sp, #152	; 0x98
 800d000:	f002 fc17 	bl	800f832 <__ssprint_r>
 800d004:	2800      	cmp	r0, #0
 800d006:	f040 8223 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d00a:	ac29      	add	r4, sp, #164	; 0xa4
 800d00c:	e7b8      	b.n	800cf80 <_svfprintf_r+0xe10>
 800d00e:	4659      	mov	r1, fp
 800d010:	4648      	mov	r0, r9
 800d012:	aa26      	add	r2, sp, #152	; 0x98
 800d014:	f002 fc0d 	bl	800f832 <__ssprint_r>
 800d018:	2800      	cmp	r0, #0
 800d01a:	f040 8219 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d01e:	ac29      	add	r4, sp, #164	; 0xa4
 800d020:	e7c3      	b.n	800cfaa <_svfprintf_r+0xe3a>
 800d022:	3110      	adds	r1, #16
 800d024:	2a07      	cmp	r2, #7
 800d026:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800d02a:	605f      	str	r7, [r3, #4]
 800d02c:	dd08      	ble.n	800d040 <_svfprintf_r+0xed0>
 800d02e:	4659      	mov	r1, fp
 800d030:	4648      	mov	r0, r9
 800d032:	aa26      	add	r2, sp, #152	; 0x98
 800d034:	f002 fbfd 	bl	800f832 <__ssprint_r>
 800d038:	2800      	cmp	r0, #0
 800d03a:	f040 8209 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d03e:	ac29      	add	r4, sp, #164	; 0xa4
 800d040:	4623      	mov	r3, r4
 800d042:	3d10      	subs	r5, #16
 800d044:	e7b8      	b.n	800cfb8 <_svfprintf_r+0xe48>
 800d046:	bf00      	nop
 800d048:	0805fd32 	.word	0x0805fd32
 800d04c:	0805fd44 	.word	0x0805fd44
 800d050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d052:	42ab      	cmp	r3, r5
 800d054:	bfa8      	it	ge
 800d056:	462b      	movge	r3, r5
 800d058:	2b00      	cmp	r3, #0
 800d05a:	9307      	str	r3, [sp, #28]
 800d05c:	dd0a      	ble.n	800d074 <_svfprintf_r+0xf04>
 800d05e:	441f      	add	r7, r3
 800d060:	e9c4 a300 	strd	sl, r3, [r4]
 800d064:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d066:	9728      	str	r7, [sp, #160]	; 0xa0
 800d068:	3301      	adds	r3, #1
 800d06a:	2b07      	cmp	r3, #7
 800d06c:	9327      	str	r3, [sp, #156]	; 0x9c
 800d06e:	f300 8085 	bgt.w	800d17c <_svfprintf_r+0x100c>
 800d072:	3408      	adds	r4, #8
 800d074:	9b07      	ldr	r3, [sp, #28]
 800d076:	2b00      	cmp	r3, #0
 800d078:	bfb4      	ite	lt
 800d07a:	462f      	movlt	r7, r5
 800d07c:	1aef      	subge	r7, r5, r3
 800d07e:	2f00      	cmp	r7, #0
 800d080:	dd19      	ble.n	800d0b6 <_svfprintf_r+0xf46>
 800d082:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d086:	4895      	ldr	r0, [pc, #596]	; (800d2dc <_svfprintf_r+0x116c>)
 800d088:	2f10      	cmp	r7, #16
 800d08a:	f103 0301 	add.w	r3, r3, #1
 800d08e:	f104 0108 	add.w	r1, r4, #8
 800d092:	6020      	str	r0, [r4, #0]
 800d094:	dc7c      	bgt.n	800d190 <_svfprintf_r+0x1020>
 800d096:	6067      	str	r7, [r4, #4]
 800d098:	2b07      	cmp	r3, #7
 800d09a:	4417      	add	r7, r2
 800d09c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800d0a0:	f340 8089 	ble.w	800d1b6 <_svfprintf_r+0x1046>
 800d0a4:	4659      	mov	r1, fp
 800d0a6:	4648      	mov	r0, r9
 800d0a8:	aa26      	add	r2, sp, #152	; 0x98
 800d0aa:	f002 fbc2 	bl	800f832 <__ssprint_r>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	f040 81ce 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d0b4:	ac29      	add	r4, sp, #164	; 0xa4
 800d0b6:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800d0ba:	4455      	add	r5, sl
 800d0bc:	d009      	beq.n	800d0d2 <_svfprintf_r+0xf62>
 800d0be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d17a      	bne.n	800d1ba <_svfprintf_r+0x104a>
 800d0c4:	2e00      	cmp	r6, #0
 800d0c6:	d17a      	bne.n	800d1be <_svfprintf_r+0x104e>
 800d0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ca:	4453      	add	r3, sl
 800d0cc:	429d      	cmp	r5, r3
 800d0ce:	bf28      	it	cs
 800d0d0:	461d      	movcs	r5, r3
 800d0d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	db02      	blt.n	800d0e0 <_svfprintf_r+0xf70>
 800d0da:	f018 0f01 	tst.w	r8, #1
 800d0de:	d00e      	beq.n	800d0fe <_svfprintf_r+0xf8e>
 800d0e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d0e4:	6023      	str	r3, [r4, #0]
 800d0e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0e8:	6063      	str	r3, [r4, #4]
 800d0ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d0ec:	4413      	add	r3, r2
 800d0ee:	9328      	str	r3, [sp, #160]	; 0xa0
 800d0f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	2b07      	cmp	r3, #7
 800d0f6:	9327      	str	r3, [sp, #156]	; 0x9c
 800d0f8:	f300 80db 	bgt.w	800d2b2 <_svfprintf_r+0x1142>
 800d0fc:	3408      	adds	r4, #8
 800d0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d100:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800d102:	eb0a 0203 	add.w	r2, sl, r3
 800d106:	1b9e      	subs	r6, r3, r6
 800d108:	1b52      	subs	r2, r2, r5
 800d10a:	4296      	cmp	r6, r2
 800d10c:	bfa8      	it	ge
 800d10e:	4616      	movge	r6, r2
 800d110:	2e00      	cmp	r6, #0
 800d112:	dd0b      	ble.n	800d12c <_svfprintf_r+0xfbc>
 800d114:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d116:	e9c4 5600 	strd	r5, r6, [r4]
 800d11a:	4433      	add	r3, r6
 800d11c:	9328      	str	r3, [sp, #160]	; 0xa0
 800d11e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d120:	3301      	adds	r3, #1
 800d122:	2b07      	cmp	r3, #7
 800d124:	9327      	str	r3, [sp, #156]	; 0x9c
 800d126:	f300 80ce 	bgt.w	800d2c6 <_svfprintf_r+0x1156>
 800d12a:	3408      	adds	r4, #8
 800d12c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d130:	2e00      	cmp	r6, #0
 800d132:	eba3 0505 	sub.w	r5, r3, r5
 800d136:	bfa8      	it	ge
 800d138:	1bad      	subge	r5, r5, r6
 800d13a:	2d00      	cmp	r5, #0
 800d13c:	f77f abec 	ble.w	800c918 <_svfprintf_r+0x7a8>
 800d140:	2710      	movs	r7, #16
 800d142:	4e66      	ldr	r6, [pc, #408]	; (800d2dc <_svfprintf_r+0x116c>)
 800d144:	2d10      	cmp	r5, #16
 800d146:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d14a:	f104 0108 	add.w	r1, r4, #8
 800d14e:	f103 0301 	add.w	r3, r3, #1
 800d152:	6026      	str	r6, [r4, #0]
 800d154:	f77f aece 	ble.w	800cef4 <_svfprintf_r+0xd84>
 800d158:	3210      	adds	r2, #16
 800d15a:	2b07      	cmp	r3, #7
 800d15c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d160:	6067      	str	r7, [r4, #4]
 800d162:	dd08      	ble.n	800d176 <_svfprintf_r+0x1006>
 800d164:	4659      	mov	r1, fp
 800d166:	4648      	mov	r0, r9
 800d168:	aa26      	add	r2, sp, #152	; 0x98
 800d16a:	f002 fb62 	bl	800f832 <__ssprint_r>
 800d16e:	2800      	cmp	r0, #0
 800d170:	f040 816e 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d174:	a929      	add	r1, sp, #164	; 0xa4
 800d176:	460c      	mov	r4, r1
 800d178:	3d10      	subs	r5, #16
 800d17a:	e7e3      	b.n	800d144 <_svfprintf_r+0xfd4>
 800d17c:	4659      	mov	r1, fp
 800d17e:	4648      	mov	r0, r9
 800d180:	aa26      	add	r2, sp, #152	; 0x98
 800d182:	f002 fb56 	bl	800f832 <__ssprint_r>
 800d186:	2800      	cmp	r0, #0
 800d188:	f040 8162 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d18c:	ac29      	add	r4, sp, #164	; 0xa4
 800d18e:	e771      	b.n	800d074 <_svfprintf_r+0xf04>
 800d190:	2010      	movs	r0, #16
 800d192:	2b07      	cmp	r3, #7
 800d194:	4402      	add	r2, r0
 800d196:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d19a:	6060      	str	r0, [r4, #4]
 800d19c:	dd08      	ble.n	800d1b0 <_svfprintf_r+0x1040>
 800d19e:	4659      	mov	r1, fp
 800d1a0:	4648      	mov	r0, r9
 800d1a2:	aa26      	add	r2, sp, #152	; 0x98
 800d1a4:	f002 fb45 	bl	800f832 <__ssprint_r>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	f040 8151 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d1ae:	a929      	add	r1, sp, #164	; 0xa4
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	3f10      	subs	r7, #16
 800d1b4:	e765      	b.n	800d082 <_svfprintf_r+0xf12>
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	e77d      	b.n	800d0b6 <_svfprintf_r+0xf46>
 800d1ba:	2e00      	cmp	r6, #0
 800d1bc:	d049      	beq.n	800d252 <_svfprintf_r+0x10e2>
 800d1be:	3e01      	subs	r6, #1
 800d1c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d1c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1c8:	6063      	str	r3, [r4, #4]
 800d1ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d1cc:	4413      	add	r3, r2
 800d1ce:	9328      	str	r3, [sp, #160]	; 0xa0
 800d1d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	2b07      	cmp	r3, #7
 800d1d6:	9327      	str	r3, [sp, #156]	; 0x9c
 800d1d8:	dc42      	bgt.n	800d260 <_svfprintf_r+0x10f0>
 800d1da:	3408      	adds	r4, #8
 800d1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1e0:	4453      	add	r3, sl
 800d1e2:	7812      	ldrb	r2, [r2, #0]
 800d1e4:	1b5b      	subs	r3, r3, r5
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	bfa8      	it	ge
 800d1ea:	461a      	movge	r2, r3
 800d1ec:	2a00      	cmp	r2, #0
 800d1ee:	9207      	str	r2, [sp, #28]
 800d1f0:	dd0a      	ble.n	800d208 <_svfprintf_r+0x1098>
 800d1f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d1f4:	e9c4 5200 	strd	r5, r2, [r4]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	9328      	str	r3, [sp, #160]	; 0xa0
 800d1fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d1fe:	3301      	adds	r3, #1
 800d200:	2b07      	cmp	r3, #7
 800d202:	9327      	str	r3, [sp, #156]	; 0x9c
 800d204:	dc36      	bgt.n	800d274 <_svfprintf_r+0x1104>
 800d206:	3408      	adds	r4, #8
 800d208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d20a:	781f      	ldrb	r7, [r3, #0]
 800d20c:	9b07      	ldr	r3, [sp, #28]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	bfa8      	it	ge
 800d212:	1aff      	subge	r7, r7, r3
 800d214:	2f00      	cmp	r7, #0
 800d216:	dd18      	ble.n	800d24a <_svfprintf_r+0x10da>
 800d218:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d21c:	482f      	ldr	r0, [pc, #188]	; (800d2dc <_svfprintf_r+0x116c>)
 800d21e:	2f10      	cmp	r7, #16
 800d220:	f103 0301 	add.w	r3, r3, #1
 800d224:	f104 0108 	add.w	r1, r4, #8
 800d228:	6020      	str	r0, [r4, #0]
 800d22a:	dc2d      	bgt.n	800d288 <_svfprintf_r+0x1118>
 800d22c:	443a      	add	r2, r7
 800d22e:	2b07      	cmp	r3, #7
 800d230:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d234:	6067      	str	r7, [r4, #4]
 800d236:	dd3a      	ble.n	800d2ae <_svfprintf_r+0x113e>
 800d238:	4659      	mov	r1, fp
 800d23a:	4648      	mov	r0, r9
 800d23c:	aa26      	add	r2, sp, #152	; 0x98
 800d23e:	f002 faf8 	bl	800f832 <__ssprint_r>
 800d242:	2800      	cmp	r0, #0
 800d244:	f040 8104 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d248:	ac29      	add	r4, sp, #164	; 0xa4
 800d24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	441d      	add	r5, r3
 800d250:	e735      	b.n	800d0be <_svfprintf_r+0xf4e>
 800d252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d254:	3b01      	subs	r3, #1
 800d256:	930d      	str	r3, [sp, #52]	; 0x34
 800d258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d25a:	3b01      	subs	r3, #1
 800d25c:	930c      	str	r3, [sp, #48]	; 0x30
 800d25e:	e7af      	b.n	800d1c0 <_svfprintf_r+0x1050>
 800d260:	4659      	mov	r1, fp
 800d262:	4648      	mov	r0, r9
 800d264:	aa26      	add	r2, sp, #152	; 0x98
 800d266:	f002 fae4 	bl	800f832 <__ssprint_r>
 800d26a:	2800      	cmp	r0, #0
 800d26c:	f040 80f0 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d270:	ac29      	add	r4, sp, #164	; 0xa4
 800d272:	e7b3      	b.n	800d1dc <_svfprintf_r+0x106c>
 800d274:	4659      	mov	r1, fp
 800d276:	4648      	mov	r0, r9
 800d278:	aa26      	add	r2, sp, #152	; 0x98
 800d27a:	f002 fada 	bl	800f832 <__ssprint_r>
 800d27e:	2800      	cmp	r0, #0
 800d280:	f040 80e6 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d284:	ac29      	add	r4, sp, #164	; 0xa4
 800d286:	e7bf      	b.n	800d208 <_svfprintf_r+0x1098>
 800d288:	2010      	movs	r0, #16
 800d28a:	2b07      	cmp	r3, #7
 800d28c:	4402      	add	r2, r0
 800d28e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d292:	6060      	str	r0, [r4, #4]
 800d294:	dd08      	ble.n	800d2a8 <_svfprintf_r+0x1138>
 800d296:	4659      	mov	r1, fp
 800d298:	4648      	mov	r0, r9
 800d29a:	aa26      	add	r2, sp, #152	; 0x98
 800d29c:	f002 fac9 	bl	800f832 <__ssprint_r>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	f040 80d5 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d2a6:	a929      	add	r1, sp, #164	; 0xa4
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	3f10      	subs	r7, #16
 800d2ac:	e7b4      	b.n	800d218 <_svfprintf_r+0x10a8>
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	e7cb      	b.n	800d24a <_svfprintf_r+0x10da>
 800d2b2:	4659      	mov	r1, fp
 800d2b4:	4648      	mov	r0, r9
 800d2b6:	aa26      	add	r2, sp, #152	; 0x98
 800d2b8:	f002 fabb 	bl	800f832 <__ssprint_r>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	f040 80c7 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d2c2:	ac29      	add	r4, sp, #164	; 0xa4
 800d2c4:	e71b      	b.n	800d0fe <_svfprintf_r+0xf8e>
 800d2c6:	4659      	mov	r1, fp
 800d2c8:	4648      	mov	r0, r9
 800d2ca:	aa26      	add	r2, sp, #152	; 0x98
 800d2cc:	f002 fab1 	bl	800f832 <__ssprint_r>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	f040 80bd 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d2d6:	ac29      	add	r4, sp, #164	; 0xa4
 800d2d8:	e728      	b.n	800d12c <_svfprintf_r+0xfbc>
 800d2da:	bf00      	nop
 800d2dc:	0805fd44 	.word	0x0805fd44
 800d2e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d2e4:	2a01      	cmp	r2, #1
 800d2e6:	f107 0701 	add.w	r7, r7, #1
 800d2ea:	f103 0301 	add.w	r3, r3, #1
 800d2ee:	f104 0508 	add.w	r5, r4, #8
 800d2f2:	dc02      	bgt.n	800d2fa <_svfprintf_r+0x118a>
 800d2f4:	f018 0f01 	tst.w	r8, #1
 800d2f8:	d07e      	beq.n	800d3f8 <_svfprintf_r+0x1288>
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	2b07      	cmp	r3, #7
 800d2fe:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800d302:	f8c4 a000 	str.w	sl, [r4]
 800d306:	6062      	str	r2, [r4, #4]
 800d308:	dd08      	ble.n	800d31c <_svfprintf_r+0x11ac>
 800d30a:	4659      	mov	r1, fp
 800d30c:	4648      	mov	r0, r9
 800d30e:	aa26      	add	r2, sp, #152	; 0x98
 800d310:	f002 fa8f 	bl	800f832 <__ssprint_r>
 800d314:	2800      	cmp	r0, #0
 800d316:	f040 809b 	bne.w	800d450 <_svfprintf_r+0x12e0>
 800d31a:	ad29      	add	r5, sp, #164	; 0xa4
 800d31c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d31e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d320:	602b      	str	r3, [r5, #0]
 800d322:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d324:	606b      	str	r3, [r5, #4]
 800d326:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d328:	4413      	add	r3, r2
 800d32a:	9328      	str	r3, [sp, #160]	; 0xa0
 800d32c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d32e:	3301      	adds	r3, #1
 800d330:	2b07      	cmp	r3, #7
 800d332:	9327      	str	r3, [sp, #156]	; 0x9c
 800d334:	dc32      	bgt.n	800d39c <_svfprintf_r+0x122c>
 800d336:	3508      	adds	r5, #8
 800d338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d33a:	2200      	movs	r2, #0
 800d33c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d340:	1e5c      	subs	r4, r3, #1
 800d342:	2300      	movs	r3, #0
 800d344:	f7f3 fb9c 	bl	8000a80 <__aeabi_dcmpeq>
 800d348:	2800      	cmp	r0, #0
 800d34a:	d130      	bne.n	800d3ae <_svfprintf_r+0x123e>
 800d34c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800d34e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d352:	3101      	adds	r1, #1
 800d354:	3b01      	subs	r3, #1
 800d356:	f10a 0001 	add.w	r0, sl, #1
 800d35a:	4413      	add	r3, r2
 800d35c:	2907      	cmp	r1, #7
 800d35e:	e9c5 0400 	strd	r0, r4, [r5]
 800d362:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 800d366:	dd50      	ble.n	800d40a <_svfprintf_r+0x129a>
 800d368:	4659      	mov	r1, fp
 800d36a:	4648      	mov	r0, r9
 800d36c:	aa26      	add	r2, sp, #152	; 0x98
 800d36e:	f002 fa60 	bl	800f832 <__ssprint_r>
 800d372:	2800      	cmp	r0, #0
 800d374:	d16c      	bne.n	800d450 <_svfprintf_r+0x12e0>
 800d376:	ad29      	add	r5, sp, #164	; 0xa4
 800d378:	ab22      	add	r3, sp, #136	; 0x88
 800d37a:	602b      	str	r3, [r5, #0]
 800d37c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d37e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d380:	606b      	str	r3, [r5, #4]
 800d382:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d384:	4413      	add	r3, r2
 800d386:	9328      	str	r3, [sp, #160]	; 0xa0
 800d388:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d38a:	3301      	adds	r3, #1
 800d38c:	2b07      	cmp	r3, #7
 800d38e:	9327      	str	r3, [sp, #156]	; 0x9c
 800d390:	f73f adb7 	bgt.w	800cf02 <_svfprintf_r+0xd92>
 800d394:	f105 0408 	add.w	r4, r5, #8
 800d398:	f7ff babe 	b.w	800c918 <_svfprintf_r+0x7a8>
 800d39c:	4659      	mov	r1, fp
 800d39e:	4648      	mov	r0, r9
 800d3a0:	aa26      	add	r2, sp, #152	; 0x98
 800d3a2:	f002 fa46 	bl	800f832 <__ssprint_r>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d152      	bne.n	800d450 <_svfprintf_r+0x12e0>
 800d3aa:	ad29      	add	r5, sp, #164	; 0xa4
 800d3ac:	e7c4      	b.n	800d338 <_svfprintf_r+0x11c8>
 800d3ae:	2c00      	cmp	r4, #0
 800d3b0:	dde2      	ble.n	800d378 <_svfprintf_r+0x1208>
 800d3b2:	2710      	movs	r7, #16
 800d3b4:	4e56      	ldr	r6, [pc, #344]	; (800d510 <_svfprintf_r+0x13a0>)
 800d3b6:	2c10      	cmp	r4, #16
 800d3b8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d3bc:	f105 0108 	add.w	r1, r5, #8
 800d3c0:	f103 0301 	add.w	r3, r3, #1
 800d3c4:	602e      	str	r6, [r5, #0]
 800d3c6:	dc07      	bgt.n	800d3d8 <_svfprintf_r+0x1268>
 800d3c8:	606c      	str	r4, [r5, #4]
 800d3ca:	2b07      	cmp	r3, #7
 800d3cc:	4414      	add	r4, r2
 800d3ce:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800d3d2:	dcc9      	bgt.n	800d368 <_svfprintf_r+0x11f8>
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	e7cf      	b.n	800d378 <_svfprintf_r+0x1208>
 800d3d8:	3210      	adds	r2, #16
 800d3da:	2b07      	cmp	r3, #7
 800d3dc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d3e0:	606f      	str	r7, [r5, #4]
 800d3e2:	dd06      	ble.n	800d3f2 <_svfprintf_r+0x1282>
 800d3e4:	4659      	mov	r1, fp
 800d3e6:	4648      	mov	r0, r9
 800d3e8:	aa26      	add	r2, sp, #152	; 0x98
 800d3ea:	f002 fa22 	bl	800f832 <__ssprint_r>
 800d3ee:	bb78      	cbnz	r0, 800d450 <_svfprintf_r+0x12e0>
 800d3f0:	a929      	add	r1, sp, #164	; 0xa4
 800d3f2:	460d      	mov	r5, r1
 800d3f4:	3c10      	subs	r4, #16
 800d3f6:	e7de      	b.n	800d3b6 <_svfprintf_r+0x1246>
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	2b07      	cmp	r3, #7
 800d3fc:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800d400:	f8c4 a000 	str.w	sl, [r4]
 800d404:	6062      	str	r2, [r4, #4]
 800d406:	ddb7      	ble.n	800d378 <_svfprintf_r+0x1208>
 800d408:	e7ae      	b.n	800d368 <_svfprintf_r+0x11f8>
 800d40a:	3508      	adds	r5, #8
 800d40c:	e7b4      	b.n	800d378 <_svfprintf_r+0x1208>
 800d40e:	460c      	mov	r4, r1
 800d410:	f7ff ba82 	b.w	800c918 <_svfprintf_r+0x7a8>
 800d414:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800d418:	1a9d      	subs	r5, r3, r2
 800d41a:	2d00      	cmp	r5, #0
 800d41c:	f77f aa80 	ble.w	800c920 <_svfprintf_r+0x7b0>
 800d420:	2710      	movs	r7, #16
 800d422:	4e3c      	ldr	r6, [pc, #240]	; (800d514 <_svfprintf_r+0x13a4>)
 800d424:	2d10      	cmp	r5, #16
 800d426:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d42a:	6026      	str	r6, [r4, #0]
 800d42c:	f103 0301 	add.w	r3, r3, #1
 800d430:	dc18      	bgt.n	800d464 <_svfprintf_r+0x12f4>
 800d432:	6065      	str	r5, [r4, #4]
 800d434:	2b07      	cmp	r3, #7
 800d436:	4415      	add	r5, r2
 800d438:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d43c:	f77f aa70 	ble.w	800c920 <_svfprintf_r+0x7b0>
 800d440:	4659      	mov	r1, fp
 800d442:	4648      	mov	r0, r9
 800d444:	aa26      	add	r2, sp, #152	; 0x98
 800d446:	f002 f9f4 	bl	800f832 <__ssprint_r>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	f43f aa68 	beq.w	800c920 <_svfprintf_r+0x7b0>
 800d450:	9b08      	ldr	r3, [sp, #32]
 800d452:	2b00      	cmp	r3, #0
 800d454:	f43f a88d 	beq.w	800c572 <_svfprintf_r+0x402>
 800d458:	4619      	mov	r1, r3
 800d45a:	4648      	mov	r0, r9
 800d45c:	f001 f8a2 	bl	800e5a4 <_free_r>
 800d460:	f7ff b887 	b.w	800c572 <_svfprintf_r+0x402>
 800d464:	3210      	adds	r2, #16
 800d466:	2b07      	cmp	r3, #7
 800d468:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d46c:	6067      	str	r7, [r4, #4]
 800d46e:	dc02      	bgt.n	800d476 <_svfprintf_r+0x1306>
 800d470:	3408      	adds	r4, #8
 800d472:	3d10      	subs	r5, #16
 800d474:	e7d6      	b.n	800d424 <_svfprintf_r+0x12b4>
 800d476:	4659      	mov	r1, fp
 800d478:	4648      	mov	r0, r9
 800d47a:	aa26      	add	r2, sp, #152	; 0x98
 800d47c:	f002 f9d9 	bl	800f832 <__ssprint_r>
 800d480:	2800      	cmp	r0, #0
 800d482:	d1e5      	bne.n	800d450 <_svfprintf_r+0x12e0>
 800d484:	ac29      	add	r4, sp, #164	; 0xa4
 800d486:	e7f4      	b.n	800d472 <_svfprintf_r+0x1302>
 800d488:	4648      	mov	r0, r9
 800d48a:	9908      	ldr	r1, [sp, #32]
 800d48c:	f001 f88a 	bl	800e5a4 <_free_r>
 800d490:	f7ff ba5e 	b.w	800c950 <_svfprintf_r+0x7e0>
 800d494:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d496:	2b00      	cmp	r3, #0
 800d498:	f43f a86b 	beq.w	800c572 <_svfprintf_r+0x402>
 800d49c:	4659      	mov	r1, fp
 800d49e:	4648      	mov	r0, r9
 800d4a0:	aa26      	add	r2, sp, #152	; 0x98
 800d4a2:	f002 f9c6 	bl	800f832 <__ssprint_r>
 800d4a6:	f7ff b864 	b.w	800c572 <_svfprintf_r+0x402>
 800d4aa:	ea56 0207 	orrs.w	r2, r6, r7
 800d4ae:	f8cd 8020 	str.w	r8, [sp, #32]
 800d4b2:	f43f ab70 	beq.w	800cb96 <_svfprintf_r+0xa26>
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	f43f ac0d 	beq.w	800ccd6 <_svfprintf_r+0xb66>
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800d4c2:	f43f ac55 	beq.w	800cd70 <_svfprintf_r+0xc00>
 800d4c6:	f006 0307 	and.w	r3, r6, #7
 800d4ca:	08f6      	lsrs	r6, r6, #3
 800d4cc:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800d4d0:	08ff      	lsrs	r7, r7, #3
 800d4d2:	3330      	adds	r3, #48	; 0x30
 800d4d4:	ea56 0107 	orrs.w	r1, r6, r7
 800d4d8:	4652      	mov	r2, sl
 800d4da:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800d4de:	d1f2      	bne.n	800d4c6 <_svfprintf_r+0x1356>
 800d4e0:	9908      	ldr	r1, [sp, #32]
 800d4e2:	07c9      	lsls	r1, r1, #31
 800d4e4:	d506      	bpl.n	800d4f4 <_svfprintf_r+0x1384>
 800d4e6:	2b30      	cmp	r3, #48	; 0x30
 800d4e8:	d004      	beq.n	800d4f4 <_svfprintf_r+0x1384>
 800d4ea:	2330      	movs	r3, #48	; 0x30
 800d4ec:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800d4f0:	f1a2 0a02 	sub.w	sl, r2, #2
 800d4f4:	ab52      	add	r3, sp, #328	; 0x148
 800d4f6:	eba3 030a 	sub.w	r3, r3, sl
 800d4fa:	9f07      	ldr	r7, [sp, #28]
 800d4fc:	9307      	str	r3, [sp, #28]
 800d4fe:	2300      	movs	r3, #0
 800d500:	461e      	mov	r6, r3
 800d502:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d506:	9308      	str	r3, [sp, #32]
 800d508:	461d      	mov	r5, r3
 800d50a:	930c      	str	r3, [sp, #48]	; 0x30
 800d50c:	f7ff b946 	b.w	800c79c <_svfprintf_r+0x62c>
 800d510:	0805fd44 	.word	0x0805fd44
 800d514:	0805fd34 	.word	0x0805fd34

0800d518 <sysconf>:
 800d518:	2808      	cmp	r0, #8
 800d51a:	b508      	push	{r3, lr}
 800d51c:	d006      	beq.n	800d52c <sysconf+0x14>
 800d51e:	f7fb fe27 	bl	8009170 <__errno>
 800d522:	2316      	movs	r3, #22
 800d524:	6003      	str	r3, [r0, #0]
 800d526:	f04f 30ff 	mov.w	r0, #4294967295
 800d52a:	bd08      	pop	{r3, pc}
 800d52c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d530:	e7fb      	b.n	800d52a <sysconf+0x12>

0800d532 <__submore>:
 800d532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d536:	460c      	mov	r4, r1
 800d538:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800d53a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d53e:	4299      	cmp	r1, r3
 800d540:	d11b      	bne.n	800d57a <__submore+0x48>
 800d542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d546:	f7fd f8ab 	bl	800a6a0 <_malloc_r>
 800d54a:	b918      	cbnz	r0, 800d554 <__submore+0x22>
 800d54c:	f04f 30ff 	mov.w	r0, #4294967295
 800d550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d558:	6363      	str	r3, [r4, #52]	; 0x34
 800d55a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d55e:	6320      	str	r0, [r4, #48]	; 0x30
 800d560:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d564:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d568:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d56c:	7043      	strb	r3, [r0, #1]
 800d56e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d572:	7003      	strb	r3, [r0, #0]
 800d574:	6020      	str	r0, [r4, #0]
 800d576:	2000      	movs	r0, #0
 800d578:	e7ea      	b.n	800d550 <__submore+0x1e>
 800d57a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800d57c:	0077      	lsls	r7, r6, #1
 800d57e:	463a      	mov	r2, r7
 800d580:	f7fd fb1c 	bl	800abbc <_realloc_r>
 800d584:	4605      	mov	r5, r0
 800d586:	2800      	cmp	r0, #0
 800d588:	d0e0      	beq.n	800d54c <__submore+0x1a>
 800d58a:	eb00 0806 	add.w	r8, r0, r6
 800d58e:	4601      	mov	r1, r0
 800d590:	4632      	mov	r2, r6
 800d592:	4640      	mov	r0, r8
 800d594:	f001 fc5a 	bl	800ee4c <memcpy>
 800d598:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800d59c:	f8c4 8000 	str.w	r8, [r4]
 800d5a0:	e7e9      	b.n	800d576 <__submore+0x44>

0800d5a2 <__ascii_wctomb>:
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	b141      	cbz	r1, 800d5ba <__ascii_wctomb+0x18>
 800d5a8:	2aff      	cmp	r2, #255	; 0xff
 800d5aa:	d904      	bls.n	800d5b6 <__ascii_wctomb+0x14>
 800d5ac:	228a      	movs	r2, #138	; 0x8a
 800d5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	4770      	bx	lr
 800d5b6:	2001      	movs	r0, #1
 800d5b8:	700a      	strb	r2, [r1, #0]
 800d5ba:	4770      	bx	lr

0800d5bc <__register_exitproc>:
 800d5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d638 <__register_exitproc+0x7c>
 800d5c4:	4606      	mov	r6, r0
 800d5c6:	f8da 0000 	ldr.w	r0, [sl]
 800d5ca:	4698      	mov	r8, r3
 800d5cc:	460f      	mov	r7, r1
 800d5ce:	4691      	mov	r9, r2
 800d5d0:	f7fd f842 	bl	800a658 <__retarget_lock_acquire_recursive>
 800d5d4:	4b19      	ldr	r3, [pc, #100]	; (800d63c <__register_exitproc+0x80>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800d5dc:	b91c      	cbnz	r4, 800d5e6 <__register_exitproc+0x2a>
 800d5de:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800d5e2:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800d5e6:	6865      	ldr	r5, [r4, #4]
 800d5e8:	f8da 0000 	ldr.w	r0, [sl]
 800d5ec:	2d1f      	cmp	r5, #31
 800d5ee:	dd05      	ble.n	800d5fc <__register_exitproc+0x40>
 800d5f0:	f7fd f833 	bl	800a65a <__retarget_lock_release_recursive>
 800d5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5fc:	b19e      	cbz	r6, 800d626 <__register_exitproc+0x6a>
 800d5fe:	2201      	movs	r2, #1
 800d600:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800d604:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800d608:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800d60c:	40aa      	lsls	r2, r5
 800d60e:	4313      	orrs	r3, r2
 800d610:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800d614:	2e02      	cmp	r6, #2
 800d616:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800d61a:	bf02      	ittt	eq
 800d61c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800d620:	4313      	orreq	r3, r2
 800d622:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800d626:	1c6b      	adds	r3, r5, #1
 800d628:	3502      	adds	r5, #2
 800d62a:	6063      	str	r3, [r4, #4]
 800d62c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800d630:	f7fd f813 	bl	800a65a <__retarget_lock_release_recursive>
 800d634:	2000      	movs	r0, #0
 800d636:	e7df      	b.n	800d5f8 <__register_exitproc+0x3c>
 800d638:	20000478 	.word	0x20000478
 800d63c:	0805fb78 	.word	0x0805fb78

0800d640 <quorem>:
 800d640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d644:	6903      	ldr	r3, [r0, #16]
 800d646:	690c      	ldr	r4, [r1, #16]
 800d648:	4607      	mov	r7, r0
 800d64a:	42a3      	cmp	r3, r4
 800d64c:	f2c0 8082 	blt.w	800d754 <quorem+0x114>
 800d650:	3c01      	subs	r4, #1
 800d652:	f100 0514 	add.w	r5, r0, #20
 800d656:	f101 0814 	add.w	r8, r1, #20
 800d65a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d65e:	9301      	str	r3, [sp, #4]
 800d660:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d668:	3301      	adds	r3, #1
 800d66a:	429a      	cmp	r2, r3
 800d66c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d670:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d678:	d331      	bcc.n	800d6de <quorem+0x9e>
 800d67a:	f04f 0e00 	mov.w	lr, #0
 800d67e:	4640      	mov	r0, r8
 800d680:	46ac      	mov	ip, r5
 800d682:	46f2      	mov	sl, lr
 800d684:	f850 2b04 	ldr.w	r2, [r0], #4
 800d688:	b293      	uxth	r3, r2
 800d68a:	fb06 e303 	mla	r3, r6, r3, lr
 800d68e:	0c12      	lsrs	r2, r2, #16
 800d690:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d694:	b29b      	uxth	r3, r3
 800d696:	fb06 e202 	mla	r2, r6, r2, lr
 800d69a:	ebaa 0303 	sub.w	r3, sl, r3
 800d69e:	f8dc a000 	ldr.w	sl, [ip]
 800d6a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d6a6:	fa1f fa8a 	uxth.w	sl, sl
 800d6aa:	4453      	add	r3, sl
 800d6ac:	f8dc a000 	ldr.w	sl, [ip]
 800d6b0:	b292      	uxth	r2, r2
 800d6b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d6b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6c0:	4581      	cmp	r9, r0
 800d6c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d6c6:	f84c 3b04 	str.w	r3, [ip], #4
 800d6ca:	d2db      	bcs.n	800d684 <quorem+0x44>
 800d6cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800d6d0:	b92b      	cbnz	r3, 800d6de <quorem+0x9e>
 800d6d2:	9b01      	ldr	r3, [sp, #4]
 800d6d4:	3b04      	subs	r3, #4
 800d6d6:	429d      	cmp	r5, r3
 800d6d8:	461a      	mov	r2, r3
 800d6da:	d32f      	bcc.n	800d73c <quorem+0xfc>
 800d6dc:	613c      	str	r4, [r7, #16]
 800d6de:	4638      	mov	r0, r7
 800d6e0:	f001 fe56 	bl	800f390 <__mcmp>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	db25      	blt.n	800d734 <quorem+0xf4>
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	f04f 0c00 	mov.w	ip, #0
 800d6ee:	3601      	adds	r6, #1
 800d6f0:	f858 1b04 	ldr.w	r1, [r8], #4
 800d6f4:	f8d0 e000 	ldr.w	lr, [r0]
 800d6f8:	b28b      	uxth	r3, r1
 800d6fa:	ebac 0303 	sub.w	r3, ip, r3
 800d6fe:	fa1f f28e 	uxth.w	r2, lr
 800d702:	4413      	add	r3, r2
 800d704:	0c0a      	lsrs	r2, r1, #16
 800d706:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d70a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d70e:	b29b      	uxth	r3, r3
 800d710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d714:	45c1      	cmp	r9, r8
 800d716:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d71a:	f840 3b04 	str.w	r3, [r0], #4
 800d71e:	d2e7      	bcs.n	800d6f0 <quorem+0xb0>
 800d720:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d724:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d728:	b922      	cbnz	r2, 800d734 <quorem+0xf4>
 800d72a:	3b04      	subs	r3, #4
 800d72c:	429d      	cmp	r5, r3
 800d72e:	461a      	mov	r2, r3
 800d730:	d30a      	bcc.n	800d748 <quorem+0x108>
 800d732:	613c      	str	r4, [r7, #16]
 800d734:	4630      	mov	r0, r6
 800d736:	b003      	add	sp, #12
 800d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73c:	6812      	ldr	r2, [r2, #0]
 800d73e:	3b04      	subs	r3, #4
 800d740:	2a00      	cmp	r2, #0
 800d742:	d1cb      	bne.n	800d6dc <quorem+0x9c>
 800d744:	3c01      	subs	r4, #1
 800d746:	e7c6      	b.n	800d6d6 <quorem+0x96>
 800d748:	6812      	ldr	r2, [r2, #0]
 800d74a:	3b04      	subs	r3, #4
 800d74c:	2a00      	cmp	r2, #0
 800d74e:	d1f0      	bne.n	800d732 <quorem+0xf2>
 800d750:	3c01      	subs	r4, #1
 800d752:	e7eb      	b.n	800d72c <quorem+0xec>
 800d754:	2000      	movs	r0, #0
 800d756:	e7ee      	b.n	800d736 <quorem+0xf6>

0800d758 <_dtoa_r>:
 800d758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d75c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800d75e:	b097      	sub	sp, #92	; 0x5c
 800d760:	4681      	mov	r9, r0
 800d762:	4614      	mov	r4, r2
 800d764:	461d      	mov	r5, r3
 800d766:	4692      	mov	sl, r2
 800d768:	469b      	mov	fp, r3
 800d76a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800d76c:	b149      	cbz	r1, 800d782 <_dtoa_r+0x2a>
 800d76e:	2301      	movs	r3, #1
 800d770:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d772:	4093      	lsls	r3, r2
 800d774:	608b      	str	r3, [r1, #8]
 800d776:	604a      	str	r2, [r1, #4]
 800d778:	f001 fbb5 	bl	800eee6 <_Bfree>
 800d77c:	2300      	movs	r3, #0
 800d77e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800d782:	1e2b      	subs	r3, r5, #0
 800d784:	bfad      	iteet	ge
 800d786:	2300      	movge	r3, #0
 800d788:	2201      	movlt	r2, #1
 800d78a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d78e:	6033      	strge	r3, [r6, #0]
 800d790:	4b9f      	ldr	r3, [pc, #636]	; (800da10 <_dtoa_r+0x2b8>)
 800d792:	bfb8      	it	lt
 800d794:	6032      	strlt	r2, [r6, #0]
 800d796:	ea33 030b 	bics.w	r3, r3, fp
 800d79a:	d119      	bne.n	800d7d0 <_dtoa_r+0x78>
 800d79c:	f242 730f 	movw	r3, #9999	; 0x270f
 800d7a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d7a2:	6013      	str	r3, [r2, #0]
 800d7a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7a8:	4323      	orrs	r3, r4
 800d7aa:	f000 8574 	beq.w	800e296 <_dtoa_r+0xb3e>
 800d7ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d7b0:	b90b      	cbnz	r3, 800d7b6 <_dtoa_r+0x5e>
 800d7b2:	4b98      	ldr	r3, [pc, #608]	; (800da14 <_dtoa_r+0x2bc>)
 800d7b4:	e020      	b.n	800d7f8 <_dtoa_r+0xa0>
 800d7b6:	4b97      	ldr	r3, [pc, #604]	; (800da14 <_dtoa_r+0x2bc>)
 800d7b8:	9304      	str	r3, [sp, #16]
 800d7ba:	3303      	adds	r3, #3
 800d7bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	9804      	ldr	r0, [sp, #16]
 800d7c2:	b017      	add	sp, #92	; 0x5c
 800d7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c8:	4b93      	ldr	r3, [pc, #588]	; (800da18 <_dtoa_r+0x2c0>)
 800d7ca:	9304      	str	r3, [sp, #16]
 800d7cc:	3308      	adds	r3, #8
 800d7ce:	e7f5      	b.n	800d7bc <_dtoa_r+0x64>
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4650      	mov	r0, sl
 800d7d6:	4659      	mov	r1, fp
 800d7d8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800d7dc:	f7f3 f950 	bl	8000a80 <__aeabi_dcmpeq>
 800d7e0:	4607      	mov	r7, r0
 800d7e2:	b158      	cbz	r0, 800d7fc <_dtoa_r+0xa4>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d7e8:	6013      	str	r3, [r2, #0]
 800d7ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f000 854f 	beq.w	800e290 <_dtoa_r+0xb38>
 800d7f2:	488a      	ldr	r0, [pc, #552]	; (800da1c <_dtoa_r+0x2c4>)
 800d7f4:	6018      	str	r0, [r3, #0]
 800d7f6:	1e43      	subs	r3, r0, #1
 800d7f8:	9304      	str	r3, [sp, #16]
 800d7fa:	e7e1      	b.n	800d7c0 <_dtoa_r+0x68>
 800d7fc:	ab14      	add	r3, sp, #80	; 0x50
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	ab15      	add	r3, sp, #84	; 0x54
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	4648      	mov	r0, r9
 800d806:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d80a:	f001 fee3 	bl	800f5d4 <__d2b>
 800d80e:	f3cb 560a 	ubfx	r6, fp, #20, #11
 800d812:	9003      	str	r0, [sp, #12]
 800d814:	2e00      	cmp	r6, #0
 800d816:	d07c      	beq.n	800d912 <_dtoa_r+0x1ba>
 800d818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d81c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d81e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800d822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d826:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d82a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d82e:	9713      	str	r7, [sp, #76]	; 0x4c
 800d830:	2200      	movs	r2, #0
 800d832:	4b7b      	ldr	r3, [pc, #492]	; (800da20 <_dtoa_r+0x2c8>)
 800d834:	f7f2 fd04 	bl	8000240 <__aeabi_dsub>
 800d838:	a36f      	add	r3, pc, #444	; (adr r3, 800d9f8 <_dtoa_r+0x2a0>)
 800d83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83e:	f7f2 feb7 	bl	80005b0 <__aeabi_dmul>
 800d842:	a36f      	add	r3, pc, #444	; (adr r3, 800da00 <_dtoa_r+0x2a8>)
 800d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d848:	f7f2 fcfc 	bl	8000244 <__adddf3>
 800d84c:	4604      	mov	r4, r0
 800d84e:	4630      	mov	r0, r6
 800d850:	460d      	mov	r5, r1
 800d852:	f7f2 fe43 	bl	80004dc <__aeabi_i2d>
 800d856:	a36c      	add	r3, pc, #432	; (adr r3, 800da08 <_dtoa_r+0x2b0>)
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	f7f2 fea8 	bl	80005b0 <__aeabi_dmul>
 800d860:	4602      	mov	r2, r0
 800d862:	460b      	mov	r3, r1
 800d864:	4620      	mov	r0, r4
 800d866:	4629      	mov	r1, r5
 800d868:	f7f2 fcec 	bl	8000244 <__adddf3>
 800d86c:	4604      	mov	r4, r0
 800d86e:	460d      	mov	r5, r1
 800d870:	f7f3 f94e 	bl	8000b10 <__aeabi_d2iz>
 800d874:	2200      	movs	r2, #0
 800d876:	4680      	mov	r8, r0
 800d878:	2300      	movs	r3, #0
 800d87a:	4620      	mov	r0, r4
 800d87c:	4629      	mov	r1, r5
 800d87e:	f7f3 f909 	bl	8000a94 <__aeabi_dcmplt>
 800d882:	b148      	cbz	r0, 800d898 <_dtoa_r+0x140>
 800d884:	4640      	mov	r0, r8
 800d886:	f7f2 fe29 	bl	80004dc <__aeabi_i2d>
 800d88a:	4622      	mov	r2, r4
 800d88c:	462b      	mov	r3, r5
 800d88e:	f7f3 f8f7 	bl	8000a80 <__aeabi_dcmpeq>
 800d892:	b908      	cbnz	r0, 800d898 <_dtoa_r+0x140>
 800d894:	f108 38ff 	add.w	r8, r8, #4294967295
 800d898:	f1b8 0f16 	cmp.w	r8, #22
 800d89c:	d856      	bhi.n	800d94c <_dtoa_r+0x1f4>
 800d89e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d8a2:	4b60      	ldr	r3, [pc, #384]	; (800da24 <_dtoa_r+0x2cc>)
 800d8a4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	f7f3 f8f2 	bl	8000a94 <__aeabi_dcmplt>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d04d      	beq.n	800d950 <_dtoa_r+0x1f8>
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d8ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8be:	1b9e      	subs	r6, r3, r6
 800d8c0:	1e73      	subs	r3, r6, #1
 800d8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c4:	bf49      	itett	mi
 800d8c6:	f1c6 0301 	rsbmi	r3, r6, #1
 800d8ca:	2300      	movpl	r3, #0
 800d8cc:	9306      	strmi	r3, [sp, #24]
 800d8ce:	2300      	movmi	r3, #0
 800d8d0:	bf54      	ite	pl
 800d8d2:	9306      	strpl	r3, [sp, #24]
 800d8d4:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d8d6:	f1b8 0f00 	cmp.w	r8, #0
 800d8da:	db3b      	blt.n	800d954 <_dtoa_r+0x1fc>
 800d8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8de:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d8e2:	4443      	add	r3, r8
 800d8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	930a      	str	r3, [sp, #40]	; 0x28
 800d8ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d8ec:	2b09      	cmp	r3, #9
 800d8ee:	d86b      	bhi.n	800d9c8 <_dtoa_r+0x270>
 800d8f0:	2b05      	cmp	r3, #5
 800d8f2:	bfc4      	itt	gt
 800d8f4:	3b04      	subgt	r3, #4
 800d8f6:	9320      	strgt	r3, [sp, #128]	; 0x80
 800d8f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d8fa:	bfc8      	it	gt
 800d8fc:	2400      	movgt	r4, #0
 800d8fe:	f1a3 0302 	sub.w	r3, r3, #2
 800d902:	bfd8      	it	le
 800d904:	2401      	movle	r4, #1
 800d906:	2b03      	cmp	r3, #3
 800d908:	d869      	bhi.n	800d9de <_dtoa_r+0x286>
 800d90a:	e8df f003 	tbb	[pc, r3]
 800d90e:	3a2d      	.short	0x3a2d
 800d910:	5b38      	.short	0x5b38
 800d912:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 800d916:	441e      	add	r6, r3
 800d918:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800d91c:	2b20      	cmp	r3, #32
 800d91e:	bfc3      	ittte	gt
 800d920:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d924:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
 800d928:	fa0b f303 	lslgt.w	r3, fp, r3
 800d92c:	f1c3 0320 	rsble	r3, r3, #32
 800d930:	bfc6      	itte	gt
 800d932:	fa24 f000 	lsrgt.w	r0, r4, r0
 800d936:	4318      	orrgt	r0, r3
 800d938:	fa04 f003 	lslle.w	r0, r4, r3
 800d93c:	f7f2 fdbe 	bl	80004bc <__aeabi_ui2d>
 800d940:	2301      	movs	r3, #1
 800d942:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d946:	3e01      	subs	r6, #1
 800d948:	9313      	str	r3, [sp, #76]	; 0x4c
 800d94a:	e771      	b.n	800d830 <_dtoa_r+0xd8>
 800d94c:	2301      	movs	r3, #1
 800d94e:	e7b4      	b.n	800d8ba <_dtoa_r+0x162>
 800d950:	900f      	str	r0, [sp, #60]	; 0x3c
 800d952:	e7b3      	b.n	800d8bc <_dtoa_r+0x164>
 800d954:	9b06      	ldr	r3, [sp, #24]
 800d956:	eba3 0308 	sub.w	r3, r3, r8
 800d95a:	9306      	str	r3, [sp, #24]
 800d95c:	f1c8 0300 	rsb	r3, r8, #0
 800d960:	930a      	str	r3, [sp, #40]	; 0x28
 800d962:	2300      	movs	r3, #0
 800d964:	930e      	str	r3, [sp, #56]	; 0x38
 800d966:	e7c0      	b.n	800d8ea <_dtoa_r+0x192>
 800d968:	2300      	movs	r3, #0
 800d96a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d96c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d96e:	2b00      	cmp	r3, #0
 800d970:	dc38      	bgt.n	800d9e4 <_dtoa_r+0x28c>
 800d972:	2301      	movs	r3, #1
 800d974:	461a      	mov	r2, r3
 800d976:	9308      	str	r3, [sp, #32]
 800d978:	9305      	str	r3, [sp, #20]
 800d97a:	9221      	str	r2, [sp, #132]	; 0x84
 800d97c:	e00b      	b.n	800d996 <_dtoa_r+0x23e>
 800d97e:	2301      	movs	r3, #1
 800d980:	e7f3      	b.n	800d96a <_dtoa_r+0x212>
 800d982:	2300      	movs	r3, #0
 800d984:	930b      	str	r3, [sp, #44]	; 0x2c
 800d986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d988:	4443      	add	r3, r8
 800d98a:	9308      	str	r3, [sp, #32]
 800d98c:	3301      	adds	r3, #1
 800d98e:	2b01      	cmp	r3, #1
 800d990:	9305      	str	r3, [sp, #20]
 800d992:	bfb8      	it	lt
 800d994:	2301      	movlt	r3, #1
 800d996:	2200      	movs	r2, #0
 800d998:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 800d99c:	2204      	movs	r2, #4
 800d99e:	f102 0014 	add.w	r0, r2, #20
 800d9a2:	4298      	cmp	r0, r3
 800d9a4:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 800d9a8:	d920      	bls.n	800d9ec <_dtoa_r+0x294>
 800d9aa:	4648      	mov	r0, r9
 800d9ac:	f001 fa76 	bl	800ee9c <_Balloc>
 800d9b0:	9004      	str	r0, [sp, #16]
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d13c      	bne.n	800da30 <_dtoa_r+0x2d8>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9bc:	4b1a      	ldr	r3, [pc, #104]	; (800da28 <_dtoa_r+0x2d0>)
 800d9be:	481b      	ldr	r0, [pc, #108]	; (800da2c <_dtoa_r+0x2d4>)
 800d9c0:	f001 ffb2 	bl	800f928 <__assert_func>
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e7dd      	b.n	800d984 <_dtoa_r+0x22c>
 800d9c8:	2401      	movs	r4, #1
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	940b      	str	r4, [sp, #44]	; 0x2c
 800d9ce:	9320      	str	r3, [sp, #128]	; 0x80
 800d9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	9308      	str	r3, [sp, #32]
 800d9d8:	9305      	str	r3, [sp, #20]
 800d9da:	2312      	movs	r3, #18
 800d9dc:	e7cd      	b.n	800d97a <_dtoa_r+0x222>
 800d9de:	2301      	movs	r3, #1
 800d9e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9e2:	e7f5      	b.n	800d9d0 <_dtoa_r+0x278>
 800d9e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9e6:	9308      	str	r3, [sp, #32]
 800d9e8:	9305      	str	r3, [sp, #20]
 800d9ea:	e7d4      	b.n	800d996 <_dtoa_r+0x23e>
 800d9ec:	3101      	adds	r1, #1
 800d9ee:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800d9f2:	0052      	lsls	r2, r2, #1
 800d9f4:	e7d3      	b.n	800d99e <_dtoa_r+0x246>
 800d9f6:	bf00      	nop
 800d9f8:	636f4361 	.word	0x636f4361
 800d9fc:	3fd287a7 	.word	0x3fd287a7
 800da00:	8b60c8b3 	.word	0x8b60c8b3
 800da04:	3fc68a28 	.word	0x3fc68a28
 800da08:	509f79fb 	.word	0x509f79fb
 800da0c:	3fd34413 	.word	0x3fd34413
 800da10:	7ff00000 	.word	0x7ff00000
 800da14:	0805fd54 	.word	0x0805fd54
 800da18:	0805fd58 	.word	0x0805fd58
 800da1c:	0805fd33 	.word	0x0805fd33
 800da20:	3ff80000 	.word	0x3ff80000
 800da24:	0805fec0 	.word	0x0805fec0
 800da28:	0805fd61 	.word	0x0805fd61
 800da2c:	0805fd72 	.word	0x0805fd72
 800da30:	9b04      	ldr	r3, [sp, #16]
 800da32:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800da36:	9b05      	ldr	r3, [sp, #20]
 800da38:	2b0e      	cmp	r3, #14
 800da3a:	f200 80a1 	bhi.w	800db80 <_dtoa_r+0x428>
 800da3e:	2c00      	cmp	r4, #0
 800da40:	f000 809e 	beq.w	800db80 <_dtoa_r+0x428>
 800da44:	f1b8 0f00 	cmp.w	r8, #0
 800da48:	dd34      	ble.n	800dab4 <_dtoa_r+0x35c>
 800da4a:	4a96      	ldr	r2, [pc, #600]	; (800dca4 <_dtoa_r+0x54c>)
 800da4c:	f008 030f 	and.w	r3, r8, #15
 800da50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da54:	f418 7f80 	tst.w	r8, #256	; 0x100
 800da58:	e9d3 3400 	ldrd	r3, r4, [r3]
 800da5c:	ea4f 1528 	mov.w	r5, r8, asr #4
 800da60:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800da64:	d016      	beq.n	800da94 <_dtoa_r+0x33c>
 800da66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da6a:	4b8f      	ldr	r3, [pc, #572]	; (800dca8 <_dtoa_r+0x550>)
 800da6c:	2603      	movs	r6, #3
 800da6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da72:	f7f2 fec7 	bl	8000804 <__aeabi_ddiv>
 800da76:	4682      	mov	sl, r0
 800da78:	468b      	mov	fp, r1
 800da7a:	f005 050f 	and.w	r5, r5, #15
 800da7e:	4c8a      	ldr	r4, [pc, #552]	; (800dca8 <_dtoa_r+0x550>)
 800da80:	b955      	cbnz	r5, 800da98 <_dtoa_r+0x340>
 800da82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800da86:	4650      	mov	r0, sl
 800da88:	4659      	mov	r1, fp
 800da8a:	f7f2 febb 	bl	8000804 <__aeabi_ddiv>
 800da8e:	4682      	mov	sl, r0
 800da90:	468b      	mov	fp, r1
 800da92:	e028      	b.n	800dae6 <_dtoa_r+0x38e>
 800da94:	2602      	movs	r6, #2
 800da96:	e7f2      	b.n	800da7e <_dtoa_r+0x326>
 800da98:	07e9      	lsls	r1, r5, #31
 800da9a:	d508      	bpl.n	800daae <_dtoa_r+0x356>
 800da9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800daa0:	e9d4 2300 	ldrd	r2, r3, [r4]
 800daa4:	f7f2 fd84 	bl	80005b0 <__aeabi_dmul>
 800daa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800daac:	3601      	adds	r6, #1
 800daae:	106d      	asrs	r5, r5, #1
 800dab0:	3408      	adds	r4, #8
 800dab2:	e7e5      	b.n	800da80 <_dtoa_r+0x328>
 800dab4:	f000 809e 	beq.w	800dbf4 <_dtoa_r+0x49c>
 800dab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dabc:	f1c8 0400 	rsb	r4, r8, #0
 800dac0:	4b78      	ldr	r3, [pc, #480]	; (800dca4 <_dtoa_r+0x54c>)
 800dac2:	f004 020f 	and.w	r2, r4, #15
 800dac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	f7f2 fd6f 	bl	80005b0 <__aeabi_dmul>
 800dad2:	2602      	movs	r6, #2
 800dad4:	4682      	mov	sl, r0
 800dad6:	468b      	mov	fp, r1
 800dad8:	2300      	movs	r3, #0
 800dada:	4d73      	ldr	r5, [pc, #460]	; (800dca8 <_dtoa_r+0x550>)
 800dadc:	1124      	asrs	r4, r4, #4
 800dade:	2c00      	cmp	r4, #0
 800dae0:	d17d      	bne.n	800dbde <_dtoa_r+0x486>
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1d3      	bne.n	800da8e <_dtoa_r+0x336>
 800dae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f000 8085 	beq.w	800dbf8 <_dtoa_r+0x4a0>
 800daee:	2200      	movs	r2, #0
 800daf0:	4650      	mov	r0, sl
 800daf2:	4659      	mov	r1, fp
 800daf4:	4b6d      	ldr	r3, [pc, #436]	; (800dcac <_dtoa_r+0x554>)
 800daf6:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 800dafa:	f7f2 ffcb 	bl	8000a94 <__aeabi_dcmplt>
 800dafe:	2800      	cmp	r0, #0
 800db00:	d07a      	beq.n	800dbf8 <_dtoa_r+0x4a0>
 800db02:	9b05      	ldr	r3, [sp, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d077      	beq.n	800dbf8 <_dtoa_r+0x4a0>
 800db08:	9b08      	ldr	r3, [sp, #32]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	dd36      	ble.n	800db7c <_dtoa_r+0x424>
 800db0e:	4650      	mov	r0, sl
 800db10:	4659      	mov	r1, fp
 800db12:	2200      	movs	r2, #0
 800db14:	4b66      	ldr	r3, [pc, #408]	; (800dcb0 <_dtoa_r+0x558>)
 800db16:	f7f2 fd4b 	bl	80005b0 <__aeabi_dmul>
 800db1a:	4682      	mov	sl, r0
 800db1c:	468b      	mov	fp, r1
 800db1e:	9c08      	ldr	r4, [sp, #32]
 800db20:	f108 35ff 	add.w	r5, r8, #4294967295
 800db24:	3601      	adds	r6, #1
 800db26:	4630      	mov	r0, r6
 800db28:	f7f2 fcd8 	bl	80004dc <__aeabi_i2d>
 800db2c:	4652      	mov	r2, sl
 800db2e:	465b      	mov	r3, fp
 800db30:	f7f2 fd3e 	bl	80005b0 <__aeabi_dmul>
 800db34:	2200      	movs	r2, #0
 800db36:	4b5f      	ldr	r3, [pc, #380]	; (800dcb4 <_dtoa_r+0x55c>)
 800db38:	f7f2 fb84 	bl	8000244 <__adddf3>
 800db3c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800db40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800db44:	9611      	str	r6, [sp, #68]	; 0x44
 800db46:	2c00      	cmp	r4, #0
 800db48:	d159      	bne.n	800dbfe <_dtoa_r+0x4a6>
 800db4a:	2200      	movs	r2, #0
 800db4c:	4650      	mov	r0, sl
 800db4e:	4659      	mov	r1, fp
 800db50:	4b59      	ldr	r3, [pc, #356]	; (800dcb8 <_dtoa_r+0x560>)
 800db52:	f7f2 fb75 	bl	8000240 <__aeabi_dsub>
 800db56:	4633      	mov	r3, r6
 800db58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db5a:	4682      	mov	sl, r0
 800db5c:	468b      	mov	fp, r1
 800db5e:	f7f2 ffb7 	bl	8000ad0 <__aeabi_dcmpgt>
 800db62:	2800      	cmp	r0, #0
 800db64:	f040 828b 	bne.w	800e07e <_dtoa_r+0x926>
 800db68:	4650      	mov	r0, sl
 800db6a:	4659      	mov	r1, fp
 800db6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db6e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800db72:	f7f2 ff8f 	bl	8000a94 <__aeabi_dcmplt>
 800db76:	2800      	cmp	r0, #0
 800db78:	f040 827f 	bne.w	800e07a <_dtoa_r+0x922>
 800db7c:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 800db80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db82:	2b00      	cmp	r3, #0
 800db84:	f2c0 814d 	blt.w	800de22 <_dtoa_r+0x6ca>
 800db88:	f1b8 0f0e 	cmp.w	r8, #14
 800db8c:	f300 8149 	bgt.w	800de22 <_dtoa_r+0x6ca>
 800db90:	4b44      	ldr	r3, [pc, #272]	; (800dca4 <_dtoa_r+0x54c>)
 800db92:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800db96:	e9d3 3400 	ldrd	r3, r4, [r3]
 800db9a:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800db9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f280 80d6 	bge.w	800dd52 <_dtoa_r+0x5fa>
 800dba6:	9b05      	ldr	r3, [sp, #20]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f300 80d2 	bgt.w	800dd52 <_dtoa_r+0x5fa>
 800dbae:	f040 8263 	bne.w	800e078 <_dtoa_r+0x920>
 800dbb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	4b3f      	ldr	r3, [pc, #252]	; (800dcb8 <_dtoa_r+0x560>)
 800dbba:	f7f2 fcf9 	bl	80005b0 <__aeabi_dmul>
 800dbbe:	4652      	mov	r2, sl
 800dbc0:	465b      	mov	r3, fp
 800dbc2:	f7f2 ff7b 	bl	8000abc <__aeabi_dcmpge>
 800dbc6:	9c05      	ldr	r4, [sp, #20]
 800dbc8:	4625      	mov	r5, r4
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	f040 823c 	bne.w	800e048 <_dtoa_r+0x8f0>
 800dbd0:	2331      	movs	r3, #49	; 0x31
 800dbd2:	9e04      	ldr	r6, [sp, #16]
 800dbd4:	f108 0801 	add.w	r8, r8, #1
 800dbd8:	f806 3b01 	strb.w	r3, [r6], #1
 800dbdc:	e238      	b.n	800e050 <_dtoa_r+0x8f8>
 800dbde:	07e2      	lsls	r2, r4, #31
 800dbe0:	d505      	bpl.n	800dbee <_dtoa_r+0x496>
 800dbe2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dbe6:	f7f2 fce3 	bl	80005b0 <__aeabi_dmul>
 800dbea:	2301      	movs	r3, #1
 800dbec:	3601      	adds	r6, #1
 800dbee:	1064      	asrs	r4, r4, #1
 800dbf0:	3508      	adds	r5, #8
 800dbf2:	e774      	b.n	800dade <_dtoa_r+0x386>
 800dbf4:	2602      	movs	r6, #2
 800dbf6:	e776      	b.n	800dae6 <_dtoa_r+0x38e>
 800dbf8:	4645      	mov	r5, r8
 800dbfa:	9c05      	ldr	r4, [sp, #20]
 800dbfc:	e793      	b.n	800db26 <_dtoa_r+0x3ce>
 800dbfe:	9904      	ldr	r1, [sp, #16]
 800dc00:	4b28      	ldr	r3, [pc, #160]	; (800dca4 <_dtoa_r+0x54c>)
 800dc02:	4421      	add	r1, r4
 800dc04:	9112      	str	r1, [sp, #72]	; 0x48
 800dc06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc0c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800dc10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc14:	2900      	cmp	r1, #0
 800dc16:	d053      	beq.n	800dcc0 <_dtoa_r+0x568>
 800dc18:	2000      	movs	r0, #0
 800dc1a:	4928      	ldr	r1, [pc, #160]	; (800dcbc <_dtoa_r+0x564>)
 800dc1c:	f7f2 fdf2 	bl	8000804 <__aeabi_ddiv>
 800dc20:	4632      	mov	r2, r6
 800dc22:	463b      	mov	r3, r7
 800dc24:	f7f2 fb0c 	bl	8000240 <__aeabi_dsub>
 800dc28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dc2c:	9e04      	ldr	r6, [sp, #16]
 800dc2e:	4659      	mov	r1, fp
 800dc30:	4650      	mov	r0, sl
 800dc32:	f7f2 ff6d 	bl	8000b10 <__aeabi_d2iz>
 800dc36:	4604      	mov	r4, r0
 800dc38:	f7f2 fc50 	bl	80004dc <__aeabi_i2d>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	4650      	mov	r0, sl
 800dc42:	4659      	mov	r1, fp
 800dc44:	f7f2 fafc 	bl	8000240 <__aeabi_dsub>
 800dc48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dc4c:	3430      	adds	r4, #48	; 0x30
 800dc4e:	f806 4b01 	strb.w	r4, [r6], #1
 800dc52:	4682      	mov	sl, r0
 800dc54:	468b      	mov	fp, r1
 800dc56:	f7f2 ff1d 	bl	8000a94 <__aeabi_dcmplt>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d171      	bne.n	800dd42 <_dtoa_r+0x5ea>
 800dc5e:	4652      	mov	r2, sl
 800dc60:	465b      	mov	r3, fp
 800dc62:	2000      	movs	r0, #0
 800dc64:	4911      	ldr	r1, [pc, #68]	; (800dcac <_dtoa_r+0x554>)
 800dc66:	f7f2 faeb 	bl	8000240 <__aeabi_dsub>
 800dc6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dc6e:	f7f2 ff11 	bl	8000a94 <__aeabi_dcmplt>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	f040 80b7 	bne.w	800dde6 <_dtoa_r+0x68e>
 800dc78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc7a:	429e      	cmp	r6, r3
 800dc7c:	f43f af7e 	beq.w	800db7c <_dtoa_r+0x424>
 800dc80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dc84:	2200      	movs	r2, #0
 800dc86:	4b0a      	ldr	r3, [pc, #40]	; (800dcb0 <_dtoa_r+0x558>)
 800dc88:	f7f2 fc92 	bl	80005b0 <__aeabi_dmul>
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dc92:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <_dtoa_r+0x558>)
 800dc94:	4650      	mov	r0, sl
 800dc96:	4659      	mov	r1, fp
 800dc98:	f7f2 fc8a 	bl	80005b0 <__aeabi_dmul>
 800dc9c:	4682      	mov	sl, r0
 800dc9e:	468b      	mov	fp, r1
 800dca0:	e7c5      	b.n	800dc2e <_dtoa_r+0x4d6>
 800dca2:	bf00      	nop
 800dca4:	0805fec0 	.word	0x0805fec0
 800dca8:	0805fe98 	.word	0x0805fe98
 800dcac:	3ff00000 	.word	0x3ff00000
 800dcb0:	40240000 	.word	0x40240000
 800dcb4:	401c0000 	.word	0x401c0000
 800dcb8:	40140000 	.word	0x40140000
 800dcbc:	3fe00000 	.word	0x3fe00000
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	4639      	mov	r1, r7
 800dcc4:	f7f2 fc74 	bl	80005b0 <__aeabi_dmul>
 800dcc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dccc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800dcce:	9e04      	ldr	r6, [sp, #16]
 800dcd0:	4659      	mov	r1, fp
 800dcd2:	4650      	mov	r0, sl
 800dcd4:	f7f2 ff1c 	bl	8000b10 <__aeabi_d2iz>
 800dcd8:	4604      	mov	r4, r0
 800dcda:	f7f2 fbff 	bl	80004dc <__aeabi_i2d>
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4650      	mov	r0, sl
 800dce4:	4659      	mov	r1, fp
 800dce6:	f7f2 faab 	bl	8000240 <__aeabi_dsub>
 800dcea:	3430      	adds	r4, #48	; 0x30
 800dcec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcee:	f806 4b01 	strb.w	r4, [r6], #1
 800dcf2:	429e      	cmp	r6, r3
 800dcf4:	4682      	mov	sl, r0
 800dcf6:	468b      	mov	fp, r1
 800dcf8:	f04f 0200 	mov.w	r2, #0
 800dcfc:	d123      	bne.n	800dd46 <_dtoa_r+0x5ee>
 800dcfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dd02:	4baf      	ldr	r3, [pc, #700]	; (800dfc0 <_dtoa_r+0x868>)
 800dd04:	f7f2 fa9e 	bl	8000244 <__adddf3>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4650      	mov	r0, sl
 800dd0e:	4659      	mov	r1, fp
 800dd10:	f7f2 fede 	bl	8000ad0 <__aeabi_dcmpgt>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d166      	bne.n	800dde6 <_dtoa_r+0x68e>
 800dd18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	49a8      	ldr	r1, [pc, #672]	; (800dfc0 <_dtoa_r+0x868>)
 800dd20:	f7f2 fa8e 	bl	8000240 <__aeabi_dsub>
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	4650      	mov	r0, sl
 800dd2a:	4659      	mov	r1, fp
 800dd2c:	f7f2 feb2 	bl	8000a94 <__aeabi_dcmplt>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	f43f af23 	beq.w	800db7c <_dtoa_r+0x424>
 800dd36:	463e      	mov	r6, r7
 800dd38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd3c:	3f01      	subs	r7, #1
 800dd3e:	2b30      	cmp	r3, #48	; 0x30
 800dd40:	d0f9      	beq.n	800dd36 <_dtoa_r+0x5de>
 800dd42:	46a8      	mov	r8, r5
 800dd44:	e03e      	b.n	800ddc4 <_dtoa_r+0x66c>
 800dd46:	4b9f      	ldr	r3, [pc, #636]	; (800dfc4 <_dtoa_r+0x86c>)
 800dd48:	f7f2 fc32 	bl	80005b0 <__aeabi_dmul>
 800dd4c:	4682      	mov	sl, r0
 800dd4e:	468b      	mov	fp, r1
 800dd50:	e7be      	b.n	800dcd0 <_dtoa_r+0x578>
 800dd52:	4654      	mov	r4, sl
 800dd54:	f04f 0a00 	mov.w	sl, #0
 800dd58:	465d      	mov	r5, fp
 800dd5a:	9e04      	ldr	r6, [sp, #16]
 800dd5c:	f8df b264 	ldr.w	fp, [pc, #612]	; 800dfc4 <_dtoa_r+0x86c>
 800dd60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd64:	4620      	mov	r0, r4
 800dd66:	4629      	mov	r1, r5
 800dd68:	f7f2 fd4c 	bl	8000804 <__aeabi_ddiv>
 800dd6c:	f7f2 fed0 	bl	8000b10 <__aeabi_d2iz>
 800dd70:	4607      	mov	r7, r0
 800dd72:	f7f2 fbb3 	bl	80004dc <__aeabi_i2d>
 800dd76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd7a:	f7f2 fc19 	bl	80005b0 <__aeabi_dmul>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	4620      	mov	r0, r4
 800dd84:	4629      	mov	r1, r5
 800dd86:	f7f2 fa5b 	bl	8000240 <__aeabi_dsub>
 800dd8a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800dd8e:	f806 4b01 	strb.w	r4, [r6], #1
 800dd92:	9c04      	ldr	r4, [sp, #16]
 800dd94:	9d05      	ldr	r5, [sp, #20]
 800dd96:	1b34      	subs	r4, r6, r4
 800dd98:	42a5      	cmp	r5, r4
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	d133      	bne.n	800de08 <_dtoa_r+0x6b0>
 800dda0:	f7f2 fa50 	bl	8000244 <__adddf3>
 800dda4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dda8:	4604      	mov	r4, r0
 800ddaa:	460d      	mov	r5, r1
 800ddac:	f7f2 fe90 	bl	8000ad0 <__aeabi_dcmpgt>
 800ddb0:	b9c0      	cbnz	r0, 800dde4 <_dtoa_r+0x68c>
 800ddb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	4629      	mov	r1, r5
 800ddba:	f7f2 fe61 	bl	8000a80 <__aeabi_dcmpeq>
 800ddbe:	b108      	cbz	r0, 800ddc4 <_dtoa_r+0x66c>
 800ddc0:	07fb      	lsls	r3, r7, #31
 800ddc2:	d40f      	bmi.n	800dde4 <_dtoa_r+0x68c>
 800ddc4:	4648      	mov	r0, r9
 800ddc6:	9903      	ldr	r1, [sp, #12]
 800ddc8:	f001 f88d 	bl	800eee6 <_Bfree>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	7033      	strb	r3, [r6, #0]
 800ddd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ddd2:	f108 0001 	add.w	r0, r8, #1
 800ddd6:	6018      	str	r0, [r3, #0]
 800ddd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f43f acf0 	beq.w	800d7c0 <_dtoa_r+0x68>
 800dde0:	601e      	str	r6, [r3, #0]
 800dde2:	e4ed      	b.n	800d7c0 <_dtoa_r+0x68>
 800dde4:	4645      	mov	r5, r8
 800dde6:	4633      	mov	r3, r6
 800dde8:	461e      	mov	r6, r3
 800ddea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddee:	2a39      	cmp	r2, #57	; 0x39
 800ddf0:	d106      	bne.n	800de00 <_dtoa_r+0x6a8>
 800ddf2:	9a04      	ldr	r2, [sp, #16]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d1f7      	bne.n	800dde8 <_dtoa_r+0x690>
 800ddf8:	2230      	movs	r2, #48	; 0x30
 800ddfa:	9904      	ldr	r1, [sp, #16]
 800ddfc:	3501      	adds	r5, #1
 800ddfe:	700a      	strb	r2, [r1, #0]
 800de00:	781a      	ldrb	r2, [r3, #0]
 800de02:	3201      	adds	r2, #1
 800de04:	701a      	strb	r2, [r3, #0]
 800de06:	e79c      	b.n	800dd42 <_dtoa_r+0x5ea>
 800de08:	4652      	mov	r2, sl
 800de0a:	465b      	mov	r3, fp
 800de0c:	f7f2 fbd0 	bl	80005b0 <__aeabi_dmul>
 800de10:	2200      	movs	r2, #0
 800de12:	2300      	movs	r3, #0
 800de14:	4604      	mov	r4, r0
 800de16:	460d      	mov	r5, r1
 800de18:	f7f2 fe32 	bl	8000a80 <__aeabi_dcmpeq>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d09f      	beq.n	800dd60 <_dtoa_r+0x608>
 800de20:	e7d0      	b.n	800ddc4 <_dtoa_r+0x66c>
 800de22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de24:	2a00      	cmp	r2, #0
 800de26:	f000 80cf 	beq.w	800dfc8 <_dtoa_r+0x870>
 800de2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800de2c:	2a01      	cmp	r2, #1
 800de2e:	f300 80ad 	bgt.w	800df8c <_dtoa_r+0x834>
 800de32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800de34:	2a00      	cmp	r2, #0
 800de36:	f000 80a5 	beq.w	800df84 <_dtoa_r+0x82c>
 800de3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800de40:	9e06      	ldr	r6, [sp, #24]
 800de42:	9a06      	ldr	r2, [sp, #24]
 800de44:	2101      	movs	r1, #1
 800de46:	441a      	add	r2, r3
 800de48:	9206      	str	r2, [sp, #24]
 800de4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de4c:	4648      	mov	r0, r9
 800de4e:	441a      	add	r2, r3
 800de50:	9209      	str	r2, [sp, #36]	; 0x24
 800de52:	f001 f92f 	bl	800f0b4 <__i2b>
 800de56:	4605      	mov	r5, r0
 800de58:	2e00      	cmp	r6, #0
 800de5a:	dd0c      	ble.n	800de76 <_dtoa_r+0x71e>
 800de5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de5e:	2b00      	cmp	r3, #0
 800de60:	dd09      	ble.n	800de76 <_dtoa_r+0x71e>
 800de62:	42b3      	cmp	r3, r6
 800de64:	bfa8      	it	ge
 800de66:	4633      	movge	r3, r6
 800de68:	9a06      	ldr	r2, [sp, #24]
 800de6a:	1af6      	subs	r6, r6, r3
 800de6c:	1ad2      	subs	r2, r2, r3
 800de6e:	9206      	str	r2, [sp, #24]
 800de70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	9309      	str	r3, [sp, #36]	; 0x24
 800de76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de78:	b1f3      	cbz	r3, 800deb8 <_dtoa_r+0x760>
 800de7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f000 80a7 	beq.w	800dfd0 <_dtoa_r+0x878>
 800de82:	2c00      	cmp	r4, #0
 800de84:	dd10      	ble.n	800dea8 <_dtoa_r+0x750>
 800de86:	4629      	mov	r1, r5
 800de88:	4622      	mov	r2, r4
 800de8a:	4648      	mov	r0, r9
 800de8c:	f001 f9d0 	bl	800f230 <__pow5mult>
 800de90:	9a03      	ldr	r2, [sp, #12]
 800de92:	4601      	mov	r1, r0
 800de94:	4605      	mov	r5, r0
 800de96:	4648      	mov	r0, r9
 800de98:	f001 f922 	bl	800f0e0 <__multiply>
 800de9c:	4607      	mov	r7, r0
 800de9e:	9903      	ldr	r1, [sp, #12]
 800dea0:	4648      	mov	r0, r9
 800dea2:	f001 f820 	bl	800eee6 <_Bfree>
 800dea6:	9703      	str	r7, [sp, #12]
 800dea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deaa:	1b1a      	subs	r2, r3, r4
 800deac:	d004      	beq.n	800deb8 <_dtoa_r+0x760>
 800deae:	4648      	mov	r0, r9
 800deb0:	9903      	ldr	r1, [sp, #12]
 800deb2:	f001 f9bd 	bl	800f230 <__pow5mult>
 800deb6:	9003      	str	r0, [sp, #12]
 800deb8:	2101      	movs	r1, #1
 800deba:	4648      	mov	r0, r9
 800debc:	f001 f8fa 	bl	800f0b4 <__i2b>
 800dec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dec2:	4604      	mov	r4, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f340 8085 	ble.w	800dfd4 <_dtoa_r+0x87c>
 800deca:	461a      	mov	r2, r3
 800decc:	4601      	mov	r1, r0
 800dece:	4648      	mov	r0, r9
 800ded0:	f001 f9ae 	bl	800f230 <__pow5mult>
 800ded4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ded6:	4604      	mov	r4, r0
 800ded8:	2b01      	cmp	r3, #1
 800deda:	dd7e      	ble.n	800dfda <_dtoa_r+0x882>
 800dedc:	2700      	movs	r7, #0
 800dede:	6923      	ldr	r3, [r4, #16]
 800dee0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dee4:	6918      	ldr	r0, [r3, #16]
 800dee6:	f001 f897 	bl	800f018 <__hi0bits>
 800deea:	f1c0 0020 	rsb	r0, r0, #32
 800deee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def0:	4418      	add	r0, r3
 800def2:	f010 001f 	ands.w	r0, r0, #31
 800def6:	f000 808e 	beq.w	800e016 <_dtoa_r+0x8be>
 800defa:	f1c0 0320 	rsb	r3, r0, #32
 800defe:	2b04      	cmp	r3, #4
 800df00:	f340 8087 	ble.w	800e012 <_dtoa_r+0x8ba>
 800df04:	f1c0 001c 	rsb	r0, r0, #28
 800df08:	9b06      	ldr	r3, [sp, #24]
 800df0a:	4406      	add	r6, r0
 800df0c:	4403      	add	r3, r0
 800df0e:	9306      	str	r3, [sp, #24]
 800df10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df12:	4403      	add	r3, r0
 800df14:	9309      	str	r3, [sp, #36]	; 0x24
 800df16:	9b06      	ldr	r3, [sp, #24]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	dd05      	ble.n	800df28 <_dtoa_r+0x7d0>
 800df1c:	461a      	mov	r2, r3
 800df1e:	4648      	mov	r0, r9
 800df20:	9903      	ldr	r1, [sp, #12]
 800df22:	f001 f9c5 	bl	800f2b0 <__lshift>
 800df26:	9003      	str	r0, [sp, #12]
 800df28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	dd05      	ble.n	800df3a <_dtoa_r+0x7e2>
 800df2e:	4621      	mov	r1, r4
 800df30:	461a      	mov	r2, r3
 800df32:	4648      	mov	r0, r9
 800df34:	f001 f9bc 	bl	800f2b0 <__lshift>
 800df38:	4604      	mov	r4, r0
 800df3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d06c      	beq.n	800e01a <_dtoa_r+0x8c2>
 800df40:	4621      	mov	r1, r4
 800df42:	9803      	ldr	r0, [sp, #12]
 800df44:	f001 fa24 	bl	800f390 <__mcmp>
 800df48:	2800      	cmp	r0, #0
 800df4a:	da66      	bge.n	800e01a <_dtoa_r+0x8c2>
 800df4c:	2300      	movs	r3, #0
 800df4e:	220a      	movs	r2, #10
 800df50:	4648      	mov	r0, r9
 800df52:	9903      	ldr	r1, [sp, #12]
 800df54:	f000 ffd0 	bl	800eef8 <__multadd>
 800df58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800df5e:	9003      	str	r0, [sp, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	f000 819f 	beq.w	800e2a4 <_dtoa_r+0xb4c>
 800df66:	2300      	movs	r3, #0
 800df68:	4629      	mov	r1, r5
 800df6a:	220a      	movs	r2, #10
 800df6c:	4648      	mov	r0, r9
 800df6e:	f000 ffc3 	bl	800eef8 <__multadd>
 800df72:	9b08      	ldr	r3, [sp, #32]
 800df74:	4605      	mov	r5, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	f300 808a 	bgt.w	800e090 <_dtoa_r+0x938>
 800df7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800df7e:	2b02      	cmp	r3, #2
 800df80:	dc53      	bgt.n	800e02a <_dtoa_r+0x8d2>
 800df82:	e085      	b.n	800e090 <_dtoa_r+0x938>
 800df84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df8a:	e758      	b.n	800de3e <_dtoa_r+0x6e6>
 800df8c:	9b05      	ldr	r3, [sp, #20]
 800df8e:	1e5c      	subs	r4, r3, #1
 800df90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df92:	42a3      	cmp	r3, r4
 800df94:	bfb7      	itett	lt
 800df96:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800df98:	1b1c      	subge	r4, r3, r4
 800df9a:	1ae2      	sublt	r2, r4, r3
 800df9c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800df9e:	bfbe      	ittt	lt
 800dfa0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800dfa2:	189b      	addlt	r3, r3, r2
 800dfa4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dfa6:	9b05      	ldr	r3, [sp, #20]
 800dfa8:	bfb8      	it	lt
 800dfaa:	2400      	movlt	r4, #0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	bfb7      	itett	lt
 800dfb0:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 800dfb4:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 800dfb8:	1a9e      	sublt	r6, r3, r2
 800dfba:	2300      	movlt	r3, #0
 800dfbc:	e741      	b.n	800de42 <_dtoa_r+0x6ea>
 800dfbe:	bf00      	nop
 800dfc0:	3fe00000 	.word	0x3fe00000
 800dfc4:	40240000 	.word	0x40240000
 800dfc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dfca:	9e06      	ldr	r6, [sp, #24]
 800dfcc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800dfce:	e743      	b.n	800de58 <_dtoa_r+0x700>
 800dfd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfd2:	e76c      	b.n	800deae <_dtoa_r+0x756>
 800dfd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	dc17      	bgt.n	800e00a <_dtoa_r+0x8b2>
 800dfda:	f1ba 0f00 	cmp.w	sl, #0
 800dfde:	d114      	bne.n	800e00a <_dtoa_r+0x8b2>
 800dfe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfe4:	b99b      	cbnz	r3, 800e00e <_dtoa_r+0x8b6>
 800dfe6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800dfea:	0d3f      	lsrs	r7, r7, #20
 800dfec:	053f      	lsls	r7, r7, #20
 800dfee:	b137      	cbz	r7, 800dffe <_dtoa_r+0x8a6>
 800dff0:	2701      	movs	r7, #1
 800dff2:	9b06      	ldr	r3, [sp, #24]
 800dff4:	3301      	adds	r3, #1
 800dff6:	9306      	str	r3, [sp, #24]
 800dff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dffa:	3301      	adds	r3, #1
 800dffc:	9309      	str	r3, [sp, #36]	; 0x24
 800dffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e000:	2b00      	cmp	r3, #0
 800e002:	f47f af6c 	bne.w	800dede <_dtoa_r+0x786>
 800e006:	2001      	movs	r0, #1
 800e008:	e771      	b.n	800deee <_dtoa_r+0x796>
 800e00a:	2700      	movs	r7, #0
 800e00c:	e7f7      	b.n	800dffe <_dtoa_r+0x8a6>
 800e00e:	4657      	mov	r7, sl
 800e010:	e7f5      	b.n	800dffe <_dtoa_r+0x8a6>
 800e012:	d080      	beq.n	800df16 <_dtoa_r+0x7be>
 800e014:	4618      	mov	r0, r3
 800e016:	301c      	adds	r0, #28
 800e018:	e776      	b.n	800df08 <_dtoa_r+0x7b0>
 800e01a:	9b05      	ldr	r3, [sp, #20]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	dc31      	bgt.n	800e084 <_dtoa_r+0x92c>
 800e020:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e022:	2b02      	cmp	r3, #2
 800e024:	dd2e      	ble.n	800e084 <_dtoa_r+0x92c>
 800e026:	9b05      	ldr	r3, [sp, #20]
 800e028:	9308      	str	r3, [sp, #32]
 800e02a:	9b08      	ldr	r3, [sp, #32]
 800e02c:	b963      	cbnz	r3, 800e048 <_dtoa_r+0x8f0>
 800e02e:	4621      	mov	r1, r4
 800e030:	2205      	movs	r2, #5
 800e032:	4648      	mov	r0, r9
 800e034:	f000 ff60 	bl	800eef8 <__multadd>
 800e038:	4601      	mov	r1, r0
 800e03a:	4604      	mov	r4, r0
 800e03c:	9803      	ldr	r0, [sp, #12]
 800e03e:	f001 f9a7 	bl	800f390 <__mcmp>
 800e042:	2800      	cmp	r0, #0
 800e044:	f73f adc4 	bgt.w	800dbd0 <_dtoa_r+0x478>
 800e048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e04a:	9e04      	ldr	r6, [sp, #16]
 800e04c:	ea6f 0803 	mvn.w	r8, r3
 800e050:	2700      	movs	r7, #0
 800e052:	4621      	mov	r1, r4
 800e054:	4648      	mov	r0, r9
 800e056:	f000 ff46 	bl	800eee6 <_Bfree>
 800e05a:	2d00      	cmp	r5, #0
 800e05c:	f43f aeb2 	beq.w	800ddc4 <_dtoa_r+0x66c>
 800e060:	b12f      	cbz	r7, 800e06e <_dtoa_r+0x916>
 800e062:	42af      	cmp	r7, r5
 800e064:	d003      	beq.n	800e06e <_dtoa_r+0x916>
 800e066:	4639      	mov	r1, r7
 800e068:	4648      	mov	r0, r9
 800e06a:	f000 ff3c 	bl	800eee6 <_Bfree>
 800e06e:	4629      	mov	r1, r5
 800e070:	4648      	mov	r0, r9
 800e072:	f000 ff38 	bl	800eee6 <_Bfree>
 800e076:	e6a5      	b.n	800ddc4 <_dtoa_r+0x66c>
 800e078:	2400      	movs	r4, #0
 800e07a:	4625      	mov	r5, r4
 800e07c:	e7e4      	b.n	800e048 <_dtoa_r+0x8f0>
 800e07e:	46a8      	mov	r8, r5
 800e080:	4625      	mov	r5, r4
 800e082:	e5a5      	b.n	800dbd0 <_dtoa_r+0x478>
 800e084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e086:	2b00      	cmp	r3, #0
 800e088:	f000 80c4 	beq.w	800e214 <_dtoa_r+0xabc>
 800e08c:	9b05      	ldr	r3, [sp, #20]
 800e08e:	9308      	str	r3, [sp, #32]
 800e090:	2e00      	cmp	r6, #0
 800e092:	dd05      	ble.n	800e0a0 <_dtoa_r+0x948>
 800e094:	4629      	mov	r1, r5
 800e096:	4632      	mov	r2, r6
 800e098:	4648      	mov	r0, r9
 800e09a:	f001 f909 	bl	800f2b0 <__lshift>
 800e09e:	4605      	mov	r5, r0
 800e0a0:	2f00      	cmp	r7, #0
 800e0a2:	d058      	beq.n	800e156 <_dtoa_r+0x9fe>
 800e0a4:	4648      	mov	r0, r9
 800e0a6:	6869      	ldr	r1, [r5, #4]
 800e0a8:	f000 fef8 	bl	800ee9c <_Balloc>
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	b920      	cbnz	r0, 800e0ba <_dtoa_r+0x962>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e0b6:	4b7f      	ldr	r3, [pc, #508]	; (800e2b4 <_dtoa_r+0xb5c>)
 800e0b8:	e481      	b.n	800d9be <_dtoa_r+0x266>
 800e0ba:	692a      	ldr	r2, [r5, #16]
 800e0bc:	f105 010c 	add.w	r1, r5, #12
 800e0c0:	3202      	adds	r2, #2
 800e0c2:	0092      	lsls	r2, r2, #2
 800e0c4:	300c      	adds	r0, #12
 800e0c6:	f000 fec1 	bl	800ee4c <memcpy>
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	4631      	mov	r1, r6
 800e0ce:	4648      	mov	r0, r9
 800e0d0:	f001 f8ee 	bl	800f2b0 <__lshift>
 800e0d4:	462f      	mov	r7, r5
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	9b04      	ldr	r3, [sp, #16]
 800e0da:	9a04      	ldr	r2, [sp, #16]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	9305      	str	r3, [sp, #20]
 800e0e0:	9b08      	ldr	r3, [sp, #32]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	930a      	str	r3, [sp, #40]	; 0x28
 800e0e6:	f00a 0301 	and.w	r3, sl, #1
 800e0ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ec:	9b05      	ldr	r3, [sp, #20]
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	9803      	ldr	r0, [sp, #12]
 800e0f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800e0f6:	f7ff faa3 	bl	800d640 <quorem>
 800e0fa:	4639      	mov	r1, r7
 800e0fc:	9006      	str	r0, [sp, #24]
 800e0fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e102:	9803      	ldr	r0, [sp, #12]
 800e104:	f001 f944 	bl	800f390 <__mcmp>
 800e108:	462a      	mov	r2, r5
 800e10a:	9008      	str	r0, [sp, #32]
 800e10c:	4621      	mov	r1, r4
 800e10e:	4648      	mov	r0, r9
 800e110:	f001 f95a 	bl	800f3c8 <__mdiff>
 800e114:	68c2      	ldr	r2, [r0, #12]
 800e116:	4606      	mov	r6, r0
 800e118:	b9fa      	cbnz	r2, 800e15a <_dtoa_r+0xa02>
 800e11a:	4601      	mov	r1, r0
 800e11c:	9803      	ldr	r0, [sp, #12]
 800e11e:	f001 f937 	bl	800f390 <__mcmp>
 800e122:	4602      	mov	r2, r0
 800e124:	4631      	mov	r1, r6
 800e126:	4648      	mov	r0, r9
 800e128:	920b      	str	r2, [sp, #44]	; 0x2c
 800e12a:	f000 fedc 	bl	800eee6 <_Bfree>
 800e12e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e130:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e132:	9e05      	ldr	r6, [sp, #20]
 800e134:	ea43 0102 	orr.w	r1, r3, r2
 800e138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e13a:	430b      	orrs	r3, r1
 800e13c:	d10f      	bne.n	800e15e <_dtoa_r+0xa06>
 800e13e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e142:	d028      	beq.n	800e196 <_dtoa_r+0xa3e>
 800e144:	9b08      	ldr	r3, [sp, #32]
 800e146:	2b00      	cmp	r3, #0
 800e148:	dd02      	ble.n	800e150 <_dtoa_r+0x9f8>
 800e14a:	9b06      	ldr	r3, [sp, #24]
 800e14c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e150:	f88b a000 	strb.w	sl, [fp]
 800e154:	e77d      	b.n	800e052 <_dtoa_r+0x8fa>
 800e156:	4628      	mov	r0, r5
 800e158:	e7bc      	b.n	800e0d4 <_dtoa_r+0x97c>
 800e15a:	2201      	movs	r2, #1
 800e15c:	e7e2      	b.n	800e124 <_dtoa_r+0x9cc>
 800e15e:	9b08      	ldr	r3, [sp, #32]
 800e160:	2b00      	cmp	r3, #0
 800e162:	db04      	blt.n	800e16e <_dtoa_r+0xa16>
 800e164:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e166:	430b      	orrs	r3, r1
 800e168:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e16a:	430b      	orrs	r3, r1
 800e16c:	d120      	bne.n	800e1b0 <_dtoa_r+0xa58>
 800e16e:	2a00      	cmp	r2, #0
 800e170:	ddee      	ble.n	800e150 <_dtoa_r+0x9f8>
 800e172:	2201      	movs	r2, #1
 800e174:	9903      	ldr	r1, [sp, #12]
 800e176:	4648      	mov	r0, r9
 800e178:	f001 f89a 	bl	800f2b0 <__lshift>
 800e17c:	4621      	mov	r1, r4
 800e17e:	9003      	str	r0, [sp, #12]
 800e180:	f001 f906 	bl	800f390 <__mcmp>
 800e184:	2800      	cmp	r0, #0
 800e186:	dc03      	bgt.n	800e190 <_dtoa_r+0xa38>
 800e188:	d1e2      	bne.n	800e150 <_dtoa_r+0x9f8>
 800e18a:	f01a 0f01 	tst.w	sl, #1
 800e18e:	d0df      	beq.n	800e150 <_dtoa_r+0x9f8>
 800e190:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e194:	d1d9      	bne.n	800e14a <_dtoa_r+0x9f2>
 800e196:	2339      	movs	r3, #57	; 0x39
 800e198:	f88b 3000 	strb.w	r3, [fp]
 800e19c:	4633      	mov	r3, r6
 800e19e:	461e      	mov	r6, r3
 800e1a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	2a39      	cmp	r2, #57	; 0x39
 800e1a8:	d06a      	beq.n	800e280 <_dtoa_r+0xb28>
 800e1aa:	3201      	adds	r2, #1
 800e1ac:	701a      	strb	r2, [r3, #0]
 800e1ae:	e750      	b.n	800e052 <_dtoa_r+0x8fa>
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	dd07      	ble.n	800e1c4 <_dtoa_r+0xa6c>
 800e1b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1b8:	d0ed      	beq.n	800e196 <_dtoa_r+0xa3e>
 800e1ba:	f10a 0301 	add.w	r3, sl, #1
 800e1be:	f88b 3000 	strb.w	r3, [fp]
 800e1c2:	e746      	b.n	800e052 <_dtoa_r+0x8fa>
 800e1c4:	9b05      	ldr	r3, [sp, #20]
 800e1c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1c8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d041      	beq.n	800e254 <_dtoa_r+0xafc>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	220a      	movs	r2, #10
 800e1d4:	9903      	ldr	r1, [sp, #12]
 800e1d6:	4648      	mov	r0, r9
 800e1d8:	f000 fe8e 	bl	800eef8 <__multadd>
 800e1dc:	42af      	cmp	r7, r5
 800e1de:	9003      	str	r0, [sp, #12]
 800e1e0:	f04f 0300 	mov.w	r3, #0
 800e1e4:	f04f 020a 	mov.w	r2, #10
 800e1e8:	4639      	mov	r1, r7
 800e1ea:	4648      	mov	r0, r9
 800e1ec:	d107      	bne.n	800e1fe <_dtoa_r+0xaa6>
 800e1ee:	f000 fe83 	bl	800eef8 <__multadd>
 800e1f2:	4607      	mov	r7, r0
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	9b05      	ldr	r3, [sp, #20]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	9305      	str	r3, [sp, #20]
 800e1fc:	e776      	b.n	800e0ec <_dtoa_r+0x994>
 800e1fe:	f000 fe7b 	bl	800eef8 <__multadd>
 800e202:	4629      	mov	r1, r5
 800e204:	4607      	mov	r7, r0
 800e206:	2300      	movs	r3, #0
 800e208:	220a      	movs	r2, #10
 800e20a:	4648      	mov	r0, r9
 800e20c:	f000 fe74 	bl	800eef8 <__multadd>
 800e210:	4605      	mov	r5, r0
 800e212:	e7f0      	b.n	800e1f6 <_dtoa_r+0xa9e>
 800e214:	9b05      	ldr	r3, [sp, #20]
 800e216:	9308      	str	r3, [sp, #32]
 800e218:	9e04      	ldr	r6, [sp, #16]
 800e21a:	4621      	mov	r1, r4
 800e21c:	9803      	ldr	r0, [sp, #12]
 800e21e:	f7ff fa0f 	bl	800d640 <quorem>
 800e222:	9b04      	ldr	r3, [sp, #16]
 800e224:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e228:	f806 ab01 	strb.w	sl, [r6], #1
 800e22c:	1af2      	subs	r2, r6, r3
 800e22e:	9b08      	ldr	r3, [sp, #32]
 800e230:	4293      	cmp	r3, r2
 800e232:	dd07      	ble.n	800e244 <_dtoa_r+0xaec>
 800e234:	2300      	movs	r3, #0
 800e236:	220a      	movs	r2, #10
 800e238:	4648      	mov	r0, r9
 800e23a:	9903      	ldr	r1, [sp, #12]
 800e23c:	f000 fe5c 	bl	800eef8 <__multadd>
 800e240:	9003      	str	r0, [sp, #12]
 800e242:	e7ea      	b.n	800e21a <_dtoa_r+0xac2>
 800e244:	9b08      	ldr	r3, [sp, #32]
 800e246:	2700      	movs	r7, #0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	bfcc      	ite	gt
 800e24c:	461e      	movgt	r6, r3
 800e24e:	2601      	movle	r6, #1
 800e250:	9b04      	ldr	r3, [sp, #16]
 800e252:	441e      	add	r6, r3
 800e254:	2201      	movs	r2, #1
 800e256:	9903      	ldr	r1, [sp, #12]
 800e258:	4648      	mov	r0, r9
 800e25a:	f001 f829 	bl	800f2b0 <__lshift>
 800e25e:	4621      	mov	r1, r4
 800e260:	9003      	str	r0, [sp, #12]
 800e262:	f001 f895 	bl	800f390 <__mcmp>
 800e266:	2800      	cmp	r0, #0
 800e268:	dc98      	bgt.n	800e19c <_dtoa_r+0xa44>
 800e26a:	d102      	bne.n	800e272 <_dtoa_r+0xb1a>
 800e26c:	f01a 0f01 	tst.w	sl, #1
 800e270:	d194      	bne.n	800e19c <_dtoa_r+0xa44>
 800e272:	4633      	mov	r3, r6
 800e274:	461e      	mov	r6, r3
 800e276:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e27a:	2a30      	cmp	r2, #48	; 0x30
 800e27c:	d0fa      	beq.n	800e274 <_dtoa_r+0xb1c>
 800e27e:	e6e8      	b.n	800e052 <_dtoa_r+0x8fa>
 800e280:	9a04      	ldr	r2, [sp, #16]
 800e282:	429a      	cmp	r2, r3
 800e284:	d18b      	bne.n	800e19e <_dtoa_r+0xa46>
 800e286:	2331      	movs	r3, #49	; 0x31
 800e288:	f108 0801 	add.w	r8, r8, #1
 800e28c:	7013      	strb	r3, [r2, #0]
 800e28e:	e6e0      	b.n	800e052 <_dtoa_r+0x8fa>
 800e290:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <_dtoa_r+0xb60>)
 800e292:	f7ff bab1 	b.w	800d7f8 <_dtoa_r+0xa0>
 800e296:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f47f aa95 	bne.w	800d7c8 <_dtoa_r+0x70>
 800e29e:	4b07      	ldr	r3, [pc, #28]	; (800e2bc <_dtoa_r+0xb64>)
 800e2a0:	f7ff baaa 	b.w	800d7f8 <_dtoa_r+0xa0>
 800e2a4:	9b08      	ldr	r3, [sp, #32]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	dcb6      	bgt.n	800e218 <_dtoa_r+0xac0>
 800e2aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	f73f aebc 	bgt.w	800e02a <_dtoa_r+0x8d2>
 800e2b2:	e7b1      	b.n	800e218 <_dtoa_r+0xac0>
 800e2b4:	0805fd61 	.word	0x0805fd61
 800e2b8:	0805fd32 	.word	0x0805fd32
 800e2bc:	0805fd58 	.word	0x0805fd58

0800e2c0 <__sflush_r>:
 800e2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c2:	898b      	ldrh	r3, [r1, #12]
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	0718      	lsls	r0, r3, #28
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2ce:	d45e      	bmi.n	800e38e <__sflush_r+0xce>
 800e2d0:	684b      	ldr	r3, [r1, #4]
 800e2d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	818a      	strh	r2, [r1, #12]
 800e2da:	dc04      	bgt.n	800e2e6 <__sflush_r+0x26>
 800e2dc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dc01      	bgt.n	800e2e6 <__sflush_r+0x26>
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2e8:	2e00      	cmp	r6, #0
 800e2ea:	d0fa      	beq.n	800e2e2 <__sflush_r+0x22>
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e2f2:	682f      	ldr	r7, [r5, #0]
 800e2f4:	602b      	str	r3, [r5, #0]
 800e2f6:	d036      	beq.n	800e366 <__sflush_r+0xa6>
 800e2f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e2fa:	89a3      	ldrh	r3, [r4, #12]
 800e2fc:	075a      	lsls	r2, r3, #29
 800e2fe:	d505      	bpl.n	800e30c <__sflush_r+0x4c>
 800e300:	6863      	ldr	r3, [r4, #4]
 800e302:	1ac0      	subs	r0, r0, r3
 800e304:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e306:	b10b      	cbz	r3, 800e30c <__sflush_r+0x4c>
 800e308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e30a:	1ac0      	subs	r0, r0, r3
 800e30c:	2300      	movs	r3, #0
 800e30e:	4602      	mov	r2, r0
 800e310:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e312:	4628      	mov	r0, r5
 800e314:	69e1      	ldr	r1, [r4, #28]
 800e316:	47b0      	blx	r6
 800e318:	1c43      	adds	r3, r0, #1
 800e31a:	89a3      	ldrh	r3, [r4, #12]
 800e31c:	d106      	bne.n	800e32c <__sflush_r+0x6c>
 800e31e:	6829      	ldr	r1, [r5, #0]
 800e320:	291d      	cmp	r1, #29
 800e322:	d830      	bhi.n	800e386 <__sflush_r+0xc6>
 800e324:	4a2a      	ldr	r2, [pc, #168]	; (800e3d0 <__sflush_r+0x110>)
 800e326:	40ca      	lsrs	r2, r1
 800e328:	07d6      	lsls	r6, r2, #31
 800e32a:	d52c      	bpl.n	800e386 <__sflush_r+0xc6>
 800e32c:	2200      	movs	r2, #0
 800e32e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e332:	b21b      	sxth	r3, r3
 800e334:	6062      	str	r2, [r4, #4]
 800e336:	6922      	ldr	r2, [r4, #16]
 800e338:	04d9      	lsls	r1, r3, #19
 800e33a:	81a3      	strh	r3, [r4, #12]
 800e33c:	6022      	str	r2, [r4, #0]
 800e33e:	d504      	bpl.n	800e34a <__sflush_r+0x8a>
 800e340:	1c42      	adds	r2, r0, #1
 800e342:	d101      	bne.n	800e348 <__sflush_r+0x88>
 800e344:	682b      	ldr	r3, [r5, #0]
 800e346:	b903      	cbnz	r3, 800e34a <__sflush_r+0x8a>
 800e348:	6520      	str	r0, [r4, #80]	; 0x50
 800e34a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e34c:	602f      	str	r7, [r5, #0]
 800e34e:	2900      	cmp	r1, #0
 800e350:	d0c7      	beq.n	800e2e2 <__sflush_r+0x22>
 800e352:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e356:	4299      	cmp	r1, r3
 800e358:	d002      	beq.n	800e360 <__sflush_r+0xa0>
 800e35a:	4628      	mov	r0, r5
 800e35c:	f000 f922 	bl	800e5a4 <_free_r>
 800e360:	2000      	movs	r0, #0
 800e362:	6320      	str	r0, [r4, #48]	; 0x30
 800e364:	e7be      	b.n	800e2e4 <__sflush_r+0x24>
 800e366:	69e1      	ldr	r1, [r4, #28]
 800e368:	2301      	movs	r3, #1
 800e36a:	4628      	mov	r0, r5
 800e36c:	47b0      	blx	r6
 800e36e:	1c41      	adds	r1, r0, #1
 800e370:	d1c3      	bne.n	800e2fa <__sflush_r+0x3a>
 800e372:	682b      	ldr	r3, [r5, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d0c0      	beq.n	800e2fa <__sflush_r+0x3a>
 800e378:	2b1d      	cmp	r3, #29
 800e37a:	d001      	beq.n	800e380 <__sflush_r+0xc0>
 800e37c:	2b16      	cmp	r3, #22
 800e37e:	d101      	bne.n	800e384 <__sflush_r+0xc4>
 800e380:	602f      	str	r7, [r5, #0]
 800e382:	e7ae      	b.n	800e2e2 <__sflush_r+0x22>
 800e384:	89a3      	ldrh	r3, [r4, #12]
 800e386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e38a:	81a3      	strh	r3, [r4, #12]
 800e38c:	e7aa      	b.n	800e2e4 <__sflush_r+0x24>
 800e38e:	690f      	ldr	r7, [r1, #16]
 800e390:	2f00      	cmp	r7, #0
 800e392:	d0a6      	beq.n	800e2e2 <__sflush_r+0x22>
 800e394:	079b      	lsls	r3, r3, #30
 800e396:	bf18      	it	ne
 800e398:	2300      	movne	r3, #0
 800e39a:	680e      	ldr	r6, [r1, #0]
 800e39c:	bf08      	it	eq
 800e39e:	694b      	ldreq	r3, [r1, #20]
 800e3a0:	1bf6      	subs	r6, r6, r7
 800e3a2:	600f      	str	r7, [r1, #0]
 800e3a4:	608b      	str	r3, [r1, #8]
 800e3a6:	2e00      	cmp	r6, #0
 800e3a8:	dd9b      	ble.n	800e2e2 <__sflush_r+0x22>
 800e3aa:	4633      	mov	r3, r6
 800e3ac:	463a      	mov	r2, r7
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	69e1      	ldr	r1, [r4, #28]
 800e3b2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800e3b6:	47e0      	blx	ip
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	dc06      	bgt.n	800e3ca <__sflush_r+0x10a>
 800e3bc:	89a3      	ldrh	r3, [r4, #12]
 800e3be:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3c6:	81a3      	strh	r3, [r4, #12]
 800e3c8:	e78c      	b.n	800e2e4 <__sflush_r+0x24>
 800e3ca:	4407      	add	r7, r0
 800e3cc:	1a36      	subs	r6, r6, r0
 800e3ce:	e7ea      	b.n	800e3a6 <__sflush_r+0xe6>
 800e3d0:	20400001 	.word	0x20400001

0800e3d4 <_fflush_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	460c      	mov	r4, r1
 800e3d8:	4605      	mov	r5, r0
 800e3da:	b118      	cbz	r0, 800e3e4 <_fflush_r+0x10>
 800e3dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e3de:	b90b      	cbnz	r3, 800e3e4 <_fflush_r+0x10>
 800e3e0:	f000 f864 	bl	800e4ac <__sinit>
 800e3e4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800e3e8:	b1b8      	cbz	r0, 800e41a <_fflush_r+0x46>
 800e3ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3ec:	07db      	lsls	r3, r3, #31
 800e3ee:	d404      	bmi.n	800e3fa <_fflush_r+0x26>
 800e3f0:	0581      	lsls	r1, r0, #22
 800e3f2:	d402      	bmi.n	800e3fa <_fflush_r+0x26>
 800e3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3f6:	f7fc f92f 	bl	800a658 <__retarget_lock_acquire_recursive>
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	f7ff ff5f 	bl	800e2c0 <__sflush_r>
 800e402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e404:	4605      	mov	r5, r0
 800e406:	07da      	lsls	r2, r3, #31
 800e408:	d405      	bmi.n	800e416 <_fflush_r+0x42>
 800e40a:	89a3      	ldrh	r3, [r4, #12]
 800e40c:	059b      	lsls	r3, r3, #22
 800e40e:	d402      	bmi.n	800e416 <_fflush_r+0x42>
 800e410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e412:	f7fc f922 	bl	800a65a <__retarget_lock_release_recursive>
 800e416:	4628      	mov	r0, r5
 800e418:	bd38      	pop	{r3, r4, r5, pc}
 800e41a:	4605      	mov	r5, r0
 800e41c:	e7fb      	b.n	800e416 <_fflush_r+0x42>
	...

0800e420 <std>:
 800e420:	2300      	movs	r3, #0
 800e422:	b510      	push	{r4, lr}
 800e424:	4604      	mov	r4, r0
 800e426:	e9c0 3300 	strd	r3, r3, [r0]
 800e42a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e42e:	6083      	str	r3, [r0, #8]
 800e430:	8181      	strh	r1, [r0, #12]
 800e432:	6643      	str	r3, [r0, #100]	; 0x64
 800e434:	81c2      	strh	r2, [r0, #14]
 800e436:	6183      	str	r3, [r0, #24]
 800e438:	4619      	mov	r1, r3
 800e43a:	2208      	movs	r2, #8
 800e43c:	305c      	adds	r0, #92	; 0x5c
 800e43e:	f7fa fec1 	bl	80091c4 <memset>
 800e442:	4b07      	ldr	r3, [pc, #28]	; (800e460 <std+0x40>)
 800e444:	61e4      	str	r4, [r4, #28]
 800e446:	6223      	str	r3, [r4, #32]
 800e448:	4b06      	ldr	r3, [pc, #24]	; (800e464 <std+0x44>)
 800e44a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e44e:	6263      	str	r3, [r4, #36]	; 0x24
 800e450:	4b05      	ldr	r3, [pc, #20]	; (800e468 <std+0x48>)
 800e452:	62a3      	str	r3, [r4, #40]	; 0x28
 800e454:	4b05      	ldr	r3, [pc, #20]	; (800e46c <std+0x4c>)
 800e456:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e45c:	f7fc b8fa 	b.w	800a654 <__retarget_lock_init_recursive>
 800e460:	08009229 	.word	0x08009229
 800e464:	0800924f 	.word	0x0800924f
 800e468:	08009287 	.word	0x08009287
 800e46c:	080092ab 	.word	0x080092ab

0800e470 <_cleanup_r>:
 800e470:	4901      	ldr	r1, [pc, #4]	; (800e478 <_cleanup_r+0x8>)
 800e472:	f000 b957 	b.w	800e724 <_fwalk_reent>
 800e476:	bf00      	nop
 800e478:	0800f9cf 	.word	0x0800f9cf

0800e47c <__sfp_lock_acquire>:
 800e47c:	4801      	ldr	r0, [pc, #4]	; (800e484 <__sfp_lock_acquire+0x8>)
 800e47e:	f7fc b8eb 	b.w	800a658 <__retarget_lock_acquire_recursive>
 800e482:	bf00      	nop
 800e484:	20000c16 	.word	0x20000c16

0800e488 <__sfp_lock_release>:
 800e488:	4801      	ldr	r0, [pc, #4]	; (800e490 <__sfp_lock_release+0x8>)
 800e48a:	f7fc b8e6 	b.w	800a65a <__retarget_lock_release_recursive>
 800e48e:	bf00      	nop
 800e490:	20000c16 	.word	0x20000c16

0800e494 <__sinit_lock_acquire>:
 800e494:	4801      	ldr	r0, [pc, #4]	; (800e49c <__sinit_lock_acquire+0x8>)
 800e496:	f7fc b8df 	b.w	800a658 <__retarget_lock_acquire_recursive>
 800e49a:	bf00      	nop
 800e49c:	20000c17 	.word	0x20000c17

0800e4a0 <__sinit_lock_release>:
 800e4a0:	4801      	ldr	r0, [pc, #4]	; (800e4a8 <__sinit_lock_release+0x8>)
 800e4a2:	f7fc b8da 	b.w	800a65a <__retarget_lock_release_recursive>
 800e4a6:	bf00      	nop
 800e4a8:	20000c17 	.word	0x20000c17

0800e4ac <__sinit>:
 800e4ac:	b510      	push	{r4, lr}
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	f7ff fff0 	bl	800e494 <__sinit_lock_acquire>
 800e4b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e4b6:	b11a      	cbz	r2, 800e4c0 <__sinit+0x14>
 800e4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4bc:	f7ff bff0 	b.w	800e4a0 <__sinit_lock_release>
 800e4c0:	4b0d      	ldr	r3, [pc, #52]	; (800e4f8 <__sinit+0x4c>)
 800e4c2:	2104      	movs	r1, #4
 800e4c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e4c6:	2303      	movs	r3, #3
 800e4c8:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800e4cc:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800e4d0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800e4d4:	6860      	ldr	r0, [r4, #4]
 800e4d6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800e4da:	f7ff ffa1 	bl	800e420 <std>
 800e4de:	2201      	movs	r2, #1
 800e4e0:	2109      	movs	r1, #9
 800e4e2:	68a0      	ldr	r0, [r4, #8]
 800e4e4:	f7ff ff9c 	bl	800e420 <std>
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	2112      	movs	r1, #18
 800e4ec:	68e0      	ldr	r0, [r4, #12]
 800e4ee:	f7ff ff97 	bl	800e420 <std>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e4f6:	e7df      	b.n	800e4b8 <__sinit+0xc>
 800e4f8:	0800e471 	.word	0x0800e471

0800e4fc <_malloc_trim_r>:
 800e4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e500:	4606      	mov	r6, r0
 800e502:	2008      	movs	r0, #8
 800e504:	460c      	mov	r4, r1
 800e506:	f7ff f807 	bl	800d518 <sysconf>
 800e50a:	4680      	mov	r8, r0
 800e50c:	4f22      	ldr	r7, [pc, #136]	; (800e598 <_malloc_trim_r+0x9c>)
 800e50e:	4630      	mov	r0, r6
 800e510:	f7fc fb2e 	bl	800ab70 <__malloc_lock>
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	685d      	ldr	r5, [r3, #4]
 800e518:	f025 0503 	bic.w	r5, r5, #3
 800e51c:	1b2c      	subs	r4, r5, r4
 800e51e:	3c11      	subs	r4, #17
 800e520:	4444      	add	r4, r8
 800e522:	fbb4 f4f8 	udiv	r4, r4, r8
 800e526:	3c01      	subs	r4, #1
 800e528:	fb08 f404 	mul.w	r4, r8, r4
 800e52c:	45a0      	cmp	r8, r4
 800e52e:	dd05      	ble.n	800e53c <_malloc_trim_r+0x40>
 800e530:	4630      	mov	r0, r6
 800e532:	f7fc fb23 	bl	800ab7c <__malloc_unlock>
 800e536:	2000      	movs	r0, #0
 800e538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e53c:	2100      	movs	r1, #0
 800e53e:	4630      	mov	r0, r6
 800e540:	f7fc fce4 	bl	800af0c <_sbrk_r>
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	442b      	add	r3, r5
 800e548:	4298      	cmp	r0, r3
 800e54a:	d1f1      	bne.n	800e530 <_malloc_trim_r+0x34>
 800e54c:	4630      	mov	r0, r6
 800e54e:	4261      	negs	r1, r4
 800e550:	f7fc fcdc 	bl	800af0c <_sbrk_r>
 800e554:	3001      	adds	r0, #1
 800e556:	d110      	bne.n	800e57a <_malloc_trim_r+0x7e>
 800e558:	2100      	movs	r1, #0
 800e55a:	4630      	mov	r0, r6
 800e55c:	f7fc fcd6 	bl	800af0c <_sbrk_r>
 800e560:	68ba      	ldr	r2, [r7, #8]
 800e562:	1a83      	subs	r3, r0, r2
 800e564:	2b0f      	cmp	r3, #15
 800e566:	dde3      	ble.n	800e530 <_malloc_trim_r+0x34>
 800e568:	490c      	ldr	r1, [pc, #48]	; (800e59c <_malloc_trim_r+0xa0>)
 800e56a:	f043 0301 	orr.w	r3, r3, #1
 800e56e:	6809      	ldr	r1, [r1, #0]
 800e570:	6053      	str	r3, [r2, #4]
 800e572:	1a40      	subs	r0, r0, r1
 800e574:	490a      	ldr	r1, [pc, #40]	; (800e5a0 <_malloc_trim_r+0xa4>)
 800e576:	6008      	str	r0, [r1, #0]
 800e578:	e7da      	b.n	800e530 <_malloc_trim_r+0x34>
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	4a08      	ldr	r2, [pc, #32]	; (800e5a0 <_malloc_trim_r+0xa4>)
 800e57e:	1b2d      	subs	r5, r5, r4
 800e580:	f045 0501 	orr.w	r5, r5, #1
 800e584:	605d      	str	r5, [r3, #4]
 800e586:	6813      	ldr	r3, [r2, #0]
 800e588:	4630      	mov	r0, r6
 800e58a:	1b1b      	subs	r3, r3, r4
 800e58c:	6013      	str	r3, [r2, #0]
 800e58e:	f7fc faf5 	bl	800ab7c <__malloc_unlock>
 800e592:	2001      	movs	r0, #1
 800e594:	e7d0      	b.n	800e538 <_malloc_trim_r+0x3c>
 800e596:	bf00      	nop
 800e598:	200005e8 	.word	0x200005e8
 800e59c:	200009f0 	.word	0x200009f0
 800e5a0:	20000c18 	.word	0x20000c18

0800e5a4 <_free_r>:
 800e5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	460f      	mov	r7, r1
 800e5aa:	2900      	cmp	r1, #0
 800e5ac:	f000 80b1 	beq.w	800e712 <_free_r+0x16e>
 800e5b0:	f7fc fade 	bl	800ab70 <__malloc_lock>
 800e5b4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e5b8:	4856      	ldr	r0, [pc, #344]	; (800e714 <_free_r+0x170>)
 800e5ba:	f022 0401 	bic.w	r4, r2, #1
 800e5be:	f1a7 0308 	sub.w	r3, r7, #8
 800e5c2:	eb03 0c04 	add.w	ip, r3, r4
 800e5c6:	6881      	ldr	r1, [r0, #8]
 800e5c8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800e5cc:	4561      	cmp	r1, ip
 800e5ce:	f026 0603 	bic.w	r6, r6, #3
 800e5d2:	f002 0201 	and.w	r2, r2, #1
 800e5d6:	d11b      	bne.n	800e610 <_free_r+0x6c>
 800e5d8:	4434      	add	r4, r6
 800e5da:	b93a      	cbnz	r2, 800e5ec <_free_r+0x48>
 800e5dc:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800e5e0:	1a9b      	subs	r3, r3, r2
 800e5e2:	4414      	add	r4, r2
 800e5e4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800e5e8:	60ca      	str	r2, [r1, #12]
 800e5ea:	6091      	str	r1, [r2, #8]
 800e5ec:	f044 0201 	orr.w	r2, r4, #1
 800e5f0:	605a      	str	r2, [r3, #4]
 800e5f2:	6083      	str	r3, [r0, #8]
 800e5f4:	4b48      	ldr	r3, [pc, #288]	; (800e718 <_free_r+0x174>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	42a3      	cmp	r3, r4
 800e5fa:	d804      	bhi.n	800e606 <_free_r+0x62>
 800e5fc:	4b47      	ldr	r3, [pc, #284]	; (800e71c <_free_r+0x178>)
 800e5fe:	4628      	mov	r0, r5
 800e600:	6819      	ldr	r1, [r3, #0]
 800e602:	f7ff ff7b 	bl	800e4fc <_malloc_trim_r>
 800e606:	4628      	mov	r0, r5
 800e608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e60c:	f7fc bab6 	b.w	800ab7c <__malloc_unlock>
 800e610:	f8cc 6004 	str.w	r6, [ip, #4]
 800e614:	2a00      	cmp	r2, #0
 800e616:	d138      	bne.n	800e68a <_free_r+0xe6>
 800e618:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800e61c:	f100 0708 	add.w	r7, r0, #8
 800e620:	1a5b      	subs	r3, r3, r1
 800e622:	440c      	add	r4, r1
 800e624:	6899      	ldr	r1, [r3, #8]
 800e626:	42b9      	cmp	r1, r7
 800e628:	d031      	beq.n	800e68e <_free_r+0xea>
 800e62a:	68df      	ldr	r7, [r3, #12]
 800e62c:	60cf      	str	r7, [r1, #12]
 800e62e:	60b9      	str	r1, [r7, #8]
 800e630:	eb0c 0106 	add.w	r1, ip, r6
 800e634:	6849      	ldr	r1, [r1, #4]
 800e636:	07c9      	lsls	r1, r1, #31
 800e638:	d40b      	bmi.n	800e652 <_free_r+0xae>
 800e63a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800e63e:	4434      	add	r4, r6
 800e640:	bb3a      	cbnz	r2, 800e692 <_free_r+0xee>
 800e642:	4e37      	ldr	r6, [pc, #220]	; (800e720 <_free_r+0x17c>)
 800e644:	42b1      	cmp	r1, r6
 800e646:	d124      	bne.n	800e692 <_free_r+0xee>
 800e648:	2201      	movs	r2, #1
 800e64a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e64e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800e652:	f044 0101 	orr.w	r1, r4, #1
 800e656:	6059      	str	r1, [r3, #4]
 800e658:	511c      	str	r4, [r3, r4]
 800e65a:	2a00      	cmp	r2, #0
 800e65c:	d1d3      	bne.n	800e606 <_free_r+0x62>
 800e65e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800e662:	d21b      	bcs.n	800e69c <_free_r+0xf8>
 800e664:	0961      	lsrs	r1, r4, #5
 800e666:	08e2      	lsrs	r2, r4, #3
 800e668:	2401      	movs	r4, #1
 800e66a:	408c      	lsls	r4, r1
 800e66c:	6841      	ldr	r1, [r0, #4]
 800e66e:	3201      	adds	r2, #1
 800e670:	430c      	orrs	r4, r1
 800e672:	6044      	str	r4, [r0, #4]
 800e674:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800e678:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800e67c:	3908      	subs	r1, #8
 800e67e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800e682:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800e686:	60e3      	str	r3, [r4, #12]
 800e688:	e7bd      	b.n	800e606 <_free_r+0x62>
 800e68a:	2200      	movs	r2, #0
 800e68c:	e7d0      	b.n	800e630 <_free_r+0x8c>
 800e68e:	2201      	movs	r2, #1
 800e690:	e7ce      	b.n	800e630 <_free_r+0x8c>
 800e692:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800e696:	60ce      	str	r6, [r1, #12]
 800e698:	60b1      	str	r1, [r6, #8]
 800e69a:	e7da      	b.n	800e652 <_free_r+0xae>
 800e69c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800e6a0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800e6a4:	d214      	bcs.n	800e6d0 <_free_r+0x12c>
 800e6a6:	09a2      	lsrs	r2, r4, #6
 800e6a8:	3238      	adds	r2, #56	; 0x38
 800e6aa:	1c51      	adds	r1, r2, #1
 800e6ac:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800e6b0:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800e6b4:	428e      	cmp	r6, r1
 800e6b6:	d125      	bne.n	800e704 <_free_r+0x160>
 800e6b8:	2401      	movs	r4, #1
 800e6ba:	1092      	asrs	r2, r2, #2
 800e6bc:	fa04 f202 	lsl.w	r2, r4, r2
 800e6c0:	6844      	ldr	r4, [r0, #4]
 800e6c2:	4322      	orrs	r2, r4
 800e6c4:	6042      	str	r2, [r0, #4]
 800e6c6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800e6ca:	60b3      	str	r3, [r6, #8]
 800e6cc:	60cb      	str	r3, [r1, #12]
 800e6ce:	e79a      	b.n	800e606 <_free_r+0x62>
 800e6d0:	2a14      	cmp	r2, #20
 800e6d2:	d801      	bhi.n	800e6d8 <_free_r+0x134>
 800e6d4:	325b      	adds	r2, #91	; 0x5b
 800e6d6:	e7e8      	b.n	800e6aa <_free_r+0x106>
 800e6d8:	2a54      	cmp	r2, #84	; 0x54
 800e6da:	d802      	bhi.n	800e6e2 <_free_r+0x13e>
 800e6dc:	0b22      	lsrs	r2, r4, #12
 800e6de:	326e      	adds	r2, #110	; 0x6e
 800e6e0:	e7e3      	b.n	800e6aa <_free_r+0x106>
 800e6e2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800e6e6:	d802      	bhi.n	800e6ee <_free_r+0x14a>
 800e6e8:	0be2      	lsrs	r2, r4, #15
 800e6ea:	3277      	adds	r2, #119	; 0x77
 800e6ec:	e7dd      	b.n	800e6aa <_free_r+0x106>
 800e6ee:	f240 5154 	movw	r1, #1364	; 0x554
 800e6f2:	428a      	cmp	r2, r1
 800e6f4:	bf96      	itet	ls
 800e6f6:	0ca2      	lsrls	r2, r4, #18
 800e6f8:	227e      	movhi	r2, #126	; 0x7e
 800e6fa:	327c      	addls	r2, #124	; 0x7c
 800e6fc:	e7d5      	b.n	800e6aa <_free_r+0x106>
 800e6fe:	6889      	ldr	r1, [r1, #8]
 800e700:	428e      	cmp	r6, r1
 800e702:	d004      	beq.n	800e70e <_free_r+0x16a>
 800e704:	684a      	ldr	r2, [r1, #4]
 800e706:	f022 0203 	bic.w	r2, r2, #3
 800e70a:	42a2      	cmp	r2, r4
 800e70c:	d8f7      	bhi.n	800e6fe <_free_r+0x15a>
 800e70e:	68ce      	ldr	r6, [r1, #12]
 800e710:	e7d9      	b.n	800e6c6 <_free_r+0x122>
 800e712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e714:	200005e8 	.word	0x200005e8
 800e718:	200009f4 	.word	0x200009f4
 800e71c:	20000c48 	.word	0x20000c48
 800e720:	200005f0 	.word	0x200005f0

0800e724 <_fwalk_reent>:
 800e724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e728:	4606      	mov	r6, r0
 800e72a:	4688      	mov	r8, r1
 800e72c:	2700      	movs	r7, #0
 800e72e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800e732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e736:	f1b9 0901 	subs.w	r9, r9, #1
 800e73a:	d505      	bpl.n	800e748 <_fwalk_reent+0x24>
 800e73c:	6824      	ldr	r4, [r4, #0]
 800e73e:	2c00      	cmp	r4, #0
 800e740:	d1f7      	bne.n	800e732 <_fwalk_reent+0xe>
 800e742:	4638      	mov	r0, r7
 800e744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e748:	89ab      	ldrh	r3, [r5, #12]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d907      	bls.n	800e75e <_fwalk_reent+0x3a>
 800e74e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e752:	3301      	adds	r3, #1
 800e754:	d003      	beq.n	800e75e <_fwalk_reent+0x3a>
 800e756:	4629      	mov	r1, r5
 800e758:	4630      	mov	r0, r6
 800e75a:	47c0      	blx	r8
 800e75c:	4307      	orrs	r7, r0
 800e75e:	3568      	adds	r5, #104	; 0x68
 800e760:	e7e9      	b.n	800e736 <_fwalk_reent+0x12>

0800e762 <rshift>:
 800e762:	6903      	ldr	r3, [r0, #16]
 800e764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e768:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e76c:	f100 0414 	add.w	r4, r0, #20
 800e770:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e774:	dd46      	ble.n	800e804 <rshift+0xa2>
 800e776:	f011 011f 	ands.w	r1, r1, #31
 800e77a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e77e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e782:	d10c      	bne.n	800e79e <rshift+0x3c>
 800e784:	4629      	mov	r1, r5
 800e786:	f100 0710 	add.w	r7, r0, #16
 800e78a:	42b1      	cmp	r1, r6
 800e78c:	d335      	bcc.n	800e7fa <rshift+0x98>
 800e78e:	1a9b      	subs	r3, r3, r2
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	1eea      	subs	r2, r5, #3
 800e794:	4296      	cmp	r6, r2
 800e796:	bf38      	it	cc
 800e798:	2300      	movcc	r3, #0
 800e79a:	4423      	add	r3, r4
 800e79c:	e015      	b.n	800e7ca <rshift+0x68>
 800e79e:	46a1      	mov	r9, r4
 800e7a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e7a4:	f1c1 0820 	rsb	r8, r1, #32
 800e7a8:	40cf      	lsrs	r7, r1
 800e7aa:	f105 0e04 	add.w	lr, r5, #4
 800e7ae:	4576      	cmp	r6, lr
 800e7b0:	46f4      	mov	ip, lr
 800e7b2:	d816      	bhi.n	800e7e2 <rshift+0x80>
 800e7b4:	1a9a      	subs	r2, r3, r2
 800e7b6:	0092      	lsls	r2, r2, #2
 800e7b8:	3a04      	subs	r2, #4
 800e7ba:	3501      	adds	r5, #1
 800e7bc:	42ae      	cmp	r6, r5
 800e7be:	bf38      	it	cc
 800e7c0:	2200      	movcc	r2, #0
 800e7c2:	18a3      	adds	r3, r4, r2
 800e7c4:	50a7      	str	r7, [r4, r2]
 800e7c6:	b107      	cbz	r7, 800e7ca <rshift+0x68>
 800e7c8:	3304      	adds	r3, #4
 800e7ca:	42a3      	cmp	r3, r4
 800e7cc:	eba3 0204 	sub.w	r2, r3, r4
 800e7d0:	bf08      	it	eq
 800e7d2:	2300      	moveq	r3, #0
 800e7d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e7d8:	6102      	str	r2, [r0, #16]
 800e7da:	bf08      	it	eq
 800e7dc:	6143      	streq	r3, [r0, #20]
 800e7de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7e2:	f8dc c000 	ldr.w	ip, [ip]
 800e7e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800e7ea:	ea4c 0707 	orr.w	r7, ip, r7
 800e7ee:	f849 7b04 	str.w	r7, [r9], #4
 800e7f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e7f6:	40cf      	lsrs	r7, r1
 800e7f8:	e7d9      	b.n	800e7ae <rshift+0x4c>
 800e7fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800e7fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800e802:	e7c2      	b.n	800e78a <rshift+0x28>
 800e804:	4623      	mov	r3, r4
 800e806:	e7e0      	b.n	800e7ca <rshift+0x68>

0800e808 <__hexdig_fun>:
 800e808:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e80c:	2b09      	cmp	r3, #9
 800e80e:	d802      	bhi.n	800e816 <__hexdig_fun+0xe>
 800e810:	3820      	subs	r0, #32
 800e812:	b2c0      	uxtb	r0, r0
 800e814:	4770      	bx	lr
 800e816:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e81a:	2b05      	cmp	r3, #5
 800e81c:	d801      	bhi.n	800e822 <__hexdig_fun+0x1a>
 800e81e:	3847      	subs	r0, #71	; 0x47
 800e820:	e7f7      	b.n	800e812 <__hexdig_fun+0xa>
 800e822:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e826:	2b05      	cmp	r3, #5
 800e828:	d801      	bhi.n	800e82e <__hexdig_fun+0x26>
 800e82a:	3827      	subs	r0, #39	; 0x27
 800e82c:	e7f1      	b.n	800e812 <__hexdig_fun+0xa>
 800e82e:	2000      	movs	r0, #0
 800e830:	4770      	bx	lr
	...

0800e834 <__gethex>:
 800e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e838:	b08b      	sub	sp, #44	; 0x2c
 800e83a:	9305      	str	r3, [sp, #20]
 800e83c:	4bb2      	ldr	r3, [pc, #712]	; (800eb08 <__gethex+0x2d4>)
 800e83e:	9002      	str	r0, [sp, #8]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	468b      	mov	fp, r1
 800e844:	4618      	mov	r0, r3
 800e846:	4690      	mov	r8, r2
 800e848:	9303      	str	r3, [sp, #12]
 800e84a:	f7f1 fced 	bl	8000228 <strlen>
 800e84e:	4682      	mov	sl, r0
 800e850:	9b03      	ldr	r3, [sp, #12]
 800e852:	f8db 2000 	ldr.w	r2, [fp]
 800e856:	4403      	add	r3, r0
 800e858:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e85c:	9306      	str	r3, [sp, #24]
 800e85e:	1c93      	adds	r3, r2, #2
 800e860:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e864:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e868:	32fe      	adds	r2, #254	; 0xfe
 800e86a:	18d1      	adds	r1, r2, r3
 800e86c:	461f      	mov	r7, r3
 800e86e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e872:	9101      	str	r1, [sp, #4]
 800e874:	2830      	cmp	r0, #48	; 0x30
 800e876:	d0f8      	beq.n	800e86a <__gethex+0x36>
 800e878:	f7ff ffc6 	bl	800e808 <__hexdig_fun>
 800e87c:	4604      	mov	r4, r0
 800e87e:	2800      	cmp	r0, #0
 800e880:	d13a      	bne.n	800e8f8 <__gethex+0xc4>
 800e882:	4652      	mov	r2, sl
 800e884:	4638      	mov	r0, r7
 800e886:	9903      	ldr	r1, [sp, #12]
 800e888:	f000 ffac 	bl	800f7e4 <strncmp>
 800e88c:	4605      	mov	r5, r0
 800e88e:	2800      	cmp	r0, #0
 800e890:	d166      	bne.n	800e960 <__gethex+0x12c>
 800e892:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e896:	eb07 060a 	add.w	r6, r7, sl
 800e89a:	f7ff ffb5 	bl	800e808 <__hexdig_fun>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d060      	beq.n	800e964 <__gethex+0x130>
 800e8a2:	4633      	mov	r3, r6
 800e8a4:	7818      	ldrb	r0, [r3, #0]
 800e8a6:	461f      	mov	r7, r3
 800e8a8:	2830      	cmp	r0, #48	; 0x30
 800e8aa:	f103 0301 	add.w	r3, r3, #1
 800e8ae:	d0f9      	beq.n	800e8a4 <__gethex+0x70>
 800e8b0:	f7ff ffaa 	bl	800e808 <__hexdig_fun>
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	fab0 f480 	clz	r4, r0
 800e8ba:	4635      	mov	r5, r6
 800e8bc:	0964      	lsrs	r4, r4, #5
 800e8be:	9301      	str	r3, [sp, #4]
 800e8c0:	463a      	mov	r2, r7
 800e8c2:	4616      	mov	r6, r2
 800e8c4:	7830      	ldrb	r0, [r6, #0]
 800e8c6:	3201      	adds	r2, #1
 800e8c8:	f7ff ff9e 	bl	800e808 <__hexdig_fun>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d1f8      	bne.n	800e8c2 <__gethex+0x8e>
 800e8d0:	4652      	mov	r2, sl
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	9903      	ldr	r1, [sp, #12]
 800e8d6:	f000 ff85 	bl	800f7e4 <strncmp>
 800e8da:	b980      	cbnz	r0, 800e8fe <__gethex+0xca>
 800e8dc:	b94d      	cbnz	r5, 800e8f2 <__gethex+0xbe>
 800e8de:	eb06 050a 	add.w	r5, r6, sl
 800e8e2:	462a      	mov	r2, r5
 800e8e4:	4616      	mov	r6, r2
 800e8e6:	7830      	ldrb	r0, [r6, #0]
 800e8e8:	3201      	adds	r2, #1
 800e8ea:	f7ff ff8d 	bl	800e808 <__hexdig_fun>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d1f8      	bne.n	800e8e4 <__gethex+0xb0>
 800e8f2:	1bad      	subs	r5, r5, r6
 800e8f4:	00ad      	lsls	r5, r5, #2
 800e8f6:	e004      	b.n	800e902 <__gethex+0xce>
 800e8f8:	2400      	movs	r4, #0
 800e8fa:	4625      	mov	r5, r4
 800e8fc:	e7e0      	b.n	800e8c0 <__gethex+0x8c>
 800e8fe:	2d00      	cmp	r5, #0
 800e900:	d1f7      	bne.n	800e8f2 <__gethex+0xbe>
 800e902:	7833      	ldrb	r3, [r6, #0]
 800e904:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e908:	2b50      	cmp	r3, #80	; 0x50
 800e90a:	d139      	bne.n	800e980 <__gethex+0x14c>
 800e90c:	7873      	ldrb	r3, [r6, #1]
 800e90e:	2b2b      	cmp	r3, #43	; 0x2b
 800e910:	d02a      	beq.n	800e968 <__gethex+0x134>
 800e912:	2b2d      	cmp	r3, #45	; 0x2d
 800e914:	d02c      	beq.n	800e970 <__gethex+0x13c>
 800e916:	f04f 0900 	mov.w	r9, #0
 800e91a:	1c71      	adds	r1, r6, #1
 800e91c:	7808      	ldrb	r0, [r1, #0]
 800e91e:	f7ff ff73 	bl	800e808 <__hexdig_fun>
 800e922:	1e43      	subs	r3, r0, #1
 800e924:	b2db      	uxtb	r3, r3
 800e926:	2b18      	cmp	r3, #24
 800e928:	d82a      	bhi.n	800e980 <__gethex+0x14c>
 800e92a:	f1a0 0210 	sub.w	r2, r0, #16
 800e92e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e932:	f7ff ff69 	bl	800e808 <__hexdig_fun>
 800e936:	1e43      	subs	r3, r0, #1
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	2b18      	cmp	r3, #24
 800e93c:	d91b      	bls.n	800e976 <__gethex+0x142>
 800e93e:	f1b9 0f00 	cmp.w	r9, #0
 800e942:	d000      	beq.n	800e946 <__gethex+0x112>
 800e944:	4252      	negs	r2, r2
 800e946:	4415      	add	r5, r2
 800e948:	f8cb 1000 	str.w	r1, [fp]
 800e94c:	b1d4      	cbz	r4, 800e984 <__gethex+0x150>
 800e94e:	9b01      	ldr	r3, [sp, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	bf14      	ite	ne
 800e954:	2700      	movne	r7, #0
 800e956:	2706      	moveq	r7, #6
 800e958:	4638      	mov	r0, r7
 800e95a:	b00b      	add	sp, #44	; 0x2c
 800e95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e960:	463e      	mov	r6, r7
 800e962:	4625      	mov	r5, r4
 800e964:	2401      	movs	r4, #1
 800e966:	e7cc      	b.n	800e902 <__gethex+0xce>
 800e968:	f04f 0900 	mov.w	r9, #0
 800e96c:	1cb1      	adds	r1, r6, #2
 800e96e:	e7d5      	b.n	800e91c <__gethex+0xe8>
 800e970:	f04f 0901 	mov.w	r9, #1
 800e974:	e7fa      	b.n	800e96c <__gethex+0x138>
 800e976:	230a      	movs	r3, #10
 800e978:	fb03 0202 	mla	r2, r3, r2, r0
 800e97c:	3a10      	subs	r2, #16
 800e97e:	e7d6      	b.n	800e92e <__gethex+0xfa>
 800e980:	4631      	mov	r1, r6
 800e982:	e7e1      	b.n	800e948 <__gethex+0x114>
 800e984:	4621      	mov	r1, r4
 800e986:	1bf3      	subs	r3, r6, r7
 800e988:	3b01      	subs	r3, #1
 800e98a:	2b07      	cmp	r3, #7
 800e98c:	dc0a      	bgt.n	800e9a4 <__gethex+0x170>
 800e98e:	9802      	ldr	r0, [sp, #8]
 800e990:	f000 fa84 	bl	800ee9c <_Balloc>
 800e994:	4604      	mov	r4, r0
 800e996:	b940      	cbnz	r0, 800e9aa <__gethex+0x176>
 800e998:	4602      	mov	r2, r0
 800e99a:	21de      	movs	r1, #222	; 0xde
 800e99c:	4b5b      	ldr	r3, [pc, #364]	; (800eb0c <__gethex+0x2d8>)
 800e99e:	485c      	ldr	r0, [pc, #368]	; (800eb10 <__gethex+0x2dc>)
 800e9a0:	f000 ffc2 	bl	800f928 <__assert_func>
 800e9a4:	3101      	adds	r1, #1
 800e9a6:	105b      	asrs	r3, r3, #1
 800e9a8:	e7ef      	b.n	800e98a <__gethex+0x156>
 800e9aa:	f04f 0b00 	mov.w	fp, #0
 800e9ae:	f100 0914 	add.w	r9, r0, #20
 800e9b2:	f1ca 0301 	rsb	r3, sl, #1
 800e9b6:	f8cd 9010 	str.w	r9, [sp, #16]
 800e9ba:	f8cd b004 	str.w	fp, [sp, #4]
 800e9be:	9308      	str	r3, [sp, #32]
 800e9c0:	42b7      	cmp	r7, r6
 800e9c2:	d33f      	bcc.n	800ea44 <__gethex+0x210>
 800e9c4:	9f04      	ldr	r7, [sp, #16]
 800e9c6:	9b01      	ldr	r3, [sp, #4]
 800e9c8:	f847 3b04 	str.w	r3, [r7], #4
 800e9cc:	eba7 0709 	sub.w	r7, r7, r9
 800e9d0:	10bf      	asrs	r7, r7, #2
 800e9d2:	6127      	str	r7, [r4, #16]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f000 fb1f 	bl	800f018 <__hi0bits>
 800e9da:	017f      	lsls	r7, r7, #5
 800e9dc:	f8d8 6000 	ldr.w	r6, [r8]
 800e9e0:	1a3f      	subs	r7, r7, r0
 800e9e2:	42b7      	cmp	r7, r6
 800e9e4:	dd62      	ble.n	800eaac <__gethex+0x278>
 800e9e6:	1bbf      	subs	r7, r7, r6
 800e9e8:	4639      	mov	r1, r7
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f000 fe9f 	bl	800f72e <__any_on>
 800e9f0:	4682      	mov	sl, r0
 800e9f2:	b1a8      	cbz	r0, 800ea20 <__gethex+0x1ec>
 800e9f4:	f04f 0a01 	mov.w	sl, #1
 800e9f8:	1e7b      	subs	r3, r7, #1
 800e9fa:	1159      	asrs	r1, r3, #5
 800e9fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ea00:	f003 021f 	and.w	r2, r3, #31
 800ea04:	fa0a f202 	lsl.w	r2, sl, r2
 800ea08:	420a      	tst	r2, r1
 800ea0a:	d009      	beq.n	800ea20 <__gethex+0x1ec>
 800ea0c:	4553      	cmp	r3, sl
 800ea0e:	dd05      	ble.n	800ea1c <__gethex+0x1e8>
 800ea10:	4620      	mov	r0, r4
 800ea12:	1eb9      	subs	r1, r7, #2
 800ea14:	f000 fe8b 	bl	800f72e <__any_on>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d144      	bne.n	800eaa6 <__gethex+0x272>
 800ea1c:	f04f 0a02 	mov.w	sl, #2
 800ea20:	4639      	mov	r1, r7
 800ea22:	4620      	mov	r0, r4
 800ea24:	f7ff fe9d 	bl	800e762 <rshift>
 800ea28:	443d      	add	r5, r7
 800ea2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea2e:	42ab      	cmp	r3, r5
 800ea30:	da4a      	bge.n	800eac8 <__gethex+0x294>
 800ea32:	4621      	mov	r1, r4
 800ea34:	9802      	ldr	r0, [sp, #8]
 800ea36:	f000 fa56 	bl	800eee6 <_Bfree>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea3e:	27a3      	movs	r7, #163	; 0xa3
 800ea40:	6013      	str	r3, [r2, #0]
 800ea42:	e789      	b.n	800e958 <__gethex+0x124>
 800ea44:	1e73      	subs	r3, r6, #1
 800ea46:	9a06      	ldr	r2, [sp, #24]
 800ea48:	9307      	str	r3, [sp, #28]
 800ea4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d019      	beq.n	800ea86 <__gethex+0x252>
 800ea52:	f1bb 0f20 	cmp.w	fp, #32
 800ea56:	d107      	bne.n	800ea68 <__gethex+0x234>
 800ea58:	9b04      	ldr	r3, [sp, #16]
 800ea5a:	9a01      	ldr	r2, [sp, #4]
 800ea5c:	f843 2b04 	str.w	r2, [r3], #4
 800ea60:	9304      	str	r3, [sp, #16]
 800ea62:	2300      	movs	r3, #0
 800ea64:	469b      	mov	fp, r3
 800ea66:	9301      	str	r3, [sp, #4]
 800ea68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ea6c:	f7ff fecc 	bl	800e808 <__hexdig_fun>
 800ea70:	9b01      	ldr	r3, [sp, #4]
 800ea72:	f000 000f 	and.w	r0, r0, #15
 800ea76:	fa00 f00b 	lsl.w	r0, r0, fp
 800ea7a:	4303      	orrs	r3, r0
 800ea7c:	9301      	str	r3, [sp, #4]
 800ea7e:	f10b 0b04 	add.w	fp, fp, #4
 800ea82:	9b07      	ldr	r3, [sp, #28]
 800ea84:	e00d      	b.n	800eaa2 <__gethex+0x26e>
 800ea86:	9a08      	ldr	r2, [sp, #32]
 800ea88:	1e73      	subs	r3, r6, #1
 800ea8a:	4413      	add	r3, r2
 800ea8c:	42bb      	cmp	r3, r7
 800ea8e:	d3e0      	bcc.n	800ea52 <__gethex+0x21e>
 800ea90:	4618      	mov	r0, r3
 800ea92:	4652      	mov	r2, sl
 800ea94:	9903      	ldr	r1, [sp, #12]
 800ea96:	9309      	str	r3, [sp, #36]	; 0x24
 800ea98:	f000 fea4 	bl	800f7e4 <strncmp>
 800ea9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d1d7      	bne.n	800ea52 <__gethex+0x21e>
 800eaa2:	461e      	mov	r6, r3
 800eaa4:	e78c      	b.n	800e9c0 <__gethex+0x18c>
 800eaa6:	f04f 0a03 	mov.w	sl, #3
 800eaaa:	e7b9      	b.n	800ea20 <__gethex+0x1ec>
 800eaac:	da09      	bge.n	800eac2 <__gethex+0x28e>
 800eaae:	1bf7      	subs	r7, r6, r7
 800eab0:	4621      	mov	r1, r4
 800eab2:	463a      	mov	r2, r7
 800eab4:	9802      	ldr	r0, [sp, #8]
 800eab6:	f000 fbfb 	bl	800f2b0 <__lshift>
 800eaba:	4604      	mov	r4, r0
 800eabc:	1bed      	subs	r5, r5, r7
 800eabe:	f100 0914 	add.w	r9, r0, #20
 800eac2:	f04f 0a00 	mov.w	sl, #0
 800eac6:	e7b0      	b.n	800ea2a <__gethex+0x1f6>
 800eac8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eacc:	42a8      	cmp	r0, r5
 800eace:	dd72      	ble.n	800ebb6 <__gethex+0x382>
 800ead0:	1b45      	subs	r5, r0, r5
 800ead2:	42ae      	cmp	r6, r5
 800ead4:	dc35      	bgt.n	800eb42 <__gethex+0x30e>
 800ead6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d029      	beq.n	800eb32 <__gethex+0x2fe>
 800eade:	2b03      	cmp	r3, #3
 800eae0:	d02b      	beq.n	800eb3a <__gethex+0x306>
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d11c      	bne.n	800eb20 <__gethex+0x2ec>
 800eae6:	42ae      	cmp	r6, r5
 800eae8:	d11a      	bne.n	800eb20 <__gethex+0x2ec>
 800eaea:	2e01      	cmp	r6, #1
 800eaec:	d112      	bne.n	800eb14 <__gethex+0x2e0>
 800eaee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eaf2:	9a05      	ldr	r2, [sp, #20]
 800eaf4:	2762      	movs	r7, #98	; 0x62
 800eaf6:	6013      	str	r3, [r2, #0]
 800eaf8:	2301      	movs	r3, #1
 800eafa:	6123      	str	r3, [r4, #16]
 800eafc:	f8c9 3000 	str.w	r3, [r9]
 800eb00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb02:	601c      	str	r4, [r3, #0]
 800eb04:	e728      	b.n	800e958 <__gethex+0x124>
 800eb06:	bf00      	nop
 800eb08:	0805fe30 	.word	0x0805fe30
 800eb0c:	0805fd61 	.word	0x0805fd61
 800eb10:	0805fdcd 	.word	0x0805fdcd
 800eb14:	4620      	mov	r0, r4
 800eb16:	1e71      	subs	r1, r6, #1
 800eb18:	f000 fe09 	bl	800f72e <__any_on>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d1e6      	bne.n	800eaee <__gethex+0x2ba>
 800eb20:	4621      	mov	r1, r4
 800eb22:	9802      	ldr	r0, [sp, #8]
 800eb24:	f000 f9df 	bl	800eee6 <_Bfree>
 800eb28:	2300      	movs	r3, #0
 800eb2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eb2c:	2750      	movs	r7, #80	; 0x50
 800eb2e:	6013      	str	r3, [r2, #0]
 800eb30:	e712      	b.n	800e958 <__gethex+0x124>
 800eb32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1f3      	bne.n	800eb20 <__gethex+0x2ec>
 800eb38:	e7d9      	b.n	800eaee <__gethex+0x2ba>
 800eb3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d1d6      	bne.n	800eaee <__gethex+0x2ba>
 800eb40:	e7ee      	b.n	800eb20 <__gethex+0x2ec>
 800eb42:	1e6f      	subs	r7, r5, #1
 800eb44:	f1ba 0f00 	cmp.w	sl, #0
 800eb48:	d132      	bne.n	800ebb0 <__gethex+0x37c>
 800eb4a:	b127      	cbz	r7, 800eb56 <__gethex+0x322>
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f000 fded 	bl	800f72e <__any_on>
 800eb54:	4682      	mov	sl, r0
 800eb56:	2101      	movs	r1, #1
 800eb58:	117b      	asrs	r3, r7, #5
 800eb5a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800eb5e:	f007 071f 	and.w	r7, r7, #31
 800eb62:	fa01 f707 	lsl.w	r7, r1, r7
 800eb66:	421f      	tst	r7, r3
 800eb68:	f04f 0702 	mov.w	r7, #2
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	4620      	mov	r0, r4
 800eb70:	bf18      	it	ne
 800eb72:	f04a 0a02 	orrne.w	sl, sl, #2
 800eb76:	1b76      	subs	r6, r6, r5
 800eb78:	f7ff fdf3 	bl	800e762 <rshift>
 800eb7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eb80:	f1ba 0f00 	cmp.w	sl, #0
 800eb84:	d048      	beq.n	800ec18 <__gethex+0x3e4>
 800eb86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb8a:	2b02      	cmp	r3, #2
 800eb8c:	d015      	beq.n	800ebba <__gethex+0x386>
 800eb8e:	2b03      	cmp	r3, #3
 800eb90:	d017      	beq.n	800ebc2 <__gethex+0x38e>
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d109      	bne.n	800ebaa <__gethex+0x376>
 800eb96:	f01a 0f02 	tst.w	sl, #2
 800eb9a:	d006      	beq.n	800ebaa <__gethex+0x376>
 800eb9c:	f8d9 0000 	ldr.w	r0, [r9]
 800eba0:	ea4a 0a00 	orr.w	sl, sl, r0
 800eba4:	f01a 0f01 	tst.w	sl, #1
 800eba8:	d10e      	bne.n	800ebc8 <__gethex+0x394>
 800ebaa:	f047 0710 	orr.w	r7, r7, #16
 800ebae:	e033      	b.n	800ec18 <__gethex+0x3e4>
 800ebb0:	f04f 0a01 	mov.w	sl, #1
 800ebb4:	e7cf      	b.n	800eb56 <__gethex+0x322>
 800ebb6:	2701      	movs	r7, #1
 800ebb8:	e7e2      	b.n	800eb80 <__gethex+0x34c>
 800ebba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebbc:	f1c3 0301 	rsb	r3, r3, #1
 800ebc0:	9315      	str	r3, [sp, #84]	; 0x54
 800ebc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d0f0      	beq.n	800ebaa <__gethex+0x376>
 800ebc8:	f04f 0c00 	mov.w	ip, #0
 800ebcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ebd0:	f104 0314 	add.w	r3, r4, #20
 800ebd4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ebd8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebe2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ebe6:	d01c      	beq.n	800ec22 <__gethex+0x3ee>
 800ebe8:	3201      	adds	r2, #1
 800ebea:	6002      	str	r2, [r0, #0]
 800ebec:	2f02      	cmp	r7, #2
 800ebee:	f104 0314 	add.w	r3, r4, #20
 800ebf2:	d13d      	bne.n	800ec70 <__gethex+0x43c>
 800ebf4:	f8d8 2000 	ldr.w	r2, [r8]
 800ebf8:	3a01      	subs	r2, #1
 800ebfa:	42b2      	cmp	r2, r6
 800ebfc:	d10a      	bne.n	800ec14 <__gethex+0x3e0>
 800ebfe:	2201      	movs	r2, #1
 800ec00:	1171      	asrs	r1, r6, #5
 800ec02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec06:	f006 061f 	and.w	r6, r6, #31
 800ec0a:	fa02 f606 	lsl.w	r6, r2, r6
 800ec0e:	421e      	tst	r6, r3
 800ec10:	bf18      	it	ne
 800ec12:	4617      	movne	r7, r2
 800ec14:	f047 0720 	orr.w	r7, r7, #32
 800ec18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec1a:	601c      	str	r4, [r3, #0]
 800ec1c:	9b05      	ldr	r3, [sp, #20]
 800ec1e:	601d      	str	r5, [r3, #0]
 800ec20:	e69a      	b.n	800e958 <__gethex+0x124>
 800ec22:	4299      	cmp	r1, r3
 800ec24:	f843 cc04 	str.w	ip, [r3, #-4]
 800ec28:	d8d8      	bhi.n	800ebdc <__gethex+0x3a8>
 800ec2a:	68a3      	ldr	r3, [r4, #8]
 800ec2c:	459b      	cmp	fp, r3
 800ec2e:	db17      	blt.n	800ec60 <__gethex+0x42c>
 800ec30:	6861      	ldr	r1, [r4, #4]
 800ec32:	9802      	ldr	r0, [sp, #8]
 800ec34:	3101      	adds	r1, #1
 800ec36:	f000 f931 	bl	800ee9c <_Balloc>
 800ec3a:	4681      	mov	r9, r0
 800ec3c:	b918      	cbnz	r0, 800ec46 <__gethex+0x412>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	2184      	movs	r1, #132	; 0x84
 800ec42:	4b19      	ldr	r3, [pc, #100]	; (800eca8 <__gethex+0x474>)
 800ec44:	e6ab      	b.n	800e99e <__gethex+0x16a>
 800ec46:	6922      	ldr	r2, [r4, #16]
 800ec48:	f104 010c 	add.w	r1, r4, #12
 800ec4c:	3202      	adds	r2, #2
 800ec4e:	0092      	lsls	r2, r2, #2
 800ec50:	300c      	adds	r0, #12
 800ec52:	f000 f8fb 	bl	800ee4c <memcpy>
 800ec56:	4621      	mov	r1, r4
 800ec58:	9802      	ldr	r0, [sp, #8]
 800ec5a:	f000 f944 	bl	800eee6 <_Bfree>
 800ec5e:	464c      	mov	r4, r9
 800ec60:	6923      	ldr	r3, [r4, #16]
 800ec62:	1c5a      	adds	r2, r3, #1
 800ec64:	6122      	str	r2, [r4, #16]
 800ec66:	2201      	movs	r2, #1
 800ec68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec6c:	615a      	str	r2, [r3, #20]
 800ec6e:	e7bd      	b.n	800ebec <__gethex+0x3b8>
 800ec70:	6922      	ldr	r2, [r4, #16]
 800ec72:	455a      	cmp	r2, fp
 800ec74:	dd0b      	ble.n	800ec8e <__gethex+0x45a>
 800ec76:	2101      	movs	r1, #1
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f7ff fd72 	bl	800e762 <rshift>
 800ec7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec82:	3501      	adds	r5, #1
 800ec84:	42ab      	cmp	r3, r5
 800ec86:	f6ff aed4 	blt.w	800ea32 <__gethex+0x1fe>
 800ec8a:	2701      	movs	r7, #1
 800ec8c:	e7c2      	b.n	800ec14 <__gethex+0x3e0>
 800ec8e:	f016 061f 	ands.w	r6, r6, #31
 800ec92:	d0fa      	beq.n	800ec8a <__gethex+0x456>
 800ec94:	4453      	add	r3, sl
 800ec96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ec9a:	f000 f9bd 	bl	800f018 <__hi0bits>
 800ec9e:	f1c6 0620 	rsb	r6, r6, #32
 800eca2:	42b0      	cmp	r0, r6
 800eca4:	dbe7      	blt.n	800ec76 <__gethex+0x442>
 800eca6:	e7f0      	b.n	800ec8a <__gethex+0x456>
 800eca8:	0805fd61 	.word	0x0805fd61

0800ecac <L_shift>:
 800ecac:	f1c2 0208 	rsb	r2, r2, #8
 800ecb0:	0092      	lsls	r2, r2, #2
 800ecb2:	b570      	push	{r4, r5, r6, lr}
 800ecb4:	f1c2 0620 	rsb	r6, r2, #32
 800ecb8:	6843      	ldr	r3, [r0, #4]
 800ecba:	6804      	ldr	r4, [r0, #0]
 800ecbc:	fa03 f506 	lsl.w	r5, r3, r6
 800ecc0:	432c      	orrs	r4, r5
 800ecc2:	40d3      	lsrs	r3, r2
 800ecc4:	6004      	str	r4, [r0, #0]
 800ecc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ecca:	4288      	cmp	r0, r1
 800eccc:	d3f4      	bcc.n	800ecb8 <L_shift+0xc>
 800ecce:	bd70      	pop	{r4, r5, r6, pc}

0800ecd0 <__match>:
 800ecd0:	b530      	push	{r4, r5, lr}
 800ecd2:	6803      	ldr	r3, [r0, #0]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecda:	b914      	cbnz	r4, 800ece2 <__match+0x12>
 800ecdc:	6003      	str	r3, [r0, #0]
 800ecde:	2001      	movs	r0, #1
 800ece0:	bd30      	pop	{r4, r5, pc}
 800ece2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ece6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ecea:	2d19      	cmp	r5, #25
 800ecec:	bf98      	it	ls
 800ecee:	3220      	addls	r2, #32
 800ecf0:	42a2      	cmp	r2, r4
 800ecf2:	d0f0      	beq.n	800ecd6 <__match+0x6>
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	e7f3      	b.n	800ece0 <__match+0x10>

0800ecf8 <__hexnan>:
 800ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	2500      	movs	r5, #0
 800ecfe:	680b      	ldr	r3, [r1, #0]
 800ed00:	4682      	mov	sl, r0
 800ed02:	115e      	asrs	r6, r3, #5
 800ed04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ed08:	f013 031f 	ands.w	r3, r3, #31
 800ed0c:	bf18      	it	ne
 800ed0e:	3604      	addne	r6, #4
 800ed10:	1f37      	subs	r7, r6, #4
 800ed12:	46b9      	mov	r9, r7
 800ed14:	463c      	mov	r4, r7
 800ed16:	46ab      	mov	fp, r5
 800ed18:	b087      	sub	sp, #28
 800ed1a:	4690      	mov	r8, r2
 800ed1c:	6802      	ldr	r2, [r0, #0]
 800ed1e:	9301      	str	r3, [sp, #4]
 800ed20:	f846 5c04 	str.w	r5, [r6, #-4]
 800ed24:	9502      	str	r5, [sp, #8]
 800ed26:	7851      	ldrb	r1, [r2, #1]
 800ed28:	1c53      	adds	r3, r2, #1
 800ed2a:	9303      	str	r3, [sp, #12]
 800ed2c:	b341      	cbz	r1, 800ed80 <__hexnan+0x88>
 800ed2e:	4608      	mov	r0, r1
 800ed30:	9205      	str	r2, [sp, #20]
 800ed32:	9104      	str	r1, [sp, #16]
 800ed34:	f7ff fd68 	bl	800e808 <__hexdig_fun>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d14f      	bne.n	800eddc <__hexnan+0xe4>
 800ed3c:	9904      	ldr	r1, [sp, #16]
 800ed3e:	9a05      	ldr	r2, [sp, #20]
 800ed40:	2920      	cmp	r1, #32
 800ed42:	d818      	bhi.n	800ed76 <__hexnan+0x7e>
 800ed44:	9b02      	ldr	r3, [sp, #8]
 800ed46:	459b      	cmp	fp, r3
 800ed48:	dd13      	ble.n	800ed72 <__hexnan+0x7a>
 800ed4a:	454c      	cmp	r4, r9
 800ed4c:	d206      	bcs.n	800ed5c <__hexnan+0x64>
 800ed4e:	2d07      	cmp	r5, #7
 800ed50:	dc04      	bgt.n	800ed5c <__hexnan+0x64>
 800ed52:	462a      	mov	r2, r5
 800ed54:	4649      	mov	r1, r9
 800ed56:	4620      	mov	r0, r4
 800ed58:	f7ff ffa8 	bl	800ecac <L_shift>
 800ed5c:	4544      	cmp	r4, r8
 800ed5e:	d950      	bls.n	800ee02 <__hexnan+0x10a>
 800ed60:	2300      	movs	r3, #0
 800ed62:	f1a4 0904 	sub.w	r9, r4, #4
 800ed66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed6a:	461d      	mov	r5, r3
 800ed6c:	464c      	mov	r4, r9
 800ed6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ed72:	9a03      	ldr	r2, [sp, #12]
 800ed74:	e7d7      	b.n	800ed26 <__hexnan+0x2e>
 800ed76:	2929      	cmp	r1, #41	; 0x29
 800ed78:	d156      	bne.n	800ee28 <__hexnan+0x130>
 800ed7a:	3202      	adds	r2, #2
 800ed7c:	f8ca 2000 	str.w	r2, [sl]
 800ed80:	f1bb 0f00 	cmp.w	fp, #0
 800ed84:	d050      	beq.n	800ee28 <__hexnan+0x130>
 800ed86:	454c      	cmp	r4, r9
 800ed88:	d206      	bcs.n	800ed98 <__hexnan+0xa0>
 800ed8a:	2d07      	cmp	r5, #7
 800ed8c:	dc04      	bgt.n	800ed98 <__hexnan+0xa0>
 800ed8e:	462a      	mov	r2, r5
 800ed90:	4649      	mov	r1, r9
 800ed92:	4620      	mov	r0, r4
 800ed94:	f7ff ff8a 	bl	800ecac <L_shift>
 800ed98:	4544      	cmp	r4, r8
 800ed9a:	d934      	bls.n	800ee06 <__hexnan+0x10e>
 800ed9c:	4623      	mov	r3, r4
 800ed9e:	f1a8 0204 	sub.w	r2, r8, #4
 800eda2:	f853 1b04 	ldr.w	r1, [r3], #4
 800eda6:	429f      	cmp	r7, r3
 800eda8:	f842 1f04 	str.w	r1, [r2, #4]!
 800edac:	d2f9      	bcs.n	800eda2 <__hexnan+0xaa>
 800edae:	1b3b      	subs	r3, r7, r4
 800edb0:	f023 0303 	bic.w	r3, r3, #3
 800edb4:	3304      	adds	r3, #4
 800edb6:	3401      	adds	r4, #1
 800edb8:	3e03      	subs	r6, #3
 800edba:	42b4      	cmp	r4, r6
 800edbc:	bf88      	it	hi
 800edbe:	2304      	movhi	r3, #4
 800edc0:	2200      	movs	r2, #0
 800edc2:	4443      	add	r3, r8
 800edc4:	f843 2b04 	str.w	r2, [r3], #4
 800edc8:	429f      	cmp	r7, r3
 800edca:	d2fb      	bcs.n	800edc4 <__hexnan+0xcc>
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	b91b      	cbnz	r3, 800edd8 <__hexnan+0xe0>
 800edd0:	4547      	cmp	r7, r8
 800edd2:	d127      	bne.n	800ee24 <__hexnan+0x12c>
 800edd4:	2301      	movs	r3, #1
 800edd6:	603b      	str	r3, [r7, #0]
 800edd8:	2005      	movs	r0, #5
 800edda:	e026      	b.n	800ee2a <__hexnan+0x132>
 800eddc:	3501      	adds	r5, #1
 800edde:	2d08      	cmp	r5, #8
 800ede0:	f10b 0b01 	add.w	fp, fp, #1
 800ede4:	dd06      	ble.n	800edf4 <__hexnan+0xfc>
 800ede6:	4544      	cmp	r4, r8
 800ede8:	d9c3      	bls.n	800ed72 <__hexnan+0x7a>
 800edea:	2300      	movs	r3, #0
 800edec:	2501      	movs	r5, #1
 800edee:	f844 3c04 	str.w	r3, [r4, #-4]
 800edf2:	3c04      	subs	r4, #4
 800edf4:	6822      	ldr	r2, [r4, #0]
 800edf6:	f000 000f 	and.w	r0, r0, #15
 800edfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800edfe:	6022      	str	r2, [r4, #0]
 800ee00:	e7b7      	b.n	800ed72 <__hexnan+0x7a>
 800ee02:	2508      	movs	r5, #8
 800ee04:	e7b5      	b.n	800ed72 <__hexnan+0x7a>
 800ee06:	9b01      	ldr	r3, [sp, #4]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d0df      	beq.n	800edcc <__hexnan+0xd4>
 800ee0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee10:	f1c3 0320 	rsb	r3, r3, #32
 800ee14:	fa22 f303 	lsr.w	r3, r2, r3
 800ee18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ee1c:	401a      	ands	r2, r3
 800ee1e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ee22:	e7d3      	b.n	800edcc <__hexnan+0xd4>
 800ee24:	3f04      	subs	r7, #4
 800ee26:	e7d1      	b.n	800edcc <__hexnan+0xd4>
 800ee28:	2004      	movs	r0, #4
 800ee2a:	b007      	add	sp, #28
 800ee2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee30 <memchr>:
 800ee30:	4603      	mov	r3, r0
 800ee32:	b510      	push	{r4, lr}
 800ee34:	b2c9      	uxtb	r1, r1
 800ee36:	4402      	add	r2, r0
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	d101      	bne.n	800ee42 <memchr+0x12>
 800ee3e:	2000      	movs	r0, #0
 800ee40:	e003      	b.n	800ee4a <memchr+0x1a>
 800ee42:	7804      	ldrb	r4, [r0, #0]
 800ee44:	3301      	adds	r3, #1
 800ee46:	428c      	cmp	r4, r1
 800ee48:	d1f6      	bne.n	800ee38 <memchr+0x8>
 800ee4a:	bd10      	pop	{r4, pc}

0800ee4c <memcpy>:
 800ee4c:	440a      	add	r2, r1
 800ee4e:	4291      	cmp	r1, r2
 800ee50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee54:	d100      	bne.n	800ee58 <memcpy+0xc>
 800ee56:	4770      	bx	lr
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee5e:	4291      	cmp	r1, r2
 800ee60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee64:	d1f9      	bne.n	800ee5a <memcpy+0xe>
 800ee66:	bd10      	pop	{r4, pc}

0800ee68 <memmove>:
 800ee68:	4288      	cmp	r0, r1
 800ee6a:	b510      	push	{r4, lr}
 800ee6c:	eb01 0402 	add.w	r4, r1, r2
 800ee70:	d902      	bls.n	800ee78 <memmove+0x10>
 800ee72:	4284      	cmp	r4, r0
 800ee74:	4623      	mov	r3, r4
 800ee76:	d807      	bhi.n	800ee88 <memmove+0x20>
 800ee78:	1e43      	subs	r3, r0, #1
 800ee7a:	42a1      	cmp	r1, r4
 800ee7c:	d008      	beq.n	800ee90 <memmove+0x28>
 800ee7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee86:	e7f8      	b.n	800ee7a <memmove+0x12>
 800ee88:	4601      	mov	r1, r0
 800ee8a:	4402      	add	r2, r0
 800ee8c:	428a      	cmp	r2, r1
 800ee8e:	d100      	bne.n	800ee92 <memmove+0x2a>
 800ee90:	bd10      	pop	{r4, pc}
 800ee92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee9a:	e7f7      	b.n	800ee8c <memmove+0x24>

0800ee9c <_Balloc>:
 800ee9c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ee9e:	b570      	push	{r4, r5, r6, lr}
 800eea0:	4605      	mov	r5, r0
 800eea2:	460c      	mov	r4, r1
 800eea4:	b17b      	cbz	r3, 800eec6 <_Balloc+0x2a>
 800eea6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800eea8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eeac:	b9a0      	cbnz	r0, 800eed8 <_Balloc+0x3c>
 800eeae:	2101      	movs	r1, #1
 800eeb0:	fa01 f604 	lsl.w	r6, r1, r4
 800eeb4:	1d72      	adds	r2, r6, #5
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	0092      	lsls	r2, r2, #2
 800eeba:	f000 fd53 	bl	800f964 <_calloc_r>
 800eebe:	b148      	cbz	r0, 800eed4 <_Balloc+0x38>
 800eec0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800eec4:	e00b      	b.n	800eede <_Balloc+0x42>
 800eec6:	2221      	movs	r2, #33	; 0x21
 800eec8:	2104      	movs	r1, #4
 800eeca:	f000 fd4b 	bl	800f964 <_calloc_r>
 800eece:	64e8      	str	r0, [r5, #76]	; 0x4c
 800eed0:	2800      	cmp	r0, #0
 800eed2:	d1e8      	bne.n	800eea6 <_Balloc+0xa>
 800eed4:	2000      	movs	r0, #0
 800eed6:	bd70      	pop	{r4, r5, r6, pc}
 800eed8:	6802      	ldr	r2, [r0, #0]
 800eeda:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800eede:	2300      	movs	r3, #0
 800eee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eee4:	e7f7      	b.n	800eed6 <_Balloc+0x3a>

0800eee6 <_Bfree>:
 800eee6:	b131      	cbz	r1, 800eef6 <_Bfree+0x10>
 800eee8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800eeea:	684a      	ldr	r2, [r1, #4]
 800eeec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eef0:	6008      	str	r0, [r1, #0]
 800eef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800eef6:	4770      	bx	lr

0800eef8 <__multadd>:
 800eef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eefc:	4607      	mov	r7, r0
 800eefe:	460c      	mov	r4, r1
 800ef00:	461e      	mov	r6, r3
 800ef02:	2000      	movs	r0, #0
 800ef04:	690d      	ldr	r5, [r1, #16]
 800ef06:	f101 0c14 	add.w	ip, r1, #20
 800ef0a:	f8dc 3000 	ldr.w	r3, [ip]
 800ef0e:	3001      	adds	r0, #1
 800ef10:	b299      	uxth	r1, r3
 800ef12:	fb02 6101 	mla	r1, r2, r1, r6
 800ef16:	0c1e      	lsrs	r6, r3, #16
 800ef18:	0c0b      	lsrs	r3, r1, #16
 800ef1a:	fb02 3306 	mla	r3, r2, r6, r3
 800ef1e:	b289      	uxth	r1, r1
 800ef20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef24:	4285      	cmp	r5, r0
 800ef26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef2a:	f84c 1b04 	str.w	r1, [ip], #4
 800ef2e:	dcec      	bgt.n	800ef0a <__multadd+0x12>
 800ef30:	b30e      	cbz	r6, 800ef76 <__multadd+0x7e>
 800ef32:	68a3      	ldr	r3, [r4, #8]
 800ef34:	42ab      	cmp	r3, r5
 800ef36:	dc19      	bgt.n	800ef6c <__multadd+0x74>
 800ef38:	6861      	ldr	r1, [r4, #4]
 800ef3a:	4638      	mov	r0, r7
 800ef3c:	3101      	adds	r1, #1
 800ef3e:	f7ff ffad 	bl	800ee9c <_Balloc>
 800ef42:	4680      	mov	r8, r0
 800ef44:	b928      	cbnz	r0, 800ef52 <__multadd+0x5a>
 800ef46:	4602      	mov	r2, r0
 800ef48:	21b5      	movs	r1, #181	; 0xb5
 800ef4a:	4b0c      	ldr	r3, [pc, #48]	; (800ef7c <__multadd+0x84>)
 800ef4c:	480c      	ldr	r0, [pc, #48]	; (800ef80 <__multadd+0x88>)
 800ef4e:	f000 fceb 	bl	800f928 <__assert_func>
 800ef52:	6922      	ldr	r2, [r4, #16]
 800ef54:	f104 010c 	add.w	r1, r4, #12
 800ef58:	3202      	adds	r2, #2
 800ef5a:	0092      	lsls	r2, r2, #2
 800ef5c:	300c      	adds	r0, #12
 800ef5e:	f7ff ff75 	bl	800ee4c <memcpy>
 800ef62:	4621      	mov	r1, r4
 800ef64:	4638      	mov	r0, r7
 800ef66:	f7ff ffbe 	bl	800eee6 <_Bfree>
 800ef6a:	4644      	mov	r4, r8
 800ef6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef70:	3501      	adds	r5, #1
 800ef72:	615e      	str	r6, [r3, #20]
 800ef74:	6125      	str	r5, [r4, #16]
 800ef76:	4620      	mov	r0, r4
 800ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7c:	0805fd61 	.word	0x0805fd61
 800ef80:	0805fe3c 	.word	0x0805fe3c

0800ef84 <__s2b>:
 800ef84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef88:	4615      	mov	r5, r2
 800ef8a:	2209      	movs	r2, #9
 800ef8c:	461f      	mov	r7, r3
 800ef8e:	3308      	adds	r3, #8
 800ef90:	460c      	mov	r4, r1
 800ef92:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef96:	4606      	mov	r6, r0
 800ef98:	2201      	movs	r2, #1
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	db09      	blt.n	800efb4 <__s2b+0x30>
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7ff ff7b 	bl	800ee9c <_Balloc>
 800efa6:	b940      	cbnz	r0, 800efba <__s2b+0x36>
 800efa8:	4602      	mov	r2, r0
 800efaa:	21ce      	movs	r1, #206	; 0xce
 800efac:	4b18      	ldr	r3, [pc, #96]	; (800f010 <__s2b+0x8c>)
 800efae:	4819      	ldr	r0, [pc, #100]	; (800f014 <__s2b+0x90>)
 800efb0:	f000 fcba 	bl	800f928 <__assert_func>
 800efb4:	0052      	lsls	r2, r2, #1
 800efb6:	3101      	adds	r1, #1
 800efb8:	e7f0      	b.n	800ef9c <__s2b+0x18>
 800efba:	9b08      	ldr	r3, [sp, #32]
 800efbc:	2d09      	cmp	r5, #9
 800efbe:	6143      	str	r3, [r0, #20]
 800efc0:	f04f 0301 	mov.w	r3, #1
 800efc4:	6103      	str	r3, [r0, #16]
 800efc6:	dd16      	ble.n	800eff6 <__s2b+0x72>
 800efc8:	f104 0909 	add.w	r9, r4, #9
 800efcc:	46c8      	mov	r8, r9
 800efce:	442c      	add	r4, r5
 800efd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800efd4:	4601      	mov	r1, r0
 800efd6:	220a      	movs	r2, #10
 800efd8:	4630      	mov	r0, r6
 800efda:	3b30      	subs	r3, #48	; 0x30
 800efdc:	f7ff ff8c 	bl	800eef8 <__multadd>
 800efe0:	45a0      	cmp	r8, r4
 800efe2:	d1f5      	bne.n	800efd0 <__s2b+0x4c>
 800efe4:	f1a5 0408 	sub.w	r4, r5, #8
 800efe8:	444c      	add	r4, r9
 800efea:	1b2d      	subs	r5, r5, r4
 800efec:	1963      	adds	r3, r4, r5
 800efee:	42bb      	cmp	r3, r7
 800eff0:	db04      	blt.n	800effc <__s2b+0x78>
 800eff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eff6:	2509      	movs	r5, #9
 800eff8:	340a      	adds	r4, #10
 800effa:	e7f6      	b.n	800efea <__s2b+0x66>
 800effc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f000:	4601      	mov	r1, r0
 800f002:	220a      	movs	r2, #10
 800f004:	4630      	mov	r0, r6
 800f006:	3b30      	subs	r3, #48	; 0x30
 800f008:	f7ff ff76 	bl	800eef8 <__multadd>
 800f00c:	e7ee      	b.n	800efec <__s2b+0x68>
 800f00e:	bf00      	nop
 800f010:	0805fd61 	.word	0x0805fd61
 800f014:	0805fe3c 	.word	0x0805fe3c

0800f018 <__hi0bits>:
 800f018:	0c02      	lsrs	r2, r0, #16
 800f01a:	0412      	lsls	r2, r2, #16
 800f01c:	4603      	mov	r3, r0
 800f01e:	b9ca      	cbnz	r2, 800f054 <__hi0bits+0x3c>
 800f020:	0403      	lsls	r3, r0, #16
 800f022:	2010      	movs	r0, #16
 800f024:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f028:	bf04      	itt	eq
 800f02a:	021b      	lsleq	r3, r3, #8
 800f02c:	3008      	addeq	r0, #8
 800f02e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f032:	bf04      	itt	eq
 800f034:	011b      	lsleq	r3, r3, #4
 800f036:	3004      	addeq	r0, #4
 800f038:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f03c:	bf04      	itt	eq
 800f03e:	009b      	lsleq	r3, r3, #2
 800f040:	3002      	addeq	r0, #2
 800f042:	2b00      	cmp	r3, #0
 800f044:	db05      	blt.n	800f052 <__hi0bits+0x3a>
 800f046:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800f04a:	f100 0001 	add.w	r0, r0, #1
 800f04e:	bf08      	it	eq
 800f050:	2020      	moveq	r0, #32
 800f052:	4770      	bx	lr
 800f054:	2000      	movs	r0, #0
 800f056:	e7e5      	b.n	800f024 <__hi0bits+0xc>

0800f058 <__lo0bits>:
 800f058:	6803      	ldr	r3, [r0, #0]
 800f05a:	4602      	mov	r2, r0
 800f05c:	f013 0007 	ands.w	r0, r3, #7
 800f060:	d00b      	beq.n	800f07a <__lo0bits+0x22>
 800f062:	07d9      	lsls	r1, r3, #31
 800f064:	d421      	bmi.n	800f0aa <__lo0bits+0x52>
 800f066:	0798      	lsls	r0, r3, #30
 800f068:	bf49      	itett	mi
 800f06a:	085b      	lsrmi	r3, r3, #1
 800f06c:	089b      	lsrpl	r3, r3, #2
 800f06e:	2001      	movmi	r0, #1
 800f070:	6013      	strmi	r3, [r2, #0]
 800f072:	bf5c      	itt	pl
 800f074:	2002      	movpl	r0, #2
 800f076:	6013      	strpl	r3, [r2, #0]
 800f078:	4770      	bx	lr
 800f07a:	b299      	uxth	r1, r3
 800f07c:	b909      	cbnz	r1, 800f082 <__lo0bits+0x2a>
 800f07e:	2010      	movs	r0, #16
 800f080:	0c1b      	lsrs	r3, r3, #16
 800f082:	b2d9      	uxtb	r1, r3
 800f084:	b909      	cbnz	r1, 800f08a <__lo0bits+0x32>
 800f086:	3008      	adds	r0, #8
 800f088:	0a1b      	lsrs	r3, r3, #8
 800f08a:	0719      	lsls	r1, r3, #28
 800f08c:	bf04      	itt	eq
 800f08e:	091b      	lsreq	r3, r3, #4
 800f090:	3004      	addeq	r0, #4
 800f092:	0799      	lsls	r1, r3, #30
 800f094:	bf04      	itt	eq
 800f096:	089b      	lsreq	r3, r3, #2
 800f098:	3002      	addeq	r0, #2
 800f09a:	07d9      	lsls	r1, r3, #31
 800f09c:	d403      	bmi.n	800f0a6 <__lo0bits+0x4e>
 800f09e:	085b      	lsrs	r3, r3, #1
 800f0a0:	f100 0001 	add.w	r0, r0, #1
 800f0a4:	d003      	beq.n	800f0ae <__lo0bits+0x56>
 800f0a6:	6013      	str	r3, [r2, #0]
 800f0a8:	4770      	bx	lr
 800f0aa:	2000      	movs	r0, #0
 800f0ac:	4770      	bx	lr
 800f0ae:	2020      	movs	r0, #32
 800f0b0:	4770      	bx	lr
	...

0800f0b4 <__i2b>:
 800f0b4:	b510      	push	{r4, lr}
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	2101      	movs	r1, #1
 800f0ba:	f7ff feef 	bl	800ee9c <_Balloc>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	b928      	cbnz	r0, 800f0ce <__i2b+0x1a>
 800f0c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f0c6:	4b04      	ldr	r3, [pc, #16]	; (800f0d8 <__i2b+0x24>)
 800f0c8:	4804      	ldr	r0, [pc, #16]	; (800f0dc <__i2b+0x28>)
 800f0ca:	f000 fc2d 	bl	800f928 <__assert_func>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	6144      	str	r4, [r0, #20]
 800f0d2:	6103      	str	r3, [r0, #16]
 800f0d4:	bd10      	pop	{r4, pc}
 800f0d6:	bf00      	nop
 800f0d8:	0805fd61 	.word	0x0805fd61
 800f0dc:	0805fe3c 	.word	0x0805fe3c

0800f0e0 <__multiply>:
 800f0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e4:	4691      	mov	r9, r2
 800f0e6:	690a      	ldr	r2, [r1, #16]
 800f0e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0ec:	460c      	mov	r4, r1
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	bfbe      	ittt	lt
 800f0f2:	460b      	movlt	r3, r1
 800f0f4:	464c      	movlt	r4, r9
 800f0f6:	4699      	movlt	r9, r3
 800f0f8:	6927      	ldr	r7, [r4, #16]
 800f0fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f0fe:	68a3      	ldr	r3, [r4, #8]
 800f100:	6861      	ldr	r1, [r4, #4]
 800f102:	eb07 060a 	add.w	r6, r7, sl
 800f106:	42b3      	cmp	r3, r6
 800f108:	b085      	sub	sp, #20
 800f10a:	bfb8      	it	lt
 800f10c:	3101      	addlt	r1, #1
 800f10e:	f7ff fec5 	bl	800ee9c <_Balloc>
 800f112:	b930      	cbnz	r0, 800f122 <__multiply+0x42>
 800f114:	4602      	mov	r2, r0
 800f116:	f240 115d 	movw	r1, #349	; 0x15d
 800f11a:	4b43      	ldr	r3, [pc, #268]	; (800f228 <__multiply+0x148>)
 800f11c:	4843      	ldr	r0, [pc, #268]	; (800f22c <__multiply+0x14c>)
 800f11e:	f000 fc03 	bl	800f928 <__assert_func>
 800f122:	f100 0514 	add.w	r5, r0, #20
 800f126:	462b      	mov	r3, r5
 800f128:	2200      	movs	r2, #0
 800f12a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f12e:	4543      	cmp	r3, r8
 800f130:	d321      	bcc.n	800f176 <__multiply+0x96>
 800f132:	f104 0314 	add.w	r3, r4, #20
 800f136:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f13a:	f109 0314 	add.w	r3, r9, #20
 800f13e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f142:	9202      	str	r2, [sp, #8]
 800f144:	1b3a      	subs	r2, r7, r4
 800f146:	3a15      	subs	r2, #21
 800f148:	f022 0203 	bic.w	r2, r2, #3
 800f14c:	3204      	adds	r2, #4
 800f14e:	f104 0115 	add.w	r1, r4, #21
 800f152:	428f      	cmp	r7, r1
 800f154:	bf38      	it	cc
 800f156:	2204      	movcc	r2, #4
 800f158:	9201      	str	r2, [sp, #4]
 800f15a:	9a02      	ldr	r2, [sp, #8]
 800f15c:	9303      	str	r3, [sp, #12]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d80c      	bhi.n	800f17c <__multiply+0x9c>
 800f162:	2e00      	cmp	r6, #0
 800f164:	dd03      	ble.n	800f16e <__multiply+0x8e>
 800f166:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d059      	beq.n	800f222 <__multiply+0x142>
 800f16e:	6106      	str	r6, [r0, #16]
 800f170:	b005      	add	sp, #20
 800f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f176:	f843 2b04 	str.w	r2, [r3], #4
 800f17a:	e7d8      	b.n	800f12e <__multiply+0x4e>
 800f17c:	f8b3 a000 	ldrh.w	sl, [r3]
 800f180:	f1ba 0f00 	cmp.w	sl, #0
 800f184:	d023      	beq.n	800f1ce <__multiply+0xee>
 800f186:	46a9      	mov	r9, r5
 800f188:	f04f 0c00 	mov.w	ip, #0
 800f18c:	f104 0e14 	add.w	lr, r4, #20
 800f190:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f194:	f8d9 1000 	ldr.w	r1, [r9]
 800f198:	fa1f fb82 	uxth.w	fp, r2
 800f19c:	b289      	uxth	r1, r1
 800f19e:	fb0a 110b 	mla	r1, sl, fp, r1
 800f1a2:	4461      	add	r1, ip
 800f1a4:	f8d9 c000 	ldr.w	ip, [r9]
 800f1a8:	0c12      	lsrs	r2, r2, #16
 800f1aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f1ae:	fb0a c202 	mla	r2, sl, r2, ip
 800f1b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f1b6:	b289      	uxth	r1, r1
 800f1b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f1bc:	4577      	cmp	r7, lr
 800f1be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1c2:	f849 1b04 	str.w	r1, [r9], #4
 800f1c6:	d8e3      	bhi.n	800f190 <__multiply+0xb0>
 800f1c8:	9a01      	ldr	r2, [sp, #4]
 800f1ca:	f845 c002 	str.w	ip, [r5, r2]
 800f1ce:	9a03      	ldr	r2, [sp, #12]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f1d6:	f1b9 0f00 	cmp.w	r9, #0
 800f1da:	d020      	beq.n	800f21e <__multiply+0x13e>
 800f1dc:	46ae      	mov	lr, r5
 800f1de:	f04f 0a00 	mov.w	sl, #0
 800f1e2:	6829      	ldr	r1, [r5, #0]
 800f1e4:	f104 0c14 	add.w	ip, r4, #20
 800f1e8:	f8bc b000 	ldrh.w	fp, [ip]
 800f1ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f1f0:	b289      	uxth	r1, r1
 800f1f2:	fb09 220b 	mla	r2, r9, fp, r2
 800f1f6:	4492      	add	sl, r2
 800f1f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f1fc:	f84e 1b04 	str.w	r1, [lr], #4
 800f200:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f204:	f8be 1000 	ldrh.w	r1, [lr]
 800f208:	0c12      	lsrs	r2, r2, #16
 800f20a:	fb09 1102 	mla	r1, r9, r2, r1
 800f20e:	4567      	cmp	r7, ip
 800f210:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f214:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f218:	d8e6      	bhi.n	800f1e8 <__multiply+0x108>
 800f21a:	9a01      	ldr	r2, [sp, #4]
 800f21c:	50a9      	str	r1, [r5, r2]
 800f21e:	3504      	adds	r5, #4
 800f220:	e79b      	b.n	800f15a <__multiply+0x7a>
 800f222:	3e01      	subs	r6, #1
 800f224:	e79d      	b.n	800f162 <__multiply+0x82>
 800f226:	bf00      	nop
 800f228:	0805fd61 	.word	0x0805fd61
 800f22c:	0805fe3c 	.word	0x0805fe3c

0800f230 <__pow5mult>:
 800f230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f234:	4615      	mov	r5, r2
 800f236:	f012 0203 	ands.w	r2, r2, #3
 800f23a:	4606      	mov	r6, r0
 800f23c:	460f      	mov	r7, r1
 800f23e:	d007      	beq.n	800f250 <__pow5mult+0x20>
 800f240:	4c1a      	ldr	r4, [pc, #104]	; (800f2ac <__pow5mult+0x7c>)
 800f242:	3a01      	subs	r2, #1
 800f244:	2300      	movs	r3, #0
 800f246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f24a:	f7ff fe55 	bl	800eef8 <__multadd>
 800f24e:	4607      	mov	r7, r0
 800f250:	10ad      	asrs	r5, r5, #2
 800f252:	d027      	beq.n	800f2a4 <__pow5mult+0x74>
 800f254:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800f256:	b944      	cbnz	r4, 800f26a <__pow5mult+0x3a>
 800f258:	f240 2171 	movw	r1, #625	; 0x271
 800f25c:	4630      	mov	r0, r6
 800f25e:	f7ff ff29 	bl	800f0b4 <__i2b>
 800f262:	2300      	movs	r3, #0
 800f264:	4604      	mov	r4, r0
 800f266:	64b0      	str	r0, [r6, #72]	; 0x48
 800f268:	6003      	str	r3, [r0, #0]
 800f26a:	f04f 0900 	mov.w	r9, #0
 800f26e:	07eb      	lsls	r3, r5, #31
 800f270:	d50a      	bpl.n	800f288 <__pow5mult+0x58>
 800f272:	4639      	mov	r1, r7
 800f274:	4622      	mov	r2, r4
 800f276:	4630      	mov	r0, r6
 800f278:	f7ff ff32 	bl	800f0e0 <__multiply>
 800f27c:	4680      	mov	r8, r0
 800f27e:	4639      	mov	r1, r7
 800f280:	4630      	mov	r0, r6
 800f282:	f7ff fe30 	bl	800eee6 <_Bfree>
 800f286:	4647      	mov	r7, r8
 800f288:	106d      	asrs	r5, r5, #1
 800f28a:	d00b      	beq.n	800f2a4 <__pow5mult+0x74>
 800f28c:	6820      	ldr	r0, [r4, #0]
 800f28e:	b938      	cbnz	r0, 800f2a0 <__pow5mult+0x70>
 800f290:	4622      	mov	r2, r4
 800f292:	4621      	mov	r1, r4
 800f294:	4630      	mov	r0, r6
 800f296:	f7ff ff23 	bl	800f0e0 <__multiply>
 800f29a:	6020      	str	r0, [r4, #0]
 800f29c:	f8c0 9000 	str.w	r9, [r0]
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	e7e4      	b.n	800f26e <__pow5mult+0x3e>
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2aa:	bf00      	nop
 800f2ac:	0805ff88 	.word	0x0805ff88

0800f2b0 <__lshift>:
 800f2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b4:	460c      	mov	r4, r1
 800f2b6:	4607      	mov	r7, r0
 800f2b8:	4691      	mov	r9, r2
 800f2ba:	6923      	ldr	r3, [r4, #16]
 800f2bc:	6849      	ldr	r1, [r1, #4]
 800f2be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2c2:	68a3      	ldr	r3, [r4, #8]
 800f2c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2c8:	f108 0601 	add.w	r6, r8, #1
 800f2cc:	42b3      	cmp	r3, r6
 800f2ce:	db0b      	blt.n	800f2e8 <__lshift+0x38>
 800f2d0:	4638      	mov	r0, r7
 800f2d2:	f7ff fde3 	bl	800ee9c <_Balloc>
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	b948      	cbnz	r0, 800f2ee <__lshift+0x3e>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f2e0:	4b29      	ldr	r3, [pc, #164]	; (800f388 <__lshift+0xd8>)
 800f2e2:	482a      	ldr	r0, [pc, #168]	; (800f38c <__lshift+0xdc>)
 800f2e4:	f000 fb20 	bl	800f928 <__assert_func>
 800f2e8:	3101      	adds	r1, #1
 800f2ea:	005b      	lsls	r3, r3, #1
 800f2ec:	e7ee      	b.n	800f2cc <__lshift+0x1c>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	f100 0114 	add.w	r1, r0, #20
 800f2f4:	f100 0210 	add.w	r2, r0, #16
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	4553      	cmp	r3, sl
 800f2fc:	db37      	blt.n	800f36e <__lshift+0xbe>
 800f2fe:	6920      	ldr	r0, [r4, #16]
 800f300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f304:	f104 0314 	add.w	r3, r4, #20
 800f308:	f019 091f 	ands.w	r9, r9, #31
 800f30c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f310:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f314:	d02f      	beq.n	800f376 <__lshift+0xc6>
 800f316:	468a      	mov	sl, r1
 800f318:	f04f 0c00 	mov.w	ip, #0
 800f31c:	f1c9 0e20 	rsb	lr, r9, #32
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	fa02 f209 	lsl.w	r2, r2, r9
 800f326:	ea42 020c 	orr.w	r2, r2, ip
 800f32a:	f84a 2b04 	str.w	r2, [sl], #4
 800f32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f332:	4298      	cmp	r0, r3
 800f334:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f338:	d8f2      	bhi.n	800f320 <__lshift+0x70>
 800f33a:	1b03      	subs	r3, r0, r4
 800f33c:	3b15      	subs	r3, #21
 800f33e:	f023 0303 	bic.w	r3, r3, #3
 800f342:	3304      	adds	r3, #4
 800f344:	f104 0215 	add.w	r2, r4, #21
 800f348:	4290      	cmp	r0, r2
 800f34a:	bf38      	it	cc
 800f34c:	2304      	movcc	r3, #4
 800f34e:	f841 c003 	str.w	ip, [r1, r3]
 800f352:	f1bc 0f00 	cmp.w	ip, #0
 800f356:	d001      	beq.n	800f35c <__lshift+0xac>
 800f358:	f108 0602 	add.w	r6, r8, #2
 800f35c:	3e01      	subs	r6, #1
 800f35e:	4638      	mov	r0, r7
 800f360:	4621      	mov	r1, r4
 800f362:	612e      	str	r6, [r5, #16]
 800f364:	f7ff fdbf 	bl	800eee6 <_Bfree>
 800f368:	4628      	mov	r0, r5
 800f36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f36e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f372:	3301      	adds	r3, #1
 800f374:	e7c1      	b.n	800f2fa <__lshift+0x4a>
 800f376:	3904      	subs	r1, #4
 800f378:	f853 2b04 	ldr.w	r2, [r3], #4
 800f37c:	4298      	cmp	r0, r3
 800f37e:	f841 2f04 	str.w	r2, [r1, #4]!
 800f382:	d8f9      	bhi.n	800f378 <__lshift+0xc8>
 800f384:	e7ea      	b.n	800f35c <__lshift+0xac>
 800f386:	bf00      	nop
 800f388:	0805fd61 	.word	0x0805fd61
 800f38c:	0805fe3c 	.word	0x0805fe3c

0800f390 <__mcmp>:
 800f390:	4603      	mov	r3, r0
 800f392:	690a      	ldr	r2, [r1, #16]
 800f394:	6900      	ldr	r0, [r0, #16]
 800f396:	b530      	push	{r4, r5, lr}
 800f398:	1a80      	subs	r0, r0, r2
 800f39a:	d10d      	bne.n	800f3b8 <__mcmp+0x28>
 800f39c:	3314      	adds	r3, #20
 800f39e:	3114      	adds	r1, #20
 800f3a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f3a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f3a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f3ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f3b0:	4295      	cmp	r5, r2
 800f3b2:	d002      	beq.n	800f3ba <__mcmp+0x2a>
 800f3b4:	d304      	bcc.n	800f3c0 <__mcmp+0x30>
 800f3b6:	2001      	movs	r0, #1
 800f3b8:	bd30      	pop	{r4, r5, pc}
 800f3ba:	42a3      	cmp	r3, r4
 800f3bc:	d3f4      	bcc.n	800f3a8 <__mcmp+0x18>
 800f3be:	e7fb      	b.n	800f3b8 <__mcmp+0x28>
 800f3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c4:	e7f8      	b.n	800f3b8 <__mcmp+0x28>
	...

0800f3c8 <__mdiff>:
 800f3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3cc:	460d      	mov	r5, r1
 800f3ce:	4607      	mov	r7, r0
 800f3d0:	4611      	mov	r1, r2
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	4614      	mov	r4, r2
 800f3d6:	f7ff ffdb 	bl	800f390 <__mcmp>
 800f3da:	1e06      	subs	r6, r0, #0
 800f3dc:	d111      	bne.n	800f402 <__mdiff+0x3a>
 800f3de:	4631      	mov	r1, r6
 800f3e0:	4638      	mov	r0, r7
 800f3e2:	f7ff fd5b 	bl	800ee9c <_Balloc>
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	b928      	cbnz	r0, 800f3f6 <__mdiff+0x2e>
 800f3ea:	f240 2132 	movw	r1, #562	; 0x232
 800f3ee:	4b3a      	ldr	r3, [pc, #232]	; (800f4d8 <__mdiff+0x110>)
 800f3f0:	483a      	ldr	r0, [pc, #232]	; (800f4dc <__mdiff+0x114>)
 800f3f2:	f000 fa99 	bl	800f928 <__assert_func>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f402:	bfa4      	itt	ge
 800f404:	4623      	movge	r3, r4
 800f406:	462c      	movge	r4, r5
 800f408:	4638      	mov	r0, r7
 800f40a:	6861      	ldr	r1, [r4, #4]
 800f40c:	bfa6      	itte	ge
 800f40e:	461d      	movge	r5, r3
 800f410:	2600      	movge	r6, #0
 800f412:	2601      	movlt	r6, #1
 800f414:	f7ff fd42 	bl	800ee9c <_Balloc>
 800f418:	4602      	mov	r2, r0
 800f41a:	b918      	cbnz	r0, 800f424 <__mdiff+0x5c>
 800f41c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f420:	4b2d      	ldr	r3, [pc, #180]	; (800f4d8 <__mdiff+0x110>)
 800f422:	e7e5      	b.n	800f3f0 <__mdiff+0x28>
 800f424:	f102 0814 	add.w	r8, r2, #20
 800f428:	46c2      	mov	sl, r8
 800f42a:	f04f 0c00 	mov.w	ip, #0
 800f42e:	6927      	ldr	r7, [r4, #16]
 800f430:	60c6      	str	r6, [r0, #12]
 800f432:	692e      	ldr	r6, [r5, #16]
 800f434:	f104 0014 	add.w	r0, r4, #20
 800f438:	f105 0914 	add.w	r9, r5, #20
 800f43c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800f440:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f444:	3410      	adds	r4, #16
 800f446:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800f44a:	f859 3b04 	ldr.w	r3, [r9], #4
 800f44e:	fa1f f18b 	uxth.w	r1, fp
 800f452:	448c      	add	ip, r1
 800f454:	b299      	uxth	r1, r3
 800f456:	0c1b      	lsrs	r3, r3, #16
 800f458:	ebac 0101 	sub.w	r1, ip, r1
 800f45c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f460:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f464:	b289      	uxth	r1, r1
 800f466:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f46a:	454e      	cmp	r6, r9
 800f46c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f470:	f84a 3b04 	str.w	r3, [sl], #4
 800f474:	d8e7      	bhi.n	800f446 <__mdiff+0x7e>
 800f476:	1b73      	subs	r3, r6, r5
 800f478:	3b15      	subs	r3, #21
 800f47a:	f023 0303 	bic.w	r3, r3, #3
 800f47e:	3515      	adds	r5, #21
 800f480:	3304      	adds	r3, #4
 800f482:	42ae      	cmp	r6, r5
 800f484:	bf38      	it	cc
 800f486:	2304      	movcc	r3, #4
 800f488:	4418      	add	r0, r3
 800f48a:	4443      	add	r3, r8
 800f48c:	461e      	mov	r6, r3
 800f48e:	4605      	mov	r5, r0
 800f490:	4575      	cmp	r5, lr
 800f492:	d30e      	bcc.n	800f4b2 <__mdiff+0xea>
 800f494:	f10e 0103 	add.w	r1, lr, #3
 800f498:	1a09      	subs	r1, r1, r0
 800f49a:	f021 0103 	bic.w	r1, r1, #3
 800f49e:	3803      	subs	r0, #3
 800f4a0:	4586      	cmp	lr, r0
 800f4a2:	bf38      	it	cc
 800f4a4:	2100      	movcc	r1, #0
 800f4a6:	4419      	add	r1, r3
 800f4a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f4ac:	b18b      	cbz	r3, 800f4d2 <__mdiff+0x10a>
 800f4ae:	6117      	str	r7, [r2, #16]
 800f4b0:	e7a4      	b.n	800f3fc <__mdiff+0x34>
 800f4b2:	f855 8b04 	ldr.w	r8, [r5], #4
 800f4b6:	fa1f f188 	uxth.w	r1, r8
 800f4ba:	4461      	add	r1, ip
 800f4bc:	140c      	asrs	r4, r1, #16
 800f4be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f4c2:	b289      	uxth	r1, r1
 800f4c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f4c8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800f4cc:	f846 1b04 	str.w	r1, [r6], #4
 800f4d0:	e7de      	b.n	800f490 <__mdiff+0xc8>
 800f4d2:	3f01      	subs	r7, #1
 800f4d4:	e7e8      	b.n	800f4a8 <__mdiff+0xe0>
 800f4d6:	bf00      	nop
 800f4d8:	0805fd61 	.word	0x0805fd61
 800f4dc:	0805fe3c 	.word	0x0805fe3c

0800f4e0 <__ulp>:
 800f4e0:	4b11      	ldr	r3, [pc, #68]	; (800f528 <__ulp+0x48>)
 800f4e2:	400b      	ands	r3, r1
 800f4e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	dd02      	ble.n	800f4f2 <__ulp+0x12>
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	4770      	bx	lr
 800f4f2:	425b      	negs	r3, r3
 800f4f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f4f8:	f04f 0000 	mov.w	r0, #0
 800f4fc:	f04f 0100 	mov.w	r1, #0
 800f500:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f504:	da04      	bge.n	800f510 <__ulp+0x30>
 800f506:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f50a:	fa43 f102 	asr.w	r1, r3, r2
 800f50e:	4770      	bx	lr
 800f510:	f1a2 0314 	sub.w	r3, r2, #20
 800f514:	2b1e      	cmp	r3, #30
 800f516:	bfd6      	itet	le
 800f518:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f51c:	2301      	movgt	r3, #1
 800f51e:	fa22 f303 	lsrle.w	r3, r2, r3
 800f522:	4618      	mov	r0, r3
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	7ff00000 	.word	0x7ff00000

0800f52c <__b2d>:
 800f52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f530:	6907      	ldr	r7, [r0, #16]
 800f532:	f100 0914 	add.w	r9, r0, #20
 800f536:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800f53a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800f53e:	f1a7 0804 	sub.w	r8, r7, #4
 800f542:	4630      	mov	r0, r6
 800f544:	f7ff fd68 	bl	800f018 <__hi0bits>
 800f548:	f1c0 0320 	rsb	r3, r0, #32
 800f54c:	280a      	cmp	r0, #10
 800f54e:	600b      	str	r3, [r1, #0]
 800f550:	491f      	ldr	r1, [pc, #124]	; (800f5d0 <__b2d+0xa4>)
 800f552:	dc17      	bgt.n	800f584 <__b2d+0x58>
 800f554:	45c1      	cmp	r9, r8
 800f556:	bf28      	it	cs
 800f558:	2200      	movcs	r2, #0
 800f55a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f55e:	fa26 f30c 	lsr.w	r3, r6, ip
 800f562:	bf38      	it	cc
 800f564:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f568:	ea43 0501 	orr.w	r5, r3, r1
 800f56c:	f100 0315 	add.w	r3, r0, #21
 800f570:	fa06 f303 	lsl.w	r3, r6, r3
 800f574:	fa22 f20c 	lsr.w	r2, r2, ip
 800f578:	ea43 0402 	orr.w	r4, r3, r2
 800f57c:	4620      	mov	r0, r4
 800f57e:	4629      	mov	r1, r5
 800f580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f584:	45c1      	cmp	r9, r8
 800f586:	bf2e      	itee	cs
 800f588:	2200      	movcs	r2, #0
 800f58a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f58e:	f1a7 0808 	subcc.w	r8, r7, #8
 800f592:	f1b0 030b 	subs.w	r3, r0, #11
 800f596:	d016      	beq.n	800f5c6 <__b2d+0x9a>
 800f598:	f1c3 0720 	rsb	r7, r3, #32
 800f59c:	fa22 f107 	lsr.w	r1, r2, r7
 800f5a0:	45c8      	cmp	r8, r9
 800f5a2:	fa06 f603 	lsl.w	r6, r6, r3
 800f5a6:	ea46 0601 	orr.w	r6, r6, r1
 800f5aa:	bf94      	ite	ls
 800f5ac:	2100      	movls	r1, #0
 800f5ae:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800f5b2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800f5b6:	fa02 f003 	lsl.w	r0, r2, r3
 800f5ba:	40f9      	lsrs	r1, r7
 800f5bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f5c0:	ea40 0401 	orr.w	r4, r0, r1
 800f5c4:	e7da      	b.n	800f57c <__b2d+0x50>
 800f5c6:	4614      	mov	r4, r2
 800f5c8:	ea46 0501 	orr.w	r5, r6, r1
 800f5cc:	e7d6      	b.n	800f57c <__b2d+0x50>
 800f5ce:	bf00      	nop
 800f5d0:	3ff00000 	.word	0x3ff00000

0800f5d4 <__d2b>:
 800f5d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f5d8:	2101      	movs	r1, #1
 800f5da:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f5de:	4690      	mov	r8, r2
 800f5e0:	461d      	mov	r5, r3
 800f5e2:	f7ff fc5b 	bl	800ee9c <_Balloc>
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	b930      	cbnz	r0, 800f5f8 <__d2b+0x24>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	f240 310a 	movw	r1, #778	; 0x30a
 800f5f0:	4b24      	ldr	r3, [pc, #144]	; (800f684 <__d2b+0xb0>)
 800f5f2:	4825      	ldr	r0, [pc, #148]	; (800f688 <__d2b+0xb4>)
 800f5f4:	f000 f998 	bl	800f928 <__assert_func>
 800f5f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f5fc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f600:	bb2d      	cbnz	r5, 800f64e <__d2b+0x7a>
 800f602:	9301      	str	r3, [sp, #4]
 800f604:	f1b8 0300 	subs.w	r3, r8, #0
 800f608:	d026      	beq.n	800f658 <__d2b+0x84>
 800f60a:	4668      	mov	r0, sp
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	f7ff fd23 	bl	800f058 <__lo0bits>
 800f612:	9900      	ldr	r1, [sp, #0]
 800f614:	b1f0      	cbz	r0, 800f654 <__d2b+0x80>
 800f616:	9a01      	ldr	r2, [sp, #4]
 800f618:	f1c0 0320 	rsb	r3, r0, #32
 800f61c:	fa02 f303 	lsl.w	r3, r2, r3
 800f620:	430b      	orrs	r3, r1
 800f622:	40c2      	lsrs	r2, r0
 800f624:	6163      	str	r3, [r4, #20]
 800f626:	9201      	str	r2, [sp, #4]
 800f628:	9b01      	ldr	r3, [sp, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	bf14      	ite	ne
 800f62e:	2102      	movne	r1, #2
 800f630:	2101      	moveq	r1, #1
 800f632:	61a3      	str	r3, [r4, #24]
 800f634:	6121      	str	r1, [r4, #16]
 800f636:	b1c5      	cbz	r5, 800f66a <__d2b+0x96>
 800f638:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f63c:	4405      	add	r5, r0
 800f63e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f642:	603d      	str	r5, [r7, #0]
 800f644:	6030      	str	r0, [r6, #0]
 800f646:	4620      	mov	r0, r4
 800f648:	b002      	add	sp, #8
 800f64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f64e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f652:	e7d6      	b.n	800f602 <__d2b+0x2e>
 800f654:	6161      	str	r1, [r4, #20]
 800f656:	e7e7      	b.n	800f628 <__d2b+0x54>
 800f658:	a801      	add	r0, sp, #4
 800f65a:	f7ff fcfd 	bl	800f058 <__lo0bits>
 800f65e:	2101      	movs	r1, #1
 800f660:	9b01      	ldr	r3, [sp, #4]
 800f662:	6121      	str	r1, [r4, #16]
 800f664:	6163      	str	r3, [r4, #20]
 800f666:	3020      	adds	r0, #32
 800f668:	e7e5      	b.n	800f636 <__d2b+0x62>
 800f66a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f66e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f672:	6038      	str	r0, [r7, #0]
 800f674:	6918      	ldr	r0, [r3, #16]
 800f676:	f7ff fccf 	bl	800f018 <__hi0bits>
 800f67a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f67e:	6031      	str	r1, [r6, #0]
 800f680:	e7e1      	b.n	800f646 <__d2b+0x72>
 800f682:	bf00      	nop
 800f684:	0805fd61 	.word	0x0805fd61
 800f688:	0805fe3c 	.word	0x0805fe3c

0800f68c <__ratio>:
 800f68c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f690:	4688      	mov	r8, r1
 800f692:	4669      	mov	r1, sp
 800f694:	4681      	mov	r9, r0
 800f696:	f7ff ff49 	bl	800f52c <__b2d>
 800f69a:	460f      	mov	r7, r1
 800f69c:	4604      	mov	r4, r0
 800f69e:	460d      	mov	r5, r1
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	a901      	add	r1, sp, #4
 800f6a4:	f7ff ff42 	bl	800f52c <__b2d>
 800f6a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f6b0:	468b      	mov	fp, r1
 800f6b2:	eba3 0c02 	sub.w	ip, r3, r2
 800f6b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f6ba:	1a9b      	subs	r3, r3, r2
 800f6bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	bfd5      	itete	le
 800f6c4:	460a      	movle	r2, r1
 800f6c6:	462a      	movgt	r2, r5
 800f6c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f6cc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f6d0:	bfd8      	it	le
 800f6d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f6d6:	465b      	mov	r3, fp
 800f6d8:	4602      	mov	r2, r0
 800f6da:	4639      	mov	r1, r7
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f7f1 f891 	bl	8000804 <__aeabi_ddiv>
 800f6e2:	b003      	add	sp, #12
 800f6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6e8 <__copybits>:
 800f6e8:	3901      	subs	r1, #1
 800f6ea:	b570      	push	{r4, r5, r6, lr}
 800f6ec:	1149      	asrs	r1, r1, #5
 800f6ee:	6914      	ldr	r4, [r2, #16]
 800f6f0:	3101      	adds	r1, #1
 800f6f2:	f102 0314 	add.w	r3, r2, #20
 800f6f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f6fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f6fe:	1f05      	subs	r5, r0, #4
 800f700:	42a3      	cmp	r3, r4
 800f702:	d30c      	bcc.n	800f71e <__copybits+0x36>
 800f704:	1aa3      	subs	r3, r4, r2
 800f706:	3b11      	subs	r3, #17
 800f708:	f023 0303 	bic.w	r3, r3, #3
 800f70c:	3211      	adds	r2, #17
 800f70e:	42a2      	cmp	r2, r4
 800f710:	bf88      	it	hi
 800f712:	2300      	movhi	r3, #0
 800f714:	4418      	add	r0, r3
 800f716:	2300      	movs	r3, #0
 800f718:	4288      	cmp	r0, r1
 800f71a:	d305      	bcc.n	800f728 <__copybits+0x40>
 800f71c:	bd70      	pop	{r4, r5, r6, pc}
 800f71e:	f853 6b04 	ldr.w	r6, [r3], #4
 800f722:	f845 6f04 	str.w	r6, [r5, #4]!
 800f726:	e7eb      	b.n	800f700 <__copybits+0x18>
 800f728:	f840 3b04 	str.w	r3, [r0], #4
 800f72c:	e7f4      	b.n	800f718 <__copybits+0x30>

0800f72e <__any_on>:
 800f72e:	f100 0214 	add.w	r2, r0, #20
 800f732:	6900      	ldr	r0, [r0, #16]
 800f734:	114b      	asrs	r3, r1, #5
 800f736:	4298      	cmp	r0, r3
 800f738:	b510      	push	{r4, lr}
 800f73a:	db11      	blt.n	800f760 <__any_on+0x32>
 800f73c:	dd0a      	ble.n	800f754 <__any_on+0x26>
 800f73e:	f011 011f 	ands.w	r1, r1, #31
 800f742:	d007      	beq.n	800f754 <__any_on+0x26>
 800f744:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f748:	fa24 f001 	lsr.w	r0, r4, r1
 800f74c:	fa00 f101 	lsl.w	r1, r0, r1
 800f750:	428c      	cmp	r4, r1
 800f752:	d10b      	bne.n	800f76c <__any_on+0x3e>
 800f754:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f758:	4293      	cmp	r3, r2
 800f75a:	d803      	bhi.n	800f764 <__any_on+0x36>
 800f75c:	2000      	movs	r0, #0
 800f75e:	bd10      	pop	{r4, pc}
 800f760:	4603      	mov	r3, r0
 800f762:	e7f7      	b.n	800f754 <__any_on+0x26>
 800f764:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f768:	2900      	cmp	r1, #0
 800f76a:	d0f5      	beq.n	800f758 <__any_on+0x2a>
 800f76c:	2001      	movs	r0, #1
 800f76e:	e7f6      	b.n	800f75e <__any_on+0x30>

0800f770 <frexp>:
 800f770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f772:	4617      	mov	r7, r2
 800f774:	2200      	movs	r2, #0
 800f776:	603a      	str	r2, [r7, #0]
 800f778:	4a14      	ldr	r2, [pc, #80]	; (800f7cc <frexp+0x5c>)
 800f77a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f77e:	4296      	cmp	r6, r2
 800f780:	4604      	mov	r4, r0
 800f782:	460d      	mov	r5, r1
 800f784:	460b      	mov	r3, r1
 800f786:	dc1e      	bgt.n	800f7c6 <frexp+0x56>
 800f788:	4602      	mov	r2, r0
 800f78a:	4332      	orrs	r2, r6
 800f78c:	d01b      	beq.n	800f7c6 <frexp+0x56>
 800f78e:	4a10      	ldr	r2, [pc, #64]	; (800f7d0 <frexp+0x60>)
 800f790:	400a      	ands	r2, r1
 800f792:	b952      	cbnz	r2, 800f7aa <frexp+0x3a>
 800f794:	2200      	movs	r2, #0
 800f796:	4b0f      	ldr	r3, [pc, #60]	; (800f7d4 <frexp+0x64>)
 800f798:	f7f0 ff0a 	bl	80005b0 <__aeabi_dmul>
 800f79c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	460b      	mov	r3, r1
 800f7a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f7a8:	603a      	str	r2, [r7, #0]
 800f7aa:	683a      	ldr	r2, [r7, #0]
 800f7ac:	1536      	asrs	r6, r6, #20
 800f7ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f7b2:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 800f7b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f7ba:	4416      	add	r6, r2
 800f7bc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800f7c0:	603e      	str	r6, [r7, #0]
 800f7c2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7cc:	7fefffff 	.word	0x7fefffff
 800f7d0:	7ff00000 	.word	0x7ff00000
 800f7d4:	43500000 	.word	0x43500000

0800f7d8 <nan>:
 800f7d8:	2000      	movs	r0, #0
 800f7da:	4901      	ldr	r1, [pc, #4]	; (800f7e0 <nan+0x8>)
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	7ff80000 	.word	0x7ff80000

0800f7e4 <strncmp>:
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	b510      	push	{r4, lr}
 800f7e8:	b172      	cbz	r2, 800f808 <strncmp+0x24>
 800f7ea:	3901      	subs	r1, #1
 800f7ec:	1884      	adds	r4, r0, r2
 800f7ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f7f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f7f6:	4290      	cmp	r0, r2
 800f7f8:	d101      	bne.n	800f7fe <strncmp+0x1a>
 800f7fa:	42a3      	cmp	r3, r4
 800f7fc:	d101      	bne.n	800f802 <strncmp+0x1e>
 800f7fe:	1a80      	subs	r0, r0, r2
 800f800:	bd10      	pop	{r4, pc}
 800f802:	2800      	cmp	r0, #0
 800f804:	d1f3      	bne.n	800f7ee <strncmp+0xa>
 800f806:	e7fa      	b.n	800f7fe <strncmp+0x1a>
 800f808:	4610      	mov	r0, r2
 800f80a:	e7f9      	b.n	800f800 <strncmp+0x1c>

0800f80c <strncpy>:
 800f80c:	4603      	mov	r3, r0
 800f80e:	b510      	push	{r4, lr}
 800f810:	3901      	subs	r1, #1
 800f812:	b132      	cbz	r2, 800f822 <strncpy+0x16>
 800f814:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f818:	3a01      	subs	r2, #1
 800f81a:	f803 4b01 	strb.w	r4, [r3], #1
 800f81e:	2c00      	cmp	r4, #0
 800f820:	d1f7      	bne.n	800f812 <strncpy+0x6>
 800f822:	2100      	movs	r1, #0
 800f824:	441a      	add	r2, r3
 800f826:	4293      	cmp	r3, r2
 800f828:	d100      	bne.n	800f82c <strncpy+0x20>
 800f82a:	bd10      	pop	{r4, pc}
 800f82c:	f803 1b01 	strb.w	r1, [r3], #1
 800f830:	e7f9      	b.n	800f826 <strncpy+0x1a>

0800f832 <__ssprint_r>:
 800f832:	6893      	ldr	r3, [r2, #8]
 800f834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f838:	4680      	mov	r8, r0
 800f83a:	460c      	mov	r4, r1
 800f83c:	4617      	mov	r7, r2
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d061      	beq.n	800f906 <__ssprint_r+0xd4>
 800f842:	2300      	movs	r3, #0
 800f844:	469b      	mov	fp, r3
 800f846:	f8d2 a000 	ldr.w	sl, [r2]
 800f84a:	9301      	str	r3, [sp, #4]
 800f84c:	f1bb 0f00 	cmp.w	fp, #0
 800f850:	d02b      	beq.n	800f8aa <__ssprint_r+0x78>
 800f852:	68a6      	ldr	r6, [r4, #8]
 800f854:	455e      	cmp	r6, fp
 800f856:	d844      	bhi.n	800f8e2 <__ssprint_r+0xb0>
 800f858:	89a2      	ldrh	r2, [r4, #12]
 800f85a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f85e:	d03e      	beq.n	800f8de <__ssprint_r+0xac>
 800f860:	6820      	ldr	r0, [r4, #0]
 800f862:	6921      	ldr	r1, [r4, #16]
 800f864:	6965      	ldr	r5, [r4, #20]
 800f866:	eba0 0901 	sub.w	r9, r0, r1
 800f86a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f86e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f872:	f109 0001 	add.w	r0, r9, #1
 800f876:	106d      	asrs	r5, r5, #1
 800f878:	4458      	add	r0, fp
 800f87a:	4285      	cmp	r5, r0
 800f87c:	bf38      	it	cc
 800f87e:	4605      	movcc	r5, r0
 800f880:	0553      	lsls	r3, r2, #21
 800f882:	d545      	bpl.n	800f910 <__ssprint_r+0xde>
 800f884:	4629      	mov	r1, r5
 800f886:	4640      	mov	r0, r8
 800f888:	f7fa ff0a 	bl	800a6a0 <_malloc_r>
 800f88c:	4606      	mov	r6, r0
 800f88e:	b9a0      	cbnz	r0, 800f8ba <__ssprint_r+0x88>
 800f890:	230c      	movs	r3, #12
 800f892:	f8c8 3000 	str.w	r3, [r8]
 800f896:	89a3      	ldrh	r3, [r4, #12]
 800f898:	f04f 30ff 	mov.w	r0, #4294967295
 800f89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a0:	81a3      	strh	r3, [r4, #12]
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800f8a8:	e02f      	b.n	800f90a <__ssprint_r+0xd8>
 800f8aa:	f8da 3000 	ldr.w	r3, [sl]
 800f8ae:	f8da b004 	ldr.w	fp, [sl, #4]
 800f8b2:	9301      	str	r3, [sp, #4]
 800f8b4:	f10a 0a08 	add.w	sl, sl, #8
 800f8b8:	e7c8      	b.n	800f84c <__ssprint_r+0x1a>
 800f8ba:	464a      	mov	r2, r9
 800f8bc:	6921      	ldr	r1, [r4, #16]
 800f8be:	f7ff fac5 	bl	800ee4c <memcpy>
 800f8c2:	89a2      	ldrh	r2, [r4, #12]
 800f8c4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800f8c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f8cc:	81a2      	strh	r2, [r4, #12]
 800f8ce:	6126      	str	r6, [r4, #16]
 800f8d0:	444e      	add	r6, r9
 800f8d2:	6026      	str	r6, [r4, #0]
 800f8d4:	465e      	mov	r6, fp
 800f8d6:	6165      	str	r5, [r4, #20]
 800f8d8:	eba5 0509 	sub.w	r5, r5, r9
 800f8dc:	60a5      	str	r5, [r4, #8]
 800f8de:	455e      	cmp	r6, fp
 800f8e0:	d900      	bls.n	800f8e4 <__ssprint_r+0xb2>
 800f8e2:	465e      	mov	r6, fp
 800f8e4:	4632      	mov	r2, r6
 800f8e6:	9901      	ldr	r1, [sp, #4]
 800f8e8:	6820      	ldr	r0, [r4, #0]
 800f8ea:	f7ff fabd 	bl	800ee68 <memmove>
 800f8ee:	68a2      	ldr	r2, [r4, #8]
 800f8f0:	1b92      	subs	r2, r2, r6
 800f8f2:	60a2      	str	r2, [r4, #8]
 800f8f4:	6822      	ldr	r2, [r4, #0]
 800f8f6:	4432      	add	r2, r6
 800f8f8:	6022      	str	r2, [r4, #0]
 800f8fa:	68ba      	ldr	r2, [r7, #8]
 800f8fc:	eba2 030b 	sub.w	r3, r2, fp
 800f900:	60bb      	str	r3, [r7, #8]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1d1      	bne.n	800f8aa <__ssprint_r+0x78>
 800f906:	2000      	movs	r0, #0
 800f908:	6078      	str	r0, [r7, #4]
 800f90a:	b003      	add	sp, #12
 800f90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f910:	462a      	mov	r2, r5
 800f912:	4640      	mov	r0, r8
 800f914:	f7fb f952 	bl	800abbc <_realloc_r>
 800f918:	4606      	mov	r6, r0
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d1d7      	bne.n	800f8ce <__ssprint_r+0x9c>
 800f91e:	4640      	mov	r0, r8
 800f920:	6921      	ldr	r1, [r4, #16]
 800f922:	f7fe fe3f 	bl	800e5a4 <_free_r>
 800f926:	e7b3      	b.n	800f890 <__ssprint_r+0x5e>

0800f928 <__assert_func>:
 800f928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f92a:	4614      	mov	r4, r2
 800f92c:	461a      	mov	r2, r3
 800f92e:	4b09      	ldr	r3, [pc, #36]	; (800f954 <__assert_func+0x2c>)
 800f930:	4605      	mov	r5, r0
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68d8      	ldr	r0, [r3, #12]
 800f936:	b14c      	cbz	r4, 800f94c <__assert_func+0x24>
 800f938:	4b07      	ldr	r3, [pc, #28]	; (800f958 <__assert_func+0x30>)
 800f93a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f93e:	9100      	str	r1, [sp, #0]
 800f940:	462b      	mov	r3, r5
 800f942:	4906      	ldr	r1, [pc, #24]	; (800f95c <__assert_func+0x34>)
 800f944:	f000 f89a 	bl	800fa7c <fiprintf>
 800f948:	f000 fe02 	bl	8010550 <abort>
 800f94c:	4b04      	ldr	r3, [pc, #16]	; (800f960 <__assert_func+0x38>)
 800f94e:	461c      	mov	r4, r3
 800f950:	e7f3      	b.n	800f93a <__assert_func+0x12>
 800f952:	bf00      	nop
 800f954:	20000048 	.word	0x20000048
 800f958:	0805ff94 	.word	0x0805ff94
 800f95c:	0805ffa1 	.word	0x0805ffa1
 800f960:	0805ffcf 	.word	0x0805ffcf

0800f964 <_calloc_r>:
 800f964:	b538      	push	{r3, r4, r5, lr}
 800f966:	fba1 1502 	umull	r1, r5, r1, r2
 800f96a:	b92d      	cbnz	r5, 800f978 <_calloc_r+0x14>
 800f96c:	f7fa fe98 	bl	800a6a0 <_malloc_r>
 800f970:	4604      	mov	r4, r0
 800f972:	b938      	cbnz	r0, 800f984 <_calloc_r+0x20>
 800f974:	4620      	mov	r0, r4
 800f976:	bd38      	pop	{r3, r4, r5, pc}
 800f978:	f7f9 fbfa 	bl	8009170 <__errno>
 800f97c:	230c      	movs	r3, #12
 800f97e:	2400      	movs	r4, #0
 800f980:	6003      	str	r3, [r0, #0]
 800f982:	e7f7      	b.n	800f974 <_calloc_r+0x10>
 800f984:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800f988:	f022 0203 	bic.w	r2, r2, #3
 800f98c:	3a04      	subs	r2, #4
 800f98e:	2a24      	cmp	r2, #36	; 0x24
 800f990:	d819      	bhi.n	800f9c6 <_calloc_r+0x62>
 800f992:	2a13      	cmp	r2, #19
 800f994:	d915      	bls.n	800f9c2 <_calloc_r+0x5e>
 800f996:	2a1b      	cmp	r2, #27
 800f998:	e9c0 5500 	strd	r5, r5, [r0]
 800f99c:	d806      	bhi.n	800f9ac <_calloc_r+0x48>
 800f99e:	f100 0308 	add.w	r3, r0, #8
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	e9c3 2200 	strd	r2, r2, [r3]
 800f9a8:	609a      	str	r2, [r3, #8]
 800f9aa:	e7e3      	b.n	800f974 <_calloc_r+0x10>
 800f9ac:	2a24      	cmp	r2, #36	; 0x24
 800f9ae:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800f9b2:	bf11      	iteee	ne
 800f9b4:	f100 0310 	addne.w	r3, r0, #16
 800f9b8:	6105      	streq	r5, [r0, #16]
 800f9ba:	f100 0318 	addeq.w	r3, r0, #24
 800f9be:	6145      	streq	r5, [r0, #20]
 800f9c0:	e7ef      	b.n	800f9a2 <_calloc_r+0x3e>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	e7ed      	b.n	800f9a2 <_calloc_r+0x3e>
 800f9c6:	4629      	mov	r1, r5
 800f9c8:	f7f9 fbfc 	bl	80091c4 <memset>
 800f9cc:	e7d2      	b.n	800f974 <_calloc_r+0x10>

0800f9ce <_fclose_r>:
 800f9ce:	b570      	push	{r4, r5, r6, lr}
 800f9d0:	4606      	mov	r6, r0
 800f9d2:	460c      	mov	r4, r1
 800f9d4:	b911      	cbnz	r1, 800f9dc <_fclose_r+0xe>
 800f9d6:	2500      	movs	r5, #0
 800f9d8:	4628      	mov	r0, r5
 800f9da:	bd70      	pop	{r4, r5, r6, pc}
 800f9dc:	b118      	cbz	r0, 800f9e6 <_fclose_r+0x18>
 800f9de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f9e0:	b90b      	cbnz	r3, 800f9e6 <_fclose_r+0x18>
 800f9e2:	f7fe fd63 	bl	800e4ac <__sinit>
 800f9e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9e8:	07d8      	lsls	r0, r3, #31
 800f9ea:	d405      	bmi.n	800f9f8 <_fclose_r+0x2a>
 800f9ec:	89a3      	ldrh	r3, [r4, #12]
 800f9ee:	0599      	lsls	r1, r3, #22
 800f9f0:	d402      	bmi.n	800f9f8 <_fclose_r+0x2a>
 800f9f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9f4:	f7fa fe30 	bl	800a658 <__retarget_lock_acquire_recursive>
 800f9f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9fc:	b93b      	cbnz	r3, 800fa0e <_fclose_r+0x40>
 800f9fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800fa00:	f015 0501 	ands.w	r5, r5, #1
 800fa04:	d1e7      	bne.n	800f9d6 <_fclose_r+0x8>
 800fa06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa08:	f7fa fe27 	bl	800a65a <__retarget_lock_release_recursive>
 800fa0c:	e7e4      	b.n	800f9d8 <_fclose_r+0xa>
 800fa0e:	4621      	mov	r1, r4
 800fa10:	4630      	mov	r0, r6
 800fa12:	f7fe fc55 	bl	800e2c0 <__sflush_r>
 800fa16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa18:	4605      	mov	r5, r0
 800fa1a:	b133      	cbz	r3, 800fa2a <_fclose_r+0x5c>
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	69e1      	ldr	r1, [r4, #28]
 800fa20:	4798      	blx	r3
 800fa22:	2800      	cmp	r0, #0
 800fa24:	bfb8      	it	lt
 800fa26:	f04f 35ff 	movlt.w	r5, #4294967295
 800fa2a:	89a3      	ldrh	r3, [r4, #12]
 800fa2c:	061a      	lsls	r2, r3, #24
 800fa2e:	d503      	bpl.n	800fa38 <_fclose_r+0x6a>
 800fa30:	4630      	mov	r0, r6
 800fa32:	6921      	ldr	r1, [r4, #16]
 800fa34:	f7fe fdb6 	bl	800e5a4 <_free_r>
 800fa38:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fa3a:	b141      	cbz	r1, 800fa4e <_fclose_r+0x80>
 800fa3c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800fa40:	4299      	cmp	r1, r3
 800fa42:	d002      	beq.n	800fa4a <_fclose_r+0x7c>
 800fa44:	4630      	mov	r0, r6
 800fa46:	f7fe fdad 	bl	800e5a4 <_free_r>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	6323      	str	r3, [r4, #48]	; 0x30
 800fa4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fa50:	b121      	cbz	r1, 800fa5c <_fclose_r+0x8e>
 800fa52:	4630      	mov	r0, r6
 800fa54:	f7fe fda6 	bl	800e5a4 <_free_r>
 800fa58:	2300      	movs	r3, #0
 800fa5a:	6463      	str	r3, [r4, #68]	; 0x44
 800fa5c:	f7fe fd0e 	bl	800e47c <__sfp_lock_acquire>
 800fa60:	2300      	movs	r3, #0
 800fa62:	81a3      	strh	r3, [r4, #12]
 800fa64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa66:	07db      	lsls	r3, r3, #31
 800fa68:	d402      	bmi.n	800fa70 <_fclose_r+0xa2>
 800fa6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa6c:	f7fa fdf5 	bl	800a65a <__retarget_lock_release_recursive>
 800fa70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa72:	f7fa fdf0 	bl	800a656 <__retarget_lock_close_recursive>
 800fa76:	f7fe fd07 	bl	800e488 <__sfp_lock_release>
 800fa7a:	e7ad      	b.n	800f9d8 <_fclose_r+0xa>

0800fa7c <fiprintf>:
 800fa7c:	b40e      	push	{r1, r2, r3}
 800fa7e:	b503      	push	{r0, r1, lr}
 800fa80:	4601      	mov	r1, r0
 800fa82:	ab03      	add	r3, sp, #12
 800fa84:	4805      	ldr	r0, [pc, #20]	; (800fa9c <fiprintf+0x20>)
 800fa86:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa8a:	6800      	ldr	r0, [r0, #0]
 800fa8c:	9301      	str	r3, [sp, #4]
 800fa8e:	f000 f839 	bl	800fb04 <_vfiprintf_r>
 800fa92:	b002      	add	sp, #8
 800fa94:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa98:	b003      	add	sp, #12
 800fa9a:	4770      	bx	lr
 800fa9c:	20000048 	.word	0x20000048

0800faa0 <__sprint_r>:
 800faa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa4:	6893      	ldr	r3, [r2, #8]
 800faa6:	4680      	mov	r8, r0
 800faa8:	460f      	mov	r7, r1
 800faaa:	4614      	mov	r4, r2
 800faac:	b91b      	cbnz	r3, 800fab6 <__sprint_r+0x16>
 800faae:	4618      	mov	r0, r3
 800fab0:	6053      	str	r3, [r2, #4]
 800fab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800fab8:	049d      	lsls	r5, r3, #18
 800faba:	d520      	bpl.n	800fafe <__sprint_r+0x5e>
 800fabc:	6815      	ldr	r5, [r2, #0]
 800fabe:	3508      	adds	r5, #8
 800fac0:	f04f 0900 	mov.w	r9, #0
 800fac4:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800fac8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800facc:	45ca      	cmp	sl, r9
 800face:	dc0b      	bgt.n	800fae8 <__sprint_r+0x48>
 800fad0:	68a0      	ldr	r0, [r4, #8]
 800fad2:	f026 0603 	bic.w	r6, r6, #3
 800fad6:	1b80      	subs	r0, r0, r6
 800fad8:	60a0      	str	r0, [r4, #8]
 800fada:	3508      	adds	r5, #8
 800fadc:	2800      	cmp	r0, #0
 800fade:	d1ef      	bne.n	800fac0 <__sprint_r+0x20>
 800fae0:	2300      	movs	r3, #0
 800fae2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800fae6:	e7e4      	b.n	800fab2 <__sprint_r+0x12>
 800fae8:	463a      	mov	r2, r7
 800faea:	4640      	mov	r0, r8
 800faec:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800faf0:	f000 fd76 	bl	80105e0 <_fputwc_r>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d0f3      	beq.n	800fae0 <__sprint_r+0x40>
 800faf8:	f109 0901 	add.w	r9, r9, #1
 800fafc:	e7e6      	b.n	800facc <__sprint_r+0x2c>
 800fafe:	f000 fd99 	bl	8010634 <__sfvwrite_r>
 800fb02:	e7ed      	b.n	800fae0 <__sprint_r+0x40>

0800fb04 <_vfiprintf_r>:
 800fb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb08:	b0bb      	sub	sp, #236	; 0xec
 800fb0a:	460f      	mov	r7, r1
 800fb0c:	461d      	mov	r5, r3
 800fb0e:	461c      	mov	r4, r3
 800fb10:	4681      	mov	r9, r0
 800fb12:	9202      	str	r2, [sp, #8]
 800fb14:	b118      	cbz	r0, 800fb1e <_vfiprintf_r+0x1a>
 800fb16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fb18:	b90b      	cbnz	r3, 800fb1e <_vfiprintf_r+0x1a>
 800fb1a:	f7fe fcc7 	bl	800e4ac <__sinit>
 800fb1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb20:	07d8      	lsls	r0, r3, #31
 800fb22:	d405      	bmi.n	800fb30 <_vfiprintf_r+0x2c>
 800fb24:	89bb      	ldrh	r3, [r7, #12]
 800fb26:	0599      	lsls	r1, r3, #22
 800fb28:	d402      	bmi.n	800fb30 <_vfiprintf_r+0x2c>
 800fb2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fb2c:	f7fa fd94 	bl	800a658 <__retarget_lock_acquire_recursive>
 800fb30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fb34:	049a      	lsls	r2, r3, #18
 800fb36:	d406      	bmi.n	800fb46 <_vfiprintf_r+0x42>
 800fb38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fb3c:	81bb      	strh	r3, [r7, #12]
 800fb3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb44:	667b      	str	r3, [r7, #100]	; 0x64
 800fb46:	89bb      	ldrh	r3, [r7, #12]
 800fb48:	071e      	lsls	r6, r3, #28
 800fb4a:	d501      	bpl.n	800fb50 <_vfiprintf_r+0x4c>
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	b9ab      	cbnz	r3, 800fb7c <_vfiprintf_r+0x78>
 800fb50:	4639      	mov	r1, r7
 800fb52:	4648      	mov	r0, r9
 800fb54:	f000 fca4 	bl	80104a0 <__swsetup_r>
 800fb58:	b180      	cbz	r0, 800fb7c <_vfiprintf_r+0x78>
 800fb5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb5c:	07d8      	lsls	r0, r3, #31
 800fb5e:	d506      	bpl.n	800fb6e <_vfiprintf_r+0x6a>
 800fb60:	f04f 33ff 	mov.w	r3, #4294967295
 800fb64:	9303      	str	r3, [sp, #12]
 800fb66:	9803      	ldr	r0, [sp, #12]
 800fb68:	b03b      	add	sp, #236	; 0xec
 800fb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb6e:	89bb      	ldrh	r3, [r7, #12]
 800fb70:	0599      	lsls	r1, r3, #22
 800fb72:	d4f5      	bmi.n	800fb60 <_vfiprintf_r+0x5c>
 800fb74:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fb76:	f7fa fd70 	bl	800a65a <__retarget_lock_release_recursive>
 800fb7a:	e7f1      	b.n	800fb60 <_vfiprintf_r+0x5c>
 800fb7c:	89bb      	ldrh	r3, [r7, #12]
 800fb7e:	f003 021a 	and.w	r2, r3, #26
 800fb82:	2a0a      	cmp	r2, #10
 800fb84:	d114      	bne.n	800fbb0 <_vfiprintf_r+0xac>
 800fb86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fb8a:	2a00      	cmp	r2, #0
 800fb8c:	db10      	blt.n	800fbb0 <_vfiprintf_r+0xac>
 800fb8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb90:	07d2      	lsls	r2, r2, #31
 800fb92:	d404      	bmi.n	800fb9e <_vfiprintf_r+0x9a>
 800fb94:	059e      	lsls	r6, r3, #22
 800fb96:	d402      	bmi.n	800fb9e <_vfiprintf_r+0x9a>
 800fb98:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fb9a:	f7fa fd5e 	bl	800a65a <__retarget_lock_release_recursive>
 800fb9e:	462b      	mov	r3, r5
 800fba0:	4639      	mov	r1, r7
 800fba2:	4648      	mov	r0, r9
 800fba4:	9a02      	ldr	r2, [sp, #8]
 800fba6:	b03b      	add	sp, #236	; 0xec
 800fba8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	f000 bc38 	b.w	8010420 <__sbprintf>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800fbb6:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800fbba:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800fbbe:	ae11      	add	r6, sp, #68	; 0x44
 800fbc0:	960e      	str	r6, [sp, #56]	; 0x38
 800fbc2:	9303      	str	r3, [sp, #12]
 800fbc4:	9b02      	ldr	r3, [sp, #8]
 800fbc6:	461d      	mov	r5, r3
 800fbc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbcc:	b10a      	cbz	r2, 800fbd2 <_vfiprintf_r+0xce>
 800fbce:	2a25      	cmp	r2, #37	; 0x25
 800fbd0:	d1f9      	bne.n	800fbc6 <_vfiprintf_r+0xc2>
 800fbd2:	9b02      	ldr	r3, [sp, #8]
 800fbd4:	ebb5 0803 	subs.w	r8, r5, r3
 800fbd8:	d00d      	beq.n	800fbf6 <_vfiprintf_r+0xf2>
 800fbda:	e9c6 3800 	strd	r3, r8, [r6]
 800fbde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbe0:	4443      	add	r3, r8
 800fbe2:	9310      	str	r3, [sp, #64]	; 0x40
 800fbe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	2b07      	cmp	r3, #7
 800fbea:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbec:	dc75      	bgt.n	800fcda <_vfiprintf_r+0x1d6>
 800fbee:	3608      	adds	r6, #8
 800fbf0:	9b03      	ldr	r3, [sp, #12]
 800fbf2:	4443      	add	r3, r8
 800fbf4:	9303      	str	r3, [sp, #12]
 800fbf6:	782b      	ldrb	r3, [r5, #0]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f000 83d5 	beq.w	80103a8 <_vfiprintf_r+0x8a4>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	f04f 31ff 	mov.w	r1, #4294967295
 800fc04:	469a      	mov	sl, r3
 800fc06:	1c6a      	adds	r2, r5, #1
 800fc08:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800fc0c:	9101      	str	r1, [sp, #4]
 800fc0e:	9304      	str	r3, [sp, #16]
 800fc10:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fc14:	9202      	str	r2, [sp, #8]
 800fc16:	f1a3 0220 	sub.w	r2, r3, #32
 800fc1a:	2a5a      	cmp	r2, #90	; 0x5a
 800fc1c:	f200 831d 	bhi.w	801025a <_vfiprintf_r+0x756>
 800fc20:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fc24:	031b009a 	.word	0x031b009a
 800fc28:	00a2031b 	.word	0x00a2031b
 800fc2c:	031b031b 	.word	0x031b031b
 800fc30:	0082031b 	.word	0x0082031b
 800fc34:	031b031b 	.word	0x031b031b
 800fc38:	00af00a5 	.word	0x00af00a5
 800fc3c:	00ac031b 	.word	0x00ac031b
 800fc40:	031b00b1 	.word	0x031b00b1
 800fc44:	00cf00cc 	.word	0x00cf00cc
 800fc48:	00cf00cf 	.word	0x00cf00cf
 800fc4c:	00cf00cf 	.word	0x00cf00cf
 800fc50:	00cf00cf 	.word	0x00cf00cf
 800fc54:	00cf00cf 	.word	0x00cf00cf
 800fc58:	031b031b 	.word	0x031b031b
 800fc5c:	031b031b 	.word	0x031b031b
 800fc60:	031b031b 	.word	0x031b031b
 800fc64:	031b031b 	.word	0x031b031b
 800fc68:	00f9031b 	.word	0x00f9031b
 800fc6c:	031b0107 	.word	0x031b0107
 800fc70:	031b031b 	.word	0x031b031b
 800fc74:	031b031b 	.word	0x031b031b
 800fc78:	031b031b 	.word	0x031b031b
 800fc7c:	031b031b 	.word	0x031b031b
 800fc80:	0156031b 	.word	0x0156031b
 800fc84:	031b031b 	.word	0x031b031b
 800fc88:	01a0031b 	.word	0x01a0031b
 800fc8c:	027d031b 	.word	0x027d031b
 800fc90:	031b031b 	.word	0x031b031b
 800fc94:	031b029d 	.word	0x031b029d
 800fc98:	031b031b 	.word	0x031b031b
 800fc9c:	031b031b 	.word	0x031b031b
 800fca0:	031b031b 	.word	0x031b031b
 800fca4:	031b031b 	.word	0x031b031b
 800fca8:	00f9031b 	.word	0x00f9031b
 800fcac:	031b0109 	.word	0x031b0109
 800fcb0:	031b031b 	.word	0x031b031b
 800fcb4:	010900df 	.word	0x010900df
 800fcb8:	031b00f3 	.word	0x031b00f3
 800fcbc:	031b00ec 	.word	0x031b00ec
 800fcc0:	01580134 	.word	0x01580134
 800fcc4:	00f3018d 	.word	0x00f3018d
 800fcc8:	01a0031b 	.word	0x01a0031b
 800fccc:	027f0098 	.word	0x027f0098
 800fcd0:	031b031b 	.word	0x031b031b
 800fcd4:	031b0065 	.word	0x031b0065
 800fcd8:	0098      	.short	0x0098
 800fcda:	4639      	mov	r1, r7
 800fcdc:	4648      	mov	r0, r9
 800fcde:	aa0e      	add	r2, sp, #56	; 0x38
 800fce0:	f7ff fede 	bl	800faa0 <__sprint_r>
 800fce4:	2800      	cmp	r0, #0
 800fce6:	f040 833e 	bne.w	8010366 <_vfiprintf_r+0x862>
 800fcea:	ae11      	add	r6, sp, #68	; 0x44
 800fcec:	e780      	b.n	800fbf0 <_vfiprintf_r+0xec>
 800fcee:	4a9c      	ldr	r2, [pc, #624]	; (800ff60 <_vfiprintf_r+0x45c>)
 800fcf0:	9206      	str	r2, [sp, #24]
 800fcf2:	f01a 0220 	ands.w	r2, sl, #32
 800fcf6:	f000 8234 	beq.w	8010162 <_vfiprintf_r+0x65e>
 800fcfa:	3407      	adds	r4, #7
 800fcfc:	f024 0207 	bic.w	r2, r4, #7
 800fd00:	4693      	mov	fp, r2
 800fd02:	6855      	ldr	r5, [r2, #4]
 800fd04:	f85b 4b08 	ldr.w	r4, [fp], #8
 800fd08:	f01a 0f01 	tst.w	sl, #1
 800fd0c:	d009      	beq.n	800fd22 <_vfiprintf_r+0x21e>
 800fd0e:	ea54 0205 	orrs.w	r2, r4, r5
 800fd12:	bf1f      	itttt	ne
 800fd14:	2230      	movne	r2, #48	; 0x30
 800fd16:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800fd1a:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800fd1e:	f04a 0a02 	orrne.w	sl, sl, #2
 800fd22:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800fd26:	e118      	b.n	800ff5a <_vfiprintf_r+0x456>
 800fd28:	4648      	mov	r0, r9
 800fd2a:	f7fa fc8f 	bl	800a64c <_localeconv_r>
 800fd2e:	6843      	ldr	r3, [r0, #4]
 800fd30:	4618      	mov	r0, r3
 800fd32:	9309      	str	r3, [sp, #36]	; 0x24
 800fd34:	f7f0 fa78 	bl	8000228 <strlen>
 800fd38:	9008      	str	r0, [sp, #32]
 800fd3a:	4648      	mov	r0, r9
 800fd3c:	f7fa fc86 	bl	800a64c <_localeconv_r>
 800fd40:	6883      	ldr	r3, [r0, #8]
 800fd42:	9307      	str	r3, [sp, #28]
 800fd44:	9b08      	ldr	r3, [sp, #32]
 800fd46:	b12b      	cbz	r3, 800fd54 <_vfiprintf_r+0x250>
 800fd48:	9b07      	ldr	r3, [sp, #28]
 800fd4a:	b11b      	cbz	r3, 800fd54 <_vfiprintf_r+0x250>
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	b10b      	cbz	r3, 800fd54 <_vfiprintf_r+0x250>
 800fd50:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800fd54:	9a02      	ldr	r2, [sp, #8]
 800fd56:	e75b      	b.n	800fc10 <_vfiprintf_r+0x10c>
 800fd58:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1f9      	bne.n	800fd54 <_vfiprintf_r+0x250>
 800fd60:	2320      	movs	r3, #32
 800fd62:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800fd66:	e7f5      	b.n	800fd54 <_vfiprintf_r+0x250>
 800fd68:	f04a 0a01 	orr.w	sl, sl, #1
 800fd6c:	e7f2      	b.n	800fd54 <_vfiprintf_r+0x250>
 800fd6e:	f854 3b04 	ldr.w	r3, [r4], #4
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	9304      	str	r3, [sp, #16]
 800fd76:	daed      	bge.n	800fd54 <_vfiprintf_r+0x250>
 800fd78:	425b      	negs	r3, r3
 800fd7a:	9304      	str	r3, [sp, #16]
 800fd7c:	f04a 0a04 	orr.w	sl, sl, #4
 800fd80:	e7e8      	b.n	800fd54 <_vfiprintf_r+0x250>
 800fd82:	232b      	movs	r3, #43	; 0x2b
 800fd84:	e7ed      	b.n	800fd62 <_vfiprintf_r+0x25e>
 800fd86:	9a02      	ldr	r2, [sp, #8]
 800fd88:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800fd8e:	d112      	bne.n	800fdb6 <_vfiprintf_r+0x2b2>
 800fd90:	f854 0b04 	ldr.w	r0, [r4], #4
 800fd94:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800fd98:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fd9c:	e7da      	b.n	800fd54 <_vfiprintf_r+0x250>
 800fd9e:	200a      	movs	r0, #10
 800fda0:	9b01      	ldr	r3, [sp, #4]
 800fda2:	fb00 1303 	mla	r3, r0, r3, r1
 800fda6:	9301      	str	r3, [sp, #4]
 800fda8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fdac:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fdb0:	2909      	cmp	r1, #9
 800fdb2:	d9f4      	bls.n	800fd9e <_vfiprintf_r+0x29a>
 800fdb4:	e72e      	b.n	800fc14 <_vfiprintf_r+0x110>
 800fdb6:	2100      	movs	r1, #0
 800fdb8:	9101      	str	r1, [sp, #4]
 800fdba:	e7f7      	b.n	800fdac <_vfiprintf_r+0x2a8>
 800fdbc:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800fdc0:	e7c8      	b.n	800fd54 <_vfiprintf_r+0x250>
 800fdc2:	2100      	movs	r1, #0
 800fdc4:	9a02      	ldr	r2, [sp, #8]
 800fdc6:	9104      	str	r1, [sp, #16]
 800fdc8:	200a      	movs	r0, #10
 800fdca:	9904      	ldr	r1, [sp, #16]
 800fdcc:	3b30      	subs	r3, #48	; 0x30
 800fdce:	fb00 3301 	mla	r3, r0, r1, r3
 800fdd2:	9304      	str	r3, [sp, #16]
 800fdd4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fdd8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fddc:	2909      	cmp	r1, #9
 800fdde:	d9f3      	bls.n	800fdc8 <_vfiprintf_r+0x2c4>
 800fde0:	e718      	b.n	800fc14 <_vfiprintf_r+0x110>
 800fde2:	9b02      	ldr	r3, [sp, #8]
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	2b68      	cmp	r3, #104	; 0x68
 800fde8:	bf01      	itttt	eq
 800fdea:	9b02      	ldreq	r3, [sp, #8]
 800fdec:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800fdf0:	3301      	addeq	r3, #1
 800fdf2:	9302      	streq	r3, [sp, #8]
 800fdf4:	bf18      	it	ne
 800fdf6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800fdfa:	e7ab      	b.n	800fd54 <_vfiprintf_r+0x250>
 800fdfc:	9b02      	ldr	r3, [sp, #8]
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	2b6c      	cmp	r3, #108	; 0x6c
 800fe02:	d105      	bne.n	800fe10 <_vfiprintf_r+0x30c>
 800fe04:	9b02      	ldr	r3, [sp, #8]
 800fe06:	3301      	adds	r3, #1
 800fe08:	9302      	str	r3, [sp, #8]
 800fe0a:	f04a 0a20 	orr.w	sl, sl, #32
 800fe0e:	e7a1      	b.n	800fd54 <_vfiprintf_r+0x250>
 800fe10:	f04a 0a10 	orr.w	sl, sl, #16
 800fe14:	e79e      	b.n	800fd54 <_vfiprintf_r+0x250>
 800fe16:	46a3      	mov	fp, r4
 800fe18:	2100      	movs	r1, #0
 800fe1a:	f85b 3b04 	ldr.w	r3, [fp], #4
 800fe1e:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800fe22:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800fe26:	2301      	movs	r3, #1
 800fe28:	460d      	mov	r5, r1
 800fe2a:	9301      	str	r3, [sp, #4]
 800fe2c:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 800fe30:	e0ad      	b.n	800ff8e <_vfiprintf_r+0x48a>
 800fe32:	f04a 0a10 	orr.w	sl, sl, #16
 800fe36:	f01a 0f20 	tst.w	sl, #32
 800fe3a:	d010      	beq.n	800fe5e <_vfiprintf_r+0x35a>
 800fe3c:	3407      	adds	r4, #7
 800fe3e:	f024 0307 	bic.w	r3, r4, #7
 800fe42:	469b      	mov	fp, r3
 800fe44:	685d      	ldr	r5, [r3, #4]
 800fe46:	f85b 4b08 	ldr.w	r4, [fp], #8
 800fe4a:	2d00      	cmp	r5, #0
 800fe4c:	da05      	bge.n	800fe5a <_vfiprintf_r+0x356>
 800fe4e:	232d      	movs	r3, #45	; 0x2d
 800fe50:	4264      	negs	r4, r4
 800fe52:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800fe56:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	e04a      	b.n	800fef4 <_vfiprintf_r+0x3f0>
 800fe5e:	46a3      	mov	fp, r4
 800fe60:	f01a 0f10 	tst.w	sl, #16
 800fe64:	f85b 5b04 	ldr.w	r5, [fp], #4
 800fe68:	d002      	beq.n	800fe70 <_vfiprintf_r+0x36c>
 800fe6a:	462c      	mov	r4, r5
 800fe6c:	17ed      	asrs	r5, r5, #31
 800fe6e:	e7ec      	b.n	800fe4a <_vfiprintf_r+0x346>
 800fe70:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800fe74:	d003      	beq.n	800fe7e <_vfiprintf_r+0x37a>
 800fe76:	b22c      	sxth	r4, r5
 800fe78:	f345 35c0 	sbfx	r5, r5, #15, #1
 800fe7c:	e7e5      	b.n	800fe4a <_vfiprintf_r+0x346>
 800fe7e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800fe82:	d0f2      	beq.n	800fe6a <_vfiprintf_r+0x366>
 800fe84:	b26c      	sxtb	r4, r5
 800fe86:	f345 15c0 	sbfx	r5, r5, #7, #1
 800fe8a:	e7de      	b.n	800fe4a <_vfiprintf_r+0x346>
 800fe8c:	f01a 0f20 	tst.w	sl, #32
 800fe90:	f104 0b04 	add.w	fp, r4, #4
 800fe94:	d007      	beq.n	800fea6 <_vfiprintf_r+0x3a2>
 800fe96:	9a03      	ldr	r2, [sp, #12]
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	9903      	ldr	r1, [sp, #12]
 800fe9c:	17d2      	asrs	r2, r2, #31
 800fe9e:	e9c3 1200 	strd	r1, r2, [r3]
 800fea2:	465c      	mov	r4, fp
 800fea4:	e68e      	b.n	800fbc4 <_vfiprintf_r+0xc0>
 800fea6:	f01a 0f10 	tst.w	sl, #16
 800feaa:	d003      	beq.n	800feb4 <_vfiprintf_r+0x3b0>
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	9a03      	ldr	r2, [sp, #12]
 800feb0:	601a      	str	r2, [r3, #0]
 800feb2:	e7f6      	b.n	800fea2 <_vfiprintf_r+0x39e>
 800feb4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800feb8:	d003      	beq.n	800fec2 <_vfiprintf_r+0x3be>
 800feba:	6823      	ldr	r3, [r4, #0]
 800febc:	9a03      	ldr	r2, [sp, #12]
 800febe:	801a      	strh	r2, [r3, #0]
 800fec0:	e7ef      	b.n	800fea2 <_vfiprintf_r+0x39e>
 800fec2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800fec6:	d0f1      	beq.n	800feac <_vfiprintf_r+0x3a8>
 800fec8:	6823      	ldr	r3, [r4, #0]
 800feca:	9a03      	ldr	r2, [sp, #12]
 800fecc:	701a      	strb	r2, [r3, #0]
 800fece:	e7e8      	b.n	800fea2 <_vfiprintf_r+0x39e>
 800fed0:	f04a 0a10 	orr.w	sl, sl, #16
 800fed4:	f01a 0320 	ands.w	r3, sl, #32
 800fed8:	d01f      	beq.n	800ff1a <_vfiprintf_r+0x416>
 800feda:	3407      	adds	r4, #7
 800fedc:	f024 0307 	bic.w	r3, r4, #7
 800fee0:	469b      	mov	fp, r3
 800fee2:	685d      	ldr	r5, [r3, #4]
 800fee4:	f85b 4b08 	ldr.w	r4, [fp], #8
 800fee8:	2300      	movs	r3, #0
 800feea:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800feee:	2200      	movs	r2, #0
 800fef0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800fef4:	9a01      	ldr	r2, [sp, #4]
 800fef6:	3201      	adds	r2, #1
 800fef8:	f000 8263 	beq.w	80103c2 <_vfiprintf_r+0x8be>
 800fefc:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800ff00:	9205      	str	r2, [sp, #20]
 800ff02:	ea54 0205 	orrs.w	r2, r4, r5
 800ff06:	f040 8262 	bne.w	80103ce <_vfiprintf_r+0x8ca>
 800ff0a:	9a01      	ldr	r2, [sp, #4]
 800ff0c:	2a00      	cmp	r2, #0
 800ff0e:	f000 8199 	beq.w	8010244 <_vfiprintf_r+0x740>
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	f040 825e 	bne.w	80103d4 <_vfiprintf_r+0x8d0>
 800ff18:	e13a      	b.n	8010190 <_vfiprintf_r+0x68c>
 800ff1a:	46a3      	mov	fp, r4
 800ff1c:	f01a 0510 	ands.w	r5, sl, #16
 800ff20:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ff24:	d001      	beq.n	800ff2a <_vfiprintf_r+0x426>
 800ff26:	461d      	mov	r5, r3
 800ff28:	e7de      	b.n	800fee8 <_vfiprintf_r+0x3e4>
 800ff2a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ff2e:	d001      	beq.n	800ff34 <_vfiprintf_r+0x430>
 800ff30:	b2a4      	uxth	r4, r4
 800ff32:	e7d9      	b.n	800fee8 <_vfiprintf_r+0x3e4>
 800ff34:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ff38:	d0d6      	beq.n	800fee8 <_vfiprintf_r+0x3e4>
 800ff3a:	b2e4      	uxtb	r4, r4
 800ff3c:	e7f3      	b.n	800ff26 <_vfiprintf_r+0x422>
 800ff3e:	2330      	movs	r3, #48	; 0x30
 800ff40:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800ff44:	2378      	movs	r3, #120	; 0x78
 800ff46:	46a3      	mov	fp, r4
 800ff48:	2500      	movs	r5, #0
 800ff4a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800ff4e:	4b04      	ldr	r3, [pc, #16]	; (800ff60 <_vfiprintf_r+0x45c>)
 800ff50:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ff54:	f04a 0a02 	orr.w	sl, sl, #2
 800ff58:	9306      	str	r3, [sp, #24]
 800ff5a:	2302      	movs	r3, #2
 800ff5c:	e7c7      	b.n	800feee <_vfiprintf_r+0x3ea>
 800ff5e:	bf00      	nop
 800ff60:	0805fd10 	.word	0x0805fd10
 800ff64:	46a3      	mov	fp, r4
 800ff66:	2500      	movs	r5, #0
 800ff68:	9b01      	ldr	r3, [sp, #4]
 800ff6a:	f85b 8b04 	ldr.w	r8, [fp], #4
 800ff6e:	1c5c      	adds	r4, r3, #1
 800ff70:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800ff74:	f000 80ce 	beq.w	8010114 <_vfiprintf_r+0x610>
 800ff78:	461a      	mov	r2, r3
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	4640      	mov	r0, r8
 800ff7e:	f7fe ff57 	bl	800ee30 <memchr>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	f000 8173 	beq.w	801026e <_vfiprintf_r+0x76a>
 800ff88:	eba0 0308 	sub.w	r3, r0, r8
 800ff8c:	9301      	str	r3, [sp, #4]
 800ff8e:	9b01      	ldr	r3, [sp, #4]
 800ff90:	42ab      	cmp	r3, r5
 800ff92:	bfb8      	it	lt
 800ff94:	462b      	movlt	r3, r5
 800ff96:	9305      	str	r3, [sp, #20]
 800ff98:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ff9c:	b113      	cbz	r3, 800ffa4 <_vfiprintf_r+0x4a0>
 800ff9e:	9b05      	ldr	r3, [sp, #20]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	9305      	str	r3, [sp, #20]
 800ffa4:	f01a 0302 	ands.w	r3, sl, #2
 800ffa8:	930a      	str	r3, [sp, #40]	; 0x28
 800ffaa:	bf1e      	ittt	ne
 800ffac:	9b05      	ldrne	r3, [sp, #20]
 800ffae:	3302      	addne	r3, #2
 800ffb0:	9305      	strne	r3, [sp, #20]
 800ffb2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800ffb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffb8:	d11f      	bne.n	800fffa <_vfiprintf_r+0x4f6>
 800ffba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ffbe:	1a9c      	subs	r4, r3, r2
 800ffc0:	2c00      	cmp	r4, #0
 800ffc2:	dd1a      	ble.n	800fffa <_vfiprintf_r+0x4f6>
 800ffc4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800ffc8:	48aa      	ldr	r0, [pc, #680]	; (8010274 <_vfiprintf_r+0x770>)
 800ffca:	2c10      	cmp	r4, #16
 800ffcc:	f103 0301 	add.w	r3, r3, #1
 800ffd0:	f106 0108 	add.w	r1, r6, #8
 800ffd4:	6030      	str	r0, [r6, #0]
 800ffd6:	f300 8153 	bgt.w	8010280 <_vfiprintf_r+0x77c>
 800ffda:	6074      	str	r4, [r6, #4]
 800ffdc:	2b07      	cmp	r3, #7
 800ffde:	4414      	add	r4, r2
 800ffe0:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800ffe4:	f340 815e 	ble.w	80102a4 <_vfiprintf_r+0x7a0>
 800ffe8:	4639      	mov	r1, r7
 800ffea:	4648      	mov	r0, r9
 800ffec:	aa0e      	add	r2, sp, #56	; 0x38
 800ffee:	f7ff fd57 	bl	800faa0 <__sprint_r>
 800fff2:	2800      	cmp	r0, #0
 800fff4:	f040 81b7 	bne.w	8010366 <_vfiprintf_r+0x862>
 800fff8:	ae11      	add	r6, sp, #68	; 0x44
 800fffa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800fffe:	b173      	cbz	r3, 801001e <_vfiprintf_r+0x51a>
 8010000:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8010004:	6032      	str	r2, [r6, #0]
 8010006:	2201      	movs	r2, #1
 8010008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801000a:	6072      	str	r2, [r6, #4]
 801000c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801000e:	3301      	adds	r3, #1
 8010010:	3201      	adds	r2, #1
 8010012:	2b07      	cmp	r3, #7
 8010014:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8010018:	f300 8146 	bgt.w	80102a8 <_vfiprintf_r+0x7a4>
 801001c:	3608      	adds	r6, #8
 801001e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010020:	b16b      	cbz	r3, 801003e <_vfiprintf_r+0x53a>
 8010022:	aa0d      	add	r2, sp, #52	; 0x34
 8010024:	6032      	str	r2, [r6, #0]
 8010026:	2202      	movs	r2, #2
 8010028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801002a:	6072      	str	r2, [r6, #4]
 801002c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801002e:	3301      	adds	r3, #1
 8010030:	3202      	adds	r2, #2
 8010032:	2b07      	cmp	r3, #7
 8010034:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8010038:	f300 813f 	bgt.w	80102ba <_vfiprintf_r+0x7b6>
 801003c:	3608      	adds	r6, #8
 801003e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010040:	2b80      	cmp	r3, #128	; 0x80
 8010042:	d11f      	bne.n	8010084 <_vfiprintf_r+0x580>
 8010044:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010048:	1a9c      	subs	r4, r3, r2
 801004a:	2c00      	cmp	r4, #0
 801004c:	dd1a      	ble.n	8010084 <_vfiprintf_r+0x580>
 801004e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8010052:	4889      	ldr	r0, [pc, #548]	; (8010278 <_vfiprintf_r+0x774>)
 8010054:	2c10      	cmp	r4, #16
 8010056:	f103 0301 	add.w	r3, r3, #1
 801005a:	f106 0108 	add.w	r1, r6, #8
 801005e:	6030      	str	r0, [r6, #0]
 8010060:	f300 8134 	bgt.w	80102cc <_vfiprintf_r+0x7c8>
 8010064:	6074      	str	r4, [r6, #4]
 8010066:	2b07      	cmp	r3, #7
 8010068:	4414      	add	r4, r2
 801006a:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 801006e:	f340 813f 	ble.w	80102f0 <_vfiprintf_r+0x7ec>
 8010072:	4639      	mov	r1, r7
 8010074:	4648      	mov	r0, r9
 8010076:	aa0e      	add	r2, sp, #56	; 0x38
 8010078:	f7ff fd12 	bl	800faa0 <__sprint_r>
 801007c:	2800      	cmp	r0, #0
 801007e:	f040 8172 	bne.w	8010366 <_vfiprintf_r+0x862>
 8010082:	ae11      	add	r6, sp, #68	; 0x44
 8010084:	9b01      	ldr	r3, [sp, #4]
 8010086:	1aec      	subs	r4, r5, r3
 8010088:	2c00      	cmp	r4, #0
 801008a:	dd1a      	ble.n	80100c2 <_vfiprintf_r+0x5be>
 801008c:	4d7a      	ldr	r5, [pc, #488]	; (8010278 <_vfiprintf_r+0x774>)
 801008e:	2c10      	cmp	r4, #16
 8010090:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 8010094:	f106 0208 	add.w	r2, r6, #8
 8010098:	f103 0301 	add.w	r3, r3, #1
 801009c:	6035      	str	r5, [r6, #0]
 801009e:	f300 8129 	bgt.w	80102f4 <_vfiprintf_r+0x7f0>
 80100a2:	6074      	str	r4, [r6, #4]
 80100a4:	2b07      	cmp	r3, #7
 80100a6:	440c      	add	r4, r1
 80100a8:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 80100ac:	f340 8133 	ble.w	8010316 <_vfiprintf_r+0x812>
 80100b0:	4639      	mov	r1, r7
 80100b2:	4648      	mov	r0, r9
 80100b4:	aa0e      	add	r2, sp, #56	; 0x38
 80100b6:	f7ff fcf3 	bl	800faa0 <__sprint_r>
 80100ba:	2800      	cmp	r0, #0
 80100bc:	f040 8153 	bne.w	8010366 <_vfiprintf_r+0x862>
 80100c0:	ae11      	add	r6, sp, #68	; 0x44
 80100c2:	9b01      	ldr	r3, [sp, #4]
 80100c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80100c6:	6073      	str	r3, [r6, #4]
 80100c8:	4418      	add	r0, r3
 80100ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100cc:	f8c6 8000 	str.w	r8, [r6]
 80100d0:	3301      	adds	r3, #1
 80100d2:	2b07      	cmp	r3, #7
 80100d4:	9010      	str	r0, [sp, #64]	; 0x40
 80100d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80100d8:	f300 811f 	bgt.w	801031a <_vfiprintf_r+0x816>
 80100dc:	f106 0308 	add.w	r3, r6, #8
 80100e0:	f01a 0f04 	tst.w	sl, #4
 80100e4:	f040 8121 	bne.w	801032a <_vfiprintf_r+0x826>
 80100e8:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80100ec:	9905      	ldr	r1, [sp, #20]
 80100ee:	428a      	cmp	r2, r1
 80100f0:	bfac      	ite	ge
 80100f2:	189b      	addge	r3, r3, r2
 80100f4:	185b      	addlt	r3, r3, r1
 80100f6:	9303      	str	r3, [sp, #12]
 80100f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100fa:	b13b      	cbz	r3, 801010c <_vfiprintf_r+0x608>
 80100fc:	4639      	mov	r1, r7
 80100fe:	4648      	mov	r0, r9
 8010100:	aa0e      	add	r2, sp, #56	; 0x38
 8010102:	f7ff fccd 	bl	800faa0 <__sprint_r>
 8010106:	2800      	cmp	r0, #0
 8010108:	f040 812d 	bne.w	8010366 <_vfiprintf_r+0x862>
 801010c:	2300      	movs	r3, #0
 801010e:	ae11      	add	r6, sp, #68	; 0x44
 8010110:	930f      	str	r3, [sp, #60]	; 0x3c
 8010112:	e6c6      	b.n	800fea2 <_vfiprintf_r+0x39e>
 8010114:	4640      	mov	r0, r8
 8010116:	f7f0 f887 	bl	8000228 <strlen>
 801011a:	9001      	str	r0, [sp, #4]
 801011c:	e737      	b.n	800ff8e <_vfiprintf_r+0x48a>
 801011e:	f04a 0a10 	orr.w	sl, sl, #16
 8010122:	f01a 0320 	ands.w	r3, sl, #32
 8010126:	d008      	beq.n	801013a <_vfiprintf_r+0x636>
 8010128:	3407      	adds	r4, #7
 801012a:	f024 0307 	bic.w	r3, r4, #7
 801012e:	469b      	mov	fp, r3
 8010130:	685d      	ldr	r5, [r3, #4]
 8010132:	f85b 4b08 	ldr.w	r4, [fp], #8
 8010136:	2301      	movs	r3, #1
 8010138:	e6d9      	b.n	800feee <_vfiprintf_r+0x3ea>
 801013a:	46a3      	mov	fp, r4
 801013c:	f01a 0510 	ands.w	r5, sl, #16
 8010140:	f85b 4b04 	ldr.w	r4, [fp], #4
 8010144:	d001      	beq.n	801014a <_vfiprintf_r+0x646>
 8010146:	461d      	mov	r5, r3
 8010148:	e7f5      	b.n	8010136 <_vfiprintf_r+0x632>
 801014a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801014e:	d001      	beq.n	8010154 <_vfiprintf_r+0x650>
 8010150:	b2a4      	uxth	r4, r4
 8010152:	e7f0      	b.n	8010136 <_vfiprintf_r+0x632>
 8010154:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8010158:	d0ed      	beq.n	8010136 <_vfiprintf_r+0x632>
 801015a:	b2e4      	uxtb	r4, r4
 801015c:	e7f3      	b.n	8010146 <_vfiprintf_r+0x642>
 801015e:	4a47      	ldr	r2, [pc, #284]	; (801027c <_vfiprintf_r+0x778>)
 8010160:	e5c6      	b.n	800fcf0 <_vfiprintf_r+0x1ec>
 8010162:	46a3      	mov	fp, r4
 8010164:	f01a 0510 	ands.w	r5, sl, #16
 8010168:	f85b 4b04 	ldr.w	r4, [fp], #4
 801016c:	d001      	beq.n	8010172 <_vfiprintf_r+0x66e>
 801016e:	4615      	mov	r5, r2
 8010170:	e5ca      	b.n	800fd08 <_vfiprintf_r+0x204>
 8010172:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8010176:	d001      	beq.n	801017c <_vfiprintf_r+0x678>
 8010178:	b2a4      	uxth	r4, r4
 801017a:	e5c5      	b.n	800fd08 <_vfiprintf_r+0x204>
 801017c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8010180:	f43f adc2 	beq.w	800fd08 <_vfiprintf_r+0x204>
 8010184:	b2e4      	uxtb	r4, r4
 8010186:	e7f2      	b.n	801016e <_vfiprintf_r+0x66a>
 8010188:	2c0a      	cmp	r4, #10
 801018a:	f175 0300 	sbcs.w	r3, r5, #0
 801018e:	d205      	bcs.n	801019c <_vfiprintf_r+0x698>
 8010190:	3430      	adds	r4, #48	; 0x30
 8010192:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 8010196:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 801019a:	e137      	b.n	801040c <_vfiprintf_r+0x908>
 801019c:	f04f 0a00 	mov.w	sl, #0
 80101a0:	ab3a      	add	r3, sp, #232	; 0xe8
 80101a2:	930a      	str	r3, [sp, #40]	; 0x28
 80101a4:	9b05      	ldr	r3, [sp, #20]
 80101a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80101ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101ae:	220a      	movs	r2, #10
 80101b0:	4620      	mov	r0, r4
 80101b2:	4629      	mov	r1, r5
 80101b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80101b8:	2300      	movs	r3, #0
 80101ba:	f7f0 fd41 	bl	8000c40 <__aeabi_uldivmod>
 80101be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101c0:	3230      	adds	r2, #48	; 0x30
 80101c2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80101c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101c8:	f10a 0a01 	add.w	sl, sl, #1
 80101cc:	b1d3      	cbz	r3, 8010204 <_vfiprintf_r+0x700>
 80101ce:	9b07      	ldr	r3, [sp, #28]
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	4553      	cmp	r3, sl
 80101d4:	d116      	bne.n	8010204 <_vfiprintf_r+0x700>
 80101d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80101da:	d013      	beq.n	8010204 <_vfiprintf_r+0x700>
 80101dc:	2c0a      	cmp	r4, #10
 80101de:	f175 0300 	sbcs.w	r3, r5, #0
 80101e2:	d30f      	bcc.n	8010204 <_vfiprintf_r+0x700>
 80101e4:	9b08      	ldr	r3, [sp, #32]
 80101e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101e8:	eba8 0803 	sub.w	r8, r8, r3
 80101ec:	461a      	mov	r2, r3
 80101ee:	4640      	mov	r0, r8
 80101f0:	f7ff fb0c 	bl	800f80c <strncpy>
 80101f4:	9b07      	ldr	r3, [sp, #28]
 80101f6:	785b      	ldrb	r3, [r3, #1]
 80101f8:	b1a3      	cbz	r3, 8010224 <_vfiprintf_r+0x720>
 80101fa:	f04f 0a00 	mov.w	sl, #0
 80101fe:	9b07      	ldr	r3, [sp, #28]
 8010200:	3301      	adds	r3, #1
 8010202:	9307      	str	r3, [sp, #28]
 8010204:	2300      	movs	r3, #0
 8010206:	220a      	movs	r2, #10
 8010208:	4620      	mov	r0, r4
 801020a:	4629      	mov	r1, r5
 801020c:	f7f0 fd18 	bl	8000c40 <__aeabi_uldivmod>
 8010210:	2c0a      	cmp	r4, #10
 8010212:	f175 0300 	sbcs.w	r3, r5, #0
 8010216:	f0c0 80f9 	bcc.w	801040c <_vfiprintf_r+0x908>
 801021a:	4604      	mov	r4, r0
 801021c:	460d      	mov	r5, r1
 801021e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010222:	e7c3      	b.n	80101ac <_vfiprintf_r+0x6a8>
 8010224:	469a      	mov	sl, r3
 8010226:	e7ed      	b.n	8010204 <_vfiprintf_r+0x700>
 8010228:	9a06      	ldr	r2, [sp, #24]
 801022a:	f004 030f 	and.w	r3, r4, #15
 801022e:	5cd3      	ldrb	r3, [r2, r3]
 8010230:	0924      	lsrs	r4, r4, #4
 8010232:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8010236:	092d      	lsrs	r5, r5, #4
 8010238:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801023c:	ea54 0305 	orrs.w	r3, r4, r5
 8010240:	d1f2      	bne.n	8010228 <_vfiprintf_r+0x724>
 8010242:	e0e3      	b.n	801040c <_vfiprintf_r+0x908>
 8010244:	b933      	cbnz	r3, 8010254 <_vfiprintf_r+0x750>
 8010246:	f01a 0f01 	tst.w	sl, #1
 801024a:	d003      	beq.n	8010254 <_vfiprintf_r+0x750>
 801024c:	2330      	movs	r3, #48	; 0x30
 801024e:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8010252:	e7a0      	b.n	8010196 <_vfiprintf_r+0x692>
 8010254:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 8010258:	e0d8      	b.n	801040c <_vfiprintf_r+0x908>
 801025a:	2b00      	cmp	r3, #0
 801025c:	f000 80a4 	beq.w	80103a8 <_vfiprintf_r+0x8a4>
 8010260:	2100      	movs	r1, #0
 8010262:	46a3      	mov	fp, r4
 8010264:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8010268:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 801026c:	e5db      	b.n	800fe26 <_vfiprintf_r+0x322>
 801026e:	4605      	mov	r5, r0
 8010270:	e68d      	b.n	800ff8e <_vfiprintf_r+0x48a>
 8010272:	bf00      	nop
 8010274:	0805ffd0 	.word	0x0805ffd0
 8010278:	0805ffe0 	.word	0x0805ffe0
 801027c:	0805fd21 	.word	0x0805fd21
 8010280:	2010      	movs	r0, #16
 8010282:	2b07      	cmp	r3, #7
 8010284:	4402      	add	r2, r0
 8010286:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801028a:	6070      	str	r0, [r6, #4]
 801028c:	dd07      	ble.n	801029e <_vfiprintf_r+0x79a>
 801028e:	4639      	mov	r1, r7
 8010290:	4648      	mov	r0, r9
 8010292:	aa0e      	add	r2, sp, #56	; 0x38
 8010294:	f7ff fc04 	bl	800faa0 <__sprint_r>
 8010298:	2800      	cmp	r0, #0
 801029a:	d164      	bne.n	8010366 <_vfiprintf_r+0x862>
 801029c:	a911      	add	r1, sp, #68	; 0x44
 801029e:	460e      	mov	r6, r1
 80102a0:	3c10      	subs	r4, #16
 80102a2:	e68f      	b.n	800ffc4 <_vfiprintf_r+0x4c0>
 80102a4:	460e      	mov	r6, r1
 80102a6:	e6a8      	b.n	800fffa <_vfiprintf_r+0x4f6>
 80102a8:	4639      	mov	r1, r7
 80102aa:	4648      	mov	r0, r9
 80102ac:	aa0e      	add	r2, sp, #56	; 0x38
 80102ae:	f7ff fbf7 	bl	800faa0 <__sprint_r>
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d157      	bne.n	8010366 <_vfiprintf_r+0x862>
 80102b6:	ae11      	add	r6, sp, #68	; 0x44
 80102b8:	e6b1      	b.n	801001e <_vfiprintf_r+0x51a>
 80102ba:	4639      	mov	r1, r7
 80102bc:	4648      	mov	r0, r9
 80102be:	aa0e      	add	r2, sp, #56	; 0x38
 80102c0:	f7ff fbee 	bl	800faa0 <__sprint_r>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d14e      	bne.n	8010366 <_vfiprintf_r+0x862>
 80102c8:	ae11      	add	r6, sp, #68	; 0x44
 80102ca:	e6b8      	b.n	801003e <_vfiprintf_r+0x53a>
 80102cc:	2010      	movs	r0, #16
 80102ce:	2b07      	cmp	r3, #7
 80102d0:	4402      	add	r2, r0
 80102d2:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 80102d6:	6070      	str	r0, [r6, #4]
 80102d8:	dd07      	ble.n	80102ea <_vfiprintf_r+0x7e6>
 80102da:	4639      	mov	r1, r7
 80102dc:	4648      	mov	r0, r9
 80102de:	aa0e      	add	r2, sp, #56	; 0x38
 80102e0:	f7ff fbde 	bl	800faa0 <__sprint_r>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d13e      	bne.n	8010366 <_vfiprintf_r+0x862>
 80102e8:	a911      	add	r1, sp, #68	; 0x44
 80102ea:	460e      	mov	r6, r1
 80102ec:	3c10      	subs	r4, #16
 80102ee:	e6ae      	b.n	801004e <_vfiprintf_r+0x54a>
 80102f0:	460e      	mov	r6, r1
 80102f2:	e6c7      	b.n	8010084 <_vfiprintf_r+0x580>
 80102f4:	2010      	movs	r0, #16
 80102f6:	2b07      	cmp	r3, #7
 80102f8:	4401      	add	r1, r0
 80102fa:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 80102fe:	6070      	str	r0, [r6, #4]
 8010300:	dd06      	ble.n	8010310 <_vfiprintf_r+0x80c>
 8010302:	4639      	mov	r1, r7
 8010304:	4648      	mov	r0, r9
 8010306:	aa0e      	add	r2, sp, #56	; 0x38
 8010308:	f7ff fbca 	bl	800faa0 <__sprint_r>
 801030c:	bb58      	cbnz	r0, 8010366 <_vfiprintf_r+0x862>
 801030e:	aa11      	add	r2, sp, #68	; 0x44
 8010310:	4616      	mov	r6, r2
 8010312:	3c10      	subs	r4, #16
 8010314:	e6bb      	b.n	801008e <_vfiprintf_r+0x58a>
 8010316:	4616      	mov	r6, r2
 8010318:	e6d3      	b.n	80100c2 <_vfiprintf_r+0x5be>
 801031a:	4639      	mov	r1, r7
 801031c:	4648      	mov	r0, r9
 801031e:	aa0e      	add	r2, sp, #56	; 0x38
 8010320:	f7ff fbbe 	bl	800faa0 <__sprint_r>
 8010324:	b9f8      	cbnz	r0, 8010366 <_vfiprintf_r+0x862>
 8010326:	ab11      	add	r3, sp, #68	; 0x44
 8010328:	e6da      	b.n	80100e0 <_vfiprintf_r+0x5dc>
 801032a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801032e:	1a54      	subs	r4, r2, r1
 8010330:	2c00      	cmp	r4, #0
 8010332:	f77f aed9 	ble.w	80100e8 <_vfiprintf_r+0x5e4>
 8010336:	2610      	movs	r6, #16
 8010338:	4d38      	ldr	r5, [pc, #224]	; (801041c <_vfiprintf_r+0x918>)
 801033a:	2c10      	cmp	r4, #16
 801033c:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8010340:	601d      	str	r5, [r3, #0]
 8010342:	f102 0201 	add.w	r2, r2, #1
 8010346:	dc1d      	bgt.n	8010384 <_vfiprintf_r+0x880>
 8010348:	605c      	str	r4, [r3, #4]
 801034a:	2a07      	cmp	r2, #7
 801034c:	440c      	add	r4, r1
 801034e:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8010352:	f77f aec9 	ble.w	80100e8 <_vfiprintf_r+0x5e4>
 8010356:	4639      	mov	r1, r7
 8010358:	4648      	mov	r0, r9
 801035a:	aa0e      	add	r2, sp, #56	; 0x38
 801035c:	f7ff fba0 	bl	800faa0 <__sprint_r>
 8010360:	2800      	cmp	r0, #0
 8010362:	f43f aec1 	beq.w	80100e8 <_vfiprintf_r+0x5e4>
 8010366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010368:	07d9      	lsls	r1, r3, #31
 801036a:	d405      	bmi.n	8010378 <_vfiprintf_r+0x874>
 801036c:	89bb      	ldrh	r3, [r7, #12]
 801036e:	059a      	lsls	r2, r3, #22
 8010370:	d402      	bmi.n	8010378 <_vfiprintf_r+0x874>
 8010372:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010374:	f7fa f971 	bl	800a65a <__retarget_lock_release_recursive>
 8010378:	89bb      	ldrh	r3, [r7, #12]
 801037a:	065b      	lsls	r3, r3, #25
 801037c:	f57f abf3 	bpl.w	800fb66 <_vfiprintf_r+0x62>
 8010380:	f7ff bbee 	b.w	800fb60 <_vfiprintf_r+0x5c>
 8010384:	3110      	adds	r1, #16
 8010386:	2a07      	cmp	r2, #7
 8010388:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 801038c:	605e      	str	r6, [r3, #4]
 801038e:	dc02      	bgt.n	8010396 <_vfiprintf_r+0x892>
 8010390:	3308      	adds	r3, #8
 8010392:	3c10      	subs	r4, #16
 8010394:	e7d1      	b.n	801033a <_vfiprintf_r+0x836>
 8010396:	4639      	mov	r1, r7
 8010398:	4648      	mov	r0, r9
 801039a:	aa0e      	add	r2, sp, #56	; 0x38
 801039c:	f7ff fb80 	bl	800faa0 <__sprint_r>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	d1e0      	bne.n	8010366 <_vfiprintf_r+0x862>
 80103a4:	ab11      	add	r3, sp, #68	; 0x44
 80103a6:	e7f4      	b.n	8010392 <_vfiprintf_r+0x88e>
 80103a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103aa:	b913      	cbnz	r3, 80103b2 <_vfiprintf_r+0x8ae>
 80103ac:	2300      	movs	r3, #0
 80103ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80103b0:	e7d9      	b.n	8010366 <_vfiprintf_r+0x862>
 80103b2:	4639      	mov	r1, r7
 80103b4:	4648      	mov	r0, r9
 80103b6:	aa0e      	add	r2, sp, #56	; 0x38
 80103b8:	f7ff fb72 	bl	800faa0 <__sprint_r>
 80103bc:	2800      	cmp	r0, #0
 80103be:	d0f5      	beq.n	80103ac <_vfiprintf_r+0x8a8>
 80103c0:	e7d1      	b.n	8010366 <_vfiprintf_r+0x862>
 80103c2:	ea54 0205 	orrs.w	r2, r4, r5
 80103c6:	f8cd a014 	str.w	sl, [sp, #20]
 80103ca:	f43f ada2 	beq.w	800ff12 <_vfiprintf_r+0x40e>
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	f43f aeda 	beq.w	8010188 <_vfiprintf_r+0x684>
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 80103da:	f43f af25 	beq.w	8010228 <_vfiprintf_r+0x724>
 80103de:	f004 0307 	and.w	r3, r4, #7
 80103e2:	08e4      	lsrs	r4, r4, #3
 80103e4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80103e8:	08ed      	lsrs	r5, r5, #3
 80103ea:	3330      	adds	r3, #48	; 0x30
 80103ec:	ea54 0105 	orrs.w	r1, r4, r5
 80103f0:	4642      	mov	r2, r8
 80103f2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80103f6:	d1f2      	bne.n	80103de <_vfiprintf_r+0x8da>
 80103f8:	9905      	ldr	r1, [sp, #20]
 80103fa:	07c8      	lsls	r0, r1, #31
 80103fc:	d506      	bpl.n	801040c <_vfiprintf_r+0x908>
 80103fe:	2b30      	cmp	r3, #48	; 0x30
 8010400:	d004      	beq.n	801040c <_vfiprintf_r+0x908>
 8010402:	2330      	movs	r3, #48	; 0x30
 8010404:	f808 3c01 	strb.w	r3, [r8, #-1]
 8010408:	f1a2 0802 	sub.w	r8, r2, #2
 801040c:	ab3a      	add	r3, sp, #232	; 0xe8
 801040e:	eba3 0308 	sub.w	r3, r3, r8
 8010412:	9d01      	ldr	r5, [sp, #4]
 8010414:	f8dd a014 	ldr.w	sl, [sp, #20]
 8010418:	9301      	str	r3, [sp, #4]
 801041a:	e5b8      	b.n	800ff8e <_vfiprintf_r+0x48a>
 801041c:	0805ffd0 	.word	0x0805ffd0

08010420 <__sbprintf>:
 8010420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010422:	461f      	mov	r7, r3
 8010424:	898b      	ldrh	r3, [r1, #12]
 8010426:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 801042a:	f023 0302 	bic.w	r3, r3, #2
 801042e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010432:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010434:	4615      	mov	r5, r2
 8010436:	9319      	str	r3, [sp, #100]	; 0x64
 8010438:	89cb      	ldrh	r3, [r1, #14]
 801043a:	4606      	mov	r6, r0
 801043c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010440:	69cb      	ldr	r3, [r1, #28]
 8010442:	a816      	add	r0, sp, #88	; 0x58
 8010444:	9307      	str	r3, [sp, #28]
 8010446:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8010448:	460c      	mov	r4, r1
 801044a:	9309      	str	r3, [sp, #36]	; 0x24
 801044c:	ab1a      	add	r3, sp, #104	; 0x68
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	9304      	str	r3, [sp, #16]
 8010452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010456:	9302      	str	r3, [sp, #8]
 8010458:	9305      	str	r3, [sp, #20]
 801045a:	2300      	movs	r3, #0
 801045c:	9306      	str	r3, [sp, #24]
 801045e:	f7fa f8f9 	bl	800a654 <__retarget_lock_init_recursive>
 8010462:	462a      	mov	r2, r5
 8010464:	463b      	mov	r3, r7
 8010466:	4669      	mov	r1, sp
 8010468:	4630      	mov	r0, r6
 801046a:	f7ff fb4b 	bl	800fb04 <_vfiprintf_r>
 801046e:	1e05      	subs	r5, r0, #0
 8010470:	db07      	blt.n	8010482 <__sbprintf+0x62>
 8010472:	4669      	mov	r1, sp
 8010474:	4630      	mov	r0, r6
 8010476:	f7fd ffad 	bl	800e3d4 <_fflush_r>
 801047a:	2800      	cmp	r0, #0
 801047c:	bf18      	it	ne
 801047e:	f04f 35ff 	movne.w	r5, #4294967295
 8010482:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010486:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010488:	065b      	lsls	r3, r3, #25
 801048a:	bf42      	ittt	mi
 801048c:	89a3      	ldrhmi	r3, [r4, #12]
 801048e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8010492:	81a3      	strhmi	r3, [r4, #12]
 8010494:	f7fa f8df 	bl	800a656 <__retarget_lock_close_recursive>
 8010498:	4628      	mov	r0, r5
 801049a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801049e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080104a0 <__swsetup_r>:
 80104a0:	b538      	push	{r3, r4, r5, lr}
 80104a2:	4b2a      	ldr	r3, [pc, #168]	; (801054c <__swsetup_r+0xac>)
 80104a4:	4605      	mov	r5, r0
 80104a6:	6818      	ldr	r0, [r3, #0]
 80104a8:	460c      	mov	r4, r1
 80104aa:	b118      	cbz	r0, 80104b4 <__swsetup_r+0x14>
 80104ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80104ae:	b90b      	cbnz	r3, 80104b4 <__swsetup_r+0x14>
 80104b0:	f7fd fffc 	bl	800e4ac <__sinit>
 80104b4:	89a3      	ldrh	r3, [r4, #12]
 80104b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104ba:	0718      	lsls	r0, r3, #28
 80104bc:	d422      	bmi.n	8010504 <__swsetup_r+0x64>
 80104be:	06d9      	lsls	r1, r3, #27
 80104c0:	d407      	bmi.n	80104d2 <__swsetup_r+0x32>
 80104c2:	2309      	movs	r3, #9
 80104c4:	602b      	str	r3, [r5, #0]
 80104c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80104ca:	f04f 30ff 	mov.w	r0, #4294967295
 80104ce:	81a3      	strh	r3, [r4, #12]
 80104d0:	e034      	b.n	801053c <__swsetup_r+0x9c>
 80104d2:	0758      	lsls	r0, r3, #29
 80104d4:	d512      	bpl.n	80104fc <__swsetup_r+0x5c>
 80104d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80104d8:	b141      	cbz	r1, 80104ec <__swsetup_r+0x4c>
 80104da:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80104de:	4299      	cmp	r1, r3
 80104e0:	d002      	beq.n	80104e8 <__swsetup_r+0x48>
 80104e2:	4628      	mov	r0, r5
 80104e4:	f7fe f85e 	bl	800e5a4 <_free_r>
 80104e8:	2300      	movs	r3, #0
 80104ea:	6323      	str	r3, [r4, #48]	; 0x30
 80104ec:	89a3      	ldrh	r3, [r4, #12]
 80104ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80104f2:	81a3      	strh	r3, [r4, #12]
 80104f4:	2300      	movs	r3, #0
 80104f6:	6063      	str	r3, [r4, #4]
 80104f8:	6923      	ldr	r3, [r4, #16]
 80104fa:	6023      	str	r3, [r4, #0]
 80104fc:	89a3      	ldrh	r3, [r4, #12]
 80104fe:	f043 0308 	orr.w	r3, r3, #8
 8010502:	81a3      	strh	r3, [r4, #12]
 8010504:	6923      	ldr	r3, [r4, #16]
 8010506:	b94b      	cbnz	r3, 801051c <__swsetup_r+0x7c>
 8010508:	89a3      	ldrh	r3, [r4, #12]
 801050a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801050e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010512:	d003      	beq.n	801051c <__swsetup_r+0x7c>
 8010514:	4621      	mov	r1, r4
 8010516:	4628      	mov	r0, r5
 8010518:	f000 fa00 	bl	801091c <__smakebuf_r>
 801051c:	89a0      	ldrh	r0, [r4, #12]
 801051e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010522:	f010 0301 	ands.w	r3, r0, #1
 8010526:	d00a      	beq.n	801053e <__swsetup_r+0x9e>
 8010528:	2300      	movs	r3, #0
 801052a:	60a3      	str	r3, [r4, #8]
 801052c:	6963      	ldr	r3, [r4, #20]
 801052e:	425b      	negs	r3, r3
 8010530:	61a3      	str	r3, [r4, #24]
 8010532:	6923      	ldr	r3, [r4, #16]
 8010534:	b943      	cbnz	r3, 8010548 <__swsetup_r+0xa8>
 8010536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801053a:	d1c4      	bne.n	80104c6 <__swsetup_r+0x26>
 801053c:	bd38      	pop	{r3, r4, r5, pc}
 801053e:	0781      	lsls	r1, r0, #30
 8010540:	bf58      	it	pl
 8010542:	6963      	ldrpl	r3, [r4, #20]
 8010544:	60a3      	str	r3, [r4, #8]
 8010546:	e7f4      	b.n	8010532 <__swsetup_r+0x92>
 8010548:	2000      	movs	r0, #0
 801054a:	e7f7      	b.n	801053c <__swsetup_r+0x9c>
 801054c:	20000048 	.word	0x20000048

08010550 <abort>:
 8010550:	2006      	movs	r0, #6
 8010552:	b508      	push	{r3, lr}
 8010554:	f000 fa4c 	bl	80109f0 <raise>
 8010558:	2001      	movs	r0, #1
 801055a:	f7f5 f81c 	bl	8005596 <_exit>

0801055e <__fputwc>:
 801055e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010562:	4680      	mov	r8, r0
 8010564:	460e      	mov	r6, r1
 8010566:	4615      	mov	r5, r2
 8010568:	f7fa f86a 	bl	800a640 <__locale_mb_cur_max>
 801056c:	2801      	cmp	r0, #1
 801056e:	4604      	mov	r4, r0
 8010570:	d11b      	bne.n	80105aa <__fputwc+0x4c>
 8010572:	1e73      	subs	r3, r6, #1
 8010574:	2bfe      	cmp	r3, #254	; 0xfe
 8010576:	d818      	bhi.n	80105aa <__fputwc+0x4c>
 8010578:	f88d 6004 	strb.w	r6, [sp, #4]
 801057c:	2700      	movs	r7, #0
 801057e:	f10d 0904 	add.w	r9, sp, #4
 8010582:	42a7      	cmp	r7, r4
 8010584:	d020      	beq.n	80105c8 <__fputwc+0x6a>
 8010586:	68ab      	ldr	r3, [r5, #8]
 8010588:	f817 1009 	ldrb.w	r1, [r7, r9]
 801058c:	3b01      	subs	r3, #1
 801058e:	2b00      	cmp	r3, #0
 8010590:	60ab      	str	r3, [r5, #8]
 8010592:	da04      	bge.n	801059e <__fputwc+0x40>
 8010594:	69aa      	ldr	r2, [r5, #24]
 8010596:	4293      	cmp	r3, r2
 8010598:	db1a      	blt.n	80105d0 <__fputwc+0x72>
 801059a:	290a      	cmp	r1, #10
 801059c:	d018      	beq.n	80105d0 <__fputwc+0x72>
 801059e:	682b      	ldr	r3, [r5, #0]
 80105a0:	1c5a      	adds	r2, r3, #1
 80105a2:	602a      	str	r2, [r5, #0]
 80105a4:	7019      	strb	r1, [r3, #0]
 80105a6:	3701      	adds	r7, #1
 80105a8:	e7eb      	b.n	8010582 <__fputwc+0x24>
 80105aa:	4632      	mov	r2, r6
 80105ac:	4640      	mov	r0, r8
 80105ae:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80105b2:	a901      	add	r1, sp, #4
 80105b4:	f000 fa82 	bl	8010abc <_wcrtomb_r>
 80105b8:	1c42      	adds	r2, r0, #1
 80105ba:	4604      	mov	r4, r0
 80105bc:	d1de      	bne.n	801057c <__fputwc+0x1e>
 80105be:	4606      	mov	r6, r0
 80105c0:	89ab      	ldrh	r3, [r5, #12]
 80105c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105c6:	81ab      	strh	r3, [r5, #12]
 80105c8:	4630      	mov	r0, r6
 80105ca:	b003      	add	sp, #12
 80105cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105d0:	462a      	mov	r2, r5
 80105d2:	4640      	mov	r0, r8
 80105d4:	f000 fa28 	bl	8010a28 <__swbuf_r>
 80105d8:	1c43      	adds	r3, r0, #1
 80105da:	d1e4      	bne.n	80105a6 <__fputwc+0x48>
 80105dc:	4606      	mov	r6, r0
 80105de:	e7f3      	b.n	80105c8 <__fputwc+0x6a>

080105e0 <_fputwc_r>:
 80105e0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80105e2:	b570      	push	{r4, r5, r6, lr}
 80105e4:	07db      	lsls	r3, r3, #31
 80105e6:	4605      	mov	r5, r0
 80105e8:	460e      	mov	r6, r1
 80105ea:	4614      	mov	r4, r2
 80105ec:	d405      	bmi.n	80105fa <_fputwc_r+0x1a>
 80105ee:	8993      	ldrh	r3, [r2, #12]
 80105f0:	0598      	lsls	r0, r3, #22
 80105f2:	d402      	bmi.n	80105fa <_fputwc_r+0x1a>
 80105f4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80105f6:	f7fa f82f 	bl	800a658 <__retarget_lock_acquire_recursive>
 80105fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105fe:	0499      	lsls	r1, r3, #18
 8010600:	d406      	bmi.n	8010610 <_fputwc_r+0x30>
 8010602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010606:	81a3      	strh	r3, [r4, #12]
 8010608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801060a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801060e:	6663      	str	r3, [r4, #100]	; 0x64
 8010610:	4622      	mov	r2, r4
 8010612:	4628      	mov	r0, r5
 8010614:	4631      	mov	r1, r6
 8010616:	f7ff ffa2 	bl	801055e <__fputwc>
 801061a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801061c:	4605      	mov	r5, r0
 801061e:	07da      	lsls	r2, r3, #31
 8010620:	d405      	bmi.n	801062e <_fputwc_r+0x4e>
 8010622:	89a3      	ldrh	r3, [r4, #12]
 8010624:	059b      	lsls	r3, r3, #22
 8010626:	d402      	bmi.n	801062e <_fputwc_r+0x4e>
 8010628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801062a:	f7fa f816 	bl	800a65a <__retarget_lock_release_recursive>
 801062e:	4628      	mov	r0, r5
 8010630:	bd70      	pop	{r4, r5, r6, pc}
	...

08010634 <__sfvwrite_r>:
 8010634:	6893      	ldr	r3, [r2, #8]
 8010636:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801063a:	4606      	mov	r6, r0
 801063c:	460c      	mov	r4, r1
 801063e:	4690      	mov	r8, r2
 8010640:	b91b      	cbnz	r3, 801064a <__sfvwrite_r+0x16>
 8010642:	2000      	movs	r0, #0
 8010644:	b003      	add	sp, #12
 8010646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801064a:	898b      	ldrh	r3, [r1, #12]
 801064c:	0718      	lsls	r0, r3, #28
 801064e:	d550      	bpl.n	80106f2 <__sfvwrite_r+0xbe>
 8010650:	690b      	ldr	r3, [r1, #16]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d04d      	beq.n	80106f2 <__sfvwrite_r+0xbe>
 8010656:	89a3      	ldrh	r3, [r4, #12]
 8010658:	f8d8 7000 	ldr.w	r7, [r8]
 801065c:	f013 0902 	ands.w	r9, r3, #2
 8010660:	d16b      	bne.n	801073a <__sfvwrite_r+0x106>
 8010662:	f013 0301 	ands.w	r3, r3, #1
 8010666:	f000 809b 	beq.w	80107a0 <__sfvwrite_r+0x16c>
 801066a:	4648      	mov	r0, r9
 801066c:	46ca      	mov	sl, r9
 801066e:	46cb      	mov	fp, r9
 8010670:	f1bb 0f00 	cmp.w	fp, #0
 8010674:	f000 8102 	beq.w	801087c <__sfvwrite_r+0x248>
 8010678:	b950      	cbnz	r0, 8010690 <__sfvwrite_r+0x5c>
 801067a:	465a      	mov	r2, fp
 801067c:	210a      	movs	r1, #10
 801067e:	4650      	mov	r0, sl
 8010680:	f7fe fbd6 	bl	800ee30 <memchr>
 8010684:	2800      	cmp	r0, #0
 8010686:	f000 80fe 	beq.w	8010886 <__sfvwrite_r+0x252>
 801068a:	3001      	adds	r0, #1
 801068c:	eba0 090a 	sub.w	r9, r0, sl
 8010690:	6820      	ldr	r0, [r4, #0]
 8010692:	6921      	ldr	r1, [r4, #16]
 8010694:	45d9      	cmp	r9, fp
 8010696:	464a      	mov	r2, r9
 8010698:	bf28      	it	cs
 801069a:	465a      	movcs	r2, fp
 801069c:	4288      	cmp	r0, r1
 801069e:	6963      	ldr	r3, [r4, #20]
 80106a0:	f240 80f4 	bls.w	801088c <__sfvwrite_r+0x258>
 80106a4:	68a5      	ldr	r5, [r4, #8]
 80106a6:	441d      	add	r5, r3
 80106a8:	42aa      	cmp	r2, r5
 80106aa:	f340 80ef 	ble.w	801088c <__sfvwrite_r+0x258>
 80106ae:	4651      	mov	r1, sl
 80106b0:	462a      	mov	r2, r5
 80106b2:	f7fe fbd9 	bl	800ee68 <memmove>
 80106b6:	6823      	ldr	r3, [r4, #0]
 80106b8:	4621      	mov	r1, r4
 80106ba:	442b      	add	r3, r5
 80106bc:	4630      	mov	r0, r6
 80106be:	6023      	str	r3, [r4, #0]
 80106c0:	f7fd fe88 	bl	800e3d4 <_fflush_r>
 80106c4:	2800      	cmp	r0, #0
 80106c6:	d166      	bne.n	8010796 <__sfvwrite_r+0x162>
 80106c8:	ebb9 0905 	subs.w	r9, r9, r5
 80106cc:	f040 80f6 	bne.w	80108bc <__sfvwrite_r+0x288>
 80106d0:	4621      	mov	r1, r4
 80106d2:	4630      	mov	r0, r6
 80106d4:	f7fd fe7e 	bl	800e3d4 <_fflush_r>
 80106d8:	2800      	cmp	r0, #0
 80106da:	d15c      	bne.n	8010796 <__sfvwrite_r+0x162>
 80106dc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80106e0:	44aa      	add	sl, r5
 80106e2:	ebab 0b05 	sub.w	fp, fp, r5
 80106e6:	1b55      	subs	r5, r2, r5
 80106e8:	f8c8 5008 	str.w	r5, [r8, #8]
 80106ec:	2d00      	cmp	r5, #0
 80106ee:	d1bf      	bne.n	8010670 <__sfvwrite_r+0x3c>
 80106f0:	e7a7      	b.n	8010642 <__sfvwrite_r+0xe>
 80106f2:	4621      	mov	r1, r4
 80106f4:	4630      	mov	r0, r6
 80106f6:	f7ff fed3 	bl	80104a0 <__swsetup_r>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d0ab      	beq.n	8010656 <__sfvwrite_r+0x22>
 80106fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010702:	e79f      	b.n	8010644 <__sfvwrite_r+0x10>
 8010704:	e9d7 b500 	ldrd	fp, r5, [r7]
 8010708:	3708      	adds	r7, #8
 801070a:	2d00      	cmp	r5, #0
 801070c:	d0fa      	beq.n	8010704 <__sfvwrite_r+0xd0>
 801070e:	4555      	cmp	r5, sl
 8010710:	462b      	mov	r3, r5
 8010712:	465a      	mov	r2, fp
 8010714:	bf28      	it	cs
 8010716:	4653      	movcs	r3, sl
 8010718:	4630      	mov	r0, r6
 801071a:	69e1      	ldr	r1, [r4, #28]
 801071c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8010720:	47e0      	blx	ip
 8010722:	2800      	cmp	r0, #0
 8010724:	dd37      	ble.n	8010796 <__sfvwrite_r+0x162>
 8010726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801072a:	4483      	add	fp, r0
 801072c:	1a2d      	subs	r5, r5, r0
 801072e:	1a18      	subs	r0, r3, r0
 8010730:	f8c8 0008 	str.w	r0, [r8, #8]
 8010734:	2800      	cmp	r0, #0
 8010736:	d1e8      	bne.n	801070a <__sfvwrite_r+0xd6>
 8010738:	e783      	b.n	8010642 <__sfvwrite_r+0xe>
 801073a:	f04f 0b00 	mov.w	fp, #0
 801073e:	f8df a180 	ldr.w	sl, [pc, #384]	; 80108c0 <__sfvwrite_r+0x28c>
 8010742:	465d      	mov	r5, fp
 8010744:	e7e1      	b.n	801070a <__sfvwrite_r+0xd6>
 8010746:	e9d7 9a00 	ldrd	r9, sl, [r7]
 801074a:	3708      	adds	r7, #8
 801074c:	f1ba 0f00 	cmp.w	sl, #0
 8010750:	d0f9      	beq.n	8010746 <__sfvwrite_r+0x112>
 8010752:	89a3      	ldrh	r3, [r4, #12]
 8010754:	6820      	ldr	r0, [r4, #0]
 8010756:	0599      	lsls	r1, r3, #22
 8010758:	68a2      	ldr	r2, [r4, #8]
 801075a:	d563      	bpl.n	8010824 <__sfvwrite_r+0x1f0>
 801075c:	4552      	cmp	r2, sl
 801075e:	d836      	bhi.n	80107ce <__sfvwrite_r+0x19a>
 8010760:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8010764:	d033      	beq.n	80107ce <__sfvwrite_r+0x19a>
 8010766:	6921      	ldr	r1, [r4, #16]
 8010768:	6965      	ldr	r5, [r4, #20]
 801076a:	eba0 0b01 	sub.w	fp, r0, r1
 801076e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010772:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010776:	f10b 0201 	add.w	r2, fp, #1
 801077a:	106d      	asrs	r5, r5, #1
 801077c:	4452      	add	r2, sl
 801077e:	4295      	cmp	r5, r2
 8010780:	bf38      	it	cc
 8010782:	4615      	movcc	r5, r2
 8010784:	055b      	lsls	r3, r3, #21
 8010786:	d53d      	bpl.n	8010804 <__sfvwrite_r+0x1d0>
 8010788:	4629      	mov	r1, r5
 801078a:	4630      	mov	r0, r6
 801078c:	f7f9 ff88 	bl	800a6a0 <_malloc_r>
 8010790:	b948      	cbnz	r0, 80107a6 <__sfvwrite_r+0x172>
 8010792:	230c      	movs	r3, #12
 8010794:	6033      	str	r3, [r6, #0]
 8010796:	89a3      	ldrh	r3, [r4, #12]
 8010798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801079c:	81a3      	strh	r3, [r4, #12]
 801079e:	e7ae      	b.n	80106fe <__sfvwrite_r+0xca>
 80107a0:	4699      	mov	r9, r3
 80107a2:	469a      	mov	sl, r3
 80107a4:	e7d2      	b.n	801074c <__sfvwrite_r+0x118>
 80107a6:	465a      	mov	r2, fp
 80107a8:	6921      	ldr	r1, [r4, #16]
 80107aa:	9001      	str	r0, [sp, #4]
 80107ac:	f7fe fb4e 	bl	800ee4c <memcpy>
 80107b0:	89a2      	ldrh	r2, [r4, #12]
 80107b2:	9b01      	ldr	r3, [sp, #4]
 80107b4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80107b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80107bc:	81a2      	strh	r2, [r4, #12]
 80107be:	4652      	mov	r2, sl
 80107c0:	6123      	str	r3, [r4, #16]
 80107c2:	6165      	str	r5, [r4, #20]
 80107c4:	445b      	add	r3, fp
 80107c6:	eba5 050b 	sub.w	r5, r5, fp
 80107ca:	6023      	str	r3, [r4, #0]
 80107cc:	60a5      	str	r5, [r4, #8]
 80107ce:	4552      	cmp	r2, sl
 80107d0:	bf28      	it	cs
 80107d2:	4652      	movcs	r2, sl
 80107d4:	4655      	mov	r5, sl
 80107d6:	4649      	mov	r1, r9
 80107d8:	6820      	ldr	r0, [r4, #0]
 80107da:	9201      	str	r2, [sp, #4]
 80107dc:	f7fe fb44 	bl	800ee68 <memmove>
 80107e0:	68a3      	ldr	r3, [r4, #8]
 80107e2:	9a01      	ldr	r2, [sp, #4]
 80107e4:	1a9b      	subs	r3, r3, r2
 80107e6:	60a3      	str	r3, [r4, #8]
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	441a      	add	r2, r3
 80107ec:	6022      	str	r2, [r4, #0]
 80107ee:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80107f2:	44a9      	add	r9, r5
 80107f4:	ebaa 0a05 	sub.w	sl, sl, r5
 80107f8:	1b45      	subs	r5, r0, r5
 80107fa:	f8c8 5008 	str.w	r5, [r8, #8]
 80107fe:	2d00      	cmp	r5, #0
 8010800:	d1a4      	bne.n	801074c <__sfvwrite_r+0x118>
 8010802:	e71e      	b.n	8010642 <__sfvwrite_r+0xe>
 8010804:	462a      	mov	r2, r5
 8010806:	4630      	mov	r0, r6
 8010808:	f7fa f9d8 	bl	800abbc <_realloc_r>
 801080c:	4603      	mov	r3, r0
 801080e:	2800      	cmp	r0, #0
 8010810:	d1d5      	bne.n	80107be <__sfvwrite_r+0x18a>
 8010812:	4630      	mov	r0, r6
 8010814:	6921      	ldr	r1, [r4, #16]
 8010816:	f7fd fec5 	bl	800e5a4 <_free_r>
 801081a:	89a3      	ldrh	r3, [r4, #12]
 801081c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010820:	81a3      	strh	r3, [r4, #12]
 8010822:	e7b6      	b.n	8010792 <__sfvwrite_r+0x15e>
 8010824:	6923      	ldr	r3, [r4, #16]
 8010826:	4283      	cmp	r3, r0
 8010828:	d302      	bcc.n	8010830 <__sfvwrite_r+0x1fc>
 801082a:	6961      	ldr	r1, [r4, #20]
 801082c:	4551      	cmp	r1, sl
 801082e:	d915      	bls.n	801085c <__sfvwrite_r+0x228>
 8010830:	4552      	cmp	r2, sl
 8010832:	bf28      	it	cs
 8010834:	4652      	movcs	r2, sl
 8010836:	4615      	mov	r5, r2
 8010838:	4649      	mov	r1, r9
 801083a:	f7fe fb15 	bl	800ee68 <memmove>
 801083e:	68a3      	ldr	r3, [r4, #8]
 8010840:	6822      	ldr	r2, [r4, #0]
 8010842:	1b5b      	subs	r3, r3, r5
 8010844:	442a      	add	r2, r5
 8010846:	60a3      	str	r3, [r4, #8]
 8010848:	6022      	str	r2, [r4, #0]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d1cf      	bne.n	80107ee <__sfvwrite_r+0x1ba>
 801084e:	4621      	mov	r1, r4
 8010850:	4630      	mov	r0, r6
 8010852:	f7fd fdbf 	bl	800e3d4 <_fflush_r>
 8010856:	2800      	cmp	r0, #0
 8010858:	d0c9      	beq.n	80107ee <__sfvwrite_r+0x1ba>
 801085a:	e79c      	b.n	8010796 <__sfvwrite_r+0x162>
 801085c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010860:	459a      	cmp	sl, r3
 8010862:	bf38      	it	cc
 8010864:	4653      	movcc	r3, sl
 8010866:	fb93 f3f1 	sdiv	r3, r3, r1
 801086a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801086c:	434b      	muls	r3, r1
 801086e:	464a      	mov	r2, r9
 8010870:	4630      	mov	r0, r6
 8010872:	69e1      	ldr	r1, [r4, #28]
 8010874:	47a8      	blx	r5
 8010876:	1e05      	subs	r5, r0, #0
 8010878:	dcb9      	bgt.n	80107ee <__sfvwrite_r+0x1ba>
 801087a:	e78c      	b.n	8010796 <__sfvwrite_r+0x162>
 801087c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010880:	2000      	movs	r0, #0
 8010882:	3708      	adds	r7, #8
 8010884:	e6f4      	b.n	8010670 <__sfvwrite_r+0x3c>
 8010886:	f10b 0901 	add.w	r9, fp, #1
 801088a:	e701      	b.n	8010690 <__sfvwrite_r+0x5c>
 801088c:	4293      	cmp	r3, r2
 801088e:	dc08      	bgt.n	80108a2 <__sfvwrite_r+0x26e>
 8010890:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010892:	4652      	mov	r2, sl
 8010894:	4630      	mov	r0, r6
 8010896:	69e1      	ldr	r1, [r4, #28]
 8010898:	47a8      	blx	r5
 801089a:	1e05      	subs	r5, r0, #0
 801089c:	f73f af14 	bgt.w	80106c8 <__sfvwrite_r+0x94>
 80108a0:	e779      	b.n	8010796 <__sfvwrite_r+0x162>
 80108a2:	4651      	mov	r1, sl
 80108a4:	9201      	str	r2, [sp, #4]
 80108a6:	f7fe fadf 	bl	800ee68 <memmove>
 80108aa:	9a01      	ldr	r2, [sp, #4]
 80108ac:	68a3      	ldr	r3, [r4, #8]
 80108ae:	4615      	mov	r5, r2
 80108b0:	1a9b      	subs	r3, r3, r2
 80108b2:	60a3      	str	r3, [r4, #8]
 80108b4:	6823      	ldr	r3, [r4, #0]
 80108b6:	4413      	add	r3, r2
 80108b8:	6023      	str	r3, [r4, #0]
 80108ba:	e705      	b.n	80106c8 <__sfvwrite_r+0x94>
 80108bc:	2001      	movs	r0, #1
 80108be:	e70d      	b.n	80106dc <__sfvwrite_r+0xa8>
 80108c0:	7ffffc00 	.word	0x7ffffc00

080108c4 <__swhatbuf_r>:
 80108c4:	b570      	push	{r4, r5, r6, lr}
 80108c6:	460e      	mov	r6, r1
 80108c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108cc:	4614      	mov	r4, r2
 80108ce:	2900      	cmp	r1, #0
 80108d0:	461d      	mov	r5, r3
 80108d2:	b096      	sub	sp, #88	; 0x58
 80108d4:	da0a      	bge.n	80108ec <__swhatbuf_r+0x28>
 80108d6:	2300      	movs	r3, #0
 80108d8:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 80108dc:	602b      	str	r3, [r5, #0]
 80108de:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 80108e2:	d116      	bne.n	8010912 <__swhatbuf_r+0x4e>
 80108e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108e8:	6023      	str	r3, [r4, #0]
 80108ea:	e015      	b.n	8010918 <__swhatbuf_r+0x54>
 80108ec:	466a      	mov	r2, sp
 80108ee:	f000 f8fb 	bl	8010ae8 <_fstat_r>
 80108f2:	2800      	cmp	r0, #0
 80108f4:	dbef      	blt.n	80108d6 <__swhatbuf_r+0x12>
 80108f6:	9a01      	ldr	r2, [sp, #4]
 80108f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80108fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010904:	425a      	negs	r2, r3
 8010906:	415a      	adcs	r2, r3
 8010908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801090c:	602a      	str	r2, [r5, #0]
 801090e:	6023      	str	r3, [r4, #0]
 8010910:	e002      	b.n	8010918 <__swhatbuf_r+0x54>
 8010912:	2240      	movs	r2, #64	; 0x40
 8010914:	4618      	mov	r0, r3
 8010916:	6022      	str	r2, [r4, #0]
 8010918:	b016      	add	sp, #88	; 0x58
 801091a:	bd70      	pop	{r4, r5, r6, pc}

0801091c <__smakebuf_r>:
 801091c:	898b      	ldrh	r3, [r1, #12]
 801091e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010920:	079d      	lsls	r5, r3, #30
 8010922:	4606      	mov	r6, r0
 8010924:	460c      	mov	r4, r1
 8010926:	d507      	bpl.n	8010938 <__smakebuf_r+0x1c>
 8010928:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801092c:	6023      	str	r3, [r4, #0]
 801092e:	6123      	str	r3, [r4, #16]
 8010930:	2301      	movs	r3, #1
 8010932:	6163      	str	r3, [r4, #20]
 8010934:	b002      	add	sp, #8
 8010936:	bd70      	pop	{r4, r5, r6, pc}
 8010938:	466a      	mov	r2, sp
 801093a:	ab01      	add	r3, sp, #4
 801093c:	f7ff ffc2 	bl	80108c4 <__swhatbuf_r>
 8010940:	9900      	ldr	r1, [sp, #0]
 8010942:	4605      	mov	r5, r0
 8010944:	4630      	mov	r0, r6
 8010946:	f7f9 feab 	bl	800a6a0 <_malloc_r>
 801094a:	b948      	cbnz	r0, 8010960 <__smakebuf_r+0x44>
 801094c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010950:	059a      	lsls	r2, r3, #22
 8010952:	d4ef      	bmi.n	8010934 <__smakebuf_r+0x18>
 8010954:	f023 0303 	bic.w	r3, r3, #3
 8010958:	f043 0302 	orr.w	r3, r3, #2
 801095c:	81a3      	strh	r3, [r4, #12]
 801095e:	e7e3      	b.n	8010928 <__smakebuf_r+0xc>
 8010960:	4b0d      	ldr	r3, [pc, #52]	; (8010998 <__smakebuf_r+0x7c>)
 8010962:	63f3      	str	r3, [r6, #60]	; 0x3c
 8010964:	89a3      	ldrh	r3, [r4, #12]
 8010966:	6020      	str	r0, [r4, #0]
 8010968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801096c:	81a3      	strh	r3, [r4, #12]
 801096e:	9b00      	ldr	r3, [sp, #0]
 8010970:	6120      	str	r0, [r4, #16]
 8010972:	6163      	str	r3, [r4, #20]
 8010974:	9b01      	ldr	r3, [sp, #4]
 8010976:	b15b      	cbz	r3, 8010990 <__smakebuf_r+0x74>
 8010978:	4630      	mov	r0, r6
 801097a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801097e:	f000 f8c5 	bl	8010b0c <_isatty_r>
 8010982:	b128      	cbz	r0, 8010990 <__smakebuf_r+0x74>
 8010984:	89a3      	ldrh	r3, [r4, #12]
 8010986:	f023 0303 	bic.w	r3, r3, #3
 801098a:	f043 0301 	orr.w	r3, r3, #1
 801098e:	81a3      	strh	r3, [r4, #12]
 8010990:	89a0      	ldrh	r0, [r4, #12]
 8010992:	4305      	orrs	r5, r0
 8010994:	81a5      	strh	r5, [r4, #12]
 8010996:	e7cd      	b.n	8010934 <__smakebuf_r+0x18>
 8010998:	0800e471 	.word	0x0800e471

0801099c <_raise_r>:
 801099c:	291f      	cmp	r1, #31
 801099e:	b538      	push	{r3, r4, r5, lr}
 80109a0:	4604      	mov	r4, r0
 80109a2:	460d      	mov	r5, r1
 80109a4:	d904      	bls.n	80109b0 <_raise_r+0x14>
 80109a6:	2316      	movs	r3, #22
 80109a8:	6003      	str	r3, [r0, #0]
 80109aa:	f04f 30ff 	mov.w	r0, #4294967295
 80109ae:	bd38      	pop	{r3, r4, r5, pc}
 80109b0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 80109b4:	b112      	cbz	r2, 80109bc <_raise_r+0x20>
 80109b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80109ba:	b94b      	cbnz	r3, 80109d0 <_raise_r+0x34>
 80109bc:	4620      	mov	r0, r4
 80109be:	f000 f831 	bl	8010a24 <_getpid_r>
 80109c2:	462a      	mov	r2, r5
 80109c4:	4601      	mov	r1, r0
 80109c6:	4620      	mov	r0, r4
 80109c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109cc:	f000 b818 	b.w	8010a00 <_kill_r>
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d00a      	beq.n	80109ea <_raise_r+0x4e>
 80109d4:	1c59      	adds	r1, r3, #1
 80109d6:	d103      	bne.n	80109e0 <_raise_r+0x44>
 80109d8:	2316      	movs	r3, #22
 80109da:	6003      	str	r3, [r0, #0]
 80109dc:	2001      	movs	r0, #1
 80109de:	e7e6      	b.n	80109ae <_raise_r+0x12>
 80109e0:	2400      	movs	r4, #0
 80109e2:	4628      	mov	r0, r5
 80109e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109e8:	4798      	blx	r3
 80109ea:	2000      	movs	r0, #0
 80109ec:	e7df      	b.n	80109ae <_raise_r+0x12>
	...

080109f0 <raise>:
 80109f0:	4b02      	ldr	r3, [pc, #8]	; (80109fc <raise+0xc>)
 80109f2:	4601      	mov	r1, r0
 80109f4:	6818      	ldr	r0, [r3, #0]
 80109f6:	f7ff bfd1 	b.w	801099c <_raise_r>
 80109fa:	bf00      	nop
 80109fc:	20000048 	.word	0x20000048

08010a00 <_kill_r>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	2300      	movs	r3, #0
 8010a04:	4d06      	ldr	r5, [pc, #24]	; (8010a20 <_kill_r+0x20>)
 8010a06:	4604      	mov	r4, r0
 8010a08:	4608      	mov	r0, r1
 8010a0a:	4611      	mov	r1, r2
 8010a0c:	602b      	str	r3, [r5, #0]
 8010a0e:	f7f4 fdb2 	bl	8005576 <_kill>
 8010a12:	1c43      	adds	r3, r0, #1
 8010a14:	d102      	bne.n	8010a1c <_kill_r+0x1c>
 8010a16:	682b      	ldr	r3, [r5, #0]
 8010a18:	b103      	cbz	r3, 8010a1c <_kill_r+0x1c>
 8010a1a:	6023      	str	r3, [r4, #0]
 8010a1c:	bd38      	pop	{r3, r4, r5, pc}
 8010a1e:	bf00      	nop
 8010a20:	20000c4c 	.word	0x20000c4c

08010a24 <_getpid_r>:
 8010a24:	f7f4 bda0 	b.w	8005568 <_getpid>

08010a28 <__swbuf_r>:
 8010a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a2a:	460e      	mov	r6, r1
 8010a2c:	4614      	mov	r4, r2
 8010a2e:	4605      	mov	r5, r0
 8010a30:	b118      	cbz	r0, 8010a3a <__swbuf_r+0x12>
 8010a32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010a34:	b90b      	cbnz	r3, 8010a3a <__swbuf_r+0x12>
 8010a36:	f7fd fd39 	bl	800e4ac <__sinit>
 8010a3a:	69a3      	ldr	r3, [r4, #24]
 8010a3c:	60a3      	str	r3, [r4, #8]
 8010a3e:	89a3      	ldrh	r3, [r4, #12]
 8010a40:	0719      	lsls	r1, r3, #28
 8010a42:	d529      	bpl.n	8010a98 <__swbuf_r+0x70>
 8010a44:	6923      	ldr	r3, [r4, #16]
 8010a46:	b33b      	cbz	r3, 8010a98 <__swbuf_r+0x70>
 8010a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a4c:	b2f6      	uxtb	r6, r6
 8010a4e:	049a      	lsls	r2, r3, #18
 8010a50:	4637      	mov	r7, r6
 8010a52:	d52a      	bpl.n	8010aaa <__swbuf_r+0x82>
 8010a54:	6823      	ldr	r3, [r4, #0]
 8010a56:	6920      	ldr	r0, [r4, #16]
 8010a58:	1a18      	subs	r0, r3, r0
 8010a5a:	6963      	ldr	r3, [r4, #20]
 8010a5c:	4283      	cmp	r3, r0
 8010a5e:	dc04      	bgt.n	8010a6a <__swbuf_r+0x42>
 8010a60:	4621      	mov	r1, r4
 8010a62:	4628      	mov	r0, r5
 8010a64:	f7fd fcb6 	bl	800e3d4 <_fflush_r>
 8010a68:	b9e0      	cbnz	r0, 8010aa4 <__swbuf_r+0x7c>
 8010a6a:	68a3      	ldr	r3, [r4, #8]
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	60a3      	str	r3, [r4, #8]
 8010a70:	6823      	ldr	r3, [r4, #0]
 8010a72:	1c5a      	adds	r2, r3, #1
 8010a74:	6022      	str	r2, [r4, #0]
 8010a76:	701e      	strb	r6, [r3, #0]
 8010a78:	6962      	ldr	r2, [r4, #20]
 8010a7a:	1c43      	adds	r3, r0, #1
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d004      	beq.n	8010a8a <__swbuf_r+0x62>
 8010a80:	89a3      	ldrh	r3, [r4, #12]
 8010a82:	07db      	lsls	r3, r3, #31
 8010a84:	d506      	bpl.n	8010a94 <__swbuf_r+0x6c>
 8010a86:	2e0a      	cmp	r6, #10
 8010a88:	d104      	bne.n	8010a94 <__swbuf_r+0x6c>
 8010a8a:	4621      	mov	r1, r4
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	f7fd fca1 	bl	800e3d4 <_fflush_r>
 8010a92:	b938      	cbnz	r0, 8010aa4 <__swbuf_r+0x7c>
 8010a94:	4638      	mov	r0, r7
 8010a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a98:	4621      	mov	r1, r4
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f7ff fd00 	bl	80104a0 <__swsetup_r>
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d0d1      	beq.n	8010a48 <__swbuf_r+0x20>
 8010aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8010aa8:	e7f4      	b.n	8010a94 <__swbuf_r+0x6c>
 8010aaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010aae:	81a3      	strh	r3, [r4, #12]
 8010ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ab6:	6663      	str	r3, [r4, #100]	; 0x64
 8010ab8:	e7cc      	b.n	8010a54 <__swbuf_r+0x2c>
	...

08010abc <_wcrtomb_r>:
 8010abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010abe:	4c09      	ldr	r4, [pc, #36]	; (8010ae4 <_wcrtomb_r+0x28>)
 8010ac0:	4605      	mov	r5, r0
 8010ac2:	461e      	mov	r6, r3
 8010ac4:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8010ac8:	b085      	sub	sp, #20
 8010aca:	b909      	cbnz	r1, 8010ad0 <_wcrtomb_r+0x14>
 8010acc:	460a      	mov	r2, r1
 8010ace:	a901      	add	r1, sp, #4
 8010ad0:	47b8      	blx	r7
 8010ad2:	1c43      	adds	r3, r0, #1
 8010ad4:	bf01      	itttt	eq
 8010ad6:	2300      	moveq	r3, #0
 8010ad8:	6033      	streq	r3, [r6, #0]
 8010ada:	238a      	moveq	r3, #138	; 0x8a
 8010adc:	602b      	streq	r3, [r5, #0]
 8010ade:	b005      	add	sp, #20
 8010ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	2000047c 	.word	0x2000047c

08010ae8 <_fstat_r>:
 8010ae8:	b538      	push	{r3, r4, r5, lr}
 8010aea:	2300      	movs	r3, #0
 8010aec:	4d06      	ldr	r5, [pc, #24]	; (8010b08 <_fstat_r+0x20>)
 8010aee:	4604      	mov	r4, r0
 8010af0:	4608      	mov	r0, r1
 8010af2:	4611      	mov	r1, r2
 8010af4:	602b      	str	r3, [r5, #0]
 8010af6:	f7f4 fd9c 	bl	8005632 <_fstat>
 8010afa:	1c43      	adds	r3, r0, #1
 8010afc:	d102      	bne.n	8010b04 <_fstat_r+0x1c>
 8010afe:	682b      	ldr	r3, [r5, #0]
 8010b00:	b103      	cbz	r3, 8010b04 <_fstat_r+0x1c>
 8010b02:	6023      	str	r3, [r4, #0]
 8010b04:	bd38      	pop	{r3, r4, r5, pc}
 8010b06:	bf00      	nop
 8010b08:	20000c4c 	.word	0x20000c4c

08010b0c <_isatty_r>:
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	2300      	movs	r3, #0
 8010b10:	4d05      	ldr	r5, [pc, #20]	; (8010b28 <_isatty_r+0x1c>)
 8010b12:	4604      	mov	r4, r0
 8010b14:	4608      	mov	r0, r1
 8010b16:	602b      	str	r3, [r5, #0]
 8010b18:	f7f4 fd9a 	bl	8005650 <_isatty>
 8010b1c:	1c43      	adds	r3, r0, #1
 8010b1e:	d102      	bne.n	8010b26 <_isatty_r+0x1a>
 8010b20:	682b      	ldr	r3, [r5, #0]
 8010b22:	b103      	cbz	r3, 8010b26 <_isatty_r+0x1a>
 8010b24:	6023      	str	r3, [r4, #0]
 8010b26:	bd38      	pop	{r3, r4, r5, pc}
 8010b28:	20000c4c 	.word	0x20000c4c

08010b2c <cos>:
 8010b2c:	b530      	push	{r4, r5, lr}
 8010b2e:	4a20      	ldr	r2, [pc, #128]	; (8010bb0 <cos+0x84>)
 8010b30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010b34:	4293      	cmp	r3, r2
 8010b36:	b087      	sub	sp, #28
 8010b38:	dc06      	bgt.n	8010b48 <cos+0x1c>
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	b007      	add	sp, #28
 8010b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b44:	f000 ba78 	b.w	8011038 <__kernel_cos>
 8010b48:	4a1a      	ldr	r2, [pc, #104]	; (8010bb4 <cos+0x88>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	dd05      	ble.n	8010b5a <cos+0x2e>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	460b      	mov	r3, r1
 8010b52:	f7ef fb75 	bl	8000240 <__aeabi_dsub>
 8010b56:	b007      	add	sp, #28
 8010b58:	bd30      	pop	{r4, r5, pc}
 8010b5a:	aa02      	add	r2, sp, #8
 8010b5c:	f000 f874 	bl	8010c48 <__ieee754_rem_pio2>
 8010b60:	f000 0003 	and.w	r0, r0, #3
 8010b64:	2801      	cmp	r0, #1
 8010b66:	d009      	beq.n	8010b7c <cos+0x50>
 8010b68:	2802      	cmp	r0, #2
 8010b6a:	d011      	beq.n	8010b90 <cos+0x64>
 8010b6c:	b9b8      	cbnz	r0, 8010b9e <cos+0x72>
 8010b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b76:	f000 fa5f 	bl	8011038 <__kernel_cos>
 8010b7a:	e7ec      	b.n	8010b56 <cos+0x2a>
 8010b7c:	9000      	str	r0, [sp, #0]
 8010b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b86:	f000 fe57 	bl	8011838 <__kernel_sin>
 8010b8a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8010b8e:	e7e2      	b.n	8010b56 <cos+0x2a>
 8010b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b98:	f000 fa4e 	bl	8011038 <__kernel_cos>
 8010b9c:	e7f5      	b.n	8010b8a <cos+0x5e>
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ba4:	9300      	str	r3, [sp, #0]
 8010ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010baa:	f000 fe45 	bl	8011838 <__kernel_sin>
 8010bae:	e7d2      	b.n	8010b56 <cos+0x2a>
 8010bb0:	3fe921fb 	.word	0x3fe921fb
 8010bb4:	7fefffff 	.word	0x7fefffff

08010bb8 <sin>:
 8010bb8:	b530      	push	{r4, r5, lr}
 8010bba:	4a20      	ldr	r2, [pc, #128]	; (8010c3c <sin+0x84>)
 8010bbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	b087      	sub	sp, #28
 8010bc4:	dc06      	bgt.n	8010bd4 <sin+0x1c>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	2200      	movs	r2, #0
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	2300      	movs	r3, #0
 8010bce:	f000 fe33 	bl	8011838 <__kernel_sin>
 8010bd2:	e006      	b.n	8010be2 <sin+0x2a>
 8010bd4:	4a1a      	ldr	r2, [pc, #104]	; (8010c40 <sin+0x88>)
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	dd05      	ble.n	8010be6 <sin+0x2e>
 8010bda:	4602      	mov	r2, r0
 8010bdc:	460b      	mov	r3, r1
 8010bde:	f7ef fb2f 	bl	8000240 <__aeabi_dsub>
 8010be2:	b007      	add	sp, #28
 8010be4:	bd30      	pop	{r4, r5, pc}
 8010be6:	aa02      	add	r2, sp, #8
 8010be8:	f000 f82e 	bl	8010c48 <__ieee754_rem_pio2>
 8010bec:	f000 0003 	and.w	r0, r0, #3
 8010bf0:	2801      	cmp	r0, #1
 8010bf2:	d009      	beq.n	8010c08 <sin+0x50>
 8010bf4:	2802      	cmp	r0, #2
 8010bf6:	d00e      	beq.n	8010c16 <sin+0x5e>
 8010bf8:	b9c0      	cbnz	r0, 8010c2c <sin+0x74>
 8010bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bfe:	2301      	movs	r3, #1
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c06:	e7e2      	b.n	8010bce <sin+0x16>
 8010c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c10:	f000 fa12 	bl	8011038 <__kernel_cos>
 8010c14:	e7e5      	b.n	8010be2 <sin+0x2a>
 8010c16:	2301      	movs	r3, #1
 8010c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c1c:	9300      	str	r3, [sp, #0]
 8010c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c22:	f000 fe09 	bl	8011838 <__kernel_sin>
 8010c26:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8010c2a:	e7da      	b.n	8010be2 <sin+0x2a>
 8010c2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c34:	f000 fa00 	bl	8011038 <__kernel_cos>
 8010c38:	e7f5      	b.n	8010c26 <sin+0x6e>
 8010c3a:	bf00      	nop
 8010c3c:	3fe921fb 	.word	0x3fe921fb
 8010c40:	7fefffff 	.word	0x7fefffff
 8010c44:	00000000 	.word	0x00000000

08010c48 <__ieee754_rem_pio2>:
 8010c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4c:	4614      	mov	r4, r2
 8010c4e:	4ac4      	ldr	r2, [pc, #784]	; (8010f60 <__ieee754_rem_pio2+0x318>)
 8010c50:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8010c54:	b08d      	sub	sp, #52	; 0x34
 8010c56:	4592      	cmp	sl, r2
 8010c58:	9104      	str	r1, [sp, #16]
 8010c5a:	dc07      	bgt.n	8010c6c <__ieee754_rem_pio2+0x24>
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	2300      	movs	r3, #0
 8010c60:	e9c4 0100 	strd	r0, r1, [r4]
 8010c64:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010c68:	2500      	movs	r5, #0
 8010c6a:	e024      	b.n	8010cb6 <__ieee754_rem_pio2+0x6e>
 8010c6c:	4abd      	ldr	r2, [pc, #756]	; (8010f64 <__ieee754_rem_pio2+0x31c>)
 8010c6e:	4592      	cmp	sl, r2
 8010c70:	dc72      	bgt.n	8010d58 <__ieee754_rem_pio2+0x110>
 8010c72:	9b04      	ldr	r3, [sp, #16]
 8010c74:	4dbc      	ldr	r5, [pc, #752]	; (8010f68 <__ieee754_rem_pio2+0x320>)
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	a3ab      	add	r3, pc, #684	; (adr r3, 8010f28 <__ieee754_rem_pio2+0x2e0>)
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	dd36      	ble.n	8010cee <__ieee754_rem_pio2+0xa6>
 8010c80:	f7ef fade 	bl	8000240 <__aeabi_dsub>
 8010c84:	45aa      	cmp	sl, r5
 8010c86:	4606      	mov	r6, r0
 8010c88:	460f      	mov	r7, r1
 8010c8a:	d018      	beq.n	8010cbe <__ieee754_rem_pio2+0x76>
 8010c8c:	a3a8      	add	r3, pc, #672	; (adr r3, 8010f30 <__ieee754_rem_pio2+0x2e8>)
 8010c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c92:	f7ef fad5 	bl	8000240 <__aeabi_dsub>
 8010c96:	4602      	mov	r2, r0
 8010c98:	460b      	mov	r3, r1
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8010ca0:	4639      	mov	r1, r7
 8010ca2:	f7ef facd 	bl	8000240 <__aeabi_dsub>
 8010ca6:	a3a2      	add	r3, pc, #648	; (adr r3, 8010f30 <__ieee754_rem_pio2+0x2e8>)
 8010ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cac:	f7ef fac8 	bl	8000240 <__aeabi_dsub>
 8010cb0:	2501      	movs	r5, #1
 8010cb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	b00d      	add	sp, #52	; 0x34
 8010cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cbe:	a39e      	add	r3, pc, #632	; (adr r3, 8010f38 <__ieee754_rem_pio2+0x2f0>)
 8010cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc4:	f7ef fabc 	bl	8000240 <__aeabi_dsub>
 8010cc8:	a39d      	add	r3, pc, #628	; (adr r3, 8010f40 <__ieee754_rem_pio2+0x2f8>)
 8010cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cce:	4606      	mov	r6, r0
 8010cd0:	460f      	mov	r7, r1
 8010cd2:	f7ef fab5 	bl	8000240 <__aeabi_dsub>
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	460b      	mov	r3, r1
 8010cda:	4630      	mov	r0, r6
 8010cdc:	e9c4 2300 	strd	r2, r3, [r4]
 8010ce0:	4639      	mov	r1, r7
 8010ce2:	f7ef faad 	bl	8000240 <__aeabi_dsub>
 8010ce6:	a396      	add	r3, pc, #600	; (adr r3, 8010f40 <__ieee754_rem_pio2+0x2f8>)
 8010ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cec:	e7de      	b.n	8010cac <__ieee754_rem_pio2+0x64>
 8010cee:	f7ef faa9 	bl	8000244 <__adddf3>
 8010cf2:	45aa      	cmp	sl, r5
 8010cf4:	4606      	mov	r6, r0
 8010cf6:	460f      	mov	r7, r1
 8010cf8:	d016      	beq.n	8010d28 <__ieee754_rem_pio2+0xe0>
 8010cfa:	a38d      	add	r3, pc, #564	; (adr r3, 8010f30 <__ieee754_rem_pio2+0x2e8>)
 8010cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d00:	f7ef faa0 	bl	8000244 <__adddf3>
 8010d04:	4602      	mov	r2, r0
 8010d06:	460b      	mov	r3, r1
 8010d08:	4630      	mov	r0, r6
 8010d0a:	e9c4 2300 	strd	r2, r3, [r4]
 8010d0e:	4639      	mov	r1, r7
 8010d10:	f7ef fa96 	bl	8000240 <__aeabi_dsub>
 8010d14:	a386      	add	r3, pc, #536	; (adr r3, 8010f30 <__ieee754_rem_pio2+0x2e8>)
 8010d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1a:	f7ef fa93 	bl	8000244 <__adddf3>
 8010d1e:	f04f 35ff 	mov.w	r5, #4294967295
 8010d22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d26:	e7c6      	b.n	8010cb6 <__ieee754_rem_pio2+0x6e>
 8010d28:	a383      	add	r3, pc, #524	; (adr r3, 8010f38 <__ieee754_rem_pio2+0x2f0>)
 8010d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2e:	f7ef fa89 	bl	8000244 <__adddf3>
 8010d32:	a383      	add	r3, pc, #524	; (adr r3, 8010f40 <__ieee754_rem_pio2+0x2f8>)
 8010d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d38:	4606      	mov	r6, r0
 8010d3a:	460f      	mov	r7, r1
 8010d3c:	f7ef fa82 	bl	8000244 <__adddf3>
 8010d40:	4602      	mov	r2, r0
 8010d42:	460b      	mov	r3, r1
 8010d44:	4630      	mov	r0, r6
 8010d46:	e9c4 2300 	strd	r2, r3, [r4]
 8010d4a:	4639      	mov	r1, r7
 8010d4c:	f7ef fa78 	bl	8000240 <__aeabi_dsub>
 8010d50:	a37b      	add	r3, pc, #492	; (adr r3, 8010f40 <__ieee754_rem_pio2+0x2f8>)
 8010d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d56:	e7e0      	b.n	8010d1a <__ieee754_rem_pio2+0xd2>
 8010d58:	4a84      	ldr	r2, [pc, #528]	; (8010f6c <__ieee754_rem_pio2+0x324>)
 8010d5a:	4592      	cmp	sl, r2
 8010d5c:	f300 80d5 	bgt.w	8010f0a <__ieee754_rem_pio2+0x2c2>
 8010d60:	f000 fe20 	bl	80119a4 <fabs>
 8010d64:	a378      	add	r3, pc, #480	; (adr r3, 8010f48 <__ieee754_rem_pio2+0x300>)
 8010d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6a:	4606      	mov	r6, r0
 8010d6c:	460f      	mov	r7, r1
 8010d6e:	f7ef fc1f 	bl	80005b0 <__aeabi_dmul>
 8010d72:	2200      	movs	r2, #0
 8010d74:	4b7e      	ldr	r3, [pc, #504]	; (8010f70 <__ieee754_rem_pio2+0x328>)
 8010d76:	f7ef fa65 	bl	8000244 <__adddf3>
 8010d7a:	f7ef fec9 	bl	8000b10 <__aeabi_d2iz>
 8010d7e:	4605      	mov	r5, r0
 8010d80:	f7ef fbac 	bl	80004dc <__aeabi_i2d>
 8010d84:	4602      	mov	r2, r0
 8010d86:	460b      	mov	r3, r1
 8010d88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010d8c:	a366      	add	r3, pc, #408	; (adr r3, 8010f28 <__ieee754_rem_pio2+0x2e0>)
 8010d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d92:	f7ef fc0d 	bl	80005b0 <__aeabi_dmul>
 8010d96:	4602      	mov	r2, r0
 8010d98:	460b      	mov	r3, r1
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	4639      	mov	r1, r7
 8010d9e:	f7ef fa4f 	bl	8000240 <__aeabi_dsub>
 8010da2:	a363      	add	r3, pc, #396	; (adr r3, 8010f30 <__ieee754_rem_pio2+0x2e8>)
 8010da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da8:	4680      	mov	r8, r0
 8010daa:	4689      	mov	r9, r1
 8010dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010db0:	f7ef fbfe 	bl	80005b0 <__aeabi_dmul>
 8010db4:	2d1f      	cmp	r5, #31
 8010db6:	4606      	mov	r6, r0
 8010db8:	460f      	mov	r7, r1
 8010dba:	dc0e      	bgt.n	8010dda <__ieee754_rem_pio2+0x192>
 8010dbc:	4b6d      	ldr	r3, [pc, #436]	; (8010f74 <__ieee754_rem_pio2+0x32c>)
 8010dbe:	1e6a      	subs	r2, r5, #1
 8010dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dc4:	4553      	cmp	r3, sl
 8010dc6:	d008      	beq.n	8010dda <__ieee754_rem_pio2+0x192>
 8010dc8:	4632      	mov	r2, r6
 8010dca:	463b      	mov	r3, r7
 8010dcc:	4640      	mov	r0, r8
 8010dce:	4649      	mov	r1, r9
 8010dd0:	f7ef fa36 	bl	8000240 <__aeabi_dsub>
 8010dd4:	e9c4 0100 	strd	r0, r1, [r4]
 8010dd8:	e013      	b.n	8010e02 <__ieee754_rem_pio2+0x1ba>
 8010dda:	463b      	mov	r3, r7
 8010ddc:	4632      	mov	r2, r6
 8010dde:	4640      	mov	r0, r8
 8010de0:	4649      	mov	r1, r9
 8010de2:	f7ef fa2d 	bl	8000240 <__aeabi_dsub>
 8010de6:	ea4f 532a 	mov.w	r3, sl, asr #20
 8010dea:	9305      	str	r3, [sp, #20]
 8010dec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010df0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8010df4:	f1ba 0f10 	cmp.w	sl, #16
 8010df8:	dc1f      	bgt.n	8010e3a <__ieee754_rem_pio2+0x1f2>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	e9c4 2300 	strd	r2, r3, [r4]
 8010e02:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8010e06:	4640      	mov	r0, r8
 8010e08:	4653      	mov	r3, sl
 8010e0a:	4649      	mov	r1, r9
 8010e0c:	f7ef fa18 	bl	8000240 <__aeabi_dsub>
 8010e10:	4632      	mov	r2, r6
 8010e12:	463b      	mov	r3, r7
 8010e14:	f7ef fa14 	bl	8000240 <__aeabi_dsub>
 8010e18:	460b      	mov	r3, r1
 8010e1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010e1e:	9904      	ldr	r1, [sp, #16]
 8010e20:	4602      	mov	r2, r0
 8010e22:	2900      	cmp	r1, #0
 8010e24:	f6bf af47 	bge.w	8010cb6 <__ieee754_rem_pio2+0x6e>
 8010e28:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8010e2c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010e30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010e34:	60e3      	str	r3, [r4, #12]
 8010e36:	426d      	negs	r5, r5
 8010e38:	e73d      	b.n	8010cb6 <__ieee754_rem_pio2+0x6e>
 8010e3a:	a33f      	add	r3, pc, #252	; (adr r3, 8010f38 <__ieee754_rem_pio2+0x2f0>)
 8010e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e44:	f7ef fbb4 	bl	80005b0 <__aeabi_dmul>
 8010e48:	4606      	mov	r6, r0
 8010e4a:	460f      	mov	r7, r1
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	460b      	mov	r3, r1
 8010e50:	4640      	mov	r0, r8
 8010e52:	4649      	mov	r1, r9
 8010e54:	f7ef f9f4 	bl	8000240 <__aeabi_dsub>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	460b      	mov	r3, r1
 8010e5c:	4682      	mov	sl, r0
 8010e5e:	468b      	mov	fp, r1
 8010e60:	4640      	mov	r0, r8
 8010e62:	4649      	mov	r1, r9
 8010e64:	f7ef f9ec 	bl	8000240 <__aeabi_dsub>
 8010e68:	4632      	mov	r2, r6
 8010e6a:	463b      	mov	r3, r7
 8010e6c:	f7ef f9e8 	bl	8000240 <__aeabi_dsub>
 8010e70:	a333      	add	r3, pc, #204	; (adr r3, 8010f40 <__ieee754_rem_pio2+0x2f8>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	4606      	mov	r6, r0
 8010e78:	460f      	mov	r7, r1
 8010e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e7e:	f7ef fb97 	bl	80005b0 <__aeabi_dmul>
 8010e82:	4632      	mov	r2, r6
 8010e84:	463b      	mov	r3, r7
 8010e86:	f7ef f9db 	bl	8000240 <__aeabi_dsub>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	4606      	mov	r6, r0
 8010e90:	460f      	mov	r7, r1
 8010e92:	4650      	mov	r0, sl
 8010e94:	4659      	mov	r1, fp
 8010e96:	f7ef f9d3 	bl	8000240 <__aeabi_dsub>
 8010e9a:	9a05      	ldr	r2, [sp, #20]
 8010e9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	2b31      	cmp	r3, #49	; 0x31
 8010ea4:	dc06      	bgt.n	8010eb4 <__ieee754_rem_pio2+0x26c>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	46d0      	mov	r8, sl
 8010eac:	46d9      	mov	r9, fp
 8010eae:	e9c4 2300 	strd	r2, r3, [r4]
 8010eb2:	e7a6      	b.n	8010e02 <__ieee754_rem_pio2+0x1ba>
 8010eb4:	a326      	add	r3, pc, #152	; (adr r3, 8010f50 <__ieee754_rem_pio2+0x308>)
 8010eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ebe:	f7ef fb77 	bl	80005b0 <__aeabi_dmul>
 8010ec2:	4606      	mov	r6, r0
 8010ec4:	460f      	mov	r7, r1
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	460b      	mov	r3, r1
 8010eca:	4650      	mov	r0, sl
 8010ecc:	4659      	mov	r1, fp
 8010ece:	f7ef f9b7 	bl	8000240 <__aeabi_dsub>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	460b      	mov	r3, r1
 8010ed6:	4680      	mov	r8, r0
 8010ed8:	4689      	mov	r9, r1
 8010eda:	4650      	mov	r0, sl
 8010edc:	4659      	mov	r1, fp
 8010ede:	f7ef f9af 	bl	8000240 <__aeabi_dsub>
 8010ee2:	4632      	mov	r2, r6
 8010ee4:	463b      	mov	r3, r7
 8010ee6:	f7ef f9ab 	bl	8000240 <__aeabi_dsub>
 8010eea:	a31b      	add	r3, pc, #108	; (adr r3, 8010f58 <__ieee754_rem_pio2+0x310>)
 8010eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	460f      	mov	r7, r1
 8010ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ef8:	f7ef fb5a 	bl	80005b0 <__aeabi_dmul>
 8010efc:	4632      	mov	r2, r6
 8010efe:	463b      	mov	r3, r7
 8010f00:	f7ef f99e 	bl	8000240 <__aeabi_dsub>
 8010f04:	4606      	mov	r6, r0
 8010f06:	460f      	mov	r7, r1
 8010f08:	e75e      	b.n	8010dc8 <__ieee754_rem_pio2+0x180>
 8010f0a:	4a1b      	ldr	r2, [pc, #108]	; (8010f78 <__ieee754_rem_pio2+0x330>)
 8010f0c:	4592      	cmp	sl, r2
 8010f0e:	dd35      	ble.n	8010f7c <__ieee754_rem_pio2+0x334>
 8010f10:	4602      	mov	r2, r0
 8010f12:	460b      	mov	r3, r1
 8010f14:	f7ef f994 	bl	8000240 <__aeabi_dsub>
 8010f18:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010f1c:	e9c4 0100 	strd	r0, r1, [r4]
 8010f20:	e6a2      	b.n	8010c68 <__ieee754_rem_pio2+0x20>
 8010f22:	bf00      	nop
 8010f24:	f3af 8000 	nop.w
 8010f28:	54400000 	.word	0x54400000
 8010f2c:	3ff921fb 	.word	0x3ff921fb
 8010f30:	1a626331 	.word	0x1a626331
 8010f34:	3dd0b461 	.word	0x3dd0b461
 8010f38:	1a600000 	.word	0x1a600000
 8010f3c:	3dd0b461 	.word	0x3dd0b461
 8010f40:	2e037073 	.word	0x2e037073
 8010f44:	3ba3198a 	.word	0x3ba3198a
 8010f48:	6dc9c883 	.word	0x6dc9c883
 8010f4c:	3fe45f30 	.word	0x3fe45f30
 8010f50:	2e000000 	.word	0x2e000000
 8010f54:	3ba3198a 	.word	0x3ba3198a
 8010f58:	252049c1 	.word	0x252049c1
 8010f5c:	397b839a 	.word	0x397b839a
 8010f60:	3fe921fb 	.word	0x3fe921fb
 8010f64:	4002d97b 	.word	0x4002d97b
 8010f68:	3ff921fb 	.word	0x3ff921fb
 8010f6c:	413921fb 	.word	0x413921fb
 8010f70:	3fe00000 	.word	0x3fe00000
 8010f74:	0805fff0 	.word	0x0805fff0
 8010f78:	7fefffff 	.word	0x7fefffff
 8010f7c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8010f80:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8010f84:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8010f88:	460f      	mov	r7, r1
 8010f8a:	4606      	mov	r6, r0
 8010f8c:	f7ef fdc0 	bl	8000b10 <__aeabi_d2iz>
 8010f90:	f7ef faa4 	bl	80004dc <__aeabi_i2d>
 8010f94:	4602      	mov	r2, r0
 8010f96:	460b      	mov	r3, r1
 8010f98:	4630      	mov	r0, r6
 8010f9a:	4639      	mov	r1, r7
 8010f9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010fa0:	f7ef f94e 	bl	8000240 <__aeabi_dsub>
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	4b22      	ldr	r3, [pc, #136]	; (8011030 <__ieee754_rem_pio2+0x3e8>)
 8010fa8:	f7ef fb02 	bl	80005b0 <__aeabi_dmul>
 8010fac:	460f      	mov	r7, r1
 8010fae:	4606      	mov	r6, r0
 8010fb0:	f7ef fdae 	bl	8000b10 <__aeabi_d2iz>
 8010fb4:	f7ef fa92 	bl	80004dc <__aeabi_i2d>
 8010fb8:	4602      	mov	r2, r0
 8010fba:	460b      	mov	r3, r1
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	4639      	mov	r1, r7
 8010fc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fc4:	f7ef f93c 	bl	8000240 <__aeabi_dsub>
 8010fc8:	2200      	movs	r2, #0
 8010fca:	4b19      	ldr	r3, [pc, #100]	; (8011030 <__ieee754_rem_pio2+0x3e8>)
 8010fcc:	f7ef faf0 	bl	80005b0 <__aeabi_dmul>
 8010fd0:	f04f 0803 	mov.w	r8, #3
 8010fd4:	2600      	movs	r6, #0
 8010fd6:	2700      	movs	r7, #0
 8010fd8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010fdc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8010fe0:	4632      	mov	r2, r6
 8010fe2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8010fe6:	463b      	mov	r3, r7
 8010fe8:	46c2      	mov	sl, r8
 8010fea:	f108 38ff 	add.w	r8, r8, #4294967295
 8010fee:	f7ef fd47 	bl	8000a80 <__aeabi_dcmpeq>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d1f4      	bne.n	8010fe0 <__ieee754_rem_pio2+0x398>
 8010ff6:	4b0f      	ldr	r3, [pc, #60]	; (8011034 <__ieee754_rem_pio2+0x3ec>)
 8010ff8:	462a      	mov	r2, r5
 8010ffa:	9301      	str	r3, [sp, #4]
 8010ffc:	2302      	movs	r3, #2
 8010ffe:	4621      	mov	r1, r4
 8011000:	9300      	str	r3, [sp, #0]
 8011002:	a806      	add	r0, sp, #24
 8011004:	4653      	mov	r3, sl
 8011006:	f000 f8d5 	bl	80111b4 <__kernel_rem_pio2>
 801100a:	9b04      	ldr	r3, [sp, #16]
 801100c:	4605      	mov	r5, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	f6bf ae51 	bge.w	8010cb6 <__ieee754_rem_pio2+0x6e>
 8011014:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011018:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801101c:	e9c4 2300 	strd	r2, r3, [r4]
 8011020:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8011024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011028:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801102c:	e703      	b.n	8010e36 <__ieee754_rem_pio2+0x1ee>
 801102e:	bf00      	nop
 8011030:	41700000 	.word	0x41700000
 8011034:	08060070 	.word	0x08060070

08011038 <__kernel_cos>:
 8011038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011040:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011044:	4680      	mov	r8, r0
 8011046:	460f      	mov	r7, r1
 8011048:	e9cd 2300 	strd	r2, r3, [sp]
 801104c:	da04      	bge.n	8011058 <__kernel_cos+0x20>
 801104e:	f7ef fd5f 	bl	8000b10 <__aeabi_d2iz>
 8011052:	2800      	cmp	r0, #0
 8011054:	f000 8086 	beq.w	8011164 <__kernel_cos+0x12c>
 8011058:	4642      	mov	r2, r8
 801105a:	463b      	mov	r3, r7
 801105c:	4640      	mov	r0, r8
 801105e:	4639      	mov	r1, r7
 8011060:	f7ef faa6 	bl	80005b0 <__aeabi_dmul>
 8011064:	2200      	movs	r2, #0
 8011066:	4b4e      	ldr	r3, [pc, #312]	; (80111a0 <__kernel_cos+0x168>)
 8011068:	4604      	mov	r4, r0
 801106a:	460d      	mov	r5, r1
 801106c:	f7ef faa0 	bl	80005b0 <__aeabi_dmul>
 8011070:	a33f      	add	r3, pc, #252	; (adr r3, 8011170 <__kernel_cos+0x138>)
 8011072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011076:	4682      	mov	sl, r0
 8011078:	468b      	mov	fp, r1
 801107a:	4620      	mov	r0, r4
 801107c:	4629      	mov	r1, r5
 801107e:	f7ef fa97 	bl	80005b0 <__aeabi_dmul>
 8011082:	a33d      	add	r3, pc, #244	; (adr r3, 8011178 <__kernel_cos+0x140>)
 8011084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011088:	f7ef f8dc 	bl	8000244 <__adddf3>
 801108c:	4622      	mov	r2, r4
 801108e:	462b      	mov	r3, r5
 8011090:	f7ef fa8e 	bl	80005b0 <__aeabi_dmul>
 8011094:	a33a      	add	r3, pc, #232	; (adr r3, 8011180 <__kernel_cos+0x148>)
 8011096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109a:	f7ef f8d1 	bl	8000240 <__aeabi_dsub>
 801109e:	4622      	mov	r2, r4
 80110a0:	462b      	mov	r3, r5
 80110a2:	f7ef fa85 	bl	80005b0 <__aeabi_dmul>
 80110a6:	a338      	add	r3, pc, #224	; (adr r3, 8011188 <__kernel_cos+0x150>)
 80110a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ac:	f7ef f8ca 	bl	8000244 <__adddf3>
 80110b0:	4622      	mov	r2, r4
 80110b2:	462b      	mov	r3, r5
 80110b4:	f7ef fa7c 	bl	80005b0 <__aeabi_dmul>
 80110b8:	a335      	add	r3, pc, #212	; (adr r3, 8011190 <__kernel_cos+0x158>)
 80110ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110be:	f7ef f8bf 	bl	8000240 <__aeabi_dsub>
 80110c2:	4622      	mov	r2, r4
 80110c4:	462b      	mov	r3, r5
 80110c6:	f7ef fa73 	bl	80005b0 <__aeabi_dmul>
 80110ca:	a333      	add	r3, pc, #204	; (adr r3, 8011198 <__kernel_cos+0x160>)
 80110cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d0:	f7ef f8b8 	bl	8000244 <__adddf3>
 80110d4:	4622      	mov	r2, r4
 80110d6:	462b      	mov	r3, r5
 80110d8:	f7ef fa6a 	bl	80005b0 <__aeabi_dmul>
 80110dc:	4622      	mov	r2, r4
 80110de:	462b      	mov	r3, r5
 80110e0:	f7ef fa66 	bl	80005b0 <__aeabi_dmul>
 80110e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110e8:	4604      	mov	r4, r0
 80110ea:	460d      	mov	r5, r1
 80110ec:	4640      	mov	r0, r8
 80110ee:	4639      	mov	r1, r7
 80110f0:	f7ef fa5e 	bl	80005b0 <__aeabi_dmul>
 80110f4:	460b      	mov	r3, r1
 80110f6:	4602      	mov	r2, r0
 80110f8:	4629      	mov	r1, r5
 80110fa:	4620      	mov	r0, r4
 80110fc:	f7ef f8a0 	bl	8000240 <__aeabi_dsub>
 8011100:	4b28      	ldr	r3, [pc, #160]	; (80111a4 <__kernel_cos+0x16c>)
 8011102:	4680      	mov	r8, r0
 8011104:	429e      	cmp	r6, r3
 8011106:	4689      	mov	r9, r1
 8011108:	dc0e      	bgt.n	8011128 <__kernel_cos+0xf0>
 801110a:	4602      	mov	r2, r0
 801110c:	460b      	mov	r3, r1
 801110e:	4650      	mov	r0, sl
 8011110:	4659      	mov	r1, fp
 8011112:	f7ef f895 	bl	8000240 <__aeabi_dsub>
 8011116:	4602      	mov	r2, r0
 8011118:	2000      	movs	r0, #0
 801111a:	460b      	mov	r3, r1
 801111c:	4922      	ldr	r1, [pc, #136]	; (80111a8 <__kernel_cos+0x170>)
 801111e:	f7ef f88f 	bl	8000240 <__aeabi_dsub>
 8011122:	b003      	add	sp, #12
 8011124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011128:	2400      	movs	r4, #0
 801112a:	4b20      	ldr	r3, [pc, #128]	; (80111ac <__kernel_cos+0x174>)
 801112c:	4622      	mov	r2, r4
 801112e:	429e      	cmp	r6, r3
 8011130:	bfcc      	ite	gt
 8011132:	4d1f      	ldrgt	r5, [pc, #124]	; (80111b0 <__kernel_cos+0x178>)
 8011134:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011138:	462b      	mov	r3, r5
 801113a:	2000      	movs	r0, #0
 801113c:	491a      	ldr	r1, [pc, #104]	; (80111a8 <__kernel_cos+0x170>)
 801113e:	f7ef f87f 	bl	8000240 <__aeabi_dsub>
 8011142:	4622      	mov	r2, r4
 8011144:	4606      	mov	r6, r0
 8011146:	460f      	mov	r7, r1
 8011148:	462b      	mov	r3, r5
 801114a:	4650      	mov	r0, sl
 801114c:	4659      	mov	r1, fp
 801114e:	f7ef f877 	bl	8000240 <__aeabi_dsub>
 8011152:	4642      	mov	r2, r8
 8011154:	464b      	mov	r3, r9
 8011156:	f7ef f873 	bl	8000240 <__aeabi_dsub>
 801115a:	4602      	mov	r2, r0
 801115c:	460b      	mov	r3, r1
 801115e:	4630      	mov	r0, r6
 8011160:	4639      	mov	r1, r7
 8011162:	e7dc      	b.n	801111e <__kernel_cos+0xe6>
 8011164:	2000      	movs	r0, #0
 8011166:	4910      	ldr	r1, [pc, #64]	; (80111a8 <__kernel_cos+0x170>)
 8011168:	e7db      	b.n	8011122 <__kernel_cos+0xea>
 801116a:	bf00      	nop
 801116c:	f3af 8000 	nop.w
 8011170:	be8838d4 	.word	0xbe8838d4
 8011174:	bda8fae9 	.word	0xbda8fae9
 8011178:	bdb4b1c4 	.word	0xbdb4b1c4
 801117c:	3e21ee9e 	.word	0x3e21ee9e
 8011180:	809c52ad 	.word	0x809c52ad
 8011184:	3e927e4f 	.word	0x3e927e4f
 8011188:	19cb1590 	.word	0x19cb1590
 801118c:	3efa01a0 	.word	0x3efa01a0
 8011190:	16c15177 	.word	0x16c15177
 8011194:	3f56c16c 	.word	0x3f56c16c
 8011198:	5555554c 	.word	0x5555554c
 801119c:	3fa55555 	.word	0x3fa55555
 80111a0:	3fe00000 	.word	0x3fe00000
 80111a4:	3fd33332 	.word	0x3fd33332
 80111a8:	3ff00000 	.word	0x3ff00000
 80111ac:	3fe90000 	.word	0x3fe90000
 80111b0:	3fd20000 	.word	0x3fd20000

080111b4 <__kernel_rem_pio2>:
 80111b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80111bc:	9308      	str	r3, [sp, #32]
 80111be:	9106      	str	r1, [sp, #24]
 80111c0:	4bb6      	ldr	r3, [pc, #728]	; (801149c <__kernel_rem_pio2+0x2e8>)
 80111c2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80111c4:	f112 0f14 	cmn.w	r2, #20
 80111c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80111cc:	bfa8      	it	ge
 80111ce:	1ed4      	subge	r4, r2, #3
 80111d0:	9302      	str	r3, [sp, #8]
 80111d2:	9b08      	ldr	r3, [sp, #32]
 80111d4:	bfb8      	it	lt
 80111d6:	2400      	movlt	r4, #0
 80111d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80111dc:	9307      	str	r3, [sp, #28]
 80111de:	bfa4      	itt	ge
 80111e0:	2318      	movge	r3, #24
 80111e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80111e6:	f06f 0317 	mvn.w	r3, #23
 80111ea:	fb04 3303 	mla	r3, r4, r3, r3
 80111ee:	eb03 0b02 	add.w	fp, r3, r2
 80111f2:	9a07      	ldr	r2, [sp, #28]
 80111f4:	9b02      	ldr	r3, [sp, #8]
 80111f6:	1aa7      	subs	r7, r4, r2
 80111f8:	eb03 0802 	add.w	r8, r3, r2
 80111fc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80111fe:	2500      	movs	r5, #0
 8011200:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011204:	2200      	movs	r2, #0
 8011206:	2300      	movs	r3, #0
 8011208:	9009      	str	r0, [sp, #36]	; 0x24
 801120a:	ae20      	add	r6, sp, #128	; 0x80
 801120c:	4545      	cmp	r5, r8
 801120e:	dd14      	ble.n	801123a <__kernel_rem_pio2+0x86>
 8011210:	f04f 0800 	mov.w	r8, #0
 8011214:	9a08      	ldr	r2, [sp, #32]
 8011216:	ab20      	add	r3, sp, #128	; 0x80
 8011218:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 801121c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8011220:	9b02      	ldr	r3, [sp, #8]
 8011222:	4598      	cmp	r8, r3
 8011224:	dc35      	bgt.n	8011292 <__kernel_rem_pio2+0xde>
 8011226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011228:	2200      	movs	r2, #0
 801122a:	f1a3 0908 	sub.w	r9, r3, #8
 801122e:	2300      	movs	r3, #0
 8011230:	462f      	mov	r7, r5
 8011232:	2600      	movs	r6, #0
 8011234:	e9cd 2300 	strd	r2, r3, [sp]
 8011238:	e01f      	b.n	801127a <__kernel_rem_pio2+0xc6>
 801123a:	42ef      	cmn	r7, r5
 801123c:	d40b      	bmi.n	8011256 <__kernel_rem_pio2+0xa2>
 801123e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011242:	e9cd 2300 	strd	r2, r3, [sp]
 8011246:	f7ef f949 	bl	80004dc <__aeabi_i2d>
 801124a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801124e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011252:	3501      	adds	r5, #1
 8011254:	e7da      	b.n	801120c <__kernel_rem_pio2+0x58>
 8011256:	4610      	mov	r0, r2
 8011258:	4619      	mov	r1, r3
 801125a:	e7f8      	b.n	801124e <__kernel_rem_pio2+0x9a>
 801125c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011260:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8011264:	f7ef f9a4 	bl	80005b0 <__aeabi_dmul>
 8011268:	4602      	mov	r2, r0
 801126a:	460b      	mov	r3, r1
 801126c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011270:	f7ee ffe8 	bl	8000244 <__adddf3>
 8011274:	e9cd 0100 	strd	r0, r1, [sp]
 8011278:	3601      	adds	r6, #1
 801127a:	9b07      	ldr	r3, [sp, #28]
 801127c:	3f08      	subs	r7, #8
 801127e:	429e      	cmp	r6, r3
 8011280:	ddec      	ble.n	801125c <__kernel_rem_pio2+0xa8>
 8011282:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011286:	f108 0801 	add.w	r8, r8, #1
 801128a:	e8ea 2302 	strd	r2, r3, [sl], #8
 801128e:	3508      	adds	r5, #8
 8011290:	e7c6      	b.n	8011220 <__kernel_rem_pio2+0x6c>
 8011292:	9b02      	ldr	r3, [sp, #8]
 8011294:	aa0c      	add	r2, sp, #48	; 0x30
 8011296:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801129a:	930b      	str	r3, [sp, #44]	; 0x2c
 801129c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801129e:	9e02      	ldr	r6, [sp, #8]
 80112a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80112a4:	930a      	str	r3, [sp, #40]	; 0x28
 80112a6:	ab98      	add	r3, sp, #608	; 0x260
 80112a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80112ac:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80112b0:	ab70      	add	r3, sp, #448	; 0x1c0
 80112b2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80112b6:	46d0      	mov	r8, sl
 80112b8:	46b1      	mov	r9, r6
 80112ba:	af0c      	add	r7, sp, #48	; 0x30
 80112bc:	9700      	str	r7, [sp, #0]
 80112be:	f1b9 0f00 	cmp.w	r9, #0
 80112c2:	f1a8 0808 	sub.w	r8, r8, #8
 80112c6:	dc71      	bgt.n	80113ac <__kernel_rem_pio2+0x1f8>
 80112c8:	465a      	mov	r2, fp
 80112ca:	4620      	mov	r0, r4
 80112cc:	4629      	mov	r1, r5
 80112ce:	f000 fbef 	bl	8011ab0 <scalbn>
 80112d2:	2200      	movs	r2, #0
 80112d4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80112d8:	4604      	mov	r4, r0
 80112da:	460d      	mov	r5, r1
 80112dc:	f7ef f968 	bl	80005b0 <__aeabi_dmul>
 80112e0:	f000 fb66 	bl	80119b0 <floor>
 80112e4:	2200      	movs	r2, #0
 80112e6:	4b6e      	ldr	r3, [pc, #440]	; (80114a0 <__kernel_rem_pio2+0x2ec>)
 80112e8:	f7ef f962 	bl	80005b0 <__aeabi_dmul>
 80112ec:	4602      	mov	r2, r0
 80112ee:	460b      	mov	r3, r1
 80112f0:	4620      	mov	r0, r4
 80112f2:	4629      	mov	r1, r5
 80112f4:	f7ee ffa4 	bl	8000240 <__aeabi_dsub>
 80112f8:	460d      	mov	r5, r1
 80112fa:	4604      	mov	r4, r0
 80112fc:	f7ef fc08 	bl	8000b10 <__aeabi_d2iz>
 8011300:	9004      	str	r0, [sp, #16]
 8011302:	f7ef f8eb 	bl	80004dc <__aeabi_i2d>
 8011306:	4602      	mov	r2, r0
 8011308:	460b      	mov	r3, r1
 801130a:	4620      	mov	r0, r4
 801130c:	4629      	mov	r1, r5
 801130e:	f7ee ff97 	bl	8000240 <__aeabi_dsub>
 8011312:	f1bb 0f00 	cmp.w	fp, #0
 8011316:	4680      	mov	r8, r0
 8011318:	4689      	mov	r9, r1
 801131a:	dd70      	ble.n	80113fe <__kernel_rem_pio2+0x24a>
 801131c:	1e72      	subs	r2, r6, #1
 801131e:	ab0c      	add	r3, sp, #48	; 0x30
 8011320:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011324:	9c04      	ldr	r4, [sp, #16]
 8011326:	f1cb 0118 	rsb	r1, fp, #24
 801132a:	fa40 f301 	asr.w	r3, r0, r1
 801132e:	441c      	add	r4, r3
 8011330:	408b      	lsls	r3, r1
 8011332:	1ac0      	subs	r0, r0, r3
 8011334:	ab0c      	add	r3, sp, #48	; 0x30
 8011336:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801133a:	f1cb 0317 	rsb	r3, fp, #23
 801133e:	9404      	str	r4, [sp, #16]
 8011340:	fa40 f303 	asr.w	r3, r0, r3
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	9b00      	ldr	r3, [sp, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	dd66      	ble.n	801141a <__kernel_rem_pio2+0x266>
 801134c:	2200      	movs	r2, #0
 801134e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011352:	4614      	mov	r4, r2
 8011354:	9b04      	ldr	r3, [sp, #16]
 8011356:	3301      	adds	r3, #1
 8011358:	9304      	str	r3, [sp, #16]
 801135a:	4296      	cmp	r6, r2
 801135c:	f300 80ac 	bgt.w	80114b8 <__kernel_rem_pio2+0x304>
 8011360:	f1bb 0f00 	cmp.w	fp, #0
 8011364:	dd07      	ble.n	8011376 <__kernel_rem_pio2+0x1c2>
 8011366:	f1bb 0f01 	cmp.w	fp, #1
 801136a:	f000 80b4 	beq.w	80114d6 <__kernel_rem_pio2+0x322>
 801136e:	f1bb 0f02 	cmp.w	fp, #2
 8011372:	f000 80ba 	beq.w	80114ea <__kernel_rem_pio2+0x336>
 8011376:	9b00      	ldr	r3, [sp, #0]
 8011378:	2b02      	cmp	r3, #2
 801137a:	d14e      	bne.n	801141a <__kernel_rem_pio2+0x266>
 801137c:	4642      	mov	r2, r8
 801137e:	464b      	mov	r3, r9
 8011380:	2000      	movs	r0, #0
 8011382:	4948      	ldr	r1, [pc, #288]	; (80114a4 <__kernel_rem_pio2+0x2f0>)
 8011384:	f7ee ff5c 	bl	8000240 <__aeabi_dsub>
 8011388:	4680      	mov	r8, r0
 801138a:	4689      	mov	r9, r1
 801138c:	2c00      	cmp	r4, #0
 801138e:	d044      	beq.n	801141a <__kernel_rem_pio2+0x266>
 8011390:	465a      	mov	r2, fp
 8011392:	2000      	movs	r0, #0
 8011394:	4943      	ldr	r1, [pc, #268]	; (80114a4 <__kernel_rem_pio2+0x2f0>)
 8011396:	f000 fb8b 	bl	8011ab0 <scalbn>
 801139a:	4602      	mov	r2, r0
 801139c:	460b      	mov	r3, r1
 801139e:	4640      	mov	r0, r8
 80113a0:	4649      	mov	r1, r9
 80113a2:	f7ee ff4d 	bl	8000240 <__aeabi_dsub>
 80113a6:	4680      	mov	r8, r0
 80113a8:	4689      	mov	r9, r1
 80113aa:	e036      	b.n	801141a <__kernel_rem_pio2+0x266>
 80113ac:	2200      	movs	r2, #0
 80113ae:	4b3e      	ldr	r3, [pc, #248]	; (80114a8 <__kernel_rem_pio2+0x2f4>)
 80113b0:	4620      	mov	r0, r4
 80113b2:	4629      	mov	r1, r5
 80113b4:	f7ef f8fc 	bl	80005b0 <__aeabi_dmul>
 80113b8:	f7ef fbaa 	bl	8000b10 <__aeabi_d2iz>
 80113bc:	f7ef f88e 	bl	80004dc <__aeabi_i2d>
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80113c8:	2200      	movs	r2, #0
 80113ca:	4b38      	ldr	r3, [pc, #224]	; (80114ac <__kernel_rem_pio2+0x2f8>)
 80113cc:	f7ef f8f0 	bl	80005b0 <__aeabi_dmul>
 80113d0:	4602      	mov	r2, r0
 80113d2:	460b      	mov	r3, r1
 80113d4:	4620      	mov	r0, r4
 80113d6:	4629      	mov	r1, r5
 80113d8:	f7ee ff32 	bl	8000240 <__aeabi_dsub>
 80113dc:	f7ef fb98 	bl	8000b10 <__aeabi_d2iz>
 80113e0:	9b00      	ldr	r3, [sp, #0]
 80113e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80113e6:	f843 0b04 	str.w	r0, [r3], #4
 80113ea:	9300      	str	r3, [sp, #0]
 80113ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113f0:	e9d8 2300 	ldrd	r2, r3, [r8]
 80113f4:	f7ee ff26 	bl	8000244 <__adddf3>
 80113f8:	4604      	mov	r4, r0
 80113fa:	460d      	mov	r5, r1
 80113fc:	e75f      	b.n	80112be <__kernel_rem_pio2+0x10a>
 80113fe:	d105      	bne.n	801140c <__kernel_rem_pio2+0x258>
 8011400:	1e73      	subs	r3, r6, #1
 8011402:	aa0c      	add	r2, sp, #48	; 0x30
 8011404:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011408:	15c3      	asrs	r3, r0, #23
 801140a:	e79b      	b.n	8011344 <__kernel_rem_pio2+0x190>
 801140c:	2200      	movs	r2, #0
 801140e:	4b28      	ldr	r3, [pc, #160]	; (80114b0 <__kernel_rem_pio2+0x2fc>)
 8011410:	f7ef fb54 	bl	8000abc <__aeabi_dcmpge>
 8011414:	2800      	cmp	r0, #0
 8011416:	d13e      	bne.n	8011496 <__kernel_rem_pio2+0x2e2>
 8011418:	9000      	str	r0, [sp, #0]
 801141a:	2200      	movs	r2, #0
 801141c:	2300      	movs	r3, #0
 801141e:	4640      	mov	r0, r8
 8011420:	4649      	mov	r1, r9
 8011422:	f7ef fb2d 	bl	8000a80 <__aeabi_dcmpeq>
 8011426:	2800      	cmp	r0, #0
 8011428:	f000 80b1 	beq.w	801158e <__kernel_rem_pio2+0x3da>
 801142c:	1e74      	subs	r4, r6, #1
 801142e:	4623      	mov	r3, r4
 8011430:	2200      	movs	r2, #0
 8011432:	9902      	ldr	r1, [sp, #8]
 8011434:	428b      	cmp	r3, r1
 8011436:	da5f      	bge.n	80114f8 <__kernel_rem_pio2+0x344>
 8011438:	2a00      	cmp	r2, #0
 801143a:	d074      	beq.n	8011526 <__kernel_rem_pio2+0x372>
 801143c:	ab0c      	add	r3, sp, #48	; 0x30
 801143e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011442:	f1ab 0b18 	sub.w	fp, fp, #24
 8011446:	2b00      	cmp	r3, #0
 8011448:	f000 809f 	beq.w	801158a <__kernel_rem_pio2+0x3d6>
 801144c:	465a      	mov	r2, fp
 801144e:	2000      	movs	r0, #0
 8011450:	4914      	ldr	r1, [pc, #80]	; (80114a4 <__kernel_rem_pio2+0x2f0>)
 8011452:	f000 fb2d 	bl	8011ab0 <scalbn>
 8011456:	46a2      	mov	sl, r4
 8011458:	4606      	mov	r6, r0
 801145a:	460f      	mov	r7, r1
 801145c:	f04f 0800 	mov.w	r8, #0
 8011460:	ab70      	add	r3, sp, #448	; 0x1c0
 8011462:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80114a8 <__kernel_rem_pio2+0x2f4>
 8011466:	00e5      	lsls	r5, r4, #3
 8011468:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 801146c:	f1ba 0f00 	cmp.w	sl, #0
 8011470:	f280 80c3 	bge.w	80115fa <__kernel_rem_pio2+0x446>
 8011474:	4626      	mov	r6, r4
 8011476:	2e00      	cmp	r6, #0
 8011478:	f2c0 80f5 	blt.w	8011666 <__kernel_rem_pio2+0x4b2>
 801147c:	4b0d      	ldr	r3, [pc, #52]	; (80114b4 <__kernel_rem_pio2+0x300>)
 801147e:	f04f 0a00 	mov.w	sl, #0
 8011482:	9307      	str	r3, [sp, #28]
 8011484:	ab70      	add	r3, sp, #448	; 0x1c0
 8011486:	f04f 0b00 	mov.w	fp, #0
 801148a:	f04f 0800 	mov.w	r8, #0
 801148e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011492:	1ba7      	subs	r7, r4, r6
 8011494:	e0db      	b.n	801164e <__kernel_rem_pio2+0x49a>
 8011496:	2302      	movs	r3, #2
 8011498:	9300      	str	r3, [sp, #0]
 801149a:	e757      	b.n	801134c <__kernel_rem_pio2+0x198>
 801149c:	080601b8 	.word	0x080601b8
 80114a0:	40200000 	.word	0x40200000
 80114a4:	3ff00000 	.word	0x3ff00000
 80114a8:	3e700000 	.word	0x3e700000
 80114ac:	41700000 	.word	0x41700000
 80114b0:	3fe00000 	.word	0x3fe00000
 80114b4:	08060178 	.word	0x08060178
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	b944      	cbnz	r4, 80114ce <__kernel_rem_pio2+0x31a>
 80114bc:	b11b      	cbz	r3, 80114c6 <__kernel_rem_pio2+0x312>
 80114be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80114c2:	603b      	str	r3, [r7, #0]
 80114c4:	2301      	movs	r3, #1
 80114c6:	461c      	mov	r4, r3
 80114c8:	3201      	adds	r2, #1
 80114ca:	3704      	adds	r7, #4
 80114cc:	e745      	b.n	801135a <__kernel_rem_pio2+0x1a6>
 80114ce:	1acb      	subs	r3, r1, r3
 80114d0:	603b      	str	r3, [r7, #0]
 80114d2:	4623      	mov	r3, r4
 80114d4:	e7f7      	b.n	80114c6 <__kernel_rem_pio2+0x312>
 80114d6:	1e72      	subs	r2, r6, #1
 80114d8:	ab0c      	add	r3, sp, #48	; 0x30
 80114da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80114e2:	a90c      	add	r1, sp, #48	; 0x30
 80114e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80114e8:	e745      	b.n	8011376 <__kernel_rem_pio2+0x1c2>
 80114ea:	1e72      	subs	r2, r6, #1
 80114ec:	ab0c      	add	r3, sp, #48	; 0x30
 80114ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80114f6:	e7f4      	b.n	80114e2 <__kernel_rem_pio2+0x32e>
 80114f8:	a90c      	add	r1, sp, #48	; 0x30
 80114fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80114fe:	3b01      	subs	r3, #1
 8011500:	430a      	orrs	r2, r1
 8011502:	e796      	b.n	8011432 <__kernel_rem_pio2+0x27e>
 8011504:	3401      	adds	r4, #1
 8011506:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801150a:	2a00      	cmp	r2, #0
 801150c:	d0fa      	beq.n	8011504 <__kernel_rem_pio2+0x350>
 801150e:	9b08      	ldr	r3, [sp, #32]
 8011510:	f106 0801 	add.w	r8, r6, #1
 8011514:	18f5      	adds	r5, r6, r3
 8011516:	ab20      	add	r3, sp, #128	; 0x80
 8011518:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801151c:	4434      	add	r4, r6
 801151e:	4544      	cmp	r4, r8
 8011520:	da04      	bge.n	801152c <__kernel_rem_pio2+0x378>
 8011522:	4626      	mov	r6, r4
 8011524:	e6bf      	b.n	80112a6 <__kernel_rem_pio2+0xf2>
 8011526:	2401      	movs	r4, #1
 8011528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801152a:	e7ec      	b.n	8011506 <__kernel_rem_pio2+0x352>
 801152c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801152e:	f04f 0900 	mov.w	r9, #0
 8011532:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011536:	f7ee ffd1 	bl	80004dc <__aeabi_i2d>
 801153a:	2600      	movs	r6, #0
 801153c:	2700      	movs	r7, #0
 801153e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011540:	e9c5 0100 	strd	r0, r1, [r5]
 8011544:	3b08      	subs	r3, #8
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	9504      	str	r5, [sp, #16]
 801154a:	9b07      	ldr	r3, [sp, #28]
 801154c:	4599      	cmp	r9, r3
 801154e:	dd05      	ble.n	801155c <__kernel_rem_pio2+0x3a8>
 8011550:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8011554:	f108 0801 	add.w	r8, r8, #1
 8011558:	3508      	adds	r5, #8
 801155a:	e7e0      	b.n	801151e <__kernel_rem_pio2+0x36a>
 801155c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8011560:	9900      	ldr	r1, [sp, #0]
 8011562:	f109 0901 	add.w	r9, r9, #1
 8011566:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 801156a:	9100      	str	r1, [sp, #0]
 801156c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8011570:	f8cd c010 	str.w	ip, [sp, #16]
 8011574:	f7ef f81c 	bl	80005b0 <__aeabi_dmul>
 8011578:	4602      	mov	r2, r0
 801157a:	460b      	mov	r3, r1
 801157c:	4630      	mov	r0, r6
 801157e:	4639      	mov	r1, r7
 8011580:	f7ee fe60 	bl	8000244 <__adddf3>
 8011584:	4606      	mov	r6, r0
 8011586:	460f      	mov	r7, r1
 8011588:	e7df      	b.n	801154a <__kernel_rem_pio2+0x396>
 801158a:	3c01      	subs	r4, #1
 801158c:	e756      	b.n	801143c <__kernel_rem_pio2+0x288>
 801158e:	f1cb 0200 	rsb	r2, fp, #0
 8011592:	4640      	mov	r0, r8
 8011594:	4649      	mov	r1, r9
 8011596:	f000 fa8b 	bl	8011ab0 <scalbn>
 801159a:	2200      	movs	r2, #0
 801159c:	4ba4      	ldr	r3, [pc, #656]	; (8011830 <__kernel_rem_pio2+0x67c>)
 801159e:	4604      	mov	r4, r0
 80115a0:	460d      	mov	r5, r1
 80115a2:	f7ef fa8b 	bl	8000abc <__aeabi_dcmpge>
 80115a6:	b1f8      	cbz	r0, 80115e8 <__kernel_rem_pio2+0x434>
 80115a8:	2200      	movs	r2, #0
 80115aa:	4ba2      	ldr	r3, [pc, #648]	; (8011834 <__kernel_rem_pio2+0x680>)
 80115ac:	4620      	mov	r0, r4
 80115ae:	4629      	mov	r1, r5
 80115b0:	f7ee fffe 	bl	80005b0 <__aeabi_dmul>
 80115b4:	f7ef faac 	bl	8000b10 <__aeabi_d2iz>
 80115b8:	4607      	mov	r7, r0
 80115ba:	f7ee ff8f 	bl	80004dc <__aeabi_i2d>
 80115be:	2200      	movs	r2, #0
 80115c0:	4b9b      	ldr	r3, [pc, #620]	; (8011830 <__kernel_rem_pio2+0x67c>)
 80115c2:	f7ee fff5 	bl	80005b0 <__aeabi_dmul>
 80115c6:	460b      	mov	r3, r1
 80115c8:	4602      	mov	r2, r0
 80115ca:	4629      	mov	r1, r5
 80115cc:	4620      	mov	r0, r4
 80115ce:	f7ee fe37 	bl	8000240 <__aeabi_dsub>
 80115d2:	f7ef fa9d 	bl	8000b10 <__aeabi_d2iz>
 80115d6:	1c74      	adds	r4, r6, #1
 80115d8:	ab0c      	add	r3, sp, #48	; 0x30
 80115da:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80115de:	f10b 0b18 	add.w	fp, fp, #24
 80115e2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80115e6:	e731      	b.n	801144c <__kernel_rem_pio2+0x298>
 80115e8:	4620      	mov	r0, r4
 80115ea:	4629      	mov	r1, r5
 80115ec:	f7ef fa90 	bl	8000b10 <__aeabi_d2iz>
 80115f0:	ab0c      	add	r3, sp, #48	; 0x30
 80115f2:	4634      	mov	r4, r6
 80115f4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80115f8:	e728      	b.n	801144c <__kernel_rem_pio2+0x298>
 80115fa:	ab0c      	add	r3, sp, #48	; 0x30
 80115fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011600:	f7ee ff6c 	bl	80004dc <__aeabi_i2d>
 8011604:	4632      	mov	r2, r6
 8011606:	463b      	mov	r3, r7
 8011608:	f7ee ffd2 	bl	80005b0 <__aeabi_dmul>
 801160c:	4642      	mov	r2, r8
 801160e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8011612:	464b      	mov	r3, r9
 8011614:	4630      	mov	r0, r6
 8011616:	4639      	mov	r1, r7
 8011618:	f7ee ffca 	bl	80005b0 <__aeabi_dmul>
 801161c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011620:	4606      	mov	r6, r0
 8011622:	460f      	mov	r7, r1
 8011624:	e722      	b.n	801146c <__kernel_rem_pio2+0x2b8>
 8011626:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801162a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801162e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8011632:	f8cd c01c 	str.w	ip, [sp, #28]
 8011636:	f7ee ffbb 	bl	80005b0 <__aeabi_dmul>
 801163a:	4602      	mov	r2, r0
 801163c:	460b      	mov	r3, r1
 801163e:	4650      	mov	r0, sl
 8011640:	4659      	mov	r1, fp
 8011642:	f7ee fdff 	bl	8000244 <__adddf3>
 8011646:	4682      	mov	sl, r0
 8011648:	468b      	mov	fp, r1
 801164a:	f108 0801 	add.w	r8, r8, #1
 801164e:	9b02      	ldr	r3, [sp, #8]
 8011650:	4598      	cmp	r8, r3
 8011652:	dc01      	bgt.n	8011658 <__kernel_rem_pio2+0x4a4>
 8011654:	45b8      	cmp	r8, r7
 8011656:	dde6      	ble.n	8011626 <__kernel_rem_pio2+0x472>
 8011658:	ab48      	add	r3, sp, #288	; 0x120
 801165a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801165e:	e9c7 ab00 	strd	sl, fp, [r7]
 8011662:	3e01      	subs	r6, #1
 8011664:	e707      	b.n	8011476 <__kernel_rem_pio2+0x2c2>
 8011666:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8011668:	2b02      	cmp	r3, #2
 801166a:	dc09      	bgt.n	8011680 <__kernel_rem_pio2+0x4cc>
 801166c:	2b00      	cmp	r3, #0
 801166e:	dc32      	bgt.n	80116d6 <__kernel_rem_pio2+0x522>
 8011670:	d05a      	beq.n	8011728 <__kernel_rem_pio2+0x574>
 8011672:	9b04      	ldr	r3, [sp, #16]
 8011674:	f003 0007 	and.w	r0, r3, #7
 8011678:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801167c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011680:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8011682:	2b03      	cmp	r3, #3
 8011684:	d1f5      	bne.n	8011672 <__kernel_rem_pio2+0x4be>
 8011686:	ab48      	add	r3, sp, #288	; 0x120
 8011688:	441d      	add	r5, r3
 801168a:	46aa      	mov	sl, r5
 801168c:	46a3      	mov	fp, r4
 801168e:	f1bb 0f00 	cmp.w	fp, #0
 8011692:	dc76      	bgt.n	8011782 <__kernel_rem_pio2+0x5ce>
 8011694:	46aa      	mov	sl, r5
 8011696:	46a3      	mov	fp, r4
 8011698:	f1bb 0f01 	cmp.w	fp, #1
 801169c:	f300 8090 	bgt.w	80117c0 <__kernel_rem_pio2+0x60c>
 80116a0:	2700      	movs	r7, #0
 80116a2:	463e      	mov	r6, r7
 80116a4:	2c01      	cmp	r4, #1
 80116a6:	f300 80aa 	bgt.w	80117fe <__kernel_rem_pio2+0x64a>
 80116aa:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80116ae:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80116b2:	9b00      	ldr	r3, [sp, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f040 80ac 	bne.w	8011812 <__kernel_rem_pio2+0x65e>
 80116ba:	4603      	mov	r3, r0
 80116bc:	462a      	mov	r2, r5
 80116be:	9806      	ldr	r0, [sp, #24]
 80116c0:	e9c0 2300 	strd	r2, r3, [r0]
 80116c4:	4622      	mov	r2, r4
 80116c6:	460b      	mov	r3, r1
 80116c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80116cc:	463a      	mov	r2, r7
 80116ce:	4633      	mov	r3, r6
 80116d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80116d4:	e7cd      	b.n	8011672 <__kernel_rem_pio2+0x4be>
 80116d6:	2000      	movs	r0, #0
 80116d8:	46a0      	mov	r8, r4
 80116da:	4601      	mov	r1, r0
 80116dc:	ab48      	add	r3, sp, #288	; 0x120
 80116de:	441d      	add	r5, r3
 80116e0:	f1b8 0f00 	cmp.w	r8, #0
 80116e4:	da3a      	bge.n	801175c <__kernel_rem_pio2+0x5a8>
 80116e6:	9b00      	ldr	r3, [sp, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d03e      	beq.n	801176a <__kernel_rem_pio2+0x5b6>
 80116ec:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80116f0:	4602      	mov	r2, r0
 80116f2:	462b      	mov	r3, r5
 80116f4:	9d06      	ldr	r5, [sp, #24]
 80116f6:	2601      	movs	r6, #1
 80116f8:	e9c5 2300 	strd	r2, r3, [r5]
 80116fc:	460b      	mov	r3, r1
 80116fe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011702:	f7ee fd9d 	bl	8000240 <__aeabi_dsub>
 8011706:	4684      	mov	ip, r0
 8011708:	460f      	mov	r7, r1
 801170a:	ad48      	add	r5, sp, #288	; 0x120
 801170c:	42b4      	cmp	r4, r6
 801170e:	f105 0508 	add.w	r5, r5, #8
 8011712:	da2c      	bge.n	801176e <__kernel_rem_pio2+0x5ba>
 8011714:	9b00      	ldr	r3, [sp, #0]
 8011716:	b10b      	cbz	r3, 801171c <__kernel_rem_pio2+0x568>
 8011718:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801171c:	4662      	mov	r2, ip
 801171e:	463b      	mov	r3, r7
 8011720:	9906      	ldr	r1, [sp, #24]
 8011722:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8011726:	e7a4      	b.n	8011672 <__kernel_rem_pio2+0x4be>
 8011728:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 801172a:	ab48      	add	r3, sp, #288	; 0x120
 801172c:	4637      	mov	r7, r6
 801172e:	441d      	add	r5, r3
 8011730:	2c00      	cmp	r4, #0
 8011732:	da09      	bge.n	8011748 <__kernel_rem_pio2+0x594>
 8011734:	9b00      	ldr	r3, [sp, #0]
 8011736:	b10b      	cbz	r3, 801173c <__kernel_rem_pio2+0x588>
 8011738:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801173c:	4632      	mov	r2, r6
 801173e:	463b      	mov	r3, r7
 8011740:	9906      	ldr	r1, [sp, #24]
 8011742:	e9c1 2300 	strd	r2, r3, [r1]
 8011746:	e794      	b.n	8011672 <__kernel_rem_pio2+0x4be>
 8011748:	4630      	mov	r0, r6
 801174a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 801174e:	4639      	mov	r1, r7
 8011750:	f7ee fd78 	bl	8000244 <__adddf3>
 8011754:	3c01      	subs	r4, #1
 8011756:	4606      	mov	r6, r0
 8011758:	460f      	mov	r7, r1
 801175a:	e7e9      	b.n	8011730 <__kernel_rem_pio2+0x57c>
 801175c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8011760:	f7ee fd70 	bl	8000244 <__adddf3>
 8011764:	f108 38ff 	add.w	r8, r8, #4294967295
 8011768:	e7ba      	b.n	80116e0 <__kernel_rem_pio2+0x52c>
 801176a:	460d      	mov	r5, r1
 801176c:	e7c0      	b.n	80116f0 <__kernel_rem_pio2+0x53c>
 801176e:	4660      	mov	r0, ip
 8011770:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011774:	4639      	mov	r1, r7
 8011776:	f7ee fd65 	bl	8000244 <__adddf3>
 801177a:	3601      	adds	r6, #1
 801177c:	4684      	mov	ip, r0
 801177e:	460f      	mov	r7, r1
 8011780:	e7c4      	b.n	801170c <__kernel_rem_pio2+0x558>
 8011782:	e9da 6700 	ldrd	r6, r7, [sl]
 8011786:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 801178a:	4632      	mov	r2, r6
 801178c:	463b      	mov	r3, r7
 801178e:	4640      	mov	r0, r8
 8011790:	4649      	mov	r1, r9
 8011792:	f7ee fd57 	bl	8000244 <__adddf3>
 8011796:	4602      	mov	r2, r0
 8011798:	460b      	mov	r3, r1
 801179a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801179e:	4640      	mov	r0, r8
 80117a0:	4649      	mov	r1, r9
 80117a2:	f7ee fd4d 	bl	8000240 <__aeabi_dsub>
 80117a6:	4632      	mov	r2, r6
 80117a8:	463b      	mov	r3, r7
 80117aa:	f7ee fd4b 	bl	8000244 <__adddf3>
 80117ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117b2:	e86a 0102 	strd	r0, r1, [sl], #-8
 80117b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80117ba:	e9ca 2300 	strd	r2, r3, [sl]
 80117be:	e766      	b.n	801168e <__kernel_rem_pio2+0x4da>
 80117c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80117c4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80117c8:	4642      	mov	r2, r8
 80117ca:	464b      	mov	r3, r9
 80117cc:	4630      	mov	r0, r6
 80117ce:	4639      	mov	r1, r7
 80117d0:	f7ee fd38 	bl	8000244 <__adddf3>
 80117d4:	4602      	mov	r2, r0
 80117d6:	460b      	mov	r3, r1
 80117d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117dc:	4630      	mov	r0, r6
 80117de:	4639      	mov	r1, r7
 80117e0:	f7ee fd2e 	bl	8000240 <__aeabi_dsub>
 80117e4:	4642      	mov	r2, r8
 80117e6:	464b      	mov	r3, r9
 80117e8:	f7ee fd2c 	bl	8000244 <__adddf3>
 80117ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117f0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80117f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80117f8:	e9ca 2300 	strd	r2, r3, [sl]
 80117fc:	e74c      	b.n	8011698 <__kernel_rem_pio2+0x4e4>
 80117fe:	4638      	mov	r0, r7
 8011800:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8011804:	4631      	mov	r1, r6
 8011806:	f7ee fd1d 	bl	8000244 <__adddf3>
 801180a:	3c01      	subs	r4, #1
 801180c:	4607      	mov	r7, r0
 801180e:	460e      	mov	r6, r1
 8011810:	e748      	b.n	80116a4 <__kernel_rem_pio2+0x4f0>
 8011812:	9b06      	ldr	r3, [sp, #24]
 8011814:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8011818:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801181c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8011820:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8011824:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8011828:	601d      	str	r5, [r3, #0]
 801182a:	615e      	str	r6, [r3, #20]
 801182c:	e721      	b.n	8011672 <__kernel_rem_pio2+0x4be>
 801182e:	bf00      	nop
 8011830:	41700000 	.word	0x41700000
 8011834:	3e700000 	.word	0x3e700000

08011838 <__kernel_sin>:
 8011838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801183c:	b086      	sub	sp, #24
 801183e:	e9cd 2300 	strd	r2, r3, [sp]
 8011842:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011846:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801184a:	4682      	mov	sl, r0
 801184c:	460c      	mov	r4, r1
 801184e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011850:	da03      	bge.n	801185a <__kernel_sin+0x22>
 8011852:	f7ef f95d 	bl	8000b10 <__aeabi_d2iz>
 8011856:	2800      	cmp	r0, #0
 8011858:	d050      	beq.n	80118fc <__kernel_sin+0xc4>
 801185a:	4652      	mov	r2, sl
 801185c:	4623      	mov	r3, r4
 801185e:	4650      	mov	r0, sl
 8011860:	4621      	mov	r1, r4
 8011862:	f7ee fea5 	bl	80005b0 <__aeabi_dmul>
 8011866:	4606      	mov	r6, r0
 8011868:	460f      	mov	r7, r1
 801186a:	4602      	mov	r2, r0
 801186c:	460b      	mov	r3, r1
 801186e:	4650      	mov	r0, sl
 8011870:	4621      	mov	r1, r4
 8011872:	f7ee fe9d 	bl	80005b0 <__aeabi_dmul>
 8011876:	a33e      	add	r3, pc, #248	; (adr r3, 8011970 <__kernel_sin+0x138>)
 8011878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187c:	4680      	mov	r8, r0
 801187e:	4689      	mov	r9, r1
 8011880:	4630      	mov	r0, r6
 8011882:	4639      	mov	r1, r7
 8011884:	f7ee fe94 	bl	80005b0 <__aeabi_dmul>
 8011888:	a33b      	add	r3, pc, #236	; (adr r3, 8011978 <__kernel_sin+0x140>)
 801188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188e:	f7ee fcd7 	bl	8000240 <__aeabi_dsub>
 8011892:	4632      	mov	r2, r6
 8011894:	463b      	mov	r3, r7
 8011896:	f7ee fe8b 	bl	80005b0 <__aeabi_dmul>
 801189a:	a339      	add	r3, pc, #228	; (adr r3, 8011980 <__kernel_sin+0x148>)
 801189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a0:	f7ee fcd0 	bl	8000244 <__adddf3>
 80118a4:	4632      	mov	r2, r6
 80118a6:	463b      	mov	r3, r7
 80118a8:	f7ee fe82 	bl	80005b0 <__aeabi_dmul>
 80118ac:	a336      	add	r3, pc, #216	; (adr r3, 8011988 <__kernel_sin+0x150>)
 80118ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b2:	f7ee fcc5 	bl	8000240 <__aeabi_dsub>
 80118b6:	4632      	mov	r2, r6
 80118b8:	463b      	mov	r3, r7
 80118ba:	f7ee fe79 	bl	80005b0 <__aeabi_dmul>
 80118be:	a334      	add	r3, pc, #208	; (adr r3, 8011990 <__kernel_sin+0x158>)
 80118c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c4:	f7ee fcbe 	bl	8000244 <__adddf3>
 80118c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118cc:	b9dd      	cbnz	r5, 8011906 <__kernel_sin+0xce>
 80118ce:	4602      	mov	r2, r0
 80118d0:	460b      	mov	r3, r1
 80118d2:	4630      	mov	r0, r6
 80118d4:	4639      	mov	r1, r7
 80118d6:	f7ee fe6b 	bl	80005b0 <__aeabi_dmul>
 80118da:	a32f      	add	r3, pc, #188	; (adr r3, 8011998 <__kernel_sin+0x160>)
 80118dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e0:	f7ee fcae 	bl	8000240 <__aeabi_dsub>
 80118e4:	4642      	mov	r2, r8
 80118e6:	464b      	mov	r3, r9
 80118e8:	f7ee fe62 	bl	80005b0 <__aeabi_dmul>
 80118ec:	4602      	mov	r2, r0
 80118ee:	460b      	mov	r3, r1
 80118f0:	4650      	mov	r0, sl
 80118f2:	4621      	mov	r1, r4
 80118f4:	f7ee fca6 	bl	8000244 <__adddf3>
 80118f8:	4682      	mov	sl, r0
 80118fa:	460c      	mov	r4, r1
 80118fc:	4650      	mov	r0, sl
 80118fe:	4621      	mov	r1, r4
 8011900:	b006      	add	sp, #24
 8011902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011906:	2200      	movs	r2, #0
 8011908:	e9dd 0100 	ldrd	r0, r1, [sp]
 801190c:	4b24      	ldr	r3, [pc, #144]	; (80119a0 <__kernel_sin+0x168>)
 801190e:	f7ee fe4f 	bl	80005b0 <__aeabi_dmul>
 8011912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801191a:	4640      	mov	r0, r8
 801191c:	4649      	mov	r1, r9
 801191e:	f7ee fe47 	bl	80005b0 <__aeabi_dmul>
 8011922:	4602      	mov	r2, r0
 8011924:	460b      	mov	r3, r1
 8011926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801192a:	f7ee fc89 	bl	8000240 <__aeabi_dsub>
 801192e:	4632      	mov	r2, r6
 8011930:	463b      	mov	r3, r7
 8011932:	f7ee fe3d 	bl	80005b0 <__aeabi_dmul>
 8011936:	e9dd 2300 	ldrd	r2, r3, [sp]
 801193a:	f7ee fc81 	bl	8000240 <__aeabi_dsub>
 801193e:	a316      	add	r3, pc, #88	; (adr r3, 8011998 <__kernel_sin+0x160>)
 8011940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011944:	4606      	mov	r6, r0
 8011946:	460f      	mov	r7, r1
 8011948:	4640      	mov	r0, r8
 801194a:	4649      	mov	r1, r9
 801194c:	f7ee fe30 	bl	80005b0 <__aeabi_dmul>
 8011950:	4602      	mov	r2, r0
 8011952:	460b      	mov	r3, r1
 8011954:	4630      	mov	r0, r6
 8011956:	4639      	mov	r1, r7
 8011958:	f7ee fc74 	bl	8000244 <__adddf3>
 801195c:	4602      	mov	r2, r0
 801195e:	460b      	mov	r3, r1
 8011960:	4650      	mov	r0, sl
 8011962:	4621      	mov	r1, r4
 8011964:	f7ee fc6c 	bl	8000240 <__aeabi_dsub>
 8011968:	e7c6      	b.n	80118f8 <__kernel_sin+0xc0>
 801196a:	bf00      	nop
 801196c:	f3af 8000 	nop.w
 8011970:	5acfd57c 	.word	0x5acfd57c
 8011974:	3de5d93a 	.word	0x3de5d93a
 8011978:	8a2b9ceb 	.word	0x8a2b9ceb
 801197c:	3e5ae5e6 	.word	0x3e5ae5e6
 8011980:	57b1fe7d 	.word	0x57b1fe7d
 8011984:	3ec71de3 	.word	0x3ec71de3
 8011988:	19c161d5 	.word	0x19c161d5
 801198c:	3f2a01a0 	.word	0x3f2a01a0
 8011990:	1110f8a6 	.word	0x1110f8a6
 8011994:	3f811111 	.word	0x3f811111
 8011998:	55555549 	.word	0x55555549
 801199c:	3fc55555 	.word	0x3fc55555
 80119a0:	3fe00000 	.word	0x3fe00000

080119a4 <fabs>:
 80119a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80119a8:	4770      	bx	lr
 80119aa:	0000      	movs	r0, r0
 80119ac:	0000      	movs	r0, r0
	...

080119b0 <floor>:
 80119b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80119b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80119bc:	2e13      	cmp	r6, #19
 80119be:	4602      	mov	r2, r0
 80119c0:	460b      	mov	r3, r1
 80119c2:	4607      	mov	r7, r0
 80119c4:	460c      	mov	r4, r1
 80119c6:	4605      	mov	r5, r0
 80119c8:	dc33      	bgt.n	8011a32 <floor+0x82>
 80119ca:	2e00      	cmp	r6, #0
 80119cc:	da14      	bge.n	80119f8 <floor+0x48>
 80119ce:	a334      	add	r3, pc, #208	; (adr r3, 8011aa0 <floor+0xf0>)
 80119d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d4:	f7ee fc36 	bl	8000244 <__adddf3>
 80119d8:	2200      	movs	r2, #0
 80119da:	2300      	movs	r3, #0
 80119dc:	f7ef f878 	bl	8000ad0 <__aeabi_dcmpgt>
 80119e0:	b138      	cbz	r0, 80119f2 <floor+0x42>
 80119e2:	2c00      	cmp	r4, #0
 80119e4:	da58      	bge.n	8011a98 <floor+0xe8>
 80119e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80119ea:	431d      	orrs	r5, r3
 80119ec:	d001      	beq.n	80119f2 <floor+0x42>
 80119ee:	2500      	movs	r5, #0
 80119f0:	4c2d      	ldr	r4, [pc, #180]	; (8011aa8 <floor+0xf8>)
 80119f2:	4623      	mov	r3, r4
 80119f4:	462f      	mov	r7, r5
 80119f6:	e025      	b.n	8011a44 <floor+0x94>
 80119f8:	4a2c      	ldr	r2, [pc, #176]	; (8011aac <floor+0xfc>)
 80119fa:	fa42 f806 	asr.w	r8, r2, r6
 80119fe:	ea01 0208 	and.w	r2, r1, r8
 8011a02:	4302      	orrs	r2, r0
 8011a04:	d01e      	beq.n	8011a44 <floor+0x94>
 8011a06:	a326      	add	r3, pc, #152	; (adr r3, 8011aa0 <floor+0xf0>)
 8011a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0c:	f7ee fc1a 	bl	8000244 <__adddf3>
 8011a10:	2200      	movs	r2, #0
 8011a12:	2300      	movs	r3, #0
 8011a14:	f7ef f85c 	bl	8000ad0 <__aeabi_dcmpgt>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	d0ea      	beq.n	80119f2 <floor+0x42>
 8011a1c:	2c00      	cmp	r4, #0
 8011a1e:	bfbe      	ittt	lt
 8011a20:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011a24:	fa43 f606 	asrlt.w	r6, r3, r6
 8011a28:	19a4      	addlt	r4, r4, r6
 8011a2a:	2500      	movs	r5, #0
 8011a2c:	ea24 0408 	bic.w	r4, r4, r8
 8011a30:	e7df      	b.n	80119f2 <floor+0x42>
 8011a32:	2e33      	cmp	r6, #51	; 0x33
 8011a34:	dd0a      	ble.n	8011a4c <floor+0x9c>
 8011a36:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011a3a:	d103      	bne.n	8011a44 <floor+0x94>
 8011a3c:	f7ee fc02 	bl	8000244 <__adddf3>
 8011a40:	4607      	mov	r7, r0
 8011a42:	460b      	mov	r3, r1
 8011a44:	4638      	mov	r0, r7
 8011a46:	4619      	mov	r1, r3
 8011a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a50:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8011a54:	fa22 f808 	lsr.w	r8, r2, r8
 8011a58:	ea18 0f00 	tst.w	r8, r0
 8011a5c:	d0f2      	beq.n	8011a44 <floor+0x94>
 8011a5e:	a310      	add	r3, pc, #64	; (adr r3, 8011aa0 <floor+0xf0>)
 8011a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a64:	f7ee fbee 	bl	8000244 <__adddf3>
 8011a68:	2200      	movs	r2, #0
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	f7ef f830 	bl	8000ad0 <__aeabi_dcmpgt>
 8011a70:	2800      	cmp	r0, #0
 8011a72:	d0be      	beq.n	80119f2 <floor+0x42>
 8011a74:	2c00      	cmp	r4, #0
 8011a76:	da02      	bge.n	8011a7e <floor+0xce>
 8011a78:	2e14      	cmp	r6, #20
 8011a7a:	d103      	bne.n	8011a84 <floor+0xd4>
 8011a7c:	3401      	adds	r4, #1
 8011a7e:	ea25 0508 	bic.w	r5, r5, r8
 8011a82:	e7b6      	b.n	80119f2 <floor+0x42>
 8011a84:	2301      	movs	r3, #1
 8011a86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011a8a:	fa03 f606 	lsl.w	r6, r3, r6
 8011a8e:	4435      	add	r5, r6
 8011a90:	42bd      	cmp	r5, r7
 8011a92:	bf38      	it	cc
 8011a94:	18e4      	addcc	r4, r4, r3
 8011a96:	e7f2      	b.n	8011a7e <floor+0xce>
 8011a98:	2500      	movs	r5, #0
 8011a9a:	462c      	mov	r4, r5
 8011a9c:	e7a9      	b.n	80119f2 <floor+0x42>
 8011a9e:	bf00      	nop
 8011aa0:	8800759c 	.word	0x8800759c
 8011aa4:	7e37e43c 	.word	0x7e37e43c
 8011aa8:	bff00000 	.word	0xbff00000
 8011aac:	000fffff 	.word	0x000fffff

08011ab0 <scalbn>:
 8011ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ab2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	460d      	mov	r5, r1
 8011aba:	4617      	mov	r7, r2
 8011abc:	460b      	mov	r3, r1
 8011abe:	b996      	cbnz	r6, 8011ae6 <scalbn+0x36>
 8011ac0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ac4:	4303      	orrs	r3, r0
 8011ac6:	d039      	beq.n	8011b3c <scalbn+0x8c>
 8011ac8:	4b33      	ldr	r3, [pc, #204]	; (8011b98 <scalbn+0xe8>)
 8011aca:	2200      	movs	r2, #0
 8011acc:	f7ee fd70 	bl	80005b0 <__aeabi_dmul>
 8011ad0:	4b32      	ldr	r3, [pc, #200]	; (8011b9c <scalbn+0xec>)
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	429f      	cmp	r7, r3
 8011ad6:	460d      	mov	r5, r1
 8011ad8:	da0f      	bge.n	8011afa <scalbn+0x4a>
 8011ada:	a32b      	add	r3, pc, #172	; (adr r3, 8011b88 <scalbn+0xd8>)
 8011adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae0:	f7ee fd66 	bl	80005b0 <__aeabi_dmul>
 8011ae4:	e006      	b.n	8011af4 <scalbn+0x44>
 8011ae6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011aea:	4296      	cmp	r6, r2
 8011aec:	d10a      	bne.n	8011b04 <scalbn+0x54>
 8011aee:	4602      	mov	r2, r0
 8011af0:	f7ee fba8 	bl	8000244 <__adddf3>
 8011af4:	4604      	mov	r4, r0
 8011af6:	460d      	mov	r5, r1
 8011af8:	e020      	b.n	8011b3c <scalbn+0x8c>
 8011afa:	460b      	mov	r3, r1
 8011afc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011b00:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8011b04:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8011b08:	19b9      	adds	r1, r7, r6
 8011b0a:	4291      	cmp	r1, r2
 8011b0c:	dd0e      	ble.n	8011b2c <scalbn+0x7c>
 8011b0e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8011b12:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8011b16:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8011b1a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8011b1e:	4820      	ldr	r0, [pc, #128]	; (8011ba0 <scalbn+0xf0>)
 8011b20:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8011b24:	a31a      	add	r3, pc, #104	; (adr r3, 8011b90 <scalbn+0xe0>)
 8011b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2a:	e7d9      	b.n	8011ae0 <scalbn+0x30>
 8011b2c:	2900      	cmp	r1, #0
 8011b2e:	dd08      	ble.n	8011b42 <scalbn+0x92>
 8011b30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011b34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011b38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	4629      	mov	r1, r5
 8011b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b42:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8011b46:	da12      	bge.n	8011b6e <scalbn+0xbe>
 8011b48:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011b4c:	429f      	cmp	r7, r3
 8011b4e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8011b52:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8011b56:	dcdc      	bgt.n	8011b12 <scalbn+0x62>
 8011b58:	a30b      	add	r3, pc, #44	; (adr r3, 8011b88 <scalbn+0xd8>)
 8011b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8011b62:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8011b66:	480f      	ldr	r0, [pc, #60]	; (8011ba4 <scalbn+0xf4>)
 8011b68:	f041 011f 	orr.w	r1, r1, #31
 8011b6c:	e7b8      	b.n	8011ae0 <scalbn+0x30>
 8011b6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011b72:	3136      	adds	r1, #54	; 0x36
 8011b74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011b78:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	4629      	mov	r1, r5
 8011b80:	2200      	movs	r2, #0
 8011b82:	4b09      	ldr	r3, [pc, #36]	; (8011ba8 <scalbn+0xf8>)
 8011b84:	e7ac      	b.n	8011ae0 <scalbn+0x30>
 8011b86:	bf00      	nop
 8011b88:	c2f8f359 	.word	0xc2f8f359
 8011b8c:	01a56e1f 	.word	0x01a56e1f
 8011b90:	8800759c 	.word	0x8800759c
 8011b94:	7e37e43c 	.word	0x7e37e43c
 8011b98:	43500000 	.word	0x43500000
 8011b9c:	ffff3cb0 	.word	0xffff3cb0
 8011ba0:	8800759c 	.word	0x8800759c
 8011ba4:	c2f8f359 	.word	0xc2f8f359
 8011ba8:	3c900000 	.word	0x3c900000

08011bac <_init>:
 8011bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bae:	bf00      	nop
 8011bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bb2:	bc08      	pop	{r3}
 8011bb4:	469e      	mov	lr, r3
 8011bb6:	4770      	bx	lr

08011bb8 <_fini>:
 8011bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bba:	bf00      	nop
 8011bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bbe:	bc08      	pop	{r3}
 8011bc0:	469e      	mov	lr, r3
 8011bc2:	4770      	bx	lr
