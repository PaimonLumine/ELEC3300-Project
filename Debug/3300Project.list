
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f9c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c04  08009188  08009188  00019188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d8c  08009d8c  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  08009d8c  08009d8c  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d8c  08009d8c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08009d94  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000214  08009fa8  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08009fa8  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f6a  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ea  00000000  00000000  0002a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002c898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e5b  00000000  00000000  0002dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc9e  00000000  00000000  00046a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b4b1  00000000  00000000  000546c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfb7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  000cfbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000214 	.word	0x20000214
 8000204:	00000000 	.word	0x00000000
 8000208:	0800916c 	.word	0x0800916c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000218 	.word	0x20000218
 8000224:	0800916c 	.word	0x0800916c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <Check_touchkey>:
#include "UI.h"

uint8_t Check_touchkey(const int* constraints ,strType_XPT2046_Coordinate *pDisplayCoordinate) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	uint8_t match = (constraints[0]<= pDisplayCoordinate->x && constraints[1]>= pDisplayCoordinate->x
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	8812      	ldrh	r2, [r2, #0]
			 && constraints[2]<= pDisplayCoordinate->y && constraints[3]>= pDisplayCoordinate->y);
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	dc16      	bgt.n	8000cf4 <Check_touchkey+0x44>
	uint8_t match = (constraints[0]<= pDisplayCoordinate->x && constraints[1]>= pDisplayCoordinate->x
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	8812      	ldrh	r2, [r2, #0]
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	db0f      	blt.n	8000cf4 <Check_touchkey+0x44>
			 && constraints[2]<= pDisplayCoordinate->y && constraints[3]>= pDisplayCoordinate->y);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	8852      	ldrh	r2, [r2, #2]
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	dc08      	bgt.n	8000cf4 <Check_touchkey+0x44>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	8852      	ldrh	r2, [r2, #2]
 8000cec:	4293      	cmp	r3, r2
 8000cee:	db01      	blt.n	8000cf4 <Check_touchkey+0x44>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <Check_touchkey+0x46>
 8000cf4:	2300      	movs	r3, #0
	uint8_t match = (constraints[0]<= pDisplayCoordinate->x && constraints[1]>= pDisplayCoordinate->x
 8000cf6:	73fb      	strb	r3, [r7, #15]
	 return match;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <Render>:

void Render(uint8_t* mode_new, uint8_t* render_status){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	//Not Render if done
	if(*render_status==1) return;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d01d      	beq.n	8000d52 <Render+0x4e>

	//Mode 0 = Home, Mode 1 = Drink Water, Mode 2 = Toggle Dark Mode
	switch(*mode_new){
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d00f      	beq.n	8000d3e <Render+0x3a>
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	dc13      	bgt.n	8000d4a <Render+0x46>
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <Render+0x28>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d003      	beq.n	8000d32 <Render+0x2e>
 8000d2a:	e00e      	b.n	8000d4a <Render+0x46>
		case(0):
			UI_Home();
 8000d2c:	f000 f858 	bl	8000de0 <UI_Home>
			break;
 8000d30:	e00b      	b.n	8000d4a <Render+0x46>
		case(1):
			UI_Drink_Water();
 8000d32:	f000 f813 	bl	8000d5c <UI_Drink_Water>
			*mode_new = 0;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
			break;
 8000d3c:	e005      	b.n	8000d4a <Render+0x46>
		case(2):
			LCD_Darkmode_Toggle();
 8000d3e:	f000 fd51 	bl	80017e4 <LCD_Darkmode_Toggle>
			*mode_new = 0;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
			break;
 8000d48:	bf00      	nop
	}
	*render_status = 1;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	e000      	b.n	8000d54 <Render+0x50>
	if(*render_status==1) return;
 8000d52:	bf00      	nop
}
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <UI_Drink_Water>:

void UI_Drink_Water(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8000d60:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d64:	22f0      	movs	r2, #240	; 0xf0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 fb05 	bl	8001378 <LCD_Clear>

	LCD_DrawString(10, 150, "Drinked a glass of water");
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <UI_Drink_Water+0x74>)
 8000d70:	2196      	movs	r1, #150	; 0x96
 8000d72:	200a      	movs	r0, #10
 8000d74:	f000 fbae 	bl	80014d4 <LCD_DrawString>
	LCD_DrawString(10, 250, "Return to home in 2s");
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <UI_Drink_Water+0x78>)
 8000d7a:	21fa      	movs	r1, #250	; 0xfa
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f000 fba9 	bl	80014d4 <LCD_DrawString>
	HAL_Delay(1000);
 8000d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d86:	f002 fa49 	bl	800321c <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 8000d8a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d8e:	22f0      	movs	r2, #240	; 0xf0
 8000d90:	21fa      	movs	r1, #250	; 0xfa
 8000d92:	200a      	movs	r0, #10
 8000d94:	f000 faf0 	bl	8001378 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 1s");
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <UI_Drink_Water+0x7c>)
 8000d9a:	21fa      	movs	r1, #250	; 0xfa
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f000 fb99 	bl	80014d4 <LCD_DrawString>
	HAL_Delay(1000);
 8000da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da6:	f002 fa39 	bl	800321c <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 8000daa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dae:	22f0      	movs	r2, #240	; 0xf0
 8000db0:	21fa      	movs	r1, #250	; 0xfa
 8000db2:	200a      	movs	r0, #10
 8000db4:	f000 fae0 	bl	8001378 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 0s");
 8000db8:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <UI_Drink_Water+0x80>)
 8000dba:	21fa      	movs	r1, #250	; 0xfa
 8000dbc:	200a      	movs	r0, #10
 8000dbe:	f000 fb89 	bl	80014d4 <LCD_DrawString>
	HAL_Delay(1000);
 8000dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc6:	f002 fa29 	bl	800321c <HAL_Delay>

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	08009188 	.word	0x08009188
 8000dd4:	080091a4 	.word	0x080091a4
 8000dd8:	080091bc 	.word	0x080091bc
 8000ddc:	080091d4 	.word	0x080091d4

08000de0 <UI_Home>:

void UI_Home(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	LCD_Clear ( 0, 0, 240, 320);
 8000de4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000de8:	22f0      	movs	r2, #240	; 0xf0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 fac3 	bl	8001378 <LCD_Clear>
	LCD_DrawString(2, 10, "Config");
 8000df2:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <UI_Home+0x78>)
 8000df4:	210a      	movs	r1, #10
 8000df6:	2002      	movs	r0, #2
 8000df8:	f000 fb6c 	bl	80014d4 <LCD_DrawString>
	LCD_DrawString(200, 10, "Stats");
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <UI_Home+0x7c>)
 8000dfe:	210a      	movs	r1, #10
 8000e00:	20c8      	movs	r0, #200	; 0xc8
 8000e02:	f000 fb67 	bl	80014d4 <LCD_DrawString>
	LCD_DrawString(40, 220, "Set");
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <UI_Home+0x80>)
 8000e08:	21dc      	movs	r1, #220	; 0xdc
 8000e0a:	2028      	movs	r0, #40	; 0x28
 8000e0c:	f000 fb62 	bl	80014d4 <LCD_DrawString>
	LCD_DrawString(40, 240, "Exercise");
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <UI_Home+0x84>)
 8000e12:	21f0      	movs	r1, #240	; 0xf0
 8000e14:	2028      	movs	r0, #40	; 0x28
 8000e16:	f000 fb5d 	bl	80014d4 <LCD_DrawString>
	LCD_DrawString(40, 260, "Timer");
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <UI_Home+0x88>)
 8000e1c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000e20:	2028      	movs	r0, #40	; 0x28
 8000e22:	f000 fb57 	bl	80014d4 <LCD_DrawString>
	LCD_DrawString(140, 220, "Drink");
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <UI_Home+0x8c>)
 8000e28:	21dc      	movs	r1, #220	; 0xdc
 8000e2a:	208c      	movs	r0, #140	; 0x8c
 8000e2c:	f000 fb52 	bl	80014d4 <LCD_DrawString>
	LCD_DrawString(140, 240, "water");
 8000e30:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <UI_Home+0x90>)
 8000e32:	21f0      	movs	r1, #240	; 0xf0
 8000e34:	208c      	movs	r0, #140	; 0x8c
 8000e36:	f000 fb4d 	bl	80014d4 <LCD_DrawString>
	LCD_DrawString(200, 260, "Dark");
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <UI_Home+0x94>)
 8000e3c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000e40:	20c8      	movs	r0, #200	; 0xc8
 8000e42:	f000 fb47 	bl	80014d4 <LCD_DrawString>
	LCD_DrawString(200, 280, "mode");
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <UI_Home+0x98>)
 8000e48:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000e4c:	20c8      	movs	r0, #200	; 0xc8
 8000e4e:	f000 fb41 	bl	80014d4 <LCD_DrawString>

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	080091ec 	.word	0x080091ec
 8000e5c:	080091f4 	.word	0x080091f4
 8000e60:	080091fc 	.word	0x080091fc
 8000e64:	08009200 	.word	0x08009200
 8000e68:	0800920c 	.word	0x0800920c
 8000e6c:	08009214 	.word	0x08009214
 8000e70:	0800921c 	.word	0x0800921c
 8000e74:	08009224 	.word	0x08009224
 8000e78:	0800922c 	.word	0x0800922c

08000e7c <UI_Home_Display_Date>:

void UI_Home_Display_Date(uint16_t year, uint8_t month, uint8_t day){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
 8000e86:	460b      	mov	r3, r1
 8000e88:	717b      	strb	r3, [r7, #5]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	713b      	strb	r3, [r7, #4]
	char str[10];

	//Draw Year
	sprintf(str, "%04i", year);
 8000e8e:	88fa      	ldrh	r2, [r7, #6]
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4915      	ldr	r1, [pc, #84]	; (8000eec <UI_Home_Display_Date+0x70>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 fbaa 	bl	80055f0 <siprintf>
	LCD_DrawString(86, 10, str);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	210a      	movs	r1, #10
 8000ea4:	2056      	movs	r0, #86	; 0x56
 8000ea6:	f000 fb15 	bl	80014d4 <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", month);
 8000eaa:	797a      	ldrb	r2, [r7, #5]
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	490f      	ldr	r1, [pc, #60]	; (8000ef0 <UI_Home_Display_Date+0x74>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 fb9c 	bl	80055f0 <siprintf>
	LCD_DrawString(125, 10, str);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	210a      	movs	r1, #10
 8000ec0:	207d      	movs	r0, #125	; 0x7d
 8000ec2:	f000 fb07 	bl	80014d4 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", day);
 8000ec6:	793a      	ldrb	r2, [r7, #4]
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <UI_Home_Display_Date+0x74>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 fb8e 	bl	80055f0 <siprintf>
	LCD_DrawString(145, 10, str);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	461a      	mov	r2, r3
 8000eda:	210a      	movs	r1, #10
 8000edc:	2091      	movs	r0, #145	; 0x91
 8000ede:	f000 faf9 	bl	80014d4 <LCD_DrawString>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	08009234 	.word	0x08009234
 8000ef0:	0800923c 	.word	0x0800923c

08000ef4 <UI_Home_Display_Time>:

void UI_Home_Display_Time(uint8_t hour, uint8_t minute, uint8_t second){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	460b      	mov	r3, r1
 8000f00:	71bb      	strb	r3, [r7, #6]
 8000f02:	4613      	mov	r3, r2
 8000f04:	717b      	strb	r3, [r7, #5]
	char str[10];

	//Draw Year
	sprintf(str, "%02i", hour);
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4915      	ldr	r1, [pc, #84]	; (8000f64 <UI_Home_Display_Time+0x70>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fb6e 	bl	80055f0 <siprintf>
	LCD_DrawString(95, 30, str);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	461a      	mov	r2, r3
 8000f1a:	211e      	movs	r1, #30
 8000f1c:	205f      	movs	r0, #95	; 0x5f
 8000f1e:	f000 fad9 	bl	80014d4 <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", minute);
 8000f22:	79ba      	ldrb	r2, [r7, #6]
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	490e      	ldr	r1, [pc, #56]	; (8000f64 <UI_Home_Display_Time+0x70>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 fb60 	bl	80055f0 <siprintf>
	LCD_DrawString(115, 30, str);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	461a      	mov	r2, r3
 8000f36:	211e      	movs	r1, #30
 8000f38:	2073      	movs	r0, #115	; 0x73
 8000f3a:	f000 facb 	bl	80014d4 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", second);
 8000f3e:	797a      	ldrb	r2, [r7, #5]
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <UI_Home_Display_Time+0x70>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 fb52 	bl	80055f0 <siprintf>
	LCD_DrawString(135, 30, str);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	461a      	mov	r2, r3
 8000f52:	211e      	movs	r1, #30
 8000f54:	2087      	movs	r0, #135	; 0x87
 8000f56:	f000 fabd 	bl	80014d4 <LCD_DrawString>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	0800923c 	.word	0x0800923c

08000f68 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	e002      	b.n	8000f78 <Delay+0x10>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f9      	bne.n	8000f72 <Delay+0xa>
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <LCD_INIT>:
int darkmode_toggle = 0;


void LCD_INIT ( void )
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f000 f826 	bl	8000fe0 <LCD_BackLed_Control>
	LCD_Rst();
 8000f94:	f000 f80c 	bl	8000fb0 <LCD_Rst>
	LCD_REG_Config();
 8000f98:	f000 f85c 	bl	8001054 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 8000f9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fa0:	22f0      	movs	r2, #240	; 0xf0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f9e7 	bl	8001378 <LCD_Clear>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <LCD_Rst+0x28>)
 8000fba:	f002 fc0c 	bl	80037d6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <LCD_Rst+0x2c>)
 8000fc0:	f7ff ffd2 	bl	8000f68 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <LCD_Rst+0x28>)
 8000fca:	f002 fc04 	bl	80037d6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <LCD_Rst+0x2c>)
 8000fd0:	f7ff ffca 	bl	8000f68 <Delay>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40011800 	.word	0x40011800
 8000fdc:	0002bffc 	.word	0x0002bffc

08000fe0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <LCD_BackLed_Control+0x34>)
 8000ff8:	f002 fbed 	bl	80037d6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000ffc:	e005      	b.n	800100a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <LCD_BackLed_Control+0x34>)
 8001006:	f002 fbe6 	bl	80037d6 <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40011400 	.word	0x40011400

08001018 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001022:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	8013      	strh	r3, [r2, #0]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <LCD_Write_Data+0x1c>)
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	8013      	strh	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	60020000 	.word	0x60020000

08001054 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001058:	20cf      	movs	r0, #207	; 0xcf
 800105a:	f7ff ffdd 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff ffe8 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001064:	2081      	movs	r0, #129	; 0x81
 8001066:	f7ff ffe5 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800106a:	2030      	movs	r0, #48	; 0x30
 800106c:	f7ff ffe2 	bl	8001034 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001070:	20ed      	movs	r0, #237	; 0xed
 8001072:	f7ff ffd1 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001076:	2064      	movs	r0, #100	; 0x64
 8001078:	f7ff ffdc 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800107c:	2003      	movs	r0, #3
 800107e:	f7ff ffd9 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001082:	2012      	movs	r0, #18
 8001084:	f7ff ffd6 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001088:	2081      	movs	r0, #129	; 0x81
 800108a:	f7ff ffd3 	bl	8001034 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800108e:	20e8      	movs	r0, #232	; 0xe8
 8001090:	f7ff ffc2 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001094:	2085      	movs	r0, #133	; 0x85
 8001096:	f7ff ffcd 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800109a:	2010      	movs	r0, #16
 800109c:	f7ff ffca 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80010a0:	2078      	movs	r0, #120	; 0x78
 80010a2:	f7ff ffc7 	bl	8001034 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80010a6:	20cb      	movs	r0, #203	; 0xcb
 80010a8:	f7ff ffb6 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80010ac:	2039      	movs	r0, #57	; 0x39
 80010ae:	f7ff ffc1 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80010b2:	202c      	movs	r0, #44	; 0x2c
 80010b4:	f7ff ffbe 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ffbb 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80010be:	2034      	movs	r0, #52	; 0x34
 80010c0:	f7ff ffb8 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff ffb5 	bl	8001034 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80010ca:	20f7      	movs	r0, #247	; 0xf7
 80010cc:	f7ff ffa4 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80010d0:	2020      	movs	r0, #32
 80010d2:	f7ff ffaf 	bl	8001034 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80010d6:	20ea      	movs	r0, #234	; 0xea
 80010d8:	f7ff ff9e 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff ffa9 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ffa6 	bl	8001034 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80010e8:	20b1      	movs	r0, #177	; 0xb1
 80010ea:	f7ff ff95 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ffa0 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80010f4:	201b      	movs	r0, #27
 80010f6:	f7ff ff9d 	bl	8001034 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80010fa:	20b6      	movs	r0, #182	; 0xb6
 80010fc:	f7ff ff8c 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001100:	200a      	movs	r0, #10
 8001102:	f7ff ff97 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001106:	20a2      	movs	r0, #162	; 0xa2
 8001108:	f7ff ff94 	bl	8001034 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800110c:	20c0      	movs	r0, #192	; 0xc0
 800110e:	f7ff ff83 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001112:	2035      	movs	r0, #53	; 0x35
 8001114:	f7ff ff8e 	bl	8001034 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001118:	20c1      	movs	r0, #193	; 0xc1
 800111a:	f7ff ff7d 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800111e:	2011      	movs	r0, #17
 8001120:	f7ff ff88 	bl	8001034 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001124:	20c5      	movs	r0, #197	; 0xc5
 8001126:	f7ff ff77 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800112a:	2045      	movs	r0, #69	; 0x45
 800112c:	f7ff ff82 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001130:	2045      	movs	r0, #69	; 0x45
 8001132:	f7ff ff7f 	bl	8001034 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001136:	20c7      	movs	r0, #199	; 0xc7
 8001138:	f7ff ff6e 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 800113c:	20a2      	movs	r0, #162	; 0xa2
 800113e:	f7ff ff79 	bl	8001034 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001142:	20f2      	movs	r0, #242	; 0xf2
 8001144:	f7ff ff68 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ff73 	bl	8001034 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800114e:	2026      	movs	r0, #38	; 0x26
 8001150:	f7ff ff62 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff ff6d 	bl	8001034 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800115a:	20e0      	movs	r0, #224	; 0xe0
 800115c:	f7ff ff5c 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001160:	200f      	movs	r0, #15
 8001162:	f7ff ff67 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001166:	2026      	movs	r0, #38	; 0x26
 8001168:	f7ff ff64 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 800116c:	2024      	movs	r0, #36	; 0x24
 800116e:	f7ff ff61 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001172:	200b      	movs	r0, #11
 8001174:	f7ff ff5e 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001178:	200e      	movs	r0, #14
 800117a:	f7ff ff5b 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800117e:	2009      	movs	r0, #9
 8001180:	f7ff ff58 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001184:	2054      	movs	r0, #84	; 0x54
 8001186:	f7ff ff55 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800118a:	20a8      	movs	r0, #168	; 0xa8
 800118c:	f7ff ff52 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001190:	2046      	movs	r0, #70	; 0x46
 8001192:	f7ff ff4f 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001196:	200c      	movs	r0, #12
 8001198:	f7ff ff4c 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 800119c:	2017      	movs	r0, #23
 800119e:	f7ff ff49 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80011a2:	2009      	movs	r0, #9
 80011a4:	f7ff ff46 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80011a8:	200f      	movs	r0, #15
 80011aa:	f7ff ff43 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80011ae:	2007      	movs	r0, #7
 80011b0:	f7ff ff40 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff ff3d 	bl	8001034 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80011ba:	20e1      	movs	r0, #225	; 0xe1
 80011bc:	f7ff ff2c 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff ff37 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80011c6:	2019      	movs	r0, #25
 80011c8:	f7ff ff34 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80011cc:	201b      	movs	r0, #27
 80011ce:	f7ff ff31 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80011d2:	2004      	movs	r0, #4
 80011d4:	f7ff ff2e 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80011d8:	2010      	movs	r0, #16
 80011da:	f7ff ff2b 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80011de:	2007      	movs	r0, #7
 80011e0:	f7ff ff28 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80011e4:	202a      	movs	r0, #42	; 0x2a
 80011e6:	f7ff ff25 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80011ea:	2047      	movs	r0, #71	; 0x47
 80011ec:	f7ff ff22 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80011f0:	2039      	movs	r0, #57	; 0x39
 80011f2:	f7ff ff1f 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80011f6:	2003      	movs	r0, #3
 80011f8:	f7ff ff1c 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80011fc:	2006      	movs	r0, #6
 80011fe:	f7ff ff19 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001202:	2006      	movs	r0, #6
 8001204:	f7ff ff16 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001208:	2030      	movs	r0, #48	; 0x30
 800120a:	f7ff ff13 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800120e:	2038      	movs	r0, #56	; 0x38
 8001210:	f7ff ff10 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001214:	200f      	movs	r0, #15
 8001216:	f7ff ff0d 	bl	8001034 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800121a:	2036      	movs	r0, #54	; 0x36
 800121c:	f7ff fefc 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001220:	20c8      	movs	r0, #200	; 0xc8
 8001222:	f7ff ff07 	bl	8001034 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001226:	202a      	movs	r0, #42	; 0x2a
 8001228:	f7ff fef6 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ff01 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fefe 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fefb 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800123e:	20ef      	movs	r0, #239	; 0xef
 8001240:	f7ff fef8 	bl	8001034 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001244:	202b      	movs	r0, #43	; 0x2b
 8001246:	f7ff fee7 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff fef2 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff feef 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff feec 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 800125c:	203f      	movs	r0, #63	; 0x3f
 800125e:	f7ff fee9 	bl	8001034 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001262:	203a      	movs	r0, #58	; 0x3a
 8001264:	f7ff fed8 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001268:	2055      	movs	r0, #85	; 0x55
 800126a:	f7ff fee3 	bl	8001034 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800126e:	2011      	movs	r0, #17
 8001270:	f7ff fed2 	bl	8001018 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <LCD_REG_Config+0x230>)
 8001276:	f7ff fe77 	bl	8000f68 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800127a:	2029      	movs	r0, #41	; 0x29
 800127c:	f7ff fecc 	bl	8001018 <LCD_Write_Cmd>
	
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0002bffc 	.word	0x0002bffc

08001288 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	4603      	mov	r3, r0
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	807b      	strh	r3, [r7, #2]
 80012a2:	4613      	mov	r3, r2
 80012a4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80012a6:	202a      	movs	r0, #42	; 0x2a
 80012a8:	f7ff feb6 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff febe 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff feb8 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	4413      	add	r3, r2
 80012ca:	3b01      	subs	r3, #1
 80012cc:	121b      	asrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff feaf 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4413      	add	r3, r2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	3b01      	subs	r3, #1
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fea4 	bl	8001034 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80012ec:	202b      	movs	r0, #43	; 0x2b
 80012ee:	f7ff fe93 	bl	8001018 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe9b 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe95 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800130a:	88ba      	ldrh	r2, [r7, #4]
 800130c:	883b      	ldrh	r3, [r7, #0]
 800130e:	4413      	add	r3, r2
 8001310:	3b01      	subs	r3, #1
 8001312:	121b      	asrs	r3, r3, #8
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe8c 	bl	8001034 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800131c:	88ba      	ldrh	r2, [r7, #4]
 800131e:	883b      	ldrh	r3, [r7, #0]
 8001320:	4413      	add	r3, r2
 8001322:	b29b      	uxth	r3, r3
 8001324:	3b01      	subs	r3, #1
 8001326:	b29b      	uxth	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	b29b      	uxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe81 	bl	8001034 <LCD_Write_Data>
	
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bd90      	pop	{r4, r7, pc}

0800133a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800134a:	202c      	movs	r0, #44	; 0x2c
 800134c:	f7ff fe64 	bl	8001018 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e006      	b.n	8001364 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fe6b 	bl	8001034 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3301      	adds	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3f4      	bcc.n	8001356 <LCD_FillColor+0x1c>
		
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4623      	mov	r3, r4
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	4603      	mov	r3, r0
 800138c:	80bb      	strh	r3, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]
 8001392:	4613      	mov	r3, r2
 8001394:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <LCD_Clear+0x58>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <LCD_Clear+0x2a>
 800139e:	2300      	movs	r3, #0
 80013a0:	e001      	b.n	80013a6 <LCD_Clear+0x2e>
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80013a8:	883b      	ldrh	r3, [r7, #0]
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	88b9      	ldrh	r1, [r7, #4]
 80013ae:	88f8      	ldrh	r0, [r7, #6]
 80013b0:	f7ff ff6a 	bl	8001288 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	883a      	ldrh	r2, [r7, #0]
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f7ff ffb9 	bl	800133a <LCD_FillColor>
	
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	20000230 	.word	0x20000230

080013d4 <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4623      	mov	r3, r4
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	4603      	mov	r3, r0
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80013f2:	883b      	ldrh	r3, [r7, #0]
 80013f4:	887a      	ldrh	r2, [r7, #2]
 80013f6:	88b9      	ldrh	r1, [r7, #4]
 80013f8:	88f8      	ldrh	r0, [r7, #6]
 80013fa:	f7ff ff45 	bl	8001288 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	883a      	ldrh	r2, [r7, #0]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	461a      	mov	r2, r3
 8001408:	8b3b      	ldrh	r3, [r7, #24]
 800140a:	4619      	mov	r1, r3
 800140c:	4610      	mov	r0, r2
 800140e:	f7ff ff94 	bl	800133a <LCD_FillColor>
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}
	...

0800141c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
 8001426:	460b      	mov	r3, r1
 8001428:	80bb      	strh	r3, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 800142e:	4b27      	ldr	r3, [pc, #156]	; (80014cc <LCD_DrawChar+0xb0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <LCD_DrawChar+0x20>
 8001436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143a:	e000      	b.n	800143e <LCD_DrawChar+0x22>
 800143c:	2300      	movs	r3, #0
 800143e:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <LCD_DrawChar+0xb0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <LCD_DrawChar+0x30>
 8001448:	2300      	movs	r3, #0
 800144a:	e001      	b.n	8001450 <LCD_DrawChar+0x34>
 800144c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001450:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	3b20      	subs	r3, #32
 8001456:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001458:	88b9      	ldrh	r1, [r7, #4]
 800145a:	88f8      	ldrh	r0, [r7, #6]
 800145c:	2310      	movs	r3, #16
 800145e:	2208      	movs	r2, #8
 8001460:	f7ff ff12 	bl	8001288 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001464:	202c      	movs	r0, #44	; 0x2c
 8001466:	f7ff fdd7 	bl	8001018 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800146a:	2300      	movs	r3, #0
 800146c:	75bb      	strb	r3, [r7, #22]
 800146e:	e024      	b.n	80014ba <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	7dbb      	ldrb	r3, [r7, #22]
 8001474:	4916      	ldr	r1, [pc, #88]	; (80014d0 <LCD_DrawChar+0xb4>)
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	440a      	add	r2, r1
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001480:	2300      	movs	r3, #0
 8001482:	757b      	strb	r3, [r7, #21]
 8001484:	e013      	b.n	80014ae <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 8001490:	8a7b      	ldrh	r3, [r7, #18]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fdce 	bl	8001034 <LCD_Write_Data>
 8001498:	e003      	b.n	80014a2 <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 800149a:	8a3b      	ldrh	r3, [r7, #16]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fdc9 	bl	8001034 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80014a8:	7d7b      	ldrb	r3, [r7, #21]
 80014aa:	3301      	adds	r3, #1
 80014ac:	757b      	strb	r3, [r7, #21]
 80014ae:	7d7b      	ldrb	r3, [r7, #21]
 80014b0:	2b07      	cmp	r3, #7
 80014b2:	d9e8      	bls.n	8001486 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80014b4:	7dbb      	ldrb	r3, [r7, #22]
 80014b6:	3301      	adds	r3, #1
 80014b8:	75bb      	strb	r3, [r7, #22]
 80014ba:	7dbb      	ldrb	r3, [r7, #22]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d9d7      	bls.n	8001470 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000230 	.word	0x20000230
 80014d0:	080092a4 	.word	0x080092a4

080014d4 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	603a      	str	r2, [r7, #0]
 80014de:	80fb      	strh	r3, [r7, #6]
 80014e0:	460b      	mov	r3, r1
 80014e2:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80014e4:	e01c      	b.n	8001520 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	2be8      	cmp	r3, #232	; 0xe8
 80014ea:	d904      	bls.n	80014f6 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80014ec:	2300      	movs	r3, #0
 80014ee:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	3310      	adds	r3, #16
 80014f4:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80014fc:	d903      	bls.n	8001506 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80014fe:	2300      	movs	r3, #0
 8001500:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001502:	2300      	movs	r3, #0
 8001504:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	88b9      	ldrh	r1, [r7, #4]
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff84 	bl	800141c <LCD_DrawChar>
		
		pStr ++;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	3308      	adds	r3, #8
 800151e:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1de      	bne.n	80014e6 <LCD_DrawString+0x12>
		
	}
	
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	4604      	mov	r4, r0
 800153c:	4608      	mov	r0, r1
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4623      	mov	r3, r4
 8001544:	80fb      	strh	r3, [r7, #6]
 8001546:	4603      	mov	r3, r0
 8001548:	80bb      	strh	r3, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	70fb      	strb	r3, [r7, #3]
 800154e:	4613      	mov	r3, r2
 8001550:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	3b20      	subs	r3, #32
 8001556:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001558:	88b9      	ldrh	r1, [r7, #4]
 800155a:	88f8      	ldrh	r0, [r7, #6]
 800155c:	2310      	movs	r3, #16
 800155e:	2208      	movs	r2, #8
 8001560:	f7ff fe92 	bl	8001288 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001564:	202c      	movs	r0, #44	; 0x2c
 8001566:	f7ff fd57 	bl	8001018 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800156a:	2300      	movs	r3, #0
 800156c:	73bb      	strb	r3, [r7, #14]
 800156e:	e024      	b.n	80015ba <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001570:	7b3a      	ldrb	r2, [r7, #12]
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	4915      	ldr	r1, [pc, #84]	; (80015cc <LCD_DrawChar_Color+0x98>)
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	440a      	add	r2, r1
 800157a:	4413      	add	r3, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001580:	2300      	movs	r3, #0
 8001582:	737b      	strb	r3, [r7, #13]
 8001584:	e013      	b.n	80015ae <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8001590:	8c3b      	ldrh	r3, [r7, #32]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fd4e 	bl	8001034 <LCD_Write_Data>
 8001598:	e003      	b.n	80015a2 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 800159a:	883b      	ldrh	r3, [r7, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fd49 	bl	8001034 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	085b      	lsrs	r3, r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80015a8:	7b7b      	ldrb	r3, [r7, #13]
 80015aa:	3301      	adds	r3, #1
 80015ac:	737b      	strb	r3, [r7, #13]
 80015ae:	7b7b      	ldrb	r3, [r7, #13]
 80015b0:	2b07      	cmp	r3, #7
 80015b2:	d9e8      	bls.n	8001586 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73bb      	strb	r3, [r7, #14]
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d9d7      	bls.n	8001570 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	080092a4 	.word	0x080092a4

080015d0 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	80fb      	strh	r3, [r7, #6]
 80015dc:	4613      	mov	r3, r2
 80015de:	80bb      	strh	r3, [r7, #4]
  LCD_Clear_Color ( usX - 10, usY, 20, 1, RED);
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	3b0a      	subs	r3, #10
 80015e4:	b298      	uxth	r0, r3
 80015e6:	88b9      	ldrh	r1, [r7, #4]
 80015e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	2214      	movs	r2, #20
 80015f2:	f7ff feef 	bl	80013d4 <LCD_Clear_Color>
  LCD_Clear_Color ( usX, usY - 10, 1, 20, RED);
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	3b0a      	subs	r3, #10
 80015fa:	b299      	uxth	r1, r3
 80015fc:	88f8      	ldrh	r0, [r7, #6]
 80015fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2314      	movs	r3, #20
 8001606:	2201      	movs	r2, #1
 8001608:	f7ff fee4 	bl	80013d4 <LCD_Clear_Color>
	
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b087      	sub	sp, #28
 8001618:	af02      	add	r7, sp, #8
 800161a:	60ba      	str	r2, [r7, #8]
 800161c:	461a      	mov	r2, r3
 800161e:	4603      	mov	r3, r0
 8001620:	81fb      	strh	r3, [r7, #14]
 8001622:	460b      	mov	r3, r1
 8001624:	81bb      	strh	r3, [r7, #12]
 8001626:	4613      	mov	r3, r2
 8001628:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800162a:	e01f      	b.n	800166c <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	2be8      	cmp	r3, #232	; 0xe8
 8001630:	d904      	bls.n	800163c <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001632:	2300      	movs	r3, #0
 8001634:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8001636:	89bb      	ldrh	r3, [r7, #12]
 8001638:	3310      	adds	r3, #16
 800163a:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800163c:	89bb      	ldrh	r3, [r7, #12]
 800163e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001642:	d903      	bls.n	800164c <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001644:	2300      	movs	r3, #0
 8001646:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8001648:	2300      	movs	r3, #0
 800164a:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	88fc      	ldrh	r4, [r7, #6]
 8001652:	89b9      	ldrh	r1, [r7, #12]
 8001654:	89f8      	ldrh	r0, [r7, #14]
 8001656:	8c3b      	ldrh	r3, [r7, #32]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4623      	mov	r3, r4
 800165c:	f7ff ff6a 	bl	8001534 <LCD_DrawChar_Color>
		
		pStr ++;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3301      	adds	r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	3308      	adds	r3, #8
 800166a:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1db      	bne.n	800162c <LCD_DrawString_Color+0x18>
		
	}
	
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}
	...

08001680 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	3b01      	subs	r3, #1
 800168e:	2b03      	cmp	r3, #3
 8001690:	f200 80a0 	bhi.w	80017d4 <LCD_GramScan+0x154>
 8001694:	a201      	add	r2, pc, #4	; (adr r2, 800169c <LCD_GramScan+0x1c>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016f7 	.word	0x080016f7
 80016a4:	08001741 	.word	0x08001741
 80016a8:	0800178b 	.word	0x0800178b

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 80016ac:	2036      	movs	r0, #54	; 0x36
 80016ae:	f7ff fcb3 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 80016b2:	20c8      	movs	r0, #200	; 0xc8
 80016b4:	f7ff fcbe 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80016b8:	202a      	movs	r0, #42	; 0x2a
 80016ba:	f7ff fcad 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff fcb8 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff fcb5 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fcb2 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 80016d0:	20ef      	movs	r0, #239	; 0xef
 80016d2:	f7ff fcaf 	bl	8001034 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80016d6:	202b      	movs	r0, #43	; 0x2b
 80016d8:	f7ff fc9e 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff fca9 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff fca6 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fca3 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 80016ee:	203f      	movs	r0, #63	; 0x3f
 80016f0:	f7ff fca0 	bl	8001034 <LCD_Write_Data>
					
		  break;
 80016f4:	e06e      	b.n	80017d4 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 80016f6:	2036      	movs	r0, #54	; 0x36
 80016f8:	f7ff fc8e 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 80016fc:	2068      	movs	r0, #104	; 0x68
 80016fe:	f7ff fc99 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001702:	202a      	movs	r0, #42	; 0x2a
 8001704:	f7ff fc88 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fc93 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fc90 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff fc8d 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 800171a:	203f      	movs	r0, #63	; 0x3f
 800171c:	f7ff fc8a 	bl	8001034 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001720:	202b      	movs	r0, #43	; 0x2b
 8001722:	f7ff fc79 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fc84 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff fc81 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff fc7e 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001738:	20ef      	movs	r0, #239	; 0xef
 800173a:	f7ff fc7b 	bl	8001034 <LCD_Write_Data>
		
		  break;
 800173e:	e049      	b.n	80017d4 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001740:	2036      	movs	r0, #54	; 0x36
 8001742:	f7ff fc69 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001746:	2028      	movs	r0, #40	; 0x28
 8001748:	f7ff fc74 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 800174c:	202a      	movs	r0, #42	; 0x2a
 800174e:	f7ff fc63 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff fc6e 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff fc6b 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff fc68 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001764:	203f      	movs	r0, #63	; 0x3f
 8001766:	f7ff fc65 	bl	8001034 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800176a:	202b      	movs	r0, #43	; 0x2b
 800176c:	f7ff fc54 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fc5f 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fc5c 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fc59 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 8001782:	20ef      	movs	r0, #239	; 0xef
 8001784:	f7ff fc56 	bl	8001034 <LCD_Write_Data>
		  
		  break;
 8001788:	e024      	b.n	80017d4 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 800178a:	2036      	movs	r0, #54	; 0x36
 800178c:	f7ff fc44 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 8001790:	2048      	movs	r0, #72	; 0x48
 8001792:	f7ff fc4f 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001796:	202a      	movs	r0, #42	; 0x2a
 8001798:	f7ff fc3e 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fc49 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fc46 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff fc43 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 80017ae:	20ef      	movs	r0, #239	; 0xef
 80017b0:	f7ff fc40 	bl	8001034 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80017b4:	202b      	movs	r0, #43	; 0x2b
 80017b6:	f7ff fc2f 	bl	8001018 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fc3a 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fc37 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 80017c6:	2001      	movs	r0, #1
 80017c8:	f7ff fc34 	bl	8001034 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 80017cc:	203f      	movs	r0, #63	; 0x3f
 80017ce:	f7ff fc31 	bl	8001034 <LCD_Write_Data>
		
	    break;
 80017d2:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 80017d4:	202c      	movs	r0, #44	; 0x2c
 80017d6:	f7ff fc1f 	bl	8001018 <LCD_Write_Cmd>
	
	
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop

080017e4 <LCD_Darkmode_Toggle>:

void LCD_Darkmode_Toggle(){
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	if (!darkmode_toggle) darkmode_toggle = 1;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <LCD_Darkmode_Toggle+0x24>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d103      	bne.n	80017f8 <LCD_Darkmode_Toggle+0x14>
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <LCD_Darkmode_Toggle+0x24>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
	else darkmode_toggle = 0;
}
 80017f6:	e002      	b.n	80017fe <LCD_Darkmode_Toggle+0x1a>
	else darkmode_toggle = 0;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <LCD_Darkmode_Toggle+0x24>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000230 	.word	0x20000230

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001812:	f001 fca1 	bl	8003158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001816:	f000 f873 	bl	8001900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181a:	f000 f8d1 	bl	80019c0 <MX_GPIO_Init>
  MX_FSMC_Init();
 800181e:	f000 f97f 	bl	8001b20 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
	RTC_Init(&hrtc);
 8001822:	4832      	ldr	r0, [pc, #200]	; (80018ec <main+0xe0>)
 8001824:	f000 f9e6 	bl	8001bf4 <RTC_Init>

	macXPT2046_CS_DISABLE();
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182e:	4830      	ldr	r0, [pc, #192]	; (80018f0 <main+0xe4>)
 8001830:	f001 ffd1 	bl	80037d6 <HAL_GPIO_WritePin>
	
	LCD_INIT();
 8001834:	f7ff fba9 	bl	8000f8a <LCD_INIT>

	while( ! XPT2046_Touch_Calibrate () );
 8001838:	bf00      	nop
 800183a:	f001 f9b9 	bl	8002bb0 <XPT2046_Touch_Calibrate>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0fa      	beq.n	800183a <main+0x2e>

	//Address To Receive Coordinate
	strType_XPT2046_Coordinate Coordinate;


	uint8_t mode = 0; //Current Mode: Mode 0 = Home, Mode 1 = Drink Water
 8001844:	2300      	movs	r3, #0
 8001846:	75fb      	strb	r3, [r7, #23]
	uint8_t mode_new = 0; //To Determine Whether A Mode is Updated
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]
	uint8_t render_done=0;
 800184c:	2300      	movs	r3, #0
 800184e:	73bb      	strb	r3, [r7, #14]


	RTC_Get();
 8001850:	f000 fab0 	bl	8001db4 <RTC_Get>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4926      	ldr	r1, [pc, #152]	; (80018f4 <main+0xe8>)
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fbc0 	bl	8002fe0 <XPT2046_Get_TouchedPoint>
	  			&strXPT2046_TouchPara);

	  //!!Just For Testing, Need Refactoring Later
	  if(mode==0) {
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10d      	bne.n	8001882 <main+0x76>
		  RTC_Get();
 8001866:	f000 faa5 	bl	8001db4 <RTC_Get>
		  UI_Home_Display_Date(t.ryear,t.rmon,t.rday);
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	79b9      	ldrb	r1, [r7, #6]
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb03 	bl	8000e7c <UI_Home_Display_Date>
		  UI_Home_Display_Time(t.rhour, t.rmin, t.rsec);
 8001876:	7a3b      	ldrb	r3, [r7, #8]
 8001878:	7a79      	ldrb	r1, [r7, #9]
 800187a:	7aba      	ldrb	r2, [r7, #10]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb39 	bl	8000ef4 <UI_Home_Display_Time>
	  }

	  get_TimeStamp(&t);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fc1d 	bl	80020c4 <get_TimeStamp>

	  do {
		  //Home Buttons
		  if(mode==0){
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d117      	bne.n	80018c0 <main+0xb4>
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {mode_new = 1; break;}
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	4818      	ldr	r0, [pc, #96]	; (80018f8 <main+0xec>)
 8001898:	f7ff fa0a 	bl	8000cb0 <Check_touchkey>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <main+0x9c>
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e00b      	b.n	80018c0 <main+0xb4>
			  if(Check_touchkey(&home_dark_mode,&Coordinate)) {mode_new = 2; break;}
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <main+0xf0>)
 80018b0:	f7ff f9fe 	bl	8000cb0 <Check_touchkey>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <main+0xb4>
 80018ba:	2302      	movs	r3, #2
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	bf00      	nop
		  //Other Buttons In Other Screen

	  } while (0);

	  //Reset Coordinates
	  XPT2046_Reset_TouchPoint(&Coordinate);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 fc12 	bl	80030ee <XPT2046_Reset_TouchPoint>

	  if(mode != mode_new){
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	7dfa      	ldrb	r2, [r7, #23]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d003      	beq.n	80018da <main+0xce>
		  mode = mode_new;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	75fb      	strb	r3, [r7, #23]
		  render_done = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73bb      	strb	r3, [r7, #14]
	  }
	  //Render LCD If Enter New Mode
	  Render(&mode_new, &render_done);
 80018da:	f107 020e 	add.w	r2, r7, #14
 80018de:	f107 030f 	add.w	r3, r7, #15
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fa0d 	bl	8000d04 <Render>
	  XPT2046_Get_TouchedPoint(&Coordinate,
 80018ea:	e7b3      	b.n	8001854 <main+0x48>
 80018ec:	20000234 	.word	0x20000234
 80018f0:	40011400 	.word	0x40011400
 80018f4:	20000008 	.word	0x20000008
 80018f8:	08009894 	.word	0x08009894
 80018fc:	080098a4 	.word	0x080098a4

08001900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b096      	sub	sp, #88	; 0x58
 8001904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001906:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190a:	2228      	movs	r2, #40	; 0x28
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fff4 	bl	80048fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001934:	2305      	movs	r3, #5
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001942:	2301      	movs	r3, #1
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001946:	2301      	movs	r3, #1
 8001948:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194a:	2302      	movs	r3, #2
 800194c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800194e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001952:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001954:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001958:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195e:	4618      	mov	r0, r3
 8001960:	f001 ff80 	bl	8003864 <HAL_RCC_OscConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800196a:	f000 f93d 	bl	8001be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196e:	230f      	movs	r3, #15
 8001970:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001972:	2302      	movs	r3, #2
 8001974:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800197a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	2102      	movs	r1, #2
 800198a:	4618      	mov	r0, r3
 800198c:	f002 f9ce 	bl	8003d2c <HAL_RCC_ClockConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001996:	f000 f927 	bl	8001be8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800199a:	2301      	movs	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800199e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fb68 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80019b2:	f000 f919 	bl	8001be8 <Error_Handler>
  }
}
 80019b6:	bf00      	nop
 80019b8:	3758      	adds	r7, #88	; 0x58
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 0318 	add.w	r3, r7, #24
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d4:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <MX_GPIO_Init+0x14c>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a4c      	ldr	r2, [pc, #304]	; (8001b0c <MX_GPIO_Init+0x14c>)
 80019da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <MX_GPIO_Init+0x14c>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <MX_GPIO_Init+0x14c>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a46      	ldr	r2, [pc, #280]	; (8001b0c <MX_GPIO_Init+0x14c>)
 80019f2:	f043 0310 	orr.w	r3, r3, #16
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <MX_GPIO_Init+0x14c>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <MX_GPIO_Init+0x14c>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a40      	ldr	r2, [pc, #256]	; (8001b0c <MX_GPIO_Init+0x14c>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <MX_GPIO_Init+0x14c>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <MX_GPIO_Init+0x14c>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a3a      	ldr	r2, [pc, #232]	; (8001b0c <MX_GPIO_Init+0x14c>)
 8001a22:	f043 0320 	orr.w	r3, r3, #32
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <MX_GPIO_Init+0x14c>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MX_GPIO_Init+0x14c>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <MX_GPIO_Init+0x14c>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <MX_GPIO_Init+0x14c>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2107      	movs	r1, #7
 8001a50:	482f      	ldr	r0, [pc, #188]	; (8001b10 <MX_GPIO_Init+0x150>)
 8001a52:	f001 fec0 	bl	80037d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2123      	movs	r1, #35	; 0x23
 8001a5a:	482e      	ldr	r0, [pc, #184]	; (8001b14 <MX_GPIO_Init+0x154>)
 8001a5c:	f001 febb 	bl	80037d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001a66:	482c      	ldr	r0, [pc, #176]	; (8001b18 <MX_GPIO_Init+0x158>)
 8001a68:	f001 feb5 	bl	80037d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	4619      	mov	r1, r3
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <MX_GPIO_Init+0x150>)
 8001a84:	f001 fcf8 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481d      	ldr	r0, [pc, #116]	; (8001b10 <MX_GPIO_Init+0x150>)
 8001a9c:	f001 fcec 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_GPIO_Init+0x15c>)
 8001aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aac:	f107 0318 	add.w	r3, r7, #24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4817      	ldr	r0, [pc, #92]	; (8001b10 <MX_GPIO_Init+0x150>)
 8001ab4:	f001 fce0 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001ab8:	2323      	movs	r3, #35	; 0x23
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4619      	mov	r1, r3
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <MX_GPIO_Init+0x154>)
 8001ad0:	f001 fcd2 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ad4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	4619      	mov	r1, r3
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <MX_GPIO_Init+0x158>)
 8001aee:	f001 fcc3 	bl	8003478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	200a      	movs	r0, #10
 8001af8:	f001 fc87 	bl	800340a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001afc:	200a      	movs	r0, #10
 8001afe:	f001 fca0 	bl	8003442 <HAL_NVIC_EnableIRQ>

}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40011800 	.word	0x40011800
 8001b14:	40010c00 	.word	0x40010c00
 8001b18:	40011400 	.word	0x40011400
 8001b1c:	10210000 	.word	0x10210000

08001b20 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b3a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b3e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b42:	4a27      	ldr	r2, [pc, #156]	; (8001be0 <MX_FSMC_Init+0xc0>)
 8001b44:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001b96:	230f      	movs	r3, #15
 8001b98:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001b9e:	23ff      	movs	r3, #255	; 0xff
 8001ba0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001baa:	2311      	movs	r3, #17
 8001bac:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4808      	ldr	r0, [pc, #32]	; (8001bdc <MX_FSMC_Init+0xbc>)
 8001bba:	f002 fd45 	bl	8004648 <HAL_SRAM_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001bc4:	f000 f810 	bl	8001be8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_FSMC_Init+0xc4>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <MX_FSMC_Init+0xc4>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000248 	.word	0x20000248
 8001be0:	a0000104 	.word	0xa0000104
 8001be4:	40010000 	.word	0x40010000

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <RTC_Init>:
uint8_t rmon,rday,rhour,rmin,rsec,rweek;
uint8_t const table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5};
uint8_t const mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};

void RTC_Init(RTC_HandleTypeDef* hrtc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	6078      	str	r0, [r7, #4]
	hrtc->Instance = RTC;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <RTC_Init+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
	hrtc->Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	605a      	str	r2, [r3, #4]
	hrtc->Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(hrtc) != HAL_OK)
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f002 fbcf 	bl	80043b4 <HAL_RTC_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <RTC_Init+0x2c>
	{
		Error_Handler();
 8001c1c:	f7ff ffe4 	bl	8001be8 <Error_Handler>
	}
	//Check If first time connect to power source
	if(HAL_RTCEx_BKUPRead(hrtc,RTC_BKP_DR1)!=0x5050){//Deafult Value should be 0xffff
 8001c20:	2101      	movs	r1, #1
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f002 fcf4 	bl	8004610 <HAL_RTCEx_BKUPRead>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f245 0250 	movw	r2, #20560	; 0x5050
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d010      	beq.n	8001c54 <RTC_Init+0x60>
		HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR1,0x5050);
 8001c32:	f245 0250 	movw	r2, #20560	; 0x5050
 8001c36:	2101      	movs	r1, #1
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f002 fccf 	bl	80045dc <HAL_RTCEx_BKUPWrite>
		RTC_Set(2022,1,1,0,0,0);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	2300      	movs	r3, #0
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2300      	movs	r3, #0
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8001c50:	f000 f806 	bl	8001c60 <RTC_Set>
	}
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40002800 	.word	0x40002800

08001c60 <RTC_Set>:

uint8_t RTC_Set(uint16_t syear, int8_t smon, uint8_t sday,uint8_t rhour,uint8_t rmin,uint8_t rsec){
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	80fb      	strh	r3, [r7, #6]
 8001c72:	4603      	mov	r3, r0
 8001c74:	717b      	strb	r3, [r7, #5]
 8001c76:	460b      	mov	r3, r1
 8001c78:	713b      	strb	r3, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	70fb      	strb	r3, [r7, #3]
	uint16_t t;
	uint32_t seccount=0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
	if(syear<2000||syear>2099)return 1;// Range: 1970-2099
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c88:	d304      	bcc.n	8001c94 <RTC_Set+0x34>
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	f640 0233 	movw	r2, #2099	; 0x833
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <RTC_Set+0x38>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e081      	b.n	8001d9c <RTC_Set+0x13c>
	for(t=1970;t<syear;++t){
 8001c98:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8001c9c:	81fb      	strh	r3, [r7, #14]
 8001c9e:	e014      	b.n	8001cca <RTC_Set+0x6a>
		if(Is_Leap_Year(t))seccount+=31622400;
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f9dc 	bl	8002060 <Is_Leap_Year>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <RTC_Set+0x5c>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
 8001cb4:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	e003      	b.n	8001cc4 <RTC_Set+0x64>
		else seccount+=31536000;
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <RTC_Set+0x144>)
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
	for(t=1970;t<syear;++t){
 8001cc4:	89fb      	ldrh	r3, [r7, #14]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	81fb      	strh	r3, [r7, #14]
 8001cca:	89fa      	ldrh	r2, [r7, #14]
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d3e6      	bcc.n	8001ca0 <RTC_Set+0x40>
	}
	smon-=1;
 8001cd2:	797b      	ldrb	r3, [r7, #5]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	717b      	strb	r3, [r7, #5]
	for(t=0;t<smon;t++){
 8001cda:	2300      	movs	r3, #0
 8001cdc:	81fb      	strh	r3, [r7, #14]
 8001cde:	e01c      	b.n	8001d1a <RTC_Set+0xba>
		seccount+=(uint32_t)mon_table[t]*86400;
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	4a31      	ldr	r2, [pc, #196]	; (8001da8 <RTC_Set+0x148>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <RTC_Set+0x14c>)
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f9b2 	bl	8002060 <Is_Leap_Year>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <RTC_Set+0xb4>
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <RTC_Set+0xb4>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001d0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d12:	60bb      	str	r3, [r7, #8]
	for(t=0;t<smon;t++){
 8001d14:	89fb      	ldrh	r3, [r7, #14]
 8001d16:	3301      	adds	r3, #1
 8001d18:	81fb      	strh	r3, [r7, #14]
 8001d1a:	89fa      	ldrh	r2, [r7, #14]
 8001d1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbdd      	blt.n	8001ce0 <RTC_Set+0x80>
	}
	seccount+=(uint32_t)(sday-1)*86400;
 8001d24:	793b      	ldrb	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <RTC_Set+0x14c>)
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	4413      	add	r3, r2
 8001d34:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rhour*3600;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	4413      	add	r3, r2
 8001d44:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rmin*60;
 8001d46:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	461a      	mov	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4413      	add	r3, r2
 8001d58:	60bb      	str	r3, [r7, #8]
	seccount += rsec;
 8001d5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4413      	add	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]

	RTC->CRL|=1<<4;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <RTC_Set+0x150>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <RTC_Set+0x150>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	6053      	str	r3, [r2, #4]
	RTC->CNTL=seccount&0xffff;
 8001d70:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <RTC_Set+0x150>)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	61d3      	str	r3, [r2, #28]
	RTC->CNTH=seccount>>16;
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <RTC_Set+0x150>)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	6193      	str	r3, [r2, #24]
	RTC->CRL&=~(1<<4);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <RTC_Set+0x150>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <RTC_Set+0x150>)
 8001d86:	f023 0310 	bic.w	r3, r3, #16
 8001d8a:	6053      	str	r3, [r2, #4]
	while(!(RTC->CRL&(1<<5)));
 8001d8c:	bf00      	nop
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <RTC_Set+0x150>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f9      	beq.n	8001d8e <RTC_Set+0x12e>

	return 0;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}
 8001da4:	01e13380 	.word	0x01e13380
 8001da8:	080098c0 	.word	0x080098c0
 8001dac:	00015180 	.word	0x00015180
 8001db0:	40002800 	.word	0x40002800

08001db4 <RTC_Get>:

uint8_t RTC_Get(void){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
	static uint16_t daycnt=0;
	uint32_t timecount=0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
	uint32_t temp=0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
	uint32_t temp1=0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]

	timecount=RTC->CNTH;
 8001dc6:	4b65      	ldr	r3, [pc, #404]	; (8001f5c <RTC_Get+0x1a8>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	607b      	str	r3, [r7, #4]
	timecount<<=16;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	607b      	str	r3, [r7, #4]
	timecount+=RTC->CNTL;
 8001dd2:	4b62      	ldr	r3, [pc, #392]	; (8001f5c <RTC_Get+0x1a8>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	607b      	str	r3, [r7, #4]

	temp=timecount/86400;//Day
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a60      	ldr	r2, [pc, #384]	; (8001f60 <RTC_Get+0x1ac>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	60fb      	str	r3, [r7, #12]
	if(daycnt!=temp){//New Day
 8001de8:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <RTC_Get+0x1b0>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d066      	beq.n	8001ec2 <RTC_Get+0x10e>
		daycnt=temp;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <RTC_Get+0x1b0>)
 8001dfa:	801a      	strh	r2, [r3, #0]
		temp1=1970;
 8001dfc:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8001e00:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8001e02:	e01b      	b.n	8001e3c <RTC_Get+0x88>
			if(Is_Leap_Year(temp1)){
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f929 	bl	8002060 <Is_Leap_Year>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00c      	beq.n	8001e2e <RTC_Get+0x7a>
				if(temp>=366)temp-=366;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8001e1a:	d304      	bcc.n	8001e26 <RTC_Get+0x72>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e007      	b.n	8001e36 <RTC_Get+0x82>
				else{temp1++; break;}
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	e00a      	b.n	8001e44 <RTC_Get+0x90>
			}
			else temp-=365;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 8001e34:	60fb      	str	r3, [r7, #12]
			temp1++;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8001e42:	d8df      	bhi.n	8001e04 <RTC_Get+0x50>
		}
		ryear=temp1;//Year
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <RTC_Get+0x1b4>)
 8001e4a:	801a      	strh	r2, [r3, #0]
		temp1=0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8001e50:	e024      	b.n	8001e9c <RTC_Get+0xe8>
			if(Is_Leap_Year(ryear)&&temp1==1){
 8001e52:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <RTC_Get+0x1b4>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f902 	bl	8002060 <Is_Leap_Year>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <RTC_Get+0xc2>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <RTC_Get+0xc2>
				if(temp>=29)temp-=29;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b1c      	cmp	r3, #28
 8001e6c:	d91a      	bls.n	8001ea4 <RTC_Get+0xf0>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3b1d      	subs	r3, #29
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e00f      	b.n	8001e96 <RTC_Get+0xe2>
				else break;
			}else{
			if(temp>=mon_table[temp1])temp-=mon_table[temp1];
 8001e76:	4a3d      	ldr	r2, [pc, #244]	; (8001f6c <RTC_Get+0x1b8>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d310      	bcc.n	8001ea8 <RTC_Get+0xf4>
 8001e86:	4a39      	ldr	r2, [pc, #228]	; (8001f6c <RTC_Get+0x1b8>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
			else break;
			}
			temp1++;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b1b      	cmp	r3, #27
 8001ea0:	d8d7      	bhi.n	8001e52 <RTC_Get+0x9e>
 8001ea2:	e002      	b.n	8001eaa <RTC_Get+0xf6>
				else break;
 8001ea4:	bf00      	nop
 8001ea6:	e000      	b.n	8001eaa <RTC_Get+0xf6>
			else break;
 8001ea8:	bf00      	nop
		}
		rmon=temp1+1;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <RTC_Get+0x1bc>)
 8001eb4:	701a      	strb	r2, [r3, #0]
		rday=temp+1;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <RTC_Get+0x1c0>)
 8001ec0:	701a      	strb	r2, [r3, #0]
	}
	temp=timecount%86400;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <RTC_Get+0x1ac>)
 8001ec6:	fba2 1203 	umull	r1, r2, r2, r3
 8001eca:	0c12      	lsrs	r2, r2, #16
 8001ecc:	492a      	ldr	r1, [pc, #168]	; (8001f78 <RTC_Get+0x1c4>)
 8001ece:	fb01 f202 	mul.w	r2, r1, r2
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
	rhour=temp/3600;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <RTC_Get+0x1c8>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0adb      	lsrs	r3, r3, #11
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <RTC_Get+0x1cc>)
 8001ee4:	701a      	strb	r2, [r3, #0]
	rmin=(temp%3600)/60;
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <RTC_Get+0x1c8>)
 8001eea:	fba3 1302 	umull	r1, r3, r3, r2
 8001eee:	0adb      	lsrs	r3, r3, #11
 8001ef0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <RTC_Get+0x1d0>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <RTC_Get+0x1d4>)
 8001f06:	701a      	strb	r2, [r3, #0]
	rsec=(temp%3600)%60;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <RTC_Get+0x1c8>)
 8001f0c:	fba2 1203 	umull	r1, r2, r2, r3
 8001f10:	0ad2      	lsrs	r2, r2, #11
 8001f12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001f16:	fb01 f202 	mul.w	r2, r1, r2
 8001f1a:	1a9a      	subs	r2, r3, r2
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <RTC_Get+0x1d0>)
 8001f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f22:	0959      	lsrs	r1, r3, #5
 8001f24:	460b      	mov	r3, r1
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	1a5b      	subs	r3, r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	1ad1      	subs	r1, r2, r3
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <RTC_Get+0x1d8>)
 8001f32:	701a      	strb	r2, [r3, #0]
	rweek=RTC_Get_Week(ryear,rmon,rday);
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <RTC_Get+0x1b4>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <RTC_Get+0x1bc>)
 8001f3a:	7812      	ldrb	r2, [r2, #0]
 8001f3c:	b291      	uxth	r1, r2
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <RTC_Get+0x1c0>)
 8001f40:	7812      	ldrb	r2, [r2, #0]
 8001f42:	b292      	uxth	r2, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f825 	bl	8001f94 <RTC_Get_Week>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <RTC_Get+0x1dc>)
 8001f50:	701a      	strb	r2, [r3, #0]
	return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40002800 	.word	0x40002800
 8001f60:	c22e4507 	.word	0xc22e4507
 8001f64:	20000294 	.word	0x20000294
 8001f68:	2000028c 	.word	0x2000028c
 8001f6c:	080098c0 	.word	0x080098c0
 8001f70:	2000028e 	.word	0x2000028e
 8001f74:	2000028f 	.word	0x2000028f
 8001f78:	00015180 	.word	0x00015180
 8001f7c:	91a2b3c5 	.word	0x91a2b3c5
 8001f80:	20000290 	.word	0x20000290
 8001f84:	88888889 	.word	0x88888889
 8001f88:	20000291 	.word	0x20000291
 8001f8c:	20000292 	.word	0x20000292
 8001f90:	20000293 	.word	0x20000293

08001f94 <RTC_Get_Week>:

uint8_t RTC_Get_Week(uint16_t year, uint16_t month, uint16_t day){
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	80bb      	strh	r3, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	807b      	strh	r3, [r7, #2]
	uint16_t temp2;
	uint8_t yearH,yearL;
	yearH=year/100;
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <RTC_Get_Week+0xc0>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	733b      	strb	r3, [r7, #12]
	yearL=year%100;
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	4a27      	ldr	r2, [pc, #156]	; (8002054 <RTC_Get_Week+0xc0>)
 8001fb8:	fba2 1203 	umull	r1, r2, r2, r3
 8001fbc:	0952      	lsrs	r2, r2, #5
 8001fbe:	2164      	movs	r1, #100	; 0x64
 8001fc0:	fb01 f202 	mul.w	r2, r1, r2
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	737b      	strb	r3, [r7, #13]
	if (yearH>19)yearL+=100;
 8001fca:	7b3b      	ldrb	r3, [r7, #12]
 8001fcc:	2b13      	cmp	r3, #19
 8001fce:	d902      	bls.n	8001fd6 <RTC_Get_Week+0x42>
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	3364      	adds	r3, #100	; 0x64
 8001fd4:	737b      	strb	r3, [r7, #13]
	temp2=yearL+yearL/4;
 8001fd6:	7b7b      	ldrb	r3, [r7, #13]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	7b7b      	ldrb	r3, [r7, #13]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	81fb      	strh	r3, [r7, #14]
	temp2=temp2%7;
 8001fe6:	89fa      	ldrh	r2, [r7, #14]
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <RTC_Get_Week+0xc4>)
 8001fea:	fba3 1302 	umull	r1, r3, r3, r2
 8001fee:	1ad1      	subs	r1, r2, r3
 8001ff0:	0849      	lsrs	r1, r1, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	0899      	lsrs	r1, r3, #2
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	1a5b      	subs	r3, r3, r1
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	81fb      	strh	r3, [r7, #14]
	temp2=temp2+day+table_week[month-1];
 8002000:	89fa      	ldrh	r2, [r7, #14]
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	4413      	add	r3, r2
 8002006:	b29a      	uxth	r2, r3
 8002008:	88bb      	ldrh	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	4913      	ldr	r1, [pc, #76]	; (800205c <RTC_Get_Week+0xc8>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	b29b      	uxth	r3, r3
 8002012:	4413      	add	r3, r2
 8002014:	81fb      	strh	r3, [r7, #14]
	if (yearL%4==0&&month<3)temp2--;
 8002016:	7b7b      	ldrb	r3, [r7, #13]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <RTC_Get_Week+0x9a>
 8002022:	88bb      	ldrh	r3, [r7, #4]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d802      	bhi.n	800202e <RTC_Get_Week+0x9a>
 8002028:	89fb      	ldrh	r3, [r7, #14]
 800202a:	3b01      	subs	r3, #1
 800202c:	81fb      	strh	r3, [r7, #14]
	return(temp2%7);
 800202e:	89fa      	ldrh	r2, [r7, #14]
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <RTC_Get_Week+0xc4>)
 8002032:	fba3 1302 	umull	r1, r3, r3, r2
 8002036:	1ad1      	subs	r1, r2, r3
 8002038:	0849      	lsrs	r1, r1, #1
 800203a:	440b      	add	r3, r1
 800203c:	0899      	lsrs	r1, r3, #2
 800203e:	460b      	mov	r3, r1
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a5b      	subs	r3, r3, r1
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	b29b      	uxth	r3, r3
 8002048:	b2db      	uxtb	r3, r3
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	51eb851f 	.word	0x51eb851f
 8002058:	24924925 	.word	0x24924925
 800205c:	080098b4 	.word	0x080098b4

08002060 <Is_Leap_Year>:

uint8_t Is_Leap_Year(uint16_t year){
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
	if(year%4==0){
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d11e      	bne.n	80020b4 <Is_Leap_Year+0x54>
		if(year%100==0){
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <Is_Leap_Year+0x60>)
 800207a:	fba2 1203 	umull	r1, r2, r2, r3
 800207e:	0952      	lsrs	r2, r2, #5
 8002080:	2164      	movs	r1, #100	; 0x64
 8002082:	fb01 f202 	mul.w	r2, r1, r2
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d110      	bne.n	80020b0 <Is_Leap_Year+0x50>
			if(year%400==0)return 1;
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <Is_Leap_Year+0x60>)
 8002092:	fba2 1203 	umull	r1, r2, r2, r3
 8002096:	09d2      	lsrs	r2, r2, #7
 8002098:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800209c:	fb01 f202 	mul.w	r2, r1, r2
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <Is_Leap_Year+0x4c>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e004      	b.n	80020b6 <Is_Leap_Year+0x56>
			else return 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e002      	b.n	80020b6 <Is_Leap_Year+0x56>
		}else return 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <Is_Leap_Year+0x56>
	}else return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	51eb851f 	.word	0x51eb851f

080020c4 <get_TimeStamp>:




void get_TimeStamp(TimeStamp* t){
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	t->ryear = ryear;
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <get_TimeStamp+0x44>)
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	801a      	strh	r2, [r3, #0]
	t->rmon = rmon;
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <get_TimeStamp+0x48>)
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	709a      	strb	r2, [r3, #2]
	t->rhour = rhour;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <get_TimeStamp+0x4c>)
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	711a      	strb	r2, [r3, #4]
	t->rmin = rmin;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <get_TimeStamp+0x50>)
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	715a      	strb	r2, [r3, #5]
	t->rsec = rsec;
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <get_TimeStamp+0x54>)
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	719a      	strb	r2, [r3, #6]
	t->rweek = rweek;
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <get_TimeStamp+0x58>)
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	71da      	strb	r2, [r3, #7]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000028c 	.word	0x2000028c
 800210c:	2000028e 	.word	0x2000028e
 8002110:	20000290 	.word	0x20000290
 8002114:	20000291 	.word	0x20000291
 8002118:	20000292 	.word	0x20000292
 800211c:	20000293 	.word	0x20000293

08002120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_MspInit+0x5c>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <HAL_MspInit+0x5c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6193      	str	r3, [r2, #24]
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_MspInit+0x5c>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_MspInit+0x5c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_MspInit+0x5c>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_MspInit+0x5c>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_MspInit+0x60>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_MspInit+0x60>)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000

08002184 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_RTC_MspInit+0x3c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d110      	bne.n	80021b8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002196:	f001 fb59 	bl	800384c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_RTC_MspInit+0x40>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_RTC_MspInit+0x40>)
 80021a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021a4:	61d3      	str	r3, [r2, #28]
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <HAL_RTC_MspInit+0x40>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RTC_MspInit+0x44>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40002800 	.word	0x40002800
 80021c4:	40021000 	.word	0x40021000
 80021c8:	4242043c 	.word	0x4242043c

080021cc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <HAL_FSMC_MspInit+0x78>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d129      	bne.n	800223c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_FSMC_MspInit+0x78>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_FSMC_MspInit+0x7c>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <HAL_FSMC_MspInit+0x7c>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6153      	str	r3, [r2, #20]
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_FSMC_MspInit+0x7c>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002206:	f64f 7380 	movw	r3, #65408	; 0xff80
 800220a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	4619      	mov	r1, r3
 800221a:	480c      	ldr	r0, [pc, #48]	; (800224c <HAL_FSMC_MspInit+0x80>)
 800221c:	f001 f92c 	bl	8003478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002220:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002224:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	4619      	mov	r1, r3
 8002234:	4806      	ldr	r0, [pc, #24]	; (8002250 <HAL_FSMC_MspInit+0x84>)
 8002236:	f001 f91f 	bl	8003478 <HAL_GPIO_Init>
 800223a:	e000      	b.n	800223e <HAL_FSMC_MspInit+0x72>
    return;
 800223c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000298 	.word	0x20000298
 8002248:	40021000 	.word	0x40021000
 800224c:	40011800 	.word	0x40011800
 8002250:	40011400 	.word	0x40011400

08002254 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800225c:	f7ff ffb6 	bl	80021cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <HardFault_Handler+0x4>

0800227a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <MemManage_Handler+0x4>

08002280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <BusFault_Handler+0x4>

08002286 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <UsageFault_Handler+0x4>

0800228c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b4:	f000 ff96 	bl	80031e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <EXTI4_IRQHandler+0x2c>)
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <EXTI4_IRQHandler+0x30>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <EXTI4_IRQHandler+0x2c>)
 80022d4:	2210      	movs	r2, #16
 80022d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80022d8:	2010      	movs	r0, #16
 80022da:	f001 faad 	bl	8003838 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80022de:	2010      	movs	r0, #16
 80022e0:	f001 fa92 	bl	8003808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40010400 	.word	0x40010400
 80022ec:	200002a0 	.word	0x200002a0

080022f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
	return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <_kill>:

int _kill(int pid, int sig)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002308:	f002 face 	bl	80048a8 <__errno>
 800230c:	4603      	mov	r3, r0
 800230e:	2216      	movs	r2, #22
 8002310:	601a      	str	r2, [r3, #0]
	return -1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_exit>:

void _exit (int status)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002326:	f04f 31ff 	mov.w	r1, #4294967295
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffe7 	bl	80022fe <_kill>
	while (1) {}		/* Make sure we hang here */
 8002330:	e7fe      	b.n	8002330 <_exit+0x12>

08002332 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e00a      	b.n	800235a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002344:	f3af 8000 	nop.w
 8002348:	4601      	mov	r1, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	60ba      	str	r2, [r7, #8]
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	dbf0      	blt.n	8002344 <_read+0x12>
	}

return len;
 8002362:	687b      	ldr	r3, [r7, #4]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e009      	b.n	8002392 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	60ba      	str	r2, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	dbf1      	blt.n	800237e <_write+0x12>
	}
	return len;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_close>:

int _close(int file)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ca:	605a      	str	r2, [r3, #4]
	return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <_isatty>:

int _isatty(int file)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	return 1;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
	return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <_sbrk+0x5c>)
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <_sbrk+0x60>)
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <_sbrk+0x64>)
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <_sbrk+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002434:	f002 fa38 	bl	80048a8 <__errno>
 8002438:	4603      	mov	r3, r0
 800243a:	220c      	movs	r2, #12
 800243c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e009      	b.n	8002458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <_sbrk+0x64>)
 8002454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20010000 	.word	0x20010000
 8002464:	00000400 	.word	0x00000400
 8002468:	2000029c 	.word	0x2000029c
 800246c:	200002b8 	.word	0x200002b8

08002470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <SystemInit+0x5c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a14      	ldr	r2, [pc, #80]	; (80024cc <SystemInit+0x5c>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <SystemInit+0x5c>)
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	4911      	ldr	r1, [pc, #68]	; (80024cc <SystemInit+0x5c>)
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <SystemInit+0x60>)
 8002488:	4013      	ands	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <SystemInit+0x5c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <SystemInit+0x5c>)
 8002492:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <SystemInit+0x5c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <SystemInit+0x5c>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <SystemInit+0x5c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a07      	ldr	r2, [pc, #28]	; (80024cc <SystemInit+0x5c>)
 80024ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80024b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SystemInit+0x5c>)
 80024b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80024ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SystemInit+0x64>)
 80024be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40021000 	.word	0x40021000
 80024d0:	f8ff0000 	.word	0xf8ff0000
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <XPT2046_DelayUS>:
		-4.979353, -0.001750, 0.065168, -13.318824 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e00a      	b.n	80024fc <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 80024e6:	230c      	movs	r3, #12
 80024e8:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 80024ea:	bf00      	nop
 80024ec:	7afb      	ldrb	r3, [r7, #11]
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	72fa      	strb	r2, [r7, #11]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1fa      	bne.n	80024ec <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3301      	adds	r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d3f0      	bcc.n	80024e6 <XPT2046_DelayUS+0xe>
			;

	}

}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 800251a:	2200      	movs	r2, #0
 800251c:	2104      	movs	r1, #4
 800251e:	481d      	ldr	r0, [pc, #116]	; (8002594 <XPT2046_WriteCMD+0x84>)
 8002520:	f001 f959 	bl	80037d6 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8002524:	2200      	movs	r2, #0
 8002526:	2101      	movs	r1, #1
 8002528:	481a      	ldr	r0, [pc, #104]	; (8002594 <XPT2046_WriteCMD+0x84>)
 800252a:	f001 f954 	bl	80037d6 <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e027      	b.n	8002584 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002534:	79fa      	ldrb	r2, [r7, #7]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	f1c3 0307 	rsb	r3, r3, #7
 800253c:	fa42 f303 	asr.w	r3, r2, r3
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <XPT2046_WriteCMD+0x44>
 8002548:	2201      	movs	r2, #1
 800254a:	2104      	movs	r1, #4
 800254c:	4811      	ldr	r0, [pc, #68]	; (8002594 <XPT2046_WriteCMD+0x84>)
 800254e:	f001 f942 	bl	80037d6 <HAL_GPIO_WritePin>
 8002552:	e004      	b.n	800255e <XPT2046_WriteCMD+0x4e>
 8002554:	2200      	movs	r2, #0
 8002556:	2104      	movs	r1, #4
 8002558:	480e      	ldr	r0, [pc, #56]	; (8002594 <XPT2046_WriteCMD+0x84>)
 800255a:	f001 f93c 	bl	80037d6 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 800255e:	2005      	movs	r0, #5
 8002560:	f7ff ffba 	bl	80024d8 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8002564:	2201      	movs	r2, #1
 8002566:	2101      	movs	r1, #1
 8002568:	480a      	ldr	r0, [pc, #40]	; (8002594 <XPT2046_WriteCMD+0x84>)
 800256a:	f001 f934 	bl	80037d6 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 800256e:	2005      	movs	r0, #5
 8002570:	f7ff ffb2 	bl	80024d8 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8002574:	2200      	movs	r2, #0
 8002576:	2101      	movs	r1, #1
 8002578:	4806      	ldr	r0, [pc, #24]	; (8002594 <XPT2046_WriteCMD+0x84>)
 800257a:	f001 f92c 	bl	80037d6 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	3301      	adds	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b07      	cmp	r3, #7
 8002588:	d9d4      	bls.n	8002534 <XPT2046_WriteCMD+0x24>
	}

}
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40011800 	.word	0x40011800

08002598 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 800259e:	2300      	movs	r3, #0
 80025a0:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 80025a2:	2200      	movs	r2, #0
 80025a4:	2104      	movs	r1, #4
 80025a6:	4819      	ldr	r0, [pc, #100]	; (800260c <XPT2046_ReadCMD+0x74>)
 80025a8:	f001 f915 	bl	80037d6 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80025ac:	2201      	movs	r2, #1
 80025ae:	2101      	movs	r1, #1
 80025b0:	4816      	ldr	r0, [pc, #88]	; (800260c <XPT2046_ReadCMD+0x74>)
 80025b2:	f001 f910 	bl	80037d6 <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 80025b6:	2300      	movs	r3, #0
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	e01e      	b.n	80025fa <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 80025bc:	2200      	movs	r2, #0
 80025be:	2101      	movs	r1, #1
 80025c0:	4812      	ldr	r0, [pc, #72]	; (800260c <XPT2046_ReadCMD+0x74>)
 80025c2:	f001 f908 	bl	80037d6 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 80025c6:	2108      	movs	r1, #8
 80025c8:	4810      	ldr	r0, [pc, #64]	; (800260c <XPT2046_ReadCMD+0x74>)
 80025ca:	f001 f8ed 	bl	80037a8 <HAL_GPIO_ReadPin>
 80025ce:	4603      	mov	r3, r0
 80025d0:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f1c3 030b 	rsb	r3, r3, #11
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	b21a      	sxth	r2, r3
 80025e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b21b      	sxth	r3, r3
 80025e8:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 80025ea:	2201      	movs	r2, #1
 80025ec:	2101      	movs	r1, #1
 80025ee:	4807      	ldr	r0, [pc, #28]	; (800260c <XPT2046_ReadCMD+0x74>)
 80025f0:	f001 f8f1 	bl	80037d6 <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	3301      	adds	r3, #1
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	2b0b      	cmp	r3, #11
 80025fe:	d9dd      	bls.n	80025bc <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8002600:	88bb      	ldrh	r3, [r7, #4]

}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40011800 	.word	0x40011800

08002610 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff77 	bl	8002510 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 8002622:	f7ff ffb9 	bl	8002598 <XPT2046_ReadCMD>
 8002626:	4603      	mov	r3, r0

}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 800263a:	2090      	movs	r0, #144	; 0x90
 800263c:	f7ff ffe8 	bl	8002610 <XPT2046_ReadAdc>
 8002640:	4603      	mov	r3, r0
 8002642:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f7ff ff47 	bl	80024d8 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 800264a:	20d0      	movs	r0, #208	; 0xd0
 800264c:	f7ff ffe0 	bl	8002610 <XPT2046_ReadAdc>
 8002650:	4603      	mov	r3, r0
 8002652:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	89fa      	ldrh	r2, [r7, #14]
 8002658:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	89ba      	ldrh	r2, [r7, #12]
 800265e:	801a      	strh	r2, [r3, #0]

}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b092      	sub	sp, #72	; 0x48
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8002670:	2300      	movs	r3, #0
 8002672:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	2228      	movs	r2, #40	; 0x28
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f002 f93c 	bl	80048fc <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8002684:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002688:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ffce 	bl	8002630 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8002694:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002698:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	3348      	adds	r3, #72	; 0x48
 80026a0:	443b      	add	r3, r7
 80026a2:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 80026a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026aa:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80026ae:	330a      	adds	r3, #10
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	3348      	adds	r3, #72	; 0x48
 80026b4:	443b      	add	r3, r7
 80026b6:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 80026ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026be:	3301      	adds	r3, #1
 80026c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 80026c4:	2110      	movs	r1, #16
 80026c6:	4871      	ldr	r0, [pc, #452]	; (800288c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80026c8:	f001 f86e 	bl	80037a8 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
			&& (ucCount < 10));
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d103      	bne.n	80026da <XPT2046_ReadAdc_Smooth_XY+0x72>
 80026d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026d6:	2b09      	cmp	r3, #9
 80026d8:	d9d4      	bls.n	8002684 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 80026da:	2110      	movs	r1, #16
 80026dc:	486b      	ldr	r0, [pc, #428]	; (800288c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80026de:	f001 f863 	bl	80037a8 <HAL_GPIO_ReadPin>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 80026e8:	4b69      	ldr	r3, [pc, #420]	; (8002890 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 80026ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026f2:	2b0a      	cmp	r3, #10
 80026f4:	f040 80c4 	bne.w	8002880 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 80026f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80026fc:	643b      	str	r3, [r7, #64]	; 0x40
 80026fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8002702:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002706:	63bb      	str	r3, [r7, #56]	; 0x38
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 800270c:	2301      	movs	r3, #1
 800270e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002712:	e02b      	b.n	800276c <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8002714:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	3348      	adds	r3, #72	; 0x48
 800271c:	443b      	add	r3, r7
 800271e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002722:	461a      	mov	r2, r3
 8002724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002726:	4293      	cmp	r3, r2
 8002728:	dd08      	ble.n	800273c <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 800272a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	3348      	adds	r3, #72	; 0x48
 8002732:	443b      	add	r3, r7
 8002734:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002738:	643b      	str	r3, [r7, #64]	; 0x40
 800273a:	e012      	b.n	8002762 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 800273c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	3348      	adds	r3, #72	; 0x48
 8002744:	443b      	add	r3, r7
 8002746:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800274a:	461a      	mov	r2, r3
 800274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274e:	4293      	cmp	r3, r2
 8002750:	da07      	bge.n	8002762 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8002752:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	3348      	adds	r3, #72	; 0x48
 800275a:	443b      	add	r3, r7
 800275c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8002762:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002766:	3301      	adds	r3, #1
 8002768:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800276c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002770:	2b09      	cmp	r3, #9
 8002772:	d9cf      	bls.n	8002714 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8002774:	2301      	movs	r3, #1
 8002776:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800277a:	e02f      	b.n	80027dc <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 800277c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002780:	330a      	adds	r3, #10
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	3348      	adds	r3, #72	; 0x48
 8002786:	443b      	add	r3, r7
 8002788:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800278c:	461a      	mov	r2, r3
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	4293      	cmp	r3, r2
 8002792:	dd09      	ble.n	80027a8 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8002794:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002798:	330a      	adds	r3, #10
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	3348      	adds	r3, #72	; 0x48
 800279e:	443b      	add	r3, r7
 80027a0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a6:	e014      	b.n	80027d2 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 80027a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027ac:	330a      	adds	r3, #10
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	3348      	adds	r3, #72	; 0x48
 80027b2:	443b      	add	r3, r7
 80027b4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80027b8:	461a      	mov	r2, r3
 80027ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027bc:	4293      	cmp	r3, r2
 80027be:	da08      	bge.n	80027d2 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 80027c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027c4:	330a      	adds	r3, #10
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	3348      	adds	r3, #72	; 0x48
 80027ca:	443b      	add	r3, r7
 80027cc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 80027d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027d6:	3301      	adds	r3, #1
 80027d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80027dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	d9cb      	bls.n	800277c <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 80027e4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80027e8:	461a      	mov	r2, r3
 80027ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027ee:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 80027f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80027fa:	4413      	add	r3, r2
 80027fc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002800:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8002802:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002806:	4413      	add	r3, r2
 8002808:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800280c:	4413      	add	r3, r2
 800280e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002812:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8002814:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002818:	4413      	add	r3, r2
 800281a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800281e:	441a      	add	r2, r3
 8002820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002822:	1ad2      	subs	r2, r2, r3
 8002824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002826:	1ad3      	subs	r3, r2, r3
				>> 3;
 8002828:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8002830:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002834:	461a      	mov	r2, r3
 8002836:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800283a:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 800283c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002840:	4413      	add	r3, r2
 8002842:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002846:	4413      	add	r3, r2
 8002848:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800284c:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 800284e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002852:	4413      	add	r3, r2
 8002854:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8002858:	4413      	add	r3, r2
 800285a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800285e:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8002860:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002864:	4413      	add	r3, r2
 8002866:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800286a:	441a      	add	r2, r3
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	1ad3      	subs	r3, r2, r3
				>> 3;
 8002874:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8002876:	b29a      	uxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	805a      	strh	r2, [r3, #2]

		return 1;
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8002880:	2300      	movs	r3, #0

}
 8002882:	4618      	mov	r0, r3
 8002884:	3748      	adds	r7, #72	; 0x48
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40011800 	.word	0x40011800
 8002890:	200002a0 	.word	0x200002a0

08002894 <XPT2046_Calculate_CalibrationFactor>:
#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(
		strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_Coordinate *pScreenSample,
		strType_XPT2046_Calibration *pCalibrationFactor) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3308      	adds	r3, #8
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
			* (pScreenSample[1].y - pScreenSample[2].y))
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	3204      	adds	r2, #4
 80028b6:	8852      	ldrh	r2, [r2, #2]
 80028b8:	4611      	mov	r1, r2
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	3208      	adds	r2, #8
 80028be:	8852      	ldrh	r2, [r2, #2]
 80028c0:	1a8a      	subs	r2, r1, r2
 80028c2:	fb03 f202 	mul.w	r2, r3, r2
			- ((pScreenSample[1].x - pScreenSample[2].x)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3304      	adds	r3, #4
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3308      	adds	r3, #8
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	1acb      	subs	r3, r1, r3
					* (pScreenSample[0].y - pScreenSample[2].y));
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	8849      	ldrh	r1, [r1, #2]
 80028da:	4608      	mov	r0, r1
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	3108      	adds	r1, #8
 80028e0:	8849      	ldrh	r1, [r1, #2]
 80028e2:	1a41      	subs	r1, r0, r1
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
			- ((pScreenSample[1].x - pScreenSample[2].x)
 80028e8:	1ad3      	subs	r3, r2, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fdf6 	bl	80004dc <__aeabi_i2d>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	f7fe f8ba 	bl	8000a80 <__aeabi_dcmpeq>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]
 8002916:	e145      	b.n	8002ba4 <XPT2046_Calculate_CalibrationFactor+0x310>

	else {

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].x)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3308      	adds	r3, #8
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	3204      	adds	r2, #4
 800292a:	8852      	ldrh	r2, [r2, #2]
 800292c:	4611      	mov	r1, r2
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	3208      	adds	r2, #8
 8002932:	8852      	ldrh	r2, [r2, #2]
 8002934:	1a8a      	subs	r2, r1, r2
 8002936:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3304      	adds	r3, #4
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3308      	adds	r3, #8
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	8849      	ldrh	r1, [r1, #2]
 800294e:	4608      	mov	r0, r1
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	3108      	adds	r1, #8
 8002954:	8849      	ldrh	r1, [r1, #2]
 8002956:	1a41      	subs	r1, r0, r1
 8002958:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 800295c:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fdbc 	bl	80004dc <__aeabi_i2d>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3308      	adds	r3, #8
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x))
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	3204      	adds	r2, #4
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	4611      	mov	r1, r2
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	3208      	adds	r2, #8
 8002988:	8812      	ldrh	r2, [r2, #0]
 800298a:	1a8a      	subs	r2, r1, r2
 800298c:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3308      	adds	r3, #8
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	3104      	adds	r1, #4
 80029a2:	8809      	ldrh	r1, [r1, #0]
 80029a4:	4608      	mov	r0, r1
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	3108      	adds	r1, #8
 80029aa:	8809      	ldrh	r1, [r1, #0]
 80029ac:	1a41      	subs	r1, r0, r1
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 80029b2:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fd91 	bl	80004dc <__aeabi_i2d>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3308      	adds	r3, #8
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3304      	adds	r3, #4
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].x)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3304      	adds	r3, #4
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3308      	adds	r3, #8
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	8852      	ldrh	r2, [r2, #2]
 80029ee:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3308      	adds	r3, #8
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].x)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3308      	adds	r3, #8
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	fb00 f303 	mul.w	r3, r0, r3
 8002a12:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	3104      	adds	r1, #4
 8002a18:	8849      	ldrh	r1, [r1, #2]
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8002a1e:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	3304      	adds	r3, #4
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].x)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	fb00 f303 	mul.w	r3, r0, r3
 8002a40:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	3108      	adds	r1, #8
 8002a46:	8849      	ldrh	r1, [r1, #2]
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8002a4c:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd44 	bl	80004dc <__aeabi_i2d>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	885b      	ldrh	r3, [r3, #2]
 8002a62:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].y)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3308      	adds	r3, #8
 8002a68:	885b      	ldrh	r3, [r3, #2]
 8002a6a:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	3204      	adds	r2, #4
 8002a70:	8852      	ldrh	r2, [r2, #2]
 8002a72:	4611      	mov	r1, r2
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	3208      	adds	r2, #8
 8002a78:	8852      	ldrh	r2, [r2, #2]
 8002a7a:	1a8a      	subs	r2, r1, r2
 8002a7c:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3304      	adds	r3, #4
 8002a84:	885b      	ldrh	r3, [r3, #2]
 8002a86:	4619      	mov	r1, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	885b      	ldrh	r3, [r3, #2]
 8002a8e:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	8849      	ldrh	r1, [r1, #2]
 8002a94:	4608      	mov	r0, r1
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	3108      	adds	r1, #8
 8002a9a:	8849      	ldrh	r1, [r1, #2]
 8002a9c:	1a41      	subs	r1, r0, r1
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8002aa2:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd19 	bl	80004dc <__aeabi_i2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3308      	adds	r3, #8
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y))
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	3204      	adds	r2, #4
 8002ac6:	8852      	ldrh	r2, [r2, #2]
 8002ac8:	4611      	mov	r1, r2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	3208      	adds	r2, #8
 8002ace:	8852      	ldrh	r2, [r2, #2]
 8002ad0:	1a8a      	subs	r2, r1, r2
 8002ad2:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	885b      	ldrh	r3, [r3, #2]
 8002ada:	4619      	mov	r1, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3308      	adds	r3, #8
 8002ae0:	885b      	ldrh	r3, [r3, #2]
 8002ae2:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	3104      	adds	r1, #4
 8002ae8:	8809      	ldrh	r1, [r1, #0]
 8002aea:	4608      	mov	r0, r1
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	3108      	adds	r1, #8
 8002af0:	8809      	ldrh	r1, [r1, #0]
 8002af2:	1a41      	subs	r1, r0, r1
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8002af8:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fcee 	bl	80004dc <__aeabi_i2d>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3304      	adds	r3, #4
 8002b16:	885b      	ldrh	r3, [r3, #2]
 8002b18:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].y)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	4619      	mov	r1, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3308      	adds	r3, #8
 8002b28:	885b      	ldrh	r3, [r3, #2]
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	8852      	ldrh	r2, [r2, #2]
 8002b34:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3308      	adds	r3, #8
 8002b42:	885b      	ldrh	r3, [r3, #2]
 8002b44:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].y)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	885b      	ldrh	r3, [r3, #2]
 8002b54:	fb00 f303 	mul.w	r3, r0, r3
 8002b58:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	3104      	adds	r1, #4
 8002b5e:	8849      	ldrh	r1, [r1, #2]
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8002b64:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	885b      	ldrh	r3, [r3, #2]
 8002b72:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].y)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	885b      	ldrh	r3, [r3, #2]
 8002b82:	fb00 f303 	mul.w	r3, r0, r3
 8002b86:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	3108      	adds	r1, #8
 8002b8c:	8849      	ldrh	r1, [r1, #2]
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8002b92:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fca1 	bl	80004dc <__aeabi_i2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}

	return ucRet;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]

}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void) {
 8002bb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bb4:	b0a0      	sub	sp, #128	; 0x80
 8002bb6:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char *pStr = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	66bb      	str	r3, [r7, #104]	; 0x68
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 8002bd4:	23f0      	movs	r3, #240	; 0xf0
 8002bd6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 8002bda:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002bde:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	    usScreenWidth = LCD_Default_Max_Heigth;
	    usScreenHeigth = LCD_Default_Max_Width;
	
	  #endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 8002be2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 8002bee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8002bfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bfe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8002c02:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	109b      	asrs	r3, r3, #2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8002c14:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	109b      	asrs	r3, r3, #2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8002c26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c2a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8002c2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c32:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8002c36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c3a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	LCD_GramScan(1);
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f7fe fd1e 	bl	8001680 <LCD_GramScan>

	for (i = 0; i < 4; i++) {
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c4a:	e047      	b.n	8002cdc <XPT2046_Touch_Calibrate+0x12c>
		LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8002c4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c50:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c54:	2100      	movs	r1, #0
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fe fb8e 	bl	8001378 <LCD_Clear>

		pStr = "Touch Calibrate ......";
 8002c5c:	4bb6      	ldr	r3, [pc, #728]	; (8002f38 <XPT2046_Touch_Calibrate+0x388>)
 8002c5e:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color(
				(usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1,
 8002c60:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8002c64:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002c66:	f7fd fadf 	bl	8000228 <strlen>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	3b07      	subs	r3, #7
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1ae3      	subs	r3, r4, r3
 8002c72:	085b      	lsrs	r3, r3, #1
		LCD_DrawString_Color(
 8002c74:	b298      	uxth	r0, r3
 8002c76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	b299      	uxth	r1, r3
 8002c7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c8a:	f7fe fcc3 	bl	8001614 <LCD_DrawString_Color>
		/*
		sprintf(cStr, "%d", i + 1);
		LCD_DrawString_Color(usScreenWidth >> 1,
				(usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
		*/
		XPT2046_DelayUS(100000);
 8002c8e:	48ab      	ldr	r0, [pc, #684]	; (8002f3c <XPT2046_Touch_Calibrate+0x38c>)
 8002c90:	f7ff fc22 	bl	80024d8 <XPT2046_DelayUS>

		LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8002c94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	3378      	adds	r3, #120	; 0x78
 8002c9c:	443b      	add	r3, r7
 8002c9e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002ca2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	3378      	adds	r3, #120	; 0x78
 8002caa:	443b      	add	r3, r7
 8002cac:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f7fe fc8c 	bl	80015d0 <LCD_DrawCross>

		while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
 8002cb8:	bf00      	nop
 8002cba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002cbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fcce 	bl	8002668 <XPT2046_ReadAdc_Smooth_XY>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f3      	beq.n	8002cba <XPT2046_Touch_Calibrate+0x10a>
	for (i = 0; i < 4; i++) {
 8002cd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002cdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d9b3      	bls.n	8002c4c <XPT2046_Touch_Calibrate+0x9c>
			;

	}

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample,
 8002ce4:	463a      	mov	r2, r7
 8002ce6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fdd0 	bl	8002894 <XPT2046_Calculate_CalibrationFactor>
			&CalibrationFactor);

	if (CalibrationFactor.Divider == 0)
 8002cf4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	f7fd febe 	bl	8000a80 <__aeabi_dcmpeq>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8113 	bne.w	8002f32 <XPT2046_Touch_Calibrate+0x382>
		goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8002d0c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fbe1 	bl	80004dc <__aeabi_i2d>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f7fd fc45 	bl	80005b0 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4690      	mov	r8, r2
 8002d2c:	4699      	mov	r9, r3
			+ (CalibrationFactor.Bn * strScreenSample[3].y)
 8002d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fbd0 	bl	80004dc <__aeabi_i2d>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4620      	mov	r0, r4
 8002d42:	4629      	mov	r1, r5
 8002d44:	f7fd fc34 	bl	80005b0 <__aeabi_dmul>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4640      	mov	r0, r8
 8002d4e:	4649      	mov	r1, r9
 8002d50:	f7fd fa78 	bl	8000244 <__adddf3>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
			+ CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8002d5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d60:	f7fd fa70 	bl	8000244 <__adddf3>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d70:	f7fd fd48 	bl	8000804 <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd fef0 	bl	8000b60 <__aeabi_d2uiz>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8002d86:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002d8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fba4 	bl	80004dc <__aeabi_i2d>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4620      	mov	r0, r4
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	f7fd fc08 	bl	80005b0 <__aeabi_dmul>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4690      	mov	r8, r2
 8002da6:	4699      	mov	r9, r3
			+ (CalibrationFactor.En * strScreenSample[3].y)
 8002da8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002dac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fb93 	bl	80004dc <__aeabi_i2d>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7fd fbf7 	bl	80005b0 <__aeabi_dmul>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4640      	mov	r0, r8
 8002dc8:	4649      	mov	r1, r9
 8002dca:	f7fd fa3b 	bl	8000244 <__adddf3>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
			+ CalibrationFactor.Fn) / CalibrationFactor.Divider;
 8002dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dda:	f7fd fa33 	bl	8000244 <__adddf3>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002dea:	f7fd fd0b 	bl	8000804 <__aeabi_ddiv>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd feb3 	bl	8000b60 <__aeabi_d2uiz>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x =
			(usTest_x > strCrossCoordinate[3].x) ?
 8002e00:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8002e04:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d906      	bls.n	8002e1a <XPT2046_Touch_Calibrate+0x26a>
					(usTest_x - strCrossCoordinate[3].x) :
 8002e0c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8002e10:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	e005      	b.n	8002e26 <XPT2046_Touch_Calibrate+0x276>
					(strCrossCoordinate[3].x - usTest_x);
 8002e1a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	usGap_x =
 8002e1e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y =
			(usTest_y > strCrossCoordinate[3].y) ?
 8002e2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8002e2e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d906      	bls.n	8002e44 <XPT2046_Touch_Calibrate+0x294>
					(usTest_y - strCrossCoordinate[3].y) :
 8002e36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8002e3a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	e005      	b.n	8002e50 <XPT2046_Touch_Calibrate+0x2a0>
					(strCrossCoordinate[3].y - usTest_y);
 8002e44:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
	usGap_y =
 8002e48:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((usGap_x > 10) || (usGap_y > 10))
 8002e54:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002e58:	2b0a      	cmp	r3, #10
 8002e5a:	d877      	bhi.n	8002f4c <XPT2046_Touch_Calibrate+0x39c>
 8002e5c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002e60:	2b0a      	cmp	r3, #10
 8002e62:	d873      	bhi.n	8002f4c <XPT2046_Touch_Calibrate+0x39c>
		goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8002e64:	e9d7 0100 	ldrd	r0, r1, [r7]
			/ CalibrationFactor.Divider;
 8002e68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e6c:	f7fd fcca 	bl	8000804 <__aeabi_ddiv>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8002e74:	4932      	ldr	r1, [pc, #200]	; (8002f40 <XPT2046_Touch_Calibrate+0x390>)
 8002e76:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8002e7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
			/ CalibrationFactor.Divider;
 8002e7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e82:	f7fd fcbf 	bl	8000804 <__aeabi_ddiv>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8002e8a:	492d      	ldr	r1, [pc, #180]	; (8002f40 <XPT2046_Touch_Calibrate+0x390>)
 8002e8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8002e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
			/ CalibrationFactor.Divider;
 8002e94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e98:	f7fd fcb4 	bl	8000804 <__aeabi_ddiv>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8002ea0:	4927      	ldr	r1, [pc, #156]	; (8002f40 <XPT2046_Touch_Calibrate+0x390>)
 8002ea2:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 8002ea6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			/ CalibrationFactor.Divider;
 8002eaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002eae:	f7fd fca9 	bl	8000804 <__aeabi_ddiv>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 8002eb6:	4922      	ldr	r1, [pc, #136]	; (8002f40 <XPT2046_Touch_Calibrate+0x390>)
 8002eb8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8002ebc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
			/ CalibrationFactor.Divider;
 8002ec0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ec4:	f7fd fc9e 	bl	8000804 <__aeabi_ddiv>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8002ecc:	491c      	ldr	r1, [pc, #112]	; (8002f40 <XPT2046_Touch_Calibrate+0x390>)
 8002ece:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8002ed2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
			/ CalibrationFactor.Divider;
 8002ed6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002eda:	f7fd fc93 	bl	8000804 <__aeabi_ddiv>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8002ee2:	4917      	ldr	r1, [pc, #92]	; (8002f40 <XPT2046_Touch_Calibrate+0x390>)
 8002ee4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

#endif

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8002ee8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002eec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fe fa40 	bl	8001378 <LCD_Clear>

	pStr = "Welcome !";
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <XPT2046_Touch_Calibrate+0x394>)
 8002efa:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8002efc:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8002f00:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002f02:	f7fd f991 	bl	8000228 <strlen>
 8002f06:	4603      	mov	r3, r0
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	1ae3      	subs	r3, r4, r3
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	b298      	uxth	r0, r3
 8002f10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	b299      	uxth	r1, r3
 8002f18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f24:	f7fe fb76 	bl	8001614 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(200000);
 8002f28:	4807      	ldr	r0, [pc, #28]	; (8002f48 <XPT2046_Touch_Calibrate+0x398>)
 8002f2a:	f7ff fad5 	bl	80024d8 <XPT2046_DelayUS>

	return 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e04b      	b.n	8002fca <XPT2046_Touch_Calibrate+0x41a>
		goto Failure;
 8002f32:	bf00      	nop
 8002f34:	e00b      	b.n	8002f4e <XPT2046_Touch_Calibrate+0x39e>
 8002f36:	bf00      	nop
 8002f38:	08009244 	.word	0x08009244
 8002f3c:	000186a0 	.word	0x000186a0
 8002f40:	20000008 	.word	0x20000008
 8002f44:	0800925c 	.word	0x0800925c
 8002f48:	00030d40 	.word	0x00030d40
		goto Failure;
 8002f4c:	bf00      	nop

	Failure:

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8002f4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f52:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f56:	2100      	movs	r1, #0
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f7fe fa0d 	bl	8001378 <LCD_Clear>

	pStr = "Calibrate fail";
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <XPT2046_Touch_Calibrate+0x424>)
 8002f60:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8002f62:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8002f66:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002f68:	f7fd f95e 	bl	8000228 <strlen>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	1ae3      	subs	r3, r4, r3
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	b298      	uxth	r0, r3
 8002f76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	b299      	uxth	r1, r3
 8002f7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f8a:	f7fe fb43 	bl	8001614 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	pStr = "try again";
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <XPT2046_Touch_Calibrate+0x428>)
 8002f90:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8002f92:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8002f96:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002f98:	f7fd f946 	bl	8000228 <strlen>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	1ae3      	subs	r3, r4, r3
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	b298      	uxth	r0, r3
 8002fa6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3310      	adds	r3, #16
 8002fb0:	b299      	uxth	r1, r3
 8002fb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fbe:	f7fe fb29 	bl	8001614 <LCD_DrawString_Color>
			(usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);
 8002fc2:	4806      	ldr	r0, [pc, #24]	; (8002fdc <XPT2046_Touch_Calibrate+0x42c>)
 8002fc4:	f7ff fa88 	bl	80024d8 <XPT2046_DelayUS>

	return 0;
 8002fc8:	2300      	movs	r3, #0

}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3778      	adds	r7, #120	; 0x78
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fd4:	08009268 	.word	0x08009268
 8002fd8:	08009278 	.word	0x08009278
 8002fdc:	000f4240 	.word	0x000f4240

08002fe0 <XPT2046_Get_TouchedPoint>:

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8002fe0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8002ff0:	f107 0308 	add.w	r3, r7, #8
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fb37 	bl	8002668 <XPT2046_ReadAdc_Smooth_XY>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d06e      	beq.n	80030de <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003006:	893b      	ldrh	r3, [r7, #8]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa67 	bl	80004dc <__aeabi_i2d>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4620      	mov	r0, r4
 8003014:	4629      	mov	r1, r5
 8003016:	f7fd facb 	bl	80005b0 <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4690      	mov	r8, r2
 8003020:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003028:	897b      	ldrh	r3, [r7, #10]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fa56 	bl	80004dc <__aeabi_i2d>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4620      	mov	r0, r4
 8003036:	4629      	mov	r1, r5
 8003038:	f7fd faba 	bl	80005b0 <__aeabi_dmul>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4640      	mov	r0, r8
 8003042:	4649      	mov	r1, r9
 8003044:	f7fd f8fe 	bl	8000244 <__adddf3>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003056:	f7fd f8f5 	bl	8000244 <__adddf3>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f7fd fd7d 	bl	8000b60 <__aeabi_d2uiz>
 8003066:	4603      	mov	r3, r0
 8003068:	b29a      	uxth	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003074:	893b      	ldrh	r3, [r7, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa30 	bl	80004dc <__aeabi_i2d>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4620      	mov	r0, r4
 8003082:	4629      	mov	r1, r5
 8003084:	f7fd fa94 	bl	80005b0 <__aeabi_dmul>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4690      	mov	r8, r2
 800308e:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa1f 	bl	80004dc <__aeabi_i2d>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f7fd fa83 	bl	80005b0 <__aeabi_dmul>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4640      	mov	r0, r8
 80030b0:	4649      	mov	r1, r9
 80030b2:	f7fd f8c7 	bl	8000244 <__adddf3>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80030c4:	f7fd f8be 	bl	8000244 <__adddf3>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	f7fd fd46 	bl	8000b60 <__aeabi_d2uiz>
 80030d4:	4603      	mov	r3, r0
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	805a      	strh	r2, [r3, #2]
 80030dc:	e001      	b.n	80030e2 <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]

}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080030ee <XPT2046_Reset_TouchPoint>:

void XPT2046_Reset_TouchPoint(strType_XPT2046_Coordinate *pDisplayCoordinate){
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
	//Reset X and Y
	pDisplayCoordinate->x = 0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	801a      	strh	r2, [r3, #0]
	pDisplayCoordinate->y = 0;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	805a      	strh	r2, [r3, #2]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800310c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800310e:	e003      	b.n	8003118 <LoopCopyDataInit>

08003110 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003112:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003114:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003116:	3104      	adds	r1, #4

08003118 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003118:	480a      	ldr	r0, [pc, #40]	; (8003144 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800311c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800311e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003120:	d3f6      	bcc.n	8003110 <CopyDataInit>
  ldr r2, =_sbss
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003124:	e002      	b.n	800312c <LoopFillZerobss>

08003126 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003126:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003128:	f842 3b04 	str.w	r3, [r2], #4

0800312c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800312e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003130:	d3f9      	bcc.n	8003126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003132:	f7ff f99d 	bl	8002470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003136:	f001 fbbd 	bl	80048b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800313a:	f7fe fb67 	bl	800180c <main>
  bx lr
 800313e:	4770      	bx	lr
  ldr r3, =_sidata
 8003140:	08009d94 	.word	0x08009d94
  ldr r0, =_sdata
 8003144:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003148:	20000214 	.word	0x20000214
  ldr r2, =_sbss
 800314c:	20000214 	.word	0x20000214
  ldr r3, = _ebss
 8003150:	200002b8 	.word	0x200002b8

08003154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003154:	e7fe      	b.n	8003154 <ADC1_2_IRQHandler>
	...

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_Init+0x28>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a07      	ldr	r2, [pc, #28]	; (8003180 <HAL_Init+0x28>)
 8003162:	f043 0310 	orr.w	r3, r3, #16
 8003166:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003168:	2003      	movs	r0, #3
 800316a:	f000 f943 	bl	80033f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800316e:	2000      	movs	r0, #0
 8003170:	f000 f808 	bl	8003184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003174:	f7fe ffd4 	bl	8002120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40022000 	.word	0x40022000

08003184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_InitTick+0x54>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_InitTick+0x58>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800319a:	fbb3 f3f1 	udiv	r3, r3, r1
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f95b 	bl	800345e <HAL_SYSTICK_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00e      	b.n	80031d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d80a      	bhi.n	80031ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031b8:	2200      	movs	r2, #0
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	f000 f923 	bl	800340a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031c4:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <HAL_InitTick+0x5c>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000000 	.word	0x20000000
 80031dc:	2000003c 	.word	0x2000003c
 80031e0:	20000038 	.word	0x20000038

080031e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_IncTick+0x1c>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_IncTick+0x20>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	4a03      	ldr	r2, [pc, #12]	; (8003204 <HAL_IncTick+0x20>)
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	2000003c 	.word	0x2000003c
 8003204:	200002a4 	.word	0x200002a4

08003208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return uwTick;
 800320c:	4b02      	ldr	r3, [pc, #8]	; (8003218 <HAL_GetTick+0x10>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	200002a4 	.word	0x200002a4

0800321c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003224:	f7ff fff0 	bl	8003208 <HAL_GetTick>
 8003228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d005      	beq.n	8003242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003236:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_Delay+0x44>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003242:	bf00      	nop
 8003244:	f7ff ffe0 	bl	8003208 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	429a      	cmp	r2, r3
 8003252:	d8f7      	bhi.n	8003244 <HAL_Delay+0x28>
  {
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	2000003c 	.word	0x2000003c

08003264 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <NVIC_SetPriorityGrouping+0x44>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003280:	4013      	ands	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800328c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003296:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <NVIC_SetPriorityGrouping+0x44>)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	60d3      	str	r3, [r2, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <NVIC_GetPriorityGrouping+0x18>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 0307 	and.w	r3, r3, #7
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	f003 021f 	and.w	r2, r3, #31
 80032d8:	4906      	ldr	r1, [pc, #24]	; (80032f4 <NVIC_EnableIRQ+0x2c>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2001      	movs	r0, #1
 80032e2:	fa00 f202 	lsl.w	r2, r0, r2
 80032e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	da0b      	bge.n	8003324 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	; (8003344 <NVIC_SetPriority+0x4c>)
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	3b04      	subs	r3, #4
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	440b      	add	r3, r1
 8003320:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003322:	e009      	b.n	8003338 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4907      	ldr	r1, [pc, #28]	; (8003348 <NVIC_SetPriority+0x50>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	440b      	add	r3, r1
 8003334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000ed00 	.word	0xe000ed00
 8003348:	e000e100 	.word	0xe000e100

0800334c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
         );
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c0:	d301      	bcc.n	80033c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00f      	b.n	80033e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <SysTick_Config+0x40>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ce:	210f      	movs	r1, #15
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	f7ff ff90 	bl	80032f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <SysTick_Config+0x40>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <SysTick_Config+0x40>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	e000e010 	.word	0xe000e010

080033f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff31 	bl	8003264 <NVIC_SetPriorityGrouping>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	4603      	mov	r3, r0
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800341c:	f7ff ff46 	bl	80032ac <NVIC_GetPriorityGrouping>
 8003420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	6978      	ldr	r0, [r7, #20]
 8003428:	f7ff ff90 	bl	800334c <NVIC_EncodePriority>
 800342c:	4602      	mov	r2, r0
 800342e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff5f 	bl	80032f8 <NVIC_SetPriority>
}
 800343a:	bf00      	nop
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	4603      	mov	r3, r0
 800344a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff39 	bl	80032c8 <NVIC_EnableIRQ>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ffa2 	bl	80033b0 <SysTick_Config>
 800346c:	4603      	mov	r3, r0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003478:	b480      	push	{r7}
 800347a:	b08b      	sub	sp, #44	; 0x2c
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
 800349a:	e179      	b.n	8003790 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800349c:	2201      	movs	r2, #1
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	f040 8168 	bne.w	800378a <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4a96      	ldr	r2, [pc, #600]	; (8003718 <HAL_GPIO_Init+0x2a0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d05e      	beq.n	8003582 <HAL_GPIO_Init+0x10a>
 80034c4:	4a94      	ldr	r2, [pc, #592]	; (8003718 <HAL_GPIO_Init+0x2a0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d875      	bhi.n	80035b6 <HAL_GPIO_Init+0x13e>
 80034ca:	4a94      	ldr	r2, [pc, #592]	; (800371c <HAL_GPIO_Init+0x2a4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d058      	beq.n	8003582 <HAL_GPIO_Init+0x10a>
 80034d0:	4a92      	ldr	r2, [pc, #584]	; (800371c <HAL_GPIO_Init+0x2a4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d86f      	bhi.n	80035b6 <HAL_GPIO_Init+0x13e>
 80034d6:	4a92      	ldr	r2, [pc, #584]	; (8003720 <HAL_GPIO_Init+0x2a8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d052      	beq.n	8003582 <HAL_GPIO_Init+0x10a>
 80034dc:	4a90      	ldr	r2, [pc, #576]	; (8003720 <HAL_GPIO_Init+0x2a8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d869      	bhi.n	80035b6 <HAL_GPIO_Init+0x13e>
 80034e2:	4a90      	ldr	r2, [pc, #576]	; (8003724 <HAL_GPIO_Init+0x2ac>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d04c      	beq.n	8003582 <HAL_GPIO_Init+0x10a>
 80034e8:	4a8e      	ldr	r2, [pc, #568]	; (8003724 <HAL_GPIO_Init+0x2ac>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d863      	bhi.n	80035b6 <HAL_GPIO_Init+0x13e>
 80034ee:	4a8e      	ldr	r2, [pc, #568]	; (8003728 <HAL_GPIO_Init+0x2b0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d046      	beq.n	8003582 <HAL_GPIO_Init+0x10a>
 80034f4:	4a8c      	ldr	r2, [pc, #560]	; (8003728 <HAL_GPIO_Init+0x2b0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d85d      	bhi.n	80035b6 <HAL_GPIO_Init+0x13e>
 80034fa:	2b12      	cmp	r3, #18
 80034fc:	d82a      	bhi.n	8003554 <HAL_GPIO_Init+0xdc>
 80034fe:	2b12      	cmp	r3, #18
 8003500:	d859      	bhi.n	80035b6 <HAL_GPIO_Init+0x13e>
 8003502:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <HAL_GPIO_Init+0x90>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	08003583 	.word	0x08003583
 800350c:	0800355d 	.word	0x0800355d
 8003510:	0800356f 	.word	0x0800356f
 8003514:	080035b1 	.word	0x080035b1
 8003518:	080035b7 	.word	0x080035b7
 800351c:	080035b7 	.word	0x080035b7
 8003520:	080035b7 	.word	0x080035b7
 8003524:	080035b7 	.word	0x080035b7
 8003528:	080035b7 	.word	0x080035b7
 800352c:	080035b7 	.word	0x080035b7
 8003530:	080035b7 	.word	0x080035b7
 8003534:	080035b7 	.word	0x080035b7
 8003538:	080035b7 	.word	0x080035b7
 800353c:	080035b7 	.word	0x080035b7
 8003540:	080035b7 	.word	0x080035b7
 8003544:	080035b7 	.word	0x080035b7
 8003548:	080035b7 	.word	0x080035b7
 800354c:	08003565 	.word	0x08003565
 8003550:	08003579 	.word	0x08003579
 8003554:	4a75      	ldr	r2, [pc, #468]	; (800372c <HAL_GPIO_Init+0x2b4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800355a:	e02c      	b.n	80035b6 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	623b      	str	r3, [r7, #32]
          break;
 8003562:	e029      	b.n	80035b8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	3304      	adds	r3, #4
 800356a:	623b      	str	r3, [r7, #32]
          break;
 800356c:	e024      	b.n	80035b8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	3308      	adds	r3, #8
 8003574:	623b      	str	r3, [r7, #32]
          break;
 8003576:	e01f      	b.n	80035b8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	330c      	adds	r3, #12
 800357e:	623b      	str	r3, [r7, #32]
          break;
 8003580:	e01a      	b.n	80035b8 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800358a:	2304      	movs	r3, #4
 800358c:	623b      	str	r3, [r7, #32]
          break;
 800358e:	e013      	b.n	80035b8 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003598:	2308      	movs	r3, #8
 800359a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	611a      	str	r2, [r3, #16]
          break;
 80035a2:	e009      	b.n	80035b8 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035a4:	2308      	movs	r3, #8
 80035a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	615a      	str	r2, [r3, #20]
          break;
 80035ae:	e003      	b.n	80035b8 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035b0:	2300      	movs	r3, #0
 80035b2:	623b      	str	r3, [r7, #32]
          break;
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x140>
          break;
 80035b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2bff      	cmp	r3, #255	; 0xff
 80035bc:	d801      	bhi.n	80035c2 <HAL_GPIO_Init+0x14a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	e001      	b.n	80035c6 <HAL_GPIO_Init+0x14e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2bff      	cmp	r3, #255	; 0xff
 80035cc:	d802      	bhi.n	80035d4 <HAL_GPIO_Init+0x15c>
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	e002      	b.n	80035da <HAL_GPIO_Init+0x162>
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	3b08      	subs	r3, #8
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	210f      	movs	r1, #15
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	401a      	ands	r2, r3
 80035ec:	6a39      	ldr	r1, [r7, #32]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80c1 	beq.w	800378a <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003608:	4b49      	ldr	r3, [pc, #292]	; (8003730 <HAL_GPIO_Init+0x2b8>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	4a48      	ldr	r2, [pc, #288]	; (8003730 <HAL_GPIO_Init+0x2b8>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6193      	str	r3, [r2, #24]
 8003614:	4b46      	ldr	r3, [pc, #280]	; (8003730 <HAL_GPIO_Init+0x2b8>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8003620:	4a44      	ldr	r2, [pc, #272]	; (8003734 <HAL_GPIO_Init+0x2bc>)
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	3302      	adds	r3, #2
 8003628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	220f      	movs	r2, #15
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4013      	ands	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a3c      	ldr	r2, [pc, #240]	; (8003738 <HAL_GPIO_Init+0x2c0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d01f      	beq.n	800368c <HAL_GPIO_Init+0x214>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a3b      	ldr	r2, [pc, #236]	; (800373c <HAL_GPIO_Init+0x2c4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d019      	beq.n	8003688 <HAL_GPIO_Init+0x210>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a3a      	ldr	r2, [pc, #232]	; (8003740 <HAL_GPIO_Init+0x2c8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <HAL_GPIO_Init+0x20c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a39      	ldr	r2, [pc, #228]	; (8003744 <HAL_GPIO_Init+0x2cc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00d      	beq.n	8003680 <HAL_GPIO_Init+0x208>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a38      	ldr	r2, [pc, #224]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <HAL_GPIO_Init+0x204>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a37      	ldr	r2, [pc, #220]	; (800374c <HAL_GPIO_Init+0x2d4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_GPIO_Init+0x200>
 8003674:	2305      	movs	r3, #5
 8003676:	e00a      	b.n	800368e <HAL_GPIO_Init+0x216>
 8003678:	2306      	movs	r3, #6
 800367a:	e008      	b.n	800368e <HAL_GPIO_Init+0x216>
 800367c:	2304      	movs	r3, #4
 800367e:	e006      	b.n	800368e <HAL_GPIO_Init+0x216>
 8003680:	2303      	movs	r3, #3
 8003682:	e004      	b.n	800368e <HAL_GPIO_Init+0x216>
 8003684:	2302      	movs	r3, #2
 8003686:	e002      	b.n	800368e <HAL_GPIO_Init+0x216>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_GPIO_Init+0x216>
 800368c:	2300      	movs	r3, #0
 800368e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003690:	f002 0203 	and.w	r2, r2, #3
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	4093      	lsls	r3, r2
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800369e:	4925      	ldr	r1, [pc, #148]	; (8003734 <HAL_GPIO_Init+0x2bc>)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d006      	beq.n	80036c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4924      	ldr	r1, [pc, #144]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	e006      	b.n	80036d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	4920      	ldr	r1, [pc, #128]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d006      	beq.n	80036ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	491a      	ldr	r1, [pc, #104]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
 80036ec:	e006      	b.n	80036fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	4916      	ldr	r1, [pc, #88]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d025      	beq.n	8003754 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	4910      	ldr	r1, [pc, #64]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]
 8003714:	e025      	b.n	8003762 <HAL_GPIO_Init+0x2ea>
 8003716:	bf00      	nop
 8003718:	10320000 	.word	0x10320000
 800371c:	10310000 	.word	0x10310000
 8003720:	10220000 	.word	0x10220000
 8003724:	10210000 	.word	0x10210000
 8003728:	10120000 	.word	0x10120000
 800372c:	10110000 	.word	0x10110000
 8003730:	40021000 	.word	0x40021000
 8003734:	40010000 	.word	0x40010000
 8003738:	40010800 	.word	0x40010800
 800373c:	40010c00 	.word	0x40010c00
 8003740:	40011000 	.word	0x40011000
 8003744:	40011400 	.word	0x40011400
 8003748:	40011800 	.word	0x40011800
 800374c:	40011c00 	.word	0x40011c00
 8003750:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	43db      	mvns	r3, r3
 800375c:	4911      	ldr	r1, [pc, #68]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 800375e:	4013      	ands	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	490c      	ldr	r1, [pc, #48]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	60cb      	str	r3, [r1, #12]
 800377a:	e006      	b.n	800378a <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	43db      	mvns	r3, r3
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 8003786:	4013      	ands	r3, r2
 8003788:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	3301      	adds	r3, #1
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	2b0f      	cmp	r3, #15
 8003794:	f67f ae82 	bls.w	800349c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	372c      	adds	r7, #44	; 0x2c
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	40010400 	.word	0x40010400

080037a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e001      	b.n	80037ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	807b      	strh	r3, [r7, #2]
 80037e2:	4613      	mov	r3, r2
 80037e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037e6:	787b      	ldrb	r3, [r7, #1]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ec:	887a      	ldrh	r2, [r7, #2]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f2:	e003      	b.n	80037fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f4:	887b      	ldrh	r3, [r7, #2]
 80037f6:	041a      	lsls	r2, r3, #16
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	611a      	str	r2, [r3, #16]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
	...

08003808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d006      	beq.n	800382c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800381e:	4a05      	ldr	r2, [pc, #20]	; (8003834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f806 	bl	8003838 <HAL_GPIO_EXTI_Callback>
  }
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40010400 	.word	0x40010400

08003838 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	420e0020 	.word	0x420e0020

08003864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8087 	beq.w	800398c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800387e:	4b92      	ldr	r3, [pc, #584]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b04      	cmp	r3, #4
 8003888:	d00c      	beq.n	80038a4 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800388a:	4b8f      	ldr	r3, [pc, #572]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b08      	cmp	r3, #8
 8003894:	d112      	bne.n	80038bc <HAL_RCC_OscConfig+0x58>
 8003896:	4b8c      	ldr	r3, [pc, #560]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a2:	d10b      	bne.n	80038bc <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	4b88      	ldr	r3, [pc, #544]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d06c      	beq.n	800398a <HAL_RCC_OscConfig+0x126>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d168      	bne.n	800398a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e22d      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c4:	d106      	bne.n	80038d4 <HAL_RCC_OscConfig+0x70>
 80038c6:	4b80      	ldr	r3, [pc, #512]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7f      	ldr	r2, [pc, #508]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80038cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e02e      	b.n	8003932 <HAL_RCC_OscConfig+0xce>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10c      	bne.n	80038f6 <HAL_RCC_OscConfig+0x92>
 80038dc:	4b7a      	ldr	r3, [pc, #488]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a79      	ldr	r2, [pc, #484]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b77      	ldr	r3, [pc, #476]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a76      	ldr	r2, [pc, #472]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	e01d      	b.n	8003932 <HAL_RCC_OscConfig+0xce>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038fe:	d10c      	bne.n	800391a <HAL_RCC_OscConfig+0xb6>
 8003900:	4b71      	ldr	r3, [pc, #452]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a70      	ldr	r2, [pc, #448]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003906:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b6e      	ldr	r3, [pc, #440]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6d      	ldr	r2, [pc, #436]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e00b      	b.n	8003932 <HAL_RCC_OscConfig+0xce>
 800391a:	4b6b      	ldr	r3, [pc, #428]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a6a      	ldr	r2, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a67      	ldr	r2, [pc, #412]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 800392c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003930:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d013      	beq.n	8003962 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7ff fc65 	bl	8003208 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003942:	f7ff fc61 	bl	8003208 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b64      	cmp	r3, #100	; 0x64
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1e1      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003954:	4b5c      	ldr	r3, [pc, #368]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0xde>
 8003960:	e014      	b.n	800398c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7ff fc51 	bl	8003208 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800396a:	f7ff fc4d 	bl	8003208 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b64      	cmp	r3, #100	; 0x64
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e1cd      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397c:	4b52      	ldr	r3, [pc, #328]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x106>
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d063      	beq.n	8003a60 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003998:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039a4:	4b48      	ldr	r3, [pc, #288]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d11c      	bne.n	80039ea <HAL_RCC_OscConfig+0x186>
 80039b0:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d116      	bne.n	80039ea <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039bc:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x170>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e1a1      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b3c      	ldr	r3, [pc, #240]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4939      	ldr	r1, [pc, #228]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e8:	e03a      	b.n	8003a60 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d020      	beq.n	8003a34 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f2:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCC_OscConfig+0x268>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7ff fc06 	bl	8003208 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a00:	f7ff fc02 	bl	8003208 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e182      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a12:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4926      	ldr	r1, [pc, #152]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
 8003a32:	e015      	b.n	8003a60 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_RCC_OscConfig+0x268>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3a:	f7ff fbe5 	bl	8003208 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a42:	f7ff fbe1 	bl	8003208 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e161      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a54:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d039      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d019      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7a:	f7ff fbc5 	bl	8003208 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a82:	f7ff fbc1 	bl	8003208 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e141      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <HAL_RCC_OscConfig+0x264>)
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f000 facb 	bl	800403c <RCC_Delay>
 8003aa6:	e01b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aae:	f7ff fbab 	bl	8003208 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	e00e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7ff fba7 	bl	8003208 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d907      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e127      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	42420000 	.word	0x42420000
 8003ad0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b92      	ldr	r3, [pc, #584]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ea      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80a6 	beq.w	8003c3a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b8b      	ldr	r3, [pc, #556]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	4b88      	ldr	r3, [pc, #544]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4a87      	ldr	r2, [pc, #540]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b08:	61d3      	str	r3, [r2, #28]
 8003b0a:	4b85      	ldr	r3, [pc, #532]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1a:	4b82      	ldr	r3, [pc, #520]	; (8003d24 <HAL_RCC_OscConfig+0x4c0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d118      	bne.n	8003b58 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b26:	4b7f      	ldr	r3, [pc, #508]	; (8003d24 <HAL_RCC_OscConfig+0x4c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7e      	ldr	r2, [pc, #504]	; (8003d24 <HAL_RCC_OscConfig+0x4c0>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b32:	f7ff fb69 	bl	8003208 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3a:	f7ff fb65 	bl	8003208 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b64      	cmp	r3, #100	; 0x64
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e0e5      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	4b75      	ldr	r3, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x4c0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCC_OscConfig+0x30a>
 8003b60:	4b6f      	ldr	r3, [pc, #444]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4a6e      	ldr	r2, [pc, #440]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6213      	str	r3, [r2, #32]
 8003b6c:	e02d      	b.n	8003bca <HAL_RCC_OscConfig+0x366>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x32c>
 8003b76:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4a69      	ldr	r2, [pc, #420]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6213      	str	r3, [r2, #32]
 8003b82:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a66      	ldr	r2, [pc, #408]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	e01c      	b.n	8003bca <HAL_RCC_OscConfig+0x366>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x34e>
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4a60      	ldr	r2, [pc, #384]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6213      	str	r3, [r2, #32]
 8003ba4:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a5d      	ldr	r2, [pc, #372]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e00b      	b.n	8003bca <HAL_RCC_OscConfig+0x366>
 8003bb2:	4b5b      	ldr	r3, [pc, #364]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4a5a      	ldr	r2, [pc, #360]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6213      	str	r3, [r2, #32]
 8003bbe:	4b58      	ldr	r3, [pc, #352]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4a57      	ldr	r2, [pc, #348]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7ff fb19 	bl	8003208 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7ff fb15 	bl	8003208 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e093      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ee      	beq.n	8003bda <HAL_RCC_OscConfig+0x376>
 8003bfc:	e014      	b.n	8003c28 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfe:	f7ff fb03 	bl	8003208 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7ff faff 	bl	8003208 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e07d      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1c:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ee      	bne.n	8003c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2e:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4a3b      	ldr	r2, [pc, #236]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d069      	beq.n	8003d16 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c42:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d061      	beq.n	8003d12 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d146      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7ff fad4 	bl	8003208 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c64:	f7ff fad0 	bl	8003208 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e050      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8a:	d108      	bne.n	8003c9e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4921      	ldr	r1, [pc, #132]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a19      	ldr	r1, [r3, #32]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	491b      	ldr	r1, [pc, #108]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7ff faa4 	bl	8003208 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7ff faa0 	bl	8003208 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e020      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x460>
 8003ce2:	e018      	b.n	8003d16 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cea:	f7ff fa8d 	bl	8003208 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7ff fa89 	bl	8003208 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e009      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCC_OscConfig+0x4bc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x48e>
 8003d10:	e001      	b.n	8003d16 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
 8003d28:	42420060 	.word	0x42420060

08003d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003d3a:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <HAL_RCC_ClockConfig+0x208>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d910      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d48:	4b7a      	ldr	r3, [pc, #488]	; (8003f34 <HAL_RCC_ClockConfig+0x208>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 0207 	bic.w	r2, r3, #7
 8003d50:	4978      	ldr	r1, [pc, #480]	; (8003f34 <HAL_RCC_ClockConfig+0x208>)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d58:	4b76      	ldr	r3, [pc, #472]	; (8003f34 <HAL_RCC_ClockConfig+0x208>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0e0      	b.n	8003f2c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d020      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d82:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4a6c      	ldr	r2, [pc, #432]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003d88:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d8c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d9a:	4b67      	ldr	r3, [pc, #412]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4a66      	ldr	r2, [pc, #408]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003da0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003da4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da6:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	4961      	ldr	r1, [pc, #388]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d06a      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dcc:	4b5a      	ldr	r3, [pc, #360]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d115      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0a7      	b.n	8003f2c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de4:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e09b      	b.n	8003f2c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df4:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e093      	b.n	8003f2c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e04:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 0203 	bic.w	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4949      	ldr	r1, [pc, #292]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e16:	f7ff f9f7 	bl	8003208 <HAL_GetTick>
 8003e1a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d112      	bne.n	8003e4a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e26:	f7ff f9ef 	bl	8003208 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e077      	b.n	8003f2c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e3c:	4b3e      	ldr	r3, [pc, #248]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d1ee      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xfa>
 8003e48:	e027      	b.n	8003e9a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d11d      	bne.n	8003e8e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e54:	f7ff f9d8 	bl	8003208 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e060      	b.n	8003f2c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e6a:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d1ee      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x128>
 8003e76:	e010      	b.n	8003e9a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	f7ff f9c6 	bl	8003208 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e04e      	b.n	8003f2c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e8e:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ee      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003e9a:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <HAL_RCC_ClockConfig+0x208>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d210      	bcs.n	8003eca <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea8:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <HAL_RCC_ClockConfig+0x208>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 0207 	bic.w	r2, r3, #7
 8003eb0:	4920      	ldr	r1, [pc, #128]	; (8003f34 <HAL_RCC_ClockConfig+0x208>)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <HAL_RCC_ClockConfig+0x208>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e030      	b.n	8003f2c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed6:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4915      	ldr	r1, [pc, #84]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	490d      	ldr	r1, [pc, #52]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f08:	f000 f81c 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x20c>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	4908      	ldr	r1, [pc, #32]	; (8003f3c <HAL_RCC_ClockConfig+0x210>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f20:	4a07      	ldr	r2, [pc, #28]	; (8003f40 <HAL_RCC_ClockConfig+0x214>)
 8003f22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f24:	2000      	movs	r0, #0
 8003f26:	f7ff f92d 	bl	8003184 <HAL_InitTick>
  
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40022000 	.word	0x40022000
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	080098cc 	.word	0x080098cc
 8003f40:	20000000 	.word	0x20000000

08003f44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f44:	b490      	push	{r4, r7}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f4a:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f4c:	1d3c      	adds	r4, r7, #4
 8003f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f54:	f240 2301 	movw	r3, #513	; 0x201
 8003f58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f6e:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d002      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x40>
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x46>
 8003f82:	e02b      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f84:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f86:	623b      	str	r3, [r7, #32]
      break;
 8003f88:	e02b      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	0c9b      	lsrs	r3, r3, #18
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	3328      	adds	r3, #40	; 0x28
 8003f94:	443b      	add	r3, r7
 8003f96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	0c5b      	lsrs	r3, r3, #17
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	3328      	adds	r3, #40	; 0x28
 8003fb2:	443b      	add	r3, r7
 8003fb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fb8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4a0e      	ldr	r2, [pc, #56]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fbe:	fb03 f202 	mul.w	r2, r3, r2
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	e004      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	4a0b      	ldr	r2, [pc, #44]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	623b      	str	r3, [r7, #32]
      break;
 8003fda:	e002      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fde:	623b      	str	r3, [r7, #32]
      break;
 8003fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc90      	pop	{r4, r7}
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	08009284 	.word	0x08009284
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	007a1200 	.word	0x007a1200
 8003ffc:	003d0900 	.word	0x003d0900

08004000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004004:	4b02      	ldr	r3, [pc, #8]	; (8004010 <HAL_RCC_GetHCLKFreq+0x10>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	20000000 	.word	0x20000000

08004014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004018:	f7ff fff2 	bl	8004000 <HAL_RCC_GetHCLKFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	0adb      	lsrs	r3, r3, #11
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4903      	ldr	r1, [pc, #12]	; (8004038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	080098dc 	.word	0x080098dc

0800403c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <RCC_Delay+0x38>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <RCC_Delay+0x3c>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a5b      	lsrs	r3, r3, #9
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004058:	bf00      	nop
}
 800405a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1e5a      	subs	r2, r3, #1
 8004060:	60fa      	str	r2, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f8      	bne.n	8004058 <RCC_Delay+0x1c>
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000000 	.word	0x20000000
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d07d      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004098:	2300      	movs	r3, #0
 800409a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409c:	4b4f      	ldr	r3, [pc, #316]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10d      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	4b4c      	ldr	r3, [pc, #304]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	4a4b      	ldr	r2, [pc, #300]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b2:	61d3      	str	r3, [r2, #28]
 80040b4:	4b49      	ldr	r3, [pc, #292]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c4:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d118      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d0:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a42      	ldr	r2, [pc, #264]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040dc:	f7ff f894 	bl	8003208 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e2:	e008      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e4:	f7ff f890 	bl	8003208 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e06d      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02e      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d027      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004120:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004128:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800412a:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004130:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004136:	4a29      	ldr	r2, [pc, #164]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d014      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7ff f85f 	bl	8003208 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414c:	e00a      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414e:	f7ff f85b 	bl	8003208 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f241 3288 	movw	r2, #5000	; 0x1388
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e036      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0ee      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4917      	ldr	r1, [pc, #92]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	4313      	orrs	r3, r2
 8004180:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4a13      	ldr	r2, [pc, #76]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004192:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	490b      	ldr	r1, [pc, #44]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041be:	4b07      	ldr	r3, [pc, #28]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	4904      	ldr	r1, [pc, #16]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40007000 	.word	0x40007000
 80041e4:	42420440 	.word	0x42420440

080041e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b08d      	sub	sp, #52	; 0x34
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041f0:	4b6b      	ldr	r3, [pc, #428]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80041f2:	f107 040c 	add.w	r4, r7, #12
 80041f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041fc:	f240 2301 	movw	r3, #513	; 0x201
 8004200:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
 8004206:	2300      	movs	r3, #0
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420a:	2300      	movs	r3, #0
 800420c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	2300      	movs	r3, #0
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3b01      	subs	r3, #1
 800421a:	2b0f      	cmp	r3, #15
 800421c:	f200 80b7 	bhi.w	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	08004307 	.word	0x08004307
 800422c:	08004373 	.word	0x08004373
 8004230:	0800438f 	.word	0x0800438f
 8004234:	080042f7 	.word	0x080042f7
 8004238:	0800438f 	.word	0x0800438f
 800423c:	0800438f 	.word	0x0800438f
 8004240:	0800438f 	.word	0x0800438f
 8004244:	080042ff 	.word	0x080042ff
 8004248:	0800438f 	.word	0x0800438f
 800424c:	0800438f 	.word	0x0800438f
 8004250:	0800438f 	.word	0x0800438f
 8004254:	0800438f 	.word	0x0800438f
 8004258:	0800438f 	.word	0x0800438f
 800425c:	0800438f 	.word	0x0800438f
 8004260:	0800438f 	.word	0x0800438f
 8004264:	08004269 	.word	0x08004269
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004268:	4b4e      	ldr	r3, [pc, #312]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800426e:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 808b 	beq.w	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	0c9b      	lsrs	r3, r3, #18
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	3330      	adds	r3, #48	; 0x30
 8004286:	443b      	add	r3, r7
 8004288:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800428c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d017      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004298:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0c5b      	lsrs	r3, r3, #17
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	3330      	adds	r3, #48	; 0x30
 80042a4:	443b      	add	r3, r7
 80042a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00d      	beq.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042b6:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c6:	e004      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	4a38      	ldr	r2, [pc, #224]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80042d2:	4b34      	ldr	r3, [pc, #208]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042de:	d102      	bne.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80042e4:	e055      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          frequency = (pllclk * 2) / 3;
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	4a31      	ldr	r2, [pc, #196]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042f4:	e04d      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80042f6:	f7ff fe25 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 80042fa:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80042fc:	e04a      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80042fe:	f7ff fe21 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8004302:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004304:	e046      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004306:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004316:	d108      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
 8004328:	e022      	b.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004334:	d109      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8004342:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
 8004348:	e012      	b.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004354:	d109      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = HSE_VALUE / 128U;
 8004362:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
 8004368:	e002      	b.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800436e:	e011      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004370:	e010      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004372:	f7ff fe4f 	bl	8004014 <HAL_RCC_GetPCLK2Freq>
 8004376:	4602      	mov	r2, r0
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	0b9b      	lsrs	r3, r3, #14
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	3301      	adds	r3, #1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800438c:	e002      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  default: 
    {
      break;
 800438e:	bf00      	nop
 8004390:	e000      	b.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 8004392:	bf00      	nop
    }
  }
  return(frequency);
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004396:	4618      	mov	r0, r3
 8004398:	3734      	adds	r7, #52	; 0x34
 800439a:	46bd      	mov	sp, r7
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	bf00      	nop
 80043a0:	08009294 	.word	0x08009294
 80043a4:	40021000 	.word	0x40021000
 80043a8:	007a1200 	.word	0x007a1200
 80043ac:	003d0900 	.word	0x003d0900
 80043b0:	aaaaaaab 	.word	0xaaaaaaab

080043b4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e084      	b.n	80044d4 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	7c5b      	ldrb	r3, [r3, #17]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fd fed2 	bl	8002184 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f87a 	bl	80044e0 <HAL_RTC_WaitForSynchro>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d004      	beq.n	80043fc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2204      	movs	r2, #4
 80043f6:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e06b      	b.n	80044d4 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f89c 	bl	800453a <RTC_EnterInitMode>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2204      	movs	r2, #4
 800440c:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e060      	b.n	80044d4 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0207 	bic.w	r2, r2, #7
 8004420:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <HAL_RTC_Init+0x128>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	4a2b      	ldr	r2, [pc, #172]	; (80044dc <HAL_RTC_Init+0x128>)
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004436:	4b29      	ldr	r3, [pc, #164]	; (80044dc <HAL_RTC_Init+0x128>)
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	4926      	ldr	r1, [pc, #152]	; (80044dc <HAL_RTC_Init+0x128>)
 8004444:	4313      	orrs	r3, r2
 8004446:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004450:	d003      	beq.n	800445a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e00e      	b.n	8004478 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800445a:	2001      	movs	r0, #1
 800445c:	f7ff fec4 	bl	80041e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004460:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2204      	movs	r2, #4
 800446c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e030      	b.n	80044d4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3b01      	subs	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f023 010f 	bic.w	r1, r3, #15
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	0c1a      	lsrs	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	b291      	uxth	r1, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	430b      	orrs	r3, r1
 80044a2:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f870 	bl	800458a <RTC_ExitInitMode>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d004      	beq.n	80044ba <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2204      	movs	r2, #4
 80044b4:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e00c      	b.n	80044d4 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
  }
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40006c00 	.word	0x40006c00

080044e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e01d      	b.n	8004532 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0208 	bic.w	r2, r2, #8
 8004504:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8004506:	f7fe fe7f 	bl	8003208 <HAL_GetTick>
 800450a:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800450c:	e009      	b.n	8004522 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800450e:	f7fe fe7b 	bl	8003208 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800451c:	d901      	bls.n	8004522 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e007      	b.n	8004532 <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ee      	beq.n	800450e <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8004546:	f7fe fe5f 	bl	8003208 <HAL_GetTick>
 800454a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800454c:	e009      	b.n	8004562 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800454e:	f7fe fe5b 	bl	8003208 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800455c:	d901      	bls.n	8004562 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e00f      	b.n	8004582 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ee      	beq.n	800454e <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0210 	orr.w	r2, r2, #16
 800457e:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0210 	bic.w	r2, r2, #16
 80045a4:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 80045a6:	f7fe fe2f 	bl	8003208 <HAL_GetTick>
 80045aa:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80045ac:	e009      	b.n	80045c2 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80045ae:	f7fe fe2b 	bl	8003208 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045bc:	d901      	bls.n	80045c2 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e007      	b.n	80045d2 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ee      	beq.n	80045ae <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <HAL_RTCEx_BKUPWrite+0x30>)
 80045ee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4413      	add	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	b292      	uxth	r2, r2
 8004600:	601a      	str	r2, [r3, #0]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	40006c00 	.word	0x40006c00

08004610 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <HAL_RTCEx_BKUPRead+0x34>)
 8004624:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004638:	68bb      	ldr	r3, [r7, #8]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	40006c00 	.word	0x40006c00

08004648 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e034      	b.n	80046c8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7fd fdee 	bl	8002254 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3308      	adds	r3, #8
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f000 f824 	bl	80046d0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	461a      	mov	r2, r3
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	f000 f89c 	bl	80047d0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6858      	ldr	r0, [r3, #4]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	f000 f8c7 	bl	8004838 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	6892      	ldr	r2, [r2, #8]
 80046b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	6892      	ldr	r2, [r2, #8]
 80046be:	f041 0101 	orr.w	r1, r1, #1
 80046c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	f023 0101 	bic.w	r1, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d132      	bne.n	8004760 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004704:	4b31      	ldr	r3, [pc, #196]	; (80047cc <FSMC_NORSRAM_Init+0xfc>)
 8004706:	4013      	ands	r3, r2
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	6851      	ldr	r1, [r2, #4]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	6892      	ldr	r2, [r2, #8]
 8004710:	4311      	orrs	r1, r2
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	4311      	orrs	r1, r2
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	6912      	ldr	r2, [r2, #16]
 800471c:	4311      	orrs	r1, r2
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	6952      	ldr	r2, [r2, #20]
 8004722:	4311      	orrs	r1, r2
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	6992      	ldr	r2, [r2, #24]
 8004728:	4311      	orrs	r1, r2
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	69d2      	ldr	r2, [r2, #28]
 800472e:	4311      	orrs	r1, r2
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	6a12      	ldr	r2, [r2, #32]
 8004734:	4311      	orrs	r1, r2
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800473a:	4311      	orrs	r1, r2
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004740:	4311      	orrs	r1, r2
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004746:	4311      	orrs	r1, r2
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800474c:	430a      	orrs	r2, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800475e:	e02f      	b.n	80047c0 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <FSMC_NORSRAM_Init+0xfc>)
 800476c:	4013      	ands	r3, r2
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	6851      	ldr	r1, [r2, #4]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	6892      	ldr	r2, [r2, #8]
 8004776:	4311      	orrs	r1, r2
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	68d2      	ldr	r2, [r2, #12]
 800477c:	4311      	orrs	r1, r2
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	6912      	ldr	r2, [r2, #16]
 8004782:	4311      	orrs	r1, r2
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	6952      	ldr	r2, [r2, #20]
 8004788:	4311      	orrs	r1, r2
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	6992      	ldr	r2, [r2, #24]
 800478e:	4311      	orrs	r1, r2
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	69d2      	ldr	r2, [r2, #28]
 8004794:	4311      	orrs	r1, r2
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	6a12      	ldr	r2, [r2, #32]
 800479a:	4311      	orrs	r1, r2
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047a0:	4311      	orrs	r1, r2
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047a6:	4311      	orrs	r1, r2
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047ac:	4311      	orrs	r1, r2
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047b2:	4311      	orrs	r1, r2
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	4319      	orrs	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr
 80047cc:	fff70081 	.word	0xfff70081

080047d0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	3b01      	subs	r3, #1
 800480c:	051b      	lsls	r3, r3, #20
 800480e:	431a      	orrs	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	3b02      	subs	r3, #2
 8004816:	061b      	lsls	r3, r3, #24
 8004818:	431a      	orrs	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	3201      	adds	r2, #1
 8004824:	4319      	orrs	r1, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800484c:	d11d      	bne.n	800488a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004858:	4013      	ands	r3, r2
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	6811      	ldr	r1, [r2, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	6852      	ldr	r2, [r2, #4]
 8004862:	0112      	lsls	r2, r2, #4
 8004864:	4311      	orrs	r1, r2
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	6892      	ldr	r2, [r2, #8]
 800486a:	0212      	lsls	r2, r2, #8
 800486c:	4311      	orrs	r1, r2
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	6992      	ldr	r2, [r2, #24]
 8004872:	4311      	orrs	r1, r2
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	68d2      	ldr	r2, [r2, #12]
 8004878:	0412      	lsls	r2, r2, #16
 800487a:	430a      	orrs	r2, r1
 800487c:	ea43 0102 	orr.w	r1, r3, r2
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004888:	e005      	b.n	8004896 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	cff00000 	.word	0xcff00000

080048a8 <__errno>:
 80048a8:	4b01      	ldr	r3, [pc, #4]	; (80048b0 <__errno+0x8>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20000040 	.word	0x20000040

080048b4 <__libc_init_array>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	2600      	movs	r6, #0
 80048b8:	4d0c      	ldr	r5, [pc, #48]	; (80048ec <__libc_init_array+0x38>)
 80048ba:	4c0d      	ldr	r4, [pc, #52]	; (80048f0 <__libc_init_array+0x3c>)
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	42a6      	cmp	r6, r4
 80048c2:	d109      	bne.n	80048d8 <__libc_init_array+0x24>
 80048c4:	f004 fc52 	bl	800916c <_init>
 80048c8:	2600      	movs	r6, #0
 80048ca:	4d0a      	ldr	r5, [pc, #40]	; (80048f4 <__libc_init_array+0x40>)
 80048cc:	4c0a      	ldr	r4, [pc, #40]	; (80048f8 <__libc_init_array+0x44>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	42a6      	cmp	r6, r4
 80048d4:	d105      	bne.n	80048e2 <__libc_init_array+0x2e>
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048dc:	4798      	blx	r3
 80048de:	3601      	adds	r6, #1
 80048e0:	e7ee      	b.n	80048c0 <__libc_init_array+0xc>
 80048e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e6:	4798      	blx	r3
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7f2      	b.n	80048d2 <__libc_init_array+0x1e>
 80048ec:	08009d8c 	.word	0x08009d8c
 80048f0:	08009d8c 	.word	0x08009d8c
 80048f4:	08009d8c 	.word	0x08009d8c
 80048f8:	08009d90 	.word	0x08009d90

080048fc <memset>:
 80048fc:	4603      	mov	r3, r0
 80048fe:	4402      	add	r2, r0
 8004900:	4293      	cmp	r3, r2
 8004902:	d100      	bne.n	8004906 <memset+0xa>
 8004904:	4770      	bx	lr
 8004906:	f803 1b01 	strb.w	r1, [r3], #1
 800490a:	e7f9      	b.n	8004900 <memset+0x4>

0800490c <__cvt>:
 800490c:	2b00      	cmp	r3, #0
 800490e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004912:	461f      	mov	r7, r3
 8004914:	bfbb      	ittet	lt
 8004916:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800491a:	461f      	movlt	r7, r3
 800491c:	2300      	movge	r3, #0
 800491e:	232d      	movlt	r3, #45	; 0x2d
 8004920:	b088      	sub	sp, #32
 8004922:	4614      	mov	r4, r2
 8004924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004926:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004928:	7013      	strb	r3, [r2, #0]
 800492a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800492c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004930:	f023 0820 	bic.w	r8, r3, #32
 8004934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004938:	d005      	beq.n	8004946 <__cvt+0x3a>
 800493a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800493e:	d100      	bne.n	8004942 <__cvt+0x36>
 8004940:	3501      	adds	r5, #1
 8004942:	2302      	movs	r3, #2
 8004944:	e000      	b.n	8004948 <__cvt+0x3c>
 8004946:	2303      	movs	r3, #3
 8004948:	aa07      	add	r2, sp, #28
 800494a:	9204      	str	r2, [sp, #16]
 800494c:	aa06      	add	r2, sp, #24
 800494e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004952:	e9cd 3500 	strd	r3, r5, [sp]
 8004956:	4622      	mov	r2, r4
 8004958:	463b      	mov	r3, r7
 800495a:	f001 fd85 	bl	8006468 <_dtoa_r>
 800495e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004962:	4606      	mov	r6, r0
 8004964:	d102      	bne.n	800496c <__cvt+0x60>
 8004966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004968:	07db      	lsls	r3, r3, #31
 800496a:	d522      	bpl.n	80049b2 <__cvt+0xa6>
 800496c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004970:	eb06 0905 	add.w	r9, r6, r5
 8004974:	d110      	bne.n	8004998 <__cvt+0x8c>
 8004976:	7833      	ldrb	r3, [r6, #0]
 8004978:	2b30      	cmp	r3, #48	; 0x30
 800497a:	d10a      	bne.n	8004992 <__cvt+0x86>
 800497c:	2200      	movs	r2, #0
 800497e:	2300      	movs	r3, #0
 8004980:	4620      	mov	r0, r4
 8004982:	4639      	mov	r1, r7
 8004984:	f7fc f87c 	bl	8000a80 <__aeabi_dcmpeq>
 8004988:	b918      	cbnz	r0, 8004992 <__cvt+0x86>
 800498a:	f1c5 0501 	rsb	r5, r5, #1
 800498e:	f8ca 5000 	str.w	r5, [sl]
 8004992:	f8da 3000 	ldr.w	r3, [sl]
 8004996:	4499      	add	r9, r3
 8004998:	2200      	movs	r2, #0
 800499a:	2300      	movs	r3, #0
 800499c:	4620      	mov	r0, r4
 800499e:	4639      	mov	r1, r7
 80049a0:	f7fc f86e 	bl	8000a80 <__aeabi_dcmpeq>
 80049a4:	b108      	cbz	r0, 80049aa <__cvt+0x9e>
 80049a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80049aa:	2230      	movs	r2, #48	; 0x30
 80049ac:	9b07      	ldr	r3, [sp, #28]
 80049ae:	454b      	cmp	r3, r9
 80049b0:	d307      	bcc.n	80049c2 <__cvt+0xb6>
 80049b2:	4630      	mov	r0, r6
 80049b4:	9b07      	ldr	r3, [sp, #28]
 80049b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049b8:	1b9b      	subs	r3, r3, r6
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	b008      	add	sp, #32
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	9107      	str	r1, [sp, #28]
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e7f0      	b.n	80049ac <__cvt+0xa0>

080049ca <__exponent>:
 80049ca:	4603      	mov	r3, r0
 80049cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ce:	2900      	cmp	r1, #0
 80049d0:	f803 2b02 	strb.w	r2, [r3], #2
 80049d4:	bfb6      	itet	lt
 80049d6:	222d      	movlt	r2, #45	; 0x2d
 80049d8:	222b      	movge	r2, #43	; 0x2b
 80049da:	4249      	neglt	r1, r1
 80049dc:	2909      	cmp	r1, #9
 80049de:	7042      	strb	r2, [r0, #1]
 80049e0:	dd2b      	ble.n	8004a3a <__exponent+0x70>
 80049e2:	f10d 0407 	add.w	r4, sp, #7
 80049e6:	46a4      	mov	ip, r4
 80049e8:	270a      	movs	r7, #10
 80049ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80049ee:	460a      	mov	r2, r1
 80049f0:	46a6      	mov	lr, r4
 80049f2:	fb07 1516 	mls	r5, r7, r6, r1
 80049f6:	2a63      	cmp	r2, #99	; 0x63
 80049f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80049fc:	4631      	mov	r1, r6
 80049fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a06:	dcf0      	bgt.n	80049ea <__exponent+0x20>
 8004a08:	3130      	adds	r1, #48	; 0x30
 8004a0a:	f1ae 0502 	sub.w	r5, lr, #2
 8004a0e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a12:	4629      	mov	r1, r5
 8004a14:	1c44      	adds	r4, r0, #1
 8004a16:	4561      	cmp	r1, ip
 8004a18:	d30a      	bcc.n	8004a30 <__exponent+0x66>
 8004a1a:	f10d 0209 	add.w	r2, sp, #9
 8004a1e:	eba2 020e 	sub.w	r2, r2, lr
 8004a22:	4565      	cmp	r5, ip
 8004a24:	bf88      	it	hi
 8004a26:	2200      	movhi	r2, #0
 8004a28:	4413      	add	r3, r2
 8004a2a:	1a18      	subs	r0, r3, r0
 8004a2c:	b003      	add	sp, #12
 8004a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a34:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a38:	e7ed      	b.n	8004a16 <__exponent+0x4c>
 8004a3a:	2330      	movs	r3, #48	; 0x30
 8004a3c:	3130      	adds	r1, #48	; 0x30
 8004a3e:	7083      	strb	r3, [r0, #2]
 8004a40:	70c1      	strb	r1, [r0, #3]
 8004a42:	1d03      	adds	r3, r0, #4
 8004a44:	e7f1      	b.n	8004a2a <__exponent+0x60>
	...

08004a48 <_printf_float>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	b091      	sub	sp, #68	; 0x44
 8004a4e:	460c      	mov	r4, r1
 8004a50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a54:	4616      	mov	r6, r2
 8004a56:	461f      	mov	r7, r3
 8004a58:	4605      	mov	r5, r0
 8004a5a:	f002 fe59 	bl	8007710 <_localeconv_r>
 8004a5e:	6803      	ldr	r3, [r0, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	9309      	str	r3, [sp, #36]	; 0x24
 8004a64:	f7fb fbe0 	bl	8000228 <strlen>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	930e      	str	r3, [sp, #56]	; 0x38
 8004a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a70:	900a      	str	r0, [sp, #40]	; 0x28
 8004a72:	3307      	adds	r3, #7
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	f103 0208 	add.w	r2, r3, #8
 8004a7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a80:	f8d4 b000 	ldr.w	fp, [r4]
 8004a84:	f8c8 2000 	str.w	r2, [r8]
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a90:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004a94:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	4b9c      	ldr	r3, [pc, #624]	; (8004d14 <_printf_float+0x2cc>)
 8004aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004aa4:	f7fc f81e 	bl	8000ae4 <__aeabi_dcmpun>
 8004aa8:	bb70      	cbnz	r0, 8004b08 <_printf_float+0xc0>
 8004aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004aae:	4640      	mov	r0, r8
 8004ab0:	4b98      	ldr	r3, [pc, #608]	; (8004d14 <_printf_float+0x2cc>)
 8004ab2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ab4:	f7fb fff8 	bl	8000aa8 <__aeabi_dcmple>
 8004ab8:	bb30      	cbnz	r0, 8004b08 <_printf_float+0xc0>
 8004aba:	2200      	movs	r2, #0
 8004abc:	2300      	movs	r3, #0
 8004abe:	4640      	mov	r0, r8
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	f7fb ffe7 	bl	8000a94 <__aeabi_dcmplt>
 8004ac6:	b110      	cbz	r0, 8004ace <_printf_float+0x86>
 8004ac8:	232d      	movs	r3, #45	; 0x2d
 8004aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ace:	4b92      	ldr	r3, [pc, #584]	; (8004d18 <_printf_float+0x2d0>)
 8004ad0:	4892      	ldr	r0, [pc, #584]	; (8004d1c <_printf_float+0x2d4>)
 8004ad2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ad6:	bf94      	ite	ls
 8004ad8:	4698      	movls	r8, r3
 8004ada:	4680      	movhi	r8, r0
 8004adc:	2303      	movs	r3, #3
 8004ade:	f04f 0a00 	mov.w	sl, #0
 8004ae2:	6123      	str	r3, [r4, #16]
 8004ae4:	f02b 0304 	bic.w	r3, fp, #4
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	4633      	mov	r3, r6
 8004aec:	4621      	mov	r1, r4
 8004aee:	4628      	mov	r0, r5
 8004af0:	9700      	str	r7, [sp, #0]
 8004af2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004af4:	f000 f9d4 	bl	8004ea0 <_printf_common>
 8004af8:	3001      	adds	r0, #1
 8004afa:	f040 8090 	bne.w	8004c1e <_printf_float+0x1d6>
 8004afe:	f04f 30ff 	mov.w	r0, #4294967295
 8004b02:	b011      	add	sp, #68	; 0x44
 8004b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b08:	4642      	mov	r2, r8
 8004b0a:	4653      	mov	r3, sl
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	4651      	mov	r1, sl
 8004b10:	f7fb ffe8 	bl	8000ae4 <__aeabi_dcmpun>
 8004b14:	b148      	cbz	r0, 8004b2a <_printf_float+0xe2>
 8004b16:	f1ba 0f00 	cmp.w	sl, #0
 8004b1a:	bfb8      	it	lt
 8004b1c:	232d      	movlt	r3, #45	; 0x2d
 8004b1e:	4880      	ldr	r0, [pc, #512]	; (8004d20 <_printf_float+0x2d8>)
 8004b20:	bfb8      	it	lt
 8004b22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b26:	4b7f      	ldr	r3, [pc, #508]	; (8004d24 <_printf_float+0x2dc>)
 8004b28:	e7d3      	b.n	8004ad2 <_printf_float+0x8a>
 8004b2a:	6863      	ldr	r3, [r4, #4]
 8004b2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	d142      	bne.n	8004bba <_printf_float+0x172>
 8004b34:	2306      	movs	r3, #6
 8004b36:	6063      	str	r3, [r4, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	9206      	str	r2, [sp, #24]
 8004b3c:	aa0e      	add	r2, sp, #56	; 0x38
 8004b3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b42:	aa0d      	add	r2, sp, #52	; 0x34
 8004b44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b48:	9203      	str	r2, [sp, #12]
 8004b4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b52:	6023      	str	r3, [r4, #0]
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	4642      	mov	r2, r8
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	4653      	mov	r3, sl
 8004b5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b60:	f7ff fed4 	bl	800490c <__cvt>
 8004b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b66:	4680      	mov	r8, r0
 8004b68:	2947      	cmp	r1, #71	; 0x47
 8004b6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b6c:	d108      	bne.n	8004b80 <_printf_float+0x138>
 8004b6e:	1cc8      	adds	r0, r1, #3
 8004b70:	db02      	blt.n	8004b78 <_printf_float+0x130>
 8004b72:	6863      	ldr	r3, [r4, #4]
 8004b74:	4299      	cmp	r1, r3
 8004b76:	dd40      	ble.n	8004bfa <_printf_float+0x1b2>
 8004b78:	f1a9 0902 	sub.w	r9, r9, #2
 8004b7c:	fa5f f989 	uxtb.w	r9, r9
 8004b80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b84:	d81f      	bhi.n	8004bc6 <_printf_float+0x17e>
 8004b86:	464a      	mov	r2, r9
 8004b88:	3901      	subs	r1, #1
 8004b8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b8e:	910d      	str	r1, [sp, #52]	; 0x34
 8004b90:	f7ff ff1b 	bl	80049ca <__exponent>
 8004b94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b96:	4682      	mov	sl, r0
 8004b98:	1813      	adds	r3, r2, r0
 8004b9a:	2a01      	cmp	r2, #1
 8004b9c:	6123      	str	r3, [r4, #16]
 8004b9e:	dc02      	bgt.n	8004ba6 <_printf_float+0x15e>
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	07d2      	lsls	r2, r2, #31
 8004ba4:	d501      	bpl.n	8004baa <_printf_float+0x162>
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	6123      	str	r3, [r4, #16]
 8004baa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d09b      	beq.n	8004aea <_printf_float+0xa2>
 8004bb2:	232d      	movs	r3, #45	; 0x2d
 8004bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb8:	e797      	b.n	8004aea <_printf_float+0xa2>
 8004bba:	2947      	cmp	r1, #71	; 0x47
 8004bbc:	d1bc      	bne.n	8004b38 <_printf_float+0xf0>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ba      	bne.n	8004b38 <_printf_float+0xf0>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e7b7      	b.n	8004b36 <_printf_float+0xee>
 8004bc6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004bca:	d118      	bne.n	8004bfe <_printf_float+0x1b6>
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	6863      	ldr	r3, [r4, #4]
 8004bd0:	dd0b      	ble.n	8004bea <_printf_float+0x1a2>
 8004bd2:	6121      	str	r1, [r4, #16]
 8004bd4:	b913      	cbnz	r3, 8004bdc <_printf_float+0x194>
 8004bd6:	6822      	ldr	r2, [r4, #0]
 8004bd8:	07d0      	lsls	r0, r2, #31
 8004bda:	d502      	bpl.n	8004be2 <_printf_float+0x19a>
 8004bdc:	3301      	adds	r3, #1
 8004bde:	440b      	add	r3, r1
 8004be0:	6123      	str	r3, [r4, #16]
 8004be2:	f04f 0a00 	mov.w	sl, #0
 8004be6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004be8:	e7df      	b.n	8004baa <_printf_float+0x162>
 8004bea:	b913      	cbnz	r3, 8004bf2 <_printf_float+0x1aa>
 8004bec:	6822      	ldr	r2, [r4, #0]
 8004bee:	07d2      	lsls	r2, r2, #31
 8004bf0:	d501      	bpl.n	8004bf6 <_printf_float+0x1ae>
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	e7f4      	b.n	8004be0 <_printf_float+0x198>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e7f2      	b.n	8004be0 <_printf_float+0x198>
 8004bfa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c00:	4299      	cmp	r1, r3
 8004c02:	db05      	blt.n	8004c10 <_printf_float+0x1c8>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	6121      	str	r1, [r4, #16]
 8004c08:	07d8      	lsls	r0, r3, #31
 8004c0a:	d5ea      	bpl.n	8004be2 <_printf_float+0x19a>
 8004c0c:	1c4b      	adds	r3, r1, #1
 8004c0e:	e7e7      	b.n	8004be0 <_printf_float+0x198>
 8004c10:	2900      	cmp	r1, #0
 8004c12:	bfcc      	ite	gt
 8004c14:	2201      	movgt	r2, #1
 8004c16:	f1c1 0202 	rsble	r2, r1, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	e7e0      	b.n	8004be0 <_printf_float+0x198>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	055a      	lsls	r2, r3, #21
 8004c22:	d407      	bmi.n	8004c34 <_printf_float+0x1ec>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	4642      	mov	r2, r8
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	47b8      	blx	r7
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d12b      	bne.n	8004c8a <_printf_float+0x242>
 8004c32:	e764      	b.n	8004afe <_printf_float+0xb6>
 8004c34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c38:	f240 80dd 	bls.w	8004df6 <_printf_float+0x3ae>
 8004c3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c40:	2200      	movs	r2, #0
 8004c42:	2300      	movs	r3, #0
 8004c44:	f7fb ff1c 	bl	8000a80 <__aeabi_dcmpeq>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d033      	beq.n	8004cb4 <_printf_float+0x26c>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	4a35      	ldr	r2, [pc, #212]	; (8004d28 <_printf_float+0x2e0>)
 8004c54:	47b8      	blx	r7
 8004c56:	3001      	adds	r0, #1
 8004c58:	f43f af51 	beq.w	8004afe <_printf_float+0xb6>
 8004c5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c60:	429a      	cmp	r2, r3
 8004c62:	db02      	blt.n	8004c6a <_printf_float+0x222>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	07d8      	lsls	r0, r3, #31
 8004c68:	d50f      	bpl.n	8004c8a <_printf_float+0x242>
 8004c6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f af42 	beq.w	8004afe <_printf_float+0xb6>
 8004c7a:	f04f 0800 	mov.w	r8, #0
 8004c7e:	f104 091a 	add.w	r9, r4, #26
 8004c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c84:	3b01      	subs	r3, #1
 8004c86:	4543      	cmp	r3, r8
 8004c88:	dc09      	bgt.n	8004c9e <_printf_float+0x256>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	079b      	lsls	r3, r3, #30
 8004c8e:	f100 8102 	bmi.w	8004e96 <_printf_float+0x44e>
 8004c92:	68e0      	ldr	r0, [r4, #12]
 8004c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c96:	4298      	cmp	r0, r3
 8004c98:	bfb8      	it	lt
 8004c9a:	4618      	movlt	r0, r3
 8004c9c:	e731      	b.n	8004b02 <_printf_float+0xba>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	464a      	mov	r2, r9
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	f43f af28 	beq.w	8004afe <_printf_float+0xb6>
 8004cae:	f108 0801 	add.w	r8, r8, #1
 8004cb2:	e7e6      	b.n	8004c82 <_printf_float+0x23a>
 8004cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	dc38      	bgt.n	8004d2c <_printf_float+0x2e4>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <_printf_float+0x2e0>)
 8004cc2:	47b8      	blx	r7
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f43f af1a 	beq.w	8004afe <_printf_float+0xb6>
 8004cca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d102      	bne.n	8004cd8 <_printf_float+0x290>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	07d9      	lsls	r1, r3, #31
 8004cd6:	d5d8      	bpl.n	8004c8a <_printf_float+0x242>
 8004cd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f43f af0b 	beq.w	8004afe <_printf_float+0xb6>
 8004ce8:	f04f 0900 	mov.w	r9, #0
 8004cec:	f104 0a1a 	add.w	sl, r4, #26
 8004cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cf2:	425b      	negs	r3, r3
 8004cf4:	454b      	cmp	r3, r9
 8004cf6:	dc01      	bgt.n	8004cfc <_printf_float+0x2b4>
 8004cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cfa:	e794      	b.n	8004c26 <_printf_float+0x1de>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	4652      	mov	r2, sl
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	f43f aef9 	beq.w	8004afe <_printf_float+0xb6>
 8004d0c:	f109 0901 	add.w	r9, r9, #1
 8004d10:	e7ee      	b.n	8004cf0 <_printf_float+0x2a8>
 8004d12:	bf00      	nop
 8004d14:	7fefffff 	.word	0x7fefffff
 8004d18:	080098e8 	.word	0x080098e8
 8004d1c:	080098ec 	.word	0x080098ec
 8004d20:	080098f4 	.word	0x080098f4
 8004d24:	080098f0 	.word	0x080098f0
 8004d28:	080098f8 	.word	0x080098f8
 8004d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d30:	429a      	cmp	r2, r3
 8004d32:	bfa8      	it	ge
 8004d34:	461a      	movge	r2, r3
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	4691      	mov	r9, r2
 8004d3a:	dc37      	bgt.n	8004dac <_printf_float+0x364>
 8004d3c:	f04f 0b00 	mov.w	fp, #0
 8004d40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d44:	f104 021a 	add.w	r2, r4, #26
 8004d48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d4c:	ebaa 0309 	sub.w	r3, sl, r9
 8004d50:	455b      	cmp	r3, fp
 8004d52:	dc33      	bgt.n	8004dbc <_printf_float+0x374>
 8004d54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	db3b      	blt.n	8004dd4 <_printf_float+0x38c>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	07da      	lsls	r2, r3, #31
 8004d60:	d438      	bmi.n	8004dd4 <_printf_float+0x38c>
 8004d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d66:	eba3 020a 	sub.w	r2, r3, sl
 8004d6a:	eba3 0901 	sub.w	r9, r3, r1
 8004d6e:	4591      	cmp	r9, r2
 8004d70:	bfa8      	it	ge
 8004d72:	4691      	movge	r9, r2
 8004d74:	f1b9 0f00 	cmp.w	r9, #0
 8004d78:	dc34      	bgt.n	8004de4 <_printf_float+0x39c>
 8004d7a:	f04f 0800 	mov.w	r8, #0
 8004d7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d82:	f104 0a1a 	add.w	sl, r4, #26
 8004d86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	eba3 0309 	sub.w	r3, r3, r9
 8004d90:	4543      	cmp	r3, r8
 8004d92:	f77f af7a 	ble.w	8004c8a <_printf_float+0x242>
 8004d96:	2301      	movs	r3, #1
 8004d98:	4652      	mov	r2, sl
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	f43f aeac 	beq.w	8004afe <_printf_float+0xb6>
 8004da6:	f108 0801 	add.w	r8, r8, #1
 8004daa:	e7ec      	b.n	8004d86 <_printf_float+0x33e>
 8004dac:	4613      	mov	r3, r2
 8004dae:	4631      	mov	r1, r6
 8004db0:	4642      	mov	r2, r8
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	d1c0      	bne.n	8004d3c <_printf_float+0x2f4>
 8004dba:	e6a0      	b.n	8004afe <_printf_float+0xb6>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004dc4:	47b8      	blx	r7
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	f43f ae99 	beq.w	8004afe <_printf_float+0xb6>
 8004dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dce:	f10b 0b01 	add.w	fp, fp, #1
 8004dd2:	e7b9      	b.n	8004d48 <_printf_float+0x300>
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dda:	4628      	mov	r0, r5
 8004ddc:	47b8      	blx	r7
 8004dde:	3001      	adds	r0, #1
 8004de0:	d1bf      	bne.n	8004d62 <_printf_float+0x31a>
 8004de2:	e68c      	b.n	8004afe <_printf_float+0xb6>
 8004de4:	464b      	mov	r3, r9
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	eb08 020a 	add.w	r2, r8, sl
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	d1c2      	bne.n	8004d7a <_printf_float+0x332>
 8004df4:	e683      	b.n	8004afe <_printf_float+0xb6>
 8004df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004df8:	2a01      	cmp	r2, #1
 8004dfa:	dc01      	bgt.n	8004e00 <_printf_float+0x3b8>
 8004dfc:	07db      	lsls	r3, r3, #31
 8004dfe:	d537      	bpl.n	8004e70 <_printf_float+0x428>
 8004e00:	2301      	movs	r3, #1
 8004e02:	4642      	mov	r2, r8
 8004e04:	4631      	mov	r1, r6
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b8      	blx	r7
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	f43f ae77 	beq.w	8004afe <_printf_float+0xb6>
 8004e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e14:	4631      	mov	r1, r6
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f43f ae6f 	beq.w	8004afe <_printf_float+0xb6>
 8004e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e24:	2200      	movs	r2, #0
 8004e26:	2300      	movs	r3, #0
 8004e28:	f7fb fe2a 	bl	8000a80 <__aeabi_dcmpeq>
 8004e2c:	b9d8      	cbnz	r0, 8004e66 <_printf_float+0x41e>
 8004e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e30:	f108 0201 	add.w	r2, r8, #1
 8004e34:	3b01      	subs	r3, #1
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d10e      	bne.n	8004e5e <_printf_float+0x416>
 8004e40:	e65d      	b.n	8004afe <_printf_float+0xb6>
 8004e42:	2301      	movs	r3, #1
 8004e44:	464a      	mov	r2, r9
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	f43f ae56 	beq.w	8004afe <_printf_float+0xb6>
 8004e52:	f108 0801 	add.w	r8, r8, #1
 8004e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4543      	cmp	r3, r8
 8004e5c:	dcf1      	bgt.n	8004e42 <_printf_float+0x3fa>
 8004e5e:	4653      	mov	r3, sl
 8004e60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e64:	e6e0      	b.n	8004c28 <_printf_float+0x1e0>
 8004e66:	f04f 0800 	mov.w	r8, #0
 8004e6a:	f104 091a 	add.w	r9, r4, #26
 8004e6e:	e7f2      	b.n	8004e56 <_printf_float+0x40e>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4642      	mov	r2, r8
 8004e74:	e7df      	b.n	8004e36 <_printf_float+0x3ee>
 8004e76:	2301      	movs	r3, #1
 8004e78:	464a      	mov	r2, r9
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	f43f ae3c 	beq.w	8004afe <_printf_float+0xb6>
 8004e86:	f108 0801 	add.w	r8, r8, #1
 8004e8a:	68e3      	ldr	r3, [r4, #12]
 8004e8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e8e:	1a5b      	subs	r3, r3, r1
 8004e90:	4543      	cmp	r3, r8
 8004e92:	dcf0      	bgt.n	8004e76 <_printf_float+0x42e>
 8004e94:	e6fd      	b.n	8004c92 <_printf_float+0x24a>
 8004e96:	f04f 0800 	mov.w	r8, #0
 8004e9a:	f104 0919 	add.w	r9, r4, #25
 8004e9e:	e7f4      	b.n	8004e8a <_printf_float+0x442>

08004ea0 <_printf_common>:
 8004ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	4699      	mov	r9, r3
 8004ea8:	688a      	ldr	r2, [r1, #8]
 8004eaa:	690b      	ldr	r3, [r1, #16]
 8004eac:	4607      	mov	r7, r0
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	bfb8      	it	lt
 8004eb2:	4613      	movlt	r3, r2
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eba:	460c      	mov	r4, r1
 8004ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec0:	b10a      	cbz	r2, 8004ec6 <_printf_common+0x26>
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	0699      	lsls	r1, r3, #26
 8004eca:	bf42      	ittt	mi
 8004ecc:	6833      	ldrmi	r3, [r6, #0]
 8004ece:	3302      	addmi	r3, #2
 8004ed0:	6033      	strmi	r3, [r6, #0]
 8004ed2:	6825      	ldr	r5, [r4, #0]
 8004ed4:	f015 0506 	ands.w	r5, r5, #6
 8004ed8:	d106      	bne.n	8004ee8 <_printf_common+0x48>
 8004eda:	f104 0a19 	add.w	sl, r4, #25
 8004ede:	68e3      	ldr	r3, [r4, #12]
 8004ee0:	6832      	ldr	r2, [r6, #0]
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	42ab      	cmp	r3, r5
 8004ee6:	dc28      	bgt.n	8004f3a <_printf_common+0x9a>
 8004ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eec:	1e13      	subs	r3, r2, #0
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	0692      	lsls	r2, r2, #26
 8004ef6:	d42d      	bmi.n	8004f54 <_printf_common+0xb4>
 8004ef8:	4649      	mov	r1, r9
 8004efa:	4638      	mov	r0, r7
 8004efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f00:	47c0      	blx	r8
 8004f02:	3001      	adds	r0, #1
 8004f04:	d020      	beq.n	8004f48 <_printf_common+0xa8>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	68e5      	ldr	r5, [r4, #12]
 8004f0a:	f003 0306 	and.w	r3, r3, #6
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	bf18      	it	ne
 8004f12:	2500      	movne	r5, #0
 8004f14:	6832      	ldr	r2, [r6, #0]
 8004f16:	f04f 0600 	mov.w	r6, #0
 8004f1a:	68a3      	ldr	r3, [r4, #8]
 8004f1c:	bf08      	it	eq
 8004f1e:	1aad      	subeq	r5, r5, r2
 8004f20:	6922      	ldr	r2, [r4, #16]
 8004f22:	bf08      	it	eq
 8004f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bfc4      	itt	gt
 8004f2c:	1a9b      	subgt	r3, r3, r2
 8004f2e:	18ed      	addgt	r5, r5, r3
 8004f30:	341a      	adds	r4, #26
 8004f32:	42b5      	cmp	r5, r6
 8004f34:	d11a      	bne.n	8004f6c <_printf_common+0xcc>
 8004f36:	2000      	movs	r0, #0
 8004f38:	e008      	b.n	8004f4c <_printf_common+0xac>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4652      	mov	r2, sl
 8004f3e:	4649      	mov	r1, r9
 8004f40:	4638      	mov	r0, r7
 8004f42:	47c0      	blx	r8
 8004f44:	3001      	adds	r0, #1
 8004f46:	d103      	bne.n	8004f50 <_printf_common+0xb0>
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f50:	3501      	adds	r5, #1
 8004f52:	e7c4      	b.n	8004ede <_printf_common+0x3e>
 8004f54:	2030      	movs	r0, #48	; 0x30
 8004f56:	18e1      	adds	r1, r4, r3
 8004f58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f62:	4422      	add	r2, r4
 8004f64:	3302      	adds	r3, #2
 8004f66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f6a:	e7c5      	b.n	8004ef8 <_printf_common+0x58>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4649      	mov	r1, r9
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c0      	blx	r8
 8004f76:	3001      	adds	r0, #1
 8004f78:	d0e6      	beq.n	8004f48 <_printf_common+0xa8>
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	e7d9      	b.n	8004f32 <_printf_common+0x92>
	...

08004f80 <_printf_i>:
 8004f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	7e0f      	ldrb	r7, [r1, #24]
 8004f86:	4691      	mov	r9, r2
 8004f88:	2f78      	cmp	r7, #120	; 0x78
 8004f8a:	4680      	mov	r8, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	469a      	mov	sl, r3
 8004f90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f96:	d807      	bhi.n	8004fa8 <_printf_i+0x28>
 8004f98:	2f62      	cmp	r7, #98	; 0x62
 8004f9a:	d80a      	bhi.n	8004fb2 <_printf_i+0x32>
 8004f9c:	2f00      	cmp	r7, #0
 8004f9e:	f000 80d9 	beq.w	8005154 <_printf_i+0x1d4>
 8004fa2:	2f58      	cmp	r7, #88	; 0x58
 8004fa4:	f000 80a4 	beq.w	80050f0 <_printf_i+0x170>
 8004fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fb0:	e03a      	b.n	8005028 <_printf_i+0xa8>
 8004fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fb6:	2b15      	cmp	r3, #21
 8004fb8:	d8f6      	bhi.n	8004fa8 <_printf_i+0x28>
 8004fba:	a101      	add	r1, pc, #4	; (adr r1, 8004fc0 <_printf_i+0x40>)
 8004fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	0800502d 	.word	0x0800502d
 8004fc8:	08004fa9 	.word	0x08004fa9
 8004fcc:	08004fa9 	.word	0x08004fa9
 8004fd0:	08004fa9 	.word	0x08004fa9
 8004fd4:	08004fa9 	.word	0x08004fa9
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	08004fa9 	.word	0x08004fa9
 8004fe0:	08004fa9 	.word	0x08004fa9
 8004fe4:	08004fa9 	.word	0x08004fa9
 8004fe8:	08004fa9 	.word	0x08004fa9
 8004fec:	0800513b 	.word	0x0800513b
 8004ff0:	0800505d 	.word	0x0800505d
 8004ff4:	0800511d 	.word	0x0800511d
 8004ff8:	08004fa9 	.word	0x08004fa9
 8004ffc:	08004fa9 	.word	0x08004fa9
 8005000:	0800515d 	.word	0x0800515d
 8005004:	08004fa9 	.word	0x08004fa9
 8005008:	0800505d 	.word	0x0800505d
 800500c:	08004fa9 	.word	0x08004fa9
 8005010:	08004fa9 	.word	0x08004fa9
 8005014:	08005125 	.word	0x08005125
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	1d1a      	adds	r2, r3, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	602a      	str	r2, [r5, #0]
 8005020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005028:	2301      	movs	r3, #1
 800502a:	e0a4      	b.n	8005176 <_printf_i+0x1f6>
 800502c:	6820      	ldr	r0, [r4, #0]
 800502e:	6829      	ldr	r1, [r5, #0]
 8005030:	0606      	lsls	r6, r0, #24
 8005032:	f101 0304 	add.w	r3, r1, #4
 8005036:	d50a      	bpl.n	800504e <_printf_i+0xce>
 8005038:	680e      	ldr	r6, [r1, #0]
 800503a:	602b      	str	r3, [r5, #0]
 800503c:	2e00      	cmp	r6, #0
 800503e:	da03      	bge.n	8005048 <_printf_i+0xc8>
 8005040:	232d      	movs	r3, #45	; 0x2d
 8005042:	4276      	negs	r6, r6
 8005044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005048:	230a      	movs	r3, #10
 800504a:	485e      	ldr	r0, [pc, #376]	; (80051c4 <_printf_i+0x244>)
 800504c:	e019      	b.n	8005082 <_printf_i+0x102>
 800504e:	680e      	ldr	r6, [r1, #0]
 8005050:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005054:	602b      	str	r3, [r5, #0]
 8005056:	bf18      	it	ne
 8005058:	b236      	sxthne	r6, r6
 800505a:	e7ef      	b.n	800503c <_printf_i+0xbc>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	1d19      	adds	r1, r3, #4
 8005062:	6029      	str	r1, [r5, #0]
 8005064:	0601      	lsls	r1, r0, #24
 8005066:	d501      	bpl.n	800506c <_printf_i+0xec>
 8005068:	681e      	ldr	r6, [r3, #0]
 800506a:	e002      	b.n	8005072 <_printf_i+0xf2>
 800506c:	0646      	lsls	r6, r0, #25
 800506e:	d5fb      	bpl.n	8005068 <_printf_i+0xe8>
 8005070:	881e      	ldrh	r6, [r3, #0]
 8005072:	2f6f      	cmp	r7, #111	; 0x6f
 8005074:	bf0c      	ite	eq
 8005076:	2308      	moveq	r3, #8
 8005078:	230a      	movne	r3, #10
 800507a:	4852      	ldr	r0, [pc, #328]	; (80051c4 <_printf_i+0x244>)
 800507c:	2100      	movs	r1, #0
 800507e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005082:	6865      	ldr	r5, [r4, #4]
 8005084:	2d00      	cmp	r5, #0
 8005086:	bfa8      	it	ge
 8005088:	6821      	ldrge	r1, [r4, #0]
 800508a:	60a5      	str	r5, [r4, #8]
 800508c:	bfa4      	itt	ge
 800508e:	f021 0104 	bicge.w	r1, r1, #4
 8005092:	6021      	strge	r1, [r4, #0]
 8005094:	b90e      	cbnz	r6, 800509a <_printf_i+0x11a>
 8005096:	2d00      	cmp	r5, #0
 8005098:	d04d      	beq.n	8005136 <_printf_i+0x1b6>
 800509a:	4615      	mov	r5, r2
 800509c:	fbb6 f1f3 	udiv	r1, r6, r3
 80050a0:	fb03 6711 	mls	r7, r3, r1, r6
 80050a4:	5dc7      	ldrb	r7, [r0, r7]
 80050a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050aa:	4637      	mov	r7, r6
 80050ac:	42bb      	cmp	r3, r7
 80050ae:	460e      	mov	r6, r1
 80050b0:	d9f4      	bls.n	800509c <_printf_i+0x11c>
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d10b      	bne.n	80050ce <_printf_i+0x14e>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	07de      	lsls	r6, r3, #31
 80050ba:	d508      	bpl.n	80050ce <_printf_i+0x14e>
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	6861      	ldr	r1, [r4, #4]
 80050c0:	4299      	cmp	r1, r3
 80050c2:	bfde      	ittt	le
 80050c4:	2330      	movle	r3, #48	; 0x30
 80050c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ce:	1b52      	subs	r2, r2, r5
 80050d0:	6122      	str	r2, [r4, #16]
 80050d2:	464b      	mov	r3, r9
 80050d4:	4621      	mov	r1, r4
 80050d6:	4640      	mov	r0, r8
 80050d8:	f8cd a000 	str.w	sl, [sp]
 80050dc:	aa03      	add	r2, sp, #12
 80050de:	f7ff fedf 	bl	8004ea0 <_printf_common>
 80050e2:	3001      	adds	r0, #1
 80050e4:	d14c      	bne.n	8005180 <_printf_i+0x200>
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	b004      	add	sp, #16
 80050ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f0:	4834      	ldr	r0, [pc, #208]	; (80051c4 <_printf_i+0x244>)
 80050f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050f6:	6829      	ldr	r1, [r5, #0]
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80050fe:	6029      	str	r1, [r5, #0]
 8005100:	061d      	lsls	r5, r3, #24
 8005102:	d514      	bpl.n	800512e <_printf_i+0x1ae>
 8005104:	07df      	lsls	r7, r3, #31
 8005106:	bf44      	itt	mi
 8005108:	f043 0320 	orrmi.w	r3, r3, #32
 800510c:	6023      	strmi	r3, [r4, #0]
 800510e:	b91e      	cbnz	r6, 8005118 <_printf_i+0x198>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	f023 0320 	bic.w	r3, r3, #32
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	2310      	movs	r3, #16
 800511a:	e7af      	b.n	800507c <_printf_i+0xfc>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	f043 0320 	orr.w	r3, r3, #32
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	2378      	movs	r3, #120	; 0x78
 8005126:	4828      	ldr	r0, [pc, #160]	; (80051c8 <_printf_i+0x248>)
 8005128:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800512c:	e7e3      	b.n	80050f6 <_printf_i+0x176>
 800512e:	0659      	lsls	r1, r3, #25
 8005130:	bf48      	it	mi
 8005132:	b2b6      	uxthmi	r6, r6
 8005134:	e7e6      	b.n	8005104 <_printf_i+0x184>
 8005136:	4615      	mov	r5, r2
 8005138:	e7bb      	b.n	80050b2 <_printf_i+0x132>
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	6826      	ldr	r6, [r4, #0]
 800513e:	1d18      	adds	r0, r3, #4
 8005140:	6961      	ldr	r1, [r4, #20]
 8005142:	6028      	str	r0, [r5, #0]
 8005144:	0635      	lsls	r5, r6, #24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	d501      	bpl.n	800514e <_printf_i+0x1ce>
 800514a:	6019      	str	r1, [r3, #0]
 800514c:	e002      	b.n	8005154 <_printf_i+0x1d4>
 800514e:	0670      	lsls	r0, r6, #25
 8005150:	d5fb      	bpl.n	800514a <_printf_i+0x1ca>
 8005152:	8019      	strh	r1, [r3, #0]
 8005154:	2300      	movs	r3, #0
 8005156:	4615      	mov	r5, r2
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	e7ba      	b.n	80050d2 <_printf_i+0x152>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	2100      	movs	r1, #0
 8005160:	1d1a      	adds	r2, r3, #4
 8005162:	602a      	str	r2, [r5, #0]
 8005164:	681d      	ldr	r5, [r3, #0]
 8005166:	6862      	ldr	r2, [r4, #4]
 8005168:	4628      	mov	r0, r5
 800516a:	f002 faef 	bl	800774c <memchr>
 800516e:	b108      	cbz	r0, 8005174 <_printf_i+0x1f4>
 8005170:	1b40      	subs	r0, r0, r5
 8005172:	6060      	str	r0, [r4, #4]
 8005174:	6863      	ldr	r3, [r4, #4]
 8005176:	6123      	str	r3, [r4, #16]
 8005178:	2300      	movs	r3, #0
 800517a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800517e:	e7a8      	b.n	80050d2 <_printf_i+0x152>
 8005180:	462a      	mov	r2, r5
 8005182:	4649      	mov	r1, r9
 8005184:	4640      	mov	r0, r8
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	47d0      	blx	sl
 800518a:	3001      	adds	r0, #1
 800518c:	d0ab      	beq.n	80050e6 <_printf_i+0x166>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	079b      	lsls	r3, r3, #30
 8005192:	d413      	bmi.n	80051bc <_printf_i+0x23c>
 8005194:	68e0      	ldr	r0, [r4, #12]
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	4298      	cmp	r0, r3
 800519a:	bfb8      	it	lt
 800519c:	4618      	movlt	r0, r3
 800519e:	e7a4      	b.n	80050ea <_printf_i+0x16a>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4632      	mov	r2, r6
 80051a4:	4649      	mov	r1, r9
 80051a6:	4640      	mov	r0, r8
 80051a8:	47d0      	blx	sl
 80051aa:	3001      	adds	r0, #1
 80051ac:	d09b      	beq.n	80050e6 <_printf_i+0x166>
 80051ae:	3501      	adds	r5, #1
 80051b0:	68e3      	ldr	r3, [r4, #12]
 80051b2:	9903      	ldr	r1, [sp, #12]
 80051b4:	1a5b      	subs	r3, r3, r1
 80051b6:	42ab      	cmp	r3, r5
 80051b8:	dcf2      	bgt.n	80051a0 <_printf_i+0x220>
 80051ba:	e7eb      	b.n	8005194 <_printf_i+0x214>
 80051bc:	2500      	movs	r5, #0
 80051be:	f104 0619 	add.w	r6, r4, #25
 80051c2:	e7f5      	b.n	80051b0 <_printf_i+0x230>
 80051c4:	080098fa 	.word	0x080098fa
 80051c8:	0800990b 	.word	0x0800990b

080051cc <_scanf_float>:
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	b087      	sub	sp, #28
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	688b      	ldr	r3, [r1, #8]
 80051d6:	4617      	mov	r7, r2
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80051de:	bf85      	ittet	hi
 80051e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80051e4:	195b      	addhi	r3, r3, r5
 80051e6:	2300      	movls	r3, #0
 80051e8:	9302      	strhi	r3, [sp, #8]
 80051ea:	bf88      	it	hi
 80051ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051f0:	468b      	mov	fp, r1
 80051f2:	f04f 0500 	mov.w	r5, #0
 80051f6:	bf8c      	ite	hi
 80051f8:	608b      	strhi	r3, [r1, #8]
 80051fa:	9302      	strls	r3, [sp, #8]
 80051fc:	680b      	ldr	r3, [r1, #0]
 80051fe:	4680      	mov	r8, r0
 8005200:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005204:	f84b 3b1c 	str.w	r3, [fp], #28
 8005208:	460c      	mov	r4, r1
 800520a:	465e      	mov	r6, fp
 800520c:	46aa      	mov	sl, r5
 800520e:	46a9      	mov	r9, r5
 8005210:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005214:	9501      	str	r5, [sp, #4]
 8005216:	68a2      	ldr	r2, [r4, #8]
 8005218:	b152      	cbz	r2, 8005230 <_scanf_float+0x64>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b4e      	cmp	r3, #78	; 0x4e
 8005220:	d864      	bhi.n	80052ec <_scanf_float+0x120>
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d83c      	bhi.n	80052a0 <_scanf_float+0xd4>
 8005226:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800522a:	b2c8      	uxtb	r0, r1
 800522c:	280e      	cmp	r0, #14
 800522e:	d93a      	bls.n	80052a6 <_scanf_float+0xda>
 8005230:	f1b9 0f00 	cmp.w	r9, #0
 8005234:	d003      	beq.n	800523e <_scanf_float+0x72>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005242:	f1ba 0f01 	cmp.w	sl, #1
 8005246:	f200 8113 	bhi.w	8005470 <_scanf_float+0x2a4>
 800524a:	455e      	cmp	r6, fp
 800524c:	f200 8105 	bhi.w	800545a <_scanf_float+0x28e>
 8005250:	2501      	movs	r5, #1
 8005252:	4628      	mov	r0, r5
 8005254:	b007      	add	sp, #28
 8005256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800525e:	2a0d      	cmp	r2, #13
 8005260:	d8e6      	bhi.n	8005230 <_scanf_float+0x64>
 8005262:	a101      	add	r1, pc, #4	; (adr r1, 8005268 <_scanf_float+0x9c>)
 8005264:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005268:	080053a7 	.word	0x080053a7
 800526c:	08005231 	.word	0x08005231
 8005270:	08005231 	.word	0x08005231
 8005274:	08005231 	.word	0x08005231
 8005278:	08005407 	.word	0x08005407
 800527c:	080053df 	.word	0x080053df
 8005280:	08005231 	.word	0x08005231
 8005284:	08005231 	.word	0x08005231
 8005288:	080053b5 	.word	0x080053b5
 800528c:	08005231 	.word	0x08005231
 8005290:	08005231 	.word	0x08005231
 8005294:	08005231 	.word	0x08005231
 8005298:	08005231 	.word	0x08005231
 800529c:	0800536d 	.word	0x0800536d
 80052a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80052a4:	e7db      	b.n	800525e <_scanf_float+0x92>
 80052a6:	290e      	cmp	r1, #14
 80052a8:	d8c2      	bhi.n	8005230 <_scanf_float+0x64>
 80052aa:	a001      	add	r0, pc, #4	; (adr r0, 80052b0 <_scanf_float+0xe4>)
 80052ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80052b0:	0800535f 	.word	0x0800535f
 80052b4:	08005231 	.word	0x08005231
 80052b8:	0800535f 	.word	0x0800535f
 80052bc:	080053f3 	.word	0x080053f3
 80052c0:	08005231 	.word	0x08005231
 80052c4:	0800530d 	.word	0x0800530d
 80052c8:	08005349 	.word	0x08005349
 80052cc:	08005349 	.word	0x08005349
 80052d0:	08005349 	.word	0x08005349
 80052d4:	08005349 	.word	0x08005349
 80052d8:	08005349 	.word	0x08005349
 80052dc:	08005349 	.word	0x08005349
 80052e0:	08005349 	.word	0x08005349
 80052e4:	08005349 	.word	0x08005349
 80052e8:	08005349 	.word	0x08005349
 80052ec:	2b6e      	cmp	r3, #110	; 0x6e
 80052ee:	d809      	bhi.n	8005304 <_scanf_float+0x138>
 80052f0:	2b60      	cmp	r3, #96	; 0x60
 80052f2:	d8b2      	bhi.n	800525a <_scanf_float+0x8e>
 80052f4:	2b54      	cmp	r3, #84	; 0x54
 80052f6:	d077      	beq.n	80053e8 <_scanf_float+0x21c>
 80052f8:	2b59      	cmp	r3, #89	; 0x59
 80052fa:	d199      	bne.n	8005230 <_scanf_float+0x64>
 80052fc:	2d07      	cmp	r5, #7
 80052fe:	d197      	bne.n	8005230 <_scanf_float+0x64>
 8005300:	2508      	movs	r5, #8
 8005302:	e029      	b.n	8005358 <_scanf_float+0x18c>
 8005304:	2b74      	cmp	r3, #116	; 0x74
 8005306:	d06f      	beq.n	80053e8 <_scanf_float+0x21c>
 8005308:	2b79      	cmp	r3, #121	; 0x79
 800530a:	e7f6      	b.n	80052fa <_scanf_float+0x12e>
 800530c:	6821      	ldr	r1, [r4, #0]
 800530e:	05c8      	lsls	r0, r1, #23
 8005310:	d51a      	bpl.n	8005348 <_scanf_float+0x17c>
 8005312:	9b02      	ldr	r3, [sp, #8]
 8005314:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005318:	6021      	str	r1, [r4, #0]
 800531a:	f109 0901 	add.w	r9, r9, #1
 800531e:	b11b      	cbz	r3, 8005328 <_scanf_float+0x15c>
 8005320:	3b01      	subs	r3, #1
 8005322:	3201      	adds	r2, #1
 8005324:	9302      	str	r3, [sp, #8]
 8005326:	60a2      	str	r2, [r4, #8]
 8005328:	68a3      	ldr	r3, [r4, #8]
 800532a:	3b01      	subs	r3, #1
 800532c:	60a3      	str	r3, [r4, #8]
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	3301      	adds	r3, #1
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3b01      	subs	r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	f340 8084 	ble.w	8005448 <_scanf_float+0x27c>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	3301      	adds	r3, #1
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	e766      	b.n	8005216 <_scanf_float+0x4a>
 8005348:	eb1a 0f05 	cmn.w	sl, r5
 800534c:	f47f af70 	bne.w	8005230 <_scanf_float+0x64>
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005356:	6022      	str	r2, [r4, #0]
 8005358:	f806 3b01 	strb.w	r3, [r6], #1
 800535c:	e7e4      	b.n	8005328 <_scanf_float+0x15c>
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	0610      	lsls	r0, r2, #24
 8005362:	f57f af65 	bpl.w	8005230 <_scanf_float+0x64>
 8005366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800536a:	e7f4      	b.n	8005356 <_scanf_float+0x18a>
 800536c:	f1ba 0f00 	cmp.w	sl, #0
 8005370:	d10e      	bne.n	8005390 <_scanf_float+0x1c4>
 8005372:	f1b9 0f00 	cmp.w	r9, #0
 8005376:	d10e      	bne.n	8005396 <_scanf_float+0x1ca>
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800537e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005382:	d108      	bne.n	8005396 <_scanf_float+0x1ca>
 8005384:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005388:	f04f 0a01 	mov.w	sl, #1
 800538c:	6022      	str	r2, [r4, #0]
 800538e:	e7e3      	b.n	8005358 <_scanf_float+0x18c>
 8005390:	f1ba 0f02 	cmp.w	sl, #2
 8005394:	d055      	beq.n	8005442 <_scanf_float+0x276>
 8005396:	2d01      	cmp	r5, #1
 8005398:	d002      	beq.n	80053a0 <_scanf_float+0x1d4>
 800539a:	2d04      	cmp	r5, #4
 800539c:	f47f af48 	bne.w	8005230 <_scanf_float+0x64>
 80053a0:	3501      	adds	r5, #1
 80053a2:	b2ed      	uxtb	r5, r5
 80053a4:	e7d8      	b.n	8005358 <_scanf_float+0x18c>
 80053a6:	f1ba 0f01 	cmp.w	sl, #1
 80053aa:	f47f af41 	bne.w	8005230 <_scanf_float+0x64>
 80053ae:	f04f 0a02 	mov.w	sl, #2
 80053b2:	e7d1      	b.n	8005358 <_scanf_float+0x18c>
 80053b4:	b97d      	cbnz	r5, 80053d6 <_scanf_float+0x20a>
 80053b6:	f1b9 0f00 	cmp.w	r9, #0
 80053ba:	f47f af3c 	bne.w	8005236 <_scanf_float+0x6a>
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80053c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80053c8:	f47f af39 	bne.w	800523e <_scanf_float+0x72>
 80053cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053d0:	2501      	movs	r5, #1
 80053d2:	6022      	str	r2, [r4, #0]
 80053d4:	e7c0      	b.n	8005358 <_scanf_float+0x18c>
 80053d6:	2d03      	cmp	r5, #3
 80053d8:	d0e2      	beq.n	80053a0 <_scanf_float+0x1d4>
 80053da:	2d05      	cmp	r5, #5
 80053dc:	e7de      	b.n	800539c <_scanf_float+0x1d0>
 80053de:	2d02      	cmp	r5, #2
 80053e0:	f47f af26 	bne.w	8005230 <_scanf_float+0x64>
 80053e4:	2503      	movs	r5, #3
 80053e6:	e7b7      	b.n	8005358 <_scanf_float+0x18c>
 80053e8:	2d06      	cmp	r5, #6
 80053ea:	f47f af21 	bne.w	8005230 <_scanf_float+0x64>
 80053ee:	2507      	movs	r5, #7
 80053f0:	e7b2      	b.n	8005358 <_scanf_float+0x18c>
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	0591      	lsls	r1, r2, #22
 80053f6:	f57f af1b 	bpl.w	8005230 <_scanf_float+0x64>
 80053fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80053fe:	6022      	str	r2, [r4, #0]
 8005400:	f8cd 9004 	str.w	r9, [sp, #4]
 8005404:	e7a8      	b.n	8005358 <_scanf_float+0x18c>
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800540c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005410:	d006      	beq.n	8005420 <_scanf_float+0x254>
 8005412:	0550      	lsls	r0, r2, #21
 8005414:	f57f af0c 	bpl.w	8005230 <_scanf_float+0x64>
 8005418:	f1b9 0f00 	cmp.w	r9, #0
 800541c:	f43f af0f 	beq.w	800523e <_scanf_float+0x72>
 8005420:	0591      	lsls	r1, r2, #22
 8005422:	bf58      	it	pl
 8005424:	9901      	ldrpl	r1, [sp, #4]
 8005426:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800542a:	bf58      	it	pl
 800542c:	eba9 0101 	subpl.w	r1, r9, r1
 8005430:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005434:	f04f 0900 	mov.w	r9, #0
 8005438:	bf58      	it	pl
 800543a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800543e:	6022      	str	r2, [r4, #0]
 8005440:	e78a      	b.n	8005358 <_scanf_float+0x18c>
 8005442:	f04f 0a03 	mov.w	sl, #3
 8005446:	e787      	b.n	8005358 <_scanf_float+0x18c>
 8005448:	4639      	mov	r1, r7
 800544a:	4640      	mov	r0, r8
 800544c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005450:	4798      	blx	r3
 8005452:	2800      	cmp	r0, #0
 8005454:	f43f aedf 	beq.w	8005216 <_scanf_float+0x4a>
 8005458:	e6ea      	b.n	8005230 <_scanf_float+0x64>
 800545a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800545e:	463a      	mov	r2, r7
 8005460:	4640      	mov	r0, r8
 8005462:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005466:	4798      	blx	r3
 8005468:	6923      	ldr	r3, [r4, #16]
 800546a:	3b01      	subs	r3, #1
 800546c:	6123      	str	r3, [r4, #16]
 800546e:	e6ec      	b.n	800524a <_scanf_float+0x7e>
 8005470:	1e6b      	subs	r3, r5, #1
 8005472:	2b06      	cmp	r3, #6
 8005474:	d825      	bhi.n	80054c2 <_scanf_float+0x2f6>
 8005476:	2d02      	cmp	r5, #2
 8005478:	d836      	bhi.n	80054e8 <_scanf_float+0x31c>
 800547a:	455e      	cmp	r6, fp
 800547c:	f67f aee8 	bls.w	8005250 <_scanf_float+0x84>
 8005480:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005484:	463a      	mov	r2, r7
 8005486:	4640      	mov	r0, r8
 8005488:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800548c:	4798      	blx	r3
 800548e:	6923      	ldr	r3, [r4, #16]
 8005490:	3b01      	subs	r3, #1
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	e7f1      	b.n	800547a <_scanf_float+0x2ae>
 8005496:	9802      	ldr	r0, [sp, #8]
 8005498:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800549c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80054a0:	463a      	mov	r2, r7
 80054a2:	9002      	str	r0, [sp, #8]
 80054a4:	4640      	mov	r0, r8
 80054a6:	4798      	blx	r3
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054b2:	fa5f fa8a 	uxtb.w	sl, sl
 80054b6:	f1ba 0f02 	cmp.w	sl, #2
 80054ba:	d1ec      	bne.n	8005496 <_scanf_float+0x2ca>
 80054bc:	3d03      	subs	r5, #3
 80054be:	b2ed      	uxtb	r5, r5
 80054c0:	1b76      	subs	r6, r6, r5
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	05da      	lsls	r2, r3, #23
 80054c6:	d52f      	bpl.n	8005528 <_scanf_float+0x35c>
 80054c8:	055b      	lsls	r3, r3, #21
 80054ca:	d510      	bpl.n	80054ee <_scanf_float+0x322>
 80054cc:	455e      	cmp	r6, fp
 80054ce:	f67f aebf 	bls.w	8005250 <_scanf_float+0x84>
 80054d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054d6:	463a      	mov	r2, r7
 80054d8:	4640      	mov	r0, r8
 80054da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054de:	4798      	blx	r3
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	6123      	str	r3, [r4, #16]
 80054e6:	e7f1      	b.n	80054cc <_scanf_float+0x300>
 80054e8:	46aa      	mov	sl, r5
 80054ea:	9602      	str	r6, [sp, #8]
 80054ec:	e7df      	b.n	80054ae <_scanf_float+0x2e2>
 80054ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80054f2:	6923      	ldr	r3, [r4, #16]
 80054f4:	2965      	cmp	r1, #101	; 0x65
 80054f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80054fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80054fe:	6123      	str	r3, [r4, #16]
 8005500:	d00c      	beq.n	800551c <_scanf_float+0x350>
 8005502:	2945      	cmp	r1, #69	; 0x45
 8005504:	d00a      	beq.n	800551c <_scanf_float+0x350>
 8005506:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800550a:	463a      	mov	r2, r7
 800550c:	4640      	mov	r0, r8
 800550e:	4798      	blx	r3
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005516:	3b01      	subs	r3, #1
 8005518:	1eb5      	subs	r5, r6, #2
 800551a:	6123      	str	r3, [r4, #16]
 800551c:	463a      	mov	r2, r7
 800551e:	4640      	mov	r0, r8
 8005520:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005524:	4798      	blx	r3
 8005526:	462e      	mov	r6, r5
 8005528:	6825      	ldr	r5, [r4, #0]
 800552a:	f015 0510 	ands.w	r5, r5, #16
 800552e:	d155      	bne.n	80055dc <_scanf_float+0x410>
 8005530:	7035      	strb	r5, [r6, #0]
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553c:	d11b      	bne.n	8005576 <_scanf_float+0x3aa>
 800553e:	9b01      	ldr	r3, [sp, #4]
 8005540:	454b      	cmp	r3, r9
 8005542:	eba3 0209 	sub.w	r2, r3, r9
 8005546:	d123      	bne.n	8005590 <_scanf_float+0x3c4>
 8005548:	2200      	movs	r2, #0
 800554a:	4659      	mov	r1, fp
 800554c:	4640      	mov	r0, r8
 800554e:	f000 fe7b 	bl	8006248 <_strtod_r>
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	9b03      	ldr	r3, [sp, #12]
 8005556:	f012 0f02 	tst.w	r2, #2
 800555a:	4606      	mov	r6, r0
 800555c:	460f      	mov	r7, r1
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	d021      	beq.n	80055a6 <_scanf_float+0x3da>
 8005562:	1d1a      	adds	r2, r3, #4
 8005564:	9903      	ldr	r1, [sp, #12]
 8005566:	600a      	str	r2, [r1, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	e9c3 6700 	strd	r6, r7, [r3]
 800556e:	68e3      	ldr	r3, [r4, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60e3      	str	r3, [r4, #12]
 8005574:	e66d      	b.n	8005252 <_scanf_float+0x86>
 8005576:	9b04      	ldr	r3, [sp, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0e5      	beq.n	8005548 <_scanf_float+0x37c>
 800557c:	9905      	ldr	r1, [sp, #20]
 800557e:	230a      	movs	r3, #10
 8005580:	462a      	mov	r2, r5
 8005582:	4640      	mov	r0, r8
 8005584:	3101      	adds	r1, #1
 8005586:	f000 fee1 	bl	800634c <_strtol_r>
 800558a:	9b04      	ldr	r3, [sp, #16]
 800558c:	9e05      	ldr	r6, [sp, #20]
 800558e:	1ac2      	subs	r2, r0, r3
 8005590:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005594:	429e      	cmp	r6, r3
 8005596:	bf28      	it	cs
 8005598:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800559c:	4630      	mov	r0, r6
 800559e:	4910      	ldr	r1, [pc, #64]	; (80055e0 <_scanf_float+0x414>)
 80055a0:	f000 f826 	bl	80055f0 <siprintf>
 80055a4:	e7d0      	b.n	8005548 <_scanf_float+0x37c>
 80055a6:	f012 0f04 	tst.w	r2, #4
 80055aa:	f103 0204 	add.w	r2, r3, #4
 80055ae:	d1d9      	bne.n	8005564 <_scanf_float+0x398>
 80055b0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80055b4:	f8cc 2000 	str.w	r2, [ip]
 80055b8:	f8d3 8000 	ldr.w	r8, [r3]
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	f7fb fa90 	bl	8000ae4 <__aeabi_dcmpun>
 80055c4:	b128      	cbz	r0, 80055d2 <_scanf_float+0x406>
 80055c6:	4807      	ldr	r0, [pc, #28]	; (80055e4 <_scanf_float+0x418>)
 80055c8:	f000 f80e 	bl	80055e8 <nanf>
 80055cc:	f8c8 0000 	str.w	r0, [r8]
 80055d0:	e7cd      	b.n	800556e <_scanf_float+0x3a2>
 80055d2:	4630      	mov	r0, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	f7fb fae3 	bl	8000ba0 <__aeabi_d2f>
 80055da:	e7f7      	b.n	80055cc <_scanf_float+0x400>
 80055dc:	2500      	movs	r5, #0
 80055de:	e638      	b.n	8005252 <_scanf_float+0x86>
 80055e0:	0800991c 	.word	0x0800991c
 80055e4:	08009d28 	.word	0x08009d28

080055e8 <nanf>:
 80055e8:	4800      	ldr	r0, [pc, #0]	; (80055ec <nanf+0x4>)
 80055ea:	4770      	bx	lr
 80055ec:	7fc00000 	.word	0x7fc00000

080055f0 <siprintf>:
 80055f0:	b40e      	push	{r1, r2, r3}
 80055f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055f6:	b500      	push	{lr}
 80055f8:	b09c      	sub	sp, #112	; 0x70
 80055fa:	ab1d      	add	r3, sp, #116	; 0x74
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	9006      	str	r0, [sp, #24]
 8005600:	9107      	str	r1, [sp, #28]
 8005602:	9104      	str	r1, [sp, #16]
 8005604:	4808      	ldr	r0, [pc, #32]	; (8005628 <siprintf+0x38>)
 8005606:	4909      	ldr	r1, [pc, #36]	; (800562c <siprintf+0x3c>)
 8005608:	f853 2b04 	ldr.w	r2, [r3], #4
 800560c:	9105      	str	r1, [sp, #20]
 800560e:	6800      	ldr	r0, [r0, #0]
 8005610:	a902      	add	r1, sp, #8
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	f002 feba 	bl	800838c <_svfiprintf_r>
 8005618:	2200      	movs	r2, #0
 800561a:	9b02      	ldr	r3, [sp, #8]
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	b01c      	add	sp, #112	; 0x70
 8005620:	f85d eb04 	ldr.w	lr, [sp], #4
 8005624:	b003      	add	sp, #12
 8005626:	4770      	bx	lr
 8005628:	20000040 	.word	0x20000040
 800562c:	ffff0208 	.word	0xffff0208

08005630 <sulp>:
 8005630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005634:	460f      	mov	r7, r1
 8005636:	4690      	mov	r8, r2
 8005638:	f002 fc14 	bl	8007e64 <__ulp>
 800563c:	4604      	mov	r4, r0
 800563e:	460d      	mov	r5, r1
 8005640:	f1b8 0f00 	cmp.w	r8, #0
 8005644:	d011      	beq.n	800566a <sulp+0x3a>
 8005646:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800564a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800564e:	2b00      	cmp	r3, #0
 8005650:	dd0b      	ble.n	800566a <sulp+0x3a>
 8005652:	2400      	movs	r4, #0
 8005654:	051b      	lsls	r3, r3, #20
 8005656:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800565a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	f7fa ffa5 	bl	80005b0 <__aeabi_dmul>
 8005666:	4604      	mov	r4, r0
 8005668:	460d      	mov	r5, r1
 800566a:	4620      	mov	r0, r4
 800566c:	4629      	mov	r1, r5
 800566e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005672:	0000      	movs	r0, r0
 8005674:	0000      	movs	r0, r0
	...

08005678 <_strtod_l>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	469b      	mov	fp, r3
 800567e:	2300      	movs	r3, #0
 8005680:	b09f      	sub	sp, #124	; 0x7c
 8005682:	931a      	str	r3, [sp, #104]	; 0x68
 8005684:	4b9e      	ldr	r3, [pc, #632]	; (8005900 <_strtod_l+0x288>)
 8005686:	4682      	mov	sl, r0
 8005688:	681f      	ldr	r7, [r3, #0]
 800568a:	460e      	mov	r6, r1
 800568c:	4638      	mov	r0, r7
 800568e:	9215      	str	r2, [sp, #84]	; 0x54
 8005690:	f7fa fdca 	bl	8000228 <strlen>
 8005694:	f04f 0800 	mov.w	r8, #0
 8005698:	4604      	mov	r4, r0
 800569a:	f04f 0900 	mov.w	r9, #0
 800569e:	9619      	str	r6, [sp, #100]	; 0x64
 80056a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	2a2b      	cmp	r2, #43	; 0x2b
 80056a6:	d04c      	beq.n	8005742 <_strtod_l+0xca>
 80056a8:	d83a      	bhi.n	8005720 <_strtod_l+0xa8>
 80056aa:	2a0d      	cmp	r2, #13
 80056ac:	d833      	bhi.n	8005716 <_strtod_l+0x9e>
 80056ae:	2a08      	cmp	r2, #8
 80056b0:	d833      	bhi.n	800571a <_strtod_l+0xa2>
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	d03d      	beq.n	8005732 <_strtod_l+0xba>
 80056b6:	2300      	movs	r3, #0
 80056b8:	930a      	str	r3, [sp, #40]	; 0x28
 80056ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80056bc:	782b      	ldrb	r3, [r5, #0]
 80056be:	2b30      	cmp	r3, #48	; 0x30
 80056c0:	f040 80aa 	bne.w	8005818 <_strtod_l+0x1a0>
 80056c4:	786b      	ldrb	r3, [r5, #1]
 80056c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80056ca:	2b58      	cmp	r3, #88	; 0x58
 80056cc:	d166      	bne.n	800579c <_strtod_l+0x124>
 80056ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d0:	4650      	mov	r0, sl
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	ab1a      	add	r3, sp, #104	; 0x68
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	4a8a      	ldr	r2, [pc, #552]	; (8005904 <_strtod_l+0x28c>)
 80056da:	f8cd b008 	str.w	fp, [sp, #8]
 80056de:	ab1b      	add	r3, sp, #108	; 0x6c
 80056e0:	a919      	add	r1, sp, #100	; 0x64
 80056e2:	f001 fd17 	bl	8007114 <__gethex>
 80056e6:	f010 0607 	ands.w	r6, r0, #7
 80056ea:	4604      	mov	r4, r0
 80056ec:	d005      	beq.n	80056fa <_strtod_l+0x82>
 80056ee:	2e06      	cmp	r6, #6
 80056f0:	d129      	bne.n	8005746 <_strtod_l+0xce>
 80056f2:	2300      	movs	r3, #0
 80056f4:	3501      	adds	r5, #1
 80056f6:	9519      	str	r5, [sp, #100]	; 0x64
 80056f8:	930a      	str	r3, [sp, #40]	; 0x28
 80056fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f040 858a 	bne.w	8006216 <_strtod_l+0xb9e>
 8005702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005704:	b1d3      	cbz	r3, 800573c <_strtod_l+0xc4>
 8005706:	4642      	mov	r2, r8
 8005708:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800570c:	4610      	mov	r0, r2
 800570e:	4619      	mov	r1, r3
 8005710:	b01f      	add	sp, #124	; 0x7c
 8005712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005716:	2a20      	cmp	r2, #32
 8005718:	d1cd      	bne.n	80056b6 <_strtod_l+0x3e>
 800571a:	3301      	adds	r3, #1
 800571c:	9319      	str	r3, [sp, #100]	; 0x64
 800571e:	e7bf      	b.n	80056a0 <_strtod_l+0x28>
 8005720:	2a2d      	cmp	r2, #45	; 0x2d
 8005722:	d1c8      	bne.n	80056b6 <_strtod_l+0x3e>
 8005724:	2201      	movs	r2, #1
 8005726:	920a      	str	r2, [sp, #40]	; 0x28
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	9219      	str	r2, [sp, #100]	; 0x64
 800572c:	785b      	ldrb	r3, [r3, #1]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1c3      	bne.n	80056ba <_strtod_l+0x42>
 8005732:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005734:	9619      	str	r6, [sp, #100]	; 0x64
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 856b 	bne.w	8006212 <_strtod_l+0xb9a>
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	e7e4      	b.n	800570c <_strtod_l+0x94>
 8005742:	2200      	movs	r2, #0
 8005744:	e7ef      	b.n	8005726 <_strtod_l+0xae>
 8005746:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005748:	b13a      	cbz	r2, 800575a <_strtod_l+0xe2>
 800574a:	2135      	movs	r1, #53	; 0x35
 800574c:	a81c      	add	r0, sp, #112	; 0x70
 800574e:	f002 fc8d 	bl	800806c <__copybits>
 8005752:	4650      	mov	r0, sl
 8005754:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005756:	f002 f855 	bl	8007804 <_Bfree>
 800575a:	3e01      	subs	r6, #1
 800575c:	2e04      	cmp	r6, #4
 800575e:	d806      	bhi.n	800576e <_strtod_l+0xf6>
 8005760:	e8df f006 	tbb	[pc, r6]
 8005764:	1714030a 	.word	0x1714030a
 8005768:	0a          	.byte	0x0a
 8005769:	00          	.byte	0x00
 800576a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800576e:	0721      	lsls	r1, r4, #28
 8005770:	d5c3      	bpl.n	80056fa <_strtod_l+0x82>
 8005772:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005776:	e7c0      	b.n	80056fa <_strtod_l+0x82>
 8005778:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800577a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800577e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005782:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005786:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800578a:	e7f0      	b.n	800576e <_strtod_l+0xf6>
 800578c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005908 <_strtod_l+0x290>
 8005790:	e7ed      	b.n	800576e <_strtod_l+0xf6>
 8005792:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005796:	f04f 38ff 	mov.w	r8, #4294967295
 800579a:	e7e8      	b.n	800576e <_strtod_l+0xf6>
 800579c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	9219      	str	r2, [sp, #100]	; 0x64
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	2b30      	cmp	r3, #48	; 0x30
 80057a6:	d0f9      	beq.n	800579c <_strtod_l+0x124>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0a6      	beq.n	80056fa <_strtod_l+0x82>
 80057ac:	2301      	movs	r3, #1
 80057ae:	9307      	str	r3, [sp, #28]
 80057b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057b2:	220a      	movs	r2, #10
 80057b4:	9308      	str	r3, [sp, #32]
 80057b6:	2300      	movs	r3, #0
 80057b8:	469b      	mov	fp, r3
 80057ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80057be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80057c0:	7805      	ldrb	r5, [r0, #0]
 80057c2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80057c6:	b2d9      	uxtb	r1, r3
 80057c8:	2909      	cmp	r1, #9
 80057ca:	d927      	bls.n	800581c <_strtod_l+0x1a4>
 80057cc:	4622      	mov	r2, r4
 80057ce:	4639      	mov	r1, r7
 80057d0:	f002 fef2 	bl	80085b8 <strncmp>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d033      	beq.n	8005840 <_strtod_l+0x1c8>
 80057d8:	2000      	movs	r0, #0
 80057da:	462a      	mov	r2, r5
 80057dc:	465c      	mov	r4, fp
 80057de:	4603      	mov	r3, r0
 80057e0:	9004      	str	r0, [sp, #16]
 80057e2:	2a65      	cmp	r2, #101	; 0x65
 80057e4:	d001      	beq.n	80057ea <_strtod_l+0x172>
 80057e6:	2a45      	cmp	r2, #69	; 0x45
 80057e8:	d114      	bne.n	8005814 <_strtod_l+0x19c>
 80057ea:	b91c      	cbnz	r4, 80057f4 <_strtod_l+0x17c>
 80057ec:	9a07      	ldr	r2, [sp, #28]
 80057ee:	4302      	orrs	r2, r0
 80057f0:	d09f      	beq.n	8005732 <_strtod_l+0xba>
 80057f2:	2400      	movs	r4, #0
 80057f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80057f6:	1c72      	adds	r2, r6, #1
 80057f8:	9219      	str	r2, [sp, #100]	; 0x64
 80057fa:	7872      	ldrb	r2, [r6, #1]
 80057fc:	2a2b      	cmp	r2, #43	; 0x2b
 80057fe:	d079      	beq.n	80058f4 <_strtod_l+0x27c>
 8005800:	2a2d      	cmp	r2, #45	; 0x2d
 8005802:	f000 8083 	beq.w	800590c <_strtod_l+0x294>
 8005806:	2700      	movs	r7, #0
 8005808:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800580c:	2909      	cmp	r1, #9
 800580e:	f240 8083 	bls.w	8005918 <_strtod_l+0x2a0>
 8005812:	9619      	str	r6, [sp, #100]	; 0x64
 8005814:	2500      	movs	r5, #0
 8005816:	e09f      	b.n	8005958 <_strtod_l+0x2e0>
 8005818:	2300      	movs	r3, #0
 800581a:	e7c8      	b.n	80057ae <_strtod_l+0x136>
 800581c:	f1bb 0f08 	cmp.w	fp, #8
 8005820:	bfd5      	itete	le
 8005822:	9906      	ldrle	r1, [sp, #24]
 8005824:	9905      	ldrgt	r1, [sp, #20]
 8005826:	fb02 3301 	mlale	r3, r2, r1, r3
 800582a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800582e:	f100 0001 	add.w	r0, r0, #1
 8005832:	bfd4      	ite	le
 8005834:	9306      	strle	r3, [sp, #24]
 8005836:	9305      	strgt	r3, [sp, #20]
 8005838:	f10b 0b01 	add.w	fp, fp, #1
 800583c:	9019      	str	r0, [sp, #100]	; 0x64
 800583e:	e7be      	b.n	80057be <_strtod_l+0x146>
 8005840:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005842:	191a      	adds	r2, r3, r4
 8005844:	9219      	str	r2, [sp, #100]	; 0x64
 8005846:	5d1a      	ldrb	r2, [r3, r4]
 8005848:	f1bb 0f00 	cmp.w	fp, #0
 800584c:	d036      	beq.n	80058bc <_strtod_l+0x244>
 800584e:	465c      	mov	r4, fp
 8005850:	9004      	str	r0, [sp, #16]
 8005852:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005856:	2b09      	cmp	r3, #9
 8005858:	d912      	bls.n	8005880 <_strtod_l+0x208>
 800585a:	2301      	movs	r3, #1
 800585c:	e7c1      	b.n	80057e2 <_strtod_l+0x16a>
 800585e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005860:	3001      	adds	r0, #1
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	9219      	str	r2, [sp, #100]	; 0x64
 8005866:	785a      	ldrb	r2, [r3, #1]
 8005868:	2a30      	cmp	r2, #48	; 0x30
 800586a:	d0f8      	beq.n	800585e <_strtod_l+0x1e6>
 800586c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005870:	2b08      	cmp	r3, #8
 8005872:	f200 84d5 	bhi.w	8006220 <_strtod_l+0xba8>
 8005876:	9004      	str	r0, [sp, #16]
 8005878:	2000      	movs	r0, #0
 800587a:	4604      	mov	r4, r0
 800587c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800587e:	9308      	str	r3, [sp, #32]
 8005880:	3a30      	subs	r2, #48	; 0x30
 8005882:	f100 0301 	add.w	r3, r0, #1
 8005886:	d013      	beq.n	80058b0 <_strtod_l+0x238>
 8005888:	9904      	ldr	r1, [sp, #16]
 800588a:	1905      	adds	r5, r0, r4
 800588c:	4419      	add	r1, r3
 800588e:	9104      	str	r1, [sp, #16]
 8005890:	4623      	mov	r3, r4
 8005892:	210a      	movs	r1, #10
 8005894:	42ab      	cmp	r3, r5
 8005896:	d113      	bne.n	80058c0 <_strtod_l+0x248>
 8005898:	1823      	adds	r3, r4, r0
 800589a:	2b08      	cmp	r3, #8
 800589c:	f104 0401 	add.w	r4, r4, #1
 80058a0:	4404      	add	r4, r0
 80058a2:	dc1b      	bgt.n	80058dc <_strtod_l+0x264>
 80058a4:	230a      	movs	r3, #10
 80058a6:	9906      	ldr	r1, [sp, #24]
 80058a8:	fb03 2301 	mla	r3, r3, r1, r2
 80058ac:	9306      	str	r3, [sp, #24]
 80058ae:	2300      	movs	r3, #0
 80058b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80058b2:	4618      	mov	r0, r3
 80058b4:	1c51      	adds	r1, r2, #1
 80058b6:	9119      	str	r1, [sp, #100]	; 0x64
 80058b8:	7852      	ldrb	r2, [r2, #1]
 80058ba:	e7ca      	b.n	8005852 <_strtod_l+0x1da>
 80058bc:	4658      	mov	r0, fp
 80058be:	e7d3      	b.n	8005868 <_strtod_l+0x1f0>
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	dc04      	bgt.n	80058ce <_strtod_l+0x256>
 80058c4:	9f06      	ldr	r7, [sp, #24]
 80058c6:	434f      	muls	r7, r1
 80058c8:	9706      	str	r7, [sp, #24]
 80058ca:	3301      	adds	r3, #1
 80058cc:	e7e2      	b.n	8005894 <_strtod_l+0x21c>
 80058ce:	1c5f      	adds	r7, r3, #1
 80058d0:	2f10      	cmp	r7, #16
 80058d2:	bfde      	ittt	le
 80058d4:	9f05      	ldrle	r7, [sp, #20]
 80058d6:	434f      	mulle	r7, r1
 80058d8:	9705      	strle	r7, [sp, #20]
 80058da:	e7f6      	b.n	80058ca <_strtod_l+0x252>
 80058dc:	2c10      	cmp	r4, #16
 80058de:	bfdf      	itttt	le
 80058e0:	230a      	movle	r3, #10
 80058e2:	9905      	ldrle	r1, [sp, #20]
 80058e4:	fb03 2301 	mlale	r3, r3, r1, r2
 80058e8:	9305      	strle	r3, [sp, #20]
 80058ea:	e7e0      	b.n	80058ae <_strtod_l+0x236>
 80058ec:	2300      	movs	r3, #0
 80058ee:	9304      	str	r3, [sp, #16]
 80058f0:	2301      	movs	r3, #1
 80058f2:	e77b      	b.n	80057ec <_strtod_l+0x174>
 80058f4:	2700      	movs	r7, #0
 80058f6:	1cb2      	adds	r2, r6, #2
 80058f8:	9219      	str	r2, [sp, #100]	; 0x64
 80058fa:	78b2      	ldrb	r2, [r6, #2]
 80058fc:	e784      	b.n	8005808 <_strtod_l+0x190>
 80058fe:	bf00      	nop
 8005900:	08009b70 	.word	0x08009b70
 8005904:	08009924 	.word	0x08009924
 8005908:	7ff00000 	.word	0x7ff00000
 800590c:	2701      	movs	r7, #1
 800590e:	e7f2      	b.n	80058f6 <_strtod_l+0x27e>
 8005910:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005912:	1c51      	adds	r1, r2, #1
 8005914:	9119      	str	r1, [sp, #100]	; 0x64
 8005916:	7852      	ldrb	r2, [r2, #1]
 8005918:	2a30      	cmp	r2, #48	; 0x30
 800591a:	d0f9      	beq.n	8005910 <_strtod_l+0x298>
 800591c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005920:	2908      	cmp	r1, #8
 8005922:	f63f af77 	bhi.w	8005814 <_strtod_l+0x19c>
 8005926:	f04f 0e0a 	mov.w	lr, #10
 800592a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800592e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005930:	9209      	str	r2, [sp, #36]	; 0x24
 8005932:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005934:	1c51      	adds	r1, r2, #1
 8005936:	9119      	str	r1, [sp, #100]	; 0x64
 8005938:	7852      	ldrb	r2, [r2, #1]
 800593a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800593e:	2d09      	cmp	r5, #9
 8005940:	d935      	bls.n	80059ae <_strtod_l+0x336>
 8005942:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005944:	1b49      	subs	r1, r1, r5
 8005946:	2908      	cmp	r1, #8
 8005948:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800594c:	dc02      	bgt.n	8005954 <_strtod_l+0x2dc>
 800594e:	4565      	cmp	r5, ip
 8005950:	bfa8      	it	ge
 8005952:	4665      	movge	r5, ip
 8005954:	b107      	cbz	r7, 8005958 <_strtod_l+0x2e0>
 8005956:	426d      	negs	r5, r5
 8005958:	2c00      	cmp	r4, #0
 800595a:	d14c      	bne.n	80059f6 <_strtod_l+0x37e>
 800595c:	9907      	ldr	r1, [sp, #28]
 800595e:	4301      	orrs	r1, r0
 8005960:	f47f aecb 	bne.w	80056fa <_strtod_l+0x82>
 8005964:	2b00      	cmp	r3, #0
 8005966:	f47f aee4 	bne.w	8005732 <_strtod_l+0xba>
 800596a:	2a69      	cmp	r2, #105	; 0x69
 800596c:	d026      	beq.n	80059bc <_strtod_l+0x344>
 800596e:	dc23      	bgt.n	80059b8 <_strtod_l+0x340>
 8005970:	2a49      	cmp	r2, #73	; 0x49
 8005972:	d023      	beq.n	80059bc <_strtod_l+0x344>
 8005974:	2a4e      	cmp	r2, #78	; 0x4e
 8005976:	f47f aedc 	bne.w	8005732 <_strtod_l+0xba>
 800597a:	499d      	ldr	r1, [pc, #628]	; (8005bf0 <_strtod_l+0x578>)
 800597c:	a819      	add	r0, sp, #100	; 0x64
 800597e:	f001 fe17 	bl	80075b0 <__match>
 8005982:	2800      	cmp	r0, #0
 8005984:	f43f aed5 	beq.w	8005732 <_strtod_l+0xba>
 8005988:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b28      	cmp	r3, #40	; 0x28
 800598e:	d12c      	bne.n	80059ea <_strtod_l+0x372>
 8005990:	4998      	ldr	r1, [pc, #608]	; (8005bf4 <_strtod_l+0x57c>)
 8005992:	aa1c      	add	r2, sp, #112	; 0x70
 8005994:	a819      	add	r0, sp, #100	; 0x64
 8005996:	f001 fe1f 	bl	80075d8 <__hexnan>
 800599a:	2805      	cmp	r0, #5
 800599c:	d125      	bne.n	80059ea <_strtod_l+0x372>
 800599e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80059a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80059a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80059ac:	e6a5      	b.n	80056fa <_strtod_l+0x82>
 80059ae:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80059b2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80059b6:	e7bc      	b.n	8005932 <_strtod_l+0x2ba>
 80059b8:	2a6e      	cmp	r2, #110	; 0x6e
 80059ba:	e7dc      	b.n	8005976 <_strtod_l+0x2fe>
 80059bc:	498e      	ldr	r1, [pc, #568]	; (8005bf8 <_strtod_l+0x580>)
 80059be:	a819      	add	r0, sp, #100	; 0x64
 80059c0:	f001 fdf6 	bl	80075b0 <__match>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f43f aeb4 	beq.w	8005732 <_strtod_l+0xba>
 80059ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059cc:	498b      	ldr	r1, [pc, #556]	; (8005bfc <_strtod_l+0x584>)
 80059ce:	3b01      	subs	r3, #1
 80059d0:	a819      	add	r0, sp, #100	; 0x64
 80059d2:	9319      	str	r3, [sp, #100]	; 0x64
 80059d4:	f001 fdec 	bl	80075b0 <__match>
 80059d8:	b910      	cbnz	r0, 80059e0 <_strtod_l+0x368>
 80059da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059dc:	3301      	adds	r3, #1
 80059de:	9319      	str	r3, [sp, #100]	; 0x64
 80059e0:	f04f 0800 	mov.w	r8, #0
 80059e4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005c00 <_strtod_l+0x588>
 80059e8:	e687      	b.n	80056fa <_strtod_l+0x82>
 80059ea:	4886      	ldr	r0, [pc, #536]	; (8005c04 <_strtod_l+0x58c>)
 80059ec:	f002 fdce 	bl	800858c <nan>
 80059f0:	4680      	mov	r8, r0
 80059f2:	4689      	mov	r9, r1
 80059f4:	e681      	b.n	80056fa <_strtod_l+0x82>
 80059f6:	9b04      	ldr	r3, [sp, #16]
 80059f8:	f1bb 0f00 	cmp.w	fp, #0
 80059fc:	bf08      	it	eq
 80059fe:	46a3      	moveq	fp, r4
 8005a00:	1aeb      	subs	r3, r5, r3
 8005a02:	2c10      	cmp	r4, #16
 8005a04:	9806      	ldr	r0, [sp, #24]
 8005a06:	4626      	mov	r6, r4
 8005a08:	9307      	str	r3, [sp, #28]
 8005a0a:	bfa8      	it	ge
 8005a0c:	2610      	movge	r6, #16
 8005a0e:	f7fa fd55 	bl	80004bc <__aeabi_ui2d>
 8005a12:	2c09      	cmp	r4, #9
 8005a14:	4680      	mov	r8, r0
 8005a16:	4689      	mov	r9, r1
 8005a18:	dd13      	ble.n	8005a42 <_strtod_l+0x3ca>
 8005a1a:	4b7b      	ldr	r3, [pc, #492]	; (8005c08 <_strtod_l+0x590>)
 8005a1c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a20:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005a24:	f7fa fdc4 	bl	80005b0 <__aeabi_dmul>
 8005a28:	4680      	mov	r8, r0
 8005a2a:	9805      	ldr	r0, [sp, #20]
 8005a2c:	4689      	mov	r9, r1
 8005a2e:	f7fa fd45 	bl	80004bc <__aeabi_ui2d>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4640      	mov	r0, r8
 8005a38:	4649      	mov	r1, r9
 8005a3a:	f7fa fc03 	bl	8000244 <__adddf3>
 8005a3e:	4680      	mov	r8, r0
 8005a40:	4689      	mov	r9, r1
 8005a42:	2c0f      	cmp	r4, #15
 8005a44:	dc36      	bgt.n	8005ab4 <_strtod_l+0x43c>
 8005a46:	9b07      	ldr	r3, [sp, #28]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f43f ae56 	beq.w	80056fa <_strtod_l+0x82>
 8005a4e:	dd22      	ble.n	8005a96 <_strtod_l+0x41e>
 8005a50:	2b16      	cmp	r3, #22
 8005a52:	dc09      	bgt.n	8005a68 <_strtod_l+0x3f0>
 8005a54:	496c      	ldr	r1, [pc, #432]	; (8005c08 <_strtod_l+0x590>)
 8005a56:	4642      	mov	r2, r8
 8005a58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a62:	f7fa fda5 	bl	80005b0 <__aeabi_dmul>
 8005a66:	e7c3      	b.n	80059f0 <_strtod_l+0x378>
 8005a68:	9a07      	ldr	r2, [sp, #28]
 8005a6a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	db20      	blt.n	8005ab4 <_strtod_l+0x43c>
 8005a72:	4d65      	ldr	r5, [pc, #404]	; (8005c08 <_strtod_l+0x590>)
 8005a74:	f1c4 040f 	rsb	r4, r4, #15
 8005a78:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a82:	464b      	mov	r3, r9
 8005a84:	f7fa fd94 	bl	80005b0 <__aeabi_dmul>
 8005a88:	9b07      	ldr	r3, [sp, #28]
 8005a8a:	1b1c      	subs	r4, r3, r4
 8005a8c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005a90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a94:	e7e5      	b.n	8005a62 <_strtod_l+0x3ea>
 8005a96:	9b07      	ldr	r3, [sp, #28]
 8005a98:	3316      	adds	r3, #22
 8005a9a:	db0b      	blt.n	8005ab4 <_strtod_l+0x43c>
 8005a9c:	9b04      	ldr	r3, [sp, #16]
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	1b5d      	subs	r5, r3, r5
 8005aa2:	4b59      	ldr	r3, [pc, #356]	; (8005c08 <_strtod_l+0x590>)
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005aaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005aae:	f7fa fea9 	bl	8000804 <__aeabi_ddiv>
 8005ab2:	e79d      	b.n	80059f0 <_strtod_l+0x378>
 8005ab4:	9b07      	ldr	r3, [sp, #28]
 8005ab6:	1ba6      	subs	r6, r4, r6
 8005ab8:	441e      	add	r6, r3
 8005aba:	2e00      	cmp	r6, #0
 8005abc:	dd74      	ble.n	8005ba8 <_strtod_l+0x530>
 8005abe:	f016 030f 	ands.w	r3, r6, #15
 8005ac2:	d00a      	beq.n	8005ada <_strtod_l+0x462>
 8005ac4:	4950      	ldr	r1, [pc, #320]	; (8005c08 <_strtod_l+0x590>)
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	f7fa fd6d 	bl	80005b0 <__aeabi_dmul>
 8005ad6:	4680      	mov	r8, r0
 8005ad8:	4689      	mov	r9, r1
 8005ada:	f036 060f 	bics.w	r6, r6, #15
 8005ade:	d052      	beq.n	8005b86 <_strtod_l+0x50e>
 8005ae0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005ae4:	dd27      	ble.n	8005b36 <_strtod_l+0x4be>
 8005ae6:	f04f 0b00 	mov.w	fp, #0
 8005aea:	f8cd b010 	str.w	fp, [sp, #16]
 8005aee:	f8cd b020 	str.w	fp, [sp, #32]
 8005af2:	f8cd b018 	str.w	fp, [sp, #24]
 8005af6:	2322      	movs	r3, #34	; 0x22
 8005af8:	f04f 0800 	mov.w	r8, #0
 8005afc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005c00 <_strtod_l+0x588>
 8005b00:	f8ca 3000 	str.w	r3, [sl]
 8005b04:	9b08      	ldr	r3, [sp, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f43f adf7 	beq.w	80056fa <_strtod_l+0x82>
 8005b0c:	4650      	mov	r0, sl
 8005b0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b10:	f001 fe78 	bl	8007804 <_Bfree>
 8005b14:	4650      	mov	r0, sl
 8005b16:	9906      	ldr	r1, [sp, #24]
 8005b18:	f001 fe74 	bl	8007804 <_Bfree>
 8005b1c:	4650      	mov	r0, sl
 8005b1e:	9904      	ldr	r1, [sp, #16]
 8005b20:	f001 fe70 	bl	8007804 <_Bfree>
 8005b24:	4650      	mov	r0, sl
 8005b26:	9908      	ldr	r1, [sp, #32]
 8005b28:	f001 fe6c 	bl	8007804 <_Bfree>
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	4650      	mov	r0, sl
 8005b30:	f001 fe68 	bl	8007804 <_Bfree>
 8005b34:	e5e1      	b.n	80056fa <_strtod_l+0x82>
 8005b36:	4b35      	ldr	r3, [pc, #212]	; (8005c0c <_strtod_l+0x594>)
 8005b38:	4640      	mov	r0, r8
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4649      	mov	r1, r9
 8005b40:	461f      	mov	r7, r3
 8005b42:	1136      	asrs	r6, r6, #4
 8005b44:	2e01      	cmp	r6, #1
 8005b46:	dc21      	bgt.n	8005b8c <_strtod_l+0x514>
 8005b48:	b10b      	cbz	r3, 8005b4e <_strtod_l+0x4d6>
 8005b4a:	4680      	mov	r8, r0
 8005b4c:	4689      	mov	r9, r1
 8005b4e:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <_strtod_l+0x594>)
 8005b50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005b54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005b58:	4642      	mov	r2, r8
 8005b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b5e:	464b      	mov	r3, r9
 8005b60:	f7fa fd26 	bl	80005b0 <__aeabi_dmul>
 8005b64:	4b26      	ldr	r3, [pc, #152]	; (8005c00 <_strtod_l+0x588>)
 8005b66:	460a      	mov	r2, r1
 8005b68:	400b      	ands	r3, r1
 8005b6a:	4929      	ldr	r1, [pc, #164]	; (8005c10 <_strtod_l+0x598>)
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	428b      	cmp	r3, r1
 8005b70:	d8b9      	bhi.n	8005ae6 <_strtod_l+0x46e>
 8005b72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b76:	428b      	cmp	r3, r1
 8005b78:	bf86      	itte	hi
 8005b7a:	f04f 38ff 	movhi.w	r8, #4294967295
 8005b7e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005c14 <_strtod_l+0x59c>
 8005b82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005b86:	2300      	movs	r3, #0
 8005b88:	9305      	str	r3, [sp, #20]
 8005b8a:	e07f      	b.n	8005c8c <_strtod_l+0x614>
 8005b8c:	07f2      	lsls	r2, r6, #31
 8005b8e:	d505      	bpl.n	8005b9c <_strtod_l+0x524>
 8005b90:	9b05      	ldr	r3, [sp, #20]
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f7fa fd0b 	bl	80005b0 <__aeabi_dmul>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	9a05      	ldr	r2, [sp, #20]
 8005b9e:	3701      	adds	r7, #1
 8005ba0:	3208      	adds	r2, #8
 8005ba2:	1076      	asrs	r6, r6, #1
 8005ba4:	9205      	str	r2, [sp, #20]
 8005ba6:	e7cd      	b.n	8005b44 <_strtod_l+0x4cc>
 8005ba8:	d0ed      	beq.n	8005b86 <_strtod_l+0x50e>
 8005baa:	4276      	negs	r6, r6
 8005bac:	f016 020f 	ands.w	r2, r6, #15
 8005bb0:	d00a      	beq.n	8005bc8 <_strtod_l+0x550>
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <_strtod_l+0x590>)
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bba:	4649      	mov	r1, r9
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f7fa fe20 	bl	8000804 <__aeabi_ddiv>
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	4689      	mov	r9, r1
 8005bc8:	1136      	asrs	r6, r6, #4
 8005bca:	d0dc      	beq.n	8005b86 <_strtod_l+0x50e>
 8005bcc:	2e1f      	cmp	r6, #31
 8005bce:	dd23      	ble.n	8005c18 <_strtod_l+0x5a0>
 8005bd0:	f04f 0b00 	mov.w	fp, #0
 8005bd4:	f8cd b010 	str.w	fp, [sp, #16]
 8005bd8:	f8cd b020 	str.w	fp, [sp, #32]
 8005bdc:	f8cd b018 	str.w	fp, [sp, #24]
 8005be0:	2322      	movs	r3, #34	; 0x22
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	f04f 0900 	mov.w	r9, #0
 8005bea:	f8ca 3000 	str.w	r3, [sl]
 8005bee:	e789      	b.n	8005b04 <_strtod_l+0x48c>
 8005bf0:	080098f5 	.word	0x080098f5
 8005bf4:	08009938 	.word	0x08009938
 8005bf8:	080098ed 	.word	0x080098ed
 8005bfc:	08009a7c 	.word	0x08009a7c
 8005c00:	7ff00000 	.word	0x7ff00000
 8005c04:	08009d28 	.word	0x08009d28
 8005c08:	08009c08 	.word	0x08009c08
 8005c0c:	08009be0 	.word	0x08009be0
 8005c10:	7ca00000 	.word	0x7ca00000
 8005c14:	7fefffff 	.word	0x7fefffff
 8005c18:	f016 0310 	ands.w	r3, r6, #16
 8005c1c:	bf18      	it	ne
 8005c1e:	236a      	movne	r3, #106	; 0x6a
 8005c20:	4640      	mov	r0, r8
 8005c22:	9305      	str	r3, [sp, #20]
 8005c24:	4649      	mov	r1, r9
 8005c26:	2300      	movs	r3, #0
 8005c28:	4fb0      	ldr	r7, [pc, #704]	; (8005eec <_strtod_l+0x874>)
 8005c2a:	07f2      	lsls	r2, r6, #31
 8005c2c:	d504      	bpl.n	8005c38 <_strtod_l+0x5c0>
 8005c2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c32:	f7fa fcbd 	bl	80005b0 <__aeabi_dmul>
 8005c36:	2301      	movs	r3, #1
 8005c38:	1076      	asrs	r6, r6, #1
 8005c3a:	f107 0708 	add.w	r7, r7, #8
 8005c3e:	d1f4      	bne.n	8005c2a <_strtod_l+0x5b2>
 8005c40:	b10b      	cbz	r3, 8005c46 <_strtod_l+0x5ce>
 8005c42:	4680      	mov	r8, r0
 8005c44:	4689      	mov	r9, r1
 8005c46:	9b05      	ldr	r3, [sp, #20]
 8005c48:	b1c3      	cbz	r3, 8005c7c <_strtod_l+0x604>
 8005c4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005c4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	4649      	mov	r1, r9
 8005c56:	dd11      	ble.n	8005c7c <_strtod_l+0x604>
 8005c58:	2b1f      	cmp	r3, #31
 8005c5a:	f340 8127 	ble.w	8005eac <_strtod_l+0x834>
 8005c5e:	2b34      	cmp	r3, #52	; 0x34
 8005c60:	bfd8      	it	le
 8005c62:	f04f 33ff 	movle.w	r3, #4294967295
 8005c66:	f04f 0800 	mov.w	r8, #0
 8005c6a:	bfcf      	iteee	gt
 8005c6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005c70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005c74:	fa03 f202 	lslle.w	r2, r3, r2
 8005c78:	ea02 0901 	andle.w	r9, r2, r1
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4640      	mov	r0, r8
 8005c82:	4649      	mov	r1, r9
 8005c84:	f7fa fefc 	bl	8000a80 <__aeabi_dcmpeq>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d1a1      	bne.n	8005bd0 <_strtod_l+0x558>
 8005c8c:	9b06      	ldr	r3, [sp, #24]
 8005c8e:	465a      	mov	r2, fp
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	4650      	mov	r0, sl
 8005c94:	4623      	mov	r3, r4
 8005c96:	9908      	ldr	r1, [sp, #32]
 8005c98:	f001 fe1c 	bl	80078d4 <__s2b>
 8005c9c:	9008      	str	r0, [sp, #32]
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	f43f af21 	beq.w	8005ae6 <_strtod_l+0x46e>
 8005ca4:	9b04      	ldr	r3, [sp, #16]
 8005ca6:	f04f 0b00 	mov.w	fp, #0
 8005caa:	1b5d      	subs	r5, r3, r5
 8005cac:	9b07      	ldr	r3, [sp, #28]
 8005cae:	f8cd b010 	str.w	fp, [sp, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfb4      	ite	lt
 8005cb6:	462b      	movlt	r3, r5
 8005cb8:	2300      	movge	r3, #0
 8005cba:	930e      	str	r3, [sp, #56]	; 0x38
 8005cbc:	9b07      	ldr	r3, [sp, #28]
 8005cbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005cc2:	9314      	str	r3, [sp, #80]	; 0x50
 8005cc4:	9b08      	ldr	r3, [sp, #32]
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	6859      	ldr	r1, [r3, #4]
 8005cca:	f001 fd5b 	bl	8007784 <_Balloc>
 8005cce:	9006      	str	r0, [sp, #24]
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	f43f af10 	beq.w	8005af6 <_strtod_l+0x47e>
 8005cd6:	9b08      	ldr	r3, [sp, #32]
 8005cd8:	300c      	adds	r0, #12
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	f103 010c 	add.w	r1, r3, #12
 8005ce0:	3202      	adds	r2, #2
 8005ce2:	0092      	lsls	r2, r2, #2
 8005ce4:	f001 fd40 	bl	8007768 <memcpy>
 8005ce8:	ab1c      	add	r3, sp, #112	; 0x70
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	ab1b      	add	r3, sp, #108	; 0x6c
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	4650      	mov	r0, sl
 8005cf6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005cfa:	f002 f92d 	bl	8007f58 <__d2b>
 8005cfe:	901a      	str	r0, [sp, #104]	; 0x68
 8005d00:	2800      	cmp	r0, #0
 8005d02:	f43f aef8 	beq.w	8005af6 <_strtod_l+0x47e>
 8005d06:	2101      	movs	r1, #1
 8005d08:	4650      	mov	r0, sl
 8005d0a:	f001 fe7b 	bl	8007a04 <__i2b>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	9004      	str	r0, [sp, #16]
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f43f aeef 	beq.w	8005af6 <_strtod_l+0x47e>
 8005d18:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005d1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	bfab      	itete	ge
 8005d20:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005d22:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005d24:	18ee      	addge	r6, r5, r3
 8005d26:	1b5c      	sublt	r4, r3, r5
 8005d28:	9b05      	ldr	r3, [sp, #20]
 8005d2a:	bfa8      	it	ge
 8005d2c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005d2e:	eba5 0503 	sub.w	r5, r5, r3
 8005d32:	4415      	add	r5, r2
 8005d34:	4b6e      	ldr	r3, [pc, #440]	; (8005ef0 <_strtod_l+0x878>)
 8005d36:	f105 35ff 	add.w	r5, r5, #4294967295
 8005d3a:	bfb8      	it	lt
 8005d3c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005d3e:	429d      	cmp	r5, r3
 8005d40:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d44:	f280 80c4 	bge.w	8005ed0 <_strtod_l+0x858>
 8005d48:	1b5b      	subs	r3, r3, r5
 8005d4a:	2b1f      	cmp	r3, #31
 8005d4c:	f04f 0701 	mov.w	r7, #1
 8005d50:	eba2 0203 	sub.w	r2, r2, r3
 8005d54:	f300 80b1 	bgt.w	8005eba <_strtod_l+0x842>
 8005d58:	2500      	movs	r5, #0
 8005d5a:	fa07 f303 	lsl.w	r3, r7, r3
 8005d5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d60:	18b7      	adds	r7, r6, r2
 8005d62:	9b05      	ldr	r3, [sp, #20]
 8005d64:	42be      	cmp	r6, r7
 8005d66:	4414      	add	r4, r2
 8005d68:	441c      	add	r4, r3
 8005d6a:	4633      	mov	r3, r6
 8005d6c:	bfa8      	it	ge
 8005d6e:	463b      	movge	r3, r7
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	bfa8      	it	ge
 8005d74:	4623      	movge	r3, r4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfc2      	ittt	gt
 8005d7a:	1aff      	subgt	r7, r7, r3
 8005d7c:	1ae4      	subgt	r4, r4, r3
 8005d7e:	1af6      	subgt	r6, r6, r3
 8005d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	dd17      	ble.n	8005db6 <_strtod_l+0x73e>
 8005d86:	461a      	mov	r2, r3
 8005d88:	4650      	mov	r0, sl
 8005d8a:	9904      	ldr	r1, [sp, #16]
 8005d8c:	f001 fef8 	bl	8007b80 <__pow5mult>
 8005d90:	9004      	str	r0, [sp, #16]
 8005d92:	2800      	cmp	r0, #0
 8005d94:	f43f aeaf 	beq.w	8005af6 <_strtod_l+0x47e>
 8005d98:	4601      	mov	r1, r0
 8005d9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	f001 fe47 	bl	8007a30 <__multiply>
 8005da2:	9009      	str	r0, [sp, #36]	; 0x24
 8005da4:	2800      	cmp	r0, #0
 8005da6:	f43f aea6 	beq.w	8005af6 <_strtod_l+0x47e>
 8005daa:	4650      	mov	r0, sl
 8005dac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005dae:	f001 fd29 	bl	8007804 <_Bfree>
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	931a      	str	r3, [sp, #104]	; 0x68
 8005db6:	2f00      	cmp	r7, #0
 8005db8:	f300 808e 	bgt.w	8005ed8 <_strtod_l+0x860>
 8005dbc:	9b07      	ldr	r3, [sp, #28]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dd08      	ble.n	8005dd4 <_strtod_l+0x75c>
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005dc6:	9906      	ldr	r1, [sp, #24]
 8005dc8:	f001 feda 	bl	8007b80 <__pow5mult>
 8005dcc:	9006      	str	r0, [sp, #24]
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	f43f ae91 	beq.w	8005af6 <_strtod_l+0x47e>
 8005dd4:	2c00      	cmp	r4, #0
 8005dd6:	dd08      	ble.n	8005dea <_strtod_l+0x772>
 8005dd8:	4622      	mov	r2, r4
 8005dda:	4650      	mov	r0, sl
 8005ddc:	9906      	ldr	r1, [sp, #24]
 8005dde:	f001 ff29 	bl	8007c34 <__lshift>
 8005de2:	9006      	str	r0, [sp, #24]
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f43f ae86 	beq.w	8005af6 <_strtod_l+0x47e>
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	dd08      	ble.n	8005e00 <_strtod_l+0x788>
 8005dee:	4632      	mov	r2, r6
 8005df0:	4650      	mov	r0, sl
 8005df2:	9904      	ldr	r1, [sp, #16]
 8005df4:	f001 ff1e 	bl	8007c34 <__lshift>
 8005df8:	9004      	str	r0, [sp, #16]
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	f43f ae7b 	beq.w	8005af6 <_strtod_l+0x47e>
 8005e00:	4650      	mov	r0, sl
 8005e02:	9a06      	ldr	r2, [sp, #24]
 8005e04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005e06:	f001 ffa1 	bl	8007d4c <__mdiff>
 8005e0a:	4683      	mov	fp, r0
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	f43f ae72 	beq.w	8005af6 <_strtod_l+0x47e>
 8005e12:	2400      	movs	r4, #0
 8005e14:	68c3      	ldr	r3, [r0, #12]
 8005e16:	9904      	ldr	r1, [sp, #16]
 8005e18:	60c4      	str	r4, [r0, #12]
 8005e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e1c:	f001 ff7a 	bl	8007d14 <__mcmp>
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	da6b      	bge.n	8005efc <_strtod_l+0x884>
 8005e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e26:	ea53 0308 	orrs.w	r3, r3, r8
 8005e2a:	f040 8091 	bne.w	8005f50 <_strtod_l+0x8d8>
 8005e2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f040 808c 	bne.w	8005f50 <_strtod_l+0x8d8>
 8005e38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e3c:	0d1b      	lsrs	r3, r3, #20
 8005e3e:	051b      	lsls	r3, r3, #20
 8005e40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005e44:	f240 8084 	bls.w	8005f50 <_strtod_l+0x8d8>
 8005e48:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005e4c:	b91b      	cbnz	r3, 8005e56 <_strtod_l+0x7de>
 8005e4e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	dd7c      	ble.n	8005f50 <_strtod_l+0x8d8>
 8005e56:	4659      	mov	r1, fp
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	f001 feea 	bl	8007c34 <__lshift>
 8005e60:	9904      	ldr	r1, [sp, #16]
 8005e62:	4683      	mov	fp, r0
 8005e64:	f001 ff56 	bl	8007d14 <__mcmp>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	dd71      	ble.n	8005f50 <_strtod_l+0x8d8>
 8005e6c:	9905      	ldr	r1, [sp, #20]
 8005e6e:	464b      	mov	r3, r9
 8005e70:	4a20      	ldr	r2, [pc, #128]	; (8005ef4 <_strtod_l+0x87c>)
 8005e72:	2900      	cmp	r1, #0
 8005e74:	f000 808c 	beq.w	8005f90 <_strtod_l+0x918>
 8005e78:	ea02 0109 	and.w	r1, r2, r9
 8005e7c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005e80:	f300 8086 	bgt.w	8005f90 <_strtod_l+0x918>
 8005e84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005e88:	f77f aeaa 	ble.w	8005be0 <_strtod_l+0x568>
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	4649      	mov	r1, r9
 8005e90:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <_strtod_l+0x880>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	f7fa fb8c 	bl	80005b0 <__aeabi_dmul>
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4303      	orrs	r3, r0
 8005e9c:	bf08      	it	eq
 8005e9e:	2322      	moveq	r3, #34	; 0x22
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	4689      	mov	r9, r1
 8005ea4:	bf08      	it	eq
 8005ea6:	f8ca 3000 	streq.w	r3, [sl]
 8005eaa:	e62f      	b.n	8005b0c <_strtod_l+0x494>
 8005eac:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	ea03 0808 	and.w	r8, r3, r8
 8005eb8:	e6e0      	b.n	8005c7c <_strtod_l+0x604>
 8005eba:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005ebe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005ec2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005ec6:	35e2      	adds	r5, #226	; 0xe2
 8005ec8:	fa07 f505 	lsl.w	r5, r7, r5
 8005ecc:	970f      	str	r7, [sp, #60]	; 0x3c
 8005ece:	e747      	b.n	8005d60 <_strtod_l+0x6e8>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ed6:	e743      	b.n	8005d60 <_strtod_l+0x6e8>
 8005ed8:	463a      	mov	r2, r7
 8005eda:	4650      	mov	r0, sl
 8005edc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ede:	f001 fea9 	bl	8007c34 <__lshift>
 8005ee2:	901a      	str	r0, [sp, #104]	; 0x68
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	f47f af69 	bne.w	8005dbc <_strtod_l+0x744>
 8005eea:	e604      	b.n	8005af6 <_strtod_l+0x47e>
 8005eec:	08009950 	.word	0x08009950
 8005ef0:	fffffc02 	.word	0xfffffc02
 8005ef4:	7ff00000 	.word	0x7ff00000
 8005ef8:	39500000 	.word	0x39500000
 8005efc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005f00:	d165      	bne.n	8005fce <_strtod_l+0x956>
 8005f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f08:	b35a      	cbz	r2, 8005f62 <_strtod_l+0x8ea>
 8005f0a:	4a99      	ldr	r2, [pc, #612]	; (8006170 <_strtod_l+0xaf8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d12b      	bne.n	8005f68 <_strtod_l+0x8f0>
 8005f10:	9b05      	ldr	r3, [sp, #20]
 8005f12:	4641      	mov	r1, r8
 8005f14:	b303      	cbz	r3, 8005f58 <_strtod_l+0x8e0>
 8005f16:	464a      	mov	r2, r9
 8005f18:	4b96      	ldr	r3, [pc, #600]	; (8006174 <_strtod_l+0xafc>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	d81b      	bhi.n	8005f5e <_strtod_l+0x8e6>
 8005f26:	0d1b      	lsrs	r3, r3, #20
 8005f28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	4299      	cmp	r1, r3
 8005f32:	d119      	bne.n	8005f68 <_strtod_l+0x8f0>
 8005f34:	4b90      	ldr	r3, [pc, #576]	; (8006178 <_strtod_l+0xb00>)
 8005f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d102      	bne.n	8005f42 <_strtod_l+0x8ca>
 8005f3c:	3101      	adds	r1, #1
 8005f3e:	f43f adda 	beq.w	8005af6 <_strtod_l+0x47e>
 8005f42:	f04f 0800 	mov.w	r8, #0
 8005f46:	4b8b      	ldr	r3, [pc, #556]	; (8006174 <_strtod_l+0xafc>)
 8005f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005f50:	9b05      	ldr	r3, [sp, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d19a      	bne.n	8005e8c <_strtod_l+0x814>
 8005f56:	e5d9      	b.n	8005b0c <_strtod_l+0x494>
 8005f58:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5c:	e7e8      	b.n	8005f30 <_strtod_l+0x8b8>
 8005f5e:	4613      	mov	r3, r2
 8005f60:	e7e6      	b.n	8005f30 <_strtod_l+0x8b8>
 8005f62:	ea53 0308 	orrs.w	r3, r3, r8
 8005f66:	d081      	beq.n	8005e6c <_strtod_l+0x7f4>
 8005f68:	b1e5      	cbz	r5, 8005fa4 <_strtod_l+0x92c>
 8005f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6c:	421d      	tst	r5, r3
 8005f6e:	d0ef      	beq.n	8005f50 <_strtod_l+0x8d8>
 8005f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f72:	4640      	mov	r0, r8
 8005f74:	4649      	mov	r1, r9
 8005f76:	9a05      	ldr	r2, [sp, #20]
 8005f78:	b1c3      	cbz	r3, 8005fac <_strtod_l+0x934>
 8005f7a:	f7ff fb59 	bl	8005630 <sulp>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f86:	f7fa f95d 	bl	8000244 <__adddf3>
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	4689      	mov	r9, r1
 8005f8e:	e7df      	b.n	8005f50 <_strtod_l+0x8d8>
 8005f90:	4013      	ands	r3, r2
 8005f92:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005f96:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005f9a:	f04f 38ff 	mov.w	r8, #4294967295
 8005f9e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005fa2:	e7d5      	b.n	8005f50 <_strtod_l+0x8d8>
 8005fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fa6:	ea13 0f08 	tst.w	r3, r8
 8005faa:	e7e0      	b.n	8005f6e <_strtod_l+0x8f6>
 8005fac:	f7ff fb40 	bl	8005630 <sulp>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fb8:	f7fa f942 	bl	8000240 <__aeabi_dsub>
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4680      	mov	r8, r0
 8005fc2:	4689      	mov	r9, r1
 8005fc4:	f7fa fd5c 	bl	8000a80 <__aeabi_dcmpeq>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d0c1      	beq.n	8005f50 <_strtod_l+0x8d8>
 8005fcc:	e608      	b.n	8005be0 <_strtod_l+0x568>
 8005fce:	4658      	mov	r0, fp
 8005fd0:	9904      	ldr	r1, [sp, #16]
 8005fd2:	f002 f81d 	bl	8008010 <__ratio>
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fdc:	4606      	mov	r6, r0
 8005fde:	460f      	mov	r7, r1
 8005fe0:	f7fa fd62 	bl	8000aa8 <__aeabi_dcmple>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d070      	beq.n	80060ca <_strtod_l+0xa52>
 8005fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d042      	beq.n	8006074 <_strtod_l+0x9fc>
 8005fee:	2600      	movs	r6, #0
 8005ff0:	4f62      	ldr	r7, [pc, #392]	; (800617c <_strtod_l+0xb04>)
 8005ff2:	4d62      	ldr	r5, [pc, #392]	; (800617c <_strtod_l+0xb04>)
 8005ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ffa:	0d1b      	lsrs	r3, r3, #20
 8005ffc:	051b      	lsls	r3, r3, #20
 8005ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006002:	4b5f      	ldr	r3, [pc, #380]	; (8006180 <_strtod_l+0xb08>)
 8006004:	429a      	cmp	r2, r3
 8006006:	f040 80c3 	bne.w	8006190 <_strtod_l+0xb18>
 800600a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600c:	4640      	mov	r0, r8
 800600e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006012:	4649      	mov	r1, r9
 8006014:	f001 ff26 	bl	8007e64 <__ulp>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4630      	mov	r0, r6
 800601e:	4639      	mov	r1, r7
 8006020:	f7fa fac6 	bl	80005b0 <__aeabi_dmul>
 8006024:	4642      	mov	r2, r8
 8006026:	464b      	mov	r3, r9
 8006028:	f7fa f90c 	bl	8000244 <__adddf3>
 800602c:	460b      	mov	r3, r1
 800602e:	4951      	ldr	r1, [pc, #324]	; (8006174 <_strtod_l+0xafc>)
 8006030:	4a54      	ldr	r2, [pc, #336]	; (8006184 <_strtod_l+0xb0c>)
 8006032:	4019      	ands	r1, r3
 8006034:	4291      	cmp	r1, r2
 8006036:	4680      	mov	r8, r0
 8006038:	d95d      	bls.n	80060f6 <_strtod_l+0xa7e>
 800603a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800603c:	4b4e      	ldr	r3, [pc, #312]	; (8006178 <_strtod_l+0xb00>)
 800603e:	429a      	cmp	r2, r3
 8006040:	d103      	bne.n	800604a <_strtod_l+0x9d2>
 8006042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006044:	3301      	adds	r3, #1
 8006046:	f43f ad56 	beq.w	8005af6 <_strtod_l+0x47e>
 800604a:	f04f 38ff 	mov.w	r8, #4294967295
 800604e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006178 <_strtod_l+0xb00>
 8006052:	4650      	mov	r0, sl
 8006054:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006056:	f001 fbd5 	bl	8007804 <_Bfree>
 800605a:	4650      	mov	r0, sl
 800605c:	9906      	ldr	r1, [sp, #24]
 800605e:	f001 fbd1 	bl	8007804 <_Bfree>
 8006062:	4650      	mov	r0, sl
 8006064:	9904      	ldr	r1, [sp, #16]
 8006066:	f001 fbcd 	bl	8007804 <_Bfree>
 800606a:	4659      	mov	r1, fp
 800606c:	4650      	mov	r0, sl
 800606e:	f001 fbc9 	bl	8007804 <_Bfree>
 8006072:	e627      	b.n	8005cc4 <_strtod_l+0x64c>
 8006074:	f1b8 0f00 	cmp.w	r8, #0
 8006078:	d119      	bne.n	80060ae <_strtod_l+0xa36>
 800607a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800607c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006080:	b9e3      	cbnz	r3, 80060bc <_strtod_l+0xa44>
 8006082:	2200      	movs	r2, #0
 8006084:	4630      	mov	r0, r6
 8006086:	4639      	mov	r1, r7
 8006088:	4b3c      	ldr	r3, [pc, #240]	; (800617c <_strtod_l+0xb04>)
 800608a:	f7fa fd03 	bl	8000a94 <__aeabi_dcmplt>
 800608e:	b9c8      	cbnz	r0, 80060c4 <_strtod_l+0xa4c>
 8006090:	2200      	movs	r2, #0
 8006092:	4630      	mov	r0, r6
 8006094:	4639      	mov	r1, r7
 8006096:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <_strtod_l+0xb10>)
 8006098:	f7fa fa8a 	bl	80005b0 <__aeabi_dmul>
 800609c:	4604      	mov	r4, r0
 800609e:	460d      	mov	r5, r1
 80060a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80060a4:	9416      	str	r4, [sp, #88]	; 0x58
 80060a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80060a8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80060ac:	e7a2      	b.n	8005ff4 <_strtod_l+0x97c>
 80060ae:	f1b8 0f01 	cmp.w	r8, #1
 80060b2:	d103      	bne.n	80060bc <_strtod_l+0xa44>
 80060b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f43f ad92 	beq.w	8005be0 <_strtod_l+0x568>
 80060bc:	2600      	movs	r6, #0
 80060be:	2400      	movs	r4, #0
 80060c0:	4f32      	ldr	r7, [pc, #200]	; (800618c <_strtod_l+0xb14>)
 80060c2:	e796      	b.n	8005ff2 <_strtod_l+0x97a>
 80060c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80060c6:	4d30      	ldr	r5, [pc, #192]	; (8006188 <_strtod_l+0xb10>)
 80060c8:	e7ea      	b.n	80060a0 <_strtod_l+0xa28>
 80060ca:	4b2f      	ldr	r3, [pc, #188]	; (8006188 <_strtod_l+0xb10>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	4630      	mov	r0, r6
 80060d0:	4639      	mov	r1, r7
 80060d2:	f7fa fa6d 	bl	80005b0 <__aeabi_dmul>
 80060d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060d8:	4604      	mov	r4, r0
 80060da:	460d      	mov	r5, r1
 80060dc:	b933      	cbnz	r3, 80060ec <_strtod_l+0xa74>
 80060de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060e2:	9010      	str	r0, [sp, #64]	; 0x40
 80060e4:	9311      	str	r3, [sp, #68]	; 0x44
 80060e6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80060ea:	e783      	b.n	8005ff4 <_strtod_l+0x97c>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80060f4:	e7f7      	b.n	80060e6 <_strtod_l+0xa6e>
 80060f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80060fa:	9b05      	ldr	r3, [sp, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1a8      	bne.n	8006052 <_strtod_l+0x9da>
 8006100:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006104:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006106:	0d1b      	lsrs	r3, r3, #20
 8006108:	051b      	lsls	r3, r3, #20
 800610a:	429a      	cmp	r2, r3
 800610c:	d1a1      	bne.n	8006052 <_strtod_l+0x9da>
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa fd95 	bl	8000c40 <__aeabi_d2lz>
 8006116:	f7fa fa1d 	bl	8000554 <__aeabi_l2d>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa f88d 	bl	8000240 <__aeabi_dsub>
 8006126:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800612c:	ea43 0308 	orr.w	r3, r3, r8
 8006130:	4313      	orrs	r3, r2
 8006132:	4604      	mov	r4, r0
 8006134:	460d      	mov	r5, r1
 8006136:	d066      	beq.n	8006206 <_strtod_l+0xb8e>
 8006138:	a309      	add	r3, pc, #36	; (adr r3, 8006160 <_strtod_l+0xae8>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f7fa fca9 	bl	8000a94 <__aeabi_dcmplt>
 8006142:	2800      	cmp	r0, #0
 8006144:	f47f ace2 	bne.w	8005b0c <_strtod_l+0x494>
 8006148:	a307      	add	r3, pc, #28	; (adr r3, 8006168 <_strtod_l+0xaf0>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	4620      	mov	r0, r4
 8006150:	4629      	mov	r1, r5
 8006152:	f7fa fcbd 	bl	8000ad0 <__aeabi_dcmpgt>
 8006156:	2800      	cmp	r0, #0
 8006158:	f43f af7b 	beq.w	8006052 <_strtod_l+0x9da>
 800615c:	e4d6      	b.n	8005b0c <_strtod_l+0x494>
 800615e:	bf00      	nop
 8006160:	94a03595 	.word	0x94a03595
 8006164:	3fdfffff 	.word	0x3fdfffff
 8006168:	35afe535 	.word	0x35afe535
 800616c:	3fe00000 	.word	0x3fe00000
 8006170:	000fffff 	.word	0x000fffff
 8006174:	7ff00000 	.word	0x7ff00000
 8006178:	7fefffff 	.word	0x7fefffff
 800617c:	3ff00000 	.word	0x3ff00000
 8006180:	7fe00000 	.word	0x7fe00000
 8006184:	7c9fffff 	.word	0x7c9fffff
 8006188:	3fe00000 	.word	0x3fe00000
 800618c:	bff00000 	.word	0xbff00000
 8006190:	9b05      	ldr	r3, [sp, #20]
 8006192:	b313      	cbz	r3, 80061da <_strtod_l+0xb62>
 8006194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006196:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800619a:	d81e      	bhi.n	80061da <_strtod_l+0xb62>
 800619c:	a326      	add	r3, pc, #152	; (adr r3, 8006238 <_strtod_l+0xbc0>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	4620      	mov	r0, r4
 80061a4:	4629      	mov	r1, r5
 80061a6:	f7fa fc7f 	bl	8000aa8 <__aeabi_dcmple>
 80061aa:	b190      	cbz	r0, 80061d2 <_strtod_l+0xb5a>
 80061ac:	4629      	mov	r1, r5
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7fa fcd6 	bl	8000b60 <__aeabi_d2uiz>
 80061b4:	2801      	cmp	r0, #1
 80061b6:	bf38      	it	cc
 80061b8:	2001      	movcc	r0, #1
 80061ba:	f7fa f97f 	bl	80004bc <__aeabi_ui2d>
 80061be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061c0:	4604      	mov	r4, r0
 80061c2:	460d      	mov	r5, r1
 80061c4:	b9d3      	cbnz	r3, 80061fc <_strtod_l+0xb84>
 80061c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061ca:	9012      	str	r0, [sp, #72]	; 0x48
 80061cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80061ce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80061d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061d4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80061d8:	1a9f      	subs	r7, r3, r2
 80061da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061de:	f001 fe41 	bl	8007e64 <__ulp>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4630      	mov	r0, r6
 80061e8:	4639      	mov	r1, r7
 80061ea:	f7fa f9e1 	bl	80005b0 <__aeabi_dmul>
 80061ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061f2:	f7fa f827 	bl	8000244 <__adddf3>
 80061f6:	4680      	mov	r8, r0
 80061f8:	4689      	mov	r9, r1
 80061fa:	e77e      	b.n	80060fa <_strtod_l+0xa82>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006204:	e7e3      	b.n	80061ce <_strtod_l+0xb56>
 8006206:	a30e      	add	r3, pc, #56	; (adr r3, 8006240 <_strtod_l+0xbc8>)
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f7fa fc42 	bl	8000a94 <__aeabi_dcmplt>
 8006210:	e7a1      	b.n	8006156 <_strtod_l+0xade>
 8006212:	2300      	movs	r3, #0
 8006214:	930a      	str	r3, [sp, #40]	; 0x28
 8006216:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006218:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	f7ff ba71 	b.w	8005702 <_strtod_l+0x8a>
 8006220:	2a65      	cmp	r2, #101	; 0x65
 8006222:	f43f ab63 	beq.w	80058ec <_strtod_l+0x274>
 8006226:	2a45      	cmp	r2, #69	; 0x45
 8006228:	f43f ab60 	beq.w	80058ec <_strtod_l+0x274>
 800622c:	2301      	movs	r3, #1
 800622e:	f7ff bb95 	b.w	800595c <_strtod_l+0x2e4>
 8006232:	bf00      	nop
 8006234:	f3af 8000 	nop.w
 8006238:	ffc00000 	.word	0xffc00000
 800623c:	41dfffff 	.word	0x41dfffff
 8006240:	94a03595 	.word	0x94a03595
 8006244:	3fcfffff 	.word	0x3fcfffff

08006248 <_strtod_r>:
 8006248:	4b01      	ldr	r3, [pc, #4]	; (8006250 <_strtod_r+0x8>)
 800624a:	f7ff ba15 	b.w	8005678 <_strtod_l>
 800624e:	bf00      	nop
 8006250:	200000a8 	.word	0x200000a8

08006254 <_strtol_l.constprop.0>:
 8006254:	2b01      	cmp	r3, #1
 8006256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800625a:	4680      	mov	r8, r0
 800625c:	d001      	beq.n	8006262 <_strtol_l.constprop.0+0xe>
 800625e:	2b24      	cmp	r3, #36	; 0x24
 8006260:	d906      	bls.n	8006270 <_strtol_l.constprop.0+0x1c>
 8006262:	f7fe fb21 	bl	80048a8 <__errno>
 8006266:	2316      	movs	r3, #22
 8006268:	6003      	str	r3, [r0, #0]
 800626a:	2000      	movs	r0, #0
 800626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006270:	460d      	mov	r5, r1
 8006272:	4f35      	ldr	r7, [pc, #212]	; (8006348 <_strtol_l.constprop.0+0xf4>)
 8006274:	4628      	mov	r0, r5
 8006276:	f815 4b01 	ldrb.w	r4, [r5], #1
 800627a:	5de6      	ldrb	r6, [r4, r7]
 800627c:	f016 0608 	ands.w	r6, r6, #8
 8006280:	d1f8      	bne.n	8006274 <_strtol_l.constprop.0+0x20>
 8006282:	2c2d      	cmp	r4, #45	; 0x2d
 8006284:	d12f      	bne.n	80062e6 <_strtol_l.constprop.0+0x92>
 8006286:	2601      	movs	r6, #1
 8006288:	782c      	ldrb	r4, [r5, #0]
 800628a:	1c85      	adds	r5, r0, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d057      	beq.n	8006340 <_strtol_l.constprop.0+0xec>
 8006290:	2b10      	cmp	r3, #16
 8006292:	d109      	bne.n	80062a8 <_strtol_l.constprop.0+0x54>
 8006294:	2c30      	cmp	r4, #48	; 0x30
 8006296:	d107      	bne.n	80062a8 <_strtol_l.constprop.0+0x54>
 8006298:	7828      	ldrb	r0, [r5, #0]
 800629a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800629e:	2858      	cmp	r0, #88	; 0x58
 80062a0:	d149      	bne.n	8006336 <_strtol_l.constprop.0+0xe2>
 80062a2:	2310      	movs	r3, #16
 80062a4:	786c      	ldrb	r4, [r5, #1]
 80062a6:	3502      	adds	r5, #2
 80062a8:	2700      	movs	r7, #0
 80062aa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80062ae:	f10e 3eff 	add.w	lr, lr, #4294967295
 80062b2:	fbbe f9f3 	udiv	r9, lr, r3
 80062b6:	4638      	mov	r0, r7
 80062b8:	fb03 ea19 	mls	sl, r3, r9, lr
 80062bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80062c0:	f1bc 0f09 	cmp.w	ip, #9
 80062c4:	d814      	bhi.n	80062f0 <_strtol_l.constprop.0+0x9c>
 80062c6:	4664      	mov	r4, ip
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	dd22      	ble.n	8006312 <_strtol_l.constprop.0+0xbe>
 80062cc:	2f00      	cmp	r7, #0
 80062ce:	db1d      	blt.n	800630c <_strtol_l.constprop.0+0xb8>
 80062d0:	4581      	cmp	r9, r0
 80062d2:	d31b      	bcc.n	800630c <_strtol_l.constprop.0+0xb8>
 80062d4:	d101      	bne.n	80062da <_strtol_l.constprop.0+0x86>
 80062d6:	45a2      	cmp	sl, r4
 80062d8:	db18      	blt.n	800630c <_strtol_l.constprop.0+0xb8>
 80062da:	2701      	movs	r7, #1
 80062dc:	fb00 4003 	mla	r0, r0, r3, r4
 80062e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062e4:	e7ea      	b.n	80062bc <_strtol_l.constprop.0+0x68>
 80062e6:	2c2b      	cmp	r4, #43	; 0x2b
 80062e8:	bf04      	itt	eq
 80062ea:	782c      	ldrbeq	r4, [r5, #0]
 80062ec:	1c85      	addeq	r5, r0, #2
 80062ee:	e7cd      	b.n	800628c <_strtol_l.constprop.0+0x38>
 80062f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80062f4:	f1bc 0f19 	cmp.w	ip, #25
 80062f8:	d801      	bhi.n	80062fe <_strtol_l.constprop.0+0xaa>
 80062fa:	3c37      	subs	r4, #55	; 0x37
 80062fc:	e7e4      	b.n	80062c8 <_strtol_l.constprop.0+0x74>
 80062fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006302:	f1bc 0f19 	cmp.w	ip, #25
 8006306:	d804      	bhi.n	8006312 <_strtol_l.constprop.0+0xbe>
 8006308:	3c57      	subs	r4, #87	; 0x57
 800630a:	e7dd      	b.n	80062c8 <_strtol_l.constprop.0+0x74>
 800630c:	f04f 37ff 	mov.w	r7, #4294967295
 8006310:	e7e6      	b.n	80062e0 <_strtol_l.constprop.0+0x8c>
 8006312:	2f00      	cmp	r7, #0
 8006314:	da07      	bge.n	8006326 <_strtol_l.constprop.0+0xd2>
 8006316:	2322      	movs	r3, #34	; 0x22
 8006318:	4670      	mov	r0, lr
 800631a:	f8c8 3000 	str.w	r3, [r8]
 800631e:	2a00      	cmp	r2, #0
 8006320:	d0a4      	beq.n	800626c <_strtol_l.constprop.0+0x18>
 8006322:	1e69      	subs	r1, r5, #1
 8006324:	e005      	b.n	8006332 <_strtol_l.constprop.0+0xde>
 8006326:	b106      	cbz	r6, 800632a <_strtol_l.constprop.0+0xd6>
 8006328:	4240      	negs	r0, r0
 800632a:	2a00      	cmp	r2, #0
 800632c:	d09e      	beq.n	800626c <_strtol_l.constprop.0+0x18>
 800632e:	2f00      	cmp	r7, #0
 8006330:	d1f7      	bne.n	8006322 <_strtol_l.constprop.0+0xce>
 8006332:	6011      	str	r1, [r2, #0]
 8006334:	e79a      	b.n	800626c <_strtol_l.constprop.0+0x18>
 8006336:	2430      	movs	r4, #48	; 0x30
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1b5      	bne.n	80062a8 <_strtol_l.constprop.0+0x54>
 800633c:	2308      	movs	r3, #8
 800633e:	e7b3      	b.n	80062a8 <_strtol_l.constprop.0+0x54>
 8006340:	2c30      	cmp	r4, #48	; 0x30
 8006342:	d0a9      	beq.n	8006298 <_strtol_l.constprop.0+0x44>
 8006344:	230a      	movs	r3, #10
 8006346:	e7af      	b.n	80062a8 <_strtol_l.constprop.0+0x54>
 8006348:	08009979 	.word	0x08009979

0800634c <_strtol_r>:
 800634c:	f7ff bf82 	b.w	8006254 <_strtol_l.constprop.0>

08006350 <quorem>:
 8006350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	6903      	ldr	r3, [r0, #16]
 8006356:	690c      	ldr	r4, [r1, #16]
 8006358:	4607      	mov	r7, r0
 800635a:	42a3      	cmp	r3, r4
 800635c:	f2c0 8082 	blt.w	8006464 <quorem+0x114>
 8006360:	3c01      	subs	r4, #1
 8006362:	f100 0514 	add.w	r5, r0, #20
 8006366:	f101 0814 	add.w	r8, r1, #20
 800636a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006374:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006378:	3301      	adds	r3, #1
 800637a:	429a      	cmp	r2, r3
 800637c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006380:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006384:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006388:	d331      	bcc.n	80063ee <quorem+0x9e>
 800638a:	f04f 0e00 	mov.w	lr, #0
 800638e:	4640      	mov	r0, r8
 8006390:	46ac      	mov	ip, r5
 8006392:	46f2      	mov	sl, lr
 8006394:	f850 2b04 	ldr.w	r2, [r0], #4
 8006398:	b293      	uxth	r3, r2
 800639a:	fb06 e303 	mla	r3, r6, r3, lr
 800639e:	0c12      	lsrs	r2, r2, #16
 80063a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	fb06 e202 	mla	r2, r6, r2, lr
 80063aa:	ebaa 0303 	sub.w	r3, sl, r3
 80063ae:	f8dc a000 	ldr.w	sl, [ip]
 80063b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063b6:	fa1f fa8a 	uxth.w	sl, sl
 80063ba:	4453      	add	r3, sl
 80063bc:	f8dc a000 	ldr.w	sl, [ip]
 80063c0:	b292      	uxth	r2, r2
 80063c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063d0:	4581      	cmp	r9, r0
 80063d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063d6:	f84c 3b04 	str.w	r3, [ip], #4
 80063da:	d2db      	bcs.n	8006394 <quorem+0x44>
 80063dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80063e0:	b92b      	cbnz	r3, 80063ee <quorem+0x9e>
 80063e2:	9b01      	ldr	r3, [sp, #4]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	429d      	cmp	r5, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	d32f      	bcc.n	800644c <quorem+0xfc>
 80063ec:	613c      	str	r4, [r7, #16]
 80063ee:	4638      	mov	r0, r7
 80063f0:	f001 fc90 	bl	8007d14 <__mcmp>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	db25      	blt.n	8006444 <quorem+0xf4>
 80063f8:	4628      	mov	r0, r5
 80063fa:	f04f 0c00 	mov.w	ip, #0
 80063fe:	3601      	adds	r6, #1
 8006400:	f858 1b04 	ldr.w	r1, [r8], #4
 8006404:	f8d0 e000 	ldr.w	lr, [r0]
 8006408:	b28b      	uxth	r3, r1
 800640a:	ebac 0303 	sub.w	r3, ip, r3
 800640e:	fa1f f28e 	uxth.w	r2, lr
 8006412:	4413      	add	r3, r2
 8006414:	0c0a      	lsrs	r2, r1, #16
 8006416:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800641a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800641e:	b29b      	uxth	r3, r3
 8006420:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006424:	45c1      	cmp	r9, r8
 8006426:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800642a:	f840 3b04 	str.w	r3, [r0], #4
 800642e:	d2e7      	bcs.n	8006400 <quorem+0xb0>
 8006430:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006434:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006438:	b922      	cbnz	r2, 8006444 <quorem+0xf4>
 800643a:	3b04      	subs	r3, #4
 800643c:	429d      	cmp	r5, r3
 800643e:	461a      	mov	r2, r3
 8006440:	d30a      	bcc.n	8006458 <quorem+0x108>
 8006442:	613c      	str	r4, [r7, #16]
 8006444:	4630      	mov	r0, r6
 8006446:	b003      	add	sp, #12
 8006448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	3b04      	subs	r3, #4
 8006450:	2a00      	cmp	r2, #0
 8006452:	d1cb      	bne.n	80063ec <quorem+0x9c>
 8006454:	3c01      	subs	r4, #1
 8006456:	e7c6      	b.n	80063e6 <quorem+0x96>
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	3b04      	subs	r3, #4
 800645c:	2a00      	cmp	r2, #0
 800645e:	d1f0      	bne.n	8006442 <quorem+0xf2>
 8006460:	3c01      	subs	r4, #1
 8006462:	e7eb      	b.n	800643c <quorem+0xec>
 8006464:	2000      	movs	r0, #0
 8006466:	e7ee      	b.n	8006446 <quorem+0xf6>

08006468 <_dtoa_r>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	4616      	mov	r6, r2
 800646e:	461f      	mov	r7, r3
 8006470:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006472:	b099      	sub	sp, #100	; 0x64
 8006474:	4605      	mov	r5, r0
 8006476:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800647a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800647e:	b974      	cbnz	r4, 800649e <_dtoa_r+0x36>
 8006480:	2010      	movs	r0, #16
 8006482:	f001 f949 	bl	8007718 <malloc>
 8006486:	4602      	mov	r2, r0
 8006488:	6268      	str	r0, [r5, #36]	; 0x24
 800648a:	b920      	cbnz	r0, 8006496 <_dtoa_r+0x2e>
 800648c:	21ea      	movs	r1, #234	; 0xea
 800648e:	4ba8      	ldr	r3, [pc, #672]	; (8006730 <_dtoa_r+0x2c8>)
 8006490:	48a8      	ldr	r0, [pc, #672]	; (8006734 <_dtoa_r+0x2cc>)
 8006492:	f002 f8b3 	bl	80085fc <__assert_func>
 8006496:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800649a:	6004      	str	r4, [r0, #0]
 800649c:	60c4      	str	r4, [r0, #12]
 800649e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064a0:	6819      	ldr	r1, [r3, #0]
 80064a2:	b151      	cbz	r1, 80064ba <_dtoa_r+0x52>
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	2301      	movs	r3, #1
 80064a8:	4093      	lsls	r3, r2
 80064aa:	604a      	str	r2, [r1, #4]
 80064ac:	608b      	str	r3, [r1, #8]
 80064ae:	4628      	mov	r0, r5
 80064b0:	f001 f9a8 	bl	8007804 <_Bfree>
 80064b4:	2200      	movs	r2, #0
 80064b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	1e3b      	subs	r3, r7, #0
 80064bc:	bfaf      	iteee	ge
 80064be:	2300      	movge	r3, #0
 80064c0:	2201      	movlt	r2, #1
 80064c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	9305      	strlt	r3, [sp, #20]
 80064c8:	bfa8      	it	ge
 80064ca:	f8c8 3000 	strge.w	r3, [r8]
 80064ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80064d2:	4b99      	ldr	r3, [pc, #612]	; (8006738 <_dtoa_r+0x2d0>)
 80064d4:	bfb8      	it	lt
 80064d6:	f8c8 2000 	strlt.w	r2, [r8]
 80064da:	ea33 0309 	bics.w	r3, r3, r9
 80064de:	d119      	bne.n	8006514 <_dtoa_r+0xac>
 80064e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80064e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064ec:	4333      	orrs	r3, r6
 80064ee:	f000 857f 	beq.w	8006ff0 <_dtoa_r+0xb88>
 80064f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064f4:	b953      	cbnz	r3, 800650c <_dtoa_r+0xa4>
 80064f6:	4b91      	ldr	r3, [pc, #580]	; (800673c <_dtoa_r+0x2d4>)
 80064f8:	e022      	b.n	8006540 <_dtoa_r+0xd8>
 80064fa:	4b91      	ldr	r3, [pc, #580]	; (8006740 <_dtoa_r+0x2d8>)
 80064fc:	9303      	str	r3, [sp, #12]
 80064fe:	3308      	adds	r3, #8
 8006500:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	9803      	ldr	r0, [sp, #12]
 8006506:	b019      	add	sp, #100	; 0x64
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	4b8b      	ldr	r3, [pc, #556]	; (800673c <_dtoa_r+0x2d4>)
 800650e:	9303      	str	r3, [sp, #12]
 8006510:	3303      	adds	r3, #3
 8006512:	e7f5      	b.n	8006500 <_dtoa_r+0x98>
 8006514:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006518:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800651c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006520:	2200      	movs	r2, #0
 8006522:	2300      	movs	r3, #0
 8006524:	f7fa faac 	bl	8000a80 <__aeabi_dcmpeq>
 8006528:	4680      	mov	r8, r0
 800652a:	b158      	cbz	r0, 8006544 <_dtoa_r+0xdc>
 800652c:	2301      	movs	r3, #1
 800652e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8558 	beq.w	8006fea <_dtoa_r+0xb82>
 800653a:	4882      	ldr	r0, [pc, #520]	; (8006744 <_dtoa_r+0x2dc>)
 800653c:	6018      	str	r0, [r3, #0]
 800653e:	1e43      	subs	r3, r0, #1
 8006540:	9303      	str	r3, [sp, #12]
 8006542:	e7df      	b.n	8006504 <_dtoa_r+0x9c>
 8006544:	ab16      	add	r3, sp, #88	; 0x58
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	ab17      	add	r3, sp, #92	; 0x5c
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	4628      	mov	r0, r5
 800654e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006552:	f001 fd01 	bl	8007f58 <__d2b>
 8006556:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800655a:	4683      	mov	fp, r0
 800655c:	2c00      	cmp	r4, #0
 800655e:	d07f      	beq.n	8006660 <_dtoa_r+0x1f8>
 8006560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006566:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800656a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800656e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006572:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006576:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800657a:	2200      	movs	r2, #0
 800657c:	4b72      	ldr	r3, [pc, #456]	; (8006748 <_dtoa_r+0x2e0>)
 800657e:	f7f9 fe5f 	bl	8000240 <__aeabi_dsub>
 8006582:	a365      	add	r3, pc, #404	; (adr r3, 8006718 <_dtoa_r+0x2b0>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7fa f812 	bl	80005b0 <__aeabi_dmul>
 800658c:	a364      	add	r3, pc, #400	; (adr r3, 8006720 <_dtoa_r+0x2b8>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fe57 	bl	8000244 <__adddf3>
 8006596:	4606      	mov	r6, r0
 8006598:	4620      	mov	r0, r4
 800659a:	460f      	mov	r7, r1
 800659c:	f7f9 ff9e 	bl	80004dc <__aeabi_i2d>
 80065a0:	a361      	add	r3, pc, #388	; (adr r3, 8006728 <_dtoa_r+0x2c0>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7fa f803 	bl	80005b0 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 fe47 	bl	8000244 <__adddf3>
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	f7fa faa9 	bl	8000b10 <__aeabi_d2iz>
 80065be:	2200      	movs	r2, #0
 80065c0:	4682      	mov	sl, r0
 80065c2:	2300      	movs	r3, #0
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7fa fa64 	bl	8000a94 <__aeabi_dcmplt>
 80065cc:	b148      	cbz	r0, 80065e2 <_dtoa_r+0x17a>
 80065ce:	4650      	mov	r0, sl
 80065d0:	f7f9 ff84 	bl	80004dc <__aeabi_i2d>
 80065d4:	4632      	mov	r2, r6
 80065d6:	463b      	mov	r3, r7
 80065d8:	f7fa fa52 	bl	8000a80 <__aeabi_dcmpeq>
 80065dc:	b908      	cbnz	r0, 80065e2 <_dtoa_r+0x17a>
 80065de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065e2:	f1ba 0f16 	cmp.w	sl, #22
 80065e6:	d858      	bhi.n	800669a <_dtoa_r+0x232>
 80065e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ec:	4b57      	ldr	r3, [pc, #348]	; (800674c <_dtoa_r+0x2e4>)
 80065ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7fa fa4d 	bl	8000a94 <__aeabi_dcmplt>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d04f      	beq.n	800669e <_dtoa_r+0x236>
 80065fe:	2300      	movs	r3, #0
 8006600:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006604:	930f      	str	r3, [sp, #60]	; 0x3c
 8006606:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006608:	1b1c      	subs	r4, r3, r4
 800660a:	1e63      	subs	r3, r4, #1
 800660c:	9309      	str	r3, [sp, #36]	; 0x24
 800660e:	bf49      	itett	mi
 8006610:	f1c4 0301 	rsbmi	r3, r4, #1
 8006614:	2300      	movpl	r3, #0
 8006616:	9306      	strmi	r3, [sp, #24]
 8006618:	2300      	movmi	r3, #0
 800661a:	bf54      	ite	pl
 800661c:	9306      	strpl	r3, [sp, #24]
 800661e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006620:	f1ba 0f00 	cmp.w	sl, #0
 8006624:	db3d      	blt.n	80066a2 <_dtoa_r+0x23a>
 8006626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006628:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800662c:	4453      	add	r3, sl
 800662e:	9309      	str	r3, [sp, #36]	; 0x24
 8006630:	2300      	movs	r3, #0
 8006632:	930a      	str	r3, [sp, #40]	; 0x28
 8006634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006636:	2b09      	cmp	r3, #9
 8006638:	f200 808c 	bhi.w	8006754 <_dtoa_r+0x2ec>
 800663c:	2b05      	cmp	r3, #5
 800663e:	bfc4      	itt	gt
 8006640:	3b04      	subgt	r3, #4
 8006642:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006646:	bfc8      	it	gt
 8006648:	2400      	movgt	r4, #0
 800664a:	f1a3 0302 	sub.w	r3, r3, #2
 800664e:	bfd8      	it	le
 8006650:	2401      	movle	r4, #1
 8006652:	2b03      	cmp	r3, #3
 8006654:	f200 808a 	bhi.w	800676c <_dtoa_r+0x304>
 8006658:	e8df f003 	tbb	[pc, r3]
 800665c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006660:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006664:	441c      	add	r4, r3
 8006666:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800666a:	2b20      	cmp	r3, #32
 800666c:	bfc3      	ittte	gt
 800666e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006672:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006676:	fa09 f303 	lslgt.w	r3, r9, r3
 800667a:	f1c3 0320 	rsble	r3, r3, #32
 800667e:	bfc6      	itte	gt
 8006680:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006684:	4318      	orrgt	r0, r3
 8006686:	fa06 f003 	lslle.w	r0, r6, r3
 800668a:	f7f9 ff17 	bl	80004bc <__aeabi_ui2d>
 800668e:	2301      	movs	r3, #1
 8006690:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006694:	3c01      	subs	r4, #1
 8006696:	9313      	str	r3, [sp, #76]	; 0x4c
 8006698:	e76f      	b.n	800657a <_dtoa_r+0x112>
 800669a:	2301      	movs	r3, #1
 800669c:	e7b2      	b.n	8006604 <_dtoa_r+0x19c>
 800669e:	900f      	str	r0, [sp, #60]	; 0x3c
 80066a0:	e7b1      	b.n	8006606 <_dtoa_r+0x19e>
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	eba3 030a 	sub.w	r3, r3, sl
 80066a8:	9306      	str	r3, [sp, #24]
 80066aa:	f1ca 0300 	rsb	r3, sl, #0
 80066ae:	930a      	str	r3, [sp, #40]	; 0x28
 80066b0:	2300      	movs	r3, #0
 80066b2:	930e      	str	r3, [sp, #56]	; 0x38
 80066b4:	e7be      	b.n	8006634 <_dtoa_r+0x1cc>
 80066b6:	2300      	movs	r3, #0
 80066b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	dc58      	bgt.n	8006772 <_dtoa_r+0x30a>
 80066c0:	f04f 0901 	mov.w	r9, #1
 80066c4:	464b      	mov	r3, r9
 80066c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80066ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80066ce:	2200      	movs	r2, #0
 80066d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80066d2:	6042      	str	r2, [r0, #4]
 80066d4:	2204      	movs	r2, #4
 80066d6:	f102 0614 	add.w	r6, r2, #20
 80066da:	429e      	cmp	r6, r3
 80066dc:	6841      	ldr	r1, [r0, #4]
 80066de:	d94e      	bls.n	800677e <_dtoa_r+0x316>
 80066e0:	4628      	mov	r0, r5
 80066e2:	f001 f84f 	bl	8007784 <_Balloc>
 80066e6:	9003      	str	r0, [sp, #12]
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d14c      	bne.n	8006786 <_dtoa_r+0x31e>
 80066ec:	4602      	mov	r2, r0
 80066ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066f2:	4b17      	ldr	r3, [pc, #92]	; (8006750 <_dtoa_r+0x2e8>)
 80066f4:	e6cc      	b.n	8006490 <_dtoa_r+0x28>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e7de      	b.n	80066b8 <_dtoa_r+0x250>
 80066fa:	2300      	movs	r3, #0
 80066fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80066fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006700:	eb0a 0903 	add.w	r9, sl, r3
 8006704:	f109 0301 	add.w	r3, r9, #1
 8006708:	2b01      	cmp	r3, #1
 800670a:	9308      	str	r3, [sp, #32]
 800670c:	bfb8      	it	lt
 800670e:	2301      	movlt	r3, #1
 8006710:	e7dd      	b.n	80066ce <_dtoa_r+0x266>
 8006712:	2301      	movs	r3, #1
 8006714:	e7f2      	b.n	80066fc <_dtoa_r+0x294>
 8006716:	bf00      	nop
 8006718:	636f4361 	.word	0x636f4361
 800671c:	3fd287a7 	.word	0x3fd287a7
 8006720:	8b60c8b3 	.word	0x8b60c8b3
 8006724:	3fc68a28 	.word	0x3fc68a28
 8006728:	509f79fb 	.word	0x509f79fb
 800672c:	3fd34413 	.word	0x3fd34413
 8006730:	08009a86 	.word	0x08009a86
 8006734:	08009a9d 	.word	0x08009a9d
 8006738:	7ff00000 	.word	0x7ff00000
 800673c:	08009a82 	.word	0x08009a82
 8006740:	08009a79 	.word	0x08009a79
 8006744:	080098f9 	.word	0x080098f9
 8006748:	3ff80000 	.word	0x3ff80000
 800674c:	08009c08 	.word	0x08009c08
 8006750:	08009af8 	.word	0x08009af8
 8006754:	2401      	movs	r4, #1
 8006756:	2300      	movs	r3, #0
 8006758:	940b      	str	r4, [sp, #44]	; 0x2c
 800675a:	9322      	str	r3, [sp, #136]	; 0x88
 800675c:	f04f 39ff 	mov.w	r9, #4294967295
 8006760:	2200      	movs	r2, #0
 8006762:	2312      	movs	r3, #18
 8006764:	f8cd 9020 	str.w	r9, [sp, #32]
 8006768:	9223      	str	r2, [sp, #140]	; 0x8c
 800676a:	e7b0      	b.n	80066ce <_dtoa_r+0x266>
 800676c:	2301      	movs	r3, #1
 800676e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006770:	e7f4      	b.n	800675c <_dtoa_r+0x2f4>
 8006772:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006776:	464b      	mov	r3, r9
 8006778:	f8cd 9020 	str.w	r9, [sp, #32]
 800677c:	e7a7      	b.n	80066ce <_dtoa_r+0x266>
 800677e:	3101      	adds	r1, #1
 8006780:	6041      	str	r1, [r0, #4]
 8006782:	0052      	lsls	r2, r2, #1
 8006784:	e7a7      	b.n	80066d6 <_dtoa_r+0x26e>
 8006786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006788:	9a03      	ldr	r2, [sp, #12]
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	9b08      	ldr	r3, [sp, #32]
 800678e:	2b0e      	cmp	r3, #14
 8006790:	f200 80a8 	bhi.w	80068e4 <_dtoa_r+0x47c>
 8006794:	2c00      	cmp	r4, #0
 8006796:	f000 80a5 	beq.w	80068e4 <_dtoa_r+0x47c>
 800679a:	f1ba 0f00 	cmp.w	sl, #0
 800679e:	dd34      	ble.n	800680a <_dtoa_r+0x3a2>
 80067a0:	4a9a      	ldr	r2, [pc, #616]	; (8006a0c <_dtoa_r+0x5a4>)
 80067a2:	f00a 030f 	and.w	r3, sl, #15
 80067a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80067ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80067b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80067ba:	d016      	beq.n	80067ea <_dtoa_r+0x382>
 80067bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067c0:	4b93      	ldr	r3, [pc, #588]	; (8006a10 <_dtoa_r+0x5a8>)
 80067c2:	2703      	movs	r7, #3
 80067c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067c8:	f7fa f81c 	bl	8000804 <__aeabi_ddiv>
 80067cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067d0:	f004 040f 	and.w	r4, r4, #15
 80067d4:	4e8e      	ldr	r6, [pc, #568]	; (8006a10 <_dtoa_r+0x5a8>)
 80067d6:	b954      	cbnz	r4, 80067ee <_dtoa_r+0x386>
 80067d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067e0:	f7fa f810 	bl	8000804 <__aeabi_ddiv>
 80067e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067e8:	e029      	b.n	800683e <_dtoa_r+0x3d6>
 80067ea:	2702      	movs	r7, #2
 80067ec:	e7f2      	b.n	80067d4 <_dtoa_r+0x36c>
 80067ee:	07e1      	lsls	r1, r4, #31
 80067f0:	d508      	bpl.n	8006804 <_dtoa_r+0x39c>
 80067f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067fa:	f7f9 fed9 	bl	80005b0 <__aeabi_dmul>
 80067fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006802:	3701      	adds	r7, #1
 8006804:	1064      	asrs	r4, r4, #1
 8006806:	3608      	adds	r6, #8
 8006808:	e7e5      	b.n	80067d6 <_dtoa_r+0x36e>
 800680a:	f000 80a5 	beq.w	8006958 <_dtoa_r+0x4f0>
 800680e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006812:	f1ca 0400 	rsb	r4, sl, #0
 8006816:	4b7d      	ldr	r3, [pc, #500]	; (8006a0c <_dtoa_r+0x5a4>)
 8006818:	f004 020f 	and.w	r2, r4, #15
 800681c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f7f9 fec4 	bl	80005b0 <__aeabi_dmul>
 8006828:	2702      	movs	r7, #2
 800682a:	2300      	movs	r3, #0
 800682c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006830:	4e77      	ldr	r6, [pc, #476]	; (8006a10 <_dtoa_r+0x5a8>)
 8006832:	1124      	asrs	r4, r4, #4
 8006834:	2c00      	cmp	r4, #0
 8006836:	f040 8084 	bne.w	8006942 <_dtoa_r+0x4da>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1d2      	bne.n	80067e4 <_dtoa_r+0x37c>
 800683e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 808b 	beq.w	800695c <_dtoa_r+0x4f4>
 8006846:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800684a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800684e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006852:	2200      	movs	r2, #0
 8006854:	4b6f      	ldr	r3, [pc, #444]	; (8006a14 <_dtoa_r+0x5ac>)
 8006856:	f7fa f91d 	bl	8000a94 <__aeabi_dcmplt>
 800685a:	2800      	cmp	r0, #0
 800685c:	d07e      	beq.n	800695c <_dtoa_r+0x4f4>
 800685e:	9b08      	ldr	r3, [sp, #32]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d07b      	beq.n	800695c <_dtoa_r+0x4f4>
 8006864:	f1b9 0f00 	cmp.w	r9, #0
 8006868:	dd38      	ble.n	80068dc <_dtoa_r+0x474>
 800686a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800686e:	2200      	movs	r2, #0
 8006870:	4b69      	ldr	r3, [pc, #420]	; (8006a18 <_dtoa_r+0x5b0>)
 8006872:	f7f9 fe9d 	bl	80005b0 <__aeabi_dmul>
 8006876:	464c      	mov	r4, r9
 8006878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800687c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006880:	3701      	adds	r7, #1
 8006882:	4638      	mov	r0, r7
 8006884:	f7f9 fe2a 	bl	80004dc <__aeabi_i2d>
 8006888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800688c:	f7f9 fe90 	bl	80005b0 <__aeabi_dmul>
 8006890:	2200      	movs	r2, #0
 8006892:	4b62      	ldr	r3, [pc, #392]	; (8006a1c <_dtoa_r+0x5b4>)
 8006894:	f7f9 fcd6 	bl	8000244 <__adddf3>
 8006898:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800689c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068a0:	9611      	str	r6, [sp, #68]	; 0x44
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	d15d      	bne.n	8006962 <_dtoa_r+0x4fa>
 80068a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068aa:	2200      	movs	r2, #0
 80068ac:	4b5c      	ldr	r3, [pc, #368]	; (8006a20 <_dtoa_r+0x5b8>)
 80068ae:	f7f9 fcc7 	bl	8000240 <__aeabi_dsub>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068ba:	4633      	mov	r3, r6
 80068bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068be:	f7fa f907 	bl	8000ad0 <__aeabi_dcmpgt>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f040 829c 	bne.w	8006e00 <_dtoa_r+0x998>
 80068c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068d2:	f7fa f8df 	bl	8000a94 <__aeabi_dcmplt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f040 8290 	bne.w	8006dfc <_dtoa_r+0x994>
 80068dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80068e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f2c0 8152 	blt.w	8006b90 <_dtoa_r+0x728>
 80068ec:	f1ba 0f0e 	cmp.w	sl, #14
 80068f0:	f300 814e 	bgt.w	8006b90 <_dtoa_r+0x728>
 80068f4:	4b45      	ldr	r3, [pc, #276]	; (8006a0c <_dtoa_r+0x5a4>)
 80068f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006902:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006904:	2b00      	cmp	r3, #0
 8006906:	f280 80db 	bge.w	8006ac0 <_dtoa_r+0x658>
 800690a:	9b08      	ldr	r3, [sp, #32]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f300 80d7 	bgt.w	8006ac0 <_dtoa_r+0x658>
 8006912:	f040 8272 	bne.w	8006dfa <_dtoa_r+0x992>
 8006916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800691a:	2200      	movs	r2, #0
 800691c:	4b40      	ldr	r3, [pc, #256]	; (8006a20 <_dtoa_r+0x5b8>)
 800691e:	f7f9 fe47 	bl	80005b0 <__aeabi_dmul>
 8006922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006926:	f7fa f8c9 	bl	8000abc <__aeabi_dcmpge>
 800692a:	9c08      	ldr	r4, [sp, #32]
 800692c:	4626      	mov	r6, r4
 800692e:	2800      	cmp	r0, #0
 8006930:	f040 8248 	bne.w	8006dc4 <_dtoa_r+0x95c>
 8006934:	2331      	movs	r3, #49	; 0x31
 8006936:	9f03      	ldr	r7, [sp, #12]
 8006938:	f10a 0a01 	add.w	sl, sl, #1
 800693c:	f807 3b01 	strb.w	r3, [r7], #1
 8006940:	e244      	b.n	8006dcc <_dtoa_r+0x964>
 8006942:	07e2      	lsls	r2, r4, #31
 8006944:	d505      	bpl.n	8006952 <_dtoa_r+0x4ea>
 8006946:	e9d6 2300 	ldrd	r2, r3, [r6]
 800694a:	f7f9 fe31 	bl	80005b0 <__aeabi_dmul>
 800694e:	2301      	movs	r3, #1
 8006950:	3701      	adds	r7, #1
 8006952:	1064      	asrs	r4, r4, #1
 8006954:	3608      	adds	r6, #8
 8006956:	e76d      	b.n	8006834 <_dtoa_r+0x3cc>
 8006958:	2702      	movs	r7, #2
 800695a:	e770      	b.n	800683e <_dtoa_r+0x3d6>
 800695c:	46d0      	mov	r8, sl
 800695e:	9c08      	ldr	r4, [sp, #32]
 8006960:	e78f      	b.n	8006882 <_dtoa_r+0x41a>
 8006962:	9903      	ldr	r1, [sp, #12]
 8006964:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <_dtoa_r+0x5a4>)
 8006966:	4421      	add	r1, r4
 8006968:	9112      	str	r1, [sp, #72]	; 0x48
 800696a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800696c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006970:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006974:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006978:	2900      	cmp	r1, #0
 800697a:	d055      	beq.n	8006a28 <_dtoa_r+0x5c0>
 800697c:	2000      	movs	r0, #0
 800697e:	4929      	ldr	r1, [pc, #164]	; (8006a24 <_dtoa_r+0x5bc>)
 8006980:	f7f9 ff40 	bl	8000804 <__aeabi_ddiv>
 8006984:	463b      	mov	r3, r7
 8006986:	4632      	mov	r2, r6
 8006988:	f7f9 fc5a 	bl	8000240 <__aeabi_dsub>
 800698c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006990:	9f03      	ldr	r7, [sp, #12]
 8006992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006996:	f7fa f8bb 	bl	8000b10 <__aeabi_d2iz>
 800699a:	4604      	mov	r4, r0
 800699c:	f7f9 fd9e 	bl	80004dc <__aeabi_i2d>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a8:	f7f9 fc4a 	bl	8000240 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	3430      	adds	r4, #48	; 0x30
 80069b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069ba:	f807 4b01 	strb.w	r4, [r7], #1
 80069be:	f7fa f869 	bl	8000a94 <__aeabi_dcmplt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d174      	bne.n	8006ab0 <_dtoa_r+0x648>
 80069c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ca:	2000      	movs	r0, #0
 80069cc:	4911      	ldr	r1, [pc, #68]	; (8006a14 <_dtoa_r+0x5ac>)
 80069ce:	f7f9 fc37 	bl	8000240 <__aeabi_dsub>
 80069d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069d6:	f7fa f85d 	bl	8000a94 <__aeabi_dcmplt>
 80069da:	2800      	cmp	r0, #0
 80069dc:	f040 80b7 	bne.w	8006b4e <_dtoa_r+0x6e6>
 80069e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069e2:	429f      	cmp	r7, r3
 80069e4:	f43f af7a 	beq.w	80068dc <_dtoa_r+0x474>
 80069e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069ec:	2200      	movs	r2, #0
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <_dtoa_r+0x5b0>)
 80069f0:	f7f9 fdde 	bl	80005b0 <__aeabi_dmul>
 80069f4:	2200      	movs	r2, #0
 80069f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <_dtoa_r+0x5b0>)
 8006a00:	f7f9 fdd6 	bl	80005b0 <__aeabi_dmul>
 8006a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a08:	e7c3      	b.n	8006992 <_dtoa_r+0x52a>
 8006a0a:	bf00      	nop
 8006a0c:	08009c08 	.word	0x08009c08
 8006a10:	08009be0 	.word	0x08009be0
 8006a14:	3ff00000 	.word	0x3ff00000
 8006a18:	40240000 	.word	0x40240000
 8006a1c:	401c0000 	.word	0x401c0000
 8006a20:	40140000 	.word	0x40140000
 8006a24:	3fe00000 	.word	0x3fe00000
 8006a28:	4630      	mov	r0, r6
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	f7f9 fdc0 	bl	80005b0 <__aeabi_dmul>
 8006a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a36:	9c03      	ldr	r4, [sp, #12]
 8006a38:	9314      	str	r3, [sp, #80]	; 0x50
 8006a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a3e:	f7fa f867 	bl	8000b10 <__aeabi_d2iz>
 8006a42:	9015      	str	r0, [sp, #84]	; 0x54
 8006a44:	f7f9 fd4a 	bl	80004dc <__aeabi_i2d>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a50:	f7f9 fbf6 	bl	8000240 <__aeabi_dsub>
 8006a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a56:	4606      	mov	r6, r0
 8006a58:	3330      	adds	r3, #48	; 0x30
 8006a5a:	f804 3b01 	strb.w	r3, [r4], #1
 8006a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a60:	460f      	mov	r7, r1
 8006a62:	429c      	cmp	r4, r3
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	d124      	bne.n	8006ab4 <_dtoa_r+0x64c>
 8006a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a6e:	4bb0      	ldr	r3, [pc, #704]	; (8006d30 <_dtoa_r+0x8c8>)
 8006a70:	f7f9 fbe8 	bl	8000244 <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7fa f828 	bl	8000ad0 <__aeabi_dcmpgt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d163      	bne.n	8006b4c <_dtoa_r+0x6e4>
 8006a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a88:	2000      	movs	r0, #0
 8006a8a:	49a9      	ldr	r1, [pc, #676]	; (8006d30 <_dtoa_r+0x8c8>)
 8006a8c:	f7f9 fbd8 	bl	8000240 <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7f9 fffc 	bl	8000a94 <__aeabi_dcmplt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f af1d 	beq.w	80068dc <_dtoa_r+0x474>
 8006aa2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006aa4:	1e7b      	subs	r3, r7, #1
 8006aa6:	9314      	str	r3, [sp, #80]	; 0x50
 8006aa8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d0f8      	beq.n	8006aa2 <_dtoa_r+0x63a>
 8006ab0:	46c2      	mov	sl, r8
 8006ab2:	e03b      	b.n	8006b2c <_dtoa_r+0x6c4>
 8006ab4:	4b9f      	ldr	r3, [pc, #636]	; (8006d34 <_dtoa_r+0x8cc>)
 8006ab6:	f7f9 fd7b 	bl	80005b0 <__aeabi_dmul>
 8006aba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006abe:	e7bc      	b.n	8006a3a <_dtoa_r+0x5d2>
 8006ac0:	9f03      	ldr	r7, [sp, #12]
 8006ac2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ac6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006aca:	4640      	mov	r0, r8
 8006acc:	4649      	mov	r1, r9
 8006ace:	f7f9 fe99 	bl	8000804 <__aeabi_ddiv>
 8006ad2:	f7fa f81d 	bl	8000b10 <__aeabi_d2iz>
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	f7f9 fd00 	bl	80004dc <__aeabi_i2d>
 8006adc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ae0:	f7f9 fd66 	bl	80005b0 <__aeabi_dmul>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4640      	mov	r0, r8
 8006aea:	4649      	mov	r1, r9
 8006aec:	f7f9 fba8 	bl	8000240 <__aeabi_dsub>
 8006af0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006af4:	f807 6b01 	strb.w	r6, [r7], #1
 8006af8:	9e03      	ldr	r6, [sp, #12]
 8006afa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006afe:	1bbe      	subs	r6, r7, r6
 8006b00:	45b4      	cmp	ip, r6
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	d136      	bne.n	8006b76 <_dtoa_r+0x70e>
 8006b08:	f7f9 fb9c 	bl	8000244 <__adddf3>
 8006b0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b10:	4680      	mov	r8, r0
 8006b12:	4689      	mov	r9, r1
 8006b14:	f7f9 ffdc 	bl	8000ad0 <__aeabi_dcmpgt>
 8006b18:	bb58      	cbnz	r0, 8006b72 <_dtoa_r+0x70a>
 8006b1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b1e:	4640      	mov	r0, r8
 8006b20:	4649      	mov	r1, r9
 8006b22:	f7f9 ffad 	bl	8000a80 <__aeabi_dcmpeq>
 8006b26:	b108      	cbz	r0, 8006b2c <_dtoa_r+0x6c4>
 8006b28:	07e1      	lsls	r1, r4, #31
 8006b2a:	d422      	bmi.n	8006b72 <_dtoa_r+0x70a>
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	4659      	mov	r1, fp
 8006b30:	f000 fe68 	bl	8007804 <_Bfree>
 8006b34:	2300      	movs	r3, #0
 8006b36:	703b      	strb	r3, [r7, #0]
 8006b38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b3a:	f10a 0001 	add.w	r0, sl, #1
 8006b3e:	6018      	str	r0, [r3, #0]
 8006b40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f43f acde 	beq.w	8006504 <_dtoa_r+0x9c>
 8006b48:	601f      	str	r7, [r3, #0]
 8006b4a:	e4db      	b.n	8006504 <_dtoa_r+0x9c>
 8006b4c:	4627      	mov	r7, r4
 8006b4e:	463b      	mov	r3, r7
 8006b50:	461f      	mov	r7, r3
 8006b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b56:	2a39      	cmp	r2, #57	; 0x39
 8006b58:	d107      	bne.n	8006b6a <_dtoa_r+0x702>
 8006b5a:	9a03      	ldr	r2, [sp, #12]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d1f7      	bne.n	8006b50 <_dtoa_r+0x6e8>
 8006b60:	2230      	movs	r2, #48	; 0x30
 8006b62:	9903      	ldr	r1, [sp, #12]
 8006b64:	f108 0801 	add.w	r8, r8, #1
 8006b68:	700a      	strb	r2, [r1, #0]
 8006b6a:	781a      	ldrb	r2, [r3, #0]
 8006b6c:	3201      	adds	r2, #1
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	e79e      	b.n	8006ab0 <_dtoa_r+0x648>
 8006b72:	46d0      	mov	r8, sl
 8006b74:	e7eb      	b.n	8006b4e <_dtoa_r+0x6e6>
 8006b76:	2200      	movs	r2, #0
 8006b78:	4b6e      	ldr	r3, [pc, #440]	; (8006d34 <_dtoa_r+0x8cc>)
 8006b7a:	f7f9 fd19 	bl	80005b0 <__aeabi_dmul>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2300      	movs	r3, #0
 8006b82:	4680      	mov	r8, r0
 8006b84:	4689      	mov	r9, r1
 8006b86:	f7f9 ff7b 	bl	8000a80 <__aeabi_dcmpeq>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d09b      	beq.n	8006ac6 <_dtoa_r+0x65e>
 8006b8e:	e7cd      	b.n	8006b2c <_dtoa_r+0x6c4>
 8006b90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b92:	2a00      	cmp	r2, #0
 8006b94:	f000 80d0 	beq.w	8006d38 <_dtoa_r+0x8d0>
 8006b98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b9a:	2a01      	cmp	r2, #1
 8006b9c:	f300 80ae 	bgt.w	8006cfc <_dtoa_r+0x894>
 8006ba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ba2:	2a00      	cmp	r2, #0
 8006ba4:	f000 80a6 	beq.w	8006cf4 <_dtoa_r+0x88c>
 8006ba8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006bae:	9f06      	ldr	r7, [sp, #24]
 8006bb0:	9a06      	ldr	r2, [sp, #24]
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	441a      	add	r2, r3
 8006bb6:	9206      	str	r2, [sp, #24]
 8006bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bba:	4628      	mov	r0, r5
 8006bbc:	441a      	add	r2, r3
 8006bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc0:	f000 ff20 	bl	8007a04 <__i2b>
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	dd0c      	ble.n	8006be4 <_dtoa_r+0x77c>
 8006bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	dd09      	ble.n	8006be4 <_dtoa_r+0x77c>
 8006bd0:	42bb      	cmp	r3, r7
 8006bd2:	bfa8      	it	ge
 8006bd4:	463b      	movge	r3, r7
 8006bd6:	9a06      	ldr	r2, [sp, #24]
 8006bd8:	1aff      	subs	r7, r7, r3
 8006bda:	1ad2      	subs	r2, r2, r3
 8006bdc:	9206      	str	r2, [sp, #24]
 8006bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	9309      	str	r3, [sp, #36]	; 0x24
 8006be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be6:	b1f3      	cbz	r3, 8006c26 <_dtoa_r+0x7be>
 8006be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 80a8 	beq.w	8006d40 <_dtoa_r+0x8d8>
 8006bf0:	2c00      	cmp	r4, #0
 8006bf2:	dd10      	ble.n	8006c16 <_dtoa_r+0x7ae>
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 ffc1 	bl	8007b80 <__pow5mult>
 8006bfe:	465a      	mov	r2, fp
 8006c00:	4601      	mov	r1, r0
 8006c02:	4606      	mov	r6, r0
 8006c04:	4628      	mov	r0, r5
 8006c06:	f000 ff13 	bl	8007a30 <__multiply>
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fdf8 	bl	8007804 <_Bfree>
 8006c14:	46c3      	mov	fp, r8
 8006c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c18:	1b1a      	subs	r2, r3, r4
 8006c1a:	d004      	beq.n	8006c26 <_dtoa_r+0x7be>
 8006c1c:	4659      	mov	r1, fp
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 ffae 	bl	8007b80 <__pow5mult>
 8006c24:	4683      	mov	fp, r0
 8006c26:	2101      	movs	r1, #1
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 feeb 	bl	8007a04 <__i2b>
 8006c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c30:	4604      	mov	r4, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f340 8086 	ble.w	8006d44 <_dtoa_r+0x8dc>
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f000 ff9f 	bl	8007b80 <__pow5mult>
 8006c42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c44:	4604      	mov	r4, r0
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	dd7f      	ble.n	8006d4a <_dtoa_r+0x8e2>
 8006c4a:	f04f 0800 	mov.w	r8, #0
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c54:	6918      	ldr	r0, [r3, #16]
 8006c56:	f000 fe87 	bl	8007968 <__hi0bits>
 8006c5a:	f1c0 0020 	rsb	r0, r0, #32
 8006c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c60:	4418      	add	r0, r3
 8006c62:	f010 001f 	ands.w	r0, r0, #31
 8006c66:	f000 8092 	beq.w	8006d8e <_dtoa_r+0x926>
 8006c6a:	f1c0 0320 	rsb	r3, r0, #32
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	f340 808a 	ble.w	8006d88 <_dtoa_r+0x920>
 8006c74:	f1c0 001c 	rsb	r0, r0, #28
 8006c78:	9b06      	ldr	r3, [sp, #24]
 8006c7a:	4407      	add	r7, r0
 8006c7c:	4403      	add	r3, r0
 8006c7e:	9306      	str	r3, [sp, #24]
 8006c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c82:	4403      	add	r3, r0
 8006c84:	9309      	str	r3, [sp, #36]	; 0x24
 8006c86:	9b06      	ldr	r3, [sp, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dd05      	ble.n	8006c98 <_dtoa_r+0x830>
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4628      	mov	r0, r5
 8006c92:	f000 ffcf 	bl	8007c34 <__lshift>
 8006c96:	4683      	mov	fp, r0
 8006c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	dd05      	ble.n	8006caa <_dtoa_r+0x842>
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f000 ffc6 	bl	8007c34 <__lshift>
 8006ca8:	4604      	mov	r4, r0
 8006caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d070      	beq.n	8006d92 <_dtoa_r+0x92a>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4658      	mov	r0, fp
 8006cb4:	f001 f82e 	bl	8007d14 <__mcmp>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	da6a      	bge.n	8006d92 <_dtoa_r+0x92a>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4659      	mov	r1, fp
 8006cc0:	220a      	movs	r2, #10
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 fdc0 	bl	8007848 <__multadd>
 8006cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cca:	4683      	mov	fp, r0
 8006ccc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8194 	beq.w	8006ffe <_dtoa_r+0xb96>
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	2300      	movs	r3, #0
 8006cda:	220a      	movs	r2, #10
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 fdb3 	bl	8007848 <__multadd>
 8006ce2:	f1b9 0f00 	cmp.w	r9, #0
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	f300 8093 	bgt.w	8006e12 <_dtoa_r+0x9aa>
 8006cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	dc57      	bgt.n	8006da2 <_dtoa_r+0x93a>
 8006cf2:	e08e      	b.n	8006e12 <_dtoa_r+0x9aa>
 8006cf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cfa:	e757      	b.n	8006bac <_dtoa_r+0x744>
 8006cfc:	9b08      	ldr	r3, [sp, #32]
 8006cfe:	1e5c      	subs	r4, r3, #1
 8006d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	bfb7      	itett	lt
 8006d06:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d08:	1b1c      	subge	r4, r3, r4
 8006d0a:	1ae2      	sublt	r2, r4, r3
 8006d0c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006d0e:	bfbe      	ittt	lt
 8006d10:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006d12:	189b      	addlt	r3, r3, r2
 8006d14:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006d16:	9b08      	ldr	r3, [sp, #32]
 8006d18:	bfb8      	it	lt
 8006d1a:	2400      	movlt	r4, #0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bfbb      	ittet	lt
 8006d20:	9b06      	ldrlt	r3, [sp, #24]
 8006d22:	9a08      	ldrlt	r2, [sp, #32]
 8006d24:	9f06      	ldrge	r7, [sp, #24]
 8006d26:	1a9f      	sublt	r7, r3, r2
 8006d28:	bfac      	ite	ge
 8006d2a:	9b08      	ldrge	r3, [sp, #32]
 8006d2c:	2300      	movlt	r3, #0
 8006d2e:	e73f      	b.n	8006bb0 <_dtoa_r+0x748>
 8006d30:	3fe00000 	.word	0x3fe00000
 8006d34:	40240000 	.word	0x40240000
 8006d38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d3a:	9f06      	ldr	r7, [sp, #24]
 8006d3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d3e:	e742      	b.n	8006bc6 <_dtoa_r+0x75e>
 8006d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d42:	e76b      	b.n	8006c1c <_dtoa_r+0x7b4>
 8006d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	dc19      	bgt.n	8006d7e <_dtoa_r+0x916>
 8006d4a:	9b04      	ldr	r3, [sp, #16]
 8006d4c:	b9bb      	cbnz	r3, 8006d7e <_dtoa_r+0x916>
 8006d4e:	9b05      	ldr	r3, [sp, #20]
 8006d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d54:	b99b      	cbnz	r3, 8006d7e <_dtoa_r+0x916>
 8006d56:	9b05      	ldr	r3, [sp, #20]
 8006d58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d5c:	0d1b      	lsrs	r3, r3, #20
 8006d5e:	051b      	lsls	r3, r3, #20
 8006d60:	b183      	cbz	r3, 8006d84 <_dtoa_r+0x91c>
 8006d62:	f04f 0801 	mov.w	r8, #1
 8006d66:	9b06      	ldr	r3, [sp, #24]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	9306      	str	r3, [sp, #24]
 8006d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6e:	3301      	adds	r3, #1
 8006d70:	9309      	str	r3, [sp, #36]	; 0x24
 8006d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f af6a 	bne.w	8006c4e <_dtoa_r+0x7e6>
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	e76f      	b.n	8006c5e <_dtoa_r+0x7f6>
 8006d7e:	f04f 0800 	mov.w	r8, #0
 8006d82:	e7f6      	b.n	8006d72 <_dtoa_r+0x90a>
 8006d84:	4698      	mov	r8, r3
 8006d86:	e7f4      	b.n	8006d72 <_dtoa_r+0x90a>
 8006d88:	f43f af7d 	beq.w	8006c86 <_dtoa_r+0x81e>
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	301c      	adds	r0, #28
 8006d90:	e772      	b.n	8006c78 <_dtoa_r+0x810>
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc36      	bgt.n	8006e06 <_dtoa_r+0x99e>
 8006d98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	dd33      	ble.n	8006e06 <_dtoa_r+0x99e>
 8006d9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006da2:	f1b9 0f00 	cmp.w	r9, #0
 8006da6:	d10d      	bne.n	8006dc4 <_dtoa_r+0x95c>
 8006da8:	4621      	mov	r1, r4
 8006daa:	464b      	mov	r3, r9
 8006dac:	2205      	movs	r2, #5
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 fd4a 	bl	8007848 <__multadd>
 8006db4:	4601      	mov	r1, r0
 8006db6:	4604      	mov	r4, r0
 8006db8:	4658      	mov	r0, fp
 8006dba:	f000 ffab 	bl	8007d14 <__mcmp>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f73f adb8 	bgt.w	8006934 <_dtoa_r+0x4cc>
 8006dc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dc6:	9f03      	ldr	r7, [sp, #12]
 8006dc8:	ea6f 0a03 	mvn.w	sl, r3
 8006dcc:	f04f 0800 	mov.w	r8, #0
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 fd16 	bl	8007804 <_Bfree>
 8006dd8:	2e00      	cmp	r6, #0
 8006dda:	f43f aea7 	beq.w	8006b2c <_dtoa_r+0x6c4>
 8006dde:	f1b8 0f00 	cmp.w	r8, #0
 8006de2:	d005      	beq.n	8006df0 <_dtoa_r+0x988>
 8006de4:	45b0      	cmp	r8, r6
 8006de6:	d003      	beq.n	8006df0 <_dtoa_r+0x988>
 8006de8:	4641      	mov	r1, r8
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 fd0a 	bl	8007804 <_Bfree>
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 fd06 	bl	8007804 <_Bfree>
 8006df8:	e698      	b.n	8006b2c <_dtoa_r+0x6c4>
 8006dfa:	2400      	movs	r4, #0
 8006dfc:	4626      	mov	r6, r4
 8006dfe:	e7e1      	b.n	8006dc4 <_dtoa_r+0x95c>
 8006e00:	46c2      	mov	sl, r8
 8006e02:	4626      	mov	r6, r4
 8006e04:	e596      	b.n	8006934 <_dtoa_r+0x4cc>
 8006e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80fd 	beq.w	800700c <_dtoa_r+0xba4>
 8006e12:	2f00      	cmp	r7, #0
 8006e14:	dd05      	ble.n	8006e22 <_dtoa_r+0x9ba>
 8006e16:	4631      	mov	r1, r6
 8006e18:	463a      	mov	r2, r7
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f000 ff0a 	bl	8007c34 <__lshift>
 8006e20:	4606      	mov	r6, r0
 8006e22:	f1b8 0f00 	cmp.w	r8, #0
 8006e26:	d05c      	beq.n	8006ee2 <_dtoa_r+0xa7a>
 8006e28:	4628      	mov	r0, r5
 8006e2a:	6871      	ldr	r1, [r6, #4]
 8006e2c:	f000 fcaa 	bl	8007784 <_Balloc>
 8006e30:	4607      	mov	r7, r0
 8006e32:	b928      	cbnz	r0, 8006e40 <_dtoa_r+0x9d8>
 8006e34:	4602      	mov	r2, r0
 8006e36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e3a:	4b7f      	ldr	r3, [pc, #508]	; (8007038 <_dtoa_r+0xbd0>)
 8006e3c:	f7ff bb28 	b.w	8006490 <_dtoa_r+0x28>
 8006e40:	6932      	ldr	r2, [r6, #16]
 8006e42:	f106 010c 	add.w	r1, r6, #12
 8006e46:	3202      	adds	r2, #2
 8006e48:	0092      	lsls	r2, r2, #2
 8006e4a:	300c      	adds	r0, #12
 8006e4c:	f000 fc8c 	bl	8007768 <memcpy>
 8006e50:	2201      	movs	r2, #1
 8006e52:	4639      	mov	r1, r7
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 feed 	bl	8007c34 <__lshift>
 8006e5a:	46b0      	mov	r8, r6
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	3301      	adds	r3, #1
 8006e62:	9308      	str	r3, [sp, #32]
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	444b      	add	r3, r9
 8006e68:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6a:	9b04      	ldr	r3, [sp, #16]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	9309      	str	r3, [sp, #36]	; 0x24
 8006e72:	9b08      	ldr	r3, [sp, #32]
 8006e74:	4621      	mov	r1, r4
 8006e76:	3b01      	subs	r3, #1
 8006e78:	4658      	mov	r0, fp
 8006e7a:	9304      	str	r3, [sp, #16]
 8006e7c:	f7ff fa68 	bl	8006350 <quorem>
 8006e80:	4603      	mov	r3, r0
 8006e82:	4641      	mov	r1, r8
 8006e84:	3330      	adds	r3, #48	; 0x30
 8006e86:	9006      	str	r0, [sp, #24]
 8006e88:	4658      	mov	r0, fp
 8006e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e8c:	f000 ff42 	bl	8007d14 <__mcmp>
 8006e90:	4632      	mov	r2, r6
 8006e92:	4681      	mov	r9, r0
 8006e94:	4621      	mov	r1, r4
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 ff58 	bl	8007d4c <__mdiff>
 8006e9c:	68c2      	ldr	r2, [r0, #12]
 8006e9e:	4607      	mov	r7, r0
 8006ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea2:	bb02      	cbnz	r2, 8006ee6 <_dtoa_r+0xa7e>
 8006ea4:	4601      	mov	r1, r0
 8006ea6:	4658      	mov	r0, fp
 8006ea8:	f000 ff34 	bl	8007d14 <__mcmp>
 8006eac:	4602      	mov	r2, r0
 8006eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006eb8:	f000 fca4 	bl	8007804 <_Bfree>
 8006ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ec0:	9f08      	ldr	r7, [sp, #32]
 8006ec2:	ea43 0102 	orr.w	r1, r3, r2
 8006ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ecc:	d10d      	bne.n	8006eea <_dtoa_r+0xa82>
 8006ece:	2b39      	cmp	r3, #57	; 0x39
 8006ed0:	d029      	beq.n	8006f26 <_dtoa_r+0xabe>
 8006ed2:	f1b9 0f00 	cmp.w	r9, #0
 8006ed6:	dd01      	ble.n	8006edc <_dtoa_r+0xa74>
 8006ed8:	9b06      	ldr	r3, [sp, #24]
 8006eda:	3331      	adds	r3, #49	; 0x31
 8006edc:	9a04      	ldr	r2, [sp, #16]
 8006ede:	7013      	strb	r3, [r2, #0]
 8006ee0:	e776      	b.n	8006dd0 <_dtoa_r+0x968>
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	e7b9      	b.n	8006e5a <_dtoa_r+0x9f2>
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	e7e2      	b.n	8006eb0 <_dtoa_r+0xa48>
 8006eea:	f1b9 0f00 	cmp.w	r9, #0
 8006eee:	db06      	blt.n	8006efe <_dtoa_r+0xa96>
 8006ef0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006ef2:	ea41 0909 	orr.w	r9, r1, r9
 8006ef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ef8:	ea59 0101 	orrs.w	r1, r9, r1
 8006efc:	d120      	bne.n	8006f40 <_dtoa_r+0xad8>
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	ddec      	ble.n	8006edc <_dtoa_r+0xa74>
 8006f02:	4659      	mov	r1, fp
 8006f04:	2201      	movs	r2, #1
 8006f06:	4628      	mov	r0, r5
 8006f08:	9308      	str	r3, [sp, #32]
 8006f0a:	f000 fe93 	bl	8007c34 <__lshift>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4683      	mov	fp, r0
 8006f12:	f000 feff 	bl	8007d14 <__mcmp>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	9b08      	ldr	r3, [sp, #32]
 8006f1a:	dc02      	bgt.n	8006f22 <_dtoa_r+0xaba>
 8006f1c:	d1de      	bne.n	8006edc <_dtoa_r+0xa74>
 8006f1e:	07da      	lsls	r2, r3, #31
 8006f20:	d5dc      	bpl.n	8006edc <_dtoa_r+0xa74>
 8006f22:	2b39      	cmp	r3, #57	; 0x39
 8006f24:	d1d8      	bne.n	8006ed8 <_dtoa_r+0xa70>
 8006f26:	2339      	movs	r3, #57	; 0x39
 8006f28:	9a04      	ldr	r2, [sp, #16]
 8006f2a:	7013      	strb	r3, [r2, #0]
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	461f      	mov	r7, r3
 8006f30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	2a39      	cmp	r2, #57	; 0x39
 8006f38:	d050      	beq.n	8006fdc <_dtoa_r+0xb74>
 8006f3a:	3201      	adds	r2, #1
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e747      	b.n	8006dd0 <_dtoa_r+0x968>
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	dd03      	ble.n	8006f4c <_dtoa_r+0xae4>
 8006f44:	2b39      	cmp	r3, #57	; 0x39
 8006f46:	d0ee      	beq.n	8006f26 <_dtoa_r+0xabe>
 8006f48:	3301      	adds	r3, #1
 8006f4a:	e7c7      	b.n	8006edc <_dtoa_r+0xa74>
 8006f4c:	9a08      	ldr	r2, [sp, #32]
 8006f4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f54:	428a      	cmp	r2, r1
 8006f56:	d02a      	beq.n	8006fae <_dtoa_r+0xb46>
 8006f58:	4659      	mov	r1, fp
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 fc72 	bl	8007848 <__multadd>
 8006f64:	45b0      	cmp	r8, r6
 8006f66:	4683      	mov	fp, r0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	f04f 020a 	mov.w	r2, #10
 8006f70:	4641      	mov	r1, r8
 8006f72:	4628      	mov	r0, r5
 8006f74:	d107      	bne.n	8006f86 <_dtoa_r+0xb1e>
 8006f76:	f000 fc67 	bl	8007848 <__multadd>
 8006f7a:	4680      	mov	r8, r0
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	9b08      	ldr	r3, [sp, #32]
 8006f80:	3301      	adds	r3, #1
 8006f82:	9308      	str	r3, [sp, #32]
 8006f84:	e775      	b.n	8006e72 <_dtoa_r+0xa0a>
 8006f86:	f000 fc5f 	bl	8007848 <__multadd>
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	2300      	movs	r3, #0
 8006f90:	220a      	movs	r2, #10
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 fc58 	bl	8007848 <__multadd>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	e7f0      	b.n	8006f7e <_dtoa_r+0xb16>
 8006f9c:	f1b9 0f00 	cmp.w	r9, #0
 8006fa0:	bfcc      	ite	gt
 8006fa2:	464f      	movgt	r7, r9
 8006fa4:	2701      	movle	r7, #1
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	9a03      	ldr	r2, [sp, #12]
 8006fac:	4417      	add	r7, r2
 8006fae:	4659      	mov	r1, fp
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	9308      	str	r3, [sp, #32]
 8006fb6:	f000 fe3d 	bl	8007c34 <__lshift>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4683      	mov	fp, r0
 8006fbe:	f000 fea9 	bl	8007d14 <__mcmp>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	dcb2      	bgt.n	8006f2c <_dtoa_r+0xac4>
 8006fc6:	d102      	bne.n	8006fce <_dtoa_r+0xb66>
 8006fc8:	9b08      	ldr	r3, [sp, #32]
 8006fca:	07db      	lsls	r3, r3, #31
 8006fcc:	d4ae      	bmi.n	8006f2c <_dtoa_r+0xac4>
 8006fce:	463b      	mov	r3, r7
 8006fd0:	461f      	mov	r7, r3
 8006fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd6:	2a30      	cmp	r2, #48	; 0x30
 8006fd8:	d0fa      	beq.n	8006fd0 <_dtoa_r+0xb68>
 8006fda:	e6f9      	b.n	8006dd0 <_dtoa_r+0x968>
 8006fdc:	9a03      	ldr	r2, [sp, #12]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d1a5      	bne.n	8006f2e <_dtoa_r+0xac6>
 8006fe2:	2331      	movs	r3, #49	; 0x31
 8006fe4:	f10a 0a01 	add.w	sl, sl, #1
 8006fe8:	e779      	b.n	8006ede <_dtoa_r+0xa76>
 8006fea:	4b14      	ldr	r3, [pc, #80]	; (800703c <_dtoa_r+0xbd4>)
 8006fec:	f7ff baa8 	b.w	8006540 <_dtoa_r+0xd8>
 8006ff0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f47f aa81 	bne.w	80064fa <_dtoa_r+0x92>
 8006ff8:	4b11      	ldr	r3, [pc, #68]	; (8007040 <_dtoa_r+0xbd8>)
 8006ffa:	f7ff baa1 	b.w	8006540 <_dtoa_r+0xd8>
 8006ffe:	f1b9 0f00 	cmp.w	r9, #0
 8007002:	dc03      	bgt.n	800700c <_dtoa_r+0xba4>
 8007004:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007006:	2b02      	cmp	r3, #2
 8007008:	f73f aecb 	bgt.w	8006da2 <_dtoa_r+0x93a>
 800700c:	9f03      	ldr	r7, [sp, #12]
 800700e:	4621      	mov	r1, r4
 8007010:	4658      	mov	r0, fp
 8007012:	f7ff f99d 	bl	8006350 <quorem>
 8007016:	9a03      	ldr	r2, [sp, #12]
 8007018:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800701c:	f807 3b01 	strb.w	r3, [r7], #1
 8007020:	1aba      	subs	r2, r7, r2
 8007022:	4591      	cmp	r9, r2
 8007024:	ddba      	ble.n	8006f9c <_dtoa_r+0xb34>
 8007026:	4659      	mov	r1, fp
 8007028:	2300      	movs	r3, #0
 800702a:	220a      	movs	r2, #10
 800702c:	4628      	mov	r0, r5
 800702e:	f000 fc0b 	bl	8007848 <__multadd>
 8007032:	4683      	mov	fp, r0
 8007034:	e7eb      	b.n	800700e <_dtoa_r+0xba6>
 8007036:	bf00      	nop
 8007038:	08009af8 	.word	0x08009af8
 800703c:	080098f8 	.word	0x080098f8
 8007040:	08009a79 	.word	0x08009a79

08007044 <rshift>:
 8007044:	6903      	ldr	r3, [r0, #16]
 8007046:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800704a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800704e:	f100 0414 	add.w	r4, r0, #20
 8007052:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007056:	dd46      	ble.n	80070e6 <rshift+0xa2>
 8007058:	f011 011f 	ands.w	r1, r1, #31
 800705c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007060:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007064:	d10c      	bne.n	8007080 <rshift+0x3c>
 8007066:	4629      	mov	r1, r5
 8007068:	f100 0710 	add.w	r7, r0, #16
 800706c:	42b1      	cmp	r1, r6
 800706e:	d335      	bcc.n	80070dc <rshift+0x98>
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	1eea      	subs	r2, r5, #3
 8007076:	4296      	cmp	r6, r2
 8007078:	bf38      	it	cc
 800707a:	2300      	movcc	r3, #0
 800707c:	4423      	add	r3, r4
 800707e:	e015      	b.n	80070ac <rshift+0x68>
 8007080:	46a1      	mov	r9, r4
 8007082:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007086:	f1c1 0820 	rsb	r8, r1, #32
 800708a:	40cf      	lsrs	r7, r1
 800708c:	f105 0e04 	add.w	lr, r5, #4
 8007090:	4576      	cmp	r6, lr
 8007092:	46f4      	mov	ip, lr
 8007094:	d816      	bhi.n	80070c4 <rshift+0x80>
 8007096:	1a9a      	subs	r2, r3, r2
 8007098:	0092      	lsls	r2, r2, #2
 800709a:	3a04      	subs	r2, #4
 800709c:	3501      	adds	r5, #1
 800709e:	42ae      	cmp	r6, r5
 80070a0:	bf38      	it	cc
 80070a2:	2200      	movcc	r2, #0
 80070a4:	18a3      	adds	r3, r4, r2
 80070a6:	50a7      	str	r7, [r4, r2]
 80070a8:	b107      	cbz	r7, 80070ac <rshift+0x68>
 80070aa:	3304      	adds	r3, #4
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	eba3 0204 	sub.w	r2, r3, r4
 80070b2:	bf08      	it	eq
 80070b4:	2300      	moveq	r3, #0
 80070b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80070ba:	6102      	str	r2, [r0, #16]
 80070bc:	bf08      	it	eq
 80070be:	6143      	streq	r3, [r0, #20]
 80070c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070c4:	f8dc c000 	ldr.w	ip, [ip]
 80070c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80070cc:	ea4c 0707 	orr.w	r7, ip, r7
 80070d0:	f849 7b04 	str.w	r7, [r9], #4
 80070d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80070d8:	40cf      	lsrs	r7, r1
 80070da:	e7d9      	b.n	8007090 <rshift+0x4c>
 80070dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80070e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80070e4:	e7c2      	b.n	800706c <rshift+0x28>
 80070e6:	4623      	mov	r3, r4
 80070e8:	e7e0      	b.n	80070ac <rshift+0x68>

080070ea <__hexdig_fun>:
 80070ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80070ee:	2b09      	cmp	r3, #9
 80070f0:	d802      	bhi.n	80070f8 <__hexdig_fun+0xe>
 80070f2:	3820      	subs	r0, #32
 80070f4:	b2c0      	uxtb	r0, r0
 80070f6:	4770      	bx	lr
 80070f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80070fc:	2b05      	cmp	r3, #5
 80070fe:	d801      	bhi.n	8007104 <__hexdig_fun+0x1a>
 8007100:	3847      	subs	r0, #71	; 0x47
 8007102:	e7f7      	b.n	80070f4 <__hexdig_fun+0xa>
 8007104:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007108:	2b05      	cmp	r3, #5
 800710a:	d801      	bhi.n	8007110 <__hexdig_fun+0x26>
 800710c:	3827      	subs	r0, #39	; 0x27
 800710e:	e7f1      	b.n	80070f4 <__hexdig_fun+0xa>
 8007110:	2000      	movs	r0, #0
 8007112:	4770      	bx	lr

08007114 <__gethex>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	b08b      	sub	sp, #44	; 0x2c
 800711a:	9305      	str	r3, [sp, #20]
 800711c:	4bb2      	ldr	r3, [pc, #712]	; (80073e8 <__gethex+0x2d4>)
 800711e:	9002      	str	r0, [sp, #8]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	468b      	mov	fp, r1
 8007124:	4618      	mov	r0, r3
 8007126:	4690      	mov	r8, r2
 8007128:	9303      	str	r3, [sp, #12]
 800712a:	f7f9 f87d 	bl	8000228 <strlen>
 800712e:	4682      	mov	sl, r0
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	f8db 2000 	ldr.w	r2, [fp]
 8007136:	4403      	add	r3, r0
 8007138:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800713c:	9306      	str	r3, [sp, #24]
 800713e:	1c93      	adds	r3, r2, #2
 8007140:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007144:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007148:	32fe      	adds	r2, #254	; 0xfe
 800714a:	18d1      	adds	r1, r2, r3
 800714c:	461f      	mov	r7, r3
 800714e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007152:	9101      	str	r1, [sp, #4]
 8007154:	2830      	cmp	r0, #48	; 0x30
 8007156:	d0f8      	beq.n	800714a <__gethex+0x36>
 8007158:	f7ff ffc7 	bl	80070ea <__hexdig_fun>
 800715c:	4604      	mov	r4, r0
 800715e:	2800      	cmp	r0, #0
 8007160:	d13a      	bne.n	80071d8 <__gethex+0xc4>
 8007162:	4652      	mov	r2, sl
 8007164:	4638      	mov	r0, r7
 8007166:	9903      	ldr	r1, [sp, #12]
 8007168:	f001 fa26 	bl	80085b8 <strncmp>
 800716c:	4605      	mov	r5, r0
 800716e:	2800      	cmp	r0, #0
 8007170:	d166      	bne.n	8007240 <__gethex+0x12c>
 8007172:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007176:	eb07 060a 	add.w	r6, r7, sl
 800717a:	f7ff ffb6 	bl	80070ea <__hexdig_fun>
 800717e:	2800      	cmp	r0, #0
 8007180:	d060      	beq.n	8007244 <__gethex+0x130>
 8007182:	4633      	mov	r3, r6
 8007184:	7818      	ldrb	r0, [r3, #0]
 8007186:	461f      	mov	r7, r3
 8007188:	2830      	cmp	r0, #48	; 0x30
 800718a:	f103 0301 	add.w	r3, r3, #1
 800718e:	d0f9      	beq.n	8007184 <__gethex+0x70>
 8007190:	f7ff ffab 	bl	80070ea <__hexdig_fun>
 8007194:	2301      	movs	r3, #1
 8007196:	fab0 f480 	clz	r4, r0
 800719a:	4635      	mov	r5, r6
 800719c:	0964      	lsrs	r4, r4, #5
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	463a      	mov	r2, r7
 80071a2:	4616      	mov	r6, r2
 80071a4:	7830      	ldrb	r0, [r6, #0]
 80071a6:	3201      	adds	r2, #1
 80071a8:	f7ff ff9f 	bl	80070ea <__hexdig_fun>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d1f8      	bne.n	80071a2 <__gethex+0x8e>
 80071b0:	4652      	mov	r2, sl
 80071b2:	4630      	mov	r0, r6
 80071b4:	9903      	ldr	r1, [sp, #12]
 80071b6:	f001 f9ff 	bl	80085b8 <strncmp>
 80071ba:	b980      	cbnz	r0, 80071de <__gethex+0xca>
 80071bc:	b94d      	cbnz	r5, 80071d2 <__gethex+0xbe>
 80071be:	eb06 050a 	add.w	r5, r6, sl
 80071c2:	462a      	mov	r2, r5
 80071c4:	4616      	mov	r6, r2
 80071c6:	7830      	ldrb	r0, [r6, #0]
 80071c8:	3201      	adds	r2, #1
 80071ca:	f7ff ff8e 	bl	80070ea <__hexdig_fun>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d1f8      	bne.n	80071c4 <__gethex+0xb0>
 80071d2:	1bad      	subs	r5, r5, r6
 80071d4:	00ad      	lsls	r5, r5, #2
 80071d6:	e004      	b.n	80071e2 <__gethex+0xce>
 80071d8:	2400      	movs	r4, #0
 80071da:	4625      	mov	r5, r4
 80071dc:	e7e0      	b.n	80071a0 <__gethex+0x8c>
 80071de:	2d00      	cmp	r5, #0
 80071e0:	d1f7      	bne.n	80071d2 <__gethex+0xbe>
 80071e2:	7833      	ldrb	r3, [r6, #0]
 80071e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80071e8:	2b50      	cmp	r3, #80	; 0x50
 80071ea:	d139      	bne.n	8007260 <__gethex+0x14c>
 80071ec:	7873      	ldrb	r3, [r6, #1]
 80071ee:	2b2b      	cmp	r3, #43	; 0x2b
 80071f0:	d02a      	beq.n	8007248 <__gethex+0x134>
 80071f2:	2b2d      	cmp	r3, #45	; 0x2d
 80071f4:	d02c      	beq.n	8007250 <__gethex+0x13c>
 80071f6:	f04f 0900 	mov.w	r9, #0
 80071fa:	1c71      	adds	r1, r6, #1
 80071fc:	7808      	ldrb	r0, [r1, #0]
 80071fe:	f7ff ff74 	bl	80070ea <__hexdig_fun>
 8007202:	1e43      	subs	r3, r0, #1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b18      	cmp	r3, #24
 8007208:	d82a      	bhi.n	8007260 <__gethex+0x14c>
 800720a:	f1a0 0210 	sub.w	r2, r0, #16
 800720e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007212:	f7ff ff6a 	bl	80070ea <__hexdig_fun>
 8007216:	1e43      	subs	r3, r0, #1
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b18      	cmp	r3, #24
 800721c:	d91b      	bls.n	8007256 <__gethex+0x142>
 800721e:	f1b9 0f00 	cmp.w	r9, #0
 8007222:	d000      	beq.n	8007226 <__gethex+0x112>
 8007224:	4252      	negs	r2, r2
 8007226:	4415      	add	r5, r2
 8007228:	f8cb 1000 	str.w	r1, [fp]
 800722c:	b1d4      	cbz	r4, 8007264 <__gethex+0x150>
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	bf14      	ite	ne
 8007234:	2700      	movne	r7, #0
 8007236:	2706      	moveq	r7, #6
 8007238:	4638      	mov	r0, r7
 800723a:	b00b      	add	sp, #44	; 0x2c
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	463e      	mov	r6, r7
 8007242:	4625      	mov	r5, r4
 8007244:	2401      	movs	r4, #1
 8007246:	e7cc      	b.n	80071e2 <__gethex+0xce>
 8007248:	f04f 0900 	mov.w	r9, #0
 800724c:	1cb1      	adds	r1, r6, #2
 800724e:	e7d5      	b.n	80071fc <__gethex+0xe8>
 8007250:	f04f 0901 	mov.w	r9, #1
 8007254:	e7fa      	b.n	800724c <__gethex+0x138>
 8007256:	230a      	movs	r3, #10
 8007258:	fb03 0202 	mla	r2, r3, r2, r0
 800725c:	3a10      	subs	r2, #16
 800725e:	e7d6      	b.n	800720e <__gethex+0xfa>
 8007260:	4631      	mov	r1, r6
 8007262:	e7e1      	b.n	8007228 <__gethex+0x114>
 8007264:	4621      	mov	r1, r4
 8007266:	1bf3      	subs	r3, r6, r7
 8007268:	3b01      	subs	r3, #1
 800726a:	2b07      	cmp	r3, #7
 800726c:	dc0a      	bgt.n	8007284 <__gethex+0x170>
 800726e:	9802      	ldr	r0, [sp, #8]
 8007270:	f000 fa88 	bl	8007784 <_Balloc>
 8007274:	4604      	mov	r4, r0
 8007276:	b940      	cbnz	r0, 800728a <__gethex+0x176>
 8007278:	4602      	mov	r2, r0
 800727a:	21de      	movs	r1, #222	; 0xde
 800727c:	4b5b      	ldr	r3, [pc, #364]	; (80073ec <__gethex+0x2d8>)
 800727e:	485c      	ldr	r0, [pc, #368]	; (80073f0 <__gethex+0x2dc>)
 8007280:	f001 f9bc 	bl	80085fc <__assert_func>
 8007284:	3101      	adds	r1, #1
 8007286:	105b      	asrs	r3, r3, #1
 8007288:	e7ef      	b.n	800726a <__gethex+0x156>
 800728a:	f04f 0b00 	mov.w	fp, #0
 800728e:	f100 0914 	add.w	r9, r0, #20
 8007292:	f1ca 0301 	rsb	r3, sl, #1
 8007296:	f8cd 9010 	str.w	r9, [sp, #16]
 800729a:	f8cd b004 	str.w	fp, [sp, #4]
 800729e:	9308      	str	r3, [sp, #32]
 80072a0:	42b7      	cmp	r7, r6
 80072a2:	d33f      	bcc.n	8007324 <__gethex+0x210>
 80072a4:	9f04      	ldr	r7, [sp, #16]
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	f847 3b04 	str.w	r3, [r7], #4
 80072ac:	eba7 0709 	sub.w	r7, r7, r9
 80072b0:	10bf      	asrs	r7, r7, #2
 80072b2:	6127      	str	r7, [r4, #16]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fb57 	bl	8007968 <__hi0bits>
 80072ba:	017f      	lsls	r7, r7, #5
 80072bc:	f8d8 6000 	ldr.w	r6, [r8]
 80072c0:	1a3f      	subs	r7, r7, r0
 80072c2:	42b7      	cmp	r7, r6
 80072c4:	dd62      	ble.n	800738c <__gethex+0x278>
 80072c6:	1bbf      	subs	r7, r7, r6
 80072c8:	4639      	mov	r1, r7
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 fef1 	bl	80080b2 <__any_on>
 80072d0:	4682      	mov	sl, r0
 80072d2:	b1a8      	cbz	r0, 8007300 <__gethex+0x1ec>
 80072d4:	f04f 0a01 	mov.w	sl, #1
 80072d8:	1e7b      	subs	r3, r7, #1
 80072da:	1159      	asrs	r1, r3, #5
 80072dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80072e0:	f003 021f 	and.w	r2, r3, #31
 80072e4:	fa0a f202 	lsl.w	r2, sl, r2
 80072e8:	420a      	tst	r2, r1
 80072ea:	d009      	beq.n	8007300 <__gethex+0x1ec>
 80072ec:	4553      	cmp	r3, sl
 80072ee:	dd05      	ble.n	80072fc <__gethex+0x1e8>
 80072f0:	4620      	mov	r0, r4
 80072f2:	1eb9      	subs	r1, r7, #2
 80072f4:	f000 fedd 	bl	80080b2 <__any_on>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d144      	bne.n	8007386 <__gethex+0x272>
 80072fc:	f04f 0a02 	mov.w	sl, #2
 8007300:	4639      	mov	r1, r7
 8007302:	4620      	mov	r0, r4
 8007304:	f7ff fe9e 	bl	8007044 <rshift>
 8007308:	443d      	add	r5, r7
 800730a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800730e:	42ab      	cmp	r3, r5
 8007310:	da4a      	bge.n	80073a8 <__gethex+0x294>
 8007312:	4621      	mov	r1, r4
 8007314:	9802      	ldr	r0, [sp, #8]
 8007316:	f000 fa75 	bl	8007804 <_Bfree>
 800731a:	2300      	movs	r3, #0
 800731c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800731e:	27a3      	movs	r7, #163	; 0xa3
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e789      	b.n	8007238 <__gethex+0x124>
 8007324:	1e73      	subs	r3, r6, #1
 8007326:	9a06      	ldr	r2, [sp, #24]
 8007328:	9307      	str	r3, [sp, #28]
 800732a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800732e:	4293      	cmp	r3, r2
 8007330:	d019      	beq.n	8007366 <__gethex+0x252>
 8007332:	f1bb 0f20 	cmp.w	fp, #32
 8007336:	d107      	bne.n	8007348 <__gethex+0x234>
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	9a01      	ldr	r2, [sp, #4]
 800733c:	f843 2b04 	str.w	r2, [r3], #4
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	2300      	movs	r3, #0
 8007344:	469b      	mov	fp, r3
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800734c:	f7ff fecd 	bl	80070ea <__hexdig_fun>
 8007350:	9b01      	ldr	r3, [sp, #4]
 8007352:	f000 000f 	and.w	r0, r0, #15
 8007356:	fa00 f00b 	lsl.w	r0, r0, fp
 800735a:	4303      	orrs	r3, r0
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	f10b 0b04 	add.w	fp, fp, #4
 8007362:	9b07      	ldr	r3, [sp, #28]
 8007364:	e00d      	b.n	8007382 <__gethex+0x26e>
 8007366:	9a08      	ldr	r2, [sp, #32]
 8007368:	1e73      	subs	r3, r6, #1
 800736a:	4413      	add	r3, r2
 800736c:	42bb      	cmp	r3, r7
 800736e:	d3e0      	bcc.n	8007332 <__gethex+0x21e>
 8007370:	4618      	mov	r0, r3
 8007372:	4652      	mov	r2, sl
 8007374:	9903      	ldr	r1, [sp, #12]
 8007376:	9309      	str	r3, [sp, #36]	; 0x24
 8007378:	f001 f91e 	bl	80085b8 <strncmp>
 800737c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737e:	2800      	cmp	r0, #0
 8007380:	d1d7      	bne.n	8007332 <__gethex+0x21e>
 8007382:	461e      	mov	r6, r3
 8007384:	e78c      	b.n	80072a0 <__gethex+0x18c>
 8007386:	f04f 0a03 	mov.w	sl, #3
 800738a:	e7b9      	b.n	8007300 <__gethex+0x1ec>
 800738c:	da09      	bge.n	80073a2 <__gethex+0x28e>
 800738e:	1bf7      	subs	r7, r6, r7
 8007390:	4621      	mov	r1, r4
 8007392:	463a      	mov	r2, r7
 8007394:	9802      	ldr	r0, [sp, #8]
 8007396:	f000 fc4d 	bl	8007c34 <__lshift>
 800739a:	4604      	mov	r4, r0
 800739c:	1bed      	subs	r5, r5, r7
 800739e:	f100 0914 	add.w	r9, r0, #20
 80073a2:	f04f 0a00 	mov.w	sl, #0
 80073a6:	e7b0      	b.n	800730a <__gethex+0x1f6>
 80073a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80073ac:	42a8      	cmp	r0, r5
 80073ae:	dd72      	ble.n	8007496 <__gethex+0x382>
 80073b0:	1b45      	subs	r5, r0, r5
 80073b2:	42ae      	cmp	r6, r5
 80073b4:	dc35      	bgt.n	8007422 <__gethex+0x30e>
 80073b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d029      	beq.n	8007412 <__gethex+0x2fe>
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d02b      	beq.n	800741a <__gethex+0x306>
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d11c      	bne.n	8007400 <__gethex+0x2ec>
 80073c6:	42ae      	cmp	r6, r5
 80073c8:	d11a      	bne.n	8007400 <__gethex+0x2ec>
 80073ca:	2e01      	cmp	r6, #1
 80073cc:	d112      	bne.n	80073f4 <__gethex+0x2e0>
 80073ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073d2:	9a05      	ldr	r2, [sp, #20]
 80073d4:	2762      	movs	r7, #98	; 0x62
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	2301      	movs	r3, #1
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	f8c9 3000 	str.w	r3, [r9]
 80073e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073e2:	601c      	str	r4, [r3, #0]
 80073e4:	e728      	b.n	8007238 <__gethex+0x124>
 80073e6:	bf00      	nop
 80073e8:	08009b70 	.word	0x08009b70
 80073ec:	08009af8 	.word	0x08009af8
 80073f0:	08009b09 	.word	0x08009b09
 80073f4:	4620      	mov	r0, r4
 80073f6:	1e71      	subs	r1, r6, #1
 80073f8:	f000 fe5b 	bl	80080b2 <__any_on>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d1e6      	bne.n	80073ce <__gethex+0x2ba>
 8007400:	4621      	mov	r1, r4
 8007402:	9802      	ldr	r0, [sp, #8]
 8007404:	f000 f9fe 	bl	8007804 <_Bfree>
 8007408:	2300      	movs	r3, #0
 800740a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800740c:	2750      	movs	r7, #80	; 0x50
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e712      	b.n	8007238 <__gethex+0x124>
 8007412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f3      	bne.n	8007400 <__gethex+0x2ec>
 8007418:	e7d9      	b.n	80073ce <__gethex+0x2ba>
 800741a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1d6      	bne.n	80073ce <__gethex+0x2ba>
 8007420:	e7ee      	b.n	8007400 <__gethex+0x2ec>
 8007422:	1e6f      	subs	r7, r5, #1
 8007424:	f1ba 0f00 	cmp.w	sl, #0
 8007428:	d132      	bne.n	8007490 <__gethex+0x37c>
 800742a:	b127      	cbz	r7, 8007436 <__gethex+0x322>
 800742c:	4639      	mov	r1, r7
 800742e:	4620      	mov	r0, r4
 8007430:	f000 fe3f 	bl	80080b2 <__any_on>
 8007434:	4682      	mov	sl, r0
 8007436:	2101      	movs	r1, #1
 8007438:	117b      	asrs	r3, r7, #5
 800743a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800743e:	f007 071f 	and.w	r7, r7, #31
 8007442:	fa01 f707 	lsl.w	r7, r1, r7
 8007446:	421f      	tst	r7, r3
 8007448:	f04f 0702 	mov.w	r7, #2
 800744c:	4629      	mov	r1, r5
 800744e:	4620      	mov	r0, r4
 8007450:	bf18      	it	ne
 8007452:	f04a 0a02 	orrne.w	sl, sl, #2
 8007456:	1b76      	subs	r6, r6, r5
 8007458:	f7ff fdf4 	bl	8007044 <rshift>
 800745c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007460:	f1ba 0f00 	cmp.w	sl, #0
 8007464:	d048      	beq.n	80074f8 <__gethex+0x3e4>
 8007466:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d015      	beq.n	800749a <__gethex+0x386>
 800746e:	2b03      	cmp	r3, #3
 8007470:	d017      	beq.n	80074a2 <__gethex+0x38e>
 8007472:	2b01      	cmp	r3, #1
 8007474:	d109      	bne.n	800748a <__gethex+0x376>
 8007476:	f01a 0f02 	tst.w	sl, #2
 800747a:	d006      	beq.n	800748a <__gethex+0x376>
 800747c:	f8d9 0000 	ldr.w	r0, [r9]
 8007480:	ea4a 0a00 	orr.w	sl, sl, r0
 8007484:	f01a 0f01 	tst.w	sl, #1
 8007488:	d10e      	bne.n	80074a8 <__gethex+0x394>
 800748a:	f047 0710 	orr.w	r7, r7, #16
 800748e:	e033      	b.n	80074f8 <__gethex+0x3e4>
 8007490:	f04f 0a01 	mov.w	sl, #1
 8007494:	e7cf      	b.n	8007436 <__gethex+0x322>
 8007496:	2701      	movs	r7, #1
 8007498:	e7e2      	b.n	8007460 <__gethex+0x34c>
 800749a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800749c:	f1c3 0301 	rsb	r3, r3, #1
 80074a0:	9315      	str	r3, [sp, #84]	; 0x54
 80074a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0f0      	beq.n	800748a <__gethex+0x376>
 80074a8:	f04f 0c00 	mov.w	ip, #0
 80074ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80074b0:	f104 0314 	add.w	r3, r4, #20
 80074b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80074b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80074bc:	4618      	mov	r0, r3
 80074be:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80074c6:	d01c      	beq.n	8007502 <__gethex+0x3ee>
 80074c8:	3201      	adds	r2, #1
 80074ca:	6002      	str	r2, [r0, #0]
 80074cc:	2f02      	cmp	r7, #2
 80074ce:	f104 0314 	add.w	r3, r4, #20
 80074d2:	d13d      	bne.n	8007550 <__gethex+0x43c>
 80074d4:	f8d8 2000 	ldr.w	r2, [r8]
 80074d8:	3a01      	subs	r2, #1
 80074da:	42b2      	cmp	r2, r6
 80074dc:	d10a      	bne.n	80074f4 <__gethex+0x3e0>
 80074de:	2201      	movs	r2, #1
 80074e0:	1171      	asrs	r1, r6, #5
 80074e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074e6:	f006 061f 	and.w	r6, r6, #31
 80074ea:	fa02 f606 	lsl.w	r6, r2, r6
 80074ee:	421e      	tst	r6, r3
 80074f0:	bf18      	it	ne
 80074f2:	4617      	movne	r7, r2
 80074f4:	f047 0720 	orr.w	r7, r7, #32
 80074f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074fa:	601c      	str	r4, [r3, #0]
 80074fc:	9b05      	ldr	r3, [sp, #20]
 80074fe:	601d      	str	r5, [r3, #0]
 8007500:	e69a      	b.n	8007238 <__gethex+0x124>
 8007502:	4299      	cmp	r1, r3
 8007504:	f843 cc04 	str.w	ip, [r3, #-4]
 8007508:	d8d8      	bhi.n	80074bc <__gethex+0x3a8>
 800750a:	68a3      	ldr	r3, [r4, #8]
 800750c:	459b      	cmp	fp, r3
 800750e:	db17      	blt.n	8007540 <__gethex+0x42c>
 8007510:	6861      	ldr	r1, [r4, #4]
 8007512:	9802      	ldr	r0, [sp, #8]
 8007514:	3101      	adds	r1, #1
 8007516:	f000 f935 	bl	8007784 <_Balloc>
 800751a:	4681      	mov	r9, r0
 800751c:	b918      	cbnz	r0, 8007526 <__gethex+0x412>
 800751e:	4602      	mov	r2, r0
 8007520:	2184      	movs	r1, #132	; 0x84
 8007522:	4b19      	ldr	r3, [pc, #100]	; (8007588 <__gethex+0x474>)
 8007524:	e6ab      	b.n	800727e <__gethex+0x16a>
 8007526:	6922      	ldr	r2, [r4, #16]
 8007528:	f104 010c 	add.w	r1, r4, #12
 800752c:	3202      	adds	r2, #2
 800752e:	0092      	lsls	r2, r2, #2
 8007530:	300c      	adds	r0, #12
 8007532:	f000 f919 	bl	8007768 <memcpy>
 8007536:	4621      	mov	r1, r4
 8007538:	9802      	ldr	r0, [sp, #8]
 800753a:	f000 f963 	bl	8007804 <_Bfree>
 800753e:	464c      	mov	r4, r9
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	6122      	str	r2, [r4, #16]
 8007546:	2201      	movs	r2, #1
 8007548:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800754c:	615a      	str	r2, [r3, #20]
 800754e:	e7bd      	b.n	80074cc <__gethex+0x3b8>
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	455a      	cmp	r2, fp
 8007554:	dd0b      	ble.n	800756e <__gethex+0x45a>
 8007556:	2101      	movs	r1, #1
 8007558:	4620      	mov	r0, r4
 800755a:	f7ff fd73 	bl	8007044 <rshift>
 800755e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007562:	3501      	adds	r5, #1
 8007564:	42ab      	cmp	r3, r5
 8007566:	f6ff aed4 	blt.w	8007312 <__gethex+0x1fe>
 800756a:	2701      	movs	r7, #1
 800756c:	e7c2      	b.n	80074f4 <__gethex+0x3e0>
 800756e:	f016 061f 	ands.w	r6, r6, #31
 8007572:	d0fa      	beq.n	800756a <__gethex+0x456>
 8007574:	4453      	add	r3, sl
 8007576:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800757a:	f000 f9f5 	bl	8007968 <__hi0bits>
 800757e:	f1c6 0620 	rsb	r6, r6, #32
 8007582:	42b0      	cmp	r0, r6
 8007584:	dbe7      	blt.n	8007556 <__gethex+0x442>
 8007586:	e7f0      	b.n	800756a <__gethex+0x456>
 8007588:	08009af8 	.word	0x08009af8

0800758c <L_shift>:
 800758c:	f1c2 0208 	rsb	r2, r2, #8
 8007590:	0092      	lsls	r2, r2, #2
 8007592:	b570      	push	{r4, r5, r6, lr}
 8007594:	f1c2 0620 	rsb	r6, r2, #32
 8007598:	6843      	ldr	r3, [r0, #4]
 800759a:	6804      	ldr	r4, [r0, #0]
 800759c:	fa03 f506 	lsl.w	r5, r3, r6
 80075a0:	432c      	orrs	r4, r5
 80075a2:	40d3      	lsrs	r3, r2
 80075a4:	6004      	str	r4, [r0, #0]
 80075a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80075aa:	4288      	cmp	r0, r1
 80075ac:	d3f4      	bcc.n	8007598 <L_shift+0xc>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}

080075b0 <__match>:
 80075b0:	b530      	push	{r4, r5, lr}
 80075b2:	6803      	ldr	r3, [r0, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ba:	b914      	cbnz	r4, 80075c2 <__match+0x12>
 80075bc:	6003      	str	r3, [r0, #0]
 80075be:	2001      	movs	r0, #1
 80075c0:	bd30      	pop	{r4, r5, pc}
 80075c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80075ca:	2d19      	cmp	r5, #25
 80075cc:	bf98      	it	ls
 80075ce:	3220      	addls	r2, #32
 80075d0:	42a2      	cmp	r2, r4
 80075d2:	d0f0      	beq.n	80075b6 <__match+0x6>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e7f3      	b.n	80075c0 <__match+0x10>

080075d8 <__hexnan>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	2500      	movs	r5, #0
 80075de:	680b      	ldr	r3, [r1, #0]
 80075e0:	4682      	mov	sl, r0
 80075e2:	115e      	asrs	r6, r3, #5
 80075e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80075e8:	f013 031f 	ands.w	r3, r3, #31
 80075ec:	bf18      	it	ne
 80075ee:	3604      	addne	r6, #4
 80075f0:	1f37      	subs	r7, r6, #4
 80075f2:	46b9      	mov	r9, r7
 80075f4:	463c      	mov	r4, r7
 80075f6:	46ab      	mov	fp, r5
 80075f8:	b087      	sub	sp, #28
 80075fa:	4690      	mov	r8, r2
 80075fc:	6802      	ldr	r2, [r0, #0]
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	f846 5c04 	str.w	r5, [r6, #-4]
 8007604:	9502      	str	r5, [sp, #8]
 8007606:	7851      	ldrb	r1, [r2, #1]
 8007608:	1c53      	adds	r3, r2, #1
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	b341      	cbz	r1, 8007660 <__hexnan+0x88>
 800760e:	4608      	mov	r0, r1
 8007610:	9205      	str	r2, [sp, #20]
 8007612:	9104      	str	r1, [sp, #16]
 8007614:	f7ff fd69 	bl	80070ea <__hexdig_fun>
 8007618:	2800      	cmp	r0, #0
 800761a:	d14f      	bne.n	80076bc <__hexnan+0xe4>
 800761c:	9904      	ldr	r1, [sp, #16]
 800761e:	9a05      	ldr	r2, [sp, #20]
 8007620:	2920      	cmp	r1, #32
 8007622:	d818      	bhi.n	8007656 <__hexnan+0x7e>
 8007624:	9b02      	ldr	r3, [sp, #8]
 8007626:	459b      	cmp	fp, r3
 8007628:	dd13      	ble.n	8007652 <__hexnan+0x7a>
 800762a:	454c      	cmp	r4, r9
 800762c:	d206      	bcs.n	800763c <__hexnan+0x64>
 800762e:	2d07      	cmp	r5, #7
 8007630:	dc04      	bgt.n	800763c <__hexnan+0x64>
 8007632:	462a      	mov	r2, r5
 8007634:	4649      	mov	r1, r9
 8007636:	4620      	mov	r0, r4
 8007638:	f7ff ffa8 	bl	800758c <L_shift>
 800763c:	4544      	cmp	r4, r8
 800763e:	d950      	bls.n	80076e2 <__hexnan+0x10a>
 8007640:	2300      	movs	r3, #0
 8007642:	f1a4 0904 	sub.w	r9, r4, #4
 8007646:	f844 3c04 	str.w	r3, [r4, #-4]
 800764a:	461d      	mov	r5, r3
 800764c:	464c      	mov	r4, r9
 800764e:	f8cd b008 	str.w	fp, [sp, #8]
 8007652:	9a03      	ldr	r2, [sp, #12]
 8007654:	e7d7      	b.n	8007606 <__hexnan+0x2e>
 8007656:	2929      	cmp	r1, #41	; 0x29
 8007658:	d156      	bne.n	8007708 <__hexnan+0x130>
 800765a:	3202      	adds	r2, #2
 800765c:	f8ca 2000 	str.w	r2, [sl]
 8007660:	f1bb 0f00 	cmp.w	fp, #0
 8007664:	d050      	beq.n	8007708 <__hexnan+0x130>
 8007666:	454c      	cmp	r4, r9
 8007668:	d206      	bcs.n	8007678 <__hexnan+0xa0>
 800766a:	2d07      	cmp	r5, #7
 800766c:	dc04      	bgt.n	8007678 <__hexnan+0xa0>
 800766e:	462a      	mov	r2, r5
 8007670:	4649      	mov	r1, r9
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff ff8a 	bl	800758c <L_shift>
 8007678:	4544      	cmp	r4, r8
 800767a:	d934      	bls.n	80076e6 <__hexnan+0x10e>
 800767c:	4623      	mov	r3, r4
 800767e:	f1a8 0204 	sub.w	r2, r8, #4
 8007682:	f853 1b04 	ldr.w	r1, [r3], #4
 8007686:	429f      	cmp	r7, r3
 8007688:	f842 1f04 	str.w	r1, [r2, #4]!
 800768c:	d2f9      	bcs.n	8007682 <__hexnan+0xaa>
 800768e:	1b3b      	subs	r3, r7, r4
 8007690:	f023 0303 	bic.w	r3, r3, #3
 8007694:	3304      	adds	r3, #4
 8007696:	3401      	adds	r4, #1
 8007698:	3e03      	subs	r6, #3
 800769a:	42b4      	cmp	r4, r6
 800769c:	bf88      	it	hi
 800769e:	2304      	movhi	r3, #4
 80076a0:	2200      	movs	r2, #0
 80076a2:	4443      	add	r3, r8
 80076a4:	f843 2b04 	str.w	r2, [r3], #4
 80076a8:	429f      	cmp	r7, r3
 80076aa:	d2fb      	bcs.n	80076a4 <__hexnan+0xcc>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	b91b      	cbnz	r3, 80076b8 <__hexnan+0xe0>
 80076b0:	4547      	cmp	r7, r8
 80076b2:	d127      	bne.n	8007704 <__hexnan+0x12c>
 80076b4:	2301      	movs	r3, #1
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	2005      	movs	r0, #5
 80076ba:	e026      	b.n	800770a <__hexnan+0x132>
 80076bc:	3501      	adds	r5, #1
 80076be:	2d08      	cmp	r5, #8
 80076c0:	f10b 0b01 	add.w	fp, fp, #1
 80076c4:	dd06      	ble.n	80076d4 <__hexnan+0xfc>
 80076c6:	4544      	cmp	r4, r8
 80076c8:	d9c3      	bls.n	8007652 <__hexnan+0x7a>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2501      	movs	r5, #1
 80076ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80076d2:	3c04      	subs	r4, #4
 80076d4:	6822      	ldr	r2, [r4, #0]
 80076d6:	f000 000f 	and.w	r0, r0, #15
 80076da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	e7b7      	b.n	8007652 <__hexnan+0x7a>
 80076e2:	2508      	movs	r5, #8
 80076e4:	e7b5      	b.n	8007652 <__hexnan+0x7a>
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0df      	beq.n	80076ac <__hexnan+0xd4>
 80076ec:	f04f 32ff 	mov.w	r2, #4294967295
 80076f0:	f1c3 0320 	rsb	r3, r3, #32
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
 80076f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076fc:	401a      	ands	r2, r3
 80076fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8007702:	e7d3      	b.n	80076ac <__hexnan+0xd4>
 8007704:	3f04      	subs	r7, #4
 8007706:	e7d1      	b.n	80076ac <__hexnan+0xd4>
 8007708:	2004      	movs	r0, #4
 800770a:	b007      	add	sp, #28
 800770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007710 <_localeconv_r>:
 8007710:	4800      	ldr	r0, [pc, #0]	; (8007714 <_localeconv_r+0x4>)
 8007712:	4770      	bx	lr
 8007714:	20000198 	.word	0x20000198

08007718 <malloc>:
 8007718:	4b02      	ldr	r3, [pc, #8]	; (8007724 <malloc+0xc>)
 800771a:	4601      	mov	r1, r0
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	f000 bd65 	b.w	80081ec <_malloc_r>
 8007722:	bf00      	nop
 8007724:	20000040 	.word	0x20000040

08007728 <__ascii_mbtowc>:
 8007728:	b082      	sub	sp, #8
 800772a:	b901      	cbnz	r1, 800772e <__ascii_mbtowc+0x6>
 800772c:	a901      	add	r1, sp, #4
 800772e:	b142      	cbz	r2, 8007742 <__ascii_mbtowc+0x1a>
 8007730:	b14b      	cbz	r3, 8007746 <__ascii_mbtowc+0x1e>
 8007732:	7813      	ldrb	r3, [r2, #0]
 8007734:	600b      	str	r3, [r1, #0]
 8007736:	7812      	ldrb	r2, [r2, #0]
 8007738:	1e10      	subs	r0, r2, #0
 800773a:	bf18      	it	ne
 800773c:	2001      	movne	r0, #1
 800773e:	b002      	add	sp, #8
 8007740:	4770      	bx	lr
 8007742:	4610      	mov	r0, r2
 8007744:	e7fb      	b.n	800773e <__ascii_mbtowc+0x16>
 8007746:	f06f 0001 	mvn.w	r0, #1
 800774a:	e7f8      	b.n	800773e <__ascii_mbtowc+0x16>

0800774c <memchr>:
 800774c:	4603      	mov	r3, r0
 800774e:	b510      	push	{r4, lr}
 8007750:	b2c9      	uxtb	r1, r1
 8007752:	4402      	add	r2, r0
 8007754:	4293      	cmp	r3, r2
 8007756:	4618      	mov	r0, r3
 8007758:	d101      	bne.n	800775e <memchr+0x12>
 800775a:	2000      	movs	r0, #0
 800775c:	e003      	b.n	8007766 <memchr+0x1a>
 800775e:	7804      	ldrb	r4, [r0, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	428c      	cmp	r4, r1
 8007764:	d1f6      	bne.n	8007754 <memchr+0x8>
 8007766:	bd10      	pop	{r4, pc}

08007768 <memcpy>:
 8007768:	440a      	add	r2, r1
 800776a:	4291      	cmp	r1, r2
 800776c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007770:	d100      	bne.n	8007774 <memcpy+0xc>
 8007772:	4770      	bx	lr
 8007774:	b510      	push	{r4, lr}
 8007776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800777a:	4291      	cmp	r1, r2
 800777c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007780:	d1f9      	bne.n	8007776 <memcpy+0xe>
 8007782:	bd10      	pop	{r4, pc}

08007784 <_Balloc>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	b976      	cbnz	r6, 80077ac <_Balloc+0x28>
 800778e:	2010      	movs	r0, #16
 8007790:	f7ff ffc2 	bl	8007718 <malloc>
 8007794:	4602      	mov	r2, r0
 8007796:	6260      	str	r0, [r4, #36]	; 0x24
 8007798:	b920      	cbnz	r0, 80077a4 <_Balloc+0x20>
 800779a:	2166      	movs	r1, #102	; 0x66
 800779c:	4b17      	ldr	r3, [pc, #92]	; (80077fc <_Balloc+0x78>)
 800779e:	4818      	ldr	r0, [pc, #96]	; (8007800 <_Balloc+0x7c>)
 80077a0:	f000 ff2c 	bl	80085fc <__assert_func>
 80077a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a8:	6006      	str	r6, [r0, #0]
 80077aa:	60c6      	str	r6, [r0, #12]
 80077ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077ae:	68f3      	ldr	r3, [r6, #12]
 80077b0:	b183      	cbz	r3, 80077d4 <_Balloc+0x50>
 80077b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077ba:	b9b8      	cbnz	r0, 80077ec <_Balloc+0x68>
 80077bc:	2101      	movs	r1, #1
 80077be:	fa01 f605 	lsl.w	r6, r1, r5
 80077c2:	1d72      	adds	r2, r6, #5
 80077c4:	4620      	mov	r0, r4
 80077c6:	0092      	lsls	r2, r2, #2
 80077c8:	f000 fc94 	bl	80080f4 <_calloc_r>
 80077cc:	b160      	cbz	r0, 80077e8 <_Balloc+0x64>
 80077ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077d2:	e00e      	b.n	80077f2 <_Balloc+0x6e>
 80077d4:	2221      	movs	r2, #33	; 0x21
 80077d6:	2104      	movs	r1, #4
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 fc8b 	bl	80080f4 <_calloc_r>
 80077de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077e0:	60f0      	str	r0, [r6, #12]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e4      	bne.n	80077b2 <_Balloc+0x2e>
 80077e8:	2000      	movs	r0, #0
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	6802      	ldr	r2, [r0, #0]
 80077ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077f2:	2300      	movs	r3, #0
 80077f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f8:	e7f7      	b.n	80077ea <_Balloc+0x66>
 80077fa:	bf00      	nop
 80077fc:	08009a86 	.word	0x08009a86
 8007800:	08009b84 	.word	0x08009b84

08007804 <_Bfree>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007808:	4605      	mov	r5, r0
 800780a:	460c      	mov	r4, r1
 800780c:	b976      	cbnz	r6, 800782c <_Bfree+0x28>
 800780e:	2010      	movs	r0, #16
 8007810:	f7ff ff82 	bl	8007718 <malloc>
 8007814:	4602      	mov	r2, r0
 8007816:	6268      	str	r0, [r5, #36]	; 0x24
 8007818:	b920      	cbnz	r0, 8007824 <_Bfree+0x20>
 800781a:	218a      	movs	r1, #138	; 0x8a
 800781c:	4b08      	ldr	r3, [pc, #32]	; (8007840 <_Bfree+0x3c>)
 800781e:	4809      	ldr	r0, [pc, #36]	; (8007844 <_Bfree+0x40>)
 8007820:	f000 feec 	bl	80085fc <__assert_func>
 8007824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007828:	6006      	str	r6, [r0, #0]
 800782a:	60c6      	str	r6, [r0, #12]
 800782c:	b13c      	cbz	r4, 800783e <_Bfree+0x3a>
 800782e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007830:	6862      	ldr	r2, [r4, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007838:	6021      	str	r1, [r4, #0]
 800783a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	08009a86 	.word	0x08009a86
 8007844:	08009b84 	.word	0x08009b84

08007848 <__multadd>:
 8007848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784c:	4607      	mov	r7, r0
 800784e:	460c      	mov	r4, r1
 8007850:	461e      	mov	r6, r3
 8007852:	2000      	movs	r0, #0
 8007854:	690d      	ldr	r5, [r1, #16]
 8007856:	f101 0c14 	add.w	ip, r1, #20
 800785a:	f8dc 3000 	ldr.w	r3, [ip]
 800785e:	3001      	adds	r0, #1
 8007860:	b299      	uxth	r1, r3
 8007862:	fb02 6101 	mla	r1, r2, r1, r6
 8007866:	0c1e      	lsrs	r6, r3, #16
 8007868:	0c0b      	lsrs	r3, r1, #16
 800786a:	fb02 3306 	mla	r3, r2, r6, r3
 800786e:	b289      	uxth	r1, r1
 8007870:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007874:	4285      	cmp	r5, r0
 8007876:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800787a:	f84c 1b04 	str.w	r1, [ip], #4
 800787e:	dcec      	bgt.n	800785a <__multadd+0x12>
 8007880:	b30e      	cbz	r6, 80078c6 <__multadd+0x7e>
 8007882:	68a3      	ldr	r3, [r4, #8]
 8007884:	42ab      	cmp	r3, r5
 8007886:	dc19      	bgt.n	80078bc <__multadd+0x74>
 8007888:	6861      	ldr	r1, [r4, #4]
 800788a:	4638      	mov	r0, r7
 800788c:	3101      	adds	r1, #1
 800788e:	f7ff ff79 	bl	8007784 <_Balloc>
 8007892:	4680      	mov	r8, r0
 8007894:	b928      	cbnz	r0, 80078a2 <__multadd+0x5a>
 8007896:	4602      	mov	r2, r0
 8007898:	21b5      	movs	r1, #181	; 0xb5
 800789a:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <__multadd+0x84>)
 800789c:	480c      	ldr	r0, [pc, #48]	; (80078d0 <__multadd+0x88>)
 800789e:	f000 fead 	bl	80085fc <__assert_func>
 80078a2:	6922      	ldr	r2, [r4, #16]
 80078a4:	f104 010c 	add.w	r1, r4, #12
 80078a8:	3202      	adds	r2, #2
 80078aa:	0092      	lsls	r2, r2, #2
 80078ac:	300c      	adds	r0, #12
 80078ae:	f7ff ff5b 	bl	8007768 <memcpy>
 80078b2:	4621      	mov	r1, r4
 80078b4:	4638      	mov	r0, r7
 80078b6:	f7ff ffa5 	bl	8007804 <_Bfree>
 80078ba:	4644      	mov	r4, r8
 80078bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078c0:	3501      	adds	r5, #1
 80078c2:	615e      	str	r6, [r3, #20]
 80078c4:	6125      	str	r5, [r4, #16]
 80078c6:	4620      	mov	r0, r4
 80078c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078cc:	08009af8 	.word	0x08009af8
 80078d0:	08009b84 	.word	0x08009b84

080078d4 <__s2b>:
 80078d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d8:	4615      	mov	r5, r2
 80078da:	2209      	movs	r2, #9
 80078dc:	461f      	mov	r7, r3
 80078de:	3308      	adds	r3, #8
 80078e0:	460c      	mov	r4, r1
 80078e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80078e6:	4606      	mov	r6, r0
 80078e8:	2201      	movs	r2, #1
 80078ea:	2100      	movs	r1, #0
 80078ec:	429a      	cmp	r2, r3
 80078ee:	db09      	blt.n	8007904 <__s2b+0x30>
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff ff47 	bl	8007784 <_Balloc>
 80078f6:	b940      	cbnz	r0, 800790a <__s2b+0x36>
 80078f8:	4602      	mov	r2, r0
 80078fa:	21ce      	movs	r1, #206	; 0xce
 80078fc:	4b18      	ldr	r3, [pc, #96]	; (8007960 <__s2b+0x8c>)
 80078fe:	4819      	ldr	r0, [pc, #100]	; (8007964 <__s2b+0x90>)
 8007900:	f000 fe7c 	bl	80085fc <__assert_func>
 8007904:	0052      	lsls	r2, r2, #1
 8007906:	3101      	adds	r1, #1
 8007908:	e7f0      	b.n	80078ec <__s2b+0x18>
 800790a:	9b08      	ldr	r3, [sp, #32]
 800790c:	2d09      	cmp	r5, #9
 800790e:	6143      	str	r3, [r0, #20]
 8007910:	f04f 0301 	mov.w	r3, #1
 8007914:	6103      	str	r3, [r0, #16]
 8007916:	dd16      	ble.n	8007946 <__s2b+0x72>
 8007918:	f104 0909 	add.w	r9, r4, #9
 800791c:	46c8      	mov	r8, r9
 800791e:	442c      	add	r4, r5
 8007920:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007924:	4601      	mov	r1, r0
 8007926:	220a      	movs	r2, #10
 8007928:	4630      	mov	r0, r6
 800792a:	3b30      	subs	r3, #48	; 0x30
 800792c:	f7ff ff8c 	bl	8007848 <__multadd>
 8007930:	45a0      	cmp	r8, r4
 8007932:	d1f5      	bne.n	8007920 <__s2b+0x4c>
 8007934:	f1a5 0408 	sub.w	r4, r5, #8
 8007938:	444c      	add	r4, r9
 800793a:	1b2d      	subs	r5, r5, r4
 800793c:	1963      	adds	r3, r4, r5
 800793e:	42bb      	cmp	r3, r7
 8007940:	db04      	blt.n	800794c <__s2b+0x78>
 8007942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007946:	2509      	movs	r5, #9
 8007948:	340a      	adds	r4, #10
 800794a:	e7f6      	b.n	800793a <__s2b+0x66>
 800794c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007950:	4601      	mov	r1, r0
 8007952:	220a      	movs	r2, #10
 8007954:	4630      	mov	r0, r6
 8007956:	3b30      	subs	r3, #48	; 0x30
 8007958:	f7ff ff76 	bl	8007848 <__multadd>
 800795c:	e7ee      	b.n	800793c <__s2b+0x68>
 800795e:	bf00      	nop
 8007960:	08009af8 	.word	0x08009af8
 8007964:	08009b84 	.word	0x08009b84

08007968 <__hi0bits>:
 8007968:	0c02      	lsrs	r2, r0, #16
 800796a:	0412      	lsls	r2, r2, #16
 800796c:	4603      	mov	r3, r0
 800796e:	b9ca      	cbnz	r2, 80079a4 <__hi0bits+0x3c>
 8007970:	0403      	lsls	r3, r0, #16
 8007972:	2010      	movs	r0, #16
 8007974:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007978:	bf04      	itt	eq
 800797a:	021b      	lsleq	r3, r3, #8
 800797c:	3008      	addeq	r0, #8
 800797e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007982:	bf04      	itt	eq
 8007984:	011b      	lsleq	r3, r3, #4
 8007986:	3004      	addeq	r0, #4
 8007988:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800798c:	bf04      	itt	eq
 800798e:	009b      	lsleq	r3, r3, #2
 8007990:	3002      	addeq	r0, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	db05      	blt.n	80079a2 <__hi0bits+0x3a>
 8007996:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800799a:	f100 0001 	add.w	r0, r0, #1
 800799e:	bf08      	it	eq
 80079a0:	2020      	moveq	r0, #32
 80079a2:	4770      	bx	lr
 80079a4:	2000      	movs	r0, #0
 80079a6:	e7e5      	b.n	8007974 <__hi0bits+0xc>

080079a8 <__lo0bits>:
 80079a8:	6803      	ldr	r3, [r0, #0]
 80079aa:	4602      	mov	r2, r0
 80079ac:	f013 0007 	ands.w	r0, r3, #7
 80079b0:	d00b      	beq.n	80079ca <__lo0bits+0x22>
 80079b2:	07d9      	lsls	r1, r3, #31
 80079b4:	d421      	bmi.n	80079fa <__lo0bits+0x52>
 80079b6:	0798      	lsls	r0, r3, #30
 80079b8:	bf49      	itett	mi
 80079ba:	085b      	lsrmi	r3, r3, #1
 80079bc:	089b      	lsrpl	r3, r3, #2
 80079be:	2001      	movmi	r0, #1
 80079c0:	6013      	strmi	r3, [r2, #0]
 80079c2:	bf5c      	itt	pl
 80079c4:	2002      	movpl	r0, #2
 80079c6:	6013      	strpl	r3, [r2, #0]
 80079c8:	4770      	bx	lr
 80079ca:	b299      	uxth	r1, r3
 80079cc:	b909      	cbnz	r1, 80079d2 <__lo0bits+0x2a>
 80079ce:	2010      	movs	r0, #16
 80079d0:	0c1b      	lsrs	r3, r3, #16
 80079d2:	b2d9      	uxtb	r1, r3
 80079d4:	b909      	cbnz	r1, 80079da <__lo0bits+0x32>
 80079d6:	3008      	adds	r0, #8
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	0719      	lsls	r1, r3, #28
 80079dc:	bf04      	itt	eq
 80079de:	091b      	lsreq	r3, r3, #4
 80079e0:	3004      	addeq	r0, #4
 80079e2:	0799      	lsls	r1, r3, #30
 80079e4:	bf04      	itt	eq
 80079e6:	089b      	lsreq	r3, r3, #2
 80079e8:	3002      	addeq	r0, #2
 80079ea:	07d9      	lsls	r1, r3, #31
 80079ec:	d403      	bmi.n	80079f6 <__lo0bits+0x4e>
 80079ee:	085b      	lsrs	r3, r3, #1
 80079f0:	f100 0001 	add.w	r0, r0, #1
 80079f4:	d003      	beq.n	80079fe <__lo0bits+0x56>
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	4770      	bx	lr
 80079fa:	2000      	movs	r0, #0
 80079fc:	4770      	bx	lr
 80079fe:	2020      	movs	r0, #32
 8007a00:	4770      	bx	lr
	...

08007a04 <__i2b>:
 8007a04:	b510      	push	{r4, lr}
 8007a06:	460c      	mov	r4, r1
 8007a08:	2101      	movs	r1, #1
 8007a0a:	f7ff febb 	bl	8007784 <_Balloc>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	b928      	cbnz	r0, 8007a1e <__i2b+0x1a>
 8007a12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a16:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <__i2b+0x24>)
 8007a18:	4804      	ldr	r0, [pc, #16]	; (8007a2c <__i2b+0x28>)
 8007a1a:	f000 fdef 	bl	80085fc <__assert_func>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	6144      	str	r4, [r0, #20]
 8007a22:	6103      	str	r3, [r0, #16]
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	bf00      	nop
 8007a28:	08009af8 	.word	0x08009af8
 8007a2c:	08009b84 	.word	0x08009b84

08007a30 <__multiply>:
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	4691      	mov	r9, r2
 8007a36:	690a      	ldr	r2, [r1, #16]
 8007a38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	bfbe      	ittt	lt
 8007a42:	460b      	movlt	r3, r1
 8007a44:	464c      	movlt	r4, r9
 8007a46:	4699      	movlt	r9, r3
 8007a48:	6927      	ldr	r7, [r4, #16]
 8007a4a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	6861      	ldr	r1, [r4, #4]
 8007a52:	eb07 060a 	add.w	r6, r7, sl
 8007a56:	42b3      	cmp	r3, r6
 8007a58:	b085      	sub	sp, #20
 8007a5a:	bfb8      	it	lt
 8007a5c:	3101      	addlt	r1, #1
 8007a5e:	f7ff fe91 	bl	8007784 <_Balloc>
 8007a62:	b930      	cbnz	r0, 8007a72 <__multiply+0x42>
 8007a64:	4602      	mov	r2, r0
 8007a66:	f240 115d 	movw	r1, #349	; 0x15d
 8007a6a:	4b43      	ldr	r3, [pc, #268]	; (8007b78 <__multiply+0x148>)
 8007a6c:	4843      	ldr	r0, [pc, #268]	; (8007b7c <__multiply+0x14c>)
 8007a6e:	f000 fdc5 	bl	80085fc <__assert_func>
 8007a72:	f100 0514 	add.w	r5, r0, #20
 8007a76:	462b      	mov	r3, r5
 8007a78:	2200      	movs	r2, #0
 8007a7a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a7e:	4543      	cmp	r3, r8
 8007a80:	d321      	bcc.n	8007ac6 <__multiply+0x96>
 8007a82:	f104 0314 	add.w	r3, r4, #20
 8007a86:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a8a:	f109 0314 	add.w	r3, r9, #20
 8007a8e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a92:	9202      	str	r2, [sp, #8]
 8007a94:	1b3a      	subs	r2, r7, r4
 8007a96:	3a15      	subs	r2, #21
 8007a98:	f022 0203 	bic.w	r2, r2, #3
 8007a9c:	3204      	adds	r2, #4
 8007a9e:	f104 0115 	add.w	r1, r4, #21
 8007aa2:	428f      	cmp	r7, r1
 8007aa4:	bf38      	it	cc
 8007aa6:	2204      	movcc	r2, #4
 8007aa8:	9201      	str	r2, [sp, #4]
 8007aaa:	9a02      	ldr	r2, [sp, #8]
 8007aac:	9303      	str	r3, [sp, #12]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d80c      	bhi.n	8007acc <__multiply+0x9c>
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	dd03      	ble.n	8007abe <__multiply+0x8e>
 8007ab6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d059      	beq.n	8007b72 <__multiply+0x142>
 8007abe:	6106      	str	r6, [r0, #16]
 8007ac0:	b005      	add	sp, #20
 8007ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac6:	f843 2b04 	str.w	r2, [r3], #4
 8007aca:	e7d8      	b.n	8007a7e <__multiply+0x4e>
 8007acc:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ad0:	f1ba 0f00 	cmp.w	sl, #0
 8007ad4:	d023      	beq.n	8007b1e <__multiply+0xee>
 8007ad6:	46a9      	mov	r9, r5
 8007ad8:	f04f 0c00 	mov.w	ip, #0
 8007adc:	f104 0e14 	add.w	lr, r4, #20
 8007ae0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ae4:	f8d9 1000 	ldr.w	r1, [r9]
 8007ae8:	fa1f fb82 	uxth.w	fp, r2
 8007aec:	b289      	uxth	r1, r1
 8007aee:	fb0a 110b 	mla	r1, sl, fp, r1
 8007af2:	4461      	add	r1, ip
 8007af4:	f8d9 c000 	ldr.w	ip, [r9]
 8007af8:	0c12      	lsrs	r2, r2, #16
 8007afa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007afe:	fb0a c202 	mla	r2, sl, r2, ip
 8007b02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b06:	b289      	uxth	r1, r1
 8007b08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b0c:	4577      	cmp	r7, lr
 8007b0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b12:	f849 1b04 	str.w	r1, [r9], #4
 8007b16:	d8e3      	bhi.n	8007ae0 <__multiply+0xb0>
 8007b18:	9a01      	ldr	r2, [sp, #4]
 8007b1a:	f845 c002 	str.w	ip, [r5, r2]
 8007b1e:	9a03      	ldr	r2, [sp, #12]
 8007b20:	3304      	adds	r3, #4
 8007b22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b26:	f1b9 0f00 	cmp.w	r9, #0
 8007b2a:	d020      	beq.n	8007b6e <__multiply+0x13e>
 8007b2c:	46ae      	mov	lr, r5
 8007b2e:	f04f 0a00 	mov.w	sl, #0
 8007b32:	6829      	ldr	r1, [r5, #0]
 8007b34:	f104 0c14 	add.w	ip, r4, #20
 8007b38:	f8bc b000 	ldrh.w	fp, [ip]
 8007b3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b40:	b289      	uxth	r1, r1
 8007b42:	fb09 220b 	mla	r2, r9, fp, r2
 8007b46:	4492      	add	sl, r2
 8007b48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b4c:	f84e 1b04 	str.w	r1, [lr], #4
 8007b50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b54:	f8be 1000 	ldrh.w	r1, [lr]
 8007b58:	0c12      	lsrs	r2, r2, #16
 8007b5a:	fb09 1102 	mla	r1, r9, r2, r1
 8007b5e:	4567      	cmp	r7, ip
 8007b60:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007b64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b68:	d8e6      	bhi.n	8007b38 <__multiply+0x108>
 8007b6a:	9a01      	ldr	r2, [sp, #4]
 8007b6c:	50a9      	str	r1, [r5, r2]
 8007b6e:	3504      	adds	r5, #4
 8007b70:	e79b      	b.n	8007aaa <__multiply+0x7a>
 8007b72:	3e01      	subs	r6, #1
 8007b74:	e79d      	b.n	8007ab2 <__multiply+0x82>
 8007b76:	bf00      	nop
 8007b78:	08009af8 	.word	0x08009af8
 8007b7c:	08009b84 	.word	0x08009b84

08007b80 <__pow5mult>:
 8007b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b84:	4615      	mov	r5, r2
 8007b86:	f012 0203 	ands.w	r2, r2, #3
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	d007      	beq.n	8007ba0 <__pow5mult+0x20>
 8007b90:	4c25      	ldr	r4, [pc, #148]	; (8007c28 <__pow5mult+0xa8>)
 8007b92:	3a01      	subs	r2, #1
 8007b94:	2300      	movs	r3, #0
 8007b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b9a:	f7ff fe55 	bl	8007848 <__multadd>
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	10ad      	asrs	r5, r5, #2
 8007ba2:	d03d      	beq.n	8007c20 <__pow5mult+0xa0>
 8007ba4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ba6:	b97c      	cbnz	r4, 8007bc8 <__pow5mult+0x48>
 8007ba8:	2010      	movs	r0, #16
 8007baa:	f7ff fdb5 	bl	8007718 <malloc>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	6270      	str	r0, [r6, #36]	; 0x24
 8007bb2:	b928      	cbnz	r0, 8007bc0 <__pow5mult+0x40>
 8007bb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007bb8:	4b1c      	ldr	r3, [pc, #112]	; (8007c2c <__pow5mult+0xac>)
 8007bba:	481d      	ldr	r0, [pc, #116]	; (8007c30 <__pow5mult+0xb0>)
 8007bbc:	f000 fd1e 	bl	80085fc <__assert_func>
 8007bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bc4:	6004      	str	r4, [r0, #0]
 8007bc6:	60c4      	str	r4, [r0, #12]
 8007bc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bd0:	b94c      	cbnz	r4, 8007be6 <__pow5mult+0x66>
 8007bd2:	f240 2171 	movw	r1, #625	; 0x271
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff ff14 	bl	8007a04 <__i2b>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4604      	mov	r4, r0
 8007be0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007be4:	6003      	str	r3, [r0, #0]
 8007be6:	f04f 0900 	mov.w	r9, #0
 8007bea:	07eb      	lsls	r3, r5, #31
 8007bec:	d50a      	bpl.n	8007c04 <__pow5mult+0x84>
 8007bee:	4639      	mov	r1, r7
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ff1c 	bl	8007a30 <__multiply>
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff fe01 	bl	8007804 <_Bfree>
 8007c02:	4647      	mov	r7, r8
 8007c04:	106d      	asrs	r5, r5, #1
 8007c06:	d00b      	beq.n	8007c20 <__pow5mult+0xa0>
 8007c08:	6820      	ldr	r0, [r4, #0]
 8007c0a:	b938      	cbnz	r0, 8007c1c <__pow5mult+0x9c>
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff ff0d 	bl	8007a30 <__multiply>
 8007c16:	6020      	str	r0, [r4, #0]
 8007c18:	f8c0 9000 	str.w	r9, [r0]
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	e7e4      	b.n	8007bea <__pow5mult+0x6a>
 8007c20:	4638      	mov	r0, r7
 8007c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c26:	bf00      	nop
 8007c28:	08009cd0 	.word	0x08009cd0
 8007c2c:	08009a86 	.word	0x08009a86
 8007c30:	08009b84 	.word	0x08009b84

08007c34 <__lshift>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	460c      	mov	r4, r1
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	4691      	mov	r9, r2
 8007c3e:	6923      	ldr	r3, [r4, #16]
 8007c40:	6849      	ldr	r1, [r1, #4]
 8007c42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c46:	68a3      	ldr	r3, [r4, #8]
 8007c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c4c:	f108 0601 	add.w	r6, r8, #1
 8007c50:	42b3      	cmp	r3, r6
 8007c52:	db0b      	blt.n	8007c6c <__lshift+0x38>
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff fd95 	bl	8007784 <_Balloc>
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	b948      	cbnz	r0, 8007c72 <__lshift+0x3e>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c64:	4b29      	ldr	r3, [pc, #164]	; (8007d0c <__lshift+0xd8>)
 8007c66:	482a      	ldr	r0, [pc, #168]	; (8007d10 <__lshift+0xdc>)
 8007c68:	f000 fcc8 	bl	80085fc <__assert_func>
 8007c6c:	3101      	adds	r1, #1
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	e7ee      	b.n	8007c50 <__lshift+0x1c>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f100 0114 	add.w	r1, r0, #20
 8007c78:	f100 0210 	add.w	r2, r0, #16
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	4553      	cmp	r3, sl
 8007c80:	db37      	blt.n	8007cf2 <__lshift+0xbe>
 8007c82:	6920      	ldr	r0, [r4, #16]
 8007c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c88:	f104 0314 	add.w	r3, r4, #20
 8007c8c:	f019 091f 	ands.w	r9, r9, #31
 8007c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c98:	d02f      	beq.n	8007cfa <__lshift+0xc6>
 8007c9a:	468a      	mov	sl, r1
 8007c9c:	f04f 0c00 	mov.w	ip, #0
 8007ca0:	f1c9 0e20 	rsb	lr, r9, #32
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	fa02 f209 	lsl.w	r2, r2, r9
 8007caa:	ea42 020c 	orr.w	r2, r2, ip
 8007cae:	f84a 2b04 	str.w	r2, [sl], #4
 8007cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb6:	4298      	cmp	r0, r3
 8007cb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007cbc:	d8f2      	bhi.n	8007ca4 <__lshift+0x70>
 8007cbe:	1b03      	subs	r3, r0, r4
 8007cc0:	3b15      	subs	r3, #21
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	f104 0215 	add.w	r2, r4, #21
 8007ccc:	4290      	cmp	r0, r2
 8007cce:	bf38      	it	cc
 8007cd0:	2304      	movcc	r3, #4
 8007cd2:	f841 c003 	str.w	ip, [r1, r3]
 8007cd6:	f1bc 0f00 	cmp.w	ip, #0
 8007cda:	d001      	beq.n	8007ce0 <__lshift+0xac>
 8007cdc:	f108 0602 	add.w	r6, r8, #2
 8007ce0:	3e01      	subs	r6, #1
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	612e      	str	r6, [r5, #16]
 8007ce8:	f7ff fd8c 	bl	8007804 <_Bfree>
 8007cec:	4628      	mov	r0, r5
 8007cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	e7c1      	b.n	8007c7e <__lshift+0x4a>
 8007cfa:	3904      	subs	r1, #4
 8007cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d00:	4298      	cmp	r0, r3
 8007d02:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d06:	d8f9      	bhi.n	8007cfc <__lshift+0xc8>
 8007d08:	e7ea      	b.n	8007ce0 <__lshift+0xac>
 8007d0a:	bf00      	nop
 8007d0c:	08009af8 	.word	0x08009af8
 8007d10:	08009b84 	.word	0x08009b84

08007d14 <__mcmp>:
 8007d14:	4603      	mov	r3, r0
 8007d16:	690a      	ldr	r2, [r1, #16]
 8007d18:	6900      	ldr	r0, [r0, #16]
 8007d1a:	b530      	push	{r4, r5, lr}
 8007d1c:	1a80      	subs	r0, r0, r2
 8007d1e:	d10d      	bne.n	8007d3c <__mcmp+0x28>
 8007d20:	3314      	adds	r3, #20
 8007d22:	3114      	adds	r1, #20
 8007d24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d34:	4295      	cmp	r5, r2
 8007d36:	d002      	beq.n	8007d3e <__mcmp+0x2a>
 8007d38:	d304      	bcc.n	8007d44 <__mcmp+0x30>
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	bd30      	pop	{r4, r5, pc}
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	d3f4      	bcc.n	8007d2c <__mcmp+0x18>
 8007d42:	e7fb      	b.n	8007d3c <__mcmp+0x28>
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	e7f8      	b.n	8007d3c <__mcmp+0x28>
	...

08007d4c <__mdiff>:
 8007d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	460d      	mov	r5, r1
 8007d52:	4607      	mov	r7, r0
 8007d54:	4611      	mov	r1, r2
 8007d56:	4628      	mov	r0, r5
 8007d58:	4614      	mov	r4, r2
 8007d5a:	f7ff ffdb 	bl	8007d14 <__mcmp>
 8007d5e:	1e06      	subs	r6, r0, #0
 8007d60:	d111      	bne.n	8007d86 <__mdiff+0x3a>
 8007d62:	4631      	mov	r1, r6
 8007d64:	4638      	mov	r0, r7
 8007d66:	f7ff fd0d 	bl	8007784 <_Balloc>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	b928      	cbnz	r0, 8007d7a <__mdiff+0x2e>
 8007d6e:	f240 2132 	movw	r1, #562	; 0x232
 8007d72:	4b3a      	ldr	r3, [pc, #232]	; (8007e5c <__mdiff+0x110>)
 8007d74:	483a      	ldr	r0, [pc, #232]	; (8007e60 <__mdiff+0x114>)
 8007d76:	f000 fc41 	bl	80085fc <__assert_func>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d80:	4610      	mov	r0, r2
 8007d82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d86:	bfa4      	itt	ge
 8007d88:	4623      	movge	r3, r4
 8007d8a:	462c      	movge	r4, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	6861      	ldr	r1, [r4, #4]
 8007d90:	bfa6      	itte	ge
 8007d92:	461d      	movge	r5, r3
 8007d94:	2600      	movge	r6, #0
 8007d96:	2601      	movlt	r6, #1
 8007d98:	f7ff fcf4 	bl	8007784 <_Balloc>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	b918      	cbnz	r0, 8007da8 <__mdiff+0x5c>
 8007da0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007da4:	4b2d      	ldr	r3, [pc, #180]	; (8007e5c <__mdiff+0x110>)
 8007da6:	e7e5      	b.n	8007d74 <__mdiff+0x28>
 8007da8:	f102 0814 	add.w	r8, r2, #20
 8007dac:	46c2      	mov	sl, r8
 8007dae:	f04f 0c00 	mov.w	ip, #0
 8007db2:	6927      	ldr	r7, [r4, #16]
 8007db4:	60c6      	str	r6, [r0, #12]
 8007db6:	692e      	ldr	r6, [r5, #16]
 8007db8:	f104 0014 	add.w	r0, r4, #20
 8007dbc:	f105 0914 	add.w	r9, r5, #20
 8007dc0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007dc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007dc8:	3410      	adds	r4, #16
 8007dca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007dce:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dd2:	fa1f f18b 	uxth.w	r1, fp
 8007dd6:	448c      	add	ip, r1
 8007dd8:	b299      	uxth	r1, r3
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	ebac 0101 	sub.w	r1, ip, r1
 8007de0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007de4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007de8:	b289      	uxth	r1, r1
 8007dea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007dee:	454e      	cmp	r6, r9
 8007df0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007df4:	f84a 3b04 	str.w	r3, [sl], #4
 8007df8:	d8e7      	bhi.n	8007dca <__mdiff+0x7e>
 8007dfa:	1b73      	subs	r3, r6, r5
 8007dfc:	3b15      	subs	r3, #21
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	3515      	adds	r5, #21
 8007e04:	3304      	adds	r3, #4
 8007e06:	42ae      	cmp	r6, r5
 8007e08:	bf38      	it	cc
 8007e0a:	2304      	movcc	r3, #4
 8007e0c:	4418      	add	r0, r3
 8007e0e:	4443      	add	r3, r8
 8007e10:	461e      	mov	r6, r3
 8007e12:	4605      	mov	r5, r0
 8007e14:	4575      	cmp	r5, lr
 8007e16:	d30e      	bcc.n	8007e36 <__mdiff+0xea>
 8007e18:	f10e 0103 	add.w	r1, lr, #3
 8007e1c:	1a09      	subs	r1, r1, r0
 8007e1e:	f021 0103 	bic.w	r1, r1, #3
 8007e22:	3803      	subs	r0, #3
 8007e24:	4586      	cmp	lr, r0
 8007e26:	bf38      	it	cc
 8007e28:	2100      	movcc	r1, #0
 8007e2a:	4419      	add	r1, r3
 8007e2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007e30:	b18b      	cbz	r3, 8007e56 <__mdiff+0x10a>
 8007e32:	6117      	str	r7, [r2, #16]
 8007e34:	e7a4      	b.n	8007d80 <__mdiff+0x34>
 8007e36:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e3a:	fa1f f188 	uxth.w	r1, r8
 8007e3e:	4461      	add	r1, ip
 8007e40:	140c      	asrs	r4, r1, #16
 8007e42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e46:	b289      	uxth	r1, r1
 8007e48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e4c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007e50:	f846 1b04 	str.w	r1, [r6], #4
 8007e54:	e7de      	b.n	8007e14 <__mdiff+0xc8>
 8007e56:	3f01      	subs	r7, #1
 8007e58:	e7e8      	b.n	8007e2c <__mdiff+0xe0>
 8007e5a:	bf00      	nop
 8007e5c:	08009af8 	.word	0x08009af8
 8007e60:	08009b84 	.word	0x08009b84

08007e64 <__ulp>:
 8007e64:	4b11      	ldr	r3, [pc, #68]	; (8007eac <__ulp+0x48>)
 8007e66:	400b      	ands	r3, r1
 8007e68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd02      	ble.n	8007e76 <__ulp+0x12>
 8007e70:	2000      	movs	r0, #0
 8007e72:	4619      	mov	r1, r3
 8007e74:	4770      	bx	lr
 8007e76:	425b      	negs	r3, r3
 8007e78:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007e7c:	f04f 0000 	mov.w	r0, #0
 8007e80:	f04f 0100 	mov.w	r1, #0
 8007e84:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e88:	da04      	bge.n	8007e94 <__ulp+0x30>
 8007e8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e8e:	fa43 f102 	asr.w	r1, r3, r2
 8007e92:	4770      	bx	lr
 8007e94:	f1a2 0314 	sub.w	r3, r2, #20
 8007e98:	2b1e      	cmp	r3, #30
 8007e9a:	bfd6      	itet	le
 8007e9c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007ea0:	2301      	movgt	r3, #1
 8007ea2:	fa22 f303 	lsrle.w	r3, r2, r3
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	7ff00000 	.word	0x7ff00000

08007eb0 <__b2d>:
 8007eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb4:	6907      	ldr	r7, [r0, #16]
 8007eb6:	f100 0914 	add.w	r9, r0, #20
 8007eba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007ebe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007ec2:	f1a7 0804 	sub.w	r8, r7, #4
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff fd4e 	bl	8007968 <__hi0bits>
 8007ecc:	f1c0 0320 	rsb	r3, r0, #32
 8007ed0:	280a      	cmp	r0, #10
 8007ed2:	600b      	str	r3, [r1, #0]
 8007ed4:	491f      	ldr	r1, [pc, #124]	; (8007f54 <__b2d+0xa4>)
 8007ed6:	dc17      	bgt.n	8007f08 <__b2d+0x58>
 8007ed8:	45c1      	cmp	r9, r8
 8007eda:	bf28      	it	cs
 8007edc:	2200      	movcs	r2, #0
 8007ede:	f1c0 0c0b 	rsb	ip, r0, #11
 8007ee2:	fa26 f30c 	lsr.w	r3, r6, ip
 8007ee6:	bf38      	it	cc
 8007ee8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007eec:	ea43 0501 	orr.w	r5, r3, r1
 8007ef0:	f100 0315 	add.w	r3, r0, #21
 8007ef4:	fa06 f303 	lsl.w	r3, r6, r3
 8007ef8:	fa22 f20c 	lsr.w	r2, r2, ip
 8007efc:	ea43 0402 	orr.w	r4, r3, r2
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f08:	45c1      	cmp	r9, r8
 8007f0a:	bf2e      	itee	cs
 8007f0c:	2200      	movcs	r2, #0
 8007f0e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f12:	f1a7 0808 	subcc.w	r8, r7, #8
 8007f16:	f1b0 030b 	subs.w	r3, r0, #11
 8007f1a:	d016      	beq.n	8007f4a <__b2d+0x9a>
 8007f1c:	f1c3 0720 	rsb	r7, r3, #32
 8007f20:	fa22 f107 	lsr.w	r1, r2, r7
 8007f24:	45c8      	cmp	r8, r9
 8007f26:	fa06 f603 	lsl.w	r6, r6, r3
 8007f2a:	ea46 0601 	orr.w	r6, r6, r1
 8007f2e:	bf94      	ite	ls
 8007f30:	2100      	movls	r1, #0
 8007f32:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007f36:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007f3a:	fa02 f003 	lsl.w	r0, r2, r3
 8007f3e:	40f9      	lsrs	r1, r7
 8007f40:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f44:	ea40 0401 	orr.w	r4, r0, r1
 8007f48:	e7da      	b.n	8007f00 <__b2d+0x50>
 8007f4a:	4614      	mov	r4, r2
 8007f4c:	ea46 0501 	orr.w	r5, r6, r1
 8007f50:	e7d6      	b.n	8007f00 <__b2d+0x50>
 8007f52:	bf00      	nop
 8007f54:	3ff00000 	.word	0x3ff00000

08007f58 <__d2b>:
 8007f58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007f62:	4690      	mov	r8, r2
 8007f64:	461d      	mov	r5, r3
 8007f66:	f7ff fc0d 	bl	8007784 <_Balloc>
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	b930      	cbnz	r0, 8007f7c <__d2b+0x24>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	f240 310a 	movw	r1, #778	; 0x30a
 8007f74:	4b24      	ldr	r3, [pc, #144]	; (8008008 <__d2b+0xb0>)
 8007f76:	4825      	ldr	r0, [pc, #148]	; (800800c <__d2b+0xb4>)
 8007f78:	f000 fb40 	bl	80085fc <__assert_func>
 8007f7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007f80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007f84:	bb2d      	cbnz	r5, 8007fd2 <__d2b+0x7a>
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	f1b8 0300 	subs.w	r3, r8, #0
 8007f8c:	d026      	beq.n	8007fdc <__d2b+0x84>
 8007f8e:	4668      	mov	r0, sp
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	f7ff fd09 	bl	80079a8 <__lo0bits>
 8007f96:	9900      	ldr	r1, [sp, #0]
 8007f98:	b1f0      	cbz	r0, 8007fd8 <__d2b+0x80>
 8007f9a:	9a01      	ldr	r2, [sp, #4]
 8007f9c:	f1c0 0320 	rsb	r3, r0, #32
 8007fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	40c2      	lsrs	r2, r0
 8007fa8:	6163      	str	r3, [r4, #20]
 8007faa:	9201      	str	r2, [sp, #4]
 8007fac:	9b01      	ldr	r3, [sp, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bf14      	ite	ne
 8007fb2:	2102      	movne	r1, #2
 8007fb4:	2101      	moveq	r1, #1
 8007fb6:	61a3      	str	r3, [r4, #24]
 8007fb8:	6121      	str	r1, [r4, #16]
 8007fba:	b1c5      	cbz	r5, 8007fee <__d2b+0x96>
 8007fbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007fc0:	4405      	add	r5, r0
 8007fc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fc6:	603d      	str	r5, [r7, #0]
 8007fc8:	6030      	str	r0, [r6, #0]
 8007fca:	4620      	mov	r0, r4
 8007fcc:	b002      	add	sp, #8
 8007fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fd6:	e7d6      	b.n	8007f86 <__d2b+0x2e>
 8007fd8:	6161      	str	r1, [r4, #20]
 8007fda:	e7e7      	b.n	8007fac <__d2b+0x54>
 8007fdc:	a801      	add	r0, sp, #4
 8007fde:	f7ff fce3 	bl	80079a8 <__lo0bits>
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	6121      	str	r1, [r4, #16]
 8007fe8:	6163      	str	r3, [r4, #20]
 8007fea:	3020      	adds	r0, #32
 8007fec:	e7e5      	b.n	8007fba <__d2b+0x62>
 8007fee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007ff2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ff6:	6038      	str	r0, [r7, #0]
 8007ff8:	6918      	ldr	r0, [r3, #16]
 8007ffa:	f7ff fcb5 	bl	8007968 <__hi0bits>
 8007ffe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008002:	6031      	str	r1, [r6, #0]
 8008004:	e7e1      	b.n	8007fca <__d2b+0x72>
 8008006:	bf00      	nop
 8008008:	08009af8 	.word	0x08009af8
 800800c:	08009b84 	.word	0x08009b84

08008010 <__ratio>:
 8008010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	4688      	mov	r8, r1
 8008016:	4669      	mov	r1, sp
 8008018:	4681      	mov	r9, r0
 800801a:	f7ff ff49 	bl	8007eb0 <__b2d>
 800801e:	460f      	mov	r7, r1
 8008020:	4604      	mov	r4, r0
 8008022:	460d      	mov	r5, r1
 8008024:	4640      	mov	r0, r8
 8008026:	a901      	add	r1, sp, #4
 8008028:	f7ff ff42 	bl	8007eb0 <__b2d>
 800802c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008030:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008034:	468b      	mov	fp, r1
 8008036:	eba3 0c02 	sub.w	ip, r3, r2
 800803a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800803e:	1a9b      	subs	r3, r3, r2
 8008040:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008044:	2b00      	cmp	r3, #0
 8008046:	bfd5      	itete	le
 8008048:	460a      	movle	r2, r1
 800804a:	462a      	movgt	r2, r5
 800804c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008050:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008054:	bfd8      	it	le
 8008056:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800805a:	465b      	mov	r3, fp
 800805c:	4602      	mov	r2, r0
 800805e:	4639      	mov	r1, r7
 8008060:	4620      	mov	r0, r4
 8008062:	f7f8 fbcf 	bl	8000804 <__aeabi_ddiv>
 8008066:	b003      	add	sp, #12
 8008068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800806c <__copybits>:
 800806c:	3901      	subs	r1, #1
 800806e:	b570      	push	{r4, r5, r6, lr}
 8008070:	1149      	asrs	r1, r1, #5
 8008072:	6914      	ldr	r4, [r2, #16]
 8008074:	3101      	adds	r1, #1
 8008076:	f102 0314 	add.w	r3, r2, #20
 800807a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800807e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008082:	1f05      	subs	r5, r0, #4
 8008084:	42a3      	cmp	r3, r4
 8008086:	d30c      	bcc.n	80080a2 <__copybits+0x36>
 8008088:	1aa3      	subs	r3, r4, r2
 800808a:	3b11      	subs	r3, #17
 800808c:	f023 0303 	bic.w	r3, r3, #3
 8008090:	3211      	adds	r2, #17
 8008092:	42a2      	cmp	r2, r4
 8008094:	bf88      	it	hi
 8008096:	2300      	movhi	r3, #0
 8008098:	4418      	add	r0, r3
 800809a:	2300      	movs	r3, #0
 800809c:	4288      	cmp	r0, r1
 800809e:	d305      	bcc.n	80080ac <__copybits+0x40>
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80080a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80080aa:	e7eb      	b.n	8008084 <__copybits+0x18>
 80080ac:	f840 3b04 	str.w	r3, [r0], #4
 80080b0:	e7f4      	b.n	800809c <__copybits+0x30>

080080b2 <__any_on>:
 80080b2:	f100 0214 	add.w	r2, r0, #20
 80080b6:	6900      	ldr	r0, [r0, #16]
 80080b8:	114b      	asrs	r3, r1, #5
 80080ba:	4298      	cmp	r0, r3
 80080bc:	b510      	push	{r4, lr}
 80080be:	db11      	blt.n	80080e4 <__any_on+0x32>
 80080c0:	dd0a      	ble.n	80080d8 <__any_on+0x26>
 80080c2:	f011 011f 	ands.w	r1, r1, #31
 80080c6:	d007      	beq.n	80080d8 <__any_on+0x26>
 80080c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080cc:	fa24 f001 	lsr.w	r0, r4, r1
 80080d0:	fa00 f101 	lsl.w	r1, r0, r1
 80080d4:	428c      	cmp	r4, r1
 80080d6:	d10b      	bne.n	80080f0 <__any_on+0x3e>
 80080d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080dc:	4293      	cmp	r3, r2
 80080de:	d803      	bhi.n	80080e8 <__any_on+0x36>
 80080e0:	2000      	movs	r0, #0
 80080e2:	bd10      	pop	{r4, pc}
 80080e4:	4603      	mov	r3, r0
 80080e6:	e7f7      	b.n	80080d8 <__any_on+0x26>
 80080e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d0f5      	beq.n	80080dc <__any_on+0x2a>
 80080f0:	2001      	movs	r0, #1
 80080f2:	e7f6      	b.n	80080e2 <__any_on+0x30>

080080f4 <_calloc_r>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	fba1 5402 	umull	r5, r4, r1, r2
 80080fa:	b934      	cbnz	r4, 800810a <_calloc_r+0x16>
 80080fc:	4629      	mov	r1, r5
 80080fe:	f000 f875 	bl	80081ec <_malloc_r>
 8008102:	4606      	mov	r6, r0
 8008104:	b928      	cbnz	r0, 8008112 <_calloc_r+0x1e>
 8008106:	4630      	mov	r0, r6
 8008108:	bd70      	pop	{r4, r5, r6, pc}
 800810a:	220c      	movs	r2, #12
 800810c:	2600      	movs	r6, #0
 800810e:	6002      	str	r2, [r0, #0]
 8008110:	e7f9      	b.n	8008106 <_calloc_r+0x12>
 8008112:	462a      	mov	r2, r5
 8008114:	4621      	mov	r1, r4
 8008116:	f7fc fbf1 	bl	80048fc <memset>
 800811a:	e7f4      	b.n	8008106 <_calloc_r+0x12>

0800811c <_free_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4605      	mov	r5, r0
 8008120:	2900      	cmp	r1, #0
 8008122:	d040      	beq.n	80081a6 <_free_r+0x8a>
 8008124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008128:	1f0c      	subs	r4, r1, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	bfb8      	it	lt
 800812e:	18e4      	addlt	r4, r4, r3
 8008130:	f000 faae 	bl	8008690 <__malloc_lock>
 8008134:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <_free_r+0x8c>)
 8008136:	6813      	ldr	r3, [r2, #0]
 8008138:	b933      	cbnz	r3, 8008148 <_free_r+0x2c>
 800813a:	6063      	str	r3, [r4, #4]
 800813c:	6014      	str	r4, [r2, #0]
 800813e:	4628      	mov	r0, r5
 8008140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008144:	f000 baaa 	b.w	800869c <__malloc_unlock>
 8008148:	42a3      	cmp	r3, r4
 800814a:	d908      	bls.n	800815e <_free_r+0x42>
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	1821      	adds	r1, r4, r0
 8008150:	428b      	cmp	r3, r1
 8008152:	bf01      	itttt	eq
 8008154:	6819      	ldreq	r1, [r3, #0]
 8008156:	685b      	ldreq	r3, [r3, #4]
 8008158:	1809      	addeq	r1, r1, r0
 800815a:	6021      	streq	r1, [r4, #0]
 800815c:	e7ed      	b.n	800813a <_free_r+0x1e>
 800815e:	461a      	mov	r2, r3
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	b10b      	cbz	r3, 8008168 <_free_r+0x4c>
 8008164:	42a3      	cmp	r3, r4
 8008166:	d9fa      	bls.n	800815e <_free_r+0x42>
 8008168:	6811      	ldr	r1, [r2, #0]
 800816a:	1850      	adds	r0, r2, r1
 800816c:	42a0      	cmp	r0, r4
 800816e:	d10b      	bne.n	8008188 <_free_r+0x6c>
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	4401      	add	r1, r0
 8008174:	1850      	adds	r0, r2, r1
 8008176:	4283      	cmp	r3, r0
 8008178:	6011      	str	r1, [r2, #0]
 800817a:	d1e0      	bne.n	800813e <_free_r+0x22>
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	4401      	add	r1, r0
 8008182:	6011      	str	r1, [r2, #0]
 8008184:	6053      	str	r3, [r2, #4]
 8008186:	e7da      	b.n	800813e <_free_r+0x22>
 8008188:	d902      	bls.n	8008190 <_free_r+0x74>
 800818a:	230c      	movs	r3, #12
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	e7d6      	b.n	800813e <_free_r+0x22>
 8008190:	6820      	ldr	r0, [r4, #0]
 8008192:	1821      	adds	r1, r4, r0
 8008194:	428b      	cmp	r3, r1
 8008196:	bf01      	itttt	eq
 8008198:	6819      	ldreq	r1, [r3, #0]
 800819a:	685b      	ldreq	r3, [r3, #4]
 800819c:	1809      	addeq	r1, r1, r0
 800819e:	6021      	streq	r1, [r4, #0]
 80081a0:	6063      	str	r3, [r4, #4]
 80081a2:	6054      	str	r4, [r2, #4]
 80081a4:	e7cb      	b.n	800813e <_free_r+0x22>
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200002a8 	.word	0x200002a8

080081ac <sbrk_aligned>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4e0e      	ldr	r6, [pc, #56]	; (80081e8 <sbrk_aligned+0x3c>)
 80081b0:	460c      	mov	r4, r1
 80081b2:	6831      	ldr	r1, [r6, #0]
 80081b4:	4605      	mov	r5, r0
 80081b6:	b911      	cbnz	r1, 80081be <sbrk_aligned+0x12>
 80081b8:	f000 f9ee 	bl	8008598 <_sbrk_r>
 80081bc:	6030      	str	r0, [r6, #0]
 80081be:	4621      	mov	r1, r4
 80081c0:	4628      	mov	r0, r5
 80081c2:	f000 f9e9 	bl	8008598 <_sbrk_r>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	d00a      	beq.n	80081e0 <sbrk_aligned+0x34>
 80081ca:	1cc4      	adds	r4, r0, #3
 80081cc:	f024 0403 	bic.w	r4, r4, #3
 80081d0:	42a0      	cmp	r0, r4
 80081d2:	d007      	beq.n	80081e4 <sbrk_aligned+0x38>
 80081d4:	1a21      	subs	r1, r4, r0
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 f9de 	bl	8008598 <_sbrk_r>
 80081dc:	3001      	adds	r0, #1
 80081de:	d101      	bne.n	80081e4 <sbrk_aligned+0x38>
 80081e0:	f04f 34ff 	mov.w	r4, #4294967295
 80081e4:	4620      	mov	r0, r4
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	200002ac 	.word	0x200002ac

080081ec <_malloc_r>:
 80081ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f0:	1ccd      	adds	r5, r1, #3
 80081f2:	f025 0503 	bic.w	r5, r5, #3
 80081f6:	3508      	adds	r5, #8
 80081f8:	2d0c      	cmp	r5, #12
 80081fa:	bf38      	it	cc
 80081fc:	250c      	movcc	r5, #12
 80081fe:	2d00      	cmp	r5, #0
 8008200:	4607      	mov	r7, r0
 8008202:	db01      	blt.n	8008208 <_malloc_r+0x1c>
 8008204:	42a9      	cmp	r1, r5
 8008206:	d905      	bls.n	8008214 <_malloc_r+0x28>
 8008208:	230c      	movs	r3, #12
 800820a:	2600      	movs	r6, #0
 800820c:	603b      	str	r3, [r7, #0]
 800820e:	4630      	mov	r0, r6
 8008210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008214:	4e2e      	ldr	r6, [pc, #184]	; (80082d0 <_malloc_r+0xe4>)
 8008216:	f000 fa3b 	bl	8008690 <__malloc_lock>
 800821a:	6833      	ldr	r3, [r6, #0]
 800821c:	461c      	mov	r4, r3
 800821e:	bb34      	cbnz	r4, 800826e <_malloc_r+0x82>
 8008220:	4629      	mov	r1, r5
 8008222:	4638      	mov	r0, r7
 8008224:	f7ff ffc2 	bl	80081ac <sbrk_aligned>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	4604      	mov	r4, r0
 800822c:	d14d      	bne.n	80082ca <_malloc_r+0xde>
 800822e:	6834      	ldr	r4, [r6, #0]
 8008230:	4626      	mov	r6, r4
 8008232:	2e00      	cmp	r6, #0
 8008234:	d140      	bne.n	80082b8 <_malloc_r+0xcc>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	4631      	mov	r1, r6
 800823a:	4638      	mov	r0, r7
 800823c:	eb04 0803 	add.w	r8, r4, r3
 8008240:	f000 f9aa 	bl	8008598 <_sbrk_r>
 8008244:	4580      	cmp	r8, r0
 8008246:	d13a      	bne.n	80082be <_malloc_r+0xd2>
 8008248:	6821      	ldr	r1, [r4, #0]
 800824a:	3503      	adds	r5, #3
 800824c:	1a6d      	subs	r5, r5, r1
 800824e:	f025 0503 	bic.w	r5, r5, #3
 8008252:	3508      	adds	r5, #8
 8008254:	2d0c      	cmp	r5, #12
 8008256:	bf38      	it	cc
 8008258:	250c      	movcc	r5, #12
 800825a:	4638      	mov	r0, r7
 800825c:	4629      	mov	r1, r5
 800825e:	f7ff ffa5 	bl	80081ac <sbrk_aligned>
 8008262:	3001      	adds	r0, #1
 8008264:	d02b      	beq.n	80082be <_malloc_r+0xd2>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	442b      	add	r3, r5
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	e00e      	b.n	800828c <_malloc_r+0xa0>
 800826e:	6822      	ldr	r2, [r4, #0]
 8008270:	1b52      	subs	r2, r2, r5
 8008272:	d41e      	bmi.n	80082b2 <_malloc_r+0xc6>
 8008274:	2a0b      	cmp	r2, #11
 8008276:	d916      	bls.n	80082a6 <_malloc_r+0xba>
 8008278:	1961      	adds	r1, r4, r5
 800827a:	42a3      	cmp	r3, r4
 800827c:	6025      	str	r5, [r4, #0]
 800827e:	bf18      	it	ne
 8008280:	6059      	strne	r1, [r3, #4]
 8008282:	6863      	ldr	r3, [r4, #4]
 8008284:	bf08      	it	eq
 8008286:	6031      	streq	r1, [r6, #0]
 8008288:	5162      	str	r2, [r4, r5]
 800828a:	604b      	str	r3, [r1, #4]
 800828c:	4638      	mov	r0, r7
 800828e:	f104 060b 	add.w	r6, r4, #11
 8008292:	f000 fa03 	bl	800869c <__malloc_unlock>
 8008296:	f026 0607 	bic.w	r6, r6, #7
 800829a:	1d23      	adds	r3, r4, #4
 800829c:	1af2      	subs	r2, r6, r3
 800829e:	d0b6      	beq.n	800820e <_malloc_r+0x22>
 80082a0:	1b9b      	subs	r3, r3, r6
 80082a2:	50a3      	str	r3, [r4, r2]
 80082a4:	e7b3      	b.n	800820e <_malloc_r+0x22>
 80082a6:	6862      	ldr	r2, [r4, #4]
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	bf0c      	ite	eq
 80082ac:	6032      	streq	r2, [r6, #0]
 80082ae:	605a      	strne	r2, [r3, #4]
 80082b0:	e7ec      	b.n	800828c <_malloc_r+0xa0>
 80082b2:	4623      	mov	r3, r4
 80082b4:	6864      	ldr	r4, [r4, #4]
 80082b6:	e7b2      	b.n	800821e <_malloc_r+0x32>
 80082b8:	4634      	mov	r4, r6
 80082ba:	6876      	ldr	r6, [r6, #4]
 80082bc:	e7b9      	b.n	8008232 <_malloc_r+0x46>
 80082be:	230c      	movs	r3, #12
 80082c0:	4638      	mov	r0, r7
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	f000 f9ea 	bl	800869c <__malloc_unlock>
 80082c8:	e7a1      	b.n	800820e <_malloc_r+0x22>
 80082ca:	6025      	str	r5, [r4, #0]
 80082cc:	e7de      	b.n	800828c <_malloc_r+0xa0>
 80082ce:	bf00      	nop
 80082d0:	200002a8 	.word	0x200002a8

080082d4 <__ssputs_r>:
 80082d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d8:	688e      	ldr	r6, [r1, #8]
 80082da:	4682      	mov	sl, r0
 80082dc:	429e      	cmp	r6, r3
 80082de:	460c      	mov	r4, r1
 80082e0:	4690      	mov	r8, r2
 80082e2:	461f      	mov	r7, r3
 80082e4:	d838      	bhi.n	8008358 <__ssputs_r+0x84>
 80082e6:	898a      	ldrh	r2, [r1, #12]
 80082e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082ec:	d032      	beq.n	8008354 <__ssputs_r+0x80>
 80082ee:	6825      	ldr	r5, [r4, #0]
 80082f0:	6909      	ldr	r1, [r1, #16]
 80082f2:	3301      	adds	r3, #1
 80082f4:	eba5 0901 	sub.w	r9, r5, r1
 80082f8:	6965      	ldr	r5, [r4, #20]
 80082fa:	444b      	add	r3, r9
 80082fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008304:	106d      	asrs	r5, r5, #1
 8008306:	429d      	cmp	r5, r3
 8008308:	bf38      	it	cc
 800830a:	461d      	movcc	r5, r3
 800830c:	0553      	lsls	r3, r2, #21
 800830e:	d531      	bpl.n	8008374 <__ssputs_r+0xa0>
 8008310:	4629      	mov	r1, r5
 8008312:	f7ff ff6b 	bl	80081ec <_malloc_r>
 8008316:	4606      	mov	r6, r0
 8008318:	b950      	cbnz	r0, 8008330 <__ssputs_r+0x5c>
 800831a:	230c      	movs	r3, #12
 800831c:	f04f 30ff 	mov.w	r0, #4294967295
 8008320:	f8ca 3000 	str.w	r3, [sl]
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800832a:	81a3      	strh	r3, [r4, #12]
 800832c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008330:	464a      	mov	r2, r9
 8008332:	6921      	ldr	r1, [r4, #16]
 8008334:	f7ff fa18 	bl	8007768 <memcpy>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800833e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	6126      	str	r6, [r4, #16]
 8008346:	444e      	add	r6, r9
 8008348:	6026      	str	r6, [r4, #0]
 800834a:	463e      	mov	r6, r7
 800834c:	6165      	str	r5, [r4, #20]
 800834e:	eba5 0509 	sub.w	r5, r5, r9
 8008352:	60a5      	str	r5, [r4, #8]
 8008354:	42be      	cmp	r6, r7
 8008356:	d900      	bls.n	800835a <__ssputs_r+0x86>
 8008358:	463e      	mov	r6, r7
 800835a:	4632      	mov	r2, r6
 800835c:	4641      	mov	r1, r8
 800835e:	6820      	ldr	r0, [r4, #0]
 8008360:	f000 f97c 	bl	800865c <memmove>
 8008364:	68a3      	ldr	r3, [r4, #8]
 8008366:	2000      	movs	r0, #0
 8008368:	1b9b      	subs	r3, r3, r6
 800836a:	60a3      	str	r3, [r4, #8]
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	4433      	add	r3, r6
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	e7db      	b.n	800832c <__ssputs_r+0x58>
 8008374:	462a      	mov	r2, r5
 8008376:	f000 f997 	bl	80086a8 <_realloc_r>
 800837a:	4606      	mov	r6, r0
 800837c:	2800      	cmp	r0, #0
 800837e:	d1e1      	bne.n	8008344 <__ssputs_r+0x70>
 8008380:	4650      	mov	r0, sl
 8008382:	6921      	ldr	r1, [r4, #16]
 8008384:	f7ff feca 	bl	800811c <_free_r>
 8008388:	e7c7      	b.n	800831a <__ssputs_r+0x46>
	...

0800838c <_svfiprintf_r>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	4698      	mov	r8, r3
 8008392:	898b      	ldrh	r3, [r1, #12]
 8008394:	4607      	mov	r7, r0
 8008396:	061b      	lsls	r3, r3, #24
 8008398:	460d      	mov	r5, r1
 800839a:	4614      	mov	r4, r2
 800839c:	b09d      	sub	sp, #116	; 0x74
 800839e:	d50e      	bpl.n	80083be <_svfiprintf_r+0x32>
 80083a0:	690b      	ldr	r3, [r1, #16]
 80083a2:	b963      	cbnz	r3, 80083be <_svfiprintf_r+0x32>
 80083a4:	2140      	movs	r1, #64	; 0x40
 80083a6:	f7ff ff21 	bl	80081ec <_malloc_r>
 80083aa:	6028      	str	r0, [r5, #0]
 80083ac:	6128      	str	r0, [r5, #16]
 80083ae:	b920      	cbnz	r0, 80083ba <_svfiprintf_r+0x2e>
 80083b0:	230c      	movs	r3, #12
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	f04f 30ff 	mov.w	r0, #4294967295
 80083b8:	e0d1      	b.n	800855e <_svfiprintf_r+0x1d2>
 80083ba:	2340      	movs	r3, #64	; 0x40
 80083bc:	616b      	str	r3, [r5, #20]
 80083be:	2300      	movs	r3, #0
 80083c0:	9309      	str	r3, [sp, #36]	; 0x24
 80083c2:	2320      	movs	r3, #32
 80083c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083c8:	2330      	movs	r3, #48	; 0x30
 80083ca:	f04f 0901 	mov.w	r9, #1
 80083ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80083d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008578 <_svfiprintf_r+0x1ec>
 80083d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083da:	4623      	mov	r3, r4
 80083dc:	469a      	mov	sl, r3
 80083de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e2:	b10a      	cbz	r2, 80083e8 <_svfiprintf_r+0x5c>
 80083e4:	2a25      	cmp	r2, #37	; 0x25
 80083e6:	d1f9      	bne.n	80083dc <_svfiprintf_r+0x50>
 80083e8:	ebba 0b04 	subs.w	fp, sl, r4
 80083ec:	d00b      	beq.n	8008406 <_svfiprintf_r+0x7a>
 80083ee:	465b      	mov	r3, fp
 80083f0:	4622      	mov	r2, r4
 80083f2:	4629      	mov	r1, r5
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff ff6d 	bl	80082d4 <__ssputs_r>
 80083fa:	3001      	adds	r0, #1
 80083fc:	f000 80aa 	beq.w	8008554 <_svfiprintf_r+0x1c8>
 8008400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008402:	445a      	add	r2, fp
 8008404:	9209      	str	r2, [sp, #36]	; 0x24
 8008406:	f89a 3000 	ldrb.w	r3, [sl]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 80a2 	beq.w	8008554 <_svfiprintf_r+0x1c8>
 8008410:	2300      	movs	r3, #0
 8008412:	f04f 32ff 	mov.w	r2, #4294967295
 8008416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800841a:	f10a 0a01 	add.w	sl, sl, #1
 800841e:	9304      	str	r3, [sp, #16]
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008426:	931a      	str	r3, [sp, #104]	; 0x68
 8008428:	4654      	mov	r4, sl
 800842a:	2205      	movs	r2, #5
 800842c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008430:	4851      	ldr	r0, [pc, #324]	; (8008578 <_svfiprintf_r+0x1ec>)
 8008432:	f7ff f98b 	bl	800774c <memchr>
 8008436:	9a04      	ldr	r2, [sp, #16]
 8008438:	b9d8      	cbnz	r0, 8008472 <_svfiprintf_r+0xe6>
 800843a:	06d0      	lsls	r0, r2, #27
 800843c:	bf44      	itt	mi
 800843e:	2320      	movmi	r3, #32
 8008440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008444:	0711      	lsls	r1, r2, #28
 8008446:	bf44      	itt	mi
 8008448:	232b      	movmi	r3, #43	; 0x2b
 800844a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800844e:	f89a 3000 	ldrb.w	r3, [sl]
 8008452:	2b2a      	cmp	r3, #42	; 0x2a
 8008454:	d015      	beq.n	8008482 <_svfiprintf_r+0xf6>
 8008456:	4654      	mov	r4, sl
 8008458:	2000      	movs	r0, #0
 800845a:	f04f 0c0a 	mov.w	ip, #10
 800845e:	9a07      	ldr	r2, [sp, #28]
 8008460:	4621      	mov	r1, r4
 8008462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008466:	3b30      	subs	r3, #48	; 0x30
 8008468:	2b09      	cmp	r3, #9
 800846a:	d94e      	bls.n	800850a <_svfiprintf_r+0x17e>
 800846c:	b1b0      	cbz	r0, 800849c <_svfiprintf_r+0x110>
 800846e:	9207      	str	r2, [sp, #28]
 8008470:	e014      	b.n	800849c <_svfiprintf_r+0x110>
 8008472:	eba0 0308 	sub.w	r3, r0, r8
 8008476:	fa09 f303 	lsl.w	r3, r9, r3
 800847a:	4313      	orrs	r3, r2
 800847c:	46a2      	mov	sl, r4
 800847e:	9304      	str	r3, [sp, #16]
 8008480:	e7d2      	b.n	8008428 <_svfiprintf_r+0x9c>
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	1d19      	adds	r1, r3, #4
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	9103      	str	r1, [sp, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	bfbb      	ittet	lt
 800848e:	425b      	neglt	r3, r3
 8008490:	f042 0202 	orrlt.w	r2, r2, #2
 8008494:	9307      	strge	r3, [sp, #28]
 8008496:	9307      	strlt	r3, [sp, #28]
 8008498:	bfb8      	it	lt
 800849a:	9204      	strlt	r2, [sp, #16]
 800849c:	7823      	ldrb	r3, [r4, #0]
 800849e:	2b2e      	cmp	r3, #46	; 0x2e
 80084a0:	d10c      	bne.n	80084bc <_svfiprintf_r+0x130>
 80084a2:	7863      	ldrb	r3, [r4, #1]
 80084a4:	2b2a      	cmp	r3, #42	; 0x2a
 80084a6:	d135      	bne.n	8008514 <_svfiprintf_r+0x188>
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	3402      	adds	r4, #2
 80084ac:	1d1a      	adds	r2, r3, #4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	9203      	str	r2, [sp, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	bfb8      	it	lt
 80084b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800857c <_svfiprintf_r+0x1f0>
 80084c0:	2203      	movs	r2, #3
 80084c2:	4650      	mov	r0, sl
 80084c4:	7821      	ldrb	r1, [r4, #0]
 80084c6:	f7ff f941 	bl	800774c <memchr>
 80084ca:	b140      	cbz	r0, 80084de <_svfiprintf_r+0x152>
 80084cc:	2340      	movs	r3, #64	; 0x40
 80084ce:	eba0 000a 	sub.w	r0, r0, sl
 80084d2:	fa03 f000 	lsl.w	r0, r3, r0
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	3401      	adds	r4, #1
 80084da:	4303      	orrs	r3, r0
 80084dc:	9304      	str	r3, [sp, #16]
 80084de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e2:	2206      	movs	r2, #6
 80084e4:	4826      	ldr	r0, [pc, #152]	; (8008580 <_svfiprintf_r+0x1f4>)
 80084e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ea:	f7ff f92f 	bl	800774c <memchr>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d038      	beq.n	8008564 <_svfiprintf_r+0x1d8>
 80084f2:	4b24      	ldr	r3, [pc, #144]	; (8008584 <_svfiprintf_r+0x1f8>)
 80084f4:	bb1b      	cbnz	r3, 800853e <_svfiprintf_r+0x1b2>
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	3307      	adds	r3, #7
 80084fa:	f023 0307 	bic.w	r3, r3, #7
 80084fe:	3308      	adds	r3, #8
 8008500:	9303      	str	r3, [sp, #12]
 8008502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008504:	4433      	add	r3, r6
 8008506:	9309      	str	r3, [sp, #36]	; 0x24
 8008508:	e767      	b.n	80083da <_svfiprintf_r+0x4e>
 800850a:	460c      	mov	r4, r1
 800850c:	2001      	movs	r0, #1
 800850e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008512:	e7a5      	b.n	8008460 <_svfiprintf_r+0xd4>
 8008514:	2300      	movs	r3, #0
 8008516:	f04f 0c0a 	mov.w	ip, #10
 800851a:	4619      	mov	r1, r3
 800851c:	3401      	adds	r4, #1
 800851e:	9305      	str	r3, [sp, #20]
 8008520:	4620      	mov	r0, r4
 8008522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008526:	3a30      	subs	r2, #48	; 0x30
 8008528:	2a09      	cmp	r2, #9
 800852a:	d903      	bls.n	8008534 <_svfiprintf_r+0x1a8>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0c5      	beq.n	80084bc <_svfiprintf_r+0x130>
 8008530:	9105      	str	r1, [sp, #20]
 8008532:	e7c3      	b.n	80084bc <_svfiprintf_r+0x130>
 8008534:	4604      	mov	r4, r0
 8008536:	2301      	movs	r3, #1
 8008538:	fb0c 2101 	mla	r1, ip, r1, r2
 800853c:	e7f0      	b.n	8008520 <_svfiprintf_r+0x194>
 800853e:	ab03      	add	r3, sp, #12
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	462a      	mov	r2, r5
 8008544:	4638      	mov	r0, r7
 8008546:	4b10      	ldr	r3, [pc, #64]	; (8008588 <_svfiprintf_r+0x1fc>)
 8008548:	a904      	add	r1, sp, #16
 800854a:	f7fc fa7d 	bl	8004a48 <_printf_float>
 800854e:	1c42      	adds	r2, r0, #1
 8008550:	4606      	mov	r6, r0
 8008552:	d1d6      	bne.n	8008502 <_svfiprintf_r+0x176>
 8008554:	89ab      	ldrh	r3, [r5, #12]
 8008556:	065b      	lsls	r3, r3, #25
 8008558:	f53f af2c 	bmi.w	80083b4 <_svfiprintf_r+0x28>
 800855c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800855e:	b01d      	add	sp, #116	; 0x74
 8008560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008564:	ab03      	add	r3, sp, #12
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	462a      	mov	r2, r5
 800856a:	4638      	mov	r0, r7
 800856c:	4b06      	ldr	r3, [pc, #24]	; (8008588 <_svfiprintf_r+0x1fc>)
 800856e:	a904      	add	r1, sp, #16
 8008570:	f7fc fd06 	bl	8004f80 <_printf_i>
 8008574:	e7eb      	b.n	800854e <_svfiprintf_r+0x1c2>
 8008576:	bf00      	nop
 8008578:	08009cdc 	.word	0x08009cdc
 800857c:	08009ce2 	.word	0x08009ce2
 8008580:	08009ce6 	.word	0x08009ce6
 8008584:	08004a49 	.word	0x08004a49
 8008588:	080082d5 	.word	0x080082d5

0800858c <nan>:
 800858c:	2000      	movs	r0, #0
 800858e:	4901      	ldr	r1, [pc, #4]	; (8008594 <nan+0x8>)
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	7ff80000 	.word	0x7ff80000

08008598 <_sbrk_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	2300      	movs	r3, #0
 800859c:	4d05      	ldr	r5, [pc, #20]	; (80085b4 <_sbrk_r+0x1c>)
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	f7f9 ff2e 	bl	8002404 <_sbrk>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_sbrk_r+0x1a>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_sbrk_r+0x1a>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	200002b0 	.word	0x200002b0

080085b8 <strncmp>:
 80085b8:	4603      	mov	r3, r0
 80085ba:	b510      	push	{r4, lr}
 80085bc:	b172      	cbz	r2, 80085dc <strncmp+0x24>
 80085be:	3901      	subs	r1, #1
 80085c0:	1884      	adds	r4, r0, r2
 80085c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80085c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80085ca:	4290      	cmp	r0, r2
 80085cc:	d101      	bne.n	80085d2 <strncmp+0x1a>
 80085ce:	42a3      	cmp	r3, r4
 80085d0:	d101      	bne.n	80085d6 <strncmp+0x1e>
 80085d2:	1a80      	subs	r0, r0, r2
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d1f3      	bne.n	80085c2 <strncmp+0xa>
 80085da:	e7fa      	b.n	80085d2 <strncmp+0x1a>
 80085dc:	4610      	mov	r0, r2
 80085de:	e7f9      	b.n	80085d4 <strncmp+0x1c>

080085e0 <__ascii_wctomb>:
 80085e0:	4603      	mov	r3, r0
 80085e2:	4608      	mov	r0, r1
 80085e4:	b141      	cbz	r1, 80085f8 <__ascii_wctomb+0x18>
 80085e6:	2aff      	cmp	r2, #255	; 0xff
 80085e8:	d904      	bls.n	80085f4 <__ascii_wctomb+0x14>
 80085ea:	228a      	movs	r2, #138	; 0x8a
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	4770      	bx	lr
 80085f4:	2001      	movs	r0, #1
 80085f6:	700a      	strb	r2, [r1, #0]
 80085f8:	4770      	bx	lr
	...

080085fc <__assert_func>:
 80085fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085fe:	4614      	mov	r4, r2
 8008600:	461a      	mov	r2, r3
 8008602:	4b09      	ldr	r3, [pc, #36]	; (8008628 <__assert_func+0x2c>)
 8008604:	4605      	mov	r5, r0
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68d8      	ldr	r0, [r3, #12]
 800860a:	b14c      	cbz	r4, 8008620 <__assert_func+0x24>
 800860c:	4b07      	ldr	r3, [pc, #28]	; (800862c <__assert_func+0x30>)
 800860e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008612:	9100      	str	r1, [sp, #0]
 8008614:	462b      	mov	r3, r5
 8008616:	4906      	ldr	r1, [pc, #24]	; (8008630 <__assert_func+0x34>)
 8008618:	f000 f80e 	bl	8008638 <fiprintf>
 800861c:	f000 fa8a 	bl	8008b34 <abort>
 8008620:	4b04      	ldr	r3, [pc, #16]	; (8008634 <__assert_func+0x38>)
 8008622:	461c      	mov	r4, r3
 8008624:	e7f3      	b.n	800860e <__assert_func+0x12>
 8008626:	bf00      	nop
 8008628:	20000040 	.word	0x20000040
 800862c:	08009ced 	.word	0x08009ced
 8008630:	08009cfa 	.word	0x08009cfa
 8008634:	08009d28 	.word	0x08009d28

08008638 <fiprintf>:
 8008638:	b40e      	push	{r1, r2, r3}
 800863a:	b503      	push	{r0, r1, lr}
 800863c:	4601      	mov	r1, r0
 800863e:	ab03      	add	r3, sp, #12
 8008640:	4805      	ldr	r0, [pc, #20]	; (8008658 <fiprintf+0x20>)
 8008642:	f853 2b04 	ldr.w	r2, [r3], #4
 8008646:	6800      	ldr	r0, [r0, #0]
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	f000 f883 	bl	8008754 <_vfiprintf_r>
 800864e:	b002      	add	sp, #8
 8008650:	f85d eb04 	ldr.w	lr, [sp], #4
 8008654:	b003      	add	sp, #12
 8008656:	4770      	bx	lr
 8008658:	20000040 	.word	0x20000040

0800865c <memmove>:
 800865c:	4288      	cmp	r0, r1
 800865e:	b510      	push	{r4, lr}
 8008660:	eb01 0402 	add.w	r4, r1, r2
 8008664:	d902      	bls.n	800866c <memmove+0x10>
 8008666:	4284      	cmp	r4, r0
 8008668:	4623      	mov	r3, r4
 800866a:	d807      	bhi.n	800867c <memmove+0x20>
 800866c:	1e43      	subs	r3, r0, #1
 800866e:	42a1      	cmp	r1, r4
 8008670:	d008      	beq.n	8008684 <memmove+0x28>
 8008672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800867a:	e7f8      	b.n	800866e <memmove+0x12>
 800867c:	4601      	mov	r1, r0
 800867e:	4402      	add	r2, r0
 8008680:	428a      	cmp	r2, r1
 8008682:	d100      	bne.n	8008686 <memmove+0x2a>
 8008684:	bd10      	pop	{r4, pc}
 8008686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800868a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800868e:	e7f7      	b.n	8008680 <memmove+0x24>

08008690 <__malloc_lock>:
 8008690:	4801      	ldr	r0, [pc, #4]	; (8008698 <__malloc_lock+0x8>)
 8008692:	f000 bc0b 	b.w	8008eac <__retarget_lock_acquire_recursive>
 8008696:	bf00      	nop
 8008698:	200002b4 	.word	0x200002b4

0800869c <__malloc_unlock>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__malloc_unlock+0x8>)
 800869e:	f000 bc06 	b.w	8008eae <__retarget_lock_release_recursive>
 80086a2:	bf00      	nop
 80086a4:	200002b4 	.word	0x200002b4

080086a8 <_realloc_r>:
 80086a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ac:	4680      	mov	r8, r0
 80086ae:	4614      	mov	r4, r2
 80086b0:	460e      	mov	r6, r1
 80086b2:	b921      	cbnz	r1, 80086be <_realloc_r+0x16>
 80086b4:	4611      	mov	r1, r2
 80086b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ba:	f7ff bd97 	b.w	80081ec <_malloc_r>
 80086be:	b92a      	cbnz	r2, 80086cc <_realloc_r+0x24>
 80086c0:	f7ff fd2c 	bl	800811c <_free_r>
 80086c4:	4625      	mov	r5, r4
 80086c6:	4628      	mov	r0, r5
 80086c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086cc:	f000 fc56 	bl	8008f7c <_malloc_usable_size_r>
 80086d0:	4284      	cmp	r4, r0
 80086d2:	4607      	mov	r7, r0
 80086d4:	d802      	bhi.n	80086dc <_realloc_r+0x34>
 80086d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086da:	d812      	bhi.n	8008702 <_realloc_r+0x5a>
 80086dc:	4621      	mov	r1, r4
 80086de:	4640      	mov	r0, r8
 80086e0:	f7ff fd84 	bl	80081ec <_malloc_r>
 80086e4:	4605      	mov	r5, r0
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d0ed      	beq.n	80086c6 <_realloc_r+0x1e>
 80086ea:	42bc      	cmp	r4, r7
 80086ec:	4622      	mov	r2, r4
 80086ee:	4631      	mov	r1, r6
 80086f0:	bf28      	it	cs
 80086f2:	463a      	movcs	r2, r7
 80086f4:	f7ff f838 	bl	8007768 <memcpy>
 80086f8:	4631      	mov	r1, r6
 80086fa:	4640      	mov	r0, r8
 80086fc:	f7ff fd0e 	bl	800811c <_free_r>
 8008700:	e7e1      	b.n	80086c6 <_realloc_r+0x1e>
 8008702:	4635      	mov	r5, r6
 8008704:	e7df      	b.n	80086c6 <_realloc_r+0x1e>

08008706 <__sfputc_r>:
 8008706:	6893      	ldr	r3, [r2, #8]
 8008708:	b410      	push	{r4}
 800870a:	3b01      	subs	r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	6093      	str	r3, [r2, #8]
 8008710:	da07      	bge.n	8008722 <__sfputc_r+0x1c>
 8008712:	6994      	ldr	r4, [r2, #24]
 8008714:	42a3      	cmp	r3, r4
 8008716:	db01      	blt.n	800871c <__sfputc_r+0x16>
 8008718:	290a      	cmp	r1, #10
 800871a:	d102      	bne.n	8008722 <__sfputc_r+0x1c>
 800871c:	bc10      	pop	{r4}
 800871e:	f000 b949 	b.w	80089b4 <__swbuf_r>
 8008722:	6813      	ldr	r3, [r2, #0]
 8008724:	1c58      	adds	r0, r3, #1
 8008726:	6010      	str	r0, [r2, #0]
 8008728:	7019      	strb	r1, [r3, #0]
 800872a:	4608      	mov	r0, r1
 800872c:	bc10      	pop	{r4}
 800872e:	4770      	bx	lr

08008730 <__sfputs_r>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	4614      	mov	r4, r2
 8008738:	18d5      	adds	r5, r2, r3
 800873a:	42ac      	cmp	r4, r5
 800873c:	d101      	bne.n	8008742 <__sfputs_r+0x12>
 800873e:	2000      	movs	r0, #0
 8008740:	e007      	b.n	8008752 <__sfputs_r+0x22>
 8008742:	463a      	mov	r2, r7
 8008744:	4630      	mov	r0, r6
 8008746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874a:	f7ff ffdc 	bl	8008706 <__sfputc_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d1f3      	bne.n	800873a <__sfputs_r+0xa>
 8008752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008754 <_vfiprintf_r>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	460d      	mov	r5, r1
 800875a:	4614      	mov	r4, r2
 800875c:	4698      	mov	r8, r3
 800875e:	4606      	mov	r6, r0
 8008760:	b09d      	sub	sp, #116	; 0x74
 8008762:	b118      	cbz	r0, 800876c <_vfiprintf_r+0x18>
 8008764:	6983      	ldr	r3, [r0, #24]
 8008766:	b90b      	cbnz	r3, 800876c <_vfiprintf_r+0x18>
 8008768:	f000 fb02 	bl	8008d70 <__sinit>
 800876c:	4b89      	ldr	r3, [pc, #548]	; (8008994 <_vfiprintf_r+0x240>)
 800876e:	429d      	cmp	r5, r3
 8008770:	d11b      	bne.n	80087aa <_vfiprintf_r+0x56>
 8008772:	6875      	ldr	r5, [r6, #4]
 8008774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008776:	07d9      	lsls	r1, r3, #31
 8008778:	d405      	bmi.n	8008786 <_vfiprintf_r+0x32>
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	059a      	lsls	r2, r3, #22
 800877e:	d402      	bmi.n	8008786 <_vfiprintf_r+0x32>
 8008780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008782:	f000 fb93 	bl	8008eac <__retarget_lock_acquire_recursive>
 8008786:	89ab      	ldrh	r3, [r5, #12]
 8008788:	071b      	lsls	r3, r3, #28
 800878a:	d501      	bpl.n	8008790 <_vfiprintf_r+0x3c>
 800878c:	692b      	ldr	r3, [r5, #16]
 800878e:	b9eb      	cbnz	r3, 80087cc <_vfiprintf_r+0x78>
 8008790:	4629      	mov	r1, r5
 8008792:	4630      	mov	r0, r6
 8008794:	f000 f960 	bl	8008a58 <__swsetup_r>
 8008798:	b1c0      	cbz	r0, 80087cc <_vfiprintf_r+0x78>
 800879a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800879c:	07dc      	lsls	r4, r3, #31
 800879e:	d50e      	bpl.n	80087be <_vfiprintf_r+0x6a>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	b01d      	add	sp, #116	; 0x74
 80087a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087aa:	4b7b      	ldr	r3, [pc, #492]	; (8008998 <_vfiprintf_r+0x244>)
 80087ac:	429d      	cmp	r5, r3
 80087ae:	d101      	bne.n	80087b4 <_vfiprintf_r+0x60>
 80087b0:	68b5      	ldr	r5, [r6, #8]
 80087b2:	e7df      	b.n	8008774 <_vfiprintf_r+0x20>
 80087b4:	4b79      	ldr	r3, [pc, #484]	; (800899c <_vfiprintf_r+0x248>)
 80087b6:	429d      	cmp	r5, r3
 80087b8:	bf08      	it	eq
 80087ba:	68f5      	ldreq	r5, [r6, #12]
 80087bc:	e7da      	b.n	8008774 <_vfiprintf_r+0x20>
 80087be:	89ab      	ldrh	r3, [r5, #12]
 80087c0:	0598      	lsls	r0, r3, #22
 80087c2:	d4ed      	bmi.n	80087a0 <_vfiprintf_r+0x4c>
 80087c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087c6:	f000 fb72 	bl	8008eae <__retarget_lock_release_recursive>
 80087ca:	e7e9      	b.n	80087a0 <_vfiprintf_r+0x4c>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9309      	str	r3, [sp, #36]	; 0x24
 80087d0:	2320      	movs	r3, #32
 80087d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087d6:	2330      	movs	r3, #48	; 0x30
 80087d8:	f04f 0901 	mov.w	r9, #1
 80087dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80089a0 <_vfiprintf_r+0x24c>
 80087e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087e8:	4623      	mov	r3, r4
 80087ea:	469a      	mov	sl, r3
 80087ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f0:	b10a      	cbz	r2, 80087f6 <_vfiprintf_r+0xa2>
 80087f2:	2a25      	cmp	r2, #37	; 0x25
 80087f4:	d1f9      	bne.n	80087ea <_vfiprintf_r+0x96>
 80087f6:	ebba 0b04 	subs.w	fp, sl, r4
 80087fa:	d00b      	beq.n	8008814 <_vfiprintf_r+0xc0>
 80087fc:	465b      	mov	r3, fp
 80087fe:	4622      	mov	r2, r4
 8008800:	4629      	mov	r1, r5
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff ff94 	bl	8008730 <__sfputs_r>
 8008808:	3001      	adds	r0, #1
 800880a:	f000 80aa 	beq.w	8008962 <_vfiprintf_r+0x20e>
 800880e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008810:	445a      	add	r2, fp
 8008812:	9209      	str	r2, [sp, #36]	; 0x24
 8008814:	f89a 3000 	ldrb.w	r3, [sl]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80a2 	beq.w	8008962 <_vfiprintf_r+0x20e>
 800881e:	2300      	movs	r3, #0
 8008820:	f04f 32ff 	mov.w	r2, #4294967295
 8008824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008828:	f10a 0a01 	add.w	sl, sl, #1
 800882c:	9304      	str	r3, [sp, #16]
 800882e:	9307      	str	r3, [sp, #28]
 8008830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008834:	931a      	str	r3, [sp, #104]	; 0x68
 8008836:	4654      	mov	r4, sl
 8008838:	2205      	movs	r2, #5
 800883a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883e:	4858      	ldr	r0, [pc, #352]	; (80089a0 <_vfiprintf_r+0x24c>)
 8008840:	f7fe ff84 	bl	800774c <memchr>
 8008844:	9a04      	ldr	r2, [sp, #16]
 8008846:	b9d8      	cbnz	r0, 8008880 <_vfiprintf_r+0x12c>
 8008848:	06d1      	lsls	r1, r2, #27
 800884a:	bf44      	itt	mi
 800884c:	2320      	movmi	r3, #32
 800884e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008852:	0713      	lsls	r3, r2, #28
 8008854:	bf44      	itt	mi
 8008856:	232b      	movmi	r3, #43	; 0x2b
 8008858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800885c:	f89a 3000 	ldrb.w	r3, [sl]
 8008860:	2b2a      	cmp	r3, #42	; 0x2a
 8008862:	d015      	beq.n	8008890 <_vfiprintf_r+0x13c>
 8008864:	4654      	mov	r4, sl
 8008866:	2000      	movs	r0, #0
 8008868:	f04f 0c0a 	mov.w	ip, #10
 800886c:	9a07      	ldr	r2, [sp, #28]
 800886e:	4621      	mov	r1, r4
 8008870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008874:	3b30      	subs	r3, #48	; 0x30
 8008876:	2b09      	cmp	r3, #9
 8008878:	d94e      	bls.n	8008918 <_vfiprintf_r+0x1c4>
 800887a:	b1b0      	cbz	r0, 80088aa <_vfiprintf_r+0x156>
 800887c:	9207      	str	r2, [sp, #28]
 800887e:	e014      	b.n	80088aa <_vfiprintf_r+0x156>
 8008880:	eba0 0308 	sub.w	r3, r0, r8
 8008884:	fa09 f303 	lsl.w	r3, r9, r3
 8008888:	4313      	orrs	r3, r2
 800888a:	46a2      	mov	sl, r4
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	e7d2      	b.n	8008836 <_vfiprintf_r+0xe2>
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	1d19      	adds	r1, r3, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	9103      	str	r1, [sp, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	bfbb      	ittet	lt
 800889c:	425b      	neglt	r3, r3
 800889e:	f042 0202 	orrlt.w	r2, r2, #2
 80088a2:	9307      	strge	r3, [sp, #28]
 80088a4:	9307      	strlt	r3, [sp, #28]
 80088a6:	bfb8      	it	lt
 80088a8:	9204      	strlt	r2, [sp, #16]
 80088aa:	7823      	ldrb	r3, [r4, #0]
 80088ac:	2b2e      	cmp	r3, #46	; 0x2e
 80088ae:	d10c      	bne.n	80088ca <_vfiprintf_r+0x176>
 80088b0:	7863      	ldrb	r3, [r4, #1]
 80088b2:	2b2a      	cmp	r3, #42	; 0x2a
 80088b4:	d135      	bne.n	8008922 <_vfiprintf_r+0x1ce>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	3402      	adds	r4, #2
 80088ba:	1d1a      	adds	r2, r3, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	9203      	str	r2, [sp, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bfb8      	it	lt
 80088c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80088c8:	9305      	str	r3, [sp, #20]
 80088ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80089a4 <_vfiprintf_r+0x250>
 80088ce:	2203      	movs	r2, #3
 80088d0:	4650      	mov	r0, sl
 80088d2:	7821      	ldrb	r1, [r4, #0]
 80088d4:	f7fe ff3a 	bl	800774c <memchr>
 80088d8:	b140      	cbz	r0, 80088ec <_vfiprintf_r+0x198>
 80088da:	2340      	movs	r3, #64	; 0x40
 80088dc:	eba0 000a 	sub.w	r0, r0, sl
 80088e0:	fa03 f000 	lsl.w	r0, r3, r0
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	3401      	adds	r4, #1
 80088e8:	4303      	orrs	r3, r0
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f0:	2206      	movs	r2, #6
 80088f2:	482d      	ldr	r0, [pc, #180]	; (80089a8 <_vfiprintf_r+0x254>)
 80088f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088f8:	f7fe ff28 	bl	800774c <memchr>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d03f      	beq.n	8008980 <_vfiprintf_r+0x22c>
 8008900:	4b2a      	ldr	r3, [pc, #168]	; (80089ac <_vfiprintf_r+0x258>)
 8008902:	bb1b      	cbnz	r3, 800894c <_vfiprintf_r+0x1f8>
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	3307      	adds	r3, #7
 8008908:	f023 0307 	bic.w	r3, r3, #7
 800890c:	3308      	adds	r3, #8
 800890e:	9303      	str	r3, [sp, #12]
 8008910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008912:	443b      	add	r3, r7
 8008914:	9309      	str	r3, [sp, #36]	; 0x24
 8008916:	e767      	b.n	80087e8 <_vfiprintf_r+0x94>
 8008918:	460c      	mov	r4, r1
 800891a:	2001      	movs	r0, #1
 800891c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008920:	e7a5      	b.n	800886e <_vfiprintf_r+0x11a>
 8008922:	2300      	movs	r3, #0
 8008924:	f04f 0c0a 	mov.w	ip, #10
 8008928:	4619      	mov	r1, r3
 800892a:	3401      	adds	r4, #1
 800892c:	9305      	str	r3, [sp, #20]
 800892e:	4620      	mov	r0, r4
 8008930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008934:	3a30      	subs	r2, #48	; 0x30
 8008936:	2a09      	cmp	r2, #9
 8008938:	d903      	bls.n	8008942 <_vfiprintf_r+0x1ee>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0c5      	beq.n	80088ca <_vfiprintf_r+0x176>
 800893e:	9105      	str	r1, [sp, #20]
 8008940:	e7c3      	b.n	80088ca <_vfiprintf_r+0x176>
 8008942:	4604      	mov	r4, r0
 8008944:	2301      	movs	r3, #1
 8008946:	fb0c 2101 	mla	r1, ip, r1, r2
 800894a:	e7f0      	b.n	800892e <_vfiprintf_r+0x1da>
 800894c:	ab03      	add	r3, sp, #12
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	462a      	mov	r2, r5
 8008952:	4630      	mov	r0, r6
 8008954:	4b16      	ldr	r3, [pc, #88]	; (80089b0 <_vfiprintf_r+0x25c>)
 8008956:	a904      	add	r1, sp, #16
 8008958:	f7fc f876 	bl	8004a48 <_printf_float>
 800895c:	4607      	mov	r7, r0
 800895e:	1c78      	adds	r0, r7, #1
 8008960:	d1d6      	bne.n	8008910 <_vfiprintf_r+0x1bc>
 8008962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008964:	07d9      	lsls	r1, r3, #31
 8008966:	d405      	bmi.n	8008974 <_vfiprintf_r+0x220>
 8008968:	89ab      	ldrh	r3, [r5, #12]
 800896a:	059a      	lsls	r2, r3, #22
 800896c:	d402      	bmi.n	8008974 <_vfiprintf_r+0x220>
 800896e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008970:	f000 fa9d 	bl	8008eae <__retarget_lock_release_recursive>
 8008974:	89ab      	ldrh	r3, [r5, #12]
 8008976:	065b      	lsls	r3, r3, #25
 8008978:	f53f af12 	bmi.w	80087a0 <_vfiprintf_r+0x4c>
 800897c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800897e:	e711      	b.n	80087a4 <_vfiprintf_r+0x50>
 8008980:	ab03      	add	r3, sp, #12
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	462a      	mov	r2, r5
 8008986:	4630      	mov	r0, r6
 8008988:	4b09      	ldr	r3, [pc, #36]	; (80089b0 <_vfiprintf_r+0x25c>)
 800898a:	a904      	add	r1, sp, #16
 800898c:	f7fc faf8 	bl	8004f80 <_printf_i>
 8008990:	e7e4      	b.n	800895c <_vfiprintf_r+0x208>
 8008992:	bf00      	nop
 8008994:	08009d4c 	.word	0x08009d4c
 8008998:	08009d6c 	.word	0x08009d6c
 800899c:	08009d2c 	.word	0x08009d2c
 80089a0:	08009cdc 	.word	0x08009cdc
 80089a4:	08009ce2 	.word	0x08009ce2
 80089a8:	08009ce6 	.word	0x08009ce6
 80089ac:	08004a49 	.word	0x08004a49
 80089b0:	08008731 	.word	0x08008731

080089b4 <__swbuf_r>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	460e      	mov	r6, r1
 80089b8:	4614      	mov	r4, r2
 80089ba:	4605      	mov	r5, r0
 80089bc:	b118      	cbz	r0, 80089c6 <__swbuf_r+0x12>
 80089be:	6983      	ldr	r3, [r0, #24]
 80089c0:	b90b      	cbnz	r3, 80089c6 <__swbuf_r+0x12>
 80089c2:	f000 f9d5 	bl	8008d70 <__sinit>
 80089c6:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <__swbuf_r+0x98>)
 80089c8:	429c      	cmp	r4, r3
 80089ca:	d12b      	bne.n	8008a24 <__swbuf_r+0x70>
 80089cc:	686c      	ldr	r4, [r5, #4]
 80089ce:	69a3      	ldr	r3, [r4, #24]
 80089d0:	60a3      	str	r3, [r4, #8]
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	071a      	lsls	r2, r3, #28
 80089d6:	d52f      	bpl.n	8008a38 <__swbuf_r+0x84>
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	b36b      	cbz	r3, 8008a38 <__swbuf_r+0x84>
 80089dc:	6923      	ldr	r3, [r4, #16]
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	b2f6      	uxtb	r6, r6
 80089e2:	1ac0      	subs	r0, r0, r3
 80089e4:	6963      	ldr	r3, [r4, #20]
 80089e6:	4637      	mov	r7, r6
 80089e8:	4283      	cmp	r3, r0
 80089ea:	dc04      	bgt.n	80089f6 <__swbuf_r+0x42>
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f92a 	bl	8008c48 <_fflush_r>
 80089f4:	bb30      	cbnz	r0, 8008a44 <__swbuf_r+0x90>
 80089f6:	68a3      	ldr	r3, [r4, #8]
 80089f8:	3001      	adds	r0, #1
 80089fa:	3b01      	subs	r3, #1
 80089fc:	60a3      	str	r3, [r4, #8]
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	6022      	str	r2, [r4, #0]
 8008a04:	701e      	strb	r6, [r3, #0]
 8008a06:	6963      	ldr	r3, [r4, #20]
 8008a08:	4283      	cmp	r3, r0
 8008a0a:	d004      	beq.n	8008a16 <__swbuf_r+0x62>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	07db      	lsls	r3, r3, #31
 8008a10:	d506      	bpl.n	8008a20 <__swbuf_r+0x6c>
 8008a12:	2e0a      	cmp	r6, #10
 8008a14:	d104      	bne.n	8008a20 <__swbuf_r+0x6c>
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f000 f915 	bl	8008c48 <_fflush_r>
 8008a1e:	b988      	cbnz	r0, 8008a44 <__swbuf_r+0x90>
 8008a20:	4638      	mov	r0, r7
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a24:	4b0a      	ldr	r3, [pc, #40]	; (8008a50 <__swbuf_r+0x9c>)
 8008a26:	429c      	cmp	r4, r3
 8008a28:	d101      	bne.n	8008a2e <__swbuf_r+0x7a>
 8008a2a:	68ac      	ldr	r4, [r5, #8]
 8008a2c:	e7cf      	b.n	80089ce <__swbuf_r+0x1a>
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <__swbuf_r+0xa0>)
 8008a30:	429c      	cmp	r4, r3
 8008a32:	bf08      	it	eq
 8008a34:	68ec      	ldreq	r4, [r5, #12]
 8008a36:	e7ca      	b.n	80089ce <__swbuf_r+0x1a>
 8008a38:	4621      	mov	r1, r4
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f000 f80c 	bl	8008a58 <__swsetup_r>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d0cb      	beq.n	80089dc <__swbuf_r+0x28>
 8008a44:	f04f 37ff 	mov.w	r7, #4294967295
 8008a48:	e7ea      	b.n	8008a20 <__swbuf_r+0x6c>
 8008a4a:	bf00      	nop
 8008a4c:	08009d4c 	.word	0x08009d4c
 8008a50:	08009d6c 	.word	0x08009d6c
 8008a54:	08009d2c 	.word	0x08009d2c

08008a58 <__swsetup_r>:
 8008a58:	4b32      	ldr	r3, [pc, #200]	; (8008b24 <__swsetup_r+0xcc>)
 8008a5a:	b570      	push	{r4, r5, r6, lr}
 8008a5c:	681d      	ldr	r5, [r3, #0]
 8008a5e:	4606      	mov	r6, r0
 8008a60:	460c      	mov	r4, r1
 8008a62:	b125      	cbz	r5, 8008a6e <__swsetup_r+0x16>
 8008a64:	69ab      	ldr	r3, [r5, #24]
 8008a66:	b913      	cbnz	r3, 8008a6e <__swsetup_r+0x16>
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f000 f981 	bl	8008d70 <__sinit>
 8008a6e:	4b2e      	ldr	r3, [pc, #184]	; (8008b28 <__swsetup_r+0xd0>)
 8008a70:	429c      	cmp	r4, r3
 8008a72:	d10f      	bne.n	8008a94 <__swsetup_r+0x3c>
 8008a74:	686c      	ldr	r4, [r5, #4]
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a7c:	0719      	lsls	r1, r3, #28
 8008a7e:	d42c      	bmi.n	8008ada <__swsetup_r+0x82>
 8008a80:	06dd      	lsls	r5, r3, #27
 8008a82:	d411      	bmi.n	8008aa8 <__swsetup_r+0x50>
 8008a84:	2309      	movs	r3, #9
 8008a86:	6033      	str	r3, [r6, #0]
 8008a88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a90:	81a3      	strh	r3, [r4, #12]
 8008a92:	e03e      	b.n	8008b12 <__swsetup_r+0xba>
 8008a94:	4b25      	ldr	r3, [pc, #148]	; (8008b2c <__swsetup_r+0xd4>)
 8008a96:	429c      	cmp	r4, r3
 8008a98:	d101      	bne.n	8008a9e <__swsetup_r+0x46>
 8008a9a:	68ac      	ldr	r4, [r5, #8]
 8008a9c:	e7eb      	b.n	8008a76 <__swsetup_r+0x1e>
 8008a9e:	4b24      	ldr	r3, [pc, #144]	; (8008b30 <__swsetup_r+0xd8>)
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	bf08      	it	eq
 8008aa4:	68ec      	ldreq	r4, [r5, #12]
 8008aa6:	e7e6      	b.n	8008a76 <__swsetup_r+0x1e>
 8008aa8:	0758      	lsls	r0, r3, #29
 8008aaa:	d512      	bpl.n	8008ad2 <__swsetup_r+0x7a>
 8008aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aae:	b141      	cbz	r1, 8008ac2 <__swsetup_r+0x6a>
 8008ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ab4:	4299      	cmp	r1, r3
 8008ab6:	d002      	beq.n	8008abe <__swsetup_r+0x66>
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7ff fb2f 	bl	800811c <_free_r>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ac8:	81a3      	strh	r3, [r4, #12]
 8008aca:	2300      	movs	r3, #0
 8008acc:	6063      	str	r3, [r4, #4]
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f043 0308 	orr.w	r3, r3, #8
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	b94b      	cbnz	r3, 8008af2 <__swsetup_r+0x9a>
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ae8:	d003      	beq.n	8008af2 <__swsetup_r+0x9a>
 8008aea:	4621      	mov	r1, r4
 8008aec:	4630      	mov	r0, r6
 8008aee:	f000 fa05 	bl	8008efc <__smakebuf_r>
 8008af2:	89a0      	ldrh	r0, [r4, #12]
 8008af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008af8:	f010 0301 	ands.w	r3, r0, #1
 8008afc:	d00a      	beq.n	8008b14 <__swsetup_r+0xbc>
 8008afe:	2300      	movs	r3, #0
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	6963      	ldr	r3, [r4, #20]
 8008b04:	425b      	negs	r3, r3
 8008b06:	61a3      	str	r3, [r4, #24]
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	b943      	cbnz	r3, 8008b1e <__swsetup_r+0xc6>
 8008b0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b10:	d1ba      	bne.n	8008a88 <__swsetup_r+0x30>
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	0781      	lsls	r1, r0, #30
 8008b16:	bf58      	it	pl
 8008b18:	6963      	ldrpl	r3, [r4, #20]
 8008b1a:	60a3      	str	r3, [r4, #8]
 8008b1c:	e7f4      	b.n	8008b08 <__swsetup_r+0xb0>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e7f7      	b.n	8008b12 <__swsetup_r+0xba>
 8008b22:	bf00      	nop
 8008b24:	20000040 	.word	0x20000040
 8008b28:	08009d4c 	.word	0x08009d4c
 8008b2c:	08009d6c 	.word	0x08009d6c
 8008b30:	08009d2c 	.word	0x08009d2c

08008b34 <abort>:
 8008b34:	2006      	movs	r0, #6
 8008b36:	b508      	push	{r3, lr}
 8008b38:	f000 fa50 	bl	8008fdc <raise>
 8008b3c:	2001      	movs	r0, #1
 8008b3e:	f7f9 fbee 	bl	800231e <_exit>
	...

08008b44 <__sflush_r>:
 8008b44:	898a      	ldrh	r2, [r1, #12]
 8008b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b48:	4605      	mov	r5, r0
 8008b4a:	0710      	lsls	r0, r2, #28
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	d457      	bmi.n	8008c00 <__sflush_r+0xbc>
 8008b50:	684b      	ldr	r3, [r1, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dc04      	bgt.n	8008b60 <__sflush_r+0x1c>
 8008b56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	dc01      	bgt.n	8008b60 <__sflush_r+0x1c>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	d0fa      	beq.n	8008b5c <__sflush_r+0x18>
 8008b66:	2300      	movs	r3, #0
 8008b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b6c:	682f      	ldr	r7, [r5, #0]
 8008b6e:	602b      	str	r3, [r5, #0]
 8008b70:	d032      	beq.n	8008bd8 <__sflush_r+0x94>
 8008b72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	075a      	lsls	r2, r3, #29
 8008b78:	d505      	bpl.n	8008b86 <__sflush_r+0x42>
 8008b7a:	6863      	ldr	r3, [r4, #4]
 8008b7c:	1ac0      	subs	r0, r0, r3
 8008b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b80:	b10b      	cbz	r3, 8008b86 <__sflush_r+0x42>
 8008b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b84:	1ac0      	subs	r0, r0, r3
 8008b86:	2300      	movs	r3, #0
 8008b88:	4602      	mov	r2, r0
 8008b8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	6a21      	ldr	r1, [r4, #32]
 8008b90:	47b0      	blx	r6
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	d106      	bne.n	8008ba6 <__sflush_r+0x62>
 8008b98:	6829      	ldr	r1, [r5, #0]
 8008b9a:	291d      	cmp	r1, #29
 8008b9c:	d82c      	bhi.n	8008bf8 <__sflush_r+0xb4>
 8008b9e:	4a29      	ldr	r2, [pc, #164]	; (8008c44 <__sflush_r+0x100>)
 8008ba0:	40ca      	lsrs	r2, r1
 8008ba2:	07d6      	lsls	r6, r2, #31
 8008ba4:	d528      	bpl.n	8008bf8 <__sflush_r+0xb4>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	6062      	str	r2, [r4, #4]
 8008baa:	6922      	ldr	r2, [r4, #16]
 8008bac:	04d9      	lsls	r1, r3, #19
 8008bae:	6022      	str	r2, [r4, #0]
 8008bb0:	d504      	bpl.n	8008bbc <__sflush_r+0x78>
 8008bb2:	1c42      	adds	r2, r0, #1
 8008bb4:	d101      	bne.n	8008bba <__sflush_r+0x76>
 8008bb6:	682b      	ldr	r3, [r5, #0]
 8008bb8:	b903      	cbnz	r3, 8008bbc <__sflush_r+0x78>
 8008bba:	6560      	str	r0, [r4, #84]	; 0x54
 8008bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bbe:	602f      	str	r7, [r5, #0]
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	d0cb      	beq.n	8008b5c <__sflush_r+0x18>
 8008bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bc8:	4299      	cmp	r1, r3
 8008bca:	d002      	beq.n	8008bd2 <__sflush_r+0x8e>
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f7ff faa5 	bl	800811c <_free_r>
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	6360      	str	r0, [r4, #52]	; 0x34
 8008bd6:	e7c2      	b.n	8008b5e <__sflush_r+0x1a>
 8008bd8:	6a21      	ldr	r1, [r4, #32]
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b0      	blx	r6
 8008be0:	1c41      	adds	r1, r0, #1
 8008be2:	d1c7      	bne.n	8008b74 <__sflush_r+0x30>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0c4      	beq.n	8008b74 <__sflush_r+0x30>
 8008bea:	2b1d      	cmp	r3, #29
 8008bec:	d001      	beq.n	8008bf2 <__sflush_r+0xae>
 8008bee:	2b16      	cmp	r3, #22
 8008bf0:	d101      	bne.n	8008bf6 <__sflush_r+0xb2>
 8008bf2:	602f      	str	r7, [r5, #0]
 8008bf4:	e7b2      	b.n	8008b5c <__sflush_r+0x18>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	e7ae      	b.n	8008b5e <__sflush_r+0x1a>
 8008c00:	690f      	ldr	r7, [r1, #16]
 8008c02:	2f00      	cmp	r7, #0
 8008c04:	d0aa      	beq.n	8008b5c <__sflush_r+0x18>
 8008c06:	0793      	lsls	r3, r2, #30
 8008c08:	bf18      	it	ne
 8008c0a:	2300      	movne	r3, #0
 8008c0c:	680e      	ldr	r6, [r1, #0]
 8008c0e:	bf08      	it	eq
 8008c10:	694b      	ldreq	r3, [r1, #20]
 8008c12:	1bf6      	subs	r6, r6, r7
 8008c14:	600f      	str	r7, [r1, #0]
 8008c16:	608b      	str	r3, [r1, #8]
 8008c18:	2e00      	cmp	r6, #0
 8008c1a:	dd9f      	ble.n	8008b5c <__sflush_r+0x18>
 8008c1c:	4633      	mov	r3, r6
 8008c1e:	463a      	mov	r2, r7
 8008c20:	4628      	mov	r0, r5
 8008c22:	6a21      	ldr	r1, [r4, #32]
 8008c24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c28:	47e0      	blx	ip
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	dc06      	bgt.n	8008c3c <__sflush_r+0xf8>
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	e790      	b.n	8008b5e <__sflush_r+0x1a>
 8008c3c:	4407      	add	r7, r0
 8008c3e:	1a36      	subs	r6, r6, r0
 8008c40:	e7ea      	b.n	8008c18 <__sflush_r+0xd4>
 8008c42:	bf00      	nop
 8008c44:	20400001 	.word	0x20400001

08008c48 <_fflush_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	690b      	ldr	r3, [r1, #16]
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	b913      	cbnz	r3, 8008c58 <_fflush_r+0x10>
 8008c52:	2500      	movs	r5, #0
 8008c54:	4628      	mov	r0, r5
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	b118      	cbz	r0, 8008c62 <_fflush_r+0x1a>
 8008c5a:	6983      	ldr	r3, [r0, #24]
 8008c5c:	b90b      	cbnz	r3, 8008c62 <_fflush_r+0x1a>
 8008c5e:	f000 f887 	bl	8008d70 <__sinit>
 8008c62:	4b14      	ldr	r3, [pc, #80]	; (8008cb4 <_fflush_r+0x6c>)
 8008c64:	429c      	cmp	r4, r3
 8008c66:	d11b      	bne.n	8008ca0 <_fflush_r+0x58>
 8008c68:	686c      	ldr	r4, [r5, #4]
 8008c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0ef      	beq.n	8008c52 <_fflush_r+0xa>
 8008c72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c74:	07d0      	lsls	r0, r2, #31
 8008c76:	d404      	bmi.n	8008c82 <_fflush_r+0x3a>
 8008c78:	0599      	lsls	r1, r3, #22
 8008c7a:	d402      	bmi.n	8008c82 <_fflush_r+0x3a>
 8008c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c7e:	f000 f915 	bl	8008eac <__retarget_lock_acquire_recursive>
 8008c82:	4628      	mov	r0, r5
 8008c84:	4621      	mov	r1, r4
 8008c86:	f7ff ff5d 	bl	8008b44 <__sflush_r>
 8008c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	07da      	lsls	r2, r3, #31
 8008c90:	d4e0      	bmi.n	8008c54 <_fflush_r+0xc>
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	059b      	lsls	r3, r3, #22
 8008c96:	d4dd      	bmi.n	8008c54 <_fflush_r+0xc>
 8008c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c9a:	f000 f908 	bl	8008eae <__retarget_lock_release_recursive>
 8008c9e:	e7d9      	b.n	8008c54 <_fflush_r+0xc>
 8008ca0:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <_fflush_r+0x70>)
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	d101      	bne.n	8008caa <_fflush_r+0x62>
 8008ca6:	68ac      	ldr	r4, [r5, #8]
 8008ca8:	e7df      	b.n	8008c6a <_fflush_r+0x22>
 8008caa:	4b04      	ldr	r3, [pc, #16]	; (8008cbc <_fflush_r+0x74>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	bf08      	it	eq
 8008cb0:	68ec      	ldreq	r4, [r5, #12]
 8008cb2:	e7da      	b.n	8008c6a <_fflush_r+0x22>
 8008cb4:	08009d4c 	.word	0x08009d4c
 8008cb8:	08009d6c 	.word	0x08009d6c
 8008cbc:	08009d2c 	.word	0x08009d2c

08008cc0 <std>:
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	b510      	push	{r4, lr}
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8008cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cce:	6083      	str	r3, [r0, #8]
 8008cd0:	8181      	strh	r1, [r0, #12]
 8008cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8008cd4:	81c2      	strh	r2, [r0, #14]
 8008cd6:	6183      	str	r3, [r0, #24]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	2208      	movs	r2, #8
 8008cdc:	305c      	adds	r0, #92	; 0x5c
 8008cde:	f7fb fe0d 	bl	80048fc <memset>
 8008ce2:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <std+0x38>)
 8008ce4:	6224      	str	r4, [r4, #32]
 8008ce6:	6263      	str	r3, [r4, #36]	; 0x24
 8008ce8:	4b04      	ldr	r3, [pc, #16]	; (8008cfc <std+0x3c>)
 8008cea:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cec:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <std+0x40>)
 8008cee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cf0:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <std+0x44>)
 8008cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8008cf4:	bd10      	pop	{r4, pc}
 8008cf6:	bf00      	nop
 8008cf8:	08009015 	.word	0x08009015
 8008cfc:	08009037 	.word	0x08009037
 8008d00:	0800906f 	.word	0x0800906f
 8008d04:	08009093 	.word	0x08009093

08008d08 <_cleanup_r>:
 8008d08:	4901      	ldr	r1, [pc, #4]	; (8008d10 <_cleanup_r+0x8>)
 8008d0a:	f000 b8af 	b.w	8008e6c <_fwalk_reent>
 8008d0e:	bf00      	nop
 8008d10:	08008c49 	.word	0x08008c49

08008d14 <__sfmoreglue>:
 8008d14:	2268      	movs	r2, #104	; 0x68
 8008d16:	b570      	push	{r4, r5, r6, lr}
 8008d18:	1e4d      	subs	r5, r1, #1
 8008d1a:	4355      	muls	r5, r2
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d22:	f7ff fa63 	bl	80081ec <_malloc_r>
 8008d26:	4604      	mov	r4, r0
 8008d28:	b140      	cbz	r0, 8008d3c <__sfmoreglue+0x28>
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d30:	300c      	adds	r0, #12
 8008d32:	60a0      	str	r0, [r4, #8]
 8008d34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d38:	f7fb fde0 	bl	80048fc <memset>
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}

08008d40 <__sfp_lock_acquire>:
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <__sfp_lock_acquire+0x8>)
 8008d42:	f000 b8b3 	b.w	8008eac <__retarget_lock_acquire_recursive>
 8008d46:	bf00      	nop
 8008d48:	200002b5 	.word	0x200002b5

08008d4c <__sfp_lock_release>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__sfp_lock_release+0x8>)
 8008d4e:	f000 b8ae 	b.w	8008eae <__retarget_lock_release_recursive>
 8008d52:	bf00      	nop
 8008d54:	200002b5 	.word	0x200002b5

08008d58 <__sinit_lock_acquire>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__sinit_lock_acquire+0x8>)
 8008d5a:	f000 b8a7 	b.w	8008eac <__retarget_lock_acquire_recursive>
 8008d5e:	bf00      	nop
 8008d60:	200002b6 	.word	0x200002b6

08008d64 <__sinit_lock_release>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sinit_lock_release+0x8>)
 8008d66:	f000 b8a2 	b.w	8008eae <__retarget_lock_release_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	200002b6 	.word	0x200002b6

08008d70 <__sinit>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4604      	mov	r4, r0
 8008d74:	f7ff fff0 	bl	8008d58 <__sinit_lock_acquire>
 8008d78:	69a3      	ldr	r3, [r4, #24]
 8008d7a:	b11b      	cbz	r3, 8008d84 <__sinit+0x14>
 8008d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d80:	f7ff bff0 	b.w	8008d64 <__sinit_lock_release>
 8008d84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d88:	6523      	str	r3, [r4, #80]	; 0x50
 8008d8a:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <__sinit+0x68>)
 8008d8c:	4a13      	ldr	r2, [pc, #76]	; (8008ddc <__sinit+0x6c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	bf08      	it	eq
 8008d96:	2301      	moveq	r3, #1
 8008d98:	4620      	mov	r0, r4
 8008d9a:	bf08      	it	eq
 8008d9c:	61a3      	streq	r3, [r4, #24]
 8008d9e:	f000 f81f 	bl	8008de0 <__sfp>
 8008da2:	6060      	str	r0, [r4, #4]
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 f81b 	bl	8008de0 <__sfp>
 8008daa:	60a0      	str	r0, [r4, #8]
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 f817 	bl	8008de0 <__sfp>
 8008db2:	2200      	movs	r2, #0
 8008db4:	2104      	movs	r1, #4
 8008db6:	60e0      	str	r0, [r4, #12]
 8008db8:	6860      	ldr	r0, [r4, #4]
 8008dba:	f7ff ff81 	bl	8008cc0 <std>
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	2109      	movs	r1, #9
 8008dc2:	68a0      	ldr	r0, [r4, #8]
 8008dc4:	f7ff ff7c 	bl	8008cc0 <std>
 8008dc8:	2202      	movs	r2, #2
 8008dca:	2112      	movs	r1, #18
 8008dcc:	68e0      	ldr	r0, [r4, #12]
 8008dce:	f7ff ff77 	bl	8008cc0 <std>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	61a3      	str	r3, [r4, #24]
 8008dd6:	e7d1      	b.n	8008d7c <__sinit+0xc>
 8008dd8:	080098e4 	.word	0x080098e4
 8008ddc:	08008d09 	.word	0x08008d09

08008de0 <__sfp>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	4607      	mov	r7, r0
 8008de4:	f7ff ffac 	bl	8008d40 <__sfp_lock_acquire>
 8008de8:	4b1e      	ldr	r3, [pc, #120]	; (8008e64 <__sfp+0x84>)
 8008dea:	681e      	ldr	r6, [r3, #0]
 8008dec:	69b3      	ldr	r3, [r6, #24]
 8008dee:	b913      	cbnz	r3, 8008df6 <__sfp+0x16>
 8008df0:	4630      	mov	r0, r6
 8008df2:	f7ff ffbd 	bl	8008d70 <__sinit>
 8008df6:	3648      	adds	r6, #72	; 0x48
 8008df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	d503      	bpl.n	8008e08 <__sfp+0x28>
 8008e00:	6833      	ldr	r3, [r6, #0]
 8008e02:	b30b      	cbz	r3, 8008e48 <__sfp+0x68>
 8008e04:	6836      	ldr	r6, [r6, #0]
 8008e06:	e7f7      	b.n	8008df8 <__sfp+0x18>
 8008e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e0c:	b9d5      	cbnz	r5, 8008e44 <__sfp+0x64>
 8008e0e:	4b16      	ldr	r3, [pc, #88]	; (8008e68 <__sfp+0x88>)
 8008e10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e14:	60e3      	str	r3, [r4, #12]
 8008e16:	6665      	str	r5, [r4, #100]	; 0x64
 8008e18:	f000 f847 	bl	8008eaa <__retarget_lock_init_recursive>
 8008e1c:	f7ff ff96 	bl	8008d4c <__sfp_lock_release>
 8008e20:	2208      	movs	r2, #8
 8008e22:	4629      	mov	r1, r5
 8008e24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e2c:	6025      	str	r5, [r4, #0]
 8008e2e:	61a5      	str	r5, [r4, #24]
 8008e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e34:	f7fb fd62 	bl	80048fc <memset>
 8008e38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e40:	4620      	mov	r0, r4
 8008e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e44:	3468      	adds	r4, #104	; 0x68
 8008e46:	e7d9      	b.n	8008dfc <__sfp+0x1c>
 8008e48:	2104      	movs	r1, #4
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	f7ff ff62 	bl	8008d14 <__sfmoreglue>
 8008e50:	4604      	mov	r4, r0
 8008e52:	6030      	str	r0, [r6, #0]
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d1d5      	bne.n	8008e04 <__sfp+0x24>
 8008e58:	f7ff ff78 	bl	8008d4c <__sfp_lock_release>
 8008e5c:	230c      	movs	r3, #12
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	e7ee      	b.n	8008e40 <__sfp+0x60>
 8008e62:	bf00      	nop
 8008e64:	080098e4 	.word	0x080098e4
 8008e68:	ffff0001 	.word	0xffff0001

08008e6c <_fwalk_reent>:
 8008e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e70:	4606      	mov	r6, r0
 8008e72:	4688      	mov	r8, r1
 8008e74:	2700      	movs	r7, #0
 8008e76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e7e:	f1b9 0901 	subs.w	r9, r9, #1
 8008e82:	d505      	bpl.n	8008e90 <_fwalk_reent+0x24>
 8008e84:	6824      	ldr	r4, [r4, #0]
 8008e86:	2c00      	cmp	r4, #0
 8008e88:	d1f7      	bne.n	8008e7a <_fwalk_reent+0xe>
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e90:	89ab      	ldrh	r3, [r5, #12]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d907      	bls.n	8008ea6 <_fwalk_reent+0x3a>
 8008e96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	d003      	beq.n	8008ea6 <_fwalk_reent+0x3a>
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	47c0      	blx	r8
 8008ea4:	4307      	orrs	r7, r0
 8008ea6:	3568      	adds	r5, #104	; 0x68
 8008ea8:	e7e9      	b.n	8008e7e <_fwalk_reent+0x12>

08008eaa <__retarget_lock_init_recursive>:
 8008eaa:	4770      	bx	lr

08008eac <__retarget_lock_acquire_recursive>:
 8008eac:	4770      	bx	lr

08008eae <__retarget_lock_release_recursive>:
 8008eae:	4770      	bx	lr

08008eb0 <__swhatbuf_r>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	460e      	mov	r6, r1
 8008eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb8:	4614      	mov	r4, r2
 8008eba:	2900      	cmp	r1, #0
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	b096      	sub	sp, #88	; 0x58
 8008ec0:	da08      	bge.n	8008ed4 <__swhatbuf_r+0x24>
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ec8:	602a      	str	r2, [r5, #0]
 8008eca:	061a      	lsls	r2, r3, #24
 8008ecc:	d410      	bmi.n	8008ef0 <__swhatbuf_r+0x40>
 8008ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ed2:	e00e      	b.n	8008ef2 <__swhatbuf_r+0x42>
 8008ed4:	466a      	mov	r2, sp
 8008ed6:	f000 f903 	bl	80090e0 <_fstat_r>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	dbf1      	blt.n	8008ec2 <__swhatbuf_r+0x12>
 8008ede:	9a01      	ldr	r2, [sp, #4]
 8008ee0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ee4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ee8:	425a      	negs	r2, r3
 8008eea:	415a      	adcs	r2, r3
 8008eec:	602a      	str	r2, [r5, #0]
 8008eee:	e7ee      	b.n	8008ece <__swhatbuf_r+0x1e>
 8008ef0:	2340      	movs	r3, #64	; 0x40
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	b016      	add	sp, #88	; 0x58
 8008ef8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008efc <__smakebuf_r>:
 8008efc:	898b      	ldrh	r3, [r1, #12]
 8008efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f00:	079d      	lsls	r5, r3, #30
 8008f02:	4606      	mov	r6, r0
 8008f04:	460c      	mov	r4, r1
 8008f06:	d507      	bpl.n	8008f18 <__smakebuf_r+0x1c>
 8008f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	2301      	movs	r3, #1
 8008f12:	6163      	str	r3, [r4, #20]
 8008f14:	b002      	add	sp, #8
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	466a      	mov	r2, sp
 8008f1a:	ab01      	add	r3, sp, #4
 8008f1c:	f7ff ffc8 	bl	8008eb0 <__swhatbuf_r>
 8008f20:	9900      	ldr	r1, [sp, #0]
 8008f22:	4605      	mov	r5, r0
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff f961 	bl	80081ec <_malloc_r>
 8008f2a:	b948      	cbnz	r0, 8008f40 <__smakebuf_r+0x44>
 8008f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f30:	059a      	lsls	r2, r3, #22
 8008f32:	d4ef      	bmi.n	8008f14 <__smakebuf_r+0x18>
 8008f34:	f023 0303 	bic.w	r3, r3, #3
 8008f38:	f043 0302 	orr.w	r3, r3, #2
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	e7e3      	b.n	8008f08 <__smakebuf_r+0xc>
 8008f40:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <__smakebuf_r+0x7c>)
 8008f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	6020      	str	r0, [r4, #0]
 8008f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	9b00      	ldr	r3, [sp, #0]
 8008f50:	6120      	str	r0, [r4, #16]
 8008f52:	6163      	str	r3, [r4, #20]
 8008f54:	9b01      	ldr	r3, [sp, #4]
 8008f56:	b15b      	cbz	r3, 8008f70 <__smakebuf_r+0x74>
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f5e:	f000 f8d1 	bl	8009104 <_isatty_r>
 8008f62:	b128      	cbz	r0, 8008f70 <__smakebuf_r+0x74>
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	81a3      	strh	r3, [r4, #12]
 8008f70:	89a0      	ldrh	r0, [r4, #12]
 8008f72:	4305      	orrs	r5, r0
 8008f74:	81a5      	strh	r5, [r4, #12]
 8008f76:	e7cd      	b.n	8008f14 <__smakebuf_r+0x18>
 8008f78:	08008d09 	.word	0x08008d09

08008f7c <_malloc_usable_size_r>:
 8008f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f80:	1f18      	subs	r0, r3, #4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bfbc      	itt	lt
 8008f86:	580b      	ldrlt	r3, [r1, r0]
 8008f88:	18c0      	addlt	r0, r0, r3
 8008f8a:	4770      	bx	lr

08008f8c <_raise_r>:
 8008f8c:	291f      	cmp	r1, #31
 8008f8e:	b538      	push	{r3, r4, r5, lr}
 8008f90:	4604      	mov	r4, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	d904      	bls.n	8008fa0 <_raise_r+0x14>
 8008f96:	2316      	movs	r3, #22
 8008f98:	6003      	str	r3, [r0, #0]
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fa2:	b112      	cbz	r2, 8008faa <_raise_r+0x1e>
 8008fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fa8:	b94b      	cbnz	r3, 8008fbe <_raise_r+0x32>
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 f830 	bl	8009010 <_getpid_r>
 8008fb0:	462a      	mov	r2, r5
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fba:	f000 b817 	b.w	8008fec <_kill_r>
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d00a      	beq.n	8008fd8 <_raise_r+0x4c>
 8008fc2:	1c59      	adds	r1, r3, #1
 8008fc4:	d103      	bne.n	8008fce <_raise_r+0x42>
 8008fc6:	2316      	movs	r3, #22
 8008fc8:	6003      	str	r3, [r0, #0]
 8008fca:	2001      	movs	r0, #1
 8008fcc:	e7e7      	b.n	8008f9e <_raise_r+0x12>
 8008fce:	2400      	movs	r4, #0
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fd6:	4798      	blx	r3
 8008fd8:	2000      	movs	r0, #0
 8008fda:	e7e0      	b.n	8008f9e <_raise_r+0x12>

08008fdc <raise>:
 8008fdc:	4b02      	ldr	r3, [pc, #8]	; (8008fe8 <raise+0xc>)
 8008fde:	4601      	mov	r1, r0
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	f7ff bfd3 	b.w	8008f8c <_raise_r>
 8008fe6:	bf00      	nop
 8008fe8:	20000040 	.word	0x20000040

08008fec <_kill_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	2300      	movs	r3, #0
 8008ff0:	4d06      	ldr	r5, [pc, #24]	; (800900c <_kill_r+0x20>)
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	f7f9 f980 	bl	80022fe <_kill>
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	d102      	bne.n	8009008 <_kill_r+0x1c>
 8009002:	682b      	ldr	r3, [r5, #0]
 8009004:	b103      	cbz	r3, 8009008 <_kill_r+0x1c>
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	bd38      	pop	{r3, r4, r5, pc}
 800900a:	bf00      	nop
 800900c:	200002b0 	.word	0x200002b0

08009010 <_getpid_r>:
 8009010:	f7f9 b96e 	b.w	80022f0 <_getpid>

08009014 <__sread>:
 8009014:	b510      	push	{r4, lr}
 8009016:	460c      	mov	r4, r1
 8009018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800901c:	f000 f894 	bl	8009148 <_read_r>
 8009020:	2800      	cmp	r0, #0
 8009022:	bfab      	itete	ge
 8009024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009026:	89a3      	ldrhlt	r3, [r4, #12]
 8009028:	181b      	addge	r3, r3, r0
 800902a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800902e:	bfac      	ite	ge
 8009030:	6563      	strge	r3, [r4, #84]	; 0x54
 8009032:	81a3      	strhlt	r3, [r4, #12]
 8009034:	bd10      	pop	{r4, pc}

08009036 <__swrite>:
 8009036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903a:	461f      	mov	r7, r3
 800903c:	898b      	ldrh	r3, [r1, #12]
 800903e:	4605      	mov	r5, r0
 8009040:	05db      	lsls	r3, r3, #23
 8009042:	460c      	mov	r4, r1
 8009044:	4616      	mov	r6, r2
 8009046:	d505      	bpl.n	8009054 <__swrite+0x1e>
 8009048:	2302      	movs	r3, #2
 800904a:	2200      	movs	r2, #0
 800904c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009050:	f000 f868 	bl	8009124 <_lseek_r>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	4632      	mov	r2, r6
 8009058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	4628      	mov	r0, r5
 8009060:	463b      	mov	r3, r7
 8009062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906a:	f000 b817 	b.w	800909c <_write_r>

0800906e <__sseek>:
 800906e:	b510      	push	{r4, lr}
 8009070:	460c      	mov	r4, r1
 8009072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009076:	f000 f855 	bl	8009124 <_lseek_r>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	bf15      	itete	ne
 8009080:	6560      	strne	r0, [r4, #84]	; 0x54
 8009082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800908a:	81a3      	strheq	r3, [r4, #12]
 800908c:	bf18      	it	ne
 800908e:	81a3      	strhne	r3, [r4, #12]
 8009090:	bd10      	pop	{r4, pc}

08009092 <__sclose>:
 8009092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009096:	f000 b813 	b.w	80090c0 <_close_r>
	...

0800909c <_write_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	2200      	movs	r2, #0
 80090a6:	4d05      	ldr	r5, [pc, #20]	; (80090bc <_write_r+0x20>)
 80090a8:	602a      	str	r2, [r5, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	f7f9 f95e 	bl	800236c <_write>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_write_r+0x1e>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_write_r+0x1e>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	200002b0 	.word	0x200002b0

080090c0 <_close_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	2300      	movs	r3, #0
 80090c4:	4d05      	ldr	r5, [pc, #20]	; (80090dc <_close_r+0x1c>)
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7f9 f96a 	bl	80023a4 <_close>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_close_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_close_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	200002b0 	.word	0x200002b0

080090e0 <_fstat_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	2300      	movs	r3, #0
 80090e4:	4d06      	ldr	r5, [pc, #24]	; (8009100 <_fstat_r+0x20>)
 80090e6:	4604      	mov	r4, r0
 80090e8:	4608      	mov	r0, r1
 80090ea:	4611      	mov	r1, r2
 80090ec:	602b      	str	r3, [r5, #0]
 80090ee:	f7f9 f964 	bl	80023ba <_fstat>
 80090f2:	1c43      	adds	r3, r0, #1
 80090f4:	d102      	bne.n	80090fc <_fstat_r+0x1c>
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	b103      	cbz	r3, 80090fc <_fstat_r+0x1c>
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	bd38      	pop	{r3, r4, r5, pc}
 80090fe:	bf00      	nop
 8009100:	200002b0 	.word	0x200002b0

08009104 <_isatty_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	2300      	movs	r3, #0
 8009108:	4d05      	ldr	r5, [pc, #20]	; (8009120 <_isatty_r+0x1c>)
 800910a:	4604      	mov	r4, r0
 800910c:	4608      	mov	r0, r1
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	f7f9 f962 	bl	80023d8 <_isatty>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_isatty_r+0x1a>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_isatty_r+0x1a>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	200002b0 	.word	0x200002b0

08009124 <_lseek_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	4611      	mov	r1, r2
 800912c:	2200      	movs	r2, #0
 800912e:	4d05      	ldr	r5, [pc, #20]	; (8009144 <_lseek_r+0x20>)
 8009130:	602a      	str	r2, [r5, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	f7f9 f95a 	bl	80023ec <_lseek>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d102      	bne.n	8009142 <_lseek_r+0x1e>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	b103      	cbz	r3, 8009142 <_lseek_r+0x1e>
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	bd38      	pop	{r3, r4, r5, pc}
 8009144:	200002b0 	.word	0x200002b0

08009148 <_read_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	4611      	mov	r1, r2
 8009150:	2200      	movs	r2, #0
 8009152:	4d05      	ldr	r5, [pc, #20]	; (8009168 <_read_r+0x20>)
 8009154:	602a      	str	r2, [r5, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	f7f9 f8eb 	bl	8002332 <_read>
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	d102      	bne.n	8009166 <_read_r+0x1e>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	b103      	cbz	r3, 8009166 <_read_r+0x1e>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	200002b0 	.word	0x200002b0

0800916c <_init>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	bf00      	nop
 8009170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009172:	bc08      	pop	{r3}
 8009174:	469e      	mov	lr, r3
 8009176:	4770      	bx	lr

08009178 <_fini>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	bf00      	nop
 800917c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917e:	bc08      	pop	{r3}
 8009180:	469e      	mov	lr, r3
 8009182:	4770      	bx	lr
