
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc04  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006a710  0800cdf0  0800cdf0  0001cdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08077500  08077500  000900b4  2**0
                  CONTENTS
  4 .ARM          00000008  08077500  08077500  00087500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08077508  08077508  000900b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08077508  08077508  00087508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807750c  0807750c  0008750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08077510  00090000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b3c  200000b4  080775c4  000900b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  080775c4  00090bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000900b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176e0  00000000  00000000  000900dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b9c  00000000  00000000  000a77bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  000ac360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  000adaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf97  00000000  00000000  000aef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d463  00000000  00000000  000cbeaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad9a  00000000  00000000  000e9312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001740ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b0  00000000  00000000  001740fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000b4 	.word	0x200000b4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800cdd4 	.word	0x0800cdd4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000b8 	.word	0x200000b8
 8000224:	0800cdd4 	.word	0x0800cdd4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b976 	b.w	8000e78 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	4688      	mov	r8, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14d      	bne.n	8000c50 <__udivmoddi4+0xac>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	d968      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	b152      	cbz	r2, 8000bd6 <__udivmoddi4+0x32>
 8000bc0:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc4:	f1c2 0120 	rsb	r1, r2, #32
 8000bc8:	fa20 f101 	lsr.w	r1, r0, r1
 8000bcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd0:	ea41 0803 	orr.w	r8, r1, r3
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bda:	fbb8 f7f1 	udiv	r7, r8, r1
 8000bde:	fa1f fe8c 	uxth.w	lr, ip
 8000be2:	fb01 8817 	mls	r8, r1, r7, r8
 8000be6:	fb07 f00e 	mul.w	r0, r7, lr
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x66>
 8000bf4:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf8:	f107 35ff 	add.w	r5, r7, #4294967295
 8000bfc:	f080 811e 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f240 811b 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c06:	3f02      	subs	r7, #2
 8000c08:	4463      	add	r3, ip
 8000c0a:	1a1b      	subs	r3, r3, r0
 8000c0c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c10:	fb01 3310 	mls	r3, r1, r0, r3
 8000c14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c18:	b2a4      	uxth	r4, r4
 8000c1a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x94>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8109 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8106 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c34:	4464      	add	r4, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	2100      	movs	r1, #0
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa8>
 8000c44:	2300      	movs	r3, #0
 8000c46:	40d4      	lsrs	r4, r2
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	f000 80ee 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	e9c6 0500 	strd	r0, r5, [r6]
 8000c60:	4608      	mov	r0, r1
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	42ab      	cmp	r3, r5
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80fc 	bhi.w	8000e70 <__udivmoddi4+0x2cc>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4698      	mov	r8, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d0e2      	beq.n	8000c4c <__udivmoddi4+0xa8>
 8000c86:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8a:	e7df      	b.n	8000c4c <__udivmoddi4+0xa8>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8091 	bne.w	8000dbc <__udivmoddi4+0x218>
 8000c9a:	eba1 000c 	sub.w	r0, r1, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cac:	fb07 0013 	mls	r0, r7, r3, r0
 8000cb0:	0c25      	lsrs	r5, r4, #16
 8000cb2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	42a8      	cmp	r0, r5
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0505 	adds.w	r5, ip, r5
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	42a8      	cmp	r0, r5
 8000cca:	f200 80ce 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a2d      	subs	r5, r5, r0
 8000cd2:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cd6:	fb07 5510 	mls	r5, r7, r0, r5
 8000cda:	fb0e fe00 	mul.w	lr, lr, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80b6 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79e      	b.n	8000c42 <__udivmoddi4+0x9e>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fbba f8f9 	udiv	r8, sl, r9
 8000d1e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d22:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d26:	408d      	lsls	r5, r1
 8000d28:	fa1f fe8c 	uxth.w	lr, ip
 8000d2c:	431d      	orrs	r5, r3
 8000d2e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d32:	fb08 f00e 	mul.w	r0, r8, lr
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d3c:	42a0      	cmp	r0, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1a24      	subs	r4, r4, r0
 8000d5e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d62:	fb09 4410 	mls	r4, r9, r0, r4
 8000d66:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6a:	b2ad      	uxth	r5, r5
 8000d6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9502 	umull	r9, r5, r0, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2d0>
 8000da0:	ebb3 0208 	subs.w	r2, r3, r8
 8000da4:	eb64 040e 	sbc.w	r4, r4, lr
 8000da8:	fa22 f301 	lsr.w	r3, r2, r1
 8000dac:	fa04 f707 	lsl.w	r7, r4, r7
 8000db0:	431f      	orrs	r7, r3
 8000db2:	40cc      	lsrs	r4, r1
 8000db4:	e9c6 7400 	strd	r7, r4, [r6]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa8>
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	f1c2 0120 	rsb	r1, r2, #32
 8000dc4:	fa25 f301 	lsr.w	r3, r5, r1
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa20 f101 	lsr.w	r1, r0, r1
 8000dd0:	4095      	lsls	r5, r2
 8000dd2:	430d      	orrs	r5, r1
 8000dd4:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dd8:	fb07 3311 	mls	r3, r7, r1, r3
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	0c28      	lsrs	r0, r5, #16
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	fb01 f30e 	mul.w	r3, r1, lr
 8000dea:	4283      	cmp	r3, r0
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0000 	adds.w	r0, ip, r0
 8000df6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	4283      	cmp	r3, r0
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3902      	subs	r1, #2
 8000e02:	4460      	add	r0, ip
 8000e04:	1ac0      	subs	r0, r0, r3
 8000e06:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e0a:	fb07 0013 	mls	r0, r7, r3, r0
 8000e0e:	b2ad      	uxth	r5, r5
 8000e10:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e14:	fb03 f00e 	mul.w	r0, r3, lr
 8000e18:	42a8      	cmp	r0, r5
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e20:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	42a8      	cmp	r0, r5
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3b02      	subs	r3, #2
 8000e2c:	4465      	add	r5, ip
 8000e2e:	1a28      	subs	r0, r5, r0
 8000e30:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e707      	b.n	8000c4c <__udivmoddi4+0xa8>
 8000e3c:	462f      	mov	r7, r5
 8000e3e:	e6e4      	b.n	8000c0a <__udivmoddi4+0x66>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f9      	b.n	8000c38 <__udivmoddi4+0x94>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4643      	mov	r3, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4628      	mov	r0, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4641      	mov	r1, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	4464      	add	r4, ip
 8000e66:	3802      	subs	r0, #2
 8000e68:	e747      	b.n	8000cfa <__udivmoddi4+0x156>
 8000e6a:	3b02      	subs	r3, #2
 8000e6c:	4465      	add	r5, ip
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e706      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e74:	4631      	mov	r1, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa8>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <Check_touchkey>:
#include "rtc.h"
#include "pet.h"
#include "alarm.h"
#include "esp8266.h"
uint8_t Check_touchkey(const int *constraints,
		strType_XPT2046_Coordinate *pDisplayCoordinate) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	8812      	ldrh	r2, [r2, #0]
			&& constraints[1] >= pDisplayCoordinate->x
			&& constraints[2] <= pDisplayCoordinate->y
			&& constraints[3] >= pDisplayCoordinate->y);
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	dc16      	bgt.n	8000ec0 <Check_touchkey+0x44>
			&& constraints[1] >= pDisplayCoordinate->x
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3304      	adds	r3, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	8812      	ldrh	r2, [r2, #0]
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	db0f      	blt.n	8000ec0 <Check_touchkey+0x44>
			&& constraints[2] <= pDisplayCoordinate->y
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	8852      	ldrh	r2, [r2, #2]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	dc08      	bgt.n	8000ec0 <Check_touchkey+0x44>
			&& constraints[3] >= pDisplayCoordinate->y);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	8852      	ldrh	r2, [r2, #2]
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	db01      	blt.n	8000ec0 <Check_touchkey+0x44>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <Check_touchkey+0x46>
 8000ec0:	2300      	movs	r3, #0
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000ec2:	73fb      	strb	r3, [r7, #15]
	return match;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <Render>:

void Render(uint8_t *mode_new, uint8_t *render_status,
		const unsigned char *petStats) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
	//Not Render if done
	if (*render_status == 1)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d033      	beq.n	8000f4c <Render+0x7c>
		return;

	//Mode 0 = Home, Mode 1 = Drink Water, Mode 2 = Toggle Dark Mode, Mode 3 = Stats,
	switch (*mode_new) {
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d82b      	bhi.n	8000f44 <Render+0x74>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <Render+0x24>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000f11 	.word	0x08000f11
 8000ef8:	08000f17 	.word	0x08000f17
 8000efc:	08000f23 	.word	0x08000f23
 8000f00:	08000f2f 	.word	0x08000f2f
 8000f04:	08000f35 	.word	0x08000f35
 8000f08:	08000f3b 	.word	0x08000f3b
 8000f0c:	08000f41 	.word	0x08000f41
	case (0):
		UI_Home();
 8000f10:	f000 f8e8 	bl	80010e4 <UI_Home>
		break;
 8000f14:	e016      	b.n	8000f44 <Render+0x74>
	case (1):
		UI_Drink_Water();
 8000f16:	f000 f81d 	bl	8000f54 <UI_Drink_Water>
		*mode_new = 0;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
		break;
 8000f20:	e010      	b.n	8000f44 <Render+0x74>
	case (2):
		LCD_Darkmode_Toggle();
 8000f22:	f001 fef9 	bl	8002d18 <LCD_Darkmode_Toggle>
		*mode_new = 0;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
		break;
 8000f2c:	e00a      	b.n	8000f44 <Render+0x74>
	case (3):
		UI_Stats();
 8000f2e:	f000 fa25 	bl	800137c <UI_Stats>
		break;
 8000f32:	e007      	b.n	8000f44 <Render+0x74>
	case (4):
		UI_Config();
 8000f34:	f000 fbd6 	bl	80016e4 <UI_Config>
		break;
 8000f38:	e004      	b.n	8000f44 <Render+0x74>
	case (5):
		UI_Time_set();
 8000f3a:	f000 fc03 	bl	8001744 <UI_Time_set>
		break;
 8000f3e:	e001      	b.n	8000f44 <Render+0x74>
	case (6):
		UI_Set();
 8000f40:	f000 fb2e 	bl	80015a0 <UI_Set>
	}
	*render_status = 1;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e000      	b.n	8000f4e <Render+0x7e>
		return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <UI_Drink_Water>:

void UI_Drink_Water() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8000f58:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f5c:	22f0      	movs	r2, #240	; 0xf0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2000      	movs	r0, #0
 8000f62:	f001 fbad 	bl	80026c0 <LCD_Clear>
	extern uint8_t darkmode_toggle;

	LCD_DrawString(10, 220, "Drinked a glass of water");
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <UI_Drink_Water+0xcc>)
 8000f68:	21dc      	movs	r1, #220	; 0xdc
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f001 fca0 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(10, 250, "Return to home in 2s");
 8000f70:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <UI_Drink_Water+0xd0>)
 8000f72:	21fa      	movs	r1, #250	; 0xfa
 8000f74:	200a      	movs	r0, #10
 8000f76:	f001 fc9b 	bl	80028b0 <LCD_DrawString>
	if(!darkmode_toggle) UI_Home_Display_Pet(60,70,water1);
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <UI_Drink_Water+0xd4>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <UI_Drink_Water+0x3a>
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <UI_Drink_Water+0xd8>)
 8000f84:	2146      	movs	r1, #70	; 0x46
 8000f86:	203c      	movs	r0, #60	; 0x3c
 8000f88:	f000 f988 	bl	800129c <UI_Home_Display_Pet>
 8000f8c:	e004      	b.n	8000f98 <UI_Drink_Water+0x44>
	else UI_Home_Display_Pet(60,70,water1_night);
 8000f8e:	4a28      	ldr	r2, [pc, #160]	; (8001030 <UI_Drink_Water+0xdc>)
 8000f90:	2146      	movs	r1, #70	; 0x46
 8000f92:	203c      	movs	r0, #60	; 0x3c
 8000f94:	f000 f982 	bl	800129c <UI_Home_Display_Pet>

	UI_WATER_WIFI_HANDLE(1000);
 8000f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9c:	f000 f856 	bl	800104c <UI_WATER_WIFI_HANDLE>

	LCD_Clear(10, 250, 240, 320);
 8000fa0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fa4:	22f0      	movs	r2, #240	; 0xf0
 8000fa6:	21fa      	movs	r1, #250	; 0xfa
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f001 fb89 	bl	80026c0 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 1s");
 8000fae:	4a21      	ldr	r2, [pc, #132]	; (8001034 <UI_Drink_Water+0xe0>)
 8000fb0:	21fa      	movs	r1, #250	; 0xfa
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f001 fc7c 	bl	80028b0 <LCD_DrawString>
	if(!darkmode_toggle) UI_Home_Display_Pet(60,70,water2);
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <UI_Drink_Water+0xd4>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d105      	bne.n	8000fcc <UI_Drink_Water+0x78>
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <UI_Drink_Water+0xe4>)
 8000fc2:	2146      	movs	r1, #70	; 0x46
 8000fc4:	203c      	movs	r0, #60	; 0x3c
 8000fc6:	f000 f969 	bl	800129c <UI_Home_Display_Pet>
 8000fca:	e004      	b.n	8000fd6 <UI_Drink_Water+0x82>
	else UI_Home_Display_Pet(60,70,water2_night);
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <UI_Drink_Water+0xe8>)
 8000fce:	2146      	movs	r1, #70	; 0x46
 8000fd0:	203c      	movs	r0, #60	; 0x3c
 8000fd2:	f000 f963 	bl	800129c <UI_Home_Display_Pet>
	UI_WATER_WIFI_HANDLE(1000);
 8000fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fda:	f000 f837 	bl	800104c <UI_WATER_WIFI_HANDLE>

	LCD_Clear(10, 250, 240, 320);
 8000fde:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fe2:	22f0      	movs	r2, #240	; 0xf0
 8000fe4:	21fa      	movs	r1, #250	; 0xfa
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f001 fb6a 	bl	80026c0 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 0s");
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <UI_Drink_Water+0xec>)
 8000fee:	21fa      	movs	r1, #250	; 0xfa
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f001 fc5d 	bl	80028b0 <LCD_DrawString>
	if(!darkmode_toggle) UI_Home_Display_Pet(60,70,water3);
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <UI_Drink_Water+0xd4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d105      	bne.n	800100a <UI_Drink_Water+0xb6>
 8000ffe:	4a11      	ldr	r2, [pc, #68]	; (8001044 <UI_Drink_Water+0xf0>)
 8001000:	2146      	movs	r1, #70	; 0x46
 8001002:	203c      	movs	r0, #60	; 0x3c
 8001004:	f000 f94a 	bl	800129c <UI_Home_Display_Pet>
 8001008:	e004      	b.n	8001014 <UI_Drink_Water+0xc0>
	else UI_Home_Display_Pet(60,70,water3_night);
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <UI_Drink_Water+0xf4>)
 800100c:	2146      	movs	r1, #70	; 0x46
 800100e:	203c      	movs	r0, #60	; 0x3c
 8001010:	f000 f944 	bl	800129c <UI_Home_Display_Pet>
	UI_WATER_WIFI_HANDLE(1000);
 8001014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001018:	f000 f818 	bl	800104c <UI_WATER_WIFI_HANDLE>

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	0800cdf0 	.word	0x0800cdf0
 8001024:	0800ce0c 	.word	0x0800ce0c
 8001028:	20000150 	.word	0x20000150
 800102c:	0804ce78 	.word	0x0804ce78
 8001030:	08053f00 	.word	0x08053f00
 8001034:	0800ce24 	.word	0x0800ce24
 8001038:	0805af88 	.word	0x0805af88
 800103c:	08062010 	.word	0x08062010
 8001040:	0800ce3c 	.word	0x0800ce3c
 8001044:	08069098 	.word	0x08069098
 8001048:	08070120 	.word	0x08070120

0800104c <UI_WATER_WIFI_HANDLE>:

void UI_WATER_WIFI_HANDLE(uint8_t time_delay){
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	int i;
	extern uint8_t USART_WATER_FLAG;
	extern uint8_t USART_GET_TIME_FLAG;
	extern uint8_t esp8266_step_flag;
	extern uint8_t USART_EXERCISE_FLAG;
	for(i=0; i< time_delay; ++i){//Don't Waste Time
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e031      	b.n	80010c0 <UI_WATER_WIFI_HANDLE+0x74>
		  //Upload Exercise Data
		  if(USART_EXERCISE_FLAG && !USART_GET_TIME_FLAG){
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <UI_WATER_WIFI_HANDLE+0x88>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00f      	beq.n	8001084 <UI_WATER_WIFI_HANDLE+0x38>
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <UI_WATER_WIFI_HANDLE+0x8c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10b      	bne.n	8001084 <UI_WATER_WIFI_HANDLE+0x38>
			  if(USART_EXERCISE_FLAG==1) {esp8266_step_flag = 0; USART_EXERCISE_FLAG=2;} //Reset Step Flag
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <UI_WATER_WIFI_HANDLE+0x88>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <UI_WATER_WIFI_HANDLE+0x34>
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <UI_WATER_WIFI_HANDLE+0x90>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <UI_WATER_WIFI_HANDLE+0x88>)
 800107c:	2202      	movs	r2, #2
 800107e:	701a      	strb	r2, [r3, #0]
			  esp8266_update_exercise();
 8001080:	f001 f8cc 	bl	800221c <esp8266_update_exercise>
		  }

		  //Upload drink water data
		  if(USART_WATER_FLAG && !USART_GET_TIME_FLAG && !USART_EXERCISE_FLAG){
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <UI_WATER_WIFI_HANDLE+0x94>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <UI_WATER_WIFI_HANDLE+0x68>
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <UI_WATER_WIFI_HANDLE+0x8c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10f      	bne.n	80010b4 <UI_WATER_WIFI_HANDLE+0x68>
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <UI_WATER_WIFI_HANDLE+0x88>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10b      	bne.n	80010b4 <UI_WATER_WIFI_HANDLE+0x68>
			  if(USART_WATER_FLAG==1) {esp8266_step_flag = 0;USART_WATER_FLAG=2;} //Reset Step Flag
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <UI_WATER_WIFI_HANDLE+0x94>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d105      	bne.n	80010b0 <UI_WATER_WIFI_HANDLE+0x64>
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <UI_WATER_WIFI_HANDLE+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <UI_WATER_WIFI_HANDLE+0x94>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
			  esp8266_update_water();
 80010b0:	f001 f876 	bl	80021a0 <esp8266_update_water>
		  }
	  HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f006 fa6d 	bl	8007594 <HAL_Delay>
	for(i=0; i< time_delay; ++i){//Don't Waste Time
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbc9      	blt.n	800105c <UI_WATER_WIFI_HANDLE+0x10>
	}
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000392 	.word	0x20000392
 80010d8:	20000390 	.word	0x20000390
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000391 	.word	0x20000391

080010e4 <UI_Home>:

void UI_Home() {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

	extern const unsigned char *petStats;
	UI_Home_Display_Button();
 80010e8:	f000 f80e 	bl	8001108 <UI_Home_Display_Button>
	UI_Home_Display_Pet(60, 70, petStats);
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <UI_Home+0x20>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	2146      	movs	r1, #70	; 0x46
 80010f4:	203c      	movs	r0, #60	; 0x3c
 80010f6:	f000 f8d1 	bl	800129c <UI_Home_Display_Pet>
	UI_Home_Display_DHT11();
 80010fa:	f000 f8e1 	bl	80012c0 <UI_Home_Display_DHT11>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000000c 	.word	0x2000000c

08001108 <UI_Home_Display_Button>:

void UI_Home_Display_Button() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 800110c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001110:	22f0      	movs	r2, #240	; 0xf0
 8001112:	2100      	movs	r1, #0
 8001114:	2000      	movs	r0, #0
 8001116:	f001 fad3 	bl	80026c0 <LCD_Clear>
	LCD_DrawString(2, 10, "Config");
 800111a:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <UI_Home_Display_Button+0x80>)
 800111c:	210a      	movs	r1, #10
 800111e:	2002      	movs	r0, #2
 8001120:	f001 fbc6 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(200, 10, "Stats");
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <UI_Home_Display_Button+0x84>)
 8001126:	210a      	movs	r1, #10
 8001128:	20c8      	movs	r0, #200	; 0xc8
 800112a:	f001 fbc1 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(40, 220, "Set");
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <UI_Home_Display_Button+0x88>)
 8001130:	21dc      	movs	r1, #220	; 0xdc
 8001132:	2028      	movs	r0, #40	; 0x28
 8001134:	f001 fbbc 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(40, 240, "Exercise");
 8001138:	4a16      	ldr	r2, [pc, #88]	; (8001194 <UI_Home_Display_Button+0x8c>)
 800113a:	21f0      	movs	r1, #240	; 0xf0
 800113c:	2028      	movs	r0, #40	; 0x28
 800113e:	f001 fbb7 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(40, 260, "Timer");
 8001142:	4a15      	ldr	r2, [pc, #84]	; (8001198 <UI_Home_Display_Button+0x90>)
 8001144:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001148:	2028      	movs	r0, #40	; 0x28
 800114a:	f001 fbb1 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(140, 220, "Drink");
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <UI_Home_Display_Button+0x94>)
 8001150:	21dc      	movs	r1, #220	; 0xdc
 8001152:	208c      	movs	r0, #140	; 0x8c
 8001154:	f001 fbac 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(140, 240, "water");
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <UI_Home_Display_Button+0x98>)
 800115a:	21f0      	movs	r1, #240	; 0xf0
 800115c:	208c      	movs	r0, #140	; 0x8c
 800115e:	f001 fba7 	bl	80028b0 <LCD_DrawString>
	extern uint8_t ADC_DARKMODE_TOGGLE;
	if(!ADC_DARKMODE_TOGGLE){
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <UI_Home_Display_Button+0x9c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <UI_Home_Display_Button+0x7a>
		LCD_DrawString(200, 260, "Dark");
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <UI_Home_Display_Button+0xa0>)
 800116c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001170:	20c8      	movs	r0, #200	; 0xc8
 8001172:	f001 fb9d 	bl	80028b0 <LCD_DrawString>
		LCD_DrawString(200, 280, "mode");
 8001176:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <UI_Home_Display_Button+0xa4>)
 8001178:	f44f 718c 	mov.w	r1, #280	; 0x118
 800117c:	20c8      	movs	r0, #200	; 0xc8
 800117e:	f001 fb97 	bl	80028b0 <LCD_DrawString>
	}
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	0800ce54 	.word	0x0800ce54
 800118c:	0800ce5c 	.word	0x0800ce5c
 8001190:	0800ce64 	.word	0x0800ce64
 8001194:	0800ce68 	.word	0x0800ce68
 8001198:	0800ce74 	.word	0x0800ce74
 800119c:	0800ce7c 	.word	0x0800ce7c
 80011a0:	0800ce84 	.word	0x0800ce84
 80011a4:	20000395 	.word	0x20000395
 80011a8:	0800ce8c 	.word	0x0800ce8c
 80011ac:	0800ce94 	.word	0x0800ce94

080011b0 <UI_Home_Display_Date>:

void UI_Home_Display_Date(uint16_t year, uint8_t month, uint8_t day) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
 80011ba:	460b      	mov	r3, r1
 80011bc:	717b      	strb	r3, [r7, #5]
 80011be:	4613      	mov	r3, r2
 80011c0:	713b      	strb	r3, [r7, #4]
	char str[10];

	//Draw Year
	sprintf(str, "%04i", year);
 80011c2:	88fa      	ldrh	r2, [r7, #6]
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4915      	ldr	r1, [pc, #84]	; (8001220 <UI_Home_Display_Date+0x70>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fad8 	bl	8005780 <sprintf_>
	LCD_DrawString(86, 10, str);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	461a      	mov	r2, r3
 80011d6:	210a      	movs	r1, #10
 80011d8:	2056      	movs	r0, #86	; 0x56
 80011da:	f001 fb69 	bl	80028b0 <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", month);
 80011de:	797a      	ldrb	r2, [r7, #5]
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	490f      	ldr	r1, [pc, #60]	; (8001224 <UI_Home_Display_Date+0x74>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 faca 	bl	8005780 <sprintf_>
	LCD_DrawString(125, 10, str);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	461a      	mov	r2, r3
 80011f2:	210a      	movs	r1, #10
 80011f4:	207d      	movs	r0, #125	; 0x7d
 80011f6:	f001 fb5b 	bl	80028b0 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", day);
 80011fa:	793a      	ldrb	r2, [r7, #4]
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4908      	ldr	r1, [pc, #32]	; (8001224 <UI_Home_Display_Date+0x74>)
 8001202:	4618      	mov	r0, r3
 8001204:	f004 fabc 	bl	8005780 <sprintf_>
	LCD_DrawString(145, 10, str);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	461a      	mov	r2, r3
 800120e:	210a      	movs	r1, #10
 8001210:	2091      	movs	r0, #145	; 0x91
 8001212:	f001 fb4d 	bl	80028b0 <LCD_DrawString>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	0800ce9c 	.word	0x0800ce9c
 8001224:	0800cea4 	.word	0x0800cea4

08001228 <UI_Home_Display_Time>:

void UI_Home_Display_Time(uint8_t hour, uint8_t minute, uint8_t second) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	460b      	mov	r3, r1
 8001234:	71bb      	strb	r3, [r7, #6]
 8001236:	4613      	mov	r3, r2
 8001238:	717b      	strb	r3, [r7, #5]
	char str[10];

	//Draw Hour
	sprintf(str, "%02i", hour);
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4915      	ldr	r1, [pc, #84]	; (8001298 <UI_Home_Display_Time+0x70>)
 8001242:	4618      	mov	r0, r3
 8001244:	f004 fa9c 	bl	8005780 <sprintf_>
	LCD_DrawString(95, 30, str);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	461a      	mov	r2, r3
 800124e:	211e      	movs	r1, #30
 8001250:	205f      	movs	r0, #95	; 0x5f
 8001252:	f001 fb2d 	bl	80028b0 <LCD_DrawString>

	//Draw Minute
	sprintf(str, "%02i", minute);
 8001256:	79ba      	ldrb	r2, [r7, #6]
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	490e      	ldr	r1, [pc, #56]	; (8001298 <UI_Home_Display_Time+0x70>)
 800125e:	4618      	mov	r0, r3
 8001260:	f004 fa8e 	bl	8005780 <sprintf_>
	LCD_DrawString(115, 30, str);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	461a      	mov	r2, r3
 800126a:	211e      	movs	r1, #30
 800126c:	2073      	movs	r0, #115	; 0x73
 800126e:	f001 fb1f 	bl	80028b0 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", second);
 8001272:	797a      	ldrb	r2, [r7, #5]
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <UI_Home_Display_Time+0x70>)
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fa80 	bl	8005780 <sprintf_>
	LCD_DrawString(135, 30, str);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	461a      	mov	r2, r3
 8001286:	211e      	movs	r1, #30
 8001288:	2087      	movs	r0, #135	; 0x87
 800128a:	f001 fb11 	bl	80028b0 <LCD_DrawString>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	0800cea4 	.word	0x0800cea4

0800129c <UI_Home_Display_Pet>:

void UI_Home_Display_Pet(uint16_t StartX, uint16_t StartY, unsigned char *pic) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	603a      	str	r2, [r7, #0]
 80012a6:	80fb      	strh	r3, [r7, #6]
 80012a8:	460b      	mov	r3, r1
 80012aa:	80bb      	strh	r3, [r7, #4]

	LCD_DrawPicture(StartX, StartY, pic);
 80012ac:	88b9      	ldrh	r1, [r7, #4]
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fd66 	bl	8002d84 <LCD_DrawPicture>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <UI_Home_Display_DHT11>:

void UI_Home_Display_DHT11() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
	extern DHT11_datastruct DHT11_data;
	char Stemp[10];
	char Shum[10];
	sprintf(Stemp, "%02i", DHT11_data.temp_int);
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <UI_Home_Display_DHT11+0xa0>)
 80012c8:	789b      	ldrb	r3, [r3, #2]
 80012ca:	461a      	mov	r2, r3
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4924      	ldr	r1, [pc, #144]	; (8001364 <UI_Home_Display_DHT11+0xa4>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 fa54 	bl	8005780 <sprintf_>
	LCD_DrawString(10, 50, "T");
 80012d8:	4a23      	ldr	r2, [pc, #140]	; (8001368 <UI_Home_Display_DHT11+0xa8>)
 80012da:	2132      	movs	r1, #50	; 0x32
 80012dc:	200a      	movs	r0, #10
 80012de:	f001 fae7 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(0, 70, Stemp);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	461a      	mov	r2, r3
 80012e8:	2146      	movs	r1, #70	; 0x46
 80012ea:	2000      	movs	r0, #0
 80012ec:	f001 fae0 	bl	80028b0 <LCD_DrawString>
	if (LCD_GetPointPixel(240, 320) == 0x000000) {
 80012f0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80012f4:	20f0      	movs	r0, #240	; 0xf0
 80012f6:	f001 fa67 	bl	80027c8 <LCD_GetPointPixel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <UI_Home_Display_DHT11+0x50>
		LCD_DrawCircle(17, 72, 2, WHITE);
 8001300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001304:	2202      	movs	r2, #2
 8001306:	2148      	movs	r1, #72	; 0x48
 8001308:	2011      	movs	r0, #17
 800130a:	f001 fb21 	bl	8002950 <LCD_DrawCircle>
 800130e:	e005      	b.n	800131c <UI_Home_Display_DHT11+0x5c>
	} else {
		LCD_DrawCircle(17, 72, 2, BLACK);
 8001310:	2300      	movs	r3, #0
 8001312:	2202      	movs	r2, #2
 8001314:	2148      	movs	r1, #72	; 0x48
 8001316:	2011      	movs	r0, #17
 8001318:	f001 fb1a 	bl	8002950 <LCD_DrawCircle>
	}
	LCD_DrawString(20, 70, "C");
 800131c:	4a13      	ldr	r2, [pc, #76]	; (800136c <UI_Home_Display_DHT11+0xac>)
 800131e:	2146      	movs	r1, #70	; 0x46
 8001320:	2014      	movs	r0, #20
 8001322:	f001 fac5 	bl	80028b0 <LCD_DrawString>
	sprintf(Shum, "%03i", DHT11_data.humid_int);
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <UI_Home_Display_DHT11+0xa0>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	463b      	mov	r3, r7
 800132e:	4910      	ldr	r1, [pc, #64]	; (8001370 <UI_Home_Display_DHT11+0xb0>)
 8001330:	4618      	mov	r0, r3
 8001332:	f004 fa25 	bl	8005780 <sprintf_>
	LCD_DrawString(220, 50, "H");
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <UI_Home_Display_DHT11+0xb4>)
 8001338:	2132      	movs	r1, #50	; 0x32
 800133a:	20dc      	movs	r0, #220	; 0xdc
 800133c:	f001 fab8 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(205, 70, Shum);
 8001340:	463b      	mov	r3, r7
 8001342:	461a      	mov	r2, r3
 8001344:	2146      	movs	r1, #70	; 0x46
 8001346:	20cd      	movs	r0, #205	; 0xcd
 8001348:	f001 fab2 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(230, 70, "%");
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <UI_Home_Display_DHT11+0xb8>)
 800134e:	2146      	movs	r1, #70	; 0x46
 8001350:	20e6      	movs	r0, #230	; 0xe6
 8001352:	f001 faad 	bl	80028b0 <LCD_DrawString>

}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000035c 	.word	0x2000035c
 8001364:	0800cea4 	.word	0x0800cea4
 8001368:	0800ceac 	.word	0x0800ceac
 800136c:	0800ceb0 	.word	0x0800ceb0
 8001370:	0800ceb4 	.word	0x0800ceb4
 8001374:	0800cebc 	.word	0x0800cebc
 8001378:	0800cec0 	.word	0x0800cec0

0800137c <UI_Stats>:

void UI_Stats() {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001380:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001384:	22f0      	movs	r2, #240	; 0xf0
 8001386:	2100      	movs	r1, #0
 8001388:	2000      	movs	r0, #0
 800138a:	f001 f999 	bl	80026c0 <LCD_Clear>
	LCD_DrawString(40, 50, "Time since last drink");
 800138e:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <UI_Stats+0x44>)
 8001390:	2132      	movs	r1, #50	; 0x32
 8001392:	2028      	movs	r0, #40	; 0x28
 8001394:	f001 fa8c 	bl	80028b0 <LCD_DrawString>

	UI_Stats_Update();
 8001398:	f000 f81a 	bl	80013d0 <UI_Stats_Update>
	LCD_DrawString(80, 125, "Next drink");
 800139c:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <UI_Stats+0x48>)
 800139e:	217d      	movs	r1, #125	; 0x7d
 80013a0:	2050      	movs	r0, #80	; 0x50
 80013a2:	f001 fa85 	bl	80028b0 <LCD_DrawString>
	//TODO: Time Of Next Water Drinking Event
	LCD_DrawString(70, 190, "Exercise Timer");
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <UI_Stats+0x4c>)
 80013a8:	21be      	movs	r1, #190	; 0xbe
 80013aa:	2046      	movs	r0, #70	; 0x46
 80013ac:	f001 fa80 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(70, 280, "Back to home");
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <UI_Stats+0x50>)
 80013b2:	f44f 718c 	mov.w	r1, #280	; 0x118
 80013b6:	2046      	movs	r0, #70	; 0x46
 80013b8:	f001 fa7a 	bl	80028b0 <LCD_DrawString>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	0800cec4 	.word	0x0800cec4
 80013c4:	0800cedc 	.word	0x0800cedc
 80013c8:	0800cee8 	.word	0x0800cee8
 80013cc:	0800cef8 	.word	0x0800cef8

080013d0 <UI_Stats_Update>:
void UI_Stats_Update() {
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af02      	add	r7, sp, #8
	extern uint32_t lastupdate_raw, lastdrink_raw;
	uint32_t realtime_raw = RTC_raw();
 80013d6:	f004 fe21 	bl	800601c <RTC_raw>
 80013da:	61b8      	str	r0, [r7, #24]

	if (realtime_raw == lastupdate_raw)
 80013dc:	4b66      	ldr	r3, [pc, #408]	; (8001578 <UI_Stats_Update+0x1a8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	f000 80c4 	beq.w	8001570 <UI_Stats_Update+0x1a0>
		return;
	uint32_t time_diff = realtime_raw - lastdrink_raw;
 80013e8:	4b64      	ldr	r3, [pc, #400]	; (800157c <UI_Stats_Update+0x1ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]

	//Update New Last Drink
	lastupdate_raw = realtime_raw;
 80013f2:	4a61      	ldr	r2, [pc, #388]	; (8001578 <UI_Stats_Update+0x1a8>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6013      	str	r3, [r2, #0]

	char timestr[15];
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	4a61      	ldr	r2, [pc, #388]	; (8001580 <UI_Stats_Update+0x1b0>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	0adc      	lsrs	r4, r3, #11
			(time_diff % 3600) / 60, time_diff % 60);
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <UI_Stats_Update+0x1b0>)
 8001406:	fba3 1302 	umull	r1, r3, r3, r2
 800140a:	0adb      	lsrs	r3, r3, #11
 800140c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 8001416:	4a5b      	ldr	r2, [pc, #364]	; (8001584 <UI_Stats_Update+0x1b4>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	095d      	lsrs	r5, r3, #5
 800141e:	6979      	ldr	r1, [r7, #20]
 8001420:	4b58      	ldr	r3, [pc, #352]	; (8001584 <UI_Stats_Update+0x1b4>)
 8001422:	fba3 2301 	umull	r2, r3, r3, r1
 8001426:	095a      	lsrs	r2, r3, #5
 8001428:	4613      	mov	r3, r2
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	1aca      	subs	r2, r1, r3
 8001432:	1d38      	adds	r0, r7, #4
 8001434:	9200      	str	r2, [sp, #0]
 8001436:	462b      	mov	r3, r5
 8001438:	4622      	mov	r2, r4
 800143a:	4953      	ldr	r1, [pc, #332]	; (8001588 <UI_Stats_Update+0x1b8>)
 800143c:	f004 f9a0 	bl	8005780 <sprintf_>
	LCD_DrawString(75, 85, timestr);
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	461a      	mov	r2, r3
 8001444:	2155      	movs	r1, #85	; 0x55
 8001446:	204b      	movs	r0, #75	; 0x4b
 8001448:	f001 fa32 	bl	80028b0 <LCD_DrawString>
	extern DHT11_datastruct DHT11_data;
	extern int tilnext; // time till next drink
	extern uint32_t exertimer;
	extern uint8_t EXER_TIMER_SET_FLAG;

	tilnext = next - realtime_raw;
 800144c:	4b4f      	ldr	r3, [pc, #316]	; (800158c <UI_Stats_Update+0x1bc>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	461a      	mov	r2, r3
 8001456:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <UI_Stats_Update+0x1c0>)
 8001458:	601a      	str	r2, [r3, #0]
	if (tilnext < 0) {
 800145a:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <UI_Stats_Update+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	da02      	bge.n	8001468 <UI_Stats_Update+0x98>
		tilnext = 0;
 8001462:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <UI_Stats_Update+0x1c0>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
	}

	sprintf(timestr, "%02d : %02d : %02d", tilnext / 3600,
 8001468:	4b49      	ldr	r3, [pc, #292]	; (8001590 <UI_Stats_Update+0x1c0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a44      	ldr	r2, [pc, #272]	; (8001580 <UI_Stats_Update+0x1b0>)
 800146e:	fb82 1203 	smull	r1, r2, r2, r3
 8001472:	441a      	add	r2, r3
 8001474:	12d2      	asrs	r2, r2, #11
 8001476:	17db      	asrs	r3, r3, #31
 8001478:	1ad4      	subs	r4, r2, r3
			(tilnext % 3600) / 60, tilnext % 60);
 800147a:	4b45      	ldr	r3, [pc, #276]	; (8001590 <UI_Stats_Update+0x1c0>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <UI_Stats_Update+0x1b0>)
 8001480:	fb83 1302 	smull	r1, r3, r3, r2
 8001484:	4413      	add	r3, r2
 8001486:	12d9      	asrs	r1, r3, #11
 8001488:	17d3      	asrs	r3, r2, #31
 800148a:	1acb      	subs	r3, r1, r3
 800148c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", tilnext / 3600,
 8001496:	4a3b      	ldr	r2, [pc, #236]	; (8001584 <UI_Stats_Update+0x1b4>)
 8001498:	fb82 1203 	smull	r1, r2, r2, r3
 800149c:	441a      	add	r2, r3
 800149e:	1152      	asrs	r2, r2, #5
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad5      	subs	r5, r2, r3
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <UI_Stats_Update+0x1c0>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b36      	ldr	r3, [pc, #216]	; (8001584 <UI_Stats_Update+0x1b4>)
 80014aa:	fb83 1302 	smull	r1, r3, r3, r2
 80014ae:	4413      	add	r3, r2
 80014b0:	1159      	asrs	r1, r3, #5
 80014b2:	17d3      	asrs	r3, r2, #31
 80014b4:	1ac9      	subs	r1, r1, r3
 80014b6:	460b      	mov	r3, r1
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	1a5b      	subs	r3, r3, r1
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	1ad1      	subs	r1, r2, r3
 80014c0:	1d38      	adds	r0, r7, #4
 80014c2:	9100      	str	r1, [sp, #0]
 80014c4:	462b      	mov	r3, r5
 80014c6:	4622      	mov	r2, r4
 80014c8:	492f      	ldr	r1, [pc, #188]	; (8001588 <UI_Stats_Update+0x1b8>)
 80014ca:	f004 f959 	bl	8005780 <sprintf_>
	LCD_DrawString(75, 155, timestr);
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	461a      	mov	r2, r3
 80014d2:	219b      	movs	r1, #155	; 0x9b
 80014d4:	204b      	movs	r0, #75	; 0x4b
 80014d6:	f001 f9eb 	bl	80028b0 <LCD_DrawString>

	//tilexer: when will the clock ring next time
	int tilexer = exertimer - realtime_raw;
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <UI_Stats_Update+0x1c4>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	61fb      	str	r3, [r7, #28]
	if (tilexer < 0) {
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da01      	bge.n	80014ee <UI_Stats_Update+0x11e>
			tilexer = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
		}
	if(EXER_TIMER_SET_FLAG){
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <UI_Stats_Update+0x1c8>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d036      	beq.n	8001564 <UI_Stats_Update+0x194>
		sprintf(timestr, "%02d : %02d : %02d", tilexer / 3600,
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4a21      	ldr	r2, [pc, #132]	; (8001580 <UI_Stats_Update+0x1b0>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	441a      	add	r2, r3
 8001500:	12d2      	asrs	r2, r2, #11
 8001502:	17db      	asrs	r3, r3, #31
 8001504:	1ad4      	subs	r4, r2, r3
					(tilexer % 3600) / 60, tilexer % 60);
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <UI_Stats_Update+0x1b0>)
 800150a:	fb83 1302 	smull	r1, r3, r3, r2
 800150e:	4413      	add	r3, r2
 8001510:	12d9      	asrs	r1, r3, #11
 8001512:	17d3      	asrs	r3, r2, #31
 8001514:	1acb      	subs	r3, r1, r3
 8001516:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	1ad3      	subs	r3, r2, r3
		sprintf(timestr, "%02d : %02d : %02d", tilexer / 3600,
 8001520:	4a18      	ldr	r2, [pc, #96]	; (8001584 <UI_Stats_Update+0x1b4>)
 8001522:	fb82 1203 	smull	r1, r2, r2, r3
 8001526:	441a      	add	r2, r3
 8001528:	1152      	asrs	r2, r2, #5
 800152a:	17db      	asrs	r3, r3, #31
 800152c:	1ad5      	subs	r5, r2, r3
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <UI_Stats_Update+0x1b4>)
 8001532:	fb83 1302 	smull	r1, r3, r3, r2
 8001536:	4413      	add	r3, r2
 8001538:	1159      	asrs	r1, r3, #5
 800153a:	17d3      	asrs	r3, r2, #31
 800153c:	1ac9      	subs	r1, r1, r3
 800153e:	460b      	mov	r3, r1
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	1a5b      	subs	r3, r3, r1
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	1ad1      	subs	r1, r2, r3
 8001548:	1d38      	adds	r0, r7, #4
 800154a:	9100      	str	r1, [sp, #0]
 800154c:	462b      	mov	r3, r5
 800154e:	4622      	mov	r2, r4
 8001550:	490d      	ldr	r1, [pc, #52]	; (8001588 <UI_Stats_Update+0x1b8>)
 8001552:	f004 f915 	bl	8005780 <sprintf_>
		LCD_DrawString(75, 205, timestr);
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	461a      	mov	r2, r3
 800155a:	21cd      	movs	r1, #205	; 0xcd
 800155c:	204b      	movs	r0, #75	; 0x4b
 800155e:	f001 f9a7 	bl	80028b0 <LCD_DrawString>
 8001562:	e006      	b.n	8001572 <UI_Stats_Update+0x1a2>
	}else{//Timer not set
		LCD_DrawString(75, 205,  "-- : -- : --");
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <UI_Stats_Update+0x1cc>)
 8001566:	21cd      	movs	r1, #205	; 0xcd
 8001568:	204b      	movs	r0, #75	; 0x4b
 800156a:	f001 f9a1 	bl	80028b0 <LCD_DrawString>
 800156e:	e000      	b.n	8001572 <UI_Stats_Update+0x1a2>
		return;
 8001570:	bf00      	nop
	}

}
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bdb0      	pop	{r4, r5, r7, pc}
 8001578:	20000370 	.word	0x20000370
 800157c:	20000374 	.word	0x20000374
 8001580:	91a2b3c5 	.word	0x91a2b3c5
 8001584:	88888889 	.word	0x88888889
 8001588:	0800cf08 	.word	0x0800cf08
 800158c:	20000378 	.word	0x20000378
 8001590:	2000037c 	.word	0x2000037c
 8001594:	20000388 	.word	0x20000388
 8001598:	20000394 	.word	0x20000394
 800159c:	0800cf1c 	.word	0x0800cf1c

080015a0 <UI_Set>:

void UI_Set() {
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 80015a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015aa:	22f0      	movs	r2, #240	; 0xf0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2000      	movs	r0, #0
 80015b0:	f001 f886 	bl	80026c0 <LCD_Clear>
	extern exertime;
	LCD_DrawString(80, 50, "Hour");
 80015b4:	4a25      	ldr	r2, [pc, #148]	; (800164c <UI_Set+0xac>)
 80015b6:	2132      	movs	r1, #50	; 0x32
 80015b8:	2050      	movs	r0, #80	; 0x50
 80015ba:	f001 f979 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(140, 50, "Minute");
 80015be:	4a24      	ldr	r2, [pc, #144]	; (8001650 <UI_Set+0xb0>)
 80015c0:	2132      	movs	r1, #50	; 0x32
 80015c2:	208c      	movs	r0, #140	; 0x8c
 80015c4:	f001 f974 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(80, 90, " +       + ");
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <UI_Set+0xb4>)
 80015ca:	215a      	movs	r1, #90	; 0x5a
 80015cc:	2050      	movs	r0, #80	; 0x50
 80015ce:	f001 f96f 	bl	80028b0 <LCD_DrawString>
	char time[16];
	sprintf(time, "%02d : %02d", exertime / 3600, (exertime % 3600) / 60);
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <UI_Set+0xb8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <UI_Set+0xbc>)
 80015d8:	fb82 1203 	smull	r1, r2, r2, r3
 80015dc:	441a      	add	r2, r3
 80015de:	12d2      	asrs	r2, r2, #11
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad4      	subs	r4, r2, r3
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <UI_Set+0xb8>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <UI_Set+0xbc>)
 80015ea:	fb83 1302 	smull	r1, r3, r3, r2
 80015ee:	4413      	add	r3, r2
 80015f0:	12d9      	asrs	r1, r3, #11
 80015f2:	17d3      	asrs	r3, r2, #31
 80015f4:	1acb      	subs	r3, r1, r3
 80015f6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	4a17      	ldr	r2, [pc, #92]	; (8001660 <UI_Set+0xc0>)
 8001602:	fb82 1203 	smull	r1, r2, r2, r3
 8001606:	441a      	add	r2, r3
 8001608:	1152      	asrs	r2, r2, #5
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4638      	mov	r0, r7
 8001610:	4622      	mov	r2, r4
 8001612:	4914      	ldr	r1, [pc, #80]	; (8001664 <UI_Set+0xc4>)
 8001614:	f004 f8b4 	bl	8005780 <sprintf_>
	LCD_DrawString(90, 130, time);
 8001618:	463b      	mov	r3, r7
 800161a:	461a      	mov	r2, r3
 800161c:	2182      	movs	r1, #130	; 0x82
 800161e:	205a      	movs	r0, #90	; 0x5a
 8001620:	f001 f946 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(80, 170, " -       -");
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <UI_Set+0xc8>)
 8001626:	21aa      	movs	r1, #170	; 0xaa
 8001628:	2050      	movs	r0, #80	; 0x50
 800162a:	f001 f941 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(100, 240, "Set");
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <UI_Set+0xcc>)
 8001630:	21f0      	movs	r1, #240	; 0xf0
 8001632:	2064      	movs	r0, #100	; 0x64
 8001634:	f001 f93c 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(70, 280, "Back to home");
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <UI_Set+0xd0>)
 800163a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800163e:	2046      	movs	r0, #70	; 0x46
 8001640:	f001 f936 	bl	80028b0 <LCD_DrawString>
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	0800cf2c 	.word	0x0800cf2c
 8001650:	0800cf34 	.word	0x0800cf34
 8001654:	0800cf3c 	.word	0x0800cf3c
 8001658:	20000380 	.word	0x20000380
 800165c:	91a2b3c5 	.word	0x91a2b3c5
 8001660:	88888889 	.word	0x88888889
 8001664:	0800cf48 	.word	0x0800cf48
 8001668:	0800cf54 	.word	0x0800cf54
 800166c:	0800ce64 	.word	0x0800ce64
 8001670:	0800cef8 	.word	0x0800cef8

08001674 <UI_Set_Update>:
void UI_Set_Update() {
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
	extern exertime;
	char time[16];
	sprintf(time, "%02d : %02d", exertime / 3600, (exertime % 3600) / 60);
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <UI_Set_Update+0x60>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a16      	ldr	r2, [pc, #88]	; (80016d8 <UI_Set_Update+0x64>)
 8001680:	fb82 1203 	smull	r1, r2, r2, r3
 8001684:	441a      	add	r2, r3
 8001686:	12d2      	asrs	r2, r2, #11
 8001688:	17db      	asrs	r3, r3, #31
 800168a:	1ad4      	subs	r4, r2, r3
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <UI_Set_Update+0x60>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <UI_Set_Update+0x64>)
 8001692:	fb83 1302 	smull	r1, r3, r3, r2
 8001696:	4413      	add	r3, r2
 8001698:	12d9      	asrs	r1, r3, #11
 800169a:	17d3      	asrs	r3, r2, #31
 800169c:	1acb      	subs	r3, r1, r3
 800169e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <UI_Set_Update+0x68>)
 80016aa:	fb82 1203 	smull	r1, r2, r2, r3
 80016ae:	441a      	add	r2, r3
 80016b0:	1152      	asrs	r2, r2, #5
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4638      	mov	r0, r7
 80016b8:	4622      	mov	r2, r4
 80016ba:	4909      	ldr	r1, [pc, #36]	; (80016e0 <UI_Set_Update+0x6c>)
 80016bc:	f004 f860 	bl	8005780 <sprintf_>
	LCD_DrawString(90, 130, time);
 80016c0:	463b      	mov	r3, r7
 80016c2:	461a      	mov	r2, r3
 80016c4:	2182      	movs	r1, #130	; 0x82
 80016c6:	205a      	movs	r0, #90	; 0x5a
 80016c8:	f001 f8f2 	bl	80028b0 <LCD_DrawString>
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}
 80016d4:	20000380 	.word	0x20000380
 80016d8:	91a2b3c5 	.word	0x91a2b3c5
 80016dc:	88888889 	.word	0x88888889
 80016e0:	0800cf48 	.word	0x0800cf48

080016e4 <UI_Config>:

void UI_Config(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 80016e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016ec:	22f0      	movs	r2, #240	; 0xf0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2000      	movs	r0, #0
 80016f2:	f000 ffe5 	bl	80026c0 <LCD_Clear>
	LCD_DrawString(40, 50, "- Sync Time (Wifi)");
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <UI_Config+0x4c>)
 80016f8:	2132      	movs	r1, #50	; 0x32
 80016fa:	2028      	movs	r0, #40	; 0x28
 80016fc:	f001 f8d8 	bl	80028b0 <LCD_DrawString>
	extern uint8_t ADC_DARKMODE_TOGGLE;
	if (ADC_DARKMODE_TOGGLE) LCD_DrawString(40, 100, "- (On) Auto Dark Mode");
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <UI_Config+0x50>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <UI_Config+0x30>
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <UI_Config+0x54>)
 800170a:	2164      	movs	r1, #100	; 0x64
 800170c:	2028      	movs	r0, #40	; 0x28
 800170e:	f001 f8cf 	bl	80028b0 <LCD_DrawString>
 8001712:	e004      	b.n	800171e <UI_Config+0x3a>
	else LCD_DrawString(40, 100, "- (Off) Auto Dark Mode");
 8001714:	4a09      	ldr	r2, [pc, #36]	; (800173c <UI_Config+0x58>)
 8001716:	2164      	movs	r1, #100	; 0x64
 8001718:	2028      	movs	r0, #40	; 0x28
 800171a:	f001 f8c9 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(10, 280, "Back");
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <UI_Config+0x5c>)
 8001720:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001724:	200a      	movs	r0, #10
 8001726:	f001 f8c3 	bl	80028b0 <LCD_DrawString>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	0800cf60 	.word	0x0800cf60
 8001734:	20000395 	.word	0x20000395
 8001738:	0800cf74 	.word	0x0800cf74
 800173c:	0800cf8c 	.word	0x0800cf8c
 8001740:	0800cfa4 	.word	0x0800cfa4

08001744 <UI_Time_set>:

void UI_Time_set(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001748:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800174c:	22f0      	movs	r2, #240	; 0xf0
 800174e:	2100      	movs	r1, #0
 8001750:	2000      	movs	r0, #0
 8001752:	f000 ffb5 	bl	80026c0 <LCD_Clear>
	LCD_DrawString(90, 50, "Sync Time (Wifi)");
 8001756:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <UI_Time_set+0x44>)
 8001758:	2132      	movs	r1, #50	; 0x32
 800175a:	205a      	movs	r0, #90	; 0x5a
 800175c:	f001 f8a8 	bl	80028b0 <LCD_DrawString>
	LCD_DrawString(10, 280, "Back");
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <UI_Time_set+0x48>)
 8001762:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001766:	200a      	movs	r0, #10
 8001768:	f001 f8a2 	bl	80028b0 <LCD_DrawString>
	//Handle In esp8266.c
	LCD_Clear(0, 100, 250,150);
 800176c:	2396      	movs	r3, #150	; 0x96
 800176e:	22fa      	movs	r2, #250	; 0xfa
 8001770:	2164      	movs	r1, #100	; 0x64
 8001772:	2000      	movs	r0, #0
 8001774:	f000 ffa4 	bl	80026c0 <LCD_Clear>
	LCD_DrawString(20, 100, "Resetting...");
 8001778:	4a05      	ldr	r2, [pc, #20]	; (8001790 <UI_Time_set+0x4c>)
 800177a:	2164      	movs	r1, #100	; 0x64
 800177c:	2014      	movs	r0, #20
 800177e:	f001 f897 	bl	80028b0 <LCD_DrawString>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	0800cfac 	.word	0x0800cfac
 800178c:	0800cfa4 	.word	0x0800cfa4
 8001790:	0800cfc0 	.word	0x0800cfc0

08001794 <alarm_update_next>:


/*
 * Call when Initialize or Times up
 */
void alarm_update_next(){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	extern uint32_t next;
	extern DHT11_datastruct DHT11_data;

	uint32_t realtime_raw = RTC_raw();
 800179a:	f004 fc3f 	bl	800601c <RTC_raw>
 800179e:	6078      	str	r0, [r7, #4]
	uint8_t humid = DHT11_data.humid_int;
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <alarm_update_next+0x6c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = DHT11_data.temp_int;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <alarm_update_next+0x6c>)
 80017a8:	789b      	ldrb	r3, [r3, #2]
 80017aa:	70bb      	strb	r3, [r7, #2]

	next = 2400 * (1 + (humid / 100)); //humidity
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <alarm_update_next+0x70>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	095b      	lsrs	r3, r3, #5
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80017be:	fb02 f303 	mul.w	r3, r2, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <alarm_update_next+0x74>)
 80017c6:	601a      	str	r2, [r3, #0]
	if (temp > 26) {
 80017c8:	78bb      	ldrb	r3, [r7, #2]
 80017ca:	2b1a      	cmp	r3, #26
 80017cc:	d90e      	bls.n	80017ec <alarm_update_next+0x58>
		next = next / (1 + (temp - 26) / 10); //temperature
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <alarm_update_next+0x74>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	78bb      	ldrb	r3, [r7, #2]
 80017d4:	3b1a      	subs	r3, #26
 80017d6:	490d      	ldr	r1, [pc, #52]	; (800180c <alarm_update_next+0x78>)
 80017d8:	fb81 0103 	smull	r0, r1, r1, r3
 80017dc:	1089      	asrs	r1, r1, #2
 80017de:	17db      	asrs	r3, r3, #31
 80017e0:	1acb      	subs	r3, r1, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <alarm_update_next+0x74>)
 80017ea:	6013      	str	r3, [r2, #0]
	}
	next += realtime_raw;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <alarm_update_next+0x74>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <alarm_update_next+0x74>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000035c 	.word	0x2000035c
 8001804:	51eb851f 	.word	0x51eb851f
 8001808:	20000378 	.word	0x20000378
 800180c:	66666667 	.word	0x66666667

08001810 <alarm_update_last>:


void alarm_update_last(){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	extern uint32_t lastdrink_raw;
	lastdrink_raw = RTC_raw();
 8001814:	f004 fc02 	bl	800601c <RTC_raw>
 8001818:	4603      	mov	r3, r0
 800181a:	4a02      	ldr	r2, [pc, #8]	; (8001824 <alarm_update_last+0x14>)
 800181c:	6013      	str	r3, [r2, #0]
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000374 	.word	0x20000374

08001828 <alarm_times_up>:

void alarm_times_up(){
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	extern uint8_t ALARM_TIMES_UP_RENDER_FLAG;
	extern const unsigned char * petStats;
	extern uint8_t darkmode_toggle;
	  ALARM_TIMES_UP_RENDER_FLAG = 1; // Prevent Keep Updating UI
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <alarm_times_up+0x28>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
	  if(!darkmode_toggle) petStats = water1;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <alarm_times_up+0x2c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <alarm_times_up+0x1a>
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <alarm_times_up+0x30>)
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <alarm_times_up+0x34>)
 800183e:	601a      	str	r2, [r3, #0]
	  else petStats = water1_night;
}
 8001840:	e002      	b.n	8001848 <alarm_times_up+0x20>
	  else petStats = water1_night;
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <alarm_times_up+0x30>)
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <alarm_times_up+0x38>)
 8001846:	601a      	str	r2, [r3, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000393 	.word	0x20000393
 8001854:	20000150 	.word	0x20000150
 8001858:	2000000c 	.word	0x2000000c
 800185c:	0804ce78 	.word	0x0804ce78
 8001860:	08053f00 	.word	0x08053f00

08001864 <alarm_release>:

void alarm_release(){ //When User Click Drink Water
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	alarm_update_next();
 8001868:	f7ff ff94 	bl	8001794 <alarm_update_next>
	alarm_update_last();
 800186c:	f7ff ffd0 	bl	8001810 <alarm_update_last>
	extern uint8_t ALARM_TIMES_UP_RENDER_FLAG;
	ALARM_TIMES_UP_RENDER_FLAG = 0;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <alarm_release+0x1c>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
	Beep_stop();
 8001876:	f000 f873 	bl	8001960 <Beep_stop>
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000393 	.word	0x20000393

08001884 <debug_alarm_set>:

void debug_alarm_set(){ //Alarm rings after 3 second (Pressing K2)
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	extern uint32_t next;

	uint32_t realtime_raw = RTC_raw();
 800188a:	f004 fbc7 	bl	800601c <RTC_raw>
 800188e:	6078      	str	r0, [r7, #4]

	next = realtime_raw + 3;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3303      	adds	r3, #3
 8001894:	4a02      	ldr	r2, [pc, #8]	; (80018a0 <debug_alarm_set+0x1c>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000378 	.word	0x20000378

080018a4 <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <DEBUG_USART_Config+0x50>)
 80018ac:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018d0:	220c      	movs	r2, #12
 80018d2:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 80018d4:	4806      	ldr	r0, [pc, #24]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018d6:	f008 fea2 	bl	800a61e <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <DEBUG_USART_Config+0x4c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	60da      	str	r2, [r3, #12]
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200000d0 	.word	0x200000d0
 80018f4:	40013800 	.word	0x40013800

080018f8 <WIFI_USART_Config>:

//配置WiFi的通信的uart3
void WIFI_USART_Config()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    WifiUartHandle.Instance = WIFI_USART;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <WIFI_USART_Config+0x4c>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <WIFI_USART_Config+0x50>)
 8001900:	601a      	str	r2, [r3, #0]

    WifiUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <WIFI_USART_Config+0x4c>)
 8001904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001908:	605a      	str	r2, [r3, #4]
    WifiUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <WIFI_USART_Config+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    WifiUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <WIFI_USART_Config+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    WifiUartHandle.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <WIFI_USART_Config+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
    WifiUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <WIFI_USART_Config+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
    WifiUartHandle.Init.Mode = UART_MODE_TX_RX;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <WIFI_USART_Config+0x4c>)
 8001924:	220c      	movs	r2, #12
 8001926:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&WifiUartHandle);
 8001928:	4806      	ldr	r0, [pc, #24]	; (8001944 <WIFI_USART_Config+0x4c>)
 800192a:	f008 fe78 	bl	800a61e <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&WifiUartHandle,UART_IT_RXNE);
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <WIFI_USART_Config+0x4c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <WIFI_USART_Config+0x4c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0220 	orr.w	r2, r2, #32
 800193c:	60da      	str	r2, [r3, #12]
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000110 	.word	0x20000110
 8001948:	40004800 	.word	0x40004800

0800194c <Beep_start>:

void Buzzer_INIT(){
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
}

void Beep_start(){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim1;

	//Start Beeping
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001950:	2100      	movs	r1, #0
 8001952:	4802      	ldr	r0, [pc, #8]	; (800195c <Beep_start+0x10>)
 8001954:	f007 ff3a 	bl	80097cc <HAL_TIM_PWM_Start>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000198 	.word	0x20000198

08001960 <Beep_stop>:

void Beep_stop(){
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim1;
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001964:	2100      	movs	r1, #0
 8001966:	4802      	ldr	r0, [pc, #8]	; (8001970 <Beep_stop+0x10>)
 8001968:	f007 ff64 	bl	8009834 <HAL_TIM_PWM_Stop>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000198 	.word	0x20000198

08001974 <Beep_set>:

void Beep_set(uint16_t prescaler, uint16_t period, uint16_t pulse){
 8001974:	b580      	push	{r7, lr}
 8001976:	b096      	sub	sp, #88	; 0x58
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
 800197e:	460b      	mov	r3, r1
 8001980:	80bb      	strh	r3, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	807b      	strh	r3, [r7, #2]
	extern TIM_HandleTypeDef htim1;
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001986:	2100      	movs	r1, #0
 8001988:	483f      	ldr	r0, [pc, #252]	; (8001a88 <Beep_set+0x114>)
 800198a:	f007 ff53 	bl	8009834 <HAL_TIM_PWM_Stop>

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]

	  htim1.Instance = TIM1;
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <Beep_set+0x114>)
 80019d0:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <Beep_set+0x118>)
 80019d2:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = prescaler;
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <Beep_set+0x114>)
 80019d8:	6053      	str	r3, [r2, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <Beep_set+0x114>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = period;
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	4a29      	ldr	r2, [pc, #164]	; (8001a88 <Beep_set+0x114>)
 80019e4:	60d3      	str	r3, [r2, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <Beep_set+0x114>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 0;
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <Beep_set+0x114>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <Beep_set+0x114>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
	  HAL_TIM_Base_Init(&htim1);
 80019f8:	4823      	ldr	r0, [pc, #140]	; (8001a88 <Beep_set+0x114>)
 80019fa:	f007 fdff 	bl	80095fc <HAL_TIM_Base_Init>

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
	  HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8001a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481f      	ldr	r0, [pc, #124]	; (8001a88 <Beep_set+0x114>)
 8001a0c:	f008 f938 	bl	8009c80 <HAL_TIM_ConfigClockSource>

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44

	  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8001a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	481a      	ldr	r0, [pc, #104]	; (8001a88 <Beep_set+0x114>)
 8001a20:	f008 fda7 	bl	800a572 <HAL_TIMEx_MasterConfigSynchronization>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a24:	2360      	movs	r3, #96	; 0x60
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
	  sConfigOC.Pulse = pulse;
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a30:	2300      	movs	r3, #0
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63bb      	str	r3, [r7, #56]	; 0x38
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	480f      	ldr	r0, [pc, #60]	; (8001a88 <Beep_set+0x114>)
 8001a4a:	f008 f853 	bl	8009af4 <HAL_TIM_PWM_ConfigChannel>

	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a66:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
	  HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8001a6c:	f107 0308 	add.w	r3, r7, #8
 8001a70:	4619      	mov	r1, r3
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <Beep_set+0x114>)
 8001a74:	f008 fd25 	bl	800a4c2 <HAL_TIMEx_ConfigBreakDeadTime>

	  HAL_TIM_MspPostInit(&htim1);
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <Beep_set+0x114>)
 8001a7a:	f004 fc13 	bl	80062a4 <HAL_TIM_MspPostInit>
}
 8001a7e:	bf00      	nop
 8001a80:	3758      	adds	r7, #88	; 0x58
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000198 	.word	0x20000198
 8001a8c:	40012c00 	.word	0x40012c00

08001a90 <DHT11_IO_OUT>:
#include "dht11.h"
#include "printf.h"
#include "timer.h"

void DHT11_IO_OUT(void) //Set Pin As Output
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aa2:	2340      	movs	r3, #64	; 0x40
 8001aa4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <DHT11_IO_OUT+0x34>)
 8001ab8:	f006 fc60 	bl	800837c <HAL_GPIO_Init>
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40011800 	.word	0x40011800

08001ac8 <DHT11_IO_IN>:

void DHT11_IO_IN(void) //Set Pin As Input
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ada:	2340      	movs	r3, #64	; 0x40
 8001adc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <DHT11_IO_IN+0x30>)
 8001aec:	f006 fc46 	bl	800837c <HAL_GPIO_Init>
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40011800 	.word	0x40011800

08001afc <DHT11_RST>:

void DHT11_RST(){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	DHT11_IO_OUT();
 8001b00:	f7ff ffc6 	bl	8001a90 <DHT11_IO_OUT>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2140      	movs	r1, #64	; 0x40
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <DHT11_RST+0x2c>)
 8001b0a:	f006 fde6 	bl	80086da <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001b0e:	2014      	movs	r0, #20
 8001b10:	f005 fd40 	bl	8007594 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2140      	movs	r1, #64	; 0x40
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <DHT11_RST+0x2c>)
 8001b1a:	f006 fdde 	bl	80086da <HAL_GPIO_WritePin>
	delay_us(30);
 8001b1e:	201e      	movs	r0, #30
 8001b20:	f004 fe3c 	bl	800679c <delay_us>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40011800 	.word	0x40011800

08001b2c <Dht11_Check>:

uint8_t Dht11_Check(){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	71fb      	strb	r3, [r7, #7]
	DHT11_IO_IN();
 8001b36:	f7ff ffc7 	bl	8001ac8 <DHT11_IO_IN>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001b3a:	e005      	b.n	8001b48 <Dht11_Check+0x1c>
		++retry;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f004 fe2a 	bl	800679c <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001b48:	2140      	movs	r1, #64	; 0x40
 8001b4a:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <Dht11_Check+0x74>)
 8001b4c:	f006 fdae 	bl	80086ac <HAL_GPIO_ReadPin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <Dht11_Check+0x30>
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b63      	cmp	r3, #99	; 0x63
 8001b5a:	d9ef      	bls.n	8001b3c <Dht11_Check+0x10>
	}
	if(retry>=100)return 1; else retry=0;
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b63      	cmp	r3, #99	; 0x63
 8001b60:	d901      	bls.n	8001b66 <Dht11_Check+0x3a>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e018      	b.n	8001b98 <Dht11_Check+0x6c>
 8001b66:	2300      	movs	r3, #0
 8001b68:	71fb      	strb	r3, [r7, #7]
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001b6a:	e005      	b.n	8001b78 <Dht11_Check+0x4c>
		++retry;
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f004 fe12 	bl	800679c <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001b78:	2140      	movs	r1, #64	; 0x40
 8001b7a:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <Dht11_Check+0x74>)
 8001b7c:	f006 fd96 	bl	80086ac <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <Dht11_Check+0x60>
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b63      	cmp	r3, #99	; 0x63
 8001b8a:	d9ef      	bls.n	8001b6c <Dht11_Check+0x40>
	}
	if(retry>=100)return 1;
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b63      	cmp	r3, #99	; 0x63
 8001b90:	d901      	bls.n	8001b96 <Dht11_Check+0x6a>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <Dht11_Check+0x6c>
	return 0;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40011800 	.word	0x40011800

08001ba4 <DHT11_Init>:

uint8_t DHT11_Init(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	DHT11_RST();
 8001ba8:	f7ff ffa8 	bl	8001afc <DHT11_RST>
	return Dht11_Check();
 8001bac:	f7ff ffbe 	bl	8001b2c <Dht11_Check>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	//Wait For Last Set signal end
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001bc2:	e005      	b.n	8001bd0 <DHT11_ReadBit+0x18>
		++retry;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f004 fde6 	bl	800679c <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	4816      	ldr	r0, [pc, #88]	; (8001c2c <DHT11_ReadBit+0x74>)
 8001bd4:	f006 fd6a 	bl	80086ac <HAL_GPIO_ReadPin>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <DHT11_ReadBit+0x2c>
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	2b63      	cmp	r3, #99	; 0x63
 8001be2:	d9ef      	bls.n	8001bc4 <DHT11_ReadBit+0xc>
	}
	retry = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	71fb      	strb	r3, [r7, #7]
	//Wait For New Set Signal Begin
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001be8:	e005      	b.n	8001bf6 <DHT11_ReadBit+0x3e>
		++retry;
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	3301      	adds	r3, #1
 8001bee:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f004 fdd3 	bl	800679c <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001bf6:	2140      	movs	r1, #64	; 0x40
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <DHT11_ReadBit+0x74>)
 8001bfa:	f006 fd57 	bl	80086ac <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <DHT11_ReadBit+0x52>
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b63      	cmp	r3, #99	; 0x63
 8001c08:	d9ef      	bls.n	8001bea <DHT11_ReadBit+0x32>
	}
	//0: 26-28us   1:70us
	delay_us(40);
 8001c0a:	2028      	movs	r0, #40	; 0x28
 8001c0c:	f004 fdc6 	bl	800679c <delay_us>
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)) return 1; else return 0;
 8001c10:	2140      	movs	r1, #64	; 0x40
 8001c12:	4806      	ldr	r0, [pc, #24]	; (8001c2c <DHT11_ReadBit+0x74>)
 8001c14:	f006 fd4a 	bl	80086ac <HAL_GPIO_ReadPin>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <DHT11_ReadBit+0x6a>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <DHT11_ReadBit+0x6c>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40011800 	.word	0x40011800

08001c30 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
	uint8_t i,dat;
	dat=0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	71fb      	strb	r3, [r7, #7]
 8001c3e:	e00c      	b.n	8001c5a <DHT11_ReadByte+0x2a>
		dat<<=1;
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	71bb      	strb	r3, [r7, #6]
		dat|=DHT11_ReadBit();
 8001c46:	f7ff ffb7 	bl	8001bb8 <DHT11_ReadBit>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	79bb      	ldrb	r3, [r7, #6]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	3301      	adds	r3, #1
 8001c58:	71fb      	strb	r3, [r7, #7]
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b07      	cmp	r3, #7
 8001c5e:	d9ef      	bls.n	8001c40 <DHT11_ReadByte+0x10>
	}
	return dat;
 8001c60:	79bb      	ldrb	r3, [r7, #6]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <DHT11_ReadData>:


uint8_t DHT11_ReadData(DHT11_datastruct *ds){
 8001c6a:	b590      	push	{r4, r7, lr}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
	uint8_t buf[5];
	uint8_t i;
	//Reset and Check
	if(DHT11_Init()==0){
 8001c72:	f7ff ff97 	bl	8001ba4 <DHT11_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d133      	bne.n	8001ce4 <DHT11_ReadData+0x7a>
		for(i=0;i<5;++i){
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e00c      	b.n	8001c9c <DHT11_ReadData+0x32>
			buf[i]=DHT11_ReadByte();
 8001c82:	7bfc      	ldrb	r4, [r7, #15]
 8001c84:	f7ff ffd4 	bl	8001c30 <DHT11_ReadByte>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f104 0310 	add.w	r3, r4, #16
 8001c90:	443b      	add	r3, r7
 8001c92:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(i=0;i<5;++i){
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d9ef      	bls.n	8001c82 <DHT11_ReadData+0x18>
		}
	//i=0,1  = humidity  00.11
	//i=2,3  = temperature 22.33
	//i=4    = Check Sum 0+1+2+3==4
		ds->humid_int = buf[0];
 8001ca2:	7a3a      	ldrb	r2, [r7, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	701a      	strb	r2, [r3, #0]
		ds->humid_dec = buf[1];
 8001ca8:	7a7a      	ldrb	r2, [r7, #9]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	705a      	strb	r2, [r3, #1]
		ds->temp_int = buf[2];
 8001cae:	7aba      	ldrb	r2, [r7, #10]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	709a      	strb	r2, [r3, #2]
		ds->temp_dec = buf[3];
 8001cb4:	7afa      	ldrb	r2, [r7, #11]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	70da      	strb	r2, [r3, #3]
		ds->check_sum = buf[4];
 8001cba:	7b3a      	ldrb	r2, [r7, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	711a      	strb	r2, [r3, #4]
		if(ds->humid_int + ds->humid_dec + ds->temp_int + ds->temp_dec != ds->check_sum){
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	785b      	ldrb	r3, [r3, #1]
 8001cca:	4413      	add	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	7892      	ldrb	r2, [r2, #2]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	78d2      	ldrb	r2, [r2, #3]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	7912      	ldrb	r2, [r2, #4]
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <DHT11_ReadData+0x7e>
			//Wrong Data
			return 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e002      	b.n	8001cea <DHT11_ReadData+0x80>
		}
	}else return 1;//Success
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <DHT11_ReadData+0x80>
	return 0;//Not Responding
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
	...

08001cf4 <ESP8266_GPIO_Config>:
#include "ring_buffer.h"
#include "rtc.h"
uint8_t esp8266_step_flag = 9;

void ESP8266_GPIO_Config()
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
    //GPIO结构体
    GPIO_InitTypeDef  GPIO_InitStruct;
    //开启外设时钟
    ESP8266_CH_PD_CLK_ENABLE();
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <ESP8266_GPIO_Config+0x6c>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <ESP8266_GPIO_Config+0x6c>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6193      	str	r3, [r2, #24]
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <ESP8266_GPIO_Config+0x6c>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
    ESP8266_RST_CLK_ENABLE();
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <ESP8266_GPIO_Config+0x6c>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <ESP8266_GPIO_Config+0x6c>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6193      	str	r3, [r2, #24]
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <ESP8266_GPIO_Config+0x6c>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = ESP8266_CH_PD_PIN;
 8001d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ESP8266_CH_PD_PORT,&GPIO_InitStruct);
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4809      	ldr	r0, [pc, #36]	; (8001d64 <ESP8266_GPIO_Config+0x70>)
 8001d40:	f006 fb1c 	bl	800837c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP8266_RST_PIN;
 8001d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d48:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(ESP8266_RST_PORT,&GPIO_InitStruct);
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <ESP8266_GPIO_Config+0x70>)
 8001d52:	f006 fb13 	bl	800837c <HAL_GPIO_Init>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010c00 	.word	0x40010c00

08001d68 <ESP8266_RESET>:


//esp8266初始化 main调用
void ESP8266_RESET(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    ESP8266_GPIO_Config();
 8001d6c:	f7ff ffc2 	bl	8001cf4 <ESP8266_GPIO_Config>
    WIFI_USART_Config();
 8001d70:	f7ff fdc2 	bl	80018f8 <WIFI_USART_Config>

    ESP8266_CH_PD_DISABLE();
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <ESP8266_RESET+0x48>)
 8001d7c:	f006 fcad 	bl	80086da <HAL_GPIO_WritePin>
    ESP8266_CH_PD_DISABLE();
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d86:	480a      	ldr	r0, [pc, #40]	; (8001db0 <ESP8266_RESET+0x48>)
 8001d88:	f006 fca7 	bl	80086da <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8001d8c:	2064      	movs	r0, #100	; 0x64
 8001d8e:	f005 fc01 	bl	8007594 <HAL_Delay>

    ESP8266_CH_PD_ENABLE();
 8001d92:	2201      	movs	r2, #1
 8001d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <ESP8266_RESET+0x48>)
 8001d9a:	f006 fc9e 	bl	80086da <HAL_GPIO_WritePin>
    ESP8266_RST_ENABLE();
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <ESP8266_RESET+0x48>)
 8001da6:	f006 fc98 	bl	80086da <HAL_GPIO_WritePin>
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40010c00 	.word	0x40010c00

08001db4 <esp8266_cmd_reset>:


void esp8266_cmd_reset(){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001db8:	f003 fd72 	bl	80058a0 <IsDataAvailable>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00f      	beq.n	8001de2 <esp8266_cmd_reset+0x2e>
	if(!Wait_for("ready")) return;
 8001dc2:	480a      	ldr	r0, [pc, #40]	; (8001dec <esp8266_cmd_reset+0x38>)
 8001dc4:	f003 fdd6 	bl	8005974 <Wait_for>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <esp8266_cmd_reset+0x32>
	//HAL_Delay(100);
	printf("AT+RST\r\n");
 8001dce:	4808      	ldr	r0, [pc, #32]	; (8001df0 <esp8266_cmd_reset+0x3c>)
 8001dd0:	f003 fcba 	bl	8005748 <printf_>
	++esp8266_step_flag;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <esp8266_cmd_reset+0x40>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <esp8266_cmd_reset+0x40>)
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e002      	b.n	8001de8 <esp8266_cmd_reset+0x34>
	if(!IsDataAvailable()) return;
 8001de2:	bf00      	nop
 8001de4:	e000      	b.n	8001de8 <esp8266_cmd_reset+0x34>
	if(!Wait_for("ready")) return;
 8001de6:	bf00      	nop
}
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	0800cfd0 	.word	0x0800cfd0
 8001df0:	0800cfd8 	.word	0x0800cfd8
 8001df4:	20000000 	.word	0x20000000

08001df8 <esp8266_cmd_set_station>:

void esp8266_cmd_set_station(){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001dfc:	f003 fd50 	bl	80058a0 <IsDataAvailable>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00f      	beq.n	8001e26 <esp8266_cmd_set_station+0x2e>
	if(!Wait_for("ready")) return;
 8001e06:	480a      	ldr	r0, [pc, #40]	; (8001e30 <esp8266_cmd_set_station+0x38>)
 8001e08:	f003 fdb4 	bl	8005974 <Wait_for>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <esp8266_cmd_set_station+0x32>
	//HAL_Delay(100);
	printf("AT+CWMODE=1\r\n");
 8001e12:	4808      	ldr	r0, [pc, #32]	; (8001e34 <esp8266_cmd_set_station+0x3c>)
 8001e14:	f003 fc98 	bl	8005748 <printf_>
	++esp8266_step_flag;
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <esp8266_cmd_set_station+0x40>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <esp8266_cmd_set_station+0x40>)
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e002      	b.n	8001e2c <esp8266_cmd_set_station+0x34>
	if(!IsDataAvailable()) return;
 8001e26:	bf00      	nop
 8001e28:	e000      	b.n	8001e2c <esp8266_cmd_set_station+0x34>
	if(!Wait_for("ready")) return;
 8001e2a:	bf00      	nop
}
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	0800cfd0 	.word	0x0800cfd0
 8001e34:	0800cfe4 	.word	0x0800cfe4
 8001e38:	20000000 	.word	0x20000000

08001e3c <esp8266_cmd_connectWifi>:

void esp8266_cmd_connectWifi(){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001e40:	f003 fd2e 	bl	80058a0 <IsDataAvailable>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d014      	beq.n	8001e74 <esp8266_cmd_connectWifi+0x38>
	if(!Wait_for("OK")) return;
 8001e4a:	480c      	ldr	r0, [pc, #48]	; (8001e7c <esp8266_cmd_connectWifi+0x40>)
 8001e4c:	f003 fd92 	bl	8005974 <Wait_for>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <esp8266_cmd_connectWifi+0x3c>
	//HAL_Delay(100);
	extern const char* ssid;
    extern const char* wifi_password;
	printf("AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,wifi_password);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <esp8266_cmd_connectWifi+0x44>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <esp8266_cmd_connectWifi+0x48>)
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4809      	ldr	r0, [pc, #36]	; (8001e88 <esp8266_cmd_connectWifi+0x4c>)
 8001e62:	f003 fc71 	bl	8005748 <printf_>
	++esp8266_step_flag;
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <esp8266_cmd_connectWifi+0x50>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <esp8266_cmd_connectWifi+0x50>)
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e002      	b.n	8001e7a <esp8266_cmd_connectWifi+0x3e>
	if(!IsDataAvailable()) return;
 8001e74:	bf00      	nop
 8001e76:	e000      	b.n	8001e7a <esp8266_cmd_connectWifi+0x3e>
	if(!Wait_for("OK")) return;
 8001e78:	bf00      	nop
}
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	0800cff4 	.word	0x0800cff4
 8001e80:	20000004 	.word	0x20000004
 8001e84:	20000008 	.word	0x20000008
 8001e88:	0800cff8 	.word	0x0800cff8
 8001e8c:	20000000 	.word	0x20000000

08001e90 <esp8266_cmd_tcp>:

void esp8266_cmd_tcp(){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001e94:	f003 fd04 	bl	80058a0 <IsDataAvailable>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00f      	beq.n	8001ebe <esp8266_cmd_tcp+0x2e>
	if(!Wait_for("OK")) return;
 8001e9e:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <esp8266_cmd_tcp+0x38>)
 8001ea0:	f003 fd68 	bl	8005974 <Wait_for>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <esp8266_cmd_tcp+0x32>
	//HAL_Delay(100);
	printf("AT+CIPSTART=\"TCP\",\"marsohk.pythonanywhere.com\",80\r\n");
 8001eaa:	4808      	ldr	r0, [pc, #32]	; (8001ecc <esp8266_cmd_tcp+0x3c>)
 8001eac:	f003 fc4c 	bl	8005748 <printf_>
	++esp8266_step_flag;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <esp8266_cmd_tcp+0x40>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <esp8266_cmd_tcp+0x40>)
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	e002      	b.n	8001ec4 <esp8266_cmd_tcp+0x34>
	if(!IsDataAvailable()) return;
 8001ebe:	bf00      	nop
 8001ec0:	e000      	b.n	8001ec4 <esp8266_cmd_tcp+0x34>
	if(!Wait_for("OK")) return;
 8001ec2:	bf00      	nop
}
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	0800cff4 	.word	0x0800cff4
 8001ecc:	0800d010 	.word	0x0800d010
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <esp8266_cmd_trans_mode>:

void esp8266_cmd_trans_mode(){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001ed8:	f003 fce2 	bl	80058a0 <IsDataAvailable>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00f      	beq.n	8001f02 <esp8266_cmd_trans_mode+0x2e>
	if(!Wait_for("OK")) return;
 8001ee2:	480a      	ldr	r0, [pc, #40]	; (8001f0c <esp8266_cmd_trans_mode+0x38>)
 8001ee4:	f003 fd46 	bl	8005974 <Wait_for>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <esp8266_cmd_trans_mode+0x32>
	//HAL_Delay(100);
	printf("AT+CIPMODE=1\r\n");
 8001eee:	4808      	ldr	r0, [pc, #32]	; (8001f10 <esp8266_cmd_trans_mode+0x3c>)
 8001ef0:	f003 fc2a 	bl	8005748 <printf_>
	++esp8266_step_flag;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <esp8266_cmd_trans_mode+0x40>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <esp8266_cmd_trans_mode+0x40>)
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	e002      	b.n	8001f08 <esp8266_cmd_trans_mode+0x34>
	if(!IsDataAvailable()) return;
 8001f02:	bf00      	nop
 8001f04:	e000      	b.n	8001f08 <esp8266_cmd_trans_mode+0x34>
	if(!Wait_for("OK")) return;
 8001f06:	bf00      	nop
}
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	0800cff4 	.word	0x0800cff4
 8001f10:	0800d044 	.word	0x0800d044
 8001f14:	20000000 	.word	0x20000000

08001f18 <esp8266_cmd_send_request>:


void esp8266_cmd_send_request(){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001f1c:	f003 fcc0 	bl	80058a0 <IsDataAvailable>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00f      	beq.n	8001f46 <esp8266_cmd_send_request+0x2e>
	if(!Wait_for("OK")) return;
 8001f26:	480a      	ldr	r0, [pc, #40]	; (8001f50 <esp8266_cmd_send_request+0x38>)
 8001f28:	f003 fd24 	bl	8005974 <Wait_for>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <esp8266_cmd_send_request+0x32>
	//HAL_Delay(100);
	printf("AT+CIPSEND\r\n");
 8001f32:	4808      	ldr	r0, [pc, #32]	; (8001f54 <esp8266_cmd_send_request+0x3c>)
 8001f34:	f003 fc08 	bl	8005748 <printf_>
	++esp8266_step_flag;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <esp8266_cmd_send_request+0x40>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <esp8266_cmd_send_request+0x40>)
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e002      	b.n	8001f4c <esp8266_cmd_send_request+0x34>
	if(!IsDataAvailable()) return;
 8001f46:	bf00      	nop
 8001f48:	e000      	b.n	8001f4c <esp8266_cmd_send_request+0x34>
	if(!Wait_for("OK")) return;
 8001f4a:	bf00      	nop
}
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	0800cff4 	.word	0x0800cff4
 8001f54:	0800d054 	.word	0x0800d054
 8001f58:	20000000 	.word	0x20000000

08001f5c <esp8266_cmd_fill_time_request>:

void esp8266_cmd_fill_time_request(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001f60:	f003 fc9e 	bl	80058a0 <IsDataAvailable>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00f      	beq.n	8001f8a <esp8266_cmd_fill_time_request+0x2e>
	if(!Wait_for("OK")) return;
 8001f6a:	480a      	ldr	r0, [pc, #40]	; (8001f94 <esp8266_cmd_fill_time_request+0x38>)
 8001f6c:	f003 fd02 	bl	8005974 <Wait_for>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <esp8266_cmd_fill_time_request+0x32>
	//HAL_Delay(100);
	printf("GET /date HTTP/1.1\r\nHost: marsohk.pythonanywhere.com\r\n\r\n");
 8001f76:	4808      	ldr	r0, [pc, #32]	; (8001f98 <esp8266_cmd_fill_time_request+0x3c>)
 8001f78:	f003 fbe6 	bl	8005748 <printf_>
	++esp8266_step_flag;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <esp8266_cmd_fill_time_request+0x40>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <esp8266_cmd_fill_time_request+0x40>)
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e002      	b.n	8001f90 <esp8266_cmd_fill_time_request+0x34>
	if(!IsDataAvailable()) return;
 8001f8a:	bf00      	nop
 8001f8c:	e000      	b.n	8001f90 <esp8266_cmd_fill_time_request+0x34>
	if(!Wait_for("OK")) return;
 8001f8e:	bf00      	nop
}
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	0800cff4 	.word	0x0800cff4
 8001f98:	0800d064 	.word	0x0800d064
 8001f9c:	20000000 	.word	0x20000000

08001fa0 <esp8266_cmd_fill_water_request>:

void esp8266_cmd_fill_water_request(){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001fa4:	f003 fc7c 	bl	80058a0 <IsDataAvailable>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00f      	beq.n	8001fce <esp8266_cmd_fill_water_request+0x2e>
	if(!Wait_for("OK")) return;
 8001fae:	480a      	ldr	r0, [pc, #40]	; (8001fd8 <esp8266_cmd_fill_water_request+0x38>)
 8001fb0:	f003 fce0 	bl	8005974 <Wait_for>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <esp8266_cmd_fill_water_request+0x32>
	printf("GET /water?set=1 HTTP/1.1\r\nHost: marsohk.pythonanywhere.com\r\n\r\n");
 8001fba:	4808      	ldr	r0, [pc, #32]	; (8001fdc <esp8266_cmd_fill_water_request+0x3c>)
 8001fbc:	f003 fbc4 	bl	8005748 <printf_>
	++esp8266_step_flag;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <esp8266_cmd_fill_water_request+0x40>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <esp8266_cmd_fill_water_request+0x40>)
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e002      	b.n	8001fd4 <esp8266_cmd_fill_water_request+0x34>
	if(!IsDataAvailable()) return;
 8001fce:	bf00      	nop
 8001fd0:	e000      	b.n	8001fd4 <esp8266_cmd_fill_water_request+0x34>
	if(!Wait_for("OK")) return;
 8001fd2:	bf00      	nop
}
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	0800cff4 	.word	0x0800cff4
 8001fdc:	0800d0a0 	.word	0x0800d0a0
 8001fe0:	20000000 	.word	0x20000000

08001fe4 <esp8266_cmd_fill_exercise_request>:

void esp8266_cmd_fill_exercise_request(){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001fe8:	f003 fc5a 	bl	80058a0 <IsDataAvailable>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d012      	beq.n	8002018 <esp8266_cmd_fill_exercise_request+0x34>
	if(!Wait_for("OK")) return;
 8001ff2:	480b      	ldr	r0, [pc, #44]	; (8002020 <esp8266_cmd_fill_exercise_request+0x3c>)
 8001ff4:	f003 fcbe 	bl	8005974 <Wait_for>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00e      	beq.n	800201c <esp8266_cmd_fill_exercise_request+0x38>
	extern uint32_t exertime_fixed;
	printf("GET /exercise?time=%d HTTP/1.1\r\nHost: marsohk.pythonanywhere.com\r\n\r\n", exertime_fixed);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <esp8266_cmd_fill_exercise_request+0x40>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4619      	mov	r1, r3
 8002004:	4808      	ldr	r0, [pc, #32]	; (8002028 <esp8266_cmd_fill_exercise_request+0x44>)
 8002006:	f003 fb9f 	bl	8005748 <printf_>
	++esp8266_step_flag;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <esp8266_cmd_fill_exercise_request+0x48>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <esp8266_cmd_fill_exercise_request+0x48>)
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	e002      	b.n	800201e <esp8266_cmd_fill_exercise_request+0x3a>
	if(!IsDataAvailable()) return;
 8002018:	bf00      	nop
 800201a:	e000      	b.n	800201e <esp8266_cmd_fill_exercise_request+0x3a>
	if(!Wait_for("OK")) return;
 800201c:	bf00      	nop
}
 800201e:	bd80      	pop	{r7, pc}
 8002020:	0800cff4 	.word	0x0800cff4
 8002024:	20000384 	.word	0x20000384
 8002028:	0800d0e0 	.word	0x0800d0e0
 800202c:	20000000 	.word	0x20000000

08002030 <esp8266_get_time_buffer>:

void esp8266_get_time_buffer(){
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8002034:	f003 fc34 	bl	80058a0 <IsDataAvailable>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d017      	beq.n	800206e <esp8266_get_time_buffer+0x3e>
	if(!Wait_for("OK")) return;
 800203e:	480e      	ldr	r0, [pc, #56]	; (8002078 <esp8266_get_time_buffer+0x48>)
 8002040:	f003 fc98 	bl	8005974 <Wait_for>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d013      	beq.n	8002072 <esp8266_get_time_buffer+0x42>
	HAL_Delay(100);
 800204a:	2064      	movs	r0, #100	; 0x64
 800204c:	f005 faa2 	bl	8007594 <HAL_Delay>
	extern char USART_DATE_BUFFER[15];

	//LCD_Clear(0, 100, 250,150);
	//LCD_DrawString(20, 100, "Done...");
	Wait_for("DATA:");
 8002050:	480a      	ldr	r0, [pc, #40]	; (800207c <esp8266_get_time_buffer+0x4c>)
 8002052:	f003 fc8f 	bl	8005974 <Wait_for>
	Get_after("DATA:",15, USART_DATE_BUFFER);
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <esp8266_get_time_buffer+0x50>)
 8002058:	210f      	movs	r1, #15
 800205a:	4808      	ldr	r0, [pc, #32]	; (800207c <esp8266_get_time_buffer+0x4c>)
 800205c:	f003 fc56 	bl	800590c <Get_after>

    ++esp8266_step_flag;//Done
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <esp8266_get_time_buffer+0x54>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <esp8266_get_time_buffer+0x54>)
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e002      	b.n	8002074 <esp8266_get_time_buffer+0x44>
	if(!IsDataAvailable()) return;
 800206e:	bf00      	nop
 8002070:	e000      	b.n	8002074 <esp8266_get_time_buffer+0x44>
	if(!Wait_for("OK")) return;
 8002072:	bf00      	nop
}
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	0800cff4 	.word	0x0800cff4
 800207c:	0800d128 	.word	0x0800d128
 8002080:	20000398 	.word	0x20000398
 8002084:	20000000 	.word	0x20000000

08002088 <esp8266_water_done>:

void esp8266_water_done(){
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 800208c:	f003 fc08 	bl	80058a0 <IsDataAvailable>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <esp8266_water_done+0x22>
	if(!Wait_for("Drink")) return;
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <esp8266_water_done+0x2c>)
 8002098:	f003 fc6c 	bl	8005974 <Wait_for>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <esp8266_water_done+0x26>
	extern uint8_t USART_WATER_FLAG;
	USART_WATER_FLAG = 0;
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <esp8266_water_done+0x30>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e002      	b.n	80020b0 <esp8266_water_done+0x28>
	if(!IsDataAvailable()) return;
 80020aa:	bf00      	nop
 80020ac:	e000      	b.n	80020b0 <esp8266_water_done+0x28>
	if(!Wait_for("Drink")) return;
 80020ae:	bf00      	nop
}
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	0800d130 	.word	0x0800d130
 80020b8:	20000391 	.word	0x20000391

080020bc <esp8266_exercise_done>:

void esp8266_exercise_done(){
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 80020c0:	f003 fbee 	bl	80058a0 <IsDataAvailable>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <esp8266_exercise_done+0x22>
	if(!Wait_for("Exercise")) return;
 80020ca:	4807      	ldr	r0, [pc, #28]	; (80020e8 <esp8266_exercise_done+0x2c>)
 80020cc:	f003 fc52 	bl	8005974 <Wait_for>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <esp8266_exercise_done+0x26>
	extern uint8_t USART_EXERCISE_FLAG;
	USART_EXERCISE_FLAG = 0;
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <esp8266_exercise_done+0x30>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e002      	b.n	80020e4 <esp8266_exercise_done+0x28>
	if(!IsDataAvailable()) return;
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <esp8266_exercise_done+0x28>
	if(!Wait_for("Exercise")) return;
 80020e2:	bf00      	nop
}
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	0800d138 	.word	0x0800d138
 80020ec:	20000392 	.word	0x20000392

080020f0 <esp8266_get_time>:

void esp8266_get_time(){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	switch (esp8266_step_flag){
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <esp8266_get_time+0xa4>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d849      	bhi.n	8002190 <esp8266_get_time+0xa0>
 80020fc:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <esp8266_get_time+0x14>)
 80020fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002102:	bf00      	nop
 8002104:	08002185 	.word	0x08002185
 8002108:	08002129 	.word	0x08002129
 800210c:	0800212f 	.word	0x0800212f
 8002110:	08002135 	.word	0x08002135
 8002114:	08002151 	.word	0x08002151
 8002118:	08002157 	.word	0x08002157
 800211c:	0800215d 	.word	0x0800215d
 8002120:	08002179 	.word	0x08002179
 8002124:	0800217f 	.word	0x0800217f
		case 1://Reset
			esp8266_cmd_reset();
 8002128:	f7ff fe44 	bl	8001db4 <esp8266_cmd_reset>
			break;
 800212c:	e030      	b.n	8002190 <esp8266_get_time+0xa0>
		case 2://Set Station
			esp8266_cmd_set_station();
 800212e:	f7ff fe63 	bl	8001df8 <esp8266_cmd_set_station>
			break;
 8002132:	e02d      	b.n	8002190 <esp8266_get_time+0xa0>
		case 3://Connect Wifi
			esp8266_cmd_connectWifi();
 8002134:	f7ff fe82 	bl	8001e3c <esp8266_cmd_connectWifi>
			LCD_Clear(0, 100, 250,150);
 8002138:	2396      	movs	r3, #150	; 0x96
 800213a:	22fa      	movs	r2, #250	; 0xfa
 800213c:	2164      	movs	r1, #100	; 0x64
 800213e:	2000      	movs	r0, #0
 8002140:	f000 fabe 	bl	80026c0 <LCD_Clear>
			LCD_DrawString(20, 100, "Connecting To Wifi...");
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <esp8266_get_time+0xa8>)
 8002146:	2164      	movs	r1, #100	; 0x64
 8002148:	2014      	movs	r0, #20
 800214a:	f000 fbb1 	bl	80028b0 <LCD_DrawString>
			break;
 800214e:	e01f      	b.n	8002190 <esp8266_get_time+0xa0>
		case 4://Set TCP
			esp8266_cmd_tcp();
 8002150:	f7ff fe9e 	bl	8001e90 <esp8266_cmd_tcp>
			break;
 8002154:	e01c      	b.n	8002190 <esp8266_get_time+0xa0>
		case 5://SET Trans mode
			esp8266_cmd_trans_mode();
 8002156:	f7ff febd 	bl	8001ed4 <esp8266_cmd_trans_mode>
			break;
 800215a:	e019      	b.n	8002190 <esp8266_get_time+0xa0>
		case 6://Send Request
			esp8266_cmd_send_request();
 800215c:	f7ff fedc 	bl	8001f18 <esp8266_cmd_send_request>
			LCD_Clear(0, 100, 250,150);
 8002160:	2396      	movs	r3, #150	; 0x96
 8002162:	22fa      	movs	r2, #250	; 0xfa
 8002164:	2164      	movs	r1, #100	; 0x64
 8002166:	2000      	movs	r0, #0
 8002168:	f000 faaa 	bl	80026c0 <LCD_Clear>
			LCD_DrawString(20, 100, "Sending Request To Server..");
 800216c:	4a0b      	ldr	r2, [pc, #44]	; (800219c <esp8266_get_time+0xac>)
 800216e:	2164      	movs	r1, #100	; 0x64
 8002170:	2014      	movs	r0, #20
 8002172:	f000 fb9d 	bl	80028b0 <LCD_DrawString>
			break;
 8002176:	e00b      	b.n	8002190 <esp8266_get_time+0xa0>
		case 7://Fill Request
			esp8266_cmd_fill_time_request();
 8002178:	f7ff fef0 	bl	8001f5c <esp8266_cmd_fill_time_request>
			break;
 800217c:	e008      	b.n	8002190 <esp8266_get_time+0xa0>
		case 8://Fill Data to buffer
			esp8266_get_time_buffer();
 800217e:	f7ff ff57 	bl	8002030 <esp8266_get_time_buffer>
			break;
 8002182:	e005      	b.n	8002190 <esp8266_get_time+0xa0>
		case 0:
			esp8266_step_flag = 1;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <esp8266_get_time+0xa4>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
			ESP8266_RESET();
 800218a:	f7ff fded 	bl	8001d68 <ESP8266_RESET>
			break;
 800218e:	bf00      	nop
	}
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000000 	.word	0x20000000
 8002198:	0800d144 	.word	0x0800d144
 800219c:	0800d15c 	.word	0x0800d15c

080021a0 <esp8266_update_water>:

void esp8266_update_water(){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	switch (esp8266_step_flag){
 80021a4:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <esp8266_update_water+0x78>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d833      	bhi.n	8002214 <esp8266_update_water+0x74>
 80021ac:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <esp8266_update_water+0x14>)
 80021ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b2:	bf00      	nop
 80021b4:	08002209 	.word	0x08002209
 80021b8:	080021d9 	.word	0x080021d9
 80021bc:	080021df 	.word	0x080021df
 80021c0:	080021e5 	.word	0x080021e5
 80021c4:	080021eb 	.word	0x080021eb
 80021c8:	080021f1 	.word	0x080021f1
 80021cc:	080021f7 	.word	0x080021f7
 80021d0:	080021fd 	.word	0x080021fd
 80021d4:	08002203 	.word	0x08002203
		case 1://Reset
			esp8266_cmd_reset();
 80021d8:	f7ff fdec 	bl	8001db4 <esp8266_cmd_reset>
			break;
 80021dc:	e01a      	b.n	8002214 <esp8266_update_water+0x74>
		case 2://Set Station
			esp8266_cmd_set_station();
 80021de:	f7ff fe0b 	bl	8001df8 <esp8266_cmd_set_station>
			break;
 80021e2:	e017      	b.n	8002214 <esp8266_update_water+0x74>
		case 3://Connect Wifi
			esp8266_cmd_connectWifi();
 80021e4:	f7ff fe2a 	bl	8001e3c <esp8266_cmd_connectWifi>
			break;
 80021e8:	e014      	b.n	8002214 <esp8266_update_water+0x74>
		case 4://Set TCP
			esp8266_cmd_tcp();
 80021ea:	f7ff fe51 	bl	8001e90 <esp8266_cmd_tcp>
			break;
 80021ee:	e011      	b.n	8002214 <esp8266_update_water+0x74>
		case 5://SET Trans mode
			esp8266_cmd_trans_mode();
 80021f0:	f7ff fe70 	bl	8001ed4 <esp8266_cmd_trans_mode>
			break;
 80021f4:	e00e      	b.n	8002214 <esp8266_update_water+0x74>
		case 6://Send Request
			esp8266_cmd_send_request();
 80021f6:	f7ff fe8f 	bl	8001f18 <esp8266_cmd_send_request>
			break;
 80021fa:	e00b      	b.n	8002214 <esp8266_update_water+0x74>
		case 7://Fill Request
			esp8266_cmd_fill_water_request();
 80021fc:	f7ff fed0 	bl	8001fa0 <esp8266_cmd_fill_water_request>
			break;
 8002200:	e008      	b.n	8002214 <esp8266_update_water+0x74>
		case 8://Done, Reset Flag
			esp8266_water_done();
 8002202:	f7ff ff41 	bl	8002088 <esp8266_water_done>
			break;
 8002206:	e005      	b.n	8002214 <esp8266_update_water+0x74>
		case 0:
			esp8266_step_flag = 1;
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <esp8266_update_water+0x78>)
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
			ESP8266_RESET();
 800220e:	f7ff fdab 	bl	8001d68 <ESP8266_RESET>
			break;
 8002212:	bf00      	nop
	}
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000000 	.word	0x20000000

0800221c <esp8266_update_exercise>:


void esp8266_update_exercise(){
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	switch (esp8266_step_flag){
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <esp8266_update_exercise+0x78>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d833      	bhi.n	8002290 <esp8266_update_exercise+0x74>
 8002228:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <esp8266_update_exercise+0x14>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002285 	.word	0x08002285
 8002234:	08002255 	.word	0x08002255
 8002238:	0800225b 	.word	0x0800225b
 800223c:	08002261 	.word	0x08002261
 8002240:	08002267 	.word	0x08002267
 8002244:	0800226d 	.word	0x0800226d
 8002248:	08002273 	.word	0x08002273
 800224c:	08002279 	.word	0x08002279
 8002250:	0800227f 	.word	0x0800227f
		case 1://Reset
			esp8266_cmd_reset();
 8002254:	f7ff fdae 	bl	8001db4 <esp8266_cmd_reset>
			break;
 8002258:	e01a      	b.n	8002290 <esp8266_update_exercise+0x74>
		case 2://Set Station
			esp8266_cmd_set_station();
 800225a:	f7ff fdcd 	bl	8001df8 <esp8266_cmd_set_station>
			break;
 800225e:	e017      	b.n	8002290 <esp8266_update_exercise+0x74>
		case 3://Connect Wifi
			esp8266_cmd_connectWifi();
 8002260:	f7ff fdec 	bl	8001e3c <esp8266_cmd_connectWifi>
			break;
 8002264:	e014      	b.n	8002290 <esp8266_update_exercise+0x74>
		case 4://Set TCP
			esp8266_cmd_tcp();
 8002266:	f7ff fe13 	bl	8001e90 <esp8266_cmd_tcp>
			break;
 800226a:	e011      	b.n	8002290 <esp8266_update_exercise+0x74>
		case 5://SET Trans mode
			esp8266_cmd_trans_mode();
 800226c:	f7ff fe32 	bl	8001ed4 <esp8266_cmd_trans_mode>
			break;
 8002270:	e00e      	b.n	8002290 <esp8266_update_exercise+0x74>
		case 6://Send Request
			esp8266_cmd_send_request();
 8002272:	f7ff fe51 	bl	8001f18 <esp8266_cmd_send_request>
			break;
 8002276:	e00b      	b.n	8002290 <esp8266_update_exercise+0x74>
		case 7://Fill Request
			esp8266_cmd_fill_exercise_request();
 8002278:	f7ff feb4 	bl	8001fe4 <esp8266_cmd_fill_exercise_request>
			break;
 800227c:	e008      	b.n	8002290 <esp8266_update_exercise+0x74>
		case 8://Done, Reset Flag
			esp8266_exercise_done();
 800227e:	f7ff ff1d 	bl	80020bc <esp8266_exercise_done>
			break;
 8002282:	e005      	b.n	8002290 <esp8266_update_exercise+0x74>
		case 0:
			esp8266_step_flag = 1;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <esp8266_update_exercise+0x78>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
			ESP8266_RESET();
 800228a:	f7ff fd6d 	bl	8001d68 <ESP8266_RESET>
			break;
 800228e:	bf00      	nop
	}
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000000 	.word	0x20000000

08002298 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	e002      	b.n	80022a8 <Delay+0x10>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <Delay+0xa>
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 80022be:	2001      	movs	r0, #1
 80022c0:	f000 f826 	bl	8002310 <LCD_BackLed_Control>
	LCD_Rst();
 80022c4:	f000 f80c 	bl	80022e0 <LCD_Rst>
	LCD_REG_Config();
 80022c8:	f000 f868 	bl	800239c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 80022cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022d0:	22f0      	movs	r2, #240	; 0xf0
 80022d2:	2100      	movs	r1, #0
 80022d4:	2000      	movs	r0, #0
 80022d6:	f000 f9f3 	bl	80026c0 <LCD_Clear>
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <LCD_Rst>:


void LCD_Rst ( void )
{			
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2102      	movs	r1, #2
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <LCD_Rst+0x28>)
 80022ea:	f006 f9f6 	bl	80086da <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80022ee:	4807      	ldr	r0, [pc, #28]	; (800230c <LCD_Rst+0x2c>)
 80022f0:	f7ff ffd2 	bl	8002298 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80022f4:	2201      	movs	r2, #1
 80022f6:	2102      	movs	r1, #2
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <LCD_Rst+0x28>)
 80022fa:	f006 f9ee 	bl	80086da <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80022fe:	4803      	ldr	r0, [pc, #12]	; (800230c <LCD_Rst+0x2c>)
 8002300:	f7ff ffca 	bl	8002298 <Delay>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40011800 	.word	0x40011800
 800230c:	0002bffc 	.word	0x0002bffc

08002310 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8002320:	2200      	movs	r2, #0
 8002322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002326:	4807      	ldr	r0, [pc, #28]	; (8002344 <LCD_BackLed_Control+0x34>)
 8002328:	f006 f9d7 	bl	80086da <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 800232c:	e005      	b.n	800233a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002334:	4803      	ldr	r0, [pc, #12]	; (8002344 <LCD_BackLed_Control+0x34>)
 8002336:	f006 f9d0 	bl	80086da <HAL_GPIO_WritePin>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40011400 	.word	0x40011400

08002348 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8002352:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	8013      	strh	r3, [r2, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <LCD_Write_Data+0x1c>)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	8013      	strh	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	60020000 	.word	0x60020000

08002384 <LCD_Read_Data>:


uint16_t LCD_Read_Data ( void )
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <LCD_Read_Data+0x14>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	60020000 	.word	0x60020000

0800239c <LCD_REG_Config>:


void LCD_REG_Config ( void )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80023a0:	20cf      	movs	r0, #207	; 0xcf
 80023a2:	f7ff ffd1 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff ffdc 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80023ac:	2081      	movs	r0, #129	; 0x81
 80023ae:	f7ff ffd9 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80023b2:	2030      	movs	r0, #48	; 0x30
 80023b4:	f7ff ffd6 	bl	8002364 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80023b8:	20ed      	movs	r0, #237	; 0xed
 80023ba:	f7ff ffc5 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80023be:	2064      	movs	r0, #100	; 0x64
 80023c0:	f7ff ffd0 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80023c4:	2003      	movs	r0, #3
 80023c6:	f7ff ffcd 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80023ca:	2012      	movs	r0, #18
 80023cc:	f7ff ffca 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80023d0:	2081      	movs	r0, #129	; 0x81
 80023d2:	f7ff ffc7 	bl	8002364 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80023d6:	20e8      	movs	r0, #232	; 0xe8
 80023d8:	f7ff ffb6 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80023dc:	2085      	movs	r0, #133	; 0x85
 80023de:	f7ff ffc1 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80023e2:	2010      	movs	r0, #16
 80023e4:	f7ff ffbe 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80023e8:	2078      	movs	r0, #120	; 0x78
 80023ea:	f7ff ffbb 	bl	8002364 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80023ee:	20cb      	movs	r0, #203	; 0xcb
 80023f0:	f7ff ffaa 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80023f4:	2039      	movs	r0, #57	; 0x39
 80023f6:	f7ff ffb5 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80023fa:	202c      	movs	r0, #44	; 0x2c
 80023fc:	f7ff ffb2 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff ffaf 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8002406:	2034      	movs	r0, #52	; 0x34
 8002408:	f7ff ffac 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800240c:	2002      	movs	r0, #2
 800240e:	f7ff ffa9 	bl	8002364 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8002412:	20f7      	movs	r0, #247	; 0xf7
 8002414:	f7ff ff98 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8002418:	2020      	movs	r0, #32
 800241a:	f7ff ffa3 	bl	8002364 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800241e:	20ea      	movs	r0, #234	; 0xea
 8002420:	f7ff ff92 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff ff9d 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff ff9a 	bl	8002364 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8002430:	20b1      	movs	r0, #177	; 0xb1
 8002432:	f7ff ff89 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff ff94 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800243c:	201b      	movs	r0, #27
 800243e:	f7ff ff91 	bl	8002364 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8002442:	20b6      	movs	r0, #182	; 0xb6
 8002444:	f7ff ff80 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8002448:	200a      	movs	r0, #10
 800244a:	f7ff ff8b 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800244e:	20a2      	movs	r0, #162	; 0xa2
 8002450:	f7ff ff88 	bl	8002364 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8002454:	20c0      	movs	r0, #192	; 0xc0
 8002456:	f7ff ff77 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800245a:	2035      	movs	r0, #53	; 0x35
 800245c:	f7ff ff82 	bl	8002364 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8002460:	20c1      	movs	r0, #193	; 0xc1
 8002462:	f7ff ff71 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8002466:	2011      	movs	r0, #17
 8002468:	f7ff ff7c 	bl	8002364 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800246c:	20c5      	movs	r0, #197	; 0xc5
 800246e:	f7ff ff6b 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8002472:	2045      	movs	r0, #69	; 0x45
 8002474:	f7ff ff76 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8002478:	2045      	movs	r0, #69	; 0x45
 800247a:	f7ff ff73 	bl	8002364 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800247e:	20c7      	movs	r0, #199	; 0xc7
 8002480:	f7ff ff62 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8002484:	20a2      	movs	r0, #162	; 0xa2
 8002486:	f7ff ff6d 	bl	8002364 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800248a:	20f2      	movs	r0, #242	; 0xf2
 800248c:	f7ff ff5c 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff ff67 	bl	8002364 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8002496:	2026      	movs	r0, #38	; 0x26
 8002498:	f7ff ff56 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800249c:	2001      	movs	r0, #1
 800249e:	f7ff ff61 	bl	8002364 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80024a2:	20e0      	movs	r0, #224	; 0xe0
 80024a4:	f7ff ff50 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80024a8:	200f      	movs	r0, #15
 80024aa:	f7ff ff5b 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80024ae:	2026      	movs	r0, #38	; 0x26
 80024b0:	f7ff ff58 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80024b4:	2024      	movs	r0, #36	; 0x24
 80024b6:	f7ff ff55 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80024ba:	200b      	movs	r0, #11
 80024bc:	f7ff ff52 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80024c0:	200e      	movs	r0, #14
 80024c2:	f7ff ff4f 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80024c6:	2009      	movs	r0, #9
 80024c8:	f7ff ff4c 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80024cc:	2054      	movs	r0, #84	; 0x54
 80024ce:	f7ff ff49 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80024d2:	20a8      	movs	r0, #168	; 0xa8
 80024d4:	f7ff ff46 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80024d8:	2046      	movs	r0, #70	; 0x46
 80024da:	f7ff ff43 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80024de:	200c      	movs	r0, #12
 80024e0:	f7ff ff40 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80024e4:	2017      	movs	r0, #23
 80024e6:	f7ff ff3d 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80024ea:	2009      	movs	r0, #9
 80024ec:	f7ff ff3a 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80024f0:	200f      	movs	r0, #15
 80024f2:	f7ff ff37 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80024f6:	2007      	movs	r0, #7
 80024f8:	f7ff ff34 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7ff ff31 	bl	8002364 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8002502:	20e1      	movs	r0, #225	; 0xe1
 8002504:	f7ff ff20 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002508:	2000      	movs	r0, #0
 800250a:	f7ff ff2b 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800250e:	2019      	movs	r0, #25
 8002510:	f7ff ff28 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8002514:	201b      	movs	r0, #27
 8002516:	f7ff ff25 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800251a:	2004      	movs	r0, #4
 800251c:	f7ff ff22 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8002520:	2010      	movs	r0, #16
 8002522:	f7ff ff1f 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8002526:	2007      	movs	r0, #7
 8002528:	f7ff ff1c 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800252c:	202a      	movs	r0, #42	; 0x2a
 800252e:	f7ff ff19 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8002532:	2047      	movs	r0, #71	; 0x47
 8002534:	f7ff ff16 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8002538:	2039      	movs	r0, #57	; 0x39
 800253a:	f7ff ff13 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800253e:	2003      	movs	r0, #3
 8002540:	f7ff ff10 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8002544:	2006      	movs	r0, #6
 8002546:	f7ff ff0d 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800254a:	2006      	movs	r0, #6
 800254c:	f7ff ff0a 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8002550:	2030      	movs	r0, #48	; 0x30
 8002552:	f7ff ff07 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8002556:	2038      	movs	r0, #56	; 0x38
 8002558:	f7ff ff04 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800255c:	200f      	movs	r0, #15
 800255e:	f7ff ff01 	bl	8002364 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8002562:	2036      	movs	r0, #54	; 0x36
 8002564:	f7ff fef0 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8002568:	20c8      	movs	r0, #200	; 0xc8
 800256a:	f7ff fefb 	bl	8002364 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800256e:	202a      	movs	r0, #42	; 0x2a
 8002570:	f7ff feea 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002574:	2000      	movs	r0, #0
 8002576:	f7ff fef5 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800257a:	2000      	movs	r0, #0
 800257c:	f7ff fef2 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002580:	2000      	movs	r0, #0
 8002582:	f7ff feef 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8002586:	20ef      	movs	r0, #239	; 0xef
 8002588:	f7ff feec 	bl	8002364 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800258c:	202b      	movs	r0, #43	; 0x2b
 800258e:	f7ff fedb 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002592:	2000      	movs	r0, #0
 8002594:	f7ff fee6 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002598:	2000      	movs	r0, #0
 800259a:	f7ff fee3 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800259e:	2001      	movs	r0, #1
 80025a0:	f7ff fee0 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80025a4:	203f      	movs	r0, #63	; 0x3f
 80025a6:	f7ff fedd 	bl	8002364 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80025aa:	203a      	movs	r0, #58	; 0x3a
 80025ac:	f7ff fecc 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80025b0:	2055      	movs	r0, #85	; 0x55
 80025b2:	f7ff fed7 	bl	8002364 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80025b6:	2011      	movs	r0, #17
 80025b8:	f7ff fec6 	bl	8002348 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <LCD_REG_Config+0x230>)
 80025be:	f7ff fe6b 	bl	8002298 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80025c2:	2029      	movs	r0, #41	; 0x29
 80025c4:	f7ff fec0 	bl	8002348 <LCD_Write_Cmd>
	
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	0002bffc 	.word	0x0002bffc

080025d0 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4604      	mov	r4, r0
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4623      	mov	r3, r4
 80025e0:	80fb      	strh	r3, [r7, #6]
 80025e2:	4603      	mov	r3, r0
 80025e4:	80bb      	strh	r3, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	807b      	strh	r3, [r7, #2]
 80025ea:	4613      	mov	r3, r2
 80025ec:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80025ee:	202a      	movs	r0, #42	; 0x2a
 80025f0:	f7ff feaa 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff feb2 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	b29b      	uxth	r3, r3
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff feac 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	4413      	add	r3, r2
 8002612:	3b01      	subs	r3, #1
 8002614:	121b      	asrs	r3, r3, #8
 8002616:	b29b      	uxth	r3, r3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fea3 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	4413      	add	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29b      	uxth	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	b29b      	uxth	r3, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fe98 	bl	8002364 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8002634:	202b      	movs	r0, #43	; 0x2b
 8002636:	f7ff fe87 	bl	8002348 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800263a:	88bb      	ldrh	r3, [r7, #4]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	b29b      	uxth	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fe8f 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8002646:	88bb      	ldrh	r3, [r7, #4]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	b29b      	uxth	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fe89 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8002652:	88ba      	ldrh	r2, [r7, #4]
 8002654:	883b      	ldrh	r3, [r7, #0]
 8002656:	4413      	add	r3, r2
 8002658:	3b01      	subs	r3, #1
 800265a:	121b      	asrs	r3, r3, #8
 800265c:	b29b      	uxth	r3, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fe80 	bl	8002364 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8002664:	88ba      	ldrh	r2, [r7, #4]
 8002666:	883b      	ldrh	r3, [r7, #0]
 8002668:	4413      	add	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	b29b      	uxth	r3, r3
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fe75 	bl	8002364 <LCD_Write_Data>
	
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}

08002682 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8002692:	202c      	movs	r0, #44	; 0x2c
 8002694:	f7ff fe58 	bl	8002348 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e006      	b.n	80026ac <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fe5f 	bl	8002364 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3f4      	bcc.n	800269e <LCD_FillColor+0x1c>
		
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	80fb      	strh	r3, [r7, #6]
 80026d2:	4603      	mov	r3, r0
 80026d4:	80bb      	strh	r3, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	807b      	strh	r3, [r7, #2]
 80026da:	4613      	mov	r3, r2
 80026dc:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <LCD_Clear+0x58>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <LCD_Clear+0x2a>
 80026e6:	2300      	movs	r3, #0
 80026e8:	e001      	b.n	80026ee <LCD_Clear+0x2e>
 80026ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ee:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80026f0:	883b      	ldrh	r3, [r7, #0]
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	88b9      	ldrh	r1, [r7, #4]
 80026f6:	88f8      	ldrh	r0, [r7, #6]
 80026f8:	f7ff ff6a 	bl	80025d0 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	883a      	ldrh	r2, [r7, #0]
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	461a      	mov	r2, r3
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f7ff ffb9 	bl	8002682 <LCD_FillColor>
	
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bd90      	pop	{r4, r7, pc}
 8002718:	20000150 	.word	0x20000150

0800271c <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4604      	mov	r4, r0
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4623      	mov	r3, r4
 800272c:	80fb      	strh	r3, [r7, #6]
 800272e:	4603      	mov	r3, r0
 8002730:	80bb      	strh	r3, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
 8002736:	4613      	mov	r3, r2
 8002738:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800273a:	883b      	ldrh	r3, [r7, #0]
 800273c:	887a      	ldrh	r2, [r7, #2]
 800273e:	88b9      	ldrh	r1, [r7, #4]
 8002740:	88f8      	ldrh	r0, [r7, #6]
 8002742:	f7ff ff45 	bl	80025d0 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	883a      	ldrh	r2, [r7, #0]
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	461a      	mov	r2, r3
 8002750:	8b3b      	ldrh	r3, [r7, #24]
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f7ff ff94 	bl	8002682 <LCD_FillColor>
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}

08002762 <LCD_Read_PixelData>:

uint16_t LCD_Read_PixelData ( void )	
{	
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
	uint16_t usR=0, usG=0, usB=0 ;
 8002768:	2300      	movs	r3, #0
 800276a:	80fb      	strh	r3, [r7, #6]
 800276c:	2300      	movs	r3, #0
 800276e:	80bb      	strh	r3, [r7, #4]
 8002770:	2300      	movs	r3, #0
 8002772:	807b      	strh	r3, [r7, #2]

	
	LCD_Write_Cmd ( 0x2E ); 
 8002774:	202e      	movs	r0, #46	; 0x2e
 8002776:	f7ff fde7 	bl	8002348 <LCD_Write_Cmd>
	
	usR = LCD_Read_Data (); 	/*FIRST READ OUT DUMMY DATA*/
 800277a:	f7ff fe03 	bl	8002384 <LCD_Read_Data>
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
	
	usR = LCD_Read_Data ();  	/*READ OUT RED DATA  */
 8002782:	f7ff fdff 	bl	8002384 <LCD_Read_Data>
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
	usB = LCD_Read_Data ();  	/*READ OUT BLUE DATA*/
 800278a:	f7ff fdfb 	bl	8002384 <LCD_Read_Data>
 800278e:	4603      	mov	r3, r0
 8002790:	807b      	strh	r3, [r7, #2]
	usG = LCD_Read_Data ();  	/*READ OUT GREEN DATA*/	
 8002792:	f7ff fdf7 	bl	8002384 <LCD_Read_Data>
 8002796:	4603      	mov	r3, r0
 8002798:	80bb      	strh	r3, [r7, #4]
	
  return ( ( ( usR >> 11 ) << 11 ) | ( ( usG >> 10 ) << 5 ) | ( usB >> 11 ) );
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	0adb      	lsrs	r3, r3, #11
 800279e:	b29b      	uxth	r3, r3
 80027a0:	02db      	lsls	r3, r3, #11
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	88bb      	ldrh	r3, [r7, #4]
 80027a6:	0a9b      	lsrs	r3, r3, #10
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	015b      	lsls	r3, r3, #5
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	0adb      	lsrs	r3, r3, #11
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b21b      	sxth	r3, r3
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b21b      	sxth	r3, r3
 80027be:	b29b      	uxth	r3, r3
	
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <LCD_GetPointPixel>:


uint16_t LCD_GetPointPixel ( uint16_t usCOLUMN, uint16_t usPAGE )
{ 
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	460a      	mov	r2, r1
 80027d2:	80fb      	strh	r3, [r7, #6]
 80027d4:	4613      	mov	r3, r2
 80027d6:	80bb      	strh	r3, [r7, #4]
	uint16_t usPixelData;

	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 80027d8:	88b9      	ldrh	r1, [r7, #4]
 80027da:	88f8      	ldrh	r0, [r7, #6]
 80027dc:	2301      	movs	r3, #1
 80027de:	2201      	movs	r2, #1
 80027e0:	f7ff fef6 	bl	80025d0 <LCD_OpenWindow>
	
	usPixelData = LCD_Read_PixelData ();
 80027e4:	f7ff ffbd 	bl	8002762 <LCD_Read_PixelData>
 80027e8:	4603      	mov	r3, r0
 80027ea:	81fb      	strh	r3, [r7, #14]
	
	return usPixelData;
 80027ec:	89fb      	ldrh	r3, [r7, #14]
	
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
 8002802:	460b      	mov	r3, r1
 8002804:	80bb      	strh	r3, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 800280a:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <LCD_DrawChar+0xb0>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <LCD_DrawChar+0x20>
 8002812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002816:	e000      	b.n	800281a <LCD_DrawChar+0x22>
 8002818:	2300      	movs	r3, #0
 800281a:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <LCD_DrawChar+0xb0>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <LCD_DrawChar+0x30>
 8002824:	2300      	movs	r3, #0
 8002826:	e001      	b.n	800282c <LCD_DrawChar+0x34>
 8002828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800282c:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	3b20      	subs	r3, #32
 8002832:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002834:	88b9      	ldrh	r1, [r7, #4]
 8002836:	88f8      	ldrh	r0, [r7, #6]
 8002838:	2310      	movs	r3, #16
 800283a:	2208      	movs	r2, #8
 800283c:	f7ff fec8 	bl	80025d0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8002840:	202c      	movs	r0, #44	; 0x2c
 8002842:	f7ff fd81 	bl	8002348 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002846:	2300      	movs	r3, #0
 8002848:	75bb      	strb	r3, [r7, #22]
 800284a:	e024      	b.n	8002896 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	7dbb      	ldrb	r3, [r7, #22]
 8002850:	4916      	ldr	r1, [pc, #88]	; (80028ac <LCD_DrawChar+0xb4>)
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	440a      	add	r2, r1
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800285c:	2300      	movs	r3, #0
 800285e:	757b      	strb	r3, [r7, #21]
 8002860:	e013      	b.n	800288a <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 800286c:	8a7b      	ldrh	r3, [r7, #18]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fd78 	bl	8002364 <LCD_Write_Data>
 8002874:	e003      	b.n	800287e <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 8002876:	8a3b      	ldrh	r3, [r7, #16]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fd73 	bl	8002364 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002884:	7d7b      	ldrb	r3, [r7, #21]
 8002886:	3301      	adds	r3, #1
 8002888:	757b      	strb	r3, [r7, #21]
 800288a:	7d7b      	ldrb	r3, [r7, #21]
 800288c:	2b07      	cmp	r3, #7
 800288e:	d9e8      	bls.n	8002862 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002890:	7dbb      	ldrb	r3, [r7, #22]
 8002892:	3301      	adds	r3, #1
 8002894:	75bb      	strb	r3, [r7, #22]
 8002896:	7dbb      	ldrb	r3, [r7, #22]
 8002898:	2b0f      	cmp	r3, #15
 800289a:	d9d7      	bls.n	800284c <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000150 	.word	0x20000150
 80028ac:	0800d23c 	.word	0x0800d23c

080028b0 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	603a      	str	r2, [r7, #0]
 80028ba:	80fb      	strh	r3, [r7, #6]
 80028bc:	460b      	mov	r3, r1
 80028be:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80028c0:	e01c      	b.n	80028fc <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	2be8      	cmp	r3, #232	; 0xe8
 80028c6:	d904      	bls.n	80028d2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80028c8:	2300      	movs	r3, #0
 80028ca:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80028cc:	88bb      	ldrh	r3, [r7, #4]
 80028ce:	3310      	adds	r3, #16
 80028d0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80028d2:	88bb      	ldrh	r3, [r7, #4]
 80028d4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80028d8:	d903      	bls.n	80028e2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80028da:	2300      	movs	r3, #0
 80028dc:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80028de:	2300      	movs	r3, #0
 80028e0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	88b9      	ldrh	r1, [r7, #4]
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff84 	bl	80027f8 <LCD_DrawChar>
		
		pStr ++;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	3308      	adds	r3, #8
 80028fa:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1de      	bne.n	80028c2 <LCD_DrawString+0x12>
		
	}
	
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	80fb      	strh	r3, [r7, #6]
 8002918:	460b      	mov	r3, r1
 800291a:	80bb      	strh	r3, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	2bef      	cmp	r3, #239	; 0xef
 8002924:	d809      	bhi.n	800293a <LCD_DrawDot+0x2c>
 8002926:	88bb      	ldrh	r3, [r7, #4]
 8002928:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800292c:	d205      	bcs.n	800293a <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 800292e:	88b9      	ldrh	r1, [r7, #4]
 8002930:	88f8      	ldrh	r0, [r7, #6]
 8002932:	2301      	movs	r3, #1
 8002934:	2201      	movs	r2, #1
 8002936:	f7ff fe4b 	bl	80025d0 <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	4619      	mov	r1, r3
 800293e:	2001      	movs	r0, #1
 8002940:	f7ff fe9f 	bl	8002682 <LCD_FillColor>

}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	0000      	movs	r0, r0
	...

08002950 <LCD_DrawCircle>:

void LCD_DrawCircle ( uint16_t usC, uint16_t usP, uint16_t R, uint16_t usColor)
{	
 8002950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4604      	mov	r4, r0
 800295a:	4608      	mov	r0, r1
 800295c:	4611      	mov	r1, r2
 800295e:	461a      	mov	r2, r3
 8002960:	4623      	mov	r3, r4
 8002962:	80fb      	strh	r3, [r7, #6]
 8002964:	4603      	mov	r3, r0
 8002966:	80bb      	strh	r3, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	803b      	strh	r3, [r7, #0]
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800297c:	e05a      	b.n	8002a34 <LCD_DrawCircle+0xe4>
			int x = usC + R*cos(i);
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fdab 	bl	80004dc <__aeabi_i2d>
 8002986:	4604      	mov	r4, r0
 8002988:	460d      	mov	r5, r1
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fda5 	bl	80004dc <__aeabi_i2d>
 8002992:	4680      	mov	r8, r0
 8002994:	4689      	mov	r9, r1
 8002996:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800299a:	f009 f9dd 	bl	800bd58 <cos>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4640      	mov	r0, r8
 80029a4:	4649      	mov	r1, r9
 80029a6:	f7fd fe03 	bl	80005b0 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4620      	mov	r0, r4
 80029b0:	4629      	mov	r1, r5
 80029b2:	f7fd fc47 	bl	8000244 <__adddf3>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fe f891 	bl	8000ae4 <__aeabi_d2iz>
 80029c2:	4603      	mov	r3, r0
 80029c4:	60fb      	str	r3, [r7, #12]
			int y = usP + R*sin(i);
 80029c6:	88bb      	ldrh	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fd87 	bl	80004dc <__aeabi_i2d>
 80029ce:	4604      	mov	r4, r0
 80029d0:	460d      	mov	r5, r1
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fd81 	bl	80004dc <__aeabi_i2d>
 80029da:	4680      	mov	r8, r0
 80029dc:	4689      	mov	r9, r1
 80029de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029e2:	f009 f9ff 	bl	800bde4 <sin>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4640      	mov	r0, r8
 80029ec:	4649      	mov	r1, r9
 80029ee:	f7fd fddf 	bl	80005b0 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fc23 	bl	8000244 <__adddf3>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe f86d 	bl	8000ae4 <__aeabi_d2iz>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	60bb      	str	r3, [r7, #8]
			LCD_DrawDot(x,y,usColor);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	b291      	uxth	r1, r2
 8002a16:	883a      	ldrh	r2, [r7, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff78 	bl	800290e <LCD_DrawDot>
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 8002a1e:	a30e      	add	r3, pc, #56	; (adr r3, 8002a58 <LCD_DrawCircle+0x108>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a28:	f7fd fc0c 	bl	8000244 <__adddf3>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002a34:	a30a      	add	r3, pc, #40	; (adr r3, 8002a60 <LCD_DrawCircle+0x110>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a3e:	f7fe f829 	bl	8000a94 <__aeabi_dcmplt>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d19a      	bne.n	800297e <LCD_DrawCircle+0x2e>
		}
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a54:	f3af 8000 	nop.w
 8002a58:	47ae147b 	.word	0x47ae147b
 8002a5c:	3f847ae1 	.word	0x3f847ae1
 8002a60:	54442d18 	.word	0x54442d18
 8002a64:	401921fb 	.word	0x401921fb

08002a68 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	80fb      	strh	r3, [r7, #6]
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80bb      	strh	r3, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	70fb      	strb	r3, [r7, #3]
 8002a82:	4613      	mov	r3, r2
 8002a84:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	3b20      	subs	r3, #32
 8002a8a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002a8c:	88b9      	ldrh	r1, [r7, #4]
 8002a8e:	88f8      	ldrh	r0, [r7, #6]
 8002a90:	2310      	movs	r3, #16
 8002a92:	2208      	movs	r2, #8
 8002a94:	f7ff fd9c 	bl	80025d0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8002a98:	202c      	movs	r0, #44	; 0x2c
 8002a9a:	f7ff fc55 	bl	8002348 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73bb      	strb	r3, [r7, #14]
 8002aa2:	e024      	b.n	8002aee <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8002aa4:	7b3a      	ldrb	r2, [r7, #12]
 8002aa6:	7bbb      	ldrb	r3, [r7, #14]
 8002aa8:	4915      	ldr	r1, [pc, #84]	; (8002b00 <LCD_DrawChar_Color+0x98>)
 8002aaa:	0112      	lsls	r2, r2, #4
 8002aac:	440a      	add	r2, r1
 8002aae:	4413      	add	r3, r2
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	737b      	strb	r3, [r7, #13]
 8002ab8:	e013      	b.n	8002ae2 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8002ac4:	8c3b      	ldrh	r3, [r7, #32]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fc4c 	bl	8002364 <LCD_Write_Data>
 8002acc:	e003      	b.n	8002ad6 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8002ace:	883b      	ldrh	r3, [r7, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fc47 	bl	8002364 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002adc:	7b7b      	ldrb	r3, [r7, #13]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	737b      	strb	r3, [r7, #13]
 8002ae2:	7b7b      	ldrb	r3, [r7, #13]
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d9e8      	bls.n	8002aba <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002ae8:	7bbb      	ldrb	r3, [r7, #14]
 8002aea:	3301      	adds	r3, #1
 8002aec:	73bb      	strb	r3, [r7, #14]
 8002aee:	7bbb      	ldrb	r3, [r7, #14]
 8002af0:	2b0f      	cmp	r3, #15
 8002af2:	d9d7      	bls.n	8002aa4 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	0800d23c 	.word	0x0800d23c

08002b04 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	80fb      	strh	r3, [r7, #6]
 8002b10:	4613      	mov	r3, r2
 8002b12:	80bb      	strh	r3, [r7, #4]
  LCD_Clear_Color ( usX - 10, usY, 20, 1, RED);
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	3b0a      	subs	r3, #10
 8002b18:	b298      	uxth	r0, r3
 8002b1a:	88b9      	ldrh	r1, [r7, #4]
 8002b1c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2301      	movs	r3, #1
 8002b24:	2214      	movs	r2, #20
 8002b26:	f7ff fdf9 	bl	800271c <LCD_Clear_Color>
  LCD_Clear_Color ( usX, usY - 10, 1, 20, RED);
 8002b2a:	88bb      	ldrh	r3, [r7, #4]
 8002b2c:	3b0a      	subs	r3, #10
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	88f8      	ldrh	r0, [r7, #6]
 8002b32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2314      	movs	r3, #20
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f7ff fdee 	bl	800271c <LCD_Clear_Color>
	
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60ba      	str	r2, [r7, #8]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	81fb      	strh	r3, [r7, #14]
 8002b56:	460b      	mov	r3, r1
 8002b58:	81bb      	strh	r3, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002b5e:	e01f      	b.n	8002ba0 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002b60:	89fb      	ldrh	r3, [r7, #14]
 8002b62:	2be8      	cmp	r3, #232	; 0xe8
 8002b64:	d904      	bls.n	8002b70 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002b66:	2300      	movs	r3, #0
 8002b68:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8002b6a:	89bb      	ldrh	r3, [r7, #12]
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002b70:	89bb      	ldrh	r3, [r7, #12]
 8002b72:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002b76:	d903      	bls.n	8002b80 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	88fc      	ldrh	r4, [r7, #6]
 8002b86:	89b9      	ldrh	r1, [r7, #12]
 8002b88:	89f8      	ldrh	r0, [r7, #14]
 8002b8a:	8c3b      	ldrh	r3, [r7, #32]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4623      	mov	r3, r4
 8002b90:	f7ff ff6a 	bl	8002a68 <LCD_DrawChar_Color>
		
		pStr ++;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	3301      	adds	r3, #1
 8002b98:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8002b9a:	89fb      	ldrh	r3, [r7, #14]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1db      	bne.n	8002b60 <LCD_DrawString_Color+0x18>
		
	}
	
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
	...

08002bb4 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	f200 80a0 	bhi.w	8002d08 <LCD_GramScan+0x154>
 8002bc8:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <LCD_GramScan+0x1c>)
 8002bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bce:	bf00      	nop
 8002bd0:	08002be1 	.word	0x08002be1
 8002bd4:	08002c2b 	.word	0x08002c2b
 8002bd8:	08002c75 	.word	0x08002c75
 8002bdc:	08002cbf 	.word	0x08002cbf

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002be0:	2036      	movs	r0, #54	; 0x36
 8002be2:	f7ff fbb1 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 8002be6:	20c8      	movs	r0, #200	; 0xc8
 8002be8:	f7ff fbbc 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002bec:	202a      	movs	r0, #42	; 0x2a
 8002bee:	f7ff fbab 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7ff fbb6 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7ff fbb3 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7ff fbb0 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8002c04:	20ef      	movs	r0, #239	; 0xef
 8002c06:	f7ff fbad 	bl	8002364 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002c0a:	202b      	movs	r0, #43	; 0x2b
 8002c0c:	f7ff fb9c 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7ff fba7 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7ff fba4 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f7ff fba1 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8002c22:	203f      	movs	r0, #63	; 0x3f
 8002c24:	f7ff fb9e 	bl	8002364 <LCD_Write_Data>
					
		  break;
 8002c28:	e06e      	b.n	8002d08 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002c2a:	2036      	movs	r0, #54	; 0x36
 8002c2c:	f7ff fb8c 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8002c30:	2068      	movs	r0, #104	; 0x68
 8002c32:	f7ff fb97 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002c36:	202a      	movs	r0, #42	; 0x2a
 8002c38:	f7ff fb86 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7ff fb91 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7ff fb8e 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f7ff fb8b 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8002c4e:	203f      	movs	r0, #63	; 0x3f
 8002c50:	f7ff fb88 	bl	8002364 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002c54:	202b      	movs	r0, #43	; 0x2b
 8002c56:	f7ff fb77 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7ff fb82 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff fb7f 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7ff fb7c 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8002c6c:	20ef      	movs	r0, #239	; 0xef
 8002c6e:	f7ff fb79 	bl	8002364 <LCD_Write_Data>
		
		  break;
 8002c72:	e049      	b.n	8002d08 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8002c74:	2036      	movs	r0, #54	; 0x36
 8002c76:	f7ff fb67 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8002c7a:	2028      	movs	r0, #40	; 0x28
 8002c7c:	f7ff fb72 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002c80:	202a      	movs	r0, #42	; 0x2a
 8002c82:	f7ff fb61 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7ff fb6c 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff fb69 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002c92:	2001      	movs	r0, #1
 8002c94:	f7ff fb66 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8002c98:	203f      	movs	r0, #63	; 0x3f
 8002c9a:	f7ff fb63 	bl	8002364 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002c9e:	202b      	movs	r0, #43	; 0x2b
 8002ca0:	f7ff fb52 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7ff fb5d 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7ff fb5a 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7ff fb57 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 8002cb6:	20ef      	movs	r0, #239	; 0xef
 8002cb8:	f7ff fb54 	bl	8002364 <LCD_Write_Data>
		  
		  break;
 8002cbc:	e024      	b.n	8002d08 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002cbe:	2036      	movs	r0, #54	; 0x36
 8002cc0:	f7ff fb42 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 8002cc4:	2048      	movs	r0, #72	; 0x48
 8002cc6:	f7ff fb4d 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002cca:	202a      	movs	r0, #42	; 0x2a
 8002ccc:	f7ff fb3c 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7ff fb47 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7ff fb44 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7ff fb41 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8002ce2:	20ef      	movs	r0, #239	; 0xef
 8002ce4:	f7ff fb3e 	bl	8002364 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002ce8:	202b      	movs	r0, #43	; 0x2b
 8002cea:	f7ff fb2d 	bl	8002348 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7ff fb38 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7ff fb35 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7ff fb32 	bl	8002364 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8002d00:	203f      	movs	r0, #63	; 0x3f
 8002d02:	f7ff fb2f 	bl	8002364 <LCD_Write_Data>
		
	    break;
 8002d06:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8002d08:	202c      	movs	r0, #44	; 0x2c
 8002d0a:	f7ff fb1d 	bl	8002348 <LCD_Write_Cmd>
	
	
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop

08002d18 <LCD_Darkmode_Toggle>:

void LCD_Darkmode_Toggle(){
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
	extern unsigned char *petStats;
	extern int sec;
	if (!darkmode_toggle) {
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <LCD_Darkmode_Toggle+0x54>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d119      	bne.n	8002d58 <LCD_Darkmode_Toggle+0x40>
		darkmode_toggle = 1;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <LCD_Darkmode_Toggle+0x54>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
		if (sec % 2 == 0){
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <LCD_Darkmode_Toggle+0x58>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <LCD_Darkmode_Toggle+0x26>
			petStats = sleep1;
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <LCD_Darkmode_Toggle+0x5c>)
 8002d38:	4a0f      	ldr	r2, [pc, #60]	; (8002d78 <LCD_Darkmode_Toggle+0x60>)
 8002d3a:	601a      	str	r2, [r3, #0]
	}
	else {
		darkmode_toggle = 0;
		petStats = normal;
	}
}
 8002d3c:	e012      	b.n	8002d64 <LCD_Darkmode_Toggle+0x4c>
		else if (sec % 2 == 1){
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <LCD_Darkmode_Toggle+0x58>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	bfb8      	it	lt
 8002d4a:	425b      	neglt	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d109      	bne.n	8002d64 <LCD_Darkmode_Toggle+0x4c>
			petStats = sleep2;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <LCD_Darkmode_Toggle+0x5c>)
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <LCD_Darkmode_Toggle+0x64>)
 8002d54:	601a      	str	r2, [r3, #0]
}
 8002d56:	e005      	b.n	8002d64 <LCD_Darkmode_Toggle+0x4c>
		darkmode_toggle = 0;
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <LCD_Darkmode_Toggle+0x54>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
		petStats = normal;
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <LCD_Darkmode_Toggle+0x5c>)
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <LCD_Darkmode_Toggle+0x68>)
 8002d62:	601a      	str	r2, [r3, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	20000150 	.word	0x20000150
 8002d70:	2000038c 	.word	0x2000038c
 8002d74:	2000000c 	.word	0x2000000c
 8002d78:	08037ce0 	.word	0x08037ce0
 8002d7c:	0803ed68 	.word	0x0803ed68
 8002d80:	08030c58 	.word	0x08030c58

08002d84 <LCD_DrawPicture>:

void LCD_DrawPicture(uint16_t StartX, uint16_t StartY,unsigned char *pic) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	603a      	str	r2, [r7, #0]
 8002d8e:	80fb      	strh	r3, [r7, #6]
 8002d90:	460b      	mov	r3, r1
 8002d92:	80bb      	strh	r3, [r7, #4]
		uint32_t i = 8, len;
 8002d94:	2308      	movs	r3, #8
 8002d96:	617b      	str	r3, [r7, #20]
		uint16_t temp, x, y;

		x = ((uint16_t) (pic[2] << 8) + pic[3]) - 1;	  	//get width
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	3303      	adds	r3, #3
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	827b      	strh	r3, [r7, #18]
		y = ((uint16_t) (pic[4] << 8) + pic[5]) - 1;	  	//get height
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	3304      	adds	r3, #4
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	3305      	adds	r3, #5
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	823b      	strh	r3, [r7, #16]

		LCD_OpenWindow ( StartX, StartY, 120,120);
 8002dd0:	88b9      	ldrh	r1, [r7, #4]
 8002dd2:	88f8      	ldrh	r0, [r7, #6]
 8002dd4:	2378      	movs	r3, #120	; 0x78
 8002dd6:	2278      	movs	r2, #120	; 0x78
 8002dd8:	f7ff fbfa 	bl	80025d0 <LCD_OpenWindow>
		//LCD_FillColor ( StartX*StartY ,0x01010);
		LCD_Write_Cmd(CMD_SetPixel);					//fillcolor
 8002ddc:	202c      	movs	r0, #44	; 0x2c
 8002dde:	f7ff fab3 	bl	8002348 <LCD_Write_Cmd>
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	3302      	adds	r3, #2
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	3303      	adds	r3, #3
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4413      	add	r3, r2
				* ((uint16_t) (pic[4] << 8) + pic[5]);   	//calculate size
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	3204      	adds	r2, #4
 8002dfc:	7812      	ldrb	r2, [r2, #0]
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	0212      	lsls	r2, r2, #8
 8002e02:	b292      	uxth	r2, r2
 8002e04:	4611      	mov	r1, r2
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	3205      	adds	r2, #5
 8002e0a:	7812      	ldrb	r2, [r2, #0]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	005b      	lsls	r3, r3, #1
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8002e14:	60fb      	str	r3, [r7, #12]

		while (i < (len + 8)) {							 	//start from the 9th
 8002e16:	e015      	b.n	8002e44 <LCD_DrawPicture+0xc0>
			temp = (uint16_t) (pic[i] << 8) | pic[i + 1];	//2bits once
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	6839      	ldr	r1, [r7, #0]
 8002e2c:	440b      	add	r3, r1
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4313      	orrs	r3, r2
 8002e34:	817b      	strh	r3, [r7, #10]
			LCD_Write_Data(temp);
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fa93 	bl	8002364 <LCD_Write_Data>
			i = i + 2;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3302      	adds	r3, #2
 8002e42:	617b      	str	r3, [r7, #20]
		while (i < (len + 8)) {							 	//start from the 9th
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3308      	adds	r3, #8
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3e4      	bcc.n	8002e18 <LCD_DrawPicture+0x94>
		}
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b08c      	sub	sp, #48	; 0x30
 8002e5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e5e:	f004 fb37 	bl	80074d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e62:	f000 fc15 	bl	8003690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e66:	f000 fea5 	bl	8003bb4 <MX_GPIO_Init>
  MX_FSMC_Init();
 8002e6a:	f000 ff9d 	bl	8003da8 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8002e6e:	f000 fe3d 	bl	8003aec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002e72:	f000 fd53 	bl	800391c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e76:	f000 fd9d 	bl	80039b4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002e7a:	f000 fde9 	bl	8003a50 <MX_TIM5_Init>
  MX_TIM1_Init();
 8002e7e:	f000 fca7 	bl	80037d0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002e82:	f000 fc67 	bl	8003754 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8002e86:	f000 fe63 	bl	8003b50 <MX_USART3_UART_Init>
  	 * XPT2046.c
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	RTC_Init(&hrtc);
 8002e8a:	48a0      	ldr	r0, [pc, #640]	; (800310c <main+0x2b4>)
 8002e8c:	f002 fe5e 	bl	8005b4c <RTC_Init>
	macXPT2046_CS_DISABLE();
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e96:	489e      	ldr	r0, [pc, #632]	; (8003110 <main+0x2b8>)
 8002e98:	f005 fc1f 	bl	80086da <HAL_GPIO_WritePin>
	LCD_INIT();
 8002e9c:	f7ff fa0d 	bl	80022ba <LCD_INIT>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002ea0:	489c      	ldr	r0, [pc, #624]	; (8003114 <main+0x2bc>)
 8002ea2:	f004 ffbd 	bl	8007e20 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8002ea6:	489b      	ldr	r0, [pc, #620]	; (8003114 <main+0x2bc>)
 8002ea8:	f004 fc82 	bl	80077b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8002eac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002eb0:	4898      	ldr	r0, [pc, #608]	; (8003114 <main+0x2bc>)
 8002eb2:	f004 fd2b 	bl	800790c <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8002eb6:	4897      	ldr	r0, [pc, #604]	; (8003114 <main+0x2bc>)
 8002eb8:	f004 fe22 	bl	8007b00 <HAL_ADC_GetValue>
 8002ebc:	61f8      	str	r0, [r7, #28]
	DEBUG_USART_Config();
 8002ebe:	f7fe fcf1 	bl	80018a4 <DEBUG_USART_Config>
	extern uint8_t esp8266_step_flag;
	esp8266_step_flag = 0;
 8002ec2:	4b95      	ldr	r3, [pc, #596]	; (8003118 <main+0x2c0>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
	Ringbuf_init();
 8002ec8:	f002 fc76 	bl	80057b8 <Ringbuf_init>
	RTC_Get();
 8002ecc:	f002 ff1e 	bl	8005d0c <RTC_Get>
	get_TimeStamp(&real_time);
 8002ed0:	4892      	ldr	r0, [pc, #584]	; (800311c <main+0x2c4>)
 8002ed2:	f003 f8b9 	bl	8006048 <get_TimeStamp>
	sec = real_time.rsec;
 8002ed6:	4b91      	ldr	r3, [pc, #580]	; (800311c <main+0x2c4>)
 8002ed8:	799b      	ldrb	r3, [r3, #6]
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b90      	ldr	r3, [pc, #576]	; (8003120 <main+0x2c8>)
 8002ede:	601a      	str	r2, [r3, #0]
	//Flow control of UI
	uint8_t mode = 0; //Current Mode: Mode 0 = Home, Mode 1 = Drink Water, Mode 3 = Pet
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	76fb      	strb	r3, [r7, #27]
	uint8_t mode_new = 0; //To Determine Whether A Mode is Updated
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	74fb      	strb	r3, [r7, #19]
	uint8_t render_done=0;//Set To 1 Whenever Screen Need to Update
 8002ee8:	2300      	movs	r3, #0
 8002eea:	74bb      	strb	r3, [r7, #18]
	uint8_t pet_update=0; //Set To 1 Whenever Pet Image Need to Update
 8002eec:	2300      	movs	r3, #0
 8002eee:	76bb      	strb	r3, [r7, #26]


	//Calibration of TouchPad
	while( ! XPT2046_Touch_Calibrate () );
 8002ef0:	bf00      	nop
 8002ef2:	f004 f819 	bl	8006f28 <XPT2046_Touch_Calibrate>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0fa      	beq.n	8002ef2 <main+0x9a>
	alarm_update_next();
 8002efc:	f7fe fc4a 	bl	8001794 <alarm_update_next>
	alarm_update_last();
 8002f00:	f7fe fc86 	bl	8001810 <alarm_update_last>
	exertimer = RTC_raw();
 8002f04:	f003 f88a 	bl	800601c <RTC_raw>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4a86      	ldr	r2, [pc, #536]	; (8003124 <main+0x2cc>)
 8002f0c:	6013      	str	r3, [r2, #0]
	DHT11_ReadData(&DHT11_data);
 8002f0e:	4886      	ldr	r0, [pc, #536]	; (8003128 <main+0x2d0>)
 8002f10:	f7fe feab 	bl	8001c6a <DHT11_ReadData>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 8002f14:	f003 fc30 	bl	8006778 <TIMER_INIT>
	timer_min(1);
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f003 fc77 	bl	800680c <timer_min>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8002f1e:	4983      	ldr	r1, [pc, #524]	; (800312c <main+0x2d4>)
 8002f20:	4883      	ldr	r0, [pc, #524]	; (8003130 <main+0x2d8>)
 8002f22:	f004 fa19 	bl	8007358 <XPT2046_Get_TouchedPoint>
	  			&strXPT2046_TouchPara);
	  HAL_ADC_Start(&hadc1);
 8002f26:	487b      	ldr	r0, [pc, #492]	; (8003114 <main+0x2bc>)
 8002f28:	f004 fc42 	bl	80077b0 <HAL_ADC_Start>
	  if (real_time.rsec % 5==0 && ADC_DARKMODE_TOGGLE){
 8002f2c:	4b7b      	ldr	r3, [pc, #492]	; (800311c <main+0x2c4>)
 8002f2e:	799a      	ldrb	r2, [r3, #6]
 8002f30:	4b80      	ldr	r3, [pc, #512]	; (8003134 <main+0x2dc>)
 8002f32:	fba3 1302 	umull	r1, r3, r3, r2
 8002f36:	0899      	lsrs	r1, r3, #2
 8002f38:	460b      	mov	r3, r1
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <main+0xfe>
 8002f46:	4b7c      	ldr	r3, [pc, #496]	; (8003138 <main+0x2e0>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <main+0xfe>
		  value = HAL_ADC_GetValue(&hadc1);
 8002f4e:	4871      	ldr	r0, [pc, #452]	; (8003114 <main+0x2bc>)
 8002f50:	f004 fdd6 	bl	8007b00 <HAL_ADC_GetValue>
 8002f54:	61f8      	str	r0, [r7, #28]
	  }
	  //!!Only For UI that is changing every moment, Just For Testing, Need Refactoring Later
	  if(mode==0) {
 8002f56:	7efb      	ldrb	r3, [r7, #27]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d114      	bne.n	8002f86 <main+0x12e>
		  RTC_Get();
 8002f5c:	f002 fed6 	bl	8005d0c <RTC_Get>
		  UI_Home_Display_Date(real_time.ryear, real_time.rmon, real_time.rday);
 8002f60:	4b6e      	ldr	r3, [pc, #440]	; (800311c <main+0x2c4>)
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	4a6d      	ldr	r2, [pc, #436]	; (800311c <main+0x2c4>)
 8002f66:	7891      	ldrb	r1, [r2, #2]
 8002f68:	4a6c      	ldr	r2, [pc, #432]	; (800311c <main+0x2c4>)
 8002f6a:	78d2      	ldrb	r2, [r2, #3]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe f91f 	bl	80011b0 <UI_Home_Display_Date>
		  UI_Home_Display_Time(real_time.rhour, real_time.rmin, real_time.rsec);
 8002f72:	4b6a      	ldr	r3, [pc, #424]	; (800311c <main+0x2c4>)
 8002f74:	791b      	ldrb	r3, [r3, #4]
 8002f76:	4a69      	ldr	r2, [pc, #420]	; (800311c <main+0x2c4>)
 8002f78:	7951      	ldrb	r1, [r2, #5]
 8002f7a:	4a68      	ldr	r2, [pc, #416]	; (800311c <main+0x2c4>)
 8002f7c:	7992      	ldrb	r2, [r2, #6]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe f952 	bl	8001228 <UI_Home_Display_Time>
 8002f84:	e00c      	b.n	8002fa0 <main+0x148>
	  }
	  else if (mode == 3){
 8002f86:	7efb      	ldrb	r3, [r7, #27]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d104      	bne.n	8002f96 <main+0x13e>
		  RTC_Get();
 8002f8c:	f002 febe 	bl	8005d0c <RTC_Get>
		  UI_Stats_Update();
 8002f90:	f7fe fa1e 	bl	80013d0 <UI_Stats_Update>
 8002f94:	e004      	b.n	8002fa0 <main+0x148>
	  }
	  else if (mode == 6){
 8002f96:	7efb      	ldrb	r3, [r7, #27]
 8002f98:	2b06      	cmp	r3, #6
 8002f9a:	d101      	bne.n	8002fa0 <main+0x148>
	  		  UI_Set_Update();
 8002f9c:	f7fe fb6a 	bl	8001674 <UI_Set_Update>
	  	  }
	  get_TimeStamp(&real_time);
 8002fa0:	485e      	ldr	r0, [pc, #376]	; (800311c <main+0x2c4>)
 8002fa2:	f003 f851 	bl	8006048 <get_TimeStamp>
		sec = real_time.rsec;
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	; (800311c <main+0x2c4>)
 8002fa8:	799b      	ldrb	r3, [r3, #6]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <main+0x2c8>)
 8002fae:	601a      	str	r2, [r3, #0]
	  if (petStats != sleep1 && petStats != sleep2 && mode==0 && next > RTC_raw() && !(exertimer <= RTC_raw() && EXER_TIMER_SET_FLAG)){
 8002fb0:	4b62      	ldr	r3, [pc, #392]	; (800313c <main+0x2e4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a62      	ldr	r2, [pc, #392]	; (8003140 <main+0x2e8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d048      	beq.n	800304c <main+0x1f4>
 8002fba:	4b60      	ldr	r3, [pc, #384]	; (800313c <main+0x2e4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a61      	ldr	r2, [pc, #388]	; (8003144 <main+0x2ec>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d043      	beq.n	800304c <main+0x1f4>
 8002fc4:	7efb      	ldrb	r3, [r7, #27]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d140      	bne.n	800304c <main+0x1f4>
 8002fca:	f003 f827 	bl	800601c <RTC_raw>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	4b5d      	ldr	r3, [pc, #372]	; (8003148 <main+0x2f0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d239      	bcs.n	800304c <main+0x1f4>
 8002fd8:	f003 f820 	bl	800601c <RTC_raw>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b51      	ldr	r3, [pc, #324]	; (8003124 <main+0x2cc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d303      	bcc.n	8002fee <main+0x196>
 8002fe6:	4b59      	ldr	r3, [pc, #356]	; (800314c <main+0x2f4>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d12e      	bne.n	800304c <main+0x1f4>
		  if (DHT11_data.temp_int > 27){
 8002fee:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <main+0x2d0>)
 8002ff0:	789b      	ldrb	r3, [r3, #2]
 8002ff2:	2b1b      	cmp	r3, #27
 8002ff4:	d910      	bls.n	8003018 <main+0x1c0>
			  if (real_time.rsec % 2 == 0){
 8002ff6:	4b49      	ldr	r3, [pc, #292]	; (800311c <main+0x2c4>)
 8002ff8:	799b      	ldrb	r3, [r3, #6]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <main+0x1b4>
				  petStats = hot1;
 8003004:	4b4d      	ldr	r3, [pc, #308]	; (800313c <main+0x2e4>)
 8003006:	4a52      	ldr	r2, [pc, #328]	; (8003150 <main+0x2f8>)
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e002      	b.n	8003012 <main+0x1ba>
			  }
			  else {
				  petStats = hot2;
 800300c:	4b4b      	ldr	r3, [pc, #300]	; (800313c <main+0x2e4>)
 800300e:	4a51      	ldr	r2, [pc, #324]	; (8003154 <main+0x2fc>)
 8003010:	601a      	str	r2, [r3, #0]
			  }
			  pet_update = 1;
 8003012:	2301      	movs	r3, #1
 8003014:	76bb      	strb	r3, [r7, #26]
 8003016:	e019      	b.n	800304c <main+0x1f4>
		  }
		  else if (DHT11_data.temp_int < 24){
 8003018:	4b43      	ldr	r3, [pc, #268]	; (8003128 <main+0x2d0>)
 800301a:	789b      	ldrb	r3, [r3, #2]
 800301c:	2b17      	cmp	r3, #23
 800301e:	d810      	bhi.n	8003042 <main+0x1ea>
			  if (real_time.rsec % 2 == 0){
 8003020:	4b3e      	ldr	r3, [pc, #248]	; (800311c <main+0x2c4>)
 8003022:	799b      	ldrb	r3, [r3, #6]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <main+0x1de>
				  petStats = cold1;
 800302e:	4b43      	ldr	r3, [pc, #268]	; (800313c <main+0x2e4>)
 8003030:	4a49      	ldr	r2, [pc, #292]	; (8003158 <main+0x300>)
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e002      	b.n	800303c <main+0x1e4>
			  }
			  else {
				  petStats = cold2;
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <main+0x2e4>)
 8003038:	4a48      	ldr	r2, [pc, #288]	; (800315c <main+0x304>)
 800303a:	601a      	str	r2, [r3, #0]
			  }
			  pet_update = 1;
 800303c:	2301      	movs	r3, #1
 800303e:	76bb      	strb	r3, [r7, #26]
 8003040:	e004      	b.n	800304c <main+0x1f4>
		  }
		  else {
			  petStats = normal;
 8003042:	4b3e      	ldr	r3, [pc, #248]	; (800313c <main+0x2e4>)
 8003044:	4a46      	ldr	r2, [pc, #280]	; (8003160 <main+0x308>)
 8003046:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	76bb      	strb	r3, [r7, #26]
		  }
	  }
	  do {
		  //Home Buttons
		  if(mode==0){
 800304c:	7efb      	ldrb	r3, [r7, #27]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 80f4 	bne.w	800323c <main+0x3e4>
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {
 8003054:	4936      	ldr	r1, [pc, #216]	; (8003130 <main+0x2d8>)
 8003056:	4843      	ldr	r0, [pc, #268]	; (8003164 <main+0x30c>)
 8003058:	f7fd ff10 	bl	8000e7c <Check_touchkey>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d017      	beq.n	8003092 <main+0x23a>
				  alarm_release(); mode_new = 1; USART_WATER_FLAG = 1;
 8003062:	f7fe fbff 	bl	8001864 <alarm_release>
 8003066:	2301      	movs	r3, #1
 8003068:	74fb      	strb	r3, [r7, #19]
 800306a:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <main+0x310>)
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
				  if(EXER_TIMER_SET_FLAG && exertimer<= RTC_raw()) EXER_TIMER_SET_FLAG = 0;
 8003070:	4b36      	ldr	r3, [pc, #216]	; (800314c <main+0x2f4>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 81ae 	beq.w	80033d6 <main+0x57e>
 800307a:	f002 ffcf 	bl	800601c <RTC_raw>
 800307e:	4602      	mov	r2, r0
 8003080:	4b28      	ldr	r3, [pc, #160]	; (8003124 <main+0x2cc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	f0c0 81a6 	bcc.w	80033d6 <main+0x57e>
 800308a:	4b30      	ldr	r3, [pc, #192]	; (800314c <main+0x2f4>)
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
				  break;
 8003090:	e1a1      	b.n	80033d6 <main+0x57e>
			  }
			  if(Check_touchkey(&home_dark_mode,&Coordinate) && !ADC_DARKMODE_TOGGLE) {mode_new = 2; break;}
 8003092:	4927      	ldr	r1, [pc, #156]	; (8003130 <main+0x2d8>)
 8003094:	4835      	ldr	r0, [pc, #212]	; (800316c <main+0x314>)
 8003096:	f7fd fef1 	bl	8000e7c <Check_touchkey>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <main+0x256>
 80030a0:	4b25      	ldr	r3, [pc, #148]	; (8003138 <main+0x2e0>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <main+0x256>
 80030a8:	2302      	movs	r3, #2
 80030aa:	74fb      	strb	r3, [r7, #19]
 80030ac:	e1cf      	b.n	800344e <main+0x5f6>
			  if(value > 3000 && petStats != sleep1 && petStats != sleep2  && petStats != sleep_water){mode_new = 2; break;}
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d911      	bls.n	80030dc <main+0x284>
 80030b8:	4b20      	ldr	r3, [pc, #128]	; (800313c <main+0x2e4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <main+0x2e8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00c      	beq.n	80030dc <main+0x284>
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <main+0x2e4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <main+0x2ec>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d007      	beq.n	80030dc <main+0x284>
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <main+0x2e4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <main+0x318>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d002      	beq.n	80030dc <main+0x284>
 80030d6:	2302      	movs	r3, #2
 80030d8:	74fb      	strb	r3, [r7, #19]
 80030da:	e1b8      	b.n	800344e <main+0x5f6>
			  if(value < 3000 && (petStats == sleep1 || petStats == sleep2  || petStats == sleep_water)){mode_new = 2; break;}
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d846      	bhi.n	8003174 <main+0x31c>
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <main+0x2e4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <main+0x2e8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d009      	beq.n	8003104 <main+0x2ac>
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <main+0x2e4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a13      	ldr	r2, [pc, #76]	; (8003144 <main+0x2ec>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <main+0x2ac>
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <main+0x2e4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <main+0x318>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d137      	bne.n	8003174 <main+0x31c>
 8003104:	2302      	movs	r3, #2
 8003106:	74fb      	strb	r3, [r7, #19]
 8003108:	e1a1      	b.n	800344e <main+0x5f6>
 800310a:	bf00      	nop
 800310c:	20000184 	.word	0x20000184
 8003110:	40011400 	.word	0x40011400
 8003114:	20000154 	.word	0x20000154
 8003118:	20000000 	.word	0x20000000
 800311c:	20000368 	.word	0x20000368
 8003120:	2000038c 	.word	0x2000038c
 8003124:	20000388 	.word	0x20000388
 8003128:	2000035c 	.word	0x2000035c
 800312c:	20000018 	.word	0x20000018
 8003130:	20000364 	.word	0x20000364
 8003134:	cccccccd 	.word	0xcccccccd
 8003138:	20000395 	.word	0x20000395
 800313c:	2000000c 	.word	0x2000000c
 8003140:	08037ce0 	.word	0x08037ce0
 8003144:	0803ed68 	.word	0x0803ed68
 8003148:	20000378 	.word	0x20000378
 800314c:	20000394 	.word	0x20000394
 8003150:	08022b48 	.word	0x08022b48
 8003154:	08029bd0 	.word	0x08029bd0
 8003158:	0800d9b0 	.word	0x0800d9b0
 800315c:	08014a38 	.word	0x08014a38
 8003160:	08030c58 	.word	0x08030c58
 8003164:	0800d82c 	.word	0x0800d82c
 8003168:	20000391 	.word	0x20000391
 800316c:	0800d83c 	.word	0x0800d83c
 8003170:	08045df0 	.word	0x08045df0
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep1 && petStats != sleep2  && petStats != sleep_water) {petStats = happy1;}; break;}
 8003174:	499a      	ldr	r1, [pc, #616]	; (80033e0 <main+0x588>)
 8003176:	489b      	ldr	r0, [pc, #620]	; (80033e4 <main+0x58c>)
 8003178:	f7fd fe80 	bl	8000e7c <Check_touchkey>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d017      	beq.n	80031b2 <main+0x35a>
 8003182:	2301      	movs	r3, #1
 8003184:	76bb      	strb	r3, [r7, #26]
 8003186:	4b98      	ldr	r3, [pc, #608]	; (80033e8 <main+0x590>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a98      	ldr	r2, [pc, #608]	; (80033ec <main+0x594>)
 800318c:	4293      	cmp	r3, r2
 800318e:	f000 8124 	beq.w	80033da <main+0x582>
 8003192:	4b95      	ldr	r3, [pc, #596]	; (80033e8 <main+0x590>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a96      	ldr	r2, [pc, #600]	; (80033f0 <main+0x598>)
 8003198:	4293      	cmp	r3, r2
 800319a:	f000 811e 	beq.w	80033da <main+0x582>
 800319e:	4b92      	ldr	r3, [pc, #584]	; (80033e8 <main+0x590>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a94      	ldr	r2, [pc, #592]	; (80033f4 <main+0x59c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f000 8118 	beq.w	80033da <main+0x582>
 80031aa:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <main+0x590>)
 80031ac:	4a92      	ldr	r2, [pc, #584]	; (80033f8 <main+0x5a0>)
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e113      	b.n	80033da <main+0x582>
			  if(Check_touchkey(&home_stats,&Coordinate)) {mode_new = 3; break;}
 80031b2:	498b      	ldr	r1, [pc, #556]	; (80033e0 <main+0x588>)
 80031b4:	4891      	ldr	r0, [pc, #580]	; (80033fc <main+0x5a4>)
 80031b6:	f7fd fe61 	bl	8000e7c <Check_touchkey>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <main+0x36e>
 80031c0:	2303      	movs	r3, #3
 80031c2:	74fb      	strb	r3, [r7, #19]
 80031c4:	e143      	b.n	800344e <main+0x5f6>
			  if(Check_touchkey(&home_config,&Coordinate)) {mode_new = 4; break;}
 80031c6:	4986      	ldr	r1, [pc, #536]	; (80033e0 <main+0x588>)
 80031c8:	488d      	ldr	r0, [pc, #564]	; (8003400 <main+0x5a8>)
 80031ca:	f7fd fe57 	bl	8000e7c <Check_touchkey>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <main+0x382>
 80031d4:	2304      	movs	r3, #4
 80031d6:	74fb      	strb	r3, [r7, #19]
 80031d8:	e139      	b.n	800344e <main+0x5f6>
			  if (Check_touchkey(&home_set, &Coordinate)) {
 80031da:	4981      	ldr	r1, [pc, #516]	; (80033e0 <main+0x588>)
 80031dc:	4889      	ldr	r0, [pc, #548]	; (8003404 <main+0x5ac>)
 80031de:	f7fd fe4d 	bl	8000e7c <Check_touchkey>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <main+0x396>
			  					mode_new = 6;
 80031e8:	2306      	movs	r3, #6
 80031ea:	74fb      	strb	r3, [r7, #19]
			  					break;
 80031ec:	e12f      	b.n	800344e <main+0x5f6>
			  				}
			  if (petStats == sleep1 && sec %2 == 0){
 80031ee:	4b7e      	ldr	r3, [pc, #504]	; (80033e8 <main+0x590>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7e      	ldr	r2, [pc, #504]	; (80033ec <main+0x594>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d10b      	bne.n	8003210 <main+0x3b8>
 80031f8:	4b83      	ldr	r3, [pc, #524]	; (8003408 <main+0x5b0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <main+0x3b8>
			  		  		petStats = sleep2;
 8003204:	4b78      	ldr	r3, [pc, #480]	; (80033e8 <main+0x590>)
 8003206:	4a7a      	ldr	r2, [pc, #488]	; (80033f0 <main+0x598>)
 8003208:	601a      	str	r2, [r3, #0]
			  		  		pet_update = 1;
 800320a:	2301      	movs	r3, #1
 800320c:	76bb      	strb	r3, [r7, #26]
 800320e:	e11e      	b.n	800344e <main+0x5f6>
			  		  }
			  else if (petStats == sleep2 && sec %2 == 1){
 8003210:	4b75      	ldr	r3, [pc, #468]	; (80033e8 <main+0x590>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a76      	ldr	r2, [pc, #472]	; (80033f0 <main+0x598>)
 8003216:	4293      	cmp	r3, r2
 8003218:	f040 8119 	bne.w	800344e <main+0x5f6>
 800321c:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <main+0x5b0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	bfb8      	it	lt
 8003228:	425b      	neglt	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 810f 	bne.w	800344e <main+0x5f6>
			  		  		petStats = sleep1;
 8003230:	4b6d      	ldr	r3, [pc, #436]	; (80033e8 <main+0x590>)
 8003232:	4a6e      	ldr	r2, [pc, #440]	; (80033ec <main+0x594>)
 8003234:	601a      	str	r2, [r3, #0]
			  		  		pet_update = 1;
 8003236:	2301      	movs	r3, #1
 8003238:	76bb      	strb	r3, [r7, #26]
 800323a:	e108      	b.n	800344e <main+0x5f6>
			  		  }
		  }
		  //Other Buttons In Other Screen
		  else if (mode==3){//Statistics
 800323c:	7efb      	ldrb	r3, [r7, #27]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d10a      	bne.n	8003258 <main+0x400>
			  if(Check_touchkey(&stats_home,&Coordinate)) {mode_new = 0; break;}
 8003242:	4967      	ldr	r1, [pc, #412]	; (80033e0 <main+0x588>)
 8003244:	4871      	ldr	r0, [pc, #452]	; (800340c <main+0x5b4>)
 8003246:	f7fd fe19 	bl	8000e7c <Check_touchkey>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80fe 	beq.w	800344e <main+0x5f6>
 8003252:	2300      	movs	r3, #0
 8003254:	74fb      	strb	r3, [r7, #19]
 8003256:	e0fa      	b.n	800344e <main+0x5f6>
		  }else if (mode==4){//Configuration
 8003258:	7efb      	ldrb	r3, [r7, #27]
 800325a:	2b04      	cmp	r3, #4
 800325c:	d12c      	bne.n	80032b8 <main+0x460>
			  if(Check_touchkey(&config_home,&Coordinate)) {mode_new = 0; break;}
 800325e:	4960      	ldr	r1, [pc, #384]	; (80033e0 <main+0x588>)
 8003260:	486b      	ldr	r0, [pc, #428]	; (8003410 <main+0x5b8>)
 8003262:	f7fd fe0b 	bl	8000e7c <Check_touchkey>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <main+0x41a>
 800326c:	2300      	movs	r3, #0
 800326e:	74fb      	strb	r3, [r7, #19]
 8003270:	e0ed      	b.n	800344e <main+0x5f6>
			  if(Check_touchkey(&config_set_time,&Coordinate)) {mode_new = 5; USART_GET_TIME_FLAG = 1; break;}
 8003272:	495b      	ldr	r1, [pc, #364]	; (80033e0 <main+0x588>)
 8003274:	4867      	ldr	r0, [pc, #412]	; (8003414 <main+0x5bc>)
 8003276:	f7fd fe01 	bl	8000e7c <Check_touchkey>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <main+0x434>
 8003280:	2305      	movs	r3, #5
 8003282:	74fb      	strb	r3, [r7, #19]
 8003284:	4b64      	ldr	r3, [pc, #400]	; (8003418 <main+0x5c0>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e0e0      	b.n	800344e <main+0x5f6>
			  if(Check_touchkey(&config_adc,&Coordinate)) {
 800328c:	4954      	ldr	r1, [pc, #336]	; (80033e0 <main+0x588>)
 800328e:	4863      	ldr	r0, [pc, #396]	; (800341c <main+0x5c4>)
 8003290:	f7fd fdf4 	bl	8000e7c <Check_touchkey>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80d9 	beq.w	800344e <main+0x5f6>
				  mode_new = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	74fb      	strb	r3, [r7, #19]
				  if(!ADC_DARKMODE_TOGGLE) ADC_DARKMODE_TOGGLE = 1;
 80032a0:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <main+0x5c8>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <main+0x458>
 80032a8:	4b5d      	ldr	r3, [pc, #372]	; (8003420 <main+0x5c8>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
				  else ADC_DARKMODE_TOGGLE = 0;
				  break;
 80032ae:	e0ce      	b.n	800344e <main+0x5f6>
				  else ADC_DARKMODE_TOGGLE = 0;
 80032b0:	4b5b      	ldr	r3, [pc, #364]	; (8003420 <main+0x5c8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
				  break;
 80032b6:	e0ca      	b.n	800344e <main+0x5f6>
			  }
		  }else if (mode==5){
 80032b8:	7efb      	ldrb	r3, [r7, #27]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d10d      	bne.n	80032da <main+0x482>
			  if(Check_touchkey(&time_set_back,&Coordinate)) {
 80032be:	4948      	ldr	r1, [pc, #288]	; (80033e0 <main+0x588>)
 80032c0:	4858      	ldr	r0, [pc, #352]	; (8003424 <main+0x5cc>)
 80032c2:	f7fd fddb 	bl	8000e7c <Check_touchkey>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80c0 	beq.w	800344e <main+0x5f6>
				  mode_new = 4;
 80032ce:	2304      	movs	r3, #4
 80032d0:	74fb      	strb	r3, [r7, #19]
				  USART_GET_TIME_FLAG = 0;
 80032d2:	4b51      	ldr	r3, [pc, #324]	; (8003418 <main+0x5c0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
				  break;
 80032d8:	e0b9      	b.n	800344e <main+0x5f6>
			  }
		  }
		  else if (mode==6){
 80032da:	7efb      	ldrb	r3, [r7, #27]
 80032dc:	2b06      	cmp	r3, #6
 80032de:	f040 80b6 	bne.w	800344e <main+0x5f6>
			  if (Check_touchkey(&stats_home, &Coordinate)) {
 80032e2:	493f      	ldr	r1, [pc, #252]	; (80033e0 <main+0x588>)
 80032e4:	4849      	ldr	r0, [pc, #292]	; (800340c <main+0x5b4>)
 80032e6:	f7fd fdc9 	bl	8000e7c <Check_touchkey>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <main+0x49e>
			  					mode_new = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	74fb      	strb	r3, [r7, #19]
			  					break;
 80032f4:	e0ab      	b.n	800344e <main+0x5f6>
			  				}
			  				if (Check_touchkey(&plus_hour, &Coordinate)) {
 80032f6:	493a      	ldr	r1, [pc, #232]	; (80033e0 <main+0x588>)
 80032f8:	484b      	ldr	r0, [pc, #300]	; (8003428 <main+0x5d0>)
 80032fa:	f7fd fdbf 	bl	8000e7c <Check_touchkey>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <main+0x4c0>
			  					exertime += 3600;
 8003304:	4b49      	ldr	r3, [pc, #292]	; (800342c <main+0x5d4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800330c:	4a47      	ldr	r2, [pc, #284]	; (800342c <main+0x5d4>)
 800330e:	6013      	str	r3, [r2, #0]
			  					HAL_Delay(100);
 8003310:	2064      	movs	r0, #100	; 0x64
 8003312:	f004 f93f 	bl	8007594 <HAL_Delay>
			  					break;
 8003316:	e09a      	b.n	800344e <main+0x5f6>
			  				} else if (Check_touchkey(&minus_hour, &Coordinate)) {
 8003318:	4931      	ldr	r1, [pc, #196]	; (80033e0 <main+0x588>)
 800331a:	4845      	ldr	r0, [pc, #276]	; (8003430 <main+0x5d8>)
 800331c:	f7fd fdae 	bl	8000e7c <Check_touchkey>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d012      	beq.n	800334c <main+0x4f4>
			  					if (exertime > 3600) {
 8003326:	4b41      	ldr	r3, [pc, #260]	; (800342c <main+0x5d4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800332e:	d906      	bls.n	800333e <main+0x4e6>
			  						exertime -= 3600;
 8003330:	4b3e      	ldr	r3, [pc, #248]	; (800342c <main+0x5d4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8003338:	4a3c      	ldr	r2, [pc, #240]	; (800342c <main+0x5d4>)
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e002      	b.n	8003344 <main+0x4ec>
			  					} else {
			  						exertime = 0;
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <main+0x5d4>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
			  					}
			  					HAL_Delay(100);
 8003344:	2064      	movs	r0, #100	; 0x64
 8003346:	f004 f925 	bl	8007594 <HAL_Delay>
			  					break;
 800334a:	e080      	b.n	800344e <main+0x5f6>
			  				} else if (Check_touchkey(&plus_min, &Coordinate)) {
 800334c:	4924      	ldr	r1, [pc, #144]	; (80033e0 <main+0x588>)
 800334e:	4839      	ldr	r0, [pc, #228]	; (8003434 <main+0x5dc>)
 8003350:	f7fd fd94 	bl	8000e7c <Check_touchkey>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <main+0x514>
			  					exertime += 60;
 800335a:	4b34      	ldr	r3, [pc, #208]	; (800342c <main+0x5d4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	333c      	adds	r3, #60	; 0x3c
 8003360:	4a32      	ldr	r2, [pc, #200]	; (800342c <main+0x5d4>)
 8003362:	6013      	str	r3, [r2, #0]
			  					HAL_Delay(100);
 8003364:	2064      	movs	r0, #100	; 0x64
 8003366:	f004 f915 	bl	8007594 <HAL_Delay>
			  					break;
 800336a:	e070      	b.n	800344e <main+0x5f6>
			  				} else if (Check_touchkey(&minus_min, &Coordinate)) {
 800336c:	491c      	ldr	r1, [pc, #112]	; (80033e0 <main+0x588>)
 800336e:	4832      	ldr	r0, [pc, #200]	; (8003438 <main+0x5e0>)
 8003370:	f7fd fd84 	bl	8000e7c <Check_touchkey>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d010      	beq.n	800339c <main+0x544>
			  					if (exertime > 60) {
 800337a:	4b2c      	ldr	r3, [pc, #176]	; (800342c <main+0x5d4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b3c      	cmp	r3, #60	; 0x3c
 8003380:	d905      	bls.n	800338e <main+0x536>
			  						exertime -= 60;
 8003382:	4b2a      	ldr	r3, [pc, #168]	; (800342c <main+0x5d4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3b3c      	subs	r3, #60	; 0x3c
 8003388:	4a28      	ldr	r2, [pc, #160]	; (800342c <main+0x5d4>)
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e002      	b.n	8003394 <main+0x53c>
			  					} else {
			  						exertime = 0;
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <main+0x5d4>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
			  					}
			  					HAL_Delay(100);
 8003394:	2064      	movs	r0, #100	; 0x64
 8003396:	f004 f8fd 	bl	8007594 <HAL_Delay>
			  					break;
 800339a:	e058      	b.n	800344e <main+0x5f6>
			  				} else if (Check_touchkey(&set_set, &Coordinate)) {
 800339c:	4910      	ldr	r1, [pc, #64]	; (80033e0 <main+0x588>)
 800339e:	4827      	ldr	r0, [pc, #156]	; (800343c <main+0x5e4>)
 80033a0:	f7fd fd6c 	bl	8000e7c <Check_touchkey>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d051      	beq.n	800344e <main+0x5f6>
			  					if(exertime!=0){
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <main+0x5d4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d04c      	beq.n	800344c <main+0x5f4>
			  						exertime_fixed = exertime;
 80033b2:	4b1e      	ldr	r3, [pc, #120]	; (800342c <main+0x5d4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a22      	ldr	r2, [pc, #136]	; (8003440 <main+0x5e8>)
 80033b8:	6013      	str	r3, [r2, #0]
									exertimer = RTC_raw() + exertime;
 80033ba:	f002 fe2f 	bl	800601c <RTC_raw>
 80033be:	4602      	mov	r2, r0
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <main+0x5d4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <main+0x5ec>)
 80033c8:	6013      	str	r3, [r2, #0]
									EXER_TIMER_SET_FLAG = 1;
 80033ca:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <main+0x5f0>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
									mode_new = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	74fb      	strb	r3, [r7, #19]
			  					}
			  					break;
 80033d4:	e03a      	b.n	800344c <main+0x5f4>
				  break;
 80033d6:	bf00      	nop
 80033d8:	e039      	b.n	800344e <main+0x5f6>
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep1 && petStats != sleep2  && petStats != sleep_water) {petStats = happy1;}; break;}
 80033da:	bf00      	nop
 80033dc:	e037      	b.n	800344e <main+0x5f6>
 80033de:	bf00      	nop
 80033e0:	20000364 	.word	0x20000364
 80033e4:	0800d84c 	.word	0x0800d84c
 80033e8:	2000000c 	.word	0x2000000c
 80033ec:	08037ce0 	.word	0x08037ce0
 80033f0:	0803ed68 	.word	0x0803ed68
 80033f4:	08045df0 	.word	0x08045df0
 80033f8:	0801bac0 	.word	0x0801bac0
 80033fc:	0800d85c 	.word	0x0800d85c
 8003400:	0800d86c 	.word	0x0800d86c
 8003404:	0800d8cc 	.word	0x0800d8cc
 8003408:	2000038c 	.word	0x2000038c
 800340c:	0800d87c 	.word	0x0800d87c
 8003410:	0800d8ac 	.word	0x0800d8ac
 8003414:	0800d88c 	.word	0x0800d88c
 8003418:	20000390 	.word	0x20000390
 800341c:	0800d89c 	.word	0x0800d89c
 8003420:	20000395 	.word	0x20000395
 8003424:	0800d8bc 	.word	0x0800d8bc
 8003428:	0800d8dc 	.word	0x0800d8dc
 800342c:	20000380 	.word	0x20000380
 8003430:	0800d8fc 	.word	0x0800d8fc
 8003434:	0800d8ec 	.word	0x0800d8ec
 8003438:	0800d90c 	.word	0x0800d90c
 800343c:	0800d91c 	.word	0x0800d91c
 8003440:	20000384 	.word	0x20000384
 8003444:	20000388 	.word	0x20000388
 8003448:	20000394 	.word	0x20000394
			  					break;
 800344c:	bf00      	nop


	  } while (0);

	  //Reset Coordinates
	  XPT2046_Reset_TouchPoint(&Coordinate);
 800344e:	4881      	ldr	r0, [pc, #516]	; (8003654 <main+0x7fc>)
 8003450:	f004 f809 	bl	8007466 <XPT2046_Reset_TouchPoint>

	  if(next<= RTC_raw() || (exertimer<= RTC_raw() && EXER_TIMER_SET_FLAG)){ //Water/ Exercise Alarm
 8003454:	f002 fde2 	bl	800601c <RTC_raw>
 8003458:	4602      	mov	r2, r0
 800345a:	4b7f      	ldr	r3, [pc, #508]	; (8003658 <main+0x800>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d20a      	bcs.n	8003478 <main+0x620>
 8003462:	f002 fddb 	bl	800601c <RTC_raw>
 8003466:	4602      	mov	r2, r0
 8003468:	4b7c      	ldr	r3, [pc, #496]	; (800365c <main+0x804>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d344      	bcc.n	80034fa <main+0x6a2>
 8003470:	4b7b      	ldr	r3, [pc, #492]	; (8003660 <main+0x808>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d040      	beq.n	80034fa <main+0x6a2>
		  if(mode != 1) { //Not Drinking Water
 8003478:	7efb      	ldrb	r3, [r7, #27]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d02f      	beq.n	80034de <main+0x686>
			  if(!ALARM_TIMES_UP_RENDER_FLAG){ //Alarm Event that do only once
 800347e:	4b79      	ldr	r3, [pc, #484]	; (8003664 <main+0x80c>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d128      	bne.n	80034d8 <main+0x680>
				  Beep_set(63999, 563, 281);//2 Hz
 8003486:	f240 1219 	movw	r2, #281	; 0x119
 800348a:	f240 2133 	movw	r1, #563	; 0x233
 800348e:	f64f 10ff 	movw	r0, #63999	; 0xf9ff
 8003492:	f7fe fa6f 	bl	8001974 <Beep_set>
				  Beep_start();
 8003496:	f7fe fa59 	bl	800194c <Beep_start>
				  pet_update = 1;
 800349a:	2301      	movs	r3, #1
 800349c:	76bb      	strb	r3, [r7, #26]
				  mode_new = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	74fb      	strb	r3, [r7, #19]
				  USART_GET_TIME_FLAG = 0; //Prevent Get Time Flag causing Other ESP8266 functions get stuck
 80034a2:	4b71      	ldr	r3, [pc, #452]	; (8003668 <main+0x810>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
				  if((exertimer<= RTC_raw() && EXER_TIMER_SET_FLAG)){
 80034a8:	f002 fdb8 	bl	800601c <RTC_raw>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b6b      	ldr	r3, [pc, #428]	; (800365c <main+0x804>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d310      	bcc.n	80034d8 <main+0x680>
 80034b6:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <main+0x808>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00c      	beq.n	80034d8 <main+0x680>
					  Beep_set(63999, 1125, 562);//1 Hz
 80034be:	f240 2232 	movw	r2, #562	; 0x232
 80034c2:	f240 4165 	movw	r1, #1125	; 0x465
 80034c6:	f64f 10ff 	movw	r0, #63999	; 0xf9ff
 80034ca:	f7fe fa53 	bl	8001974 <Beep_set>
					  Beep_start();
 80034ce:	f7fe fa3d 	bl	800194c <Beep_start>
					  USART_EXERCISE_FLAG = 1; //Start Sending Exercise Data
 80034d2:	4b66      	ldr	r3, [pc, #408]	; (800366c <main+0x814>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  alarm_times_up();
 80034d8:	f7fe f9a6 	bl	8001828 <alarm_times_up>
 80034dc:	e00d      	b.n	80034fa <main+0x6a2>
		  }else{//In drinking Mode, Prevent Retriggering Alarm Just after drinking
			  if((exertimer<= RTC_raw() && EXER_TIMER_SET_FLAG)){
 80034de:	f002 fd9d 	bl	800601c <RTC_raw>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b5d      	ldr	r3, [pc, #372]	; (800365c <main+0x804>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d306      	bcc.n	80034fa <main+0x6a2>
 80034ec:	4b5c      	ldr	r3, [pc, #368]	; (8003660 <main+0x808>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <main+0x6a2>
				  EXER_TIMER_SET_FLAG = 0;
 80034f4:	4b5a      	ldr	r3, [pc, #360]	; (8003660 <main+0x808>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  if(mode != mode_new){
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	7efa      	ldrb	r2, [r7, #27]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d003      	beq.n	800350a <main+0x6b2>
		  mode = mode_new;
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	76fb      	strb	r3, [r7, #27]
		  render_done = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	74bb      	strb	r3, [r7, #18]
	  }

	  //Render Pet Image If Updated
	  if(pet_update){
 800350a:	7ebb      	ldrb	r3, [r7, #26]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <main+0x6ca>
		  UI_Home_Display_Pet(60,70,petStats);
 8003510:	4b57      	ldr	r3, [pc, #348]	; (8003670 <main+0x818>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	2146      	movs	r1, #70	; 0x46
 8003518:	203c      	movs	r0, #60	; 0x3c
 800351a:	f7fd febf 	bl	800129c <UI_Home_Display_Pet>
		  pet_update = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	76bb      	strb	r3, [r7, #26]
	  }

	  //Flag Enables Every 30 Seconds
	  if(DHT11_SCHEDULE_FLAG){
 8003522:	4b54      	ldr	r3, [pc, #336]	; (8003674 <main+0x81c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <main+0x6e8>
		  DHT11_ReadData(&DHT11_data);
 800352a:	4853      	ldr	r0, [pc, #332]	; (8003678 <main+0x820>)
 800352c:	f7fe fb9d 	bl	8001c6a <DHT11_ReadData>
		  DHT11_SCHEDULE_FLAG = 0;
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <main+0x81c>)
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
		  if(mode==0) UI_Home_Display_DHT11();
 8003536:	7efb      	ldrb	r3, [r7, #27]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <main+0x6e8>
 800353c:	f7fd fec0 	bl	80012c0 <UI_Home_Display_DHT11>
	  }



	  //Read Buffer when flag on
	  if(USART_GET_TIME_FLAG && mode==5){
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <main+0x810>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d04e      	beq.n	80035e6 <main+0x78e>
 8003548:	7efb      	ldrb	r3, [r7, #27]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d14b      	bne.n	80035e6 <main+0x78e>
		  if(USART_GET_TIME_FLAG==1) {esp8266_step_flag = 0; USART_GET_TIME_FLAG = 2;}
 800354e:	4b46      	ldr	r3, [pc, #280]	; (8003668 <main+0x810>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <main+0x70a>
 8003556:	4b49      	ldr	r3, [pc, #292]	; (800367c <main+0x824>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	4b42      	ldr	r3, [pc, #264]	; (8003668 <main+0x810>)
 800355e:	2202      	movs	r2, #2
 8003560:	701a      	strb	r2, [r3, #0]
		  esp8266_get_time(); //Do The Get Time Procedures
 8003562:	f7fe fdc5 	bl	80020f0 <esp8266_get_time>

		  if (esp8266_step_flag == 9){// Reading Done
 8003566:	4b45      	ldr	r3, [pc, #276]	; (800367c <main+0x824>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b09      	cmp	r3, #9
 800356c:	d13b      	bne.n	80035e6 <main+0x78e>
			  char* t = USART_DATE_BUFFER;
 800356e:	4b44      	ldr	r3, [pc, #272]	; (8003680 <main+0x828>)
 8003570:	617b      	str	r3, [r7, #20]
			  uint16_t dt[6];//yearmonth, day, hour, min, sec
			  sscanf(t, "%04d%02d%02d%02d%02d%02d", &dt[0], &dt[1],&dt[2],&dt[3],&dt[4],&dt[5]);
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	1c99      	adds	r1, r3, #2
 8003576:	1d3a      	adds	r2, r7, #4
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	330a      	adds	r3, #10
 800357c:	9303      	str	r3, [sp, #12]
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	3308      	adds	r3, #8
 8003582:	9302      	str	r3, [sp, #8]
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	3306      	adds	r3, #6
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	1d3b      	adds	r3, r7, #4
 800358c:	3304      	adds	r3, #4
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	460b      	mov	r3, r1
 8003592:	493c      	ldr	r1, [pc, #240]	; (8003684 <main+0x82c>)
 8003594:	6978      	ldr	r0, [r7, #20]
 8003596:	f007 fddd 	bl	800b154 <siscanf>


			  //Update RTC Success
			  if(RTC_Set(dt[0],dt[1],dt[2],dt[3],dt[4],dt[5])==0){
 800359a:	88b8      	ldrh	r0, [r7, #4]
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	b259      	sxtb	r1, r3
 80035a0:	893b      	ldrh	r3, [r7, #8]
 80035a2:	b2dc      	uxtb	r4, r3
 80035a4:	897b      	ldrh	r3, [r7, #10]
 80035a6:	b2dd      	uxtb	r5, r3
 80035a8:	89bb      	ldrh	r3, [r7, #12]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	89fa      	ldrh	r2, [r7, #14]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	9201      	str	r2, [sp, #4]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	462b      	mov	r3, r5
 80035b6:	4622      	mov	r2, r4
 80035b8:	f002 fafe 	bl	8005bb8 <RTC_Set>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d111      	bne.n	80035e6 <main+0x78e>

				  //Update Flag And UI
				  USART_GET_TIME_FLAG = 0;
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <main+0x810>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
				  LCD_Clear(0, 100, 250,150);
 80035c8:	2396      	movs	r3, #150	; 0x96
 80035ca:	22fa      	movs	r2, #250	; 0xfa
 80035cc:	2164      	movs	r1, #100	; 0x64
 80035ce:	2000      	movs	r0, #0
 80035d0:	f7ff f876 	bl	80026c0 <LCD_Clear>
				  LCD_DrawString(30, 100, "Done...");
 80035d4:	4a2c      	ldr	r2, [pc, #176]	; (8003688 <main+0x830>)
 80035d6:	2164      	movs	r1, #100	; 0x64
 80035d8:	201e      	movs	r0, #30
 80035da:	f7ff f969 	bl	80028b0 <LCD_DrawString>
				  alarm_update_last();
 80035de:	f7fe f917 	bl	8001810 <alarm_update_last>
				  alarm_update_next();
 80035e2:	f7fe f8d7 	bl	8001794 <alarm_update_next>
	  	  	  }
		  }
	  }

	  //Upload Exercise Data
	  if(USART_EXERCISE_FLAG && !USART_GET_TIME_FLAG){
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <main+0x814>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00f      	beq.n	800360e <main+0x7b6>
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <main+0x810>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <main+0x7b6>
		  if(USART_EXERCISE_FLAG==1) {esp8266_step_flag = 0; USART_EXERCISE_FLAG=2;} //Reset Step Flag
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <main+0x814>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d105      	bne.n	800360a <main+0x7b2>
 80035fe:	4b1f      	ldr	r3, [pc, #124]	; (800367c <main+0x824>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <main+0x814>)
 8003606:	2202      	movs	r2, #2
 8003608:	701a      	strb	r2, [r3, #0]
		  esp8266_update_exercise();
 800360a:	f7fe fe07 	bl	800221c <esp8266_update_exercise>
	  }

	  //Upload drink water data
	  if(USART_WATER_FLAG && !USART_GET_TIME_FLAG && !USART_EXERCISE_FLAG){
 800360e:	4b1f      	ldr	r3, [pc, #124]	; (800368c <main+0x834>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d013      	beq.n	800363e <main+0x7e6>
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <main+0x810>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <main+0x7e6>
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <main+0x814>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <main+0x7e6>
		  if(USART_WATER_FLAG==1) {esp8266_step_flag = 0;USART_WATER_FLAG=2;} //Reset Step Flag
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <main+0x834>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <main+0x7e2>
 800362e:	4b13      	ldr	r3, [pc, #76]	; (800367c <main+0x824>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	4b15      	ldr	r3, [pc, #84]	; (800368c <main+0x834>)
 8003636:	2202      	movs	r2, #2
 8003638:	701a      	strb	r2, [r3, #0]
		  esp8266_update_water();
 800363a:	f7fe fdb1 	bl	80021a0 <esp8266_update_water>
	  }


	  //Render LCD If Enter New Mode
	  Render(&mode_new, &render_done,petStats);
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <main+0x818>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f107 0112 	add.w	r1, r7, #18
 8003646:	f107 0313 	add.w	r3, r7, #19
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fc40 	bl	8000ed0 <Render>
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8003650:	e465      	b.n	8002f1e <main+0xc6>
 8003652:	bf00      	nop
 8003654:	20000364 	.word	0x20000364
 8003658:	20000378 	.word	0x20000378
 800365c:	20000388 	.word	0x20000388
 8003660:	20000394 	.word	0x20000394
 8003664:	20000393 	.word	0x20000393
 8003668:	20000390 	.word	0x20000390
 800366c:	20000392 	.word	0x20000392
 8003670:	2000000c 	.word	0x2000000c
 8003674:	20000010 	.word	0x20000010
 8003678:	2000035c 	.word	0x2000035c
 800367c:	20000000 	.word	0x20000000
 8003680:	20000398 	.word	0x20000398
 8003684:	0800d194 	.word	0x0800d194
 8003688:	0800d1b0 	.word	0x0800d1b0
 800368c:	20000391 	.word	0x20000391

08003690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b096      	sub	sp, #88	; 0x58
 8003694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800369a:	2228      	movs	r2, #40	; 0x28
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f007 fd50 	bl	800b144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036a4:	f107 031c 	add.w	r3, r7, #28
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036b4:	1d3b      	adds	r3, r7, #4
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	609a      	str	r2, [r3, #8]
 80036be:	60da      	str	r2, [r3, #12]
 80036c0:	611a      	str	r2, [r3, #16]
 80036c2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80036c4:	2305      	movs	r3, #5
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80036ce:	2300      	movs	r3, #0
 80036d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80036d2:	2301      	movs	r3, #1
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036d6:	2301      	movs	r3, #1
 80036d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036da:	2302      	movs	r3, #2
 80036dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80036e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80036e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036ee:	4618      	mov	r0, r3
 80036f0:	f005 f83a 	bl	8008768 <HAL_RCC_OscConfig>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80036fa:	f000 fbb9 	bl	8003e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036fe:	230f      	movs	r3, #15
 8003700:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003702:	2302      	movs	r3, #2
 8003704:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800370a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003710:	2300      	movs	r3, #0
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	2102      	movs	r1, #2
 800371a:	4618      	mov	r0, r3
 800371c:	f005 fa88 	bl	8008c30 <HAL_RCC_ClockConfig>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003726:	f000 fba3 	bl	8003e70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800372a:	2303      	movs	r3, #3
 800372c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800372e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003732:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003738:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f005 fc33 	bl	8008fa8 <HAL_RCCEx_PeriphCLKConfig>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003748:	f000 fb92 	bl	8003e70 <Error_Handler>
  }
}
 800374c:	bf00      	nop
 800374e:	3758      	adds	r7, #88	; 0x58
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003764:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <MX_ADC1_Init+0x74>)
 8003766:	4a19      	ldr	r2, [pc, #100]	; (80037cc <MX_ADC1_Init+0x78>)
 8003768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <MX_ADC1_Init+0x74>)
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <MX_ADC1_Init+0x74>)
 8003772:	2201      	movs	r2, #1
 8003774:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <MX_ADC1_Init+0x74>)
 8003778:	2200      	movs	r2, #0
 800377a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <MX_ADC1_Init+0x74>)
 800377e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <MX_ADC1_Init+0x74>)
 8003786:	2200      	movs	r2, #0
 8003788:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <MX_ADC1_Init+0x74>)
 800378c:	2201      	movs	r2, #1
 800378e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003790:	480d      	ldr	r0, [pc, #52]	; (80037c8 <MX_ADC1_Init+0x74>)
 8003792:	f003 ff23 	bl	80075dc <HAL_ADC_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800379c:	f000 fb68 	bl	8003e70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80037a0:	230c      	movs	r3, #12
 80037a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80037a8:	2305      	movs	r3, #5
 80037aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	4619      	mov	r1, r3
 80037b0:	4805      	ldr	r0, [pc, #20]	; (80037c8 <MX_ADC1_Init+0x74>)
 80037b2:	f004 f9b1 	bl	8007b18 <HAL_ADC_ConfigChannel>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80037bc:	f000 fb58 	bl	8003e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000154 	.word	0x20000154
 80037cc:	40012400 	.word	0x40012400

080037d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b094      	sub	sp, #80	; 0x50
 80037d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037ee:	f107 031c 	add.w	r3, r7, #28
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	611a      	str	r2, [r3, #16]
 80037fe:	615a      	str	r2, [r3, #20]
 8003800:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003802:	463b      	mov	r3, r7
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
 8003810:	615a      	str	r2, [r3, #20]
 8003812:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003814:	4b3f      	ldr	r3, [pc, #252]	; (8003914 <MX_TIM1_Init+0x144>)
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <MX_TIM1_Init+0x148>)
 8003818:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 800381a:	4b3e      	ldr	r3, [pc, #248]	; (8003914 <MX_TIM1_Init+0x144>)
 800381c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003820:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003822:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <MX_TIM1_Init+0x144>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1125;
 8003828:	4b3a      	ldr	r3, [pc, #232]	; (8003914 <MX_TIM1_Init+0x144>)
 800382a:	f240 4265 	movw	r2, #1125	; 0x465
 800382e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003830:	4b38      	ldr	r3, [pc, #224]	; (8003914 <MX_TIM1_Init+0x144>)
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <MX_TIM1_Init+0x144>)
 8003838:	2200      	movs	r2, #0
 800383a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800383c:	4b35      	ldr	r3, [pc, #212]	; (8003914 <MX_TIM1_Init+0x144>)
 800383e:	2200      	movs	r2, #0
 8003840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003842:	4834      	ldr	r0, [pc, #208]	; (8003914 <MX_TIM1_Init+0x144>)
 8003844:	f005 feda 	bl	80095fc <HAL_TIM_Base_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800384e:	f000 fb0f 	bl	8003e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800385c:	4619      	mov	r1, r3
 800385e:	482d      	ldr	r0, [pc, #180]	; (8003914 <MX_TIM1_Init+0x144>)
 8003860:	f006 fa0e 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800386a:	f000 fb01 	bl	8003e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800386e:	4829      	ldr	r0, [pc, #164]	; (8003914 <MX_TIM1_Init+0x144>)
 8003870:	f005 ff77 	bl	8009762 <HAL_TIM_PWM_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800387a:	f000 faf9 	bl	8003e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800387e:	2300      	movs	r3, #0
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003886:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800388a:	4619      	mov	r1, r3
 800388c:	4821      	ldr	r0, [pc, #132]	; (8003914 <MX_TIM1_Init+0x144>)
 800388e:	f006 fe70 	bl	800a572 <HAL_TIMEx_MasterConfigSynchronization>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003898:	f000 faea 	bl	8003e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800389c:	2360      	movs	r3, #96	; 0x60
 800389e:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 300;
 80038a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80038a4:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038ba:	f107 031c 	add.w	r3, r7, #28
 80038be:	2200      	movs	r2, #0
 80038c0:	4619      	mov	r1, r3
 80038c2:	4814      	ldr	r0, [pc, #80]	; (8003914 <MX_TIM1_Init+0x144>)
 80038c4:	f006 f916 	bl	8009af4 <HAL_TIM_PWM_ConfigChannel>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80038ce:	f000 facf 	bl	8003e70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038f0:	463b      	mov	r3, r7
 80038f2:	4619      	mov	r1, r3
 80038f4:	4807      	ldr	r0, [pc, #28]	; (8003914 <MX_TIM1_Init+0x144>)
 80038f6:	f006 fde4 	bl	800a4c2 <HAL_TIMEx_ConfigBreakDeadTime>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8003900:	f000 fab6 	bl	8003e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003904:	4803      	ldr	r0, [pc, #12]	; (8003914 <MX_TIM1_Init+0x144>)
 8003906:	f002 fccd 	bl	80062a4 <HAL_TIM_MspPostInit>

}
 800390a:	bf00      	nop
 800390c:	3750      	adds	r7, #80	; 0x50
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000198 	.word	0x20000198
 8003918:	40012c00 	.word	0x40012c00

0800391c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003930:	463b      	mov	r3, r7
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <MX_TIM2_Init+0x94>)
 800393a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800393e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <MX_TIM2_Init+0x94>)
 8003942:	2247      	movs	r2, #71	; 0x47
 8003944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <MX_TIM2_Init+0x94>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800394c:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <MX_TIM2_Init+0x94>)
 800394e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003954:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <MX_TIM2_Init+0x94>)
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <MX_TIM2_Init+0x94>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003960:	4813      	ldr	r0, [pc, #76]	; (80039b0 <MX_TIM2_Init+0x94>)
 8003962:	f005 fe4b 	bl	80095fc <HAL_TIM_Base_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800396c:	f000 fa80 	bl	8003e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	4619      	mov	r1, r3
 800397c:	480c      	ldr	r0, [pc, #48]	; (80039b0 <MX_TIM2_Init+0x94>)
 800397e:	f006 f97f 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003988:	f000 fa72 	bl	8003e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800398c:	2300      	movs	r3, #0
 800398e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003994:	463b      	mov	r3, r7
 8003996:	4619      	mov	r1, r3
 8003998:	4805      	ldr	r0, [pc, #20]	; (80039b0 <MX_TIM2_Init+0x94>)
 800399a:	f006 fdea 	bl	800a572 <HAL_TIMEx_MasterConfigSynchronization>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80039a4:	f000 fa64 	bl	8003e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039a8:	bf00      	nop
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200001d8 	.word	0x200001d8

080039b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c8:	463b      	mov	r3, r7
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <MX_TIM3_Init+0x94>)
 80039d2:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <MX_TIM3_Init+0x98>)
 80039d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 80039d6:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <MX_TIM3_Init+0x94>)
 80039d8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80039dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <MX_TIM3_Init+0x94>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 80039e4:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <MX_TIM3_Init+0x94>)
 80039e6:	f248 32d5 	movw	r2, #33749	; 0x83d5
 80039ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <MX_TIM3_Init+0x94>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <MX_TIM3_Init+0x94>)
 80039f4:	2280      	movs	r2, #128	; 0x80
 80039f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039f8:	4813      	ldr	r0, [pc, #76]	; (8003a48 <MX_TIM3_Init+0x94>)
 80039fa:	f005 fdff 	bl	80095fc <HAL_TIM_Base_Init>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003a04:	f000 fa34 	bl	8003e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	4619      	mov	r1, r3
 8003a14:	480c      	ldr	r0, [pc, #48]	; (8003a48 <MX_TIM3_Init+0x94>)
 8003a16:	f006 f933 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003a20:	f000 fa26 	bl	8003e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a24:	2300      	movs	r3, #0
 8003a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4805      	ldr	r0, [pc, #20]	; (8003a48 <MX_TIM3_Init+0x94>)
 8003a32:	f006 fd9e 	bl	800a572 <HAL_TIMEx_MasterConfigSynchronization>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003a3c:	f000 fa18 	bl	8003e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a40:	bf00      	nop
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000218 	.word	0x20000218
 8003a4c:	40000400 	.word	0x40000400

08003a50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a64:	463b      	mov	r3, r7
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <MX_TIM5_Init+0x98>)
 8003a70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a74:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003a78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8003a80:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a82:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8003a86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a88:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a90:	2280      	movs	r2, #128	; 0x80
 8003a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003a94:	4813      	ldr	r0, [pc, #76]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003a96:	f005 fdb1 	bl	80095fc <HAL_TIM_Base_Init>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003aa0:	f000 f9e6 	bl	8003e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003aaa:	f107 0308 	add.w	r3, r7, #8
 8003aae:	4619      	mov	r1, r3
 8003ab0:	480c      	ldr	r0, [pc, #48]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003ab2:	f006 f8e5 	bl	8009c80 <HAL_TIM_ConfigClockSource>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003abc:	f000 f9d8 	bl	8003e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ac8:	463b      	mov	r3, r7
 8003aca:	4619      	mov	r1, r3
 8003acc:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <MX_TIM5_Init+0x94>)
 8003ace:	f006 fd50 	bl	800a572 <HAL_TIMEx_MasterConfigSynchronization>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003ad8:	f000 f9ca 	bl	8003e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003adc:	bf00      	nop
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000258 	.word	0x20000258
 8003ae8:	40000c00 	.word	0x40000c00

08003aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <MX_USART1_UART_Init+0x60>)
 8003af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003b12:	220c      	movs	r2, #12
 8003b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b22:	4809      	ldr	r0, [pc, #36]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003b24:	f006 fd7b 	bl	800a61e <HAL_UART_Init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b2e:	f000 f99f 	bl	8003e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <MX_USART1_UART_Init+0x5c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0220 	orr.w	r2, r2, #32
 8003b40:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000298 	.word	0x20000298
 8003b4c:	40013800 	.word	0x40013800

08003b50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b54:	4b15      	ldr	r3, [pc, #84]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b56:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <MX_USART3_UART_Init+0x60>)
 8003b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b74:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b86:	4809      	ldr	r0, [pc, #36]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b88:	f006 fd49 	bl	800a61e <HAL_UART_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003b92:	f000 f96d 	bl	8003e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <MX_USART3_UART_Init+0x5c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0220 	orr.w	r2, r2, #32
 8003ba4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200002d8 	.word	0x200002d8
 8003bb0:	40004800 	.word	0x40004800

08003bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bba:	f107 0318 	add.w	r3, r7, #24
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
 8003bc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4a6e      	ldr	r2, [pc, #440]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd2:	6193      	str	r3, [r2, #24]
 8003bd4:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be0:	4b69      	ldr	r3, [pc, #420]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4a68      	ldr	r2, [pc, #416]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003be6:	f043 0310 	orr.w	r3, r3, #16
 8003bea:	6193      	str	r3, [r2, #24]
 8003bec:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf8:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	4a62      	ldr	r2, [pc, #392]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6193      	str	r3, [r2, #24]
 8003c04:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c10:	4b5d      	ldr	r3, [pc, #372]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003c16:	f043 0308 	orr.w	r3, r3, #8
 8003c1a:	6193      	str	r3, [r2, #24]
 8003c1c:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c28:	4b57      	ldr	r3, [pc, #348]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	4a56      	ldr	r2, [pc, #344]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003c2e:	f043 0320 	orr.w	r3, r3, #32
 8003c32:	6193      	str	r3, [r2, #24]
 8003c34:	4b54      	ldr	r3, [pc, #336]	; (8003d88 <MX_GPIO_Init+0x1d4>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003c40:	2200      	movs	r2, #0
 8003c42:	2107      	movs	r1, #7
 8003c44:	4851      	ldr	r0, [pc, #324]	; (8003d8c <MX_GPIO_Init+0x1d8>)
 8003c46:	f004 fd48 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	484f      	ldr	r0, [pc, #316]	; (8003d8c <MX_GPIO_Init+0x1d8>)
 8003c50:	f004 fd43 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8003c54:	2201      	movs	r2, #1
 8003c56:	2123      	movs	r1, #35	; 0x23
 8003c58:	484d      	ldr	r0, [pc, #308]	; (8003d90 <MX_GPIO_Init+0x1dc>)
 8003c5a:	f004 fd3e 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003c64:	484b      	ldr	r0, [pc, #300]	; (8003d94 <MX_GPIO_Init+0x1e0>)
 8003c66:	f004 fd38 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003c70:	4847      	ldr	r0, [pc, #284]	; (8003d90 <MX_GPIO_Init+0x1dc>)
 8003c72:	f004 fd32 	bl	80086da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 DHT11_Pin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8003c76:	2347      	movs	r3, #71	; 0x47
 8003c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c82:	2303      	movs	r3, #3
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c86:	f107 0318 	add.w	r3, r7, #24
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	483f      	ldr	r0, [pc, #252]	; (8003d8c <MX_GPIO_Init+0x1d8>)
 8003c8e:	f004 fb75 	bl	800837c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c92:	2308      	movs	r3, #8
 8003c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c9e:	f107 0318 	add.w	r3, r7, #24
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4839      	ldr	r0, [pc, #228]	; (8003d8c <MX_GPIO_Init+0x1d8>)
 8003ca6:	f004 fb69 	bl	800837c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003caa:	2310      	movs	r3, #16
 8003cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cae:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <MX_GPIO_Init+0x1e4>)
 8003cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cb6:	f107 0318 	add.w	r3, r7, #24
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4833      	ldr	r0, [pc, #204]	; (8003d8c <MX_GPIO_Init+0x1d8>)
 8003cbe:	f004 fb5d 	bl	800837c <HAL_GPIO_Init>

  /*Configure GPIO pin : K2_Pin */
  GPIO_InitStruct.Pin = K2_Pin;
 8003cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cc8:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <MX_GPIO_Init+0x1e8>)
 8003cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	f107 0318 	add.w	r3, r7, #24
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4832      	ldr	r0, [pc, #200]	; (8003da0 <MX_GPIO_Init+0x1ec>)
 8003cd8:	f004 fb50 	bl	800837c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ce0:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <MX_GPIO_Init+0x1e8>)
 8003ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce8:	f107 0318 	add.w	r3, r7, #24
 8003cec:	4619      	mov	r1, r3
 8003cee:	482d      	ldr	r0, [pc, #180]	; (8003da4 <MX_GPIO_Init+0x1f0>)
 8003cf0:	f004 fb44 	bl	800837c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 8003cf4:	f240 1323 	movw	r3, #291	; 0x123
 8003cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d02:	2303      	movs	r3, #3
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d06:	f107 0318 	add.w	r3, r7, #24
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4820      	ldr	r0, [pc, #128]	; (8003d90 <MX_GPIO_Init+0x1dc>)
 8003d0e:	f004 fb35 	bl	800837c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003d12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d20:	2303      	movs	r3, #3
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d24:	f107 0318 	add.w	r3, r7, #24
 8003d28:	4619      	mov	r1, r3
 8003d2a:	481a      	ldr	r0, [pc, #104]	; (8003d94 <MX_GPIO_Init+0x1e0>)
 8003d2c:	f004 fb26 	bl	800837c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d42:	f107 0318 	add.w	r3, r7, #24
 8003d46:	4619      	mov	r1, r3
 8003d48:	4811      	ldr	r0, [pc, #68]	; (8003d90 <MX_GPIO_Init+0x1dc>)
 8003d4a:	f004 fb17 	bl	800837c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2100      	movs	r1, #0
 8003d52:	2006      	movs	r0, #6
 8003d54:	f004 f9d3 	bl	80080fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003d58:	2006      	movs	r0, #6
 8003d5a:	f004 f9ec 	bl	8008136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2100      	movs	r1, #0
 8003d62:	200a      	movs	r0, #10
 8003d64:	f004 f9cb 	bl	80080fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003d68:	200a      	movs	r0, #10
 8003d6a:	f004 f9e4 	bl	8008136 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2100      	movs	r1, #0
 8003d72:	2028      	movs	r0, #40	; 0x28
 8003d74:	f004 f9c3 	bl	80080fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d78:	2028      	movs	r0, #40	; 0x28
 8003d7a:	f004 f9dc 	bl	8008136 <HAL_NVIC_EnableIRQ>

}
 8003d7e:	bf00      	nop
 8003d80:	3728      	adds	r7, #40	; 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40011800 	.word	0x40011800
 8003d90:	40010c00 	.word	0x40010c00
 8003d94:	40011400 	.word	0x40011400
 8003d98:	10210000 	.word	0x10210000
 8003d9c:	10110000 	.word	0x10110000
 8003da0:	40011000 	.word	0x40011000
 8003da4:	40010800 	.word	0x40010800

08003da8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
 8003dbc:	615a      	str	r2, [r3, #20]
 8003dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003dc0:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003dc2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003dc6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003dca:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <MX_FSMC_Init+0xc0>)
 8003dcc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003dce:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003dd4:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003dda:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003de0:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003de2:	2210      	movs	r2, #16
 8003de4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003de6:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003df2:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003dfe:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003e00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003e0c:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003e1e:	230f      	movs	r3, #15
 8003e20:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003e22:	230f      	movs	r3, #15
 8003e24:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003e26:	23ff      	movs	r3, #255	; 0xff
 8003e28:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003e2a:	230f      	movs	r3, #15
 8003e2c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003e2e:	2310      	movs	r3, #16
 8003e30:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003e32:	2311      	movs	r3, #17
 8003e34:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4808      	ldr	r0, [pc, #32]	; (8003e64 <MX_FSMC_Init+0xbc>)
 8003e42:	f005 fb97 	bl	8009574 <HAL_SRAM_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8003e4c:	f000 f810 	bl	8003e70 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <MX_FSMC_Init+0xc4>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4a05      	ldr	r2, [pc, #20]	; (8003e6c <MX_FSMC_Init+0xc4>)
 8003e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e5a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003e5c:	bf00      	nop
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000318 	.word	0x20000318
 8003e68:	a0000104 	.word	0xa0000104
 8003e6c:	40010000 	.word	0x40010000

08003e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <_putchar>:
#if defined(PRINTF_SUPPORT_FLOAT)
#include <float.h>
#endif

void _putchar(char character)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
	///注意这里的输出函数需要自己修改，我这里是设置了串口输出
    HAL_UART_Transmit(&huart3 ,(uint8_t*)&character, 1, HAL_MAX_DELAY);
 8003e86:	1df9      	adds	r1, r7, #7
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4803      	ldr	r0, [pc, #12]	; (8003e9c <_putchar+0x20>)
 8003e90:	f006 fc12 	bl	800a6b8 <HAL_UART_Transmit>
    // send char to console etc.
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	200002d8 	.word	0x200002d8

08003ea0 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d204      	bcs.n	8003ec2 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	701a      	strb	r2, [r3, #0]
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <_out_char+0x1e>
    _putchar(character);
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff ffbc 	bl	8003e7c <_putchar>
  }
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e002      	b.n	8003f22 <_strnlen_s+0x16>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <_strnlen_s+0x28>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	603a      	str	r2, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f3      	bne.n	8003f1c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	1ad3      	subs	r3, r2, r3
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	2b2f      	cmp	r3, #47	; 0x2f
 8003f52:	d904      	bls.n	8003f5e <_is_digit+0x1a>
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	2b39      	cmp	r3, #57	; 0x39
 8003f58:	d801      	bhi.n	8003f5e <_is_digit+0x1a>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <_is_digit+0x1c>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	b2db      	uxtb	r3, r3
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f7c:	e00e      	b.n	8003f9c <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6011      	str	r1, [r2, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	4403      	add	r3, r0
 8003f98:	3b30      	subs	r3, #48	; 0x30
 8003f9a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ffce 	bl	8003f44 <_is_digit>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e7      	bne.n	8003f7e <_atoi+0xe>
  }
  return i;
 8003fae:	68fb      	ldr	r3, [r7, #12]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d125      	bne.n	8004020 <_out_rev+0x68>
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d120      	bne.n	8004020 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e00a      	b.n	8003ffa <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	1c53      	adds	r3, r2, #1
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	68fc      	ldr	r4, [r7, #12]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	2020      	movs	r0, #32
 8003ff2:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d3f0      	bcc.n	8003fe4 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8004002:	e00d      	b.n	8004020 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8004004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004006:	3b01      	subs	r3, #1
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	4413      	add	r3, r2
 8004010:	7818      	ldrb	r0, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	1c53      	adds	r3, r2, #1
 8004016:	607b      	str	r3, [r7, #4]
 8004018:	68fc      	ldr	r4, [r7, #12]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	47a0      	blx	r4
  while (len) {
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ee      	bne.n	8004004 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00e      	beq.n	800404e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8004030:	e007      	b.n	8004042 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	1c53      	adds	r3, r2, #1
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	68fc      	ldr	r4, [r7, #12]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	2020      	movs	r0, #32
 8004040:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	429a      	cmp	r2, r3
 800404c:	d8f1      	bhi.n	8004032 <_out_rev+0x7a>
    }
  }

  return idx;
 800404e:	687b      	ldr	r3, [r7, #4]
}
 8004050:	4618      	mov	r0, r3
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af04      	add	r7, sp, #16
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d136      	bne.n	80040de <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d018      	beq.n	80040a8 <_ntoa_format+0x50>
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d013      	beq.n	80040a8 <_ntoa_format+0x50>
 8004080:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <_ntoa_format+0x3a>
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <_ntoa_format+0x50>
      width--;
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	3b01      	subs	r3, #1
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004098:	e006      	b.n	80040a8 <_ntoa_format+0x50>
      buf[len++] = '0';
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	61fa      	str	r2, [r7, #28]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4413      	add	r3, r2
 80040a4:	2230      	movs	r2, #48	; 0x30
 80040a6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d20a      	bcs.n	80040c6 <_ntoa_format+0x6e>
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b1f      	cmp	r3, #31
 80040b4:	d9f1      	bls.n	800409a <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040b6:	e006      	b.n	80040c6 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	61fa      	str	r2, [r7, #28]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4413      	add	r3, r2
 80040c2:	2230      	movs	r2, #48	; 0x30
 80040c4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d006      	beq.n	80040de <_ntoa_format+0x86>
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d202      	bcs.n	80040de <_ntoa_format+0x86>
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b1f      	cmp	r3, #31
 80040dc:	d9ec      	bls.n	80040b8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d058      	beq.n	800419a <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d116      	bne.n	8004120 <_ntoa_format+0xc8>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <_ntoa_format+0xc8>
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d003      	beq.n	8004108 <_ntoa_format+0xb0>
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d10b      	bne.n	8004120 <_ntoa_format+0xc8>
      len--;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	3b01      	subs	r3, #1
 800410c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <_ntoa_format+0xc8>
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	2b10      	cmp	r3, #16
 8004118:	d102      	bne.n	8004120 <_ntoa_format+0xc8>
        len--;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3b01      	subs	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	2b10      	cmp	r3, #16
 8004124:	d10f      	bne.n	8004146 <_ntoa_format+0xee>
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <_ntoa_format+0xee>
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	2b1f      	cmp	r3, #31
 8004134:	d807      	bhi.n	8004146 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	61fa      	str	r2, [r7, #28]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4413      	add	r3, r2
 8004140:	2278      	movs	r2, #120	; 0x78
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e01f      	b.n	8004186 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2b10      	cmp	r3, #16
 800414a:	d10f      	bne.n	800416c <_ntoa_format+0x114>
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <_ntoa_format+0x114>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2b1f      	cmp	r3, #31
 800415a:	d807      	bhi.n	800416c <_ntoa_format+0x114>
      buf[len++] = 'X';
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	61fa      	str	r2, [r7, #28]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4413      	add	r3, r2
 8004166:	2258      	movs	r2, #88	; 0x58
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e00c      	b.n	8004186 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	2b02      	cmp	r3, #2
 8004170:	d109      	bne.n	8004186 <_ntoa_format+0x12e>
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b1f      	cmp	r3, #31
 8004176:	d806      	bhi.n	8004186 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	61fa      	str	r2, [r7, #28]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4413      	add	r3, r2
 8004182:	2262      	movs	r2, #98	; 0x62
 8004184:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2b1f      	cmp	r3, #31
 800418a:	d806      	bhi.n	800419a <_ntoa_format+0x142>
      buf[len++] = '0';
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	61fa      	str	r2, [r7, #28]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4413      	add	r3, r2
 8004196:	2230      	movs	r2, #48	; 0x30
 8004198:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b1f      	cmp	r3, #31
 800419e:	d824      	bhi.n	80041ea <_ntoa_format+0x192>
    if (negative) {
 80041a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <_ntoa_format+0x160>
      buf[len++] = '-';
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	61fa      	str	r2, [r7, #28]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4413      	add	r3, r2
 80041b2:	222d      	movs	r2, #45	; 0x2d
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e018      	b.n	80041ea <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	61fa      	str	r2, [r7, #28]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	222b      	movs	r2, #43	; 0x2b
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e00b      	b.n	80041ea <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d006      	beq.n	80041ea <_ntoa_format+0x192>
      buf[len++] = ' ';
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	61fa      	str	r2, [r7, #28]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4413      	add	r3, r2
 80041e6:	2220      	movs	r2, #32
 80041e8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	9303      	str	r3, [sp, #12]
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	9302      	str	r3, [sp, #8]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fed9 	bl	8003fb8 <_out_rev>
 8004206:	4603      	mov	r3, r0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b096      	sub	sp, #88	; 0x58
 8004214:	af08      	add	r7, sp, #32
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d103      	bne.n	8004230 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800422a:	f023 0310 	bic.w	r3, r3, #16
 800422e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <_ntoa_long+0x30>
 800423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d032      	beq.n	80042a6 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8004240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004244:	fbb3 f2f2 	udiv	r2, r3, r2
 8004248:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800424a:	fb01 f202 	mul.w	r2, r1, r2
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004254:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004258:	2b09      	cmp	r3, #9
 800425a:	d804      	bhi.n	8004266 <_ntoa_long+0x56>
 800425c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004260:	3330      	adds	r3, #48	; 0x30
 8004262:	b2da      	uxtb	r2, r3
 8004264:	e00d      	b.n	8004282 <_ntoa_long+0x72>
 8004266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <_ntoa_long+0x64>
 8004270:	2241      	movs	r2, #65	; 0x41
 8004272:	e000      	b.n	8004276 <_ntoa_long+0x66>
 8004274:	2261      	movs	r2, #97	; 0x61
 8004276:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800427a:	4413      	add	r3, r2
 800427c:	b2db      	uxtb	r3, r3
 800427e:	3b0a      	subs	r3, #10
 8004280:	b2da      	uxtb	r2, r3
 8004282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	6379      	str	r1, [r7, #52]	; 0x34
 8004288:	3338      	adds	r3, #56	; 0x38
 800428a:	443b      	add	r3, r7
 800428c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004290:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800429a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <_ntoa_long+0x96>
 80042a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a2:	2b1f      	cmp	r3, #31
 80042a4:	d9cc      	bls.n	8004240 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80042a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a8:	9306      	str	r3, [sp, #24]
 80042aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b4:	9303      	str	r3, [sp, #12]
 80042b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80042ba:	9302      	str	r3, [sp, #8]
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	f107 0310 	add.w	r3, r7, #16
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff fec3 	bl	8004058 <_ntoa_format>
 80042d2:	4603      	mov	r3, r0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3738      	adds	r7, #56	; 0x38
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b096      	sub	sp, #88	; 0x58
 80042e0:	af08      	add	r7, sp, #32
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80042ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042f2:	4313      	orrs	r3, r2
 80042f4:	d103      	bne.n	80042fe <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80042f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f8:	f023 0310 	bic.w	r3, r3, #16
 80042fc:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80042fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <_ntoa_long_long+0x34>
 8004308:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800430c:	4313      	orrs	r3, r2
 800430e:	d037      	beq.n	8004380 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8004310:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004318:	f7fc fc2c 	bl	8000b74 <__aeabi_uldivmod>
 800431c:	4613      	mov	r3, r2
 800431e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004322:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004326:	2b09      	cmp	r3, #9
 8004328:	d804      	bhi.n	8004334 <_ntoa_long_long+0x58>
 800432a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800432e:	3330      	adds	r3, #48	; 0x30
 8004330:	b2da      	uxtb	r2, r3
 8004332:	e00d      	b.n	8004350 <_ntoa_long_long+0x74>
 8004334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <_ntoa_long_long+0x66>
 800433e:	2241      	movs	r2, #65	; 0x41
 8004340:	e000      	b.n	8004344 <_ntoa_long_long+0x68>
 8004342:	2261      	movs	r2, #97	; 0x61
 8004344:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004348:	4413      	add	r3, r2
 800434a:	b2db      	uxtb	r3, r3
 800434c:	3b0a      	subs	r3, #10
 800434e:	b2da      	uxtb	r2, r3
 8004350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004352:	1c59      	adds	r1, r3, #1
 8004354:	6379      	str	r1, [r7, #52]	; 0x34
 8004356:	3338      	adds	r3, #56	; 0x38
 8004358:	443b      	add	r3, r7
 800435a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800435e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004362:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004366:	f7fc fc05 	bl	8000b74 <__aeabi_uldivmod>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004372:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004376:	4313      	orrs	r3, r2
 8004378:	d002      	beq.n	8004380 <_ntoa_long_long+0xa4>
 800437a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437c:	2b1f      	cmp	r3, #31
 800437e:	d9c7      	bls.n	8004310 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004382:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004384:	9206      	str	r2, [sp, #24]
 8004386:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004388:	9205      	str	r2, [sp, #20]
 800438a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800438c:	9204      	str	r2, [sp, #16]
 800438e:	9303      	str	r3, [sp, #12]
 8004390:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004394:	9302      	str	r3, [sp, #8]
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	f107 0310 	add.w	r3, r7, #16
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff fe56 	bl	8004058 <_ntoa_format>
 80043ac:	4603      	mov	r3, r0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3738      	adds	r7, #56	; 0x38
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b09d      	sub	sp, #116	; 0x74
 80043bc:	af06      	add	r7, sp, #24
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80043d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80043da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043de:	f7fc fb4f 	bl	8000a80 <__aeabi_dcmpeq>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10f      	bne.n	8004408 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80043e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ea:	9303      	str	r3, [sp, #12]
 80043ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ee:	9302      	str	r3, [sp, #8]
 80043f0:	2303      	movs	r3, #3
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	4b82      	ldr	r3, [pc, #520]	; (8004600 <_ftoa+0x248>)
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7ff fdda 	bl	8003fb8 <_out_rev>
 8004404:	4603      	mov	r3, r0
 8004406:	e224      	b.n	8004852 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8004408:	f04f 32ff 	mov.w	r2, #4294967295
 800440c:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004410:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004414:	f7fc fb3e 	bl	8000a94 <__aeabi_dcmplt>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00f      	beq.n	800443e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800441e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004420:	9303      	str	r3, [sp, #12]
 8004422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004424:	9302      	str	r3, [sp, #8]
 8004426:	2304      	movs	r3, #4
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	4b76      	ldr	r3, [pc, #472]	; (8004604 <_ftoa+0x24c>)
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fdbf 	bl	8003fb8 <_out_rev>
 800443a:	4603      	mov	r3, r0
 800443c:	e209      	b.n	8004852 <_ftoa+0x49a>
  if (value > DBL_MAX)
 800443e:	f04f 32ff 	mov.w	r2, #4294967295
 8004442:	4b71      	ldr	r3, [pc, #452]	; (8004608 <_ftoa+0x250>)
 8004444:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004448:	f7fc fb42 	bl	8000ad0 <__aeabi_dcmpgt>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01d      	beq.n	800448e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8004452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <_ftoa+0xa8>
 800445c:	4b6b      	ldr	r3, [pc, #428]	; (800460c <_ftoa+0x254>)
 800445e:	e000      	b.n	8004462 <_ftoa+0xaa>
 8004460:	4b6b      	ldr	r3, [pc, #428]	; (8004610 <_ftoa+0x258>)
 8004462:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004464:	f002 0204 	and.w	r2, r2, #4
 8004468:	2a00      	cmp	r2, #0
 800446a:	d001      	beq.n	8004470 <_ftoa+0xb8>
 800446c:	2204      	movs	r2, #4
 800446e:	e000      	b.n	8004472 <_ftoa+0xba>
 8004470:	2203      	movs	r2, #3
 8004472:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004474:	9103      	str	r1, [sp, #12]
 8004476:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004478:	9102      	str	r1, [sp, #8]
 800447a:	9201      	str	r2, [sp, #4]
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff fd97 	bl	8003fb8 <_out_rev>
 800448a:	4603      	mov	r3, r0
 800448c:	e1e1      	b.n	8004852 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800448e:	a358      	add	r3, pc, #352	; (adr r3, 80045f0 <_ftoa+0x238>)
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004498:	f7fc fb1a 	bl	8000ad0 <__aeabi_dcmpgt>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <_ftoa+0xfe>
 80044a2:	a355      	add	r3, pc, #340	; (adr r3, 80045f8 <_ftoa+0x240>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044ac:	f7fc faf2 	bl	8000a94 <__aeabi_dcmplt>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d011      	beq.n	80044da <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80044b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044b8:	9304      	str	r3, [sp, #16]
 80044ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044bc:	9303      	str	r3, [sp, #12]
 80044be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044c0:	9302      	str	r3, [sp, #8]
 80044c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80044c6:	e9cd 2300 	strd	r2, r3, [sp]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f9c9 	bl	8004868 <_etoa>
 80044d6:	4603      	mov	r3, r0
 80044d8:	e1bb      	b.n	8004852 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044ec:	f7fc fad2 	bl	8000a94 <__aeabi_dcmplt>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00e      	beq.n	8004514 <_ftoa+0x15c>
    negative = true;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 80044fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	f7fb fe9a 	bl	8000240 <__aeabi_dsub>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8004514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10d      	bne.n	800453a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800451e:	2306      	movs	r3, #6
 8004520:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004522:	e00a      	b.n	800453a <_ftoa+0x182>
    buf[len++] = '0';
 8004524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	657a      	str	r2, [r7, #84]	; 0x54
 800452a:	3358      	adds	r3, #88	; 0x58
 800452c:	443b      	add	r3, r7
 800452e:	2230      	movs	r2, #48	; 0x30
 8004530:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8004534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004536:	3b01      	subs	r3, #1
 8004538:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800453a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453c:	2b1f      	cmp	r3, #31
 800453e:	d802      	bhi.n	8004546 <_ftoa+0x18e>
 8004540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004542:	2b09      	cmp	r3, #9
 8004544:	d8ee      	bhi.n	8004524 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8004546:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800454a:	f7fc facb 	bl	8000ae4 <__aeabi_d2iz>
 800454e:	4603      	mov	r3, r0
 8004550:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8004552:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004554:	f7fb ffc2 	bl	80004dc <__aeabi_i2d>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004560:	f7fb fe6e 	bl	8000240 <__aeabi_dsub>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	4a29      	ldr	r2, [pc, #164]	; (8004614 <_ftoa+0x25c>)
 800456e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4413      	add	r3, r2
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f7fc f81a 	bl	80005b0 <__aeabi_dmul>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8004584:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004588:	f7fc fad4 	bl	8000b34 <__aeabi_d2uiz>
 800458c:	4603      	mov	r3, r0
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8004590:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004592:	f7fb ff93 	bl	80004bc <__aeabi_ui2d>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800459e:	f7fb fe4f 	bl	8000240 <__aeabi_dsub>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <_ftoa+0x260>)
 80045b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80045b4:	f7fc fa8c 	bl	8000ad0 <__aeabi_dcmpgt>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d02e      	beq.n	800461c <_ftoa+0x264>
    ++frac;
 80045be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c0:	3301      	adds	r3, #1
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80045c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80045c6:	f7fb ff79 	bl	80004bc <__aeabi_ui2d>
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <_ftoa+0x25c>)
 80045cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f7fc fa71 	bl	8000abc <__aeabi_dcmpge>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d032      	beq.n	8004646 <_ftoa+0x28e>
      frac = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 80045e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e6:	3301      	adds	r3, #1
 80045e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ea:	e02c      	b.n	8004646 <_ftoa+0x28e>
 80045ec:	f3af 8000 	nop.w
 80045f0:	00000000 	.word	0x00000000
 80045f4:	41cdcd65 	.word	0x41cdcd65
 80045f8:	00000000 	.word	0x00000000
 80045fc:	c1cdcd65 	.word	0xc1cdcd65
 8004600:	0800d1b8 	.word	0x0800d1b8
 8004604:	0800d1bc 	.word	0x0800d1bc
 8004608:	7fefffff 	.word	0x7fefffff
 800460c:	0800d1c4 	.word	0x0800d1c4
 8004610:	0800d1cc 	.word	0x0800d1cc
 8004614:	0800d930 	.word	0x0800d930
 8004618:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	4b8e      	ldr	r3, [pc, #568]	; (800485c <_ftoa+0x4a4>)
 8004622:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004626:	f7fc fa35 	bl	8000a94 <__aeabi_dcmplt>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <_ftoa+0x288>
 8004636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004642:	3301      	adds	r3, #1
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8004646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004648:	2b00      	cmp	r3, #0
 800464a:	d133      	bne.n	80046b4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800464c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800464e:	f7fb ff45 	bl	80004dc <__aeabi_i2d>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800465a:	f7fb fdf1 	bl	8000240 <__aeabi_dsub>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8004666:	2301      	movs	r3, #1
 8004668:	461c      	mov	r4, r3
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	4b7b      	ldr	r3, [pc, #492]	; (800485c <_ftoa+0x4a4>)
 8004670:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004674:	f7fc fa0e 	bl	8000a94 <__aeabi_dcmplt>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <_ftoa+0x2ca>
 800467e:	2300      	movs	r3, #0
 8004680:	461c      	mov	r4, r3
 8004682:	b2e3      	uxtb	r3, r4
 8004684:	f083 0301 	eor.w	r3, r3, #1
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <_ftoa+0x2ea>
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	4b72      	ldr	r3, [pc, #456]	; (800485c <_ftoa+0x4a4>)
 8004694:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004698:	f7fc fa1a 	bl	8000ad0 <__aeabi_dcmpgt>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04c      	beq.n	800473c <_ftoa+0x384>
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d069      	beq.n	8004780 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80046ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ae:	3301      	adds	r3, #1
 80046b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b2:	e065      	b.n	8004780 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 80046b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046b6:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046b8:	e01f      	b.n	80046fa <_ftoa+0x342>
      --count;
 80046ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046bc:	3b01      	subs	r3, #1
 80046be:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 80046c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80046c2:	4b67      	ldr	r3, [pc, #412]	; (8004860 <_ftoa+0x4a8>)
 80046c4:	fba3 2301 	umull	r2, r3, r3, r1
 80046c8:	08da      	lsrs	r2, r3, #3
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	1aca      	subs	r2, r1, r3
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d8:	1c59      	adds	r1, r3, #1
 80046da:	6579      	str	r1, [r7, #84]	; 0x54
 80046dc:	3230      	adds	r2, #48	; 0x30
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	3358      	adds	r3, #88	; 0x58
 80046e2:	443b      	add	r3, r7
 80046e4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80046e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ea:	4a5d      	ldr	r2, [pc, #372]	; (8004860 <_ftoa+0x4a8>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fc:	2b1f      	cmp	r3, #31
 80046fe:	d9dc      	bls.n	80046ba <_ftoa+0x302>
 8004700:	e009      	b.n	8004716 <_ftoa+0x35e>
        break;
 8004702:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004704:	e007      	b.n	8004716 <_ftoa+0x35e>
      buf[len++] = '0';
 8004706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	657a      	str	r2, [r7, #84]	; 0x54
 800470c:	3358      	adds	r3, #88	; 0x58
 800470e:	443b      	add	r3, r7
 8004710:	2230      	movs	r2, #48	; 0x30
 8004712:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004718:	2b1f      	cmp	r3, #31
 800471a:	d804      	bhi.n	8004726 <_ftoa+0x36e>
 800471c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471e:	1e5a      	subs	r2, r3, #1
 8004720:	647a      	str	r2, [r7, #68]	; 0x44
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ef      	bne.n	8004706 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004728:	2b1f      	cmp	r3, #31
 800472a:	d829      	bhi.n	8004780 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800472c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	657a      	str	r2, [r7, #84]	; 0x54
 8004732:	3358      	adds	r3, #88	; 0x58
 8004734:	443b      	add	r3, r7
 8004736:	222e      	movs	r2, #46	; 0x2e
 8004738:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800473c:	e020      	b.n	8004780 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800473e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004740:	4b48      	ldr	r3, [pc, #288]	; (8004864 <_ftoa+0x4ac>)
 8004742:	fb83 1302 	smull	r1, r3, r3, r2
 8004746:	1099      	asrs	r1, r3, #2
 8004748:	17d3      	asrs	r3, r2, #31
 800474a:	1ac9      	subs	r1, r1, r3
 800474c:	460b      	mov	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	1ad1      	subs	r1, r2, r3
 8004756:	b2ca      	uxtb	r2, r1
 8004758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475a:	1c59      	adds	r1, r3, #1
 800475c:	6579      	str	r1, [r7, #84]	; 0x54
 800475e:	3230      	adds	r2, #48	; 0x30
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	3358      	adds	r3, #88	; 0x58
 8004764:	443b      	add	r3, r7
 8004766:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800476a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476c:	4a3d      	ldr	r2, [pc, #244]	; (8004864 <_ftoa+0x4ac>)
 800476e:	fb82 1203 	smull	r1, r2, r2, r3
 8004772:	1092      	asrs	r2, r2, #2
 8004774:	17db      	asrs	r3, r3, #31
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004782:	2b1f      	cmp	r3, #31
 8004784:	d9db      	bls.n	800473e <_ftoa+0x386>
 8004786:	e000      	b.n	800478a <_ftoa+0x3d2>
      break;
 8004788:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800478a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d123      	bne.n	80047dc <_ftoa+0x424>
 8004794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01e      	beq.n	80047dc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800479e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d014      	beq.n	80047ce <_ftoa+0x416>
 80047a4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <_ftoa+0x3fe>
 80047ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <_ftoa+0x416>
      width--;
 80047b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b8:	3b01      	subs	r3, #1
 80047ba:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80047bc:	e007      	b.n	80047ce <_ftoa+0x416>
      buf[len++] = '0';
 80047be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	657a      	str	r2, [r7, #84]	; 0x54
 80047c4:	3358      	adds	r3, #88	; 0x58
 80047c6:	443b      	add	r3, r7
 80047c8:	2230      	movs	r2, #48	; 0x30
 80047ca:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80047ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d202      	bcs.n	80047dc <_ftoa+0x424>
 80047d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d8:	2b1f      	cmp	r3, #31
 80047da:	d9f0      	bls.n	80047be <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80047dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047de:	2b1f      	cmp	r3, #31
 80047e0:	d827      	bhi.n	8004832 <_ftoa+0x47a>
    if (negative) {
 80047e2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <_ftoa+0x444>
      buf[len++] = '-';
 80047ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	657a      	str	r2, [r7, #84]	; 0x54
 80047f0:	3358      	adds	r3, #88	; 0x58
 80047f2:	443b      	add	r3, r7
 80047f4:	222d      	movs	r2, #45	; 0x2d
 80047f6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80047fa:	e01a      	b.n	8004832 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80047fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	657a      	str	r2, [r7, #84]	; 0x54
 800480c:	3358      	adds	r3, #88	; 0x58
 800480e:	443b      	add	r3, r7
 8004810:	222b      	movs	r2, #43	; 0x2b
 8004812:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004816:	e00c      	b.n	8004832 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8004818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <_ftoa+0x47a>
      buf[len++] = ' ';
 8004822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	657a      	str	r2, [r7, #84]	; 0x54
 8004828:	3358      	adds	r3, #88	; 0x58
 800482a:	443b      	add	r3, r7
 800482c:	2220      	movs	r2, #32
 800482e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004834:	9303      	str	r3, [sp, #12]
 8004836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004838:	9302      	str	r3, [sp, #8]
 800483a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	f107 0310 	add.w	r3, r7, #16
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff fbb4 	bl	8003fb8 <_out_rev>
 8004850:	4603      	mov	r3, r0
}
 8004852:	4618      	mov	r0, r3
 8004854:	375c      	adds	r7, #92	; 0x5c
 8004856:	46bd      	mov	sp, r7
 8004858:	bd90      	pop	{r4, r7, pc}
 800485a:	bf00      	nop
 800485c:	3fe00000 	.word	0x3fe00000
 8004860:	cccccccd 	.word	0xcccccccd
 8004864:	66666667 	.word	0x66666667

08004868 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	b09d      	sub	sp, #116	; 0x74
 800486e:	af06      	add	r7, sp, #24
 8004870:	61f8      	str	r0, [r7, #28]
 8004872:	61b9      	str	r1, [r7, #24]
 8004874:	617a      	str	r2, [r7, #20]
 8004876:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8004878:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800487c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004880:	f7fc f8fe 	bl	8000a80 <__aeabi_dcmpeq>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d014      	beq.n	80048b4 <_etoa+0x4c>
 800488a:	f04f 32ff 	mov.w	r2, #4294967295
 800488e:	4bc4      	ldr	r3, [pc, #784]	; (8004ba0 <_etoa+0x338>)
 8004890:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004894:	f7fc f91c 	bl	8000ad0 <__aeabi_dcmpgt>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <_etoa+0x4c>
 800489e:	f04f 32ff 	mov.w	r2, #4294967295
 80048a2:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80048a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048aa:	f7fc f8f3 	bl	8000a94 <__aeabi_dcmplt>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d014      	beq.n	80048de <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80048b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048be:	9303      	str	r3, [sp, #12]
 80048c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048c4:	9302      	str	r3, [sp, #8]
 80048c6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80048ca:	e9cd 2300 	strd	r2, r3, [sp]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	69b9      	ldr	r1, [r7, #24]
 80048d4:	69f8      	ldr	r0, [r7, #28]
 80048d6:	f7ff fd6f 	bl	80043b8 <_ftoa>
 80048da:	4603      	mov	r3, r0
 80048dc:	e247      	b.n	8004d6e <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 80048de:	2301      	movs	r3, #1
 80048e0:	461e      	mov	r6, r3
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048ee:	f7fc f8d1 	bl	8000a94 <__aeabi_dcmplt>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <_etoa+0x94>
 80048f8:	2300      	movs	r3, #0
 80048fa:	461e      	mov	r6, r3
 80048fc:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8004900:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <_etoa+0xb8>
    value = -value;
 8004908:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004912:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004916:	607b      	str	r3, [r7, #4]
 8004918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800491c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800492c:	2306      	movs	r3, #6
 800492e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8004932:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004936:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800493a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	0d0a      	lsrs	r2, r1, #20
 8004948:	2300      	movs	r3, #0
 800494a:	4613      	mov	r3, r2
 800494c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004950:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004954:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8004956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800495a:	4690      	mov	r8, r2
 800495c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8004960:	4644      	mov	r4, r8
 8004962:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8004966:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800496a:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800496e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004970:	f7fb fdb4 	bl	80004dc <__aeabi_i2d>
 8004974:	a37e      	add	r3, pc, #504	; (adr r3, 8004b70 <_etoa+0x308>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fb fe19 	bl	80005b0 <__aeabi_dmul>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	a37c      	add	r3, pc, #496	; (adr r3, 8004b78 <_etoa+0x310>)
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f7fb fc5a 	bl	8000244 <__adddf3>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	4b80      	ldr	r3, [pc, #512]	; (8004ba4 <_etoa+0x33c>)
 80049a2:	f7fb fc4d 	bl	8000240 <__aeabi_dsub>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	a374      	add	r3, pc, #464	; (adr r3, 8004b80 <_etoa+0x318>)
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f7fb fdfc 	bl	80005b0 <__aeabi_dmul>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4620      	mov	r0, r4
 80049be:	4629      	mov	r1, r5
 80049c0:	f7fb fc40 	bl	8000244 <__adddf3>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	f7fc f88a 	bl	8000ae4 <__aeabi_d2iz>
 80049d0:	4603      	mov	r3, r0
 80049d2:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80049d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80049d6:	f7fb fd81 	bl	80004dc <__aeabi_i2d>
 80049da:	a36b      	add	r3, pc, #428	; (adr r3, 8004b88 <_etoa+0x320>)
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f7fb fde6 	bl	80005b0 <__aeabi_dmul>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4610      	mov	r0, r2
 80049ea:	4619      	mov	r1, r3
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	4b6d      	ldr	r3, [pc, #436]	; (8004ba8 <_etoa+0x340>)
 80049f2:	f7fb fc27 	bl	8000244 <__adddf3>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	f7fc f871 	bl	8000ae4 <__aeabi_d2iz>
 8004a02:	4603      	mov	r3, r0
 8004a04:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8004a06:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004a08:	f7fb fd68 	bl	80004dc <__aeabi_i2d>
 8004a0c:	a360      	add	r3, pc, #384	; (adr r3, 8004b90 <_etoa+0x328>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f7fb fdcd 	bl	80005b0 <__aeabi_dmul>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4614      	mov	r4, r2
 8004a1c:	461d      	mov	r5, r3
 8004a1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a20:	f7fb fd5c 	bl	80004dc <__aeabi_i2d>
 8004a24:	a35c      	add	r3, pc, #368	; (adr r3, 8004b98 <_etoa+0x330>)
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f7fb fdc1 	bl	80005b0 <__aeabi_dmul>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4620      	mov	r0, r4
 8004a34:	4629      	mov	r1, r5
 8004a36:	f7fb fc03 	bl	8000240 <__aeabi_dsub>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8004a42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004a4a:	f7fb fdb1 	bl	80005b0 <__aeabi_dmul>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8004a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a58:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004a5c:	17da      	asrs	r2, r3, #31
 8004a5e:	469a      	mov	sl, r3
 8004a60:	4693      	mov	fp, r2
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8004a6e:	2200      	movs	r2, #0
 8004a70:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004a74:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a78:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	f7fb fbe0 	bl	8000244 <__adddf3>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4690      	mov	r8, r2
 8004a8a:	4699      	mov	r9, r3
 8004a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a90:	f04f 0000 	mov.w	r0, #0
 8004a94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a98:	f7fb fbd2 	bl	8000240 <__aeabi_dsub>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4692      	mov	sl, r2
 8004aa2:	469b      	mov	fp, r3
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	4b40      	ldr	r3, [pc, #256]	; (8004bac <_etoa+0x344>)
 8004aaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004aae:	f7fb fea9 	bl	8000804 <__aeabi_ddiv>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	4b3c      	ldr	r3, [pc, #240]	; (8004bb0 <_etoa+0x348>)
 8004ac0:	f7fb fbc0 	bl	8000244 <__adddf3>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004acc:	f7fb fe9a 	bl	8000804 <__aeabi_ddiv>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	4b35      	ldr	r3, [pc, #212]	; (8004bb4 <_etoa+0x34c>)
 8004ade:	f7fb fbb1 	bl	8000244 <__adddf3>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004aea:	f7fb fe8b 	bl	8000804 <__aeabi_ddiv>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4650      	mov	r0, sl
 8004af4:	4659      	mov	r1, fp
 8004af6:	f7fb fba5 	bl	8000244 <__adddf3>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4640      	mov	r0, r8
 8004b00:	4649      	mov	r1, r9
 8004b02:	f7fb fe7f 	bl	8000804 <__aeabi_ddiv>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <_etoa+0x350>)
 8004b14:	f7fb fb96 	bl	8000244 <__adddf3>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f7fb fd46 	bl	80005b0 <__aeabi_dmul>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8004b2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b30:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b34:	f7fb ffae 	bl	8000a94 <__aeabi_dcmplt>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <_etoa+0x2f2>
    expval--;
 8004b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b40:	3b01      	subs	r3, #1
 8004b42:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8004b44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <_etoa+0x348>)
 8004b4e:	f7fb fe59 	bl	8000804 <__aeabi_ddiv>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5c:	2b63      	cmp	r3, #99	; 0x63
 8004b5e:	dc2d      	bgt.n	8004bbc <_etoa+0x354>
 8004b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b62:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004b66:	db29      	blt.n	8004bbc <_etoa+0x354>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	e028      	b.n	8004bbe <_etoa+0x356>
 8004b6c:	f3af 8000 	nop.w
 8004b70:	509f79fb 	.word	0x509f79fb
 8004b74:	3fd34413 	.word	0x3fd34413
 8004b78:	8b60c8b3 	.word	0x8b60c8b3
 8004b7c:	3fc68a28 	.word	0x3fc68a28
 8004b80:	636f4361 	.word	0x636f4361
 8004b84:	3fd287a7 	.word	0x3fd287a7
 8004b88:	0979a371 	.word	0x0979a371
 8004b8c:	400a934f 	.word	0x400a934f
 8004b90:	bbb55516 	.word	0xbbb55516
 8004b94:	40026bb1 	.word	0x40026bb1
 8004b98:	fefa39ef 	.word	0xfefa39ef
 8004b9c:	3fe62e42 	.word	0x3fe62e42
 8004ba0:	7fefffff 	.word	0x7fefffff
 8004ba4:	3ff80000 	.word	0x3ff80000
 8004ba8:	3fe00000 	.word	0x3fe00000
 8004bac:	402c0000 	.word	0x402c0000
 8004bb0:	40240000 	.word	0x40240000
 8004bb4:	40180000 	.word	0x40180000
 8004bb8:	3ff00000 	.word	0x3ff00000
 8004bbc:	2305      	movs	r3, #5
 8004bbe:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004bc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d03d      	beq.n	8004c48 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004bcc:	a36a      	add	r3, pc, #424	; (adr r3, 8004d78 <_etoa+0x510>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bd6:	f7fb ff71 	bl	8000abc <__aeabi_dcmpge>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d024      	beq.n	8004c2a <_etoa+0x3c2>
 8004be0:	a367      	add	r3, pc, #412	; (adr r3, 8004d80 <_etoa+0x518>)
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bea:	f7fb ff53 	bl	8000a94 <__aeabi_dcmplt>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01a      	beq.n	8004c2a <_etoa+0x3c2>
      if ((int)prec > expval) {
 8004bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	da07      	bge.n	8004c0e <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8004bfe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c0c:	e002      	b.n	8004c14 <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004c14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	657b      	str	r3, [r7, #84]	; 0x54
 8004c28:	e00e      	b.n	8004c48 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <_etoa+0x3e0>
 8004c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <_etoa+0x3e0>
        --prec;
 8004c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c42:	3b01      	subs	r3, #1
 8004c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8004c4e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d904      	bls.n	8004c62 <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c60:	e001      	b.n	8004c66 <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d004      	beq.n	8004c7c <_etoa+0x414>
 8004c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8004c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <_etoa+0x42e>
    value /= conv.F;
 8004c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c8a:	f7fb fdbb 	bl	8000804 <__aeabi_ddiv>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004c9a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <_etoa+0x44c>
 8004ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ca6:	60bb      	str	r3, [r7, #8]
 8004ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	e003      	b.n	8004cbc <_etoa+0x454>
 8004cb4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004cb8:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc4:	9304      	str	r3, [sp, #16]
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc8:	9303      	str	r3, [sp, #12]
 8004cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cce:	9302      	str	r3, [sp, #8]
 8004cd0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004cd4:	e9cd 3400 	strd	r3, r4, [sp]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	69b9      	ldr	r1, [r7, #24]
 8004cde:	69f8      	ldr	r0, [r7, #28]
 8004ce0:	f7ff fb6a 	bl	80043b8 <_ftoa>
 8004ce4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8004ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d03f      	beq.n	8004d6c <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <_etoa+0x494>
 8004cf8:	2045      	movs	r0, #69	; 0x45
 8004cfa:	e000      	b.n	8004cfe <_etoa+0x496>
 8004cfc:	2065      	movs	r0, #101	; 0x65
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	1c53      	adds	r3, r2, #1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	69fc      	ldr	r4, [r7, #28]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	69b9      	ldr	r1, [r7, #24]
 8004d0a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bfb8      	it	lt
 8004d12:	425b      	neglt	r3, r3
 8004d14:	4618      	mov	r0, r3
 8004d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d18:	0fdb      	lsrs	r3, r3, #31
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	2105      	movs	r1, #5
 8004d22:	9105      	str	r1, [sp, #20]
 8004d24:	9204      	str	r2, [sp, #16]
 8004d26:	2200      	movs	r2, #0
 8004d28:	9203      	str	r2, [sp, #12]
 8004d2a:	220a      	movs	r2, #10
 8004d2c:	9202      	str	r2, [sp, #8]
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	9000      	str	r0, [sp, #0]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	69b9      	ldr	r1, [r7, #24]
 8004d38:	69f8      	ldr	r0, [r7, #28]
 8004d3a:	f7ff fa69 	bl	8004210 <_ntoa_long>
 8004d3e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00f      	beq.n	8004d6c <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004d4c:	e007      	b.n	8004d5e <_etoa+0x4f6>
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	1c53      	adds	r3, r2, #1
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	69fc      	ldr	r4, [r7, #28]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	69b9      	ldr	r1, [r7, #24]
 8004d5a:	2020      	movs	r0, #32
 8004d5c:	47a0      	blx	r4
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d8f0      	bhi.n	8004d4e <_etoa+0x4e6>
    }
  }
  return idx;
 8004d6c:	697b      	ldr	r3, [r7, #20]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	375c      	adds	r7, #92	; 0x5c
 8004d72:	46bd      	mov	sp, r7
 8004d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d78:	eb1c432d 	.word	0xeb1c432d
 8004d7c:	3f1a36e2 	.word	0x3f1a36e2
 8004d80:	00000000 	.word	0x00000000
 8004d84:	412e8480 	.word	0x412e8480

08004d88 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	b0a3      	sub	sp, #140	; 0x8c
 8004d8e:	af0a      	add	r7, sp, #40	; 0x28
 8004d90:	6178      	str	r0, [r7, #20]
 8004d92:	6139      	str	r1, [r7, #16]
 8004d94:	60fa      	str	r2, [r7, #12]
 8004d96:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 84ba 	bne.w	8005718 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8004da4:	4ba3      	ldr	r3, [pc, #652]	; (8005034 <_vsnprintf+0x2ac>)
 8004da6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004da8:	f000 bcb6 	b.w	8005718 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b25      	cmp	r3, #37	; 0x25
 8004db2:	d00d      	beq.n	8004dd0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	7818      	ldrb	r0, [r3, #0]
 8004db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dba:	1c53      	adds	r3, r2, #1
 8004dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dbe:	697c      	ldr	r4, [r7, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6939      	ldr	r1, [r7, #16]
 8004dc4:	47a0      	blx	r4
      format++;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	60bb      	str	r3, [r7, #8]
      continue;
 8004dcc:	f000 bca4 	b.w	8005718 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	3b20      	subs	r3, #32
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d857      	bhi.n	8004e94 <_vsnprintf+0x10c>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <_vsnprintf+0x64>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e6d 	.word	0x08004e6d
 8004df0:	08004e95 	.word	0x08004e95
 8004df4:	08004e95 	.word	0x08004e95
 8004df8:	08004e81 	.word	0x08004e81
 8004dfc:	08004e95 	.word	0x08004e95
 8004e00:	08004e95 	.word	0x08004e95
 8004e04:	08004e95 	.word	0x08004e95
 8004e08:	08004e95 	.word	0x08004e95
 8004e0c:	08004e95 	.word	0x08004e95
 8004e10:	08004e95 	.word	0x08004e95
 8004e14:	08004e95 	.word	0x08004e95
 8004e18:	08004e59 	.word	0x08004e59
 8004e1c:	08004e95 	.word	0x08004e95
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e95 	.word	0x08004e95
 8004e28:	08004e95 	.word	0x08004e95
 8004e2c:	08004e31 	.word	0x08004e31
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	653b      	str	r3, [r7, #80]	; 0x50
 8004e42:	e02a      	b.n	8004e9a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e46:	f043 0302 	orr.w	r3, r3, #2
 8004e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	2301      	movs	r3, #1
 8004e54:	653b      	str	r3, [r7, #80]	; 0x50
 8004e56:	e020      	b.n	8004e9a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	2301      	movs	r3, #1
 8004e68:	653b      	str	r3, [r7, #80]	; 0x50
 8004e6a:	e016      	b.n	8004e9a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e6e:	f043 0308 	orr.w	r3, r3, #8
 8004e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e7e:	e00c      	b.n	8004e9a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e82:	f043 0310 	orr.w	r3, r3, #16
 8004e86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	2301      	movs	r3, #1
 8004e90:	653b      	str	r3, [r7, #80]	; 0x50
 8004e92:	e002      	b.n	8004e9a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004e94:	2300      	movs	r3, #0
 8004e96:	653b      	str	r3, [r7, #80]	; 0x50
 8004e98:	bf00      	nop
      }
    } while (n);
 8004e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d19c      	bne.n	8004dda <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff f84b 	bl	8003f44 <_is_digit>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d006      	beq.n	8004ec2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004eb4:	f107 0308 	add.w	r3, r7, #8
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff f859 	bl	8003f70 <_atoi>
 8004ebe:	65b8      	str	r0, [r7, #88]	; 0x58
 8004ec0:	e01a      	b.n	8004ef8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec8:	d116      	bne.n	8004ef8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ece:	1d1a      	adds	r2, r3, #4
 8004ed0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da07      	bge.n	8004eee <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee0:	f043 0302 	orr.w	r3, r3, #2
 8004ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	425b      	negs	r3, r3
 8004eea:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eec:	e001      	b.n	8004ef2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b2e      	cmp	r3, #46	; 0x2e
 8004f02:	d127      	bne.n	8004f54 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8004f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff f814 	bl	8003f44 <_is_digit>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d006      	beq.n	8004f30 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff f822 	bl	8003f70 <_atoi>
 8004f2c:	6578      	str	r0, [r7, #84]	; 0x54
 8004f2e:	e011      	b.n	8004f54 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b2a      	cmp	r3, #42	; 0x2a
 8004f36:	d10d      	bne.n	8004f54 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f3c:	1d1a      	adds	r2, r3, #4
 8004f3e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f4c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3301      	adds	r3, #1
 8004f52:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	3b68      	subs	r3, #104	; 0x68
 8004f5a:	2b12      	cmp	r3, #18
 8004f5c:	d866      	bhi.n	800502c <_vsnprintf+0x2a4>
 8004f5e:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <_vsnprintf+0x1dc>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004fd7 	.word	0x08004fd7
 8004f68:	0800502d 	.word	0x0800502d
 8004f6c:	0800500d 	.word	0x0800500d
 8004f70:	0800502d 	.word	0x0800502d
 8004f74:	08004fb1 	.word	0x08004fb1
 8004f78:	0800502d 	.word	0x0800502d
 8004f7c:	0800502d 	.word	0x0800502d
 8004f80:	0800502d 	.word	0x0800502d
 8004f84:	0800502d 	.word	0x0800502d
 8004f88:	0800502d 	.word	0x0800502d
 8004f8c:	0800502d 	.word	0x0800502d
 8004f90:	0800502d 	.word	0x0800502d
 8004f94:	08004ffd 	.word	0x08004ffd
 8004f98:	0800502d 	.word	0x0800502d
 8004f9c:	0800502d 	.word	0x0800502d
 8004fa0:	0800502d 	.word	0x0800502d
 8004fa4:	0800502d 	.word	0x0800502d
 8004fa8:	0800502d 	.word	0x0800502d
 8004fac:	0800501d 	.word	0x0800501d
      case 'l' :
        flags |= FLAGS_LONG;
 8004fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b6c      	cmp	r3, #108	; 0x6c
 8004fc4:	d134      	bne.n	8005030 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004fd4:	e02c      	b.n	8005030 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b68      	cmp	r3, #104	; 0x68
 8004fea:	d125      	bne.n	8005038 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8004fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004ffa:	e01d      	b.n	8005038 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005002:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	3301      	adds	r3, #1
 8005008:	60bb      	str	r3, [r7, #8]
        break;
 800500a:	e016      	b.n	800503a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800500c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005012:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	3301      	adds	r3, #1
 8005018:	60bb      	str	r3, [r7, #8]
        break;
 800501a:	e00e      	b.n	800503a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800501c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005022:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	3301      	adds	r3, #1
 8005028:	60bb      	str	r3, [r7, #8]
        break;
 800502a:	e006      	b.n	800503a <_vsnprintf+0x2b2>
      default :
        break;
 800502c:	bf00      	nop
 800502e:	e004      	b.n	800503a <_vsnprintf+0x2b2>
        break;
 8005030:	bf00      	nop
 8005032:	e002      	b.n	800503a <_vsnprintf+0x2b2>
 8005034:	08003ecd 	.word	0x08003ecd
        break;
 8005038:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	3b25      	subs	r3, #37	; 0x25
 8005040:	2b53      	cmp	r3, #83	; 0x53
 8005042:	f200 835c 	bhi.w	80056fe <_vsnprintf+0x976>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <_vsnprintf+0x2c4>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	080056e7 	.word	0x080056e7
 8005050:	080056ff 	.word	0x080056ff
 8005054:	080056ff 	.word	0x080056ff
 8005058:	080056ff 	.word	0x080056ff
 800505c:	080056ff 	.word	0x080056ff
 8005060:	080056ff 	.word	0x080056ff
 8005064:	080056ff 	.word	0x080056ff
 8005068:	080056ff 	.word	0x080056ff
 800506c:	080056ff 	.word	0x080056ff
 8005070:	080056ff 	.word	0x080056ff
 8005074:	080056ff 	.word	0x080056ff
 8005078:	080056ff 	.word	0x080056ff
 800507c:	080056ff 	.word	0x080056ff
 8005080:	080056ff 	.word	0x080056ff
 8005084:	080056ff 	.word	0x080056ff
 8005088:	080056ff 	.word	0x080056ff
 800508c:	080056ff 	.word	0x080056ff
 8005090:	080056ff 	.word	0x080056ff
 8005094:	080056ff 	.word	0x080056ff
 8005098:	080056ff 	.word	0x080056ff
 800509c:	080056ff 	.word	0x080056ff
 80050a0:	080056ff 	.word	0x080056ff
 80050a4:	080056ff 	.word	0x080056ff
 80050a8:	080056ff 	.word	0x080056ff
 80050ac:	080056ff 	.word	0x080056ff
 80050b0:	080056ff 	.word	0x080056ff
 80050b4:	080056ff 	.word	0x080056ff
 80050b8:	080056ff 	.word	0x080056ff
 80050bc:	080056ff 	.word	0x080056ff
 80050c0:	080056ff 	.word	0x080056ff
 80050c4:	080056ff 	.word	0x080056ff
 80050c8:	080056ff 	.word	0x080056ff
 80050cc:	0800549f 	.word	0x0800549f
 80050d0:	08005453 	.word	0x08005453
 80050d4:	0800549f 	.word	0x0800549f
 80050d8:	080056ff 	.word	0x080056ff
 80050dc:	080056ff 	.word	0x080056ff
 80050e0:	080056ff 	.word	0x080056ff
 80050e4:	080056ff 	.word	0x080056ff
 80050e8:	080056ff 	.word	0x080056ff
 80050ec:	080056ff 	.word	0x080056ff
 80050f0:	080056ff 	.word	0x080056ff
 80050f4:	080056ff 	.word	0x080056ff
 80050f8:	080056ff 	.word	0x080056ff
 80050fc:	080056ff 	.word	0x080056ff
 8005100:	080056ff 	.word	0x080056ff
 8005104:	080056ff 	.word	0x080056ff
 8005108:	080056ff 	.word	0x080056ff
 800510c:	080056ff 	.word	0x080056ff
 8005110:	080056ff 	.word	0x080056ff
 8005114:	080056ff 	.word	0x080056ff
 8005118:	0800519d 	.word	0x0800519d
 800511c:	080056ff 	.word	0x080056ff
 8005120:	080056ff 	.word	0x080056ff
 8005124:	080056ff 	.word	0x080056ff
 8005128:	080056ff 	.word	0x080056ff
 800512c:	080056ff 	.word	0x080056ff
 8005130:	080056ff 	.word	0x080056ff
 8005134:	080056ff 	.word	0x080056ff
 8005138:	080056ff 	.word	0x080056ff
 800513c:	080056ff 	.word	0x080056ff
 8005140:	0800519d 	.word	0x0800519d
 8005144:	0800550b 	.word	0x0800550b
 8005148:	0800519d 	.word	0x0800519d
 800514c:	0800549f 	.word	0x0800549f
 8005150:	08005453 	.word	0x08005453
 8005154:	0800549f 	.word	0x0800549f
 8005158:	080056ff 	.word	0x080056ff
 800515c:	0800519d 	.word	0x0800519d
 8005160:	080056ff 	.word	0x080056ff
 8005164:	080056ff 	.word	0x080056ff
 8005168:	080056ff 	.word	0x080056ff
 800516c:	080056ff 	.word	0x080056ff
 8005170:	080056ff 	.word	0x080056ff
 8005174:	0800519d 	.word	0x0800519d
 8005178:	0800564b 	.word	0x0800564b
 800517c:	080056ff 	.word	0x080056ff
 8005180:	080056ff 	.word	0x080056ff
 8005184:	08005583 	.word	0x08005583
 8005188:	080056ff 	.word	0x080056ff
 800518c:	0800519d 	.word	0x0800519d
 8005190:	080056ff 	.word	0x080056ff
 8005194:	080056ff 	.word	0x080056ff
 8005198:	0800519d 	.word	0x0800519d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b78      	cmp	r3, #120	; 0x78
 80051a2:	d003      	beq.n	80051ac <_vsnprintf+0x424>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b58      	cmp	r3, #88	; 0x58
 80051aa:	d102      	bne.n	80051b2 <_vsnprintf+0x42a>
          base = 16U;
 80051ac:	2310      	movs	r3, #16
 80051ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b0:	e013      	b.n	80051da <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b6f      	cmp	r3, #111	; 0x6f
 80051b8:	d102      	bne.n	80051c0 <_vsnprintf+0x438>
          base =  8U;
 80051ba:	2308      	movs	r3, #8
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80051be:	e00c      	b.n	80051da <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b62      	cmp	r3, #98	; 0x62
 80051c6:	d102      	bne.n	80051ce <_vsnprintf+0x446>
          base =  2U;
 80051c8:	2302      	movs	r3, #2
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80051cc:	e005      	b.n	80051da <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 80051ce:	230a      	movs	r3, #10
 80051d0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80051d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d4:	f023 0310 	bic.w	r3, r3, #16
 80051d8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b58      	cmp	r3, #88	; 0x58
 80051e0:	d103      	bne.n	80051ea <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80051e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e4:	f043 0320 	orr.w	r3, r3, #32
 80051e8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b69      	cmp	r3, #105	; 0x69
 80051f0:	d007      	beq.n	8005202 <_vsnprintf+0x47a>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d003      	beq.n	8005202 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80051fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051fc:	f023 030c 	bic.w	r3, r3, #12
 8005200:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8005202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800520c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b69      	cmp	r3, #105	; 0x69
 800521a:	d004      	beq.n	8005226 <_vsnprintf+0x49e>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b64      	cmp	r3, #100	; 0x64
 8005222:	f040 8098 	bne.w	8005356 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800522c:	2b00      	cmp	r3, #0
 800522e:	d031      	beq.n	8005294 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005234:	3307      	adds	r3, #7
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	f103 0208 	add.w	r2, r3, #8
 800523e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800524a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	da06      	bge.n	8005260 <_vsnprintf+0x4d8>
 8005252:	2100      	movs	r1, #0
 8005254:	f1d2 0800 	rsbs	r8, r2, #0
 8005258:	eb61 0903 	sbc.w	r9, r1, r3
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	69f9      	ldr	r1, [r7, #28]
 8005262:	0fc9      	lsrs	r1, r1, #31
 8005264:	b2c9      	uxtb	r1, r1
 8005266:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005268:	2400      	movs	r4, #0
 800526a:	4682      	mov	sl, r0
 800526c:	46a3      	mov	fp, r4
 800526e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005270:	9008      	str	r0, [sp, #32]
 8005272:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005274:	9007      	str	r0, [sp, #28]
 8005276:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005278:	9006      	str	r0, [sp, #24]
 800527a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800527e:	9102      	str	r1, [sp, #8]
 8005280:	e9cd 2300 	strd	r2, r3, [sp]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005288:	6939      	ldr	r1, [r7, #16]
 800528a:	6978      	ldr	r0, [r7, #20]
 800528c:	f7ff f826 	bl	80042dc <_ntoa_long_long>
 8005290:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005292:	e0da      	b.n	800544a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d020      	beq.n	80052e0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800529e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfb8      	it	lt
 80052b2:	425b      	neglt	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	0fdb      	lsrs	r3, r3, #31
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052be:	9205      	str	r2, [sp, #20]
 80052c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052c2:	9204      	str	r2, [sp, #16]
 80052c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052c6:	9203      	str	r2, [sp, #12]
 80052c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ca:	9202      	str	r2, [sp, #8]
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	9100      	str	r1, [sp, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052d4:	6939      	ldr	r1, [r7, #16]
 80052d6:	6978      	ldr	r0, [r7, #20]
 80052d8:	f7fe ff9a 	bl	8004210 <_ntoa_long>
 80052dc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80052de:	e0b4      	b.n	800544a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80052e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <_vsnprintf+0x572>
 80052ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052ee:	1d1a      	adds	r2, r3, #4
 80052f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e012      	b.n	8005320 <_vsnprintf+0x598>
 80052fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <_vsnprintf+0x58c>
 8005304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	b21b      	sxth	r3, r3
 8005312:	e005      	b.n	8005320 <_vsnprintf+0x598>
 8005314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005318:	1d1a      	adds	r2, r3, #4
 800531a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	2b00      	cmp	r3, #0
 8005326:	bfb8      	it	lt
 8005328:	425b      	neglt	r3, r3
 800532a:	4619      	mov	r1, r3
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	0fdb      	lsrs	r3, r3, #31
 8005330:	b2db      	uxtb	r3, r3
 8005332:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005334:	9205      	str	r2, [sp, #20]
 8005336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005338:	9204      	str	r2, [sp, #16]
 800533a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800533c:	9203      	str	r2, [sp, #12]
 800533e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005340:	9202      	str	r2, [sp, #8]
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	9100      	str	r1, [sp, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800534a:	6939      	ldr	r1, [r7, #16]
 800534c:	6978      	ldr	r0, [r7, #20]
 800534e:	f7fe ff5f 	bl	8004210 <_ntoa_long>
 8005352:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005354:	e079      	b.n	800544a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800535c:	2b00      	cmp	r3, #0
 800535e:	d022      	beq.n	80053a6 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8005360:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005364:	3307      	adds	r3, #7
 8005366:	f023 0307 	bic.w	r3, r3, #7
 800536a:	f103 0208 	add.w	r2, r3, #8
 800536e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005376:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005378:	2000      	movs	r0, #0
 800537a:	460d      	mov	r5, r1
 800537c:	4606      	mov	r6, r0
 800537e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005380:	9108      	str	r1, [sp, #32]
 8005382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005384:	9107      	str	r1, [sp, #28]
 8005386:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005388:	9106      	str	r1, [sp, #24]
 800538a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800538e:	2100      	movs	r1, #0
 8005390:	9102      	str	r1, [sp, #8]
 8005392:	e9cd 2300 	strd	r2, r3, [sp]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800539a:	6939      	ldr	r1, [r7, #16]
 800539c:	6978      	ldr	r0, [r7, #20]
 800539e:	f7fe ff9d 	bl	80042dc <_ntoa_long_long>
 80053a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80053a4:	e051      	b.n	800544a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80053a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d018      	beq.n	80053e2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80053b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053b4:	1d1a      	adds	r2, r3, #4
 80053b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053be:	9205      	str	r2, [sp, #20]
 80053c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053c2:	9204      	str	r2, [sp, #16]
 80053c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053c6:	9203      	str	r2, [sp, #12]
 80053c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ca:	9202      	str	r2, [sp, #8]
 80053cc:	2200      	movs	r2, #0
 80053ce:	9201      	str	r2, [sp, #4]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053d6:	6939      	ldr	r1, [r7, #16]
 80053d8:	6978      	ldr	r0, [r7, #20]
 80053da:	f7fe ff19 	bl	8004210 <_ntoa_long>
 80053de:	64f8      	str	r0, [r7, #76]	; 0x4c
 80053e0:	e033      	b.n	800544a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80053e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <_vsnprintf+0x674>
 80053ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053f0:	1d1a      	adds	r2, r3, #4
 80053f2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	e012      	b.n	8005422 <_vsnprintf+0x69a>
 80053fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <_vsnprintf+0x68e>
 8005406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800540a:	1d1a      	adds	r2, r3, #4
 800540c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	e005      	b.n	8005422 <_vsnprintf+0x69a>
 8005416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8005424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005426:	9305      	str	r3, [sp, #20]
 8005428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542e:	9303      	str	r3, [sp, #12]
 8005430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005432:	9302      	str	r3, [sp, #8]
 8005434:	2300      	movs	r3, #0
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005440:	6939      	ldr	r1, [r7, #16]
 8005442:	6978      	ldr	r0, [r7, #20]
 8005444:	f7fe fee4 	bl	8004210 <_ntoa_long>
 8005448:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3301      	adds	r3, #1
 800544e:	60bb      	str	r3, [r7, #8]
        break;
 8005450:	e162      	b.n	8005718 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b46      	cmp	r3, #70	; 0x46
 8005458:	d103      	bne.n	8005462 <_vsnprintf+0x6da>
 800545a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800545c:	f043 0320 	orr.w	r3, r3, #32
 8005460:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005462:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005466:	3307      	adds	r3, #7
 8005468:	f023 0307 	bic.w	r3, r3, #7
 800546c:	f103 0208 	add.w	r2, r3, #8
 8005470:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800547a:	9104      	str	r1, [sp, #16]
 800547c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800547e:	9103      	str	r1, [sp, #12]
 8005480:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005482:	9102      	str	r1, [sp, #8]
 8005484:	e9cd 2300 	strd	r2, r3, [sp]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800548c:	6939      	ldr	r1, [r7, #16]
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7fe ff92 	bl	80043b8 <_ftoa>
 8005494:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	3301      	adds	r3, #1
 800549a:	60bb      	str	r3, [r7, #8]
        break;
 800549c:	e13c      	b.n	8005718 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b67      	cmp	r3, #103	; 0x67
 80054a4:	d003      	beq.n	80054ae <_vsnprintf+0x726>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b47      	cmp	r3, #71	; 0x47
 80054ac:	d103      	bne.n	80054b6 <_vsnprintf+0x72e>
 80054ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054b4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b45      	cmp	r3, #69	; 0x45
 80054bc:	d003      	beq.n	80054c6 <_vsnprintf+0x73e>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b47      	cmp	r3, #71	; 0x47
 80054c4:	d103      	bne.n	80054ce <_vsnprintf+0x746>
 80054c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c8:	f043 0320 	orr.w	r3, r3, #32
 80054cc:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80054ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d2:	3307      	adds	r3, #7
 80054d4:	f023 0307 	bic.w	r3, r3, #7
 80054d8:	f103 0208 	add.w	r2, r3, #8
 80054dc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80054e6:	9104      	str	r1, [sp, #16]
 80054e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054ea:	9103      	str	r1, [sp, #12]
 80054ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054ee:	9102      	str	r1, [sp, #8]
 80054f0:	e9cd 2300 	strd	r2, r3, [sp]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054f8:	6939      	ldr	r1, [r7, #16]
 80054fa:	6978      	ldr	r0, [r7, #20]
 80054fc:	f7ff f9b4 	bl	8004868 <_etoa>
 8005500:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	3301      	adds	r3, #1
 8005506:	60bb      	str	r3, [r7, #8]
        break;
 8005508:	e106      	b.n	8005718 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800550a:	2301      	movs	r3, #1
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800550e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10e      	bne.n	8005536 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8005518:	e007      	b.n	800552a <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 800551a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800551c:	1c53      	adds	r3, r2, #1
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005520:	697c      	ldr	r4, [r7, #20]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6939      	ldr	r1, [r7, #16]
 8005526:	2020      	movs	r0, #32
 8005528:	47a0      	blx	r4
          while (l++ < width) {
 800552a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	647a      	str	r2, [r7, #68]	; 0x44
 8005530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005532:	429a      	cmp	r2, r3
 8005534:	d8f1      	bhi.n	800551a <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	b2d8      	uxtb	r0, r3
 8005544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005546:	1c53      	adds	r3, r2, #1
 8005548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554a:	697c      	ldr	r4, [r7, #20]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6939      	ldr	r1, [r7, #16]
 8005550:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00e      	beq.n	800557a <_vsnprintf+0x7f2>
          while (l++ < width) {
 800555c:	e007      	b.n	800556e <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 800555e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005560:	1c53      	adds	r3, r2, #1
 8005562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005564:	697c      	ldr	r4, [r7, #20]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6939      	ldr	r1, [r7, #16]
 800556a:	2020      	movs	r0, #32
 800556c:	47a0      	blx	r4
          while (l++ < width) {
 800556e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	647a      	str	r2, [r7, #68]	; 0x44
 8005574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005576:	429a      	cmp	r2, r3
 8005578:	d8f1      	bhi.n	800555e <_vsnprintf+0x7d6>
          }
        }
        format++;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	3301      	adds	r3, #1
 800557e:	60bb      	str	r3, [r7, #8]
        break;
 8005580:	e0ca      	b.n	8005718 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8005582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005586:	1d1a      	adds	r2, r3, #4
 8005588:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8005590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <_vsnprintf+0x812>
 8005596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005598:	e001      	b.n	800559e <_vsnprintf+0x816>
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	4619      	mov	r1, r3
 80055a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80055a2:	f7fe fcb3 	bl	8003f0c <_strnlen_s>
 80055a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80055a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 80055b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bf28      	it	cs
 80055ba:	4613      	movcs	r3, r2
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80055be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d11a      	bne.n	80055fe <_vsnprintf+0x876>
          while (l++ < width) {
 80055c8:	e007      	b.n	80055da <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 80055ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055cc:	1c53      	adds	r3, r2, #1
 80055ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d0:	697c      	ldr	r4, [r7, #20]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6939      	ldr	r1, [r7, #16]
 80055d6:	2020      	movs	r0, #32
 80055d8:	47a0      	blx	r4
          while (l++ < width) {
 80055da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d8f1      	bhi.n	80055ca <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80055e6:	e00a      	b.n	80055fe <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 80055e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	643a      	str	r2, [r7, #64]	; 0x40
 80055ee:	7818      	ldrb	r0, [r3, #0]
 80055f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055f2:	1c53      	adds	r3, r2, #1
 80055f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f6:	697c      	ldr	r4, [r7, #20]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6939      	ldr	r1, [r7, #16]
 80055fc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80055fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <_vsnprintf+0x892>
 8005606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0eb      	beq.n	80055e8 <_vsnprintf+0x860>
 8005610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005612:	1e5a      	subs	r2, r3, #1
 8005614:	657a      	str	r2, [r7, #84]	; 0x54
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e6      	bne.n	80055e8 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800561a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8005624:	e007      	b.n	8005636 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8005626:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005628:	1c53      	adds	r3, r2, #1
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562c:	697c      	ldr	r4, [r7, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6939      	ldr	r1, [r7, #16]
 8005632:	2020      	movs	r0, #32
 8005634:	47a0      	blx	r4
          while (l++ < width) {
 8005636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800563c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800563e:	429a      	cmp	r2, r3
 8005640:	d8f1      	bhi.n	8005626 <_vsnprintf+0x89e>
          }
        }
        format++;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	3301      	adds	r3, #1
 8005646:	60bb      	str	r3, [r7, #8]
        break;
 8005648:	e066      	b.n	8005718 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800564a:	2308      	movs	r3, #8
 800564c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800564e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005650:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8005654:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005656:	2300      	movs	r3, #0
 8005658:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800565c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005660:	2b00      	cmp	r3, #0
 8005662:	d023      	beq.n	80056ac <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8005664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005668:	1d1a      	adds	r2, r3, #4
 800566a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	603a      	str	r2, [r7, #0]
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800567a:	9308      	str	r3, [sp, #32]
 800567c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800567e:	9307      	str	r3, [sp, #28]
 8005680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005682:	9306      	str	r3, [sp, #24]
 8005684:	f04f 0210 	mov.w	r2, #16
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005690:	2300      	movs	r3, #0
 8005692:	9302      	str	r3, [sp, #8]
 8005694:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005698:	e9cd 3400 	strd	r3, r4, [sp]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056a0:	6939      	ldr	r1, [r7, #16]
 80056a2:	6978      	ldr	r0, [r7, #20]
 80056a4:	f7fe fe1a 	bl	80042dc <_ntoa_long_long>
 80056a8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80056aa:	e018      	b.n	80056de <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80056ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056bc:	9305      	str	r3, [sp, #20]
 80056be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c0:	9304      	str	r3, [sp, #16]
 80056c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c4:	9303      	str	r3, [sp, #12]
 80056c6:	2310      	movs	r3, #16
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	2300      	movs	r3, #0
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	9200      	str	r2, [sp, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056d4:	6939      	ldr	r1, [r7, #16]
 80056d6:	6978      	ldr	r0, [r7, #20]
 80056d8:	f7fe fd9a 	bl	8004210 <_ntoa_long>
 80056dc:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3301      	adds	r3, #1
 80056e2:	60bb      	str	r3, [r7, #8]
        break;
 80056e4:	e018      	b.n	8005718 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80056e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056e8:	1c53      	adds	r3, r2, #1
 80056ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ec:	697c      	ldr	r4, [r7, #20]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6939      	ldr	r1, [r7, #16]
 80056f2:	2025      	movs	r0, #37	; 0x25
 80056f4:	47a0      	blx	r4
        format++;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60bb      	str	r3, [r7, #8]
        break;
 80056fc:	e00c      	b.n	8005718 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	7818      	ldrb	r0, [r3, #0]
 8005702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005704:	1c53      	adds	r3, r2, #1
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005708:	697c      	ldr	r4, [r7, #20]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6939      	ldr	r1, [r7, #16]
 800570e:	47a0      	blx	r4
        format++;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	3301      	adds	r3, #1
 8005714:	60bb      	str	r3, [r7, #8]
        break;
 8005716:	bf00      	nop
  while (*format)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f47f ab45 	bne.w	8004dac <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8005722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	429a      	cmp	r2, r3
 8005728:	d302      	bcc.n	8005730 <_vsnprintf+0x9a8>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1e5a      	subs	r2, r3, #1
 800572e:	e000      	b.n	8005732 <_vsnprintf+0x9aa>
 8005730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005732:	697c      	ldr	r4, [r7, #20]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6939      	ldr	r1, [r7, #16]
 8005738:	2000      	movs	r0, #0
 800573a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800573c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800573e:	4618      	mov	r0, r3
 8005740:	3764      	adds	r7, #100	; 0x64
 8005742:	46bd      	mov	sp, r7
 8005744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005748 <printf_>:


///

int printf_(const char* format, ...)
{
 8005748:	b40f      	push	{r0, r1, r2, r3}
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8005750:	f107 031c 	add.w	r3, r7, #28
 8005754:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8005756:	1d39      	adds	r1, r7, #4
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f04f 32ff 	mov.w	r2, #4294967295
 8005762:	4806      	ldr	r0, [pc, #24]	; (800577c <printf_+0x34>)
 8005764:	f7ff fb10 	bl	8004d88 <_vsnprintf>
 8005768:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005776:	b004      	add	sp, #16
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	08003ee7 	.word	0x08003ee7

08005780 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8005780:	b40e      	push	{r1, r2, r3}
 8005782:	b580      	push	{r7, lr}
 8005784:	b087      	sub	sp, #28
 8005786:	af02      	add	r7, sp, #8
 8005788:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800578a:	f107 0320 	add.w	r3, r7, #32
 800578e:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f04f 32ff 	mov.w	r2, #4294967295
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4805      	ldr	r0, [pc, #20]	; (80057b4 <sprintf_+0x34>)
 800579e:	f7ff faf3 	bl	8004d88 <_vsnprintf>
 80057a2:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80057a4:	68fb      	ldr	r3, [r7, #12]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b0:	b003      	add	sp, #12
 80057b2:	4770      	bx	lr
 80057b4:	08003ea1 	.word	0x08003ea1

080057b8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80057bc:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <Ringbuf_init+0x38>)
 80057be:	4a0d      	ldr	r2, [pc, #52]	; (80057f4 <Ringbuf_init+0x3c>)
 80057c0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80057c2:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <Ringbuf_init+0x40>)
 80057c4:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <Ringbuf_init+0x44>)
 80057c6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80057c8:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <Ringbuf_init+0x48>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <Ringbuf_init+0x48>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80057d8:	4b09      	ldr	r3, [pc, #36]	; (8005800 <Ringbuf_init+0x48>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <Ringbuf_init+0x48>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0220 	orr.w	r2, r2, #32
 80057e6:	60da      	str	r2, [r3, #12]
}
 80057e8:	bf00      	nop
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	20000bbc 	.word	0x20000bbc
 80057f4:	200003ac 	.word	0x200003ac
 80057f8:	20000bc0 	.word	0x20000bc0
 80057fc:	200007b4 	.word	0x200007b4
 8005800:	200002d8 	.word	0x200002d8

08005804 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	6039      	str	r1, [r7, #0]
 800580e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005816:	3301      	adds	r3, #1
 8005818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	429a      	cmp	r2, r3
 8005828:	d009      	beq.n	800583e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	79f9      	ldrb	r1, [r7, #7]
 8005834:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <Uart_read+0x54>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005856:	4b11      	ldr	r3, [pc, #68]	; (800589c <Uart_read+0x54>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800585e:	429a      	cmp	r2, r3
 8005860:	d102      	bne.n	8005868 <Uart_read+0x20>
  {
    return -1;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295
 8005866:	e013      	b.n	8005890 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8005868:	4b0c      	ldr	r3, [pc, #48]	; (800589c <Uart_read+0x54>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <Uart_read+0x54>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005874:	5cd3      	ldrb	r3, [r2, r3]
 8005876:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8005878:	4b08      	ldr	r3, [pc, #32]	; (800589c <Uart_read+0x54>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	4b06      	ldr	r3, [pc, #24]	; (800589c <Uart_read+0x54>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800588a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    return c;
 800588e:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000bbc 	.word	0x20000bbc

080058a0 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <IsDataAvailable+0x30>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <IsDataAvailable+0x30>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20000bbc 	.word	0x20000bbc

080058d4 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80058d8:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <Uart_peek+0x34>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80058e0:	4b09      	ldr	r3, [pc, #36]	; (8005908 <Uart_peek+0x34>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d102      	bne.n	80058f2 <Uart_peek+0x1e>
  {
    return -1;
 80058ec:	f04f 33ff 	mov.w	r3, #4294967295
 80058f0:	e006      	b.n	8005900 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <Uart_peek+0x34>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b04      	ldr	r3, [pc, #16]	; (8005908 <Uart_peek+0x34>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058fe:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8005900:	4618      	mov	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr
 8005908:	20000bbc 	.word	0x20000bbc

0800590c <Get_after>:

/* must be used after wait_for function
 * get the entered number of characters after the entered string
 */
int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	460b      	mov	r3, r1
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	72fb      	strb	r3, [r7, #11]
	for (int indx=0; indx<numberofchars; indx++)
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e01e      	b.n	800595e <Get_after+0x52>
	{
		timeout_rb = TIMEOUT_DEF;
 8005920:	4b13      	ldr	r3, [pc, #76]	; (8005970 <Get_after+0x64>)
 8005922:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005926:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout_rb);  // wait until some data is available
 8005928:	bf00      	nop
 800592a:	f7ff ffb9 	bl	80058a0 <IsDataAvailable>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <Get_after+0x30>
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <Get_after+0x64>)
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f6      	bne.n	800592a <Get_after+0x1e>
		if (timeout_rb == 0) return 0;  // if data isn't available within time, then return 0
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <Get_after+0x64>)
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <Get_after+0x3c>
 8005944:	2300      	movs	r3, #0
 8005946:	e00f      	b.n	8005968 <Get_after+0x5c>
		buffertosave[indx] = Uart_read();  // save the data into the buffer... increments the tail
 8005948:	f7ff ff7e 	bl	8005848 <Uart_read>
 800594c:	4601      	mov	r1, r0
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4413      	add	r3, r2
 8005954:	b2ca      	uxtb	r2, r1
 8005956:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3301      	adds	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	7afb      	ldrb	r3, [r7, #11]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	429a      	cmp	r2, r3
 8005964:	dbdc      	blt.n	8005920 <Get_after+0x14>
	}
	return 1;
 8005966:	2301      	movs	r3, #1
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	200003a8 	.word	0x200003a8

08005974 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7fa fc51 	bl	8000228 <strlen>
 8005986:	4603      	mov	r3, r0
 8005988:	60bb      	str	r3, [r7, #8]

again:
	timeout_rb = TIMEOUT_DEF;
 800598a:	4b3c      	ldr	r3, [pc, #240]	; (8005a7c <Wait_for+0x108>)
 800598c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005990:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout_rb);  // let's wait for the data to show up
 8005992:	bf00      	nop
 8005994:	f7ff ff84 	bl	80058a0 <IsDataAvailable>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <Wait_for+0x32>
 800599e:	4b37      	ldr	r3, [pc, #220]	; (8005a7c <Wait_for+0x108>)
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f6      	bne.n	8005994 <Wait_for+0x20>
	if (timeout_rb == 0) return 0;
 80059a6:	4b35      	ldr	r3, [pc, #212]	; (8005a7c <Wait_for+0x108>)
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d119      	bne.n	80059e2 <Wait_for+0x6e>
 80059ae:	2300      	movs	r3, #0
 80059b0:	e060      	b.n	8005a74 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80059b2:	4b33      	ldr	r3, [pc, #204]	; (8005a80 <Wait_for+0x10c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80059ba:	4b31      	ldr	r3, [pc, #196]	; (8005a80 <Wait_for+0x10c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d00b      	beq.n	80059de <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80059c6:	4b2e      	ldr	r3, [pc, #184]	; (8005a80 <Wait_for+0x10c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	4b2b      	ldr	r3, [pc, #172]	; (8005a80 <Wait_for+0x10c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80059d8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80059dc:	e001      	b.n	80059e2 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	e048      	b.n	8005a74 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80059e2:	f7ff ff77 	bl	80058d4 <Uart_peek>
 80059e6:	4601      	mov	r1, r0
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	4299      	cmp	r1, r3
 80059f2:	d1de      	bne.n	80059b2 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80059f4:	e027      	b.n	8005a46 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80059fc:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <Wait_for+0x10c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	4b1e      	ldr	r3, [pc, #120]	; (8005a80 <Wait_for+0x10c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a0e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		if (so_far == len) return 1;
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d101      	bne.n	8005a1e <Wait_for+0xaa>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e02a      	b.n	8005a74 <Wait_for+0x100>
		timeout_rb = TIMEOUT_DEF;
 8005a1e:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <Wait_for+0x108>)
 8005a20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a24:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout_rb);
 8005a26:	bf00      	nop
 8005a28:	f7ff ff3a 	bl	80058a0 <IsDataAvailable>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <Wait_for+0xc6>
 8005a32:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <Wait_for+0x108>)
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f6      	bne.n	8005a28 <Wait_for+0xb4>
		if (timeout_rb == 0) return 0;
 8005a3a:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <Wait_for+0x108>)
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <Wait_for+0xd2>
 8005a42:	2300      	movs	r3, #0
 8005a44:	e016      	b.n	8005a74 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8005a46:	f7ff ff45 	bl	80058d4 <Uart_peek>
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	4413      	add	r3, r2
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	4299      	cmp	r1, r3
 8005a56:	d0ce      	beq.n	80059f6 <Wait_for+0x82>
	}

	if (so_far != len)
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d002      	beq.n	8005a66 <Wait_for+0xf2>
	{
		so_far = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]
		goto again;
 8005a64:	e791      	b.n	800598a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d101      	bne.n	8005a72 <Wait_for+0xfe>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <Wait_for+0x100>
	else return 0;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	200003a8 	.word	0x200003a8
 8005a80:	20000bbc 	.word	0x20000bbc

08005a84 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d017      	beq.n	8005ad6 <Uart_isr+0x52>
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d012      	beq.n	8005ad6 <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8005abe:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <Uart_isr+0xbc>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff fe9c 	bl	8005804 <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 8005acc:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <Uart_isr+0xc0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	7bfa      	ldrb	r2, [r7, #15]
 8005ad2:	605a      	str	r2, [r3, #4]
        return;
 8005ad4:	e031      	b.n	8005b3a <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02c      	beq.n	8005b3a <Uart_isr+0xb6>
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d027      	beq.n	8005b3a <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8005aea:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <Uart_isr+0xc4>)
 8005aec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005af0:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <Uart_isr+0xc4>)
 8005af2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d108      	bne.n	8005b0c <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b08:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8005b0a:	e015      	b.n	8005b38 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <Uart_isr+0xc4>)
 8005b0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b12:	4a0d      	ldr	r2, [pc, #52]	; (8005b48 <Uart_isr+0xc4>)
 8005b14:	5cd3      	ldrb	r3, [r2, r3]
 8005b16:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <Uart_isr+0xc4>)
 8005b1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b24:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <Uart_isr+0xc4>)
 8005b26:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	7bba      	ldrb	r2, [r7, #14]
 8005b36:	605a      	str	r2, [r3, #4]
    	return;
 8005b38:	bf00      	nop
    }
}
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000bbc 	.word	0x20000bbc
 8005b44:	200000d0 	.word	0x200000d0
 8005b48:	200007b4 	.word	0x200007b4

08005b4c <RTC_Init>:
uint8_t rmon,rday,rhour,rmin,rsec,rweek;
uint8_t const table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5};
uint8_t const mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};

void RTC_Init(RTC_HandleTypeDef* hrtc)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	6078      	str	r0, [r7, #4]
	hrtc->Instance = RTC;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <RTC_Init+0x68>)
 8005b58:	601a      	str	r2, [r3, #0]
	hrtc->Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b60:	605a      	str	r2, [r3, #4]
	hrtc->Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(hrtc) != HAL_OK)
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f003 fbb9 	bl	80092e0 <HAL_RTC_Init>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <RTC_Init+0x2c>
	{
		Error_Handler();
 8005b74:	f7fe f97c 	bl	8003e70 <Error_Handler>
	}
	//Check If first time connect to power source
	if(HAL_RTCEx_BKUPRead(hrtc,RTC_BKP_DR1)!=0x5050){//Deafult Value should be 0xffff
 8005b78:	2101      	movs	r1, #1
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f003 fcde 	bl	800953c <HAL_RTCEx_BKUPRead>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f245 0250 	movw	r2, #20560	; 0x5050
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d010      	beq.n	8005bac <RTC_Init+0x60>
		HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR1,0x5050);
 8005b8a:	f245 0250 	movw	r2, #20560	; 0x5050
 8005b8e:	2101      	movs	r1, #1
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f003 fcb9 	bl	8009508 <HAL_RTCEx_BKUPWrite>
		RTC_Set(2022,1,1,0,0,0);
 8005b96:	2300      	movs	r3, #0
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8005ba8:	f000 f806 	bl	8005bb8 <RTC_Set>
	}
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40002800 	.word	0x40002800

08005bb8 <RTC_Set>:

uint8_t RTC_Set(uint16_t syear, int8_t smon, uint8_t sday,uint8_t rhour,uint8_t rmin,uint8_t rsec){
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	80fb      	strh	r3, [r7, #6]
 8005bca:	4603      	mov	r3, r0
 8005bcc:	717b      	strb	r3, [r7, #5]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	713b      	strb	r3, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set Time According To Parameters (Be Done Later Using USART)
	 */
	uint16_t t;
	uint32_t seccount=0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]
	if(syear<2000||syear>2099)return 1;// Range: 1970-2099
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005be0:	d304      	bcc.n	8005bec <RTC_Set+0x34>
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	f640 0233 	movw	r2, #2099	; 0x833
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d901      	bls.n	8005bf0 <RTC_Set+0x38>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e081      	b.n	8005cf4 <RTC_Set+0x13c>
	for(t=1970;t<syear;++t){
 8005bf0:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8005bf4:	81fb      	strh	r3, [r7, #14]
 8005bf6:	e014      	b.n	8005c22 <RTC_Set+0x6a>
		if(Is_Leap_Year(t))seccount+=31622400;
 8005bf8:	89fb      	ldrh	r3, [r7, #14]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 f9dc 	bl	8005fb8 <Is_Leap_Year>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d006      	beq.n	8005c14 <RTC_Set+0x5c>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
 8005c0c:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8005c10:	60bb      	str	r3, [r7, #8]
 8005c12:	e003      	b.n	8005c1c <RTC_Set+0x64>
		else seccount+=31536000;
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <RTC_Set+0x144>)
 8005c18:	4413      	add	r3, r2
 8005c1a:	60bb      	str	r3, [r7, #8]
	for(t=1970;t<syear;++t){
 8005c1c:	89fb      	ldrh	r3, [r7, #14]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	81fb      	strh	r3, [r7, #14]
 8005c22:	89fa      	ldrh	r2, [r7, #14]
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d3e6      	bcc.n	8005bf8 <RTC_Set+0x40>
	}
	smon-=1;
 8005c2a:	797b      	ldrb	r3, [r7, #5]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	717b      	strb	r3, [r7, #5]
	for(t=0;t<smon;t++){
 8005c32:	2300      	movs	r3, #0
 8005c34:	81fb      	strh	r3, [r7, #14]
 8005c36:	e01c      	b.n	8005c72 <RTC_Set+0xba>
		seccount+=(uint32_t)mon_table[t]*86400;
 8005c38:	89fb      	ldrh	r3, [r7, #14]
 8005c3a:	4a31      	ldr	r2, [pc, #196]	; (8005d00 <RTC_Set+0x148>)
 8005c3c:	5cd3      	ldrb	r3, [r2, r3]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <RTC_Set+0x14c>)
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	4413      	add	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]
		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f9b2 	bl	8005fb8 <Is_Leap_Year>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <RTC_Set+0xb4>
 8005c5a:	89fb      	ldrh	r3, [r7, #14]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d105      	bne.n	8005c6c <RTC_Set+0xb4>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005c66:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005c6a:	60bb      	str	r3, [r7, #8]
	for(t=0;t<smon;t++){
 8005c6c:	89fb      	ldrh	r3, [r7, #14]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	81fb      	strh	r3, [r7, #14]
 8005c72:	89fa      	ldrh	r2, [r7, #14]
 8005c74:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	dbdd      	blt.n	8005c38 <RTC_Set+0x80>
	}
	seccount+=(uint32_t)(sday-1)*86400;
 8005c7c:	793b      	ldrb	r3, [r7, #4]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	461a      	mov	r2, r3
 8005c82:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <RTC_Set+0x14c>)
 8005c84:	fb02 f303 	mul.w	r3, r2, r3
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rhour*3600;
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005c94:	fb02 f303 	mul.w	r3, r2, r3
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rmin*60;
 8005c9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	461a      	mov	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4413      	add	r3, r2
 8005cb0:	60bb      	str	r3, [r7, #8]
	seccount += rsec;
 8005cb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	4413      	add	r3, r2
 8005cba:	60bb      	str	r3, [r7, #8]

	RTC->CRL|=1<<4;
 8005cbc:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <RTC_Set+0x150>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4a11      	ldr	r2, [pc, #68]	; (8005d08 <RTC_Set+0x150>)
 8005cc2:	f043 0310 	orr.w	r3, r3, #16
 8005cc6:	6053      	str	r3, [r2, #4]
	RTC->CNTL=seccount&0xffff;
 8005cc8:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <RTC_Set+0x150>)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	61d3      	str	r3, [r2, #28]
	RTC->CNTH=seccount>>16;
 8005cd0:	4a0d      	ldr	r2, [pc, #52]	; (8005d08 <RTC_Set+0x150>)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	6193      	str	r3, [r2, #24]
	RTC->CRL&=~(1<<4);
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <RTC_Set+0x150>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <RTC_Set+0x150>)
 8005cde:	f023 0310 	bic.w	r3, r3, #16
 8005ce2:	6053      	str	r3, [r2, #4]
	while(!(RTC->CRL&(1<<5)));
 8005ce4:	bf00      	nop
 8005ce6:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <RTC_Set+0x150>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f9      	beq.n	8005ce6 <RTC_Set+0x12e>

	return 0;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd90      	pop	{r4, r7, pc}
 8005cfc:	01e13380 	.word	0x01e13380
 8005d00:	0800d98c 	.word	0x0800d98c
 8005d04:	00015180 	.word	0x00015180
 8005d08:	40002800 	.word	0x40002800

08005d0c <RTC_Get>:

uint8_t RTC_Get(void){
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
	/*
	 * Refresh Time variables in rtc.c
	 */
	static uint16_t daycnt=0;
	uint32_t timecount=0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	607b      	str	r3, [r7, #4]
	uint32_t temp=0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
	uint32_t temp1=0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]

	timecount=RTC->CNTH;
 8005d1e:	4b65      	ldr	r3, [pc, #404]	; (8005eb4 <RTC_Get+0x1a8>)
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	607b      	str	r3, [r7, #4]
	timecount<<=16;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	607b      	str	r3, [r7, #4]
	timecount+=RTC->CNTL;
 8005d2a:	4b62      	ldr	r3, [pc, #392]	; (8005eb4 <RTC_Get+0x1a8>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	607b      	str	r3, [r7, #4]

	temp=timecount/86400;//Day
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a60      	ldr	r2, [pc, #384]	; (8005eb8 <RTC_Get+0x1ac>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	60fb      	str	r3, [r7, #12]
	if(daycnt!=temp){//New Day
 8005d40:	4b5e      	ldr	r3, [pc, #376]	; (8005ebc <RTC_Get+0x1b0>)
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d066      	beq.n	8005e1a <RTC_Get+0x10e>
		daycnt=temp;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	4b5a      	ldr	r3, [pc, #360]	; (8005ebc <RTC_Get+0x1b0>)
 8005d52:	801a      	strh	r2, [r3, #0]
		temp1=1970;
 8005d54:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8005d58:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8005d5a:	e01b      	b.n	8005d94 <RTC_Get+0x88>
			if(Is_Leap_Year(temp1)){
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 f929 	bl	8005fb8 <Is_Leap_Year>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00c      	beq.n	8005d86 <RTC_Get+0x7a>
				if(temp>=366)temp-=366;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8005d72:	d304      	bcc.n	8005d7e <RTC_Get+0x72>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e007      	b.n	8005d8e <RTC_Get+0x82>
				else{temp1++; break;}
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60bb      	str	r3, [r7, #8]
 8005d84:	e00a      	b.n	8005d9c <RTC_Get+0x90>
			}
			else temp-=365;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 8005d8c:	60fb      	str	r3, [r7, #12]
			temp1++;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8005d9a:	d8df      	bhi.n	8005d5c <RTC_Get+0x50>
		}
		ryear=temp1;//Year
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <RTC_Get+0x1b4>)
 8005da2:	801a      	strh	r2, [r3, #0]
		temp1=0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8005da8:	e024      	b.n	8005df4 <RTC_Get+0xe8>
			if(Is_Leap_Year(ryear)&&temp1==1){
 8005daa:	4b45      	ldr	r3, [pc, #276]	; (8005ec0 <RTC_Get+0x1b4>)
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f902 	bl	8005fb8 <Is_Leap_Year>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <RTC_Get+0xc2>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d106      	bne.n	8005dce <RTC_Get+0xc2>
				if(temp>=29)temp-=29;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b1c      	cmp	r3, #28
 8005dc4:	d91a      	bls.n	8005dfc <RTC_Get+0xf0>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3b1d      	subs	r3, #29
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e00f      	b.n	8005dee <RTC_Get+0xe2>
				else break;
			}else{
			if(temp>=mon_table[temp1])temp-=mon_table[temp1];
 8005dce:	4a3d      	ldr	r2, [pc, #244]	; (8005ec4 <RTC_Get+0x1b8>)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d310      	bcc.n	8005e00 <RTC_Get+0xf4>
 8005dde:	4a39      	ldr	r2, [pc, #228]	; (8005ec4 <RTC_Get+0x1b8>)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4413      	add	r3, r2
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1a9b      	subs	r3, r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
			else break;
			}
			temp1++;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b1b      	cmp	r3, #27
 8005df8:	d8d7      	bhi.n	8005daa <RTC_Get+0x9e>
 8005dfa:	e002      	b.n	8005e02 <RTC_Get+0xf6>
				else break;
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <RTC_Get+0xf6>
			else break;
 8005e00:	bf00      	nop
		}
		rmon=temp1+1;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	3301      	adds	r3, #1
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	4b2f      	ldr	r3, [pc, #188]	; (8005ec8 <RTC_Get+0x1bc>)
 8005e0c:	701a      	strb	r2, [r3, #0]
		rday=temp+1;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	3301      	adds	r3, #1
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	4b2d      	ldr	r3, [pc, #180]	; (8005ecc <RTC_Get+0x1c0>)
 8005e18:	701a      	strb	r2, [r3, #0]
	}
	temp=timecount%86400;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a26      	ldr	r2, [pc, #152]	; (8005eb8 <RTC_Get+0x1ac>)
 8005e1e:	fba2 1203 	umull	r1, r2, r2, r3
 8005e22:	0c12      	lsrs	r2, r2, #16
 8005e24:	492a      	ldr	r1, [pc, #168]	; (8005ed0 <RTC_Get+0x1c4>)
 8005e26:	fb01 f202 	mul.w	r2, r1, r2
 8005e2a:	1a9b      	subs	r3, r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
	rhour=temp/3600;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a28      	ldr	r2, [pc, #160]	; (8005ed4 <RTC_Get+0x1c8>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	0adb      	lsrs	r3, r3, #11
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <RTC_Get+0x1cc>)
 8005e3c:	701a      	strb	r2, [r3, #0]
	rmin=(temp%3600)/60;
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <RTC_Get+0x1c8>)
 8005e42:	fba3 1302 	umull	r1, r3, r3, r2
 8005e46:	0adb      	lsrs	r3, r3, #11
 8005e48:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	4a22      	ldr	r2, [pc, #136]	; (8005edc <RTC_Get+0x1d0>)
 8005e54:	fba2 2303 	umull	r2, r3, r2, r3
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	4b20      	ldr	r3, [pc, #128]	; (8005ee0 <RTC_Get+0x1d4>)
 8005e5e:	701a      	strb	r2, [r3, #0]
	rsec=(temp%3600)%60;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <RTC_Get+0x1c8>)
 8005e64:	fba2 1203 	umull	r1, r2, r2, r3
 8005e68:	0ad2      	lsrs	r2, r2, #11
 8005e6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005e6e:	fb01 f202 	mul.w	r2, r1, r2
 8005e72:	1a9a      	subs	r2, r3, r2
 8005e74:	4b19      	ldr	r3, [pc, #100]	; (8005edc <RTC_Get+0x1d0>)
 8005e76:	fba3 1302 	umull	r1, r3, r3, r2
 8005e7a:	0959      	lsrs	r1, r3, #5
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	1a5b      	subs	r3, r3, r1
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	1ad1      	subs	r1, r2, r3
 8005e86:	b2ca      	uxtb	r2, r1
 8005e88:	4b16      	ldr	r3, [pc, #88]	; (8005ee4 <RTC_Get+0x1d8>)
 8005e8a:	701a      	strb	r2, [r3, #0]
	rweek=RTC_Get_Week(ryear,rmon,rday);
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <RTC_Get+0x1b4>)
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	4a0d      	ldr	r2, [pc, #52]	; (8005ec8 <RTC_Get+0x1bc>)
 8005e92:	7812      	ldrb	r2, [r2, #0]
 8005e94:	b291      	uxth	r1, r2
 8005e96:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <RTC_Get+0x1c0>)
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 f825 	bl	8005eec <RTC_Get_Week>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <RTC_Get+0x1dc>)
 8005ea8:	701a      	strb	r2, [r3, #0]
	return 0;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40002800 	.word	0x40002800
 8005eb8:	c22e4507 	.word	0xc22e4507
 8005ebc:	20000bcc 	.word	0x20000bcc
 8005ec0:	20000bc4 	.word	0x20000bc4
 8005ec4:	0800d98c 	.word	0x0800d98c
 8005ec8:	20000bc6 	.word	0x20000bc6
 8005ecc:	20000bc7 	.word	0x20000bc7
 8005ed0:	00015180 	.word	0x00015180
 8005ed4:	91a2b3c5 	.word	0x91a2b3c5
 8005ed8:	20000bc8 	.word	0x20000bc8
 8005edc:	88888889 	.word	0x88888889
 8005ee0:	20000bc9 	.word	0x20000bc9
 8005ee4:	20000bca 	.word	0x20000bca
 8005ee8:	20000bcb 	.word	0x20000bcb

08005eec <RTC_Get_Week>:

uint8_t RTC_Get_Week(uint16_t year, uint16_t month, uint16_t day){
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	80fb      	strh	r3, [r7, #6]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	80bb      	strh	r3, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	807b      	strh	r3, [r7, #2]
	uint16_t temp2;
	uint8_t yearH,yearL;
	yearH=year/100;
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <RTC_Get_Week+0xc0>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	733b      	strb	r3, [r7, #12]
	yearL=year%100;
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	4a27      	ldr	r2, [pc, #156]	; (8005fac <RTC_Get_Week+0xc0>)
 8005f10:	fba2 1203 	umull	r1, r2, r2, r3
 8005f14:	0952      	lsrs	r2, r2, #5
 8005f16:	2164      	movs	r1, #100	; 0x64
 8005f18:	fb01 f202 	mul.w	r2, r1, r2
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	737b      	strb	r3, [r7, #13]
	if (yearH>19)yearL+=100;
 8005f22:	7b3b      	ldrb	r3, [r7, #12]
 8005f24:	2b13      	cmp	r3, #19
 8005f26:	d902      	bls.n	8005f2e <RTC_Get_Week+0x42>
 8005f28:	7b7b      	ldrb	r3, [r7, #13]
 8005f2a:	3364      	adds	r3, #100	; 0x64
 8005f2c:	737b      	strb	r3, [r7, #13]
	temp2=yearL+yearL/4;
 8005f2e:	7b7b      	ldrb	r3, [r7, #13]
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	7b7b      	ldrb	r3, [r7, #13]
 8005f34:	089b      	lsrs	r3, r3, #2
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	81fb      	strh	r3, [r7, #14]
	temp2=temp2%7;
 8005f3e:	89fa      	ldrh	r2, [r7, #14]
 8005f40:	4b1b      	ldr	r3, [pc, #108]	; (8005fb0 <RTC_Get_Week+0xc4>)
 8005f42:	fba3 1302 	umull	r1, r3, r3, r2
 8005f46:	1ad1      	subs	r1, r2, r3
 8005f48:	0849      	lsrs	r1, r1, #1
 8005f4a:	440b      	add	r3, r1
 8005f4c:	0899      	lsrs	r1, r3, #2
 8005f4e:	460b      	mov	r3, r1
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	1a5b      	subs	r3, r3, r1
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	81fb      	strh	r3, [r7, #14]
	temp2=temp2+day+table_week[month-1];
 8005f58:	89fa      	ldrh	r2, [r7, #14]
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	88bb      	ldrh	r3, [r7, #4]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	4913      	ldr	r1, [pc, #76]	; (8005fb4 <RTC_Get_Week+0xc8>)
 8005f66:	5ccb      	ldrb	r3, [r1, r3]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	4413      	add	r3, r2
 8005f6c:	81fb      	strh	r3, [r7, #14]
	if (yearL%4==0&&month<3)temp2--;
 8005f6e:	7b7b      	ldrb	r3, [r7, #13]
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <RTC_Get_Week+0x9a>
 8005f7a:	88bb      	ldrh	r3, [r7, #4]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d802      	bhi.n	8005f86 <RTC_Get_Week+0x9a>
 8005f80:	89fb      	ldrh	r3, [r7, #14]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	81fb      	strh	r3, [r7, #14]
	return(temp2%7);
 8005f86:	89fa      	ldrh	r2, [r7, #14]
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <RTC_Get_Week+0xc4>)
 8005f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f8e:	1ad1      	subs	r1, r2, r3
 8005f90:	0849      	lsrs	r1, r1, #1
 8005f92:	440b      	add	r3, r1
 8005f94:	0899      	lsrs	r1, r3, #2
 8005f96:	460b      	mov	r3, r1
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	1a5b      	subs	r3, r3, r1
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	b2db      	uxtb	r3, r3
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr
 8005fac:	51eb851f 	.word	0x51eb851f
 8005fb0:	24924925 	.word	0x24924925
 8005fb4:	0800d980 	.word	0x0800d980

08005fb8 <Is_Leap_Year>:

uint8_t Is_Leap_Year(uint16_t year){
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	80fb      	strh	r3, [r7, #6]
	if(year%4==0){
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d11e      	bne.n	800600c <Is_Leap_Year+0x54>
		if(year%100==0){
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	4a11      	ldr	r2, [pc, #68]	; (8006018 <Is_Leap_Year+0x60>)
 8005fd2:	fba2 1203 	umull	r1, r2, r2, r3
 8005fd6:	0952      	lsrs	r2, r2, #5
 8005fd8:	2164      	movs	r1, #100	; 0x64
 8005fda:	fb01 f202 	mul.w	r2, r1, r2
 8005fde:	1a9b      	subs	r3, r3, r2
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d110      	bne.n	8006008 <Is_Leap_Year+0x50>
			if(year%400==0)return 1;
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	4a0b      	ldr	r2, [pc, #44]	; (8006018 <Is_Leap_Year+0x60>)
 8005fea:	fba2 1203 	umull	r1, r2, r2, r3
 8005fee:	09d2      	lsrs	r2, r2, #7
 8005ff0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005ff4:	fb01 f202 	mul.w	r2, r1, r2
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <Is_Leap_Year+0x4c>
 8006000:	2301      	movs	r3, #1
 8006002:	e004      	b.n	800600e <Is_Leap_Year+0x56>
			else return 0;
 8006004:	2300      	movs	r3, #0
 8006006:	e002      	b.n	800600e <Is_Leap_Year+0x56>
		}else return 1;
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <Is_Leap_Year+0x56>
	}else return 0;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr
 8006018:	51eb851f 	.word	0x51eb851f

0800601c <RTC_raw>:

uint32_t RTC_raw(){
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
	uint32_t time;
	time=RTC->CNTH;
 8006022:	4b08      	ldr	r3, [pc, #32]	; (8006044 <RTC_raw+0x28>)
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	607b      	str	r3, [r7, #4]
	time<<=16;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	607b      	str	r3, [r7, #4]
	time+=RTC->CNTL;
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <RTC_raw+0x28>)
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4413      	add	r3, r2
 8006036:	607b      	str	r3, [r7, #4]

	return time;
 8006038:	687b      	ldr	r3, [r7, #4]
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr
 8006044:	40002800 	.word	0x40002800

08006048 <get_TimeStamp>:


void get_TimeStamp(TimeStamp* t){
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/*
	 * Store Updated Values By a TimeStamp Pointer
	 */
	t->ryear = ryear;
 8006050:	4b10      	ldr	r3, [pc, #64]	; (8006094 <get_TimeStamp+0x4c>)
 8006052:	881a      	ldrh	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	801a      	strh	r2, [r3, #0]
	t->rmon = rmon;
 8006058:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <get_TimeStamp+0x50>)
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	709a      	strb	r2, [r3, #2]
	t->rday = rday;
 8006060:	4b0e      	ldr	r3, [pc, #56]	; (800609c <get_TimeStamp+0x54>)
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	70da      	strb	r2, [r3, #3]
	t->rhour = rhour;
 8006068:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <get_TimeStamp+0x58>)
 800606a:	781a      	ldrb	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	711a      	strb	r2, [r3, #4]
	t->rmin = rmin;
 8006070:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <get_TimeStamp+0x5c>)
 8006072:	781a      	ldrb	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	715a      	strb	r2, [r3, #5]
	t->rsec = rsec;
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <get_TimeStamp+0x60>)
 800607a:	781a      	ldrb	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	719a      	strb	r2, [r3, #6]
	t->rweek = rweek;
 8006080:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <get_TimeStamp+0x64>)
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	71da      	strb	r2, [r3, #7]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000bc4 	.word	0x20000bc4
 8006098:	20000bc6 	.word	0x20000bc6
 800609c:	20000bc7 	.word	0x20000bc7
 80060a0:	20000bc8 	.word	0x20000bc8
 80060a4:	20000bc9 	.word	0x20000bc9
 80060a8:	20000bca 	.word	0x20000bca
 80060ac:	20000bcb 	.word	0x20000bcb

080060b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80060b6:	4b15      	ldr	r3, [pc, #84]	; (800610c <HAL_MspInit+0x5c>)
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	4a14      	ldr	r2, [pc, #80]	; (800610c <HAL_MspInit+0x5c>)
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	6193      	str	r3, [r2, #24]
 80060c2:	4b12      	ldr	r3, [pc, #72]	; (800610c <HAL_MspInit+0x5c>)
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <HAL_MspInit+0x5c>)
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	4a0e      	ldr	r2, [pc, #56]	; (800610c <HAL_MspInit+0x5c>)
 80060d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d8:	61d3      	str	r3, [r2, #28]
 80060da:	4b0c      	ldr	r3, [pc, #48]	; (800610c <HAL_MspInit+0x5c>)
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80060e6:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <HAL_MspInit+0x60>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	4a04      	ldr	r2, [pc, #16]	; (8006110 <HAL_MspInit+0x60>)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr
 800610c:	40021000 	.word	0x40021000
 8006110:	40010000 	.word	0x40010000

08006114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800611c:	f107 0310 	add.w	r3, r7, #16
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	605a      	str	r2, [r3, #4]
 8006126:	609a      	str	r2, [r3, #8]
 8006128:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a14      	ldr	r2, [pc, #80]	; (8006180 <HAL_ADC_MspInit+0x6c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d121      	bne.n	8006178 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_ADC_MspInit+0x70>)
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	4a12      	ldr	r2, [pc, #72]	; (8006184 <HAL_ADC_MspInit+0x70>)
 800613a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800613e:	6193      	str	r3, [r2, #24]
 8006140:	4b10      	ldr	r3, [pc, #64]	; (8006184 <HAL_ADC_MspInit+0x70>)
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800614c:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <HAL_ADC_MspInit+0x70>)
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	4a0c      	ldr	r2, [pc, #48]	; (8006184 <HAL_ADC_MspInit+0x70>)
 8006152:	f043 0310 	orr.w	r3, r3, #16
 8006156:	6193      	str	r3, [r2, #24]
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <HAL_ADC_MspInit+0x70>)
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006164:	2304      	movs	r3, #4
 8006166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006168:	2303      	movs	r3, #3
 800616a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800616c:	f107 0310 	add.w	r3, r7, #16
 8006170:	4619      	mov	r1, r3
 8006172:	4805      	ldr	r0, [pc, #20]	; (8006188 <HAL_ADC_MspInit+0x74>)
 8006174:	f002 f902 	bl	800837c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006178:	bf00      	nop
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40012400 	.word	0x40012400
 8006184:	40021000 	.word	0x40021000
 8006188:	40011000 	.word	0x40011000

0800618c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a0b      	ldr	r2, [pc, #44]	; (80061c8 <HAL_RTC_MspInit+0x3c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d110      	bne.n	80061c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800619e:	f002 fad7 	bl	8008750 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80061a2:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <HAL_RTC_MspInit+0x40>)
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	4a09      	ldr	r2, [pc, #36]	; (80061cc <HAL_RTC_MspInit+0x40>)
 80061a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ac:	61d3      	str	r3, [r2, #28]
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <HAL_RTC_MspInit+0x40>)
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80061ba:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <HAL_RTC_MspInit+0x44>)
 80061bc:	2201      	movs	r2, #1
 80061be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40002800 	.word	0x40002800
 80061cc:	40021000 	.word	0x40021000
 80061d0:	4242043c 	.word	0x4242043c

080061d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a2c      	ldr	r2, [pc, #176]	; (8006294 <HAL_TIM_Base_MspInit+0xc0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d10c      	bne.n	8006200 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80061e6:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	4a2b      	ldr	r2, [pc, #172]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 80061ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061f0:	6193      	str	r3, [r2, #24]
 80061f2:	4b29      	ldr	r3, [pc, #164]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80061fe:	e044      	b.n	800628a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	d10c      	bne.n	8006224 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800620a:	4b23      	ldr	r3, [pc, #140]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	4a22      	ldr	r2, [pc, #136]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	61d3      	str	r3, [r2, #28]
 8006216:	4b20      	ldr	r3, [pc, #128]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	693b      	ldr	r3, [r7, #16]
}
 8006222:	e032      	b.n	800628a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1c      	ldr	r2, [pc, #112]	; (800629c <HAL_TIM_Base_MspInit+0xc8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d114      	bne.n	8006258 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800622e:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	4a19      	ldr	r2, [pc, #100]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	61d3      	str	r3, [r2, #28]
 800623a:	4b17      	ldr	r3, [pc, #92]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006246:	2200      	movs	r2, #0
 8006248:	2100      	movs	r1, #0
 800624a:	201d      	movs	r0, #29
 800624c:	f001 ff57 	bl	80080fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006250:	201d      	movs	r0, #29
 8006252:	f001 ff70 	bl	8008136 <HAL_NVIC_EnableIRQ>
}
 8006256:	e018      	b.n	800628a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a10      	ldr	r2, [pc, #64]	; (80062a0 <HAL_TIM_Base_MspInit+0xcc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d113      	bne.n	800628a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006262:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	4a0c      	ldr	r2, [pc, #48]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 8006268:	f043 0308 	orr.w	r3, r3, #8
 800626c:	61d3      	str	r3, [r2, #28]
 800626e:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <HAL_TIM_Base_MspInit+0xc4>)
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	60bb      	str	r3, [r7, #8]
 8006278:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800627a:	2200      	movs	r2, #0
 800627c:	2100      	movs	r1, #0
 800627e:	2032      	movs	r0, #50	; 0x32
 8006280:	f001 ff3d 	bl	80080fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006284:	2032      	movs	r0, #50	; 0x32
 8006286:	f001 ff56 	bl	8008136 <HAL_NVIC_EnableIRQ>
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40021000 	.word	0x40021000
 800629c:	40000400 	.word	0x40000400
 80062a0:	40000c00 	.word	0x40000c00

080062a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ac:	f107 0310 	add.w	r3, r7, #16
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a10      	ldr	r2, [pc, #64]	; (8006300 <HAL_TIM_MspPostInit+0x5c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d118      	bne.n	80062f6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <HAL_TIM_MspPostInit+0x60>)
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	4a0e      	ldr	r2, [pc, #56]	; (8006304 <HAL_TIM_MspPostInit+0x60>)
 80062ca:	f043 0304 	orr.w	r3, r3, #4
 80062ce:	6193      	str	r3, [r2, #24]
 80062d0:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <HAL_TIM_MspPostInit+0x60>)
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80062dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e2:	2302      	movs	r3, #2
 80062e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062e6:	2302      	movs	r3, #2
 80062e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062ea:	f107 0310 	add.w	r3, r7, #16
 80062ee:	4619      	mov	r1, r3
 80062f0:	4805      	ldr	r0, [pc, #20]	; (8006308 <HAL_TIM_MspPostInit+0x64>)
 80062f2:	f002 f843 	bl	800837c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80062f6:	bf00      	nop
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40021000 	.word	0x40021000
 8006308:	40010800 	.word	0x40010800

0800630c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006314:	f107 0318 	add.w	r3, r7, #24
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	605a      	str	r2, [r3, #4]
 800631e:	609a      	str	r2, [r3, #8]
 8006320:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a40      	ldr	r2, [pc, #256]	; (8006428 <HAL_UART_MspInit+0x11c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d13a      	bne.n	80063a2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800632c:	4b3f      	ldr	r3, [pc, #252]	; (800642c <HAL_UART_MspInit+0x120>)
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	4a3e      	ldr	r2, [pc, #248]	; (800642c <HAL_UART_MspInit+0x120>)
 8006332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006336:	6193      	str	r3, [r2, #24]
 8006338:	4b3c      	ldr	r3, [pc, #240]	; (800642c <HAL_UART_MspInit+0x120>)
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006344:	4b39      	ldr	r3, [pc, #228]	; (800642c <HAL_UART_MspInit+0x120>)
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	4a38      	ldr	r2, [pc, #224]	; (800642c <HAL_UART_MspInit+0x120>)
 800634a:	f043 0304 	orr.w	r3, r3, #4
 800634e:	6193      	str	r3, [r2, #24]
 8006350:	4b36      	ldr	r3, [pc, #216]	; (800642c <HAL_UART_MspInit+0x120>)
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800635c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006362:	2302      	movs	r3, #2
 8006364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006366:	2303      	movs	r3, #3
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800636a:	f107 0318 	add.w	r3, r7, #24
 800636e:	4619      	mov	r1, r3
 8006370:	482f      	ldr	r0, [pc, #188]	; (8006430 <HAL_UART_MspInit+0x124>)
 8006372:	f002 f803 	bl	800837c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800637a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800637c:	2300      	movs	r3, #0
 800637e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006380:	2300      	movs	r3, #0
 8006382:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006384:	f107 0318 	add.w	r3, r7, #24
 8006388:	4619      	mov	r1, r3
 800638a:	4829      	ldr	r0, [pc, #164]	; (8006430 <HAL_UART_MspInit+0x124>)
 800638c:	f001 fff6 	bl	800837c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	2025      	movs	r0, #37	; 0x25
 8006396:	f001 feb2 	bl	80080fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800639a:	2025      	movs	r0, #37	; 0x25
 800639c:	f001 fecb 	bl	8008136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80063a0:	e03e      	b.n	8006420 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a23      	ldr	r2, [pc, #140]	; (8006434 <HAL_UART_MspInit+0x128>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d139      	bne.n	8006420 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80063ac:	4b1f      	ldr	r3, [pc, #124]	; (800642c <HAL_UART_MspInit+0x120>)
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	4a1e      	ldr	r2, [pc, #120]	; (800642c <HAL_UART_MspInit+0x120>)
 80063b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063b6:	61d3      	str	r3, [r2, #28]
 80063b8:	4b1c      	ldr	r3, [pc, #112]	; (800642c <HAL_UART_MspInit+0x120>)
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063c4:	4b19      	ldr	r3, [pc, #100]	; (800642c <HAL_UART_MspInit+0x120>)
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	4a18      	ldr	r2, [pc, #96]	; (800642c <HAL_UART_MspInit+0x120>)
 80063ca:	f043 0308 	orr.w	r3, r3, #8
 80063ce:	6193      	str	r3, [r2, #24]
 80063d0:	4b16      	ldr	r3, [pc, #88]	; (800642c <HAL_UART_MspInit+0x120>)
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80063dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e2:	2302      	movs	r3, #2
 80063e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063e6:	2303      	movs	r3, #3
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ea:	f107 0318 	add.w	r3, r7, #24
 80063ee:	4619      	mov	r1, r3
 80063f0:	4811      	ldr	r0, [pc, #68]	; (8006438 <HAL_UART_MspInit+0x12c>)
 80063f2:	f001 ffc3 	bl	800837c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80063f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006400:	2300      	movs	r3, #0
 8006402:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006404:	f107 0318 	add.w	r3, r7, #24
 8006408:	4619      	mov	r1, r3
 800640a:	480b      	ldr	r0, [pc, #44]	; (8006438 <HAL_UART_MspInit+0x12c>)
 800640c:	f001 ffb6 	bl	800837c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006410:	2200      	movs	r2, #0
 8006412:	2100      	movs	r1, #0
 8006414:	2027      	movs	r0, #39	; 0x27
 8006416:	f001 fe72 	bl	80080fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800641a:	2027      	movs	r0, #39	; 0x27
 800641c:	f001 fe8b 	bl	8008136 <HAL_NVIC_EnableIRQ>
}
 8006420:	bf00      	nop
 8006422:	3728      	adds	r7, #40	; 0x28
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40013800 	.word	0x40013800
 800642c:	40021000 	.word	0x40021000
 8006430:	40010800 	.word	0x40010800
 8006434:	40004800 	.word	0x40004800
 8006438:	40010c00 	.word	0x40010c00

0800643c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006442:	f107 0308 	add.w	r3, r7, #8
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	609a      	str	r2, [r3, #8]
 800644e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8006450:	4b18      	ldr	r3, [pc, #96]	; (80064b4 <HAL_FSMC_MspInit+0x78>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d129      	bne.n	80064ac <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8006458:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <HAL_FSMC_MspInit+0x78>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800645e:	4b16      	ldr	r3, [pc, #88]	; (80064b8 <HAL_FSMC_MspInit+0x7c>)
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <HAL_FSMC_MspInit+0x7c>)
 8006464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006468:	6153      	str	r3, [r2, #20]
 800646a:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <HAL_FSMC_MspInit+0x7c>)
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8006476:	f64f 7380 	movw	r3, #65408	; 0xff80
 800647a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647c:	2302      	movs	r3, #2
 800647e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006480:	2303      	movs	r3, #3
 8006482:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006484:	f107 0308 	add.w	r3, r7, #8
 8006488:	4619      	mov	r1, r3
 800648a:	480c      	ldr	r0, [pc, #48]	; (80064bc <HAL_FSMC_MspInit+0x80>)
 800648c:	f001 ff76 	bl	800837c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006490:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8006494:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006496:	2302      	movs	r3, #2
 8006498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800649a:	2303      	movs	r3, #3
 800649c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800649e:	f107 0308 	add.w	r3, r7, #8
 80064a2:	4619      	mov	r1, r3
 80064a4:	4806      	ldr	r0, [pc, #24]	; (80064c0 <HAL_FSMC_MspInit+0x84>)
 80064a6:	f001 ff69 	bl	800837c <HAL_GPIO_Init>
 80064aa:	e000      	b.n	80064ae <HAL_FSMC_MspInit+0x72>
    return;
 80064ac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20000bd0 	.word	0x20000bd0
 80064b8:	40021000 	.word	0x40021000
 80064bc:	40011800 	.word	0x40011800
 80064c0:	40011400 	.word	0x40011400

080064c4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80064cc:	f7ff ffb6 	bl	800643c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80064dc:	bf00      	nop
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr

080064e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064e8:	e7fe      	b.n	80064e8 <HardFault_Handler+0x4>

080064ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064ea:	b480      	push	{r7}
 80064ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064ee:	e7fe      	b.n	80064ee <MemManage_Handler+0x4>

080064f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064f4:	e7fe      	b.n	80064f4 <BusFault_Handler+0x4>

080064f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064f6:	b480      	push	{r7}
 80064f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064fa:	e7fe      	b.n	80064fa <UsageFault_Handler+0x4>

080064fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006500:	bf00      	nop
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800650c:	bf00      	nop
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006518:	bf00      	nop
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  extern uint16_t timeout_rb;
  if(timeout_rb >0)  timeout_rb--;
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <SysTick_Handler+0x20>)
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <SysTick_Handler+0x18>
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <SysTick_Handler+0x20>)
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	4b02      	ldr	r3, [pc, #8]	; (8006540 <SysTick_Handler+0x20>)
 8006536:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006538:	f001 f810 	bl	800755c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800653c:	bf00      	nop
 800653e:	bd80      	pop	{r7, pc}
 8006540:	200003a8 	.word	0x200003a8

08006544 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <EXTI0_IRQHandler+0x34>)
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <EXTI0_IRQHandler+0x28>
	{
		extern uint32_t exertimer;
		exertimer = RTC_raw() + 3;
 8006554:	f7ff fd62 	bl	800601c <RTC_raw>
 8006558:	4603      	mov	r3, r0
 800655a:	3303      	adds	r3, #3
 800655c:	4a07      	ldr	r2, [pc, #28]	; (800657c <EXTI0_IRQHandler+0x38>)
 800655e:	6013      	str	r3, [r2, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <EXTI0_IRQHandler+0x34>)
 8006562:	2201      	movs	r2, #1
 8006564:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8006566:	2001      	movs	r0, #1
 8006568:	f002 f8e8 	bl	800873c <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800656c:	2001      	movs	r0, #1
 800656e:	f002 f8cd 	bl	800870c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006572:	bf00      	nop
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40010400 	.word	0x40010400
 800657c:	20000388 	.word	0x20000388

08006580 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8006584:	4b09      	ldr	r3, [pc, #36]	; (80065ac <EXTI4_IRQHandler+0x2c>)
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <EXTI4_IRQHandler+0x30>)
 8006592:	2201      	movs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <EXTI4_IRQHandler+0x2c>)
 8006598:	2210      	movs	r2, #16
 800659a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 800659c:	2010      	movs	r0, #16
 800659e:	f002 f8cd 	bl	800873c <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80065a2:	2010      	movs	r0, #16
 80065a4:	f002 f8b2 	bl	800870c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80065a8:	bf00      	nop
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40010400 	.word	0x40010400
 80065b0:	20000bda 	.word	0x20000bda

080065b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 80065b8:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <TIM3_IRQHandler+0x3c>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	3b01      	subs	r3, #1
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <TIM3_IRQHandler+0x3c>)
 80065c2:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 80065c4:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <TIM3_IRQHandler+0x3c>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10c      	bne.n	80065e6 <TIM3_IRQHandler+0x32>
 80065cc:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <TIM3_IRQHandler+0x40>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d108      	bne.n	80065e6 <TIM3_IRQHandler+0x32>
		/*Timer Ends, Handle the water drinking progress*/
		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 80065d4:	4808      	ldr	r0, [pc, #32]	; (80065f8 <TIM3_IRQHandler+0x44>)
 80065d6:	f003 f856 	bl	8009686 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 80065da:	4807      	ldr	r0, [pc, #28]	; (80065f8 <TIM3_IRQHandler+0x44>)
 80065dc:	f003 f897 	bl	800970e <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 80065e0:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <TIM3_IRQHandler+0x40>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80065e6:	4804      	ldr	r0, [pc, #16]	; (80065f8 <TIM3_IRQHandler+0x44>)
 80065e8:	f003 f97c 	bl	80098e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80065ec:	bf00      	nop
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000bd8 	.word	0x20000bd8
 80065f4:	20000bd9 	.word	0x20000bd9
 80065f8:	20000218 	.word	0x20000218

080065fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 8006602:	2301      	movs	r3, #1
 8006604:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <USART1_IRQHandler+0x38>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b20      	cmp	r3, #32
 8006612:	d107      	bne.n	8006624 <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 8006614:	4b07      	ldr	r3, [pc, #28]	; (8006634 <USART1_IRQHandler+0x38>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <USART1_IRQHandler+0x3c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	79fa      	ldrb	r2, [r7, #7]
 8006622:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006624:	4805      	ldr	r0, [pc, #20]	; (800663c <USART1_IRQHandler+0x40>)
 8006626:	f004 f8e1 	bl	800a7ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200000d0 	.word	0x200000d0
 8006638:	20000110 	.word	0x20000110
 800663c:	20000298 	.word	0x20000298

08006640 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 8006644:	4802      	ldr	r0, [pc, #8]	; (8006650 <USART3_IRQHandler+0x10>)
 8006646:	f7ff fa1d 	bl	8005a84 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 800664a:	bf00      	nop
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	200002d8 	.word	0x200002d8

08006654 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <EXTI15_10_IRQHandler+0x30>)
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <EXTI15_10_IRQHandler+0x24>
	{
		extern void debug_alarm_set();
		debug_alarm_set();
 8006664:	f7fb f90e 	bl	8001884 <debug_alarm_set>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <EXTI15_10_IRQHandler+0x30>)
 800666a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800666e:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8006670:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006674:	f002 f862 	bl	800873c <HAL_GPIO_EXTI_Callback>
	}
	/* USER
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006678:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800667c:	f002 f846 	bl	800870c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006680:	bf00      	nop
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40010400 	.word	0x40010400

08006688 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <TIM5_IRQHandler+0x14>)
 800668e:	2201      	movs	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006692:	4803      	ldr	r0, [pc, #12]	; (80066a0 <TIM5_IRQHandler+0x18>)
 8006694:	f003 f926 	bl	80098e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006698:	bf00      	nop
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000010 	.word	0x20000010
 80066a0:	20000258 	.word	0x20000258

080066a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066ac:	4a14      	ldr	r2, [pc, #80]	; (8006700 <_sbrk+0x5c>)
 80066ae:	4b15      	ldr	r3, [pc, #84]	; (8006704 <_sbrk+0x60>)
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066b8:	4b13      	ldr	r3, [pc, #76]	; (8006708 <_sbrk+0x64>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066c0:	4b11      	ldr	r3, [pc, #68]	; (8006708 <_sbrk+0x64>)
 80066c2:	4a12      	ldr	r2, [pc, #72]	; (800670c <_sbrk+0x68>)
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066c6:	4b10      	ldr	r3, [pc, #64]	; (8006708 <_sbrk+0x64>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d207      	bcs.n	80066e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066d4:	f004 fd0c 	bl	800b0f0 <__errno>
 80066d8:	4603      	mov	r3, r0
 80066da:	220c      	movs	r2, #12
 80066dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066de:	f04f 33ff 	mov.w	r3, #4294967295
 80066e2:	e009      	b.n	80066f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <_sbrk+0x64>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066ea:	4b07      	ldr	r3, [pc, #28]	; (8006708 <_sbrk+0x64>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	4a05      	ldr	r2, [pc, #20]	; (8006708 <_sbrk+0x64>)
 80066f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066f6:	68fb      	ldr	r3, [r7, #12]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20010000 	.word	0x20010000
 8006704:	00000400 	.word	0x00000400
 8006708:	20000bd4 	.word	0x20000bd4
 800670c:	20000bf0 	.word	0x20000bf0

08006710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006714:	4b15      	ldr	r3, [pc, #84]	; (800676c <SystemInit+0x5c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a14      	ldr	r2, [pc, #80]	; (800676c <SystemInit+0x5c>)
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006720:	4b12      	ldr	r3, [pc, #72]	; (800676c <SystemInit+0x5c>)
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	4911      	ldr	r1, [pc, #68]	; (800676c <SystemInit+0x5c>)
 8006726:	4b12      	ldr	r3, [pc, #72]	; (8006770 <SystemInit+0x60>)
 8006728:	4013      	ands	r3, r2
 800672a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800672c:	4b0f      	ldr	r3, [pc, #60]	; (800676c <SystemInit+0x5c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0e      	ldr	r2, [pc, #56]	; (800676c <SystemInit+0x5c>)
 8006732:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800673a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800673c:	4b0b      	ldr	r3, [pc, #44]	; (800676c <SystemInit+0x5c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0a      	ldr	r2, [pc, #40]	; (800676c <SystemInit+0x5c>)
 8006742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006746:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <SystemInit+0x5c>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4a07      	ldr	r2, [pc, #28]	; (800676c <SystemInit+0x5c>)
 800674e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006752:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <SystemInit+0x5c>)
 8006756:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800675a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <SystemInit+0x64>)
 800675e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006762:	609a      	str	r2, [r3, #8]
#endif 
}
 8006764:	bf00      	nop
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr
 800676c:	40021000 	.word	0x40021000
 8006770:	f8ff0000 	.word	0xf8ff0000
 8006774:	e000ed00 	.word	0xe000ed00

08006778 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <TIMER_INIT+0x20>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0201 	mvn.w	r2, #1
 8006784:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 8006786:	4804      	ldr	r0, [pc, #16]	; (8006798 <TIMER_INIT+0x20>)
 8006788:	f002 ff63 	bl	8009652 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 800678c:	4802      	ldr	r0, [pc, #8]	; (8006798 <TIMER_INIT+0x20>)
 800678e:	f002 ffa4 	bl	80096da <HAL_TIM_Base_Start_IT>
}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000258 	.word	0x20000258

0800679c <delay_us>:

void delay_us(uint16_t nus)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80067a6:	4b18      	ldr	r3, [pc, #96]	; (8006808 <delay_us+0x6c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2200      	movs	r2, #0
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim2);
 80067ae:	4b16      	ldr	r3, [pc, #88]	; (8006808 <delay_us+0x6c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	4b14      	ldr	r3, [pc, #80]	; (8006808 <delay_us+0x6c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim2) < nus)
 80067be:	bf00      	nop
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <delay_us+0x6c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d3f9      	bcc.n	80067c0 <delay_us+0x24>
	{
	}
	__HAL_TIM_DISABLE(&htim2);
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <delay_us+0x6c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10f      	bne.n	80067fc <delay_us+0x60>
 80067dc:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <delay_us+0x6c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a1a      	ldr	r2, [r3, #32]
 80067e2:	f240 4344 	movw	r3, #1092	; 0x444
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d107      	bne.n	80067fc <delay_us+0x60>
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <delay_us+0x6c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b05      	ldr	r3, [pc, #20]	; (8006808 <delay_us+0x6c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	200001d8 	.word	0x200001d8

0800680c <timer_min>:

void timer_min(uint8_t min)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8006816:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <timer_min+0x38>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f06f 0201 	mvn.w	r2, #1
 800681e:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	b2da      	uxtb	r2, r3
 8006826:	4b08      	ldr	r3, [pc, #32]	; (8006848 <timer_min+0x3c>)
 8006828:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 800682a:	4b08      	ldr	r3, [pc, #32]	; (800684c <timer_min+0x40>)
 800682c:	2201      	movs	r2, #1
 800682e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8006830:	4804      	ldr	r0, [pc, #16]	; (8006844 <timer_min+0x38>)
 8006832:	f002 ff0e 	bl	8009652 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8006836:	4803      	ldr	r0, [pc, #12]	; (8006844 <timer_min+0x38>)
 8006838:	f002 ff4f 	bl	80096da <HAL_TIM_Base_Start_IT>
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000218 	.word	0x20000218
 8006848:	20000bd8 	.word	0x20000bd8
 800684c:	20000bd9 	.word	0x20000bd9

08006850 <XPT2046_DelayUS>:
		-4.979353, -0.001750, 0.065168, -13.318824 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	e00a      	b.n	8006874 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 800685e:	230c      	movs	r3, #12
 8006860:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8006862:	bf00      	nop
 8006864:	7afb      	ldrb	r3, [r7, #11]
 8006866:	1e5a      	subs	r2, r3, #1
 8006868:	72fa      	strb	r2, [r7, #11]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1fa      	bne.n	8006864 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3f0      	bcc.n	800685e <XPT2046_DelayUS+0xe>
			;

	}

}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr

08006888 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	4603      	mov	r3, r0
 8006890:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 8006892:	2200      	movs	r2, #0
 8006894:	2104      	movs	r1, #4
 8006896:	481d      	ldr	r0, [pc, #116]	; (800690c <XPT2046_WriteCMD+0x84>)
 8006898:	f001 ff1f 	bl	80086da <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 800689c:	2200      	movs	r2, #0
 800689e:	2101      	movs	r1, #1
 80068a0:	481a      	ldr	r0, [pc, #104]	; (800690c <XPT2046_WriteCMD+0x84>)
 80068a2:	f001 ff1a 	bl	80086da <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
 80068aa:	e027      	b.n	80068fc <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 80068ac:	79fa      	ldrb	r2, [r7, #7]
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	f1c3 0307 	rsb	r3, r3, #7
 80068b4:	fa42 f303 	asr.w	r3, r2, r3
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <XPT2046_WriteCMD+0x44>
 80068c0:	2201      	movs	r2, #1
 80068c2:	2104      	movs	r1, #4
 80068c4:	4811      	ldr	r0, [pc, #68]	; (800690c <XPT2046_WriteCMD+0x84>)
 80068c6:	f001 ff08 	bl	80086da <HAL_GPIO_WritePin>
 80068ca:	e004      	b.n	80068d6 <XPT2046_WriteCMD+0x4e>
 80068cc:	2200      	movs	r2, #0
 80068ce:	2104      	movs	r1, #4
 80068d0:	480e      	ldr	r0, [pc, #56]	; (800690c <XPT2046_WriteCMD+0x84>)
 80068d2:	f001 ff02 	bl	80086da <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80068d6:	2005      	movs	r0, #5
 80068d8:	f7ff ffba 	bl	8006850 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 80068dc:	2201      	movs	r2, #1
 80068de:	2101      	movs	r1, #1
 80068e0:	480a      	ldr	r0, [pc, #40]	; (800690c <XPT2046_WriteCMD+0x84>)
 80068e2:	f001 fefa 	bl	80086da <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80068e6:	2005      	movs	r0, #5
 80068e8:	f7ff ffb2 	bl	8006850 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80068ec:	2200      	movs	r2, #0
 80068ee:	2101      	movs	r1, #1
 80068f0:	4806      	ldr	r0, [pc, #24]	; (800690c <XPT2046_WriteCMD+0x84>)
 80068f2:	f001 fef2 	bl	80086da <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	3301      	adds	r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	2b07      	cmp	r3, #7
 8006900:	d9d4      	bls.n	80068ac <XPT2046_WriteCMD+0x24>
	}

}
 8006902:	bf00      	nop
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40011800 	.word	0x40011800

08006910 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8006916:	2300      	movs	r3, #0
 8006918:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 800691a:	2200      	movs	r2, #0
 800691c:	2104      	movs	r1, #4
 800691e:	4819      	ldr	r0, [pc, #100]	; (8006984 <XPT2046_ReadCMD+0x74>)
 8006920:	f001 fedb 	bl	80086da <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8006924:	2201      	movs	r2, #1
 8006926:	2101      	movs	r1, #1
 8006928:	4816      	ldr	r0, [pc, #88]	; (8006984 <XPT2046_ReadCMD+0x74>)
 800692a:	f001 fed6 	bl	80086da <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 800692e:	2300      	movs	r3, #0
 8006930:	71fb      	strb	r3, [r7, #7]
 8006932:	e01e      	b.n	8006972 <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8006934:	2200      	movs	r2, #0
 8006936:	2101      	movs	r1, #1
 8006938:	4812      	ldr	r0, [pc, #72]	; (8006984 <XPT2046_ReadCMD+0x74>)
 800693a:	f001 fece 	bl	80086da <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 800693e:	2108      	movs	r1, #8
 8006940:	4810      	ldr	r0, [pc, #64]	; (8006984 <XPT2046_ReadCMD+0x74>)
 8006942:	f001 feb3 	bl	80086ac <HAL_GPIO_ReadPin>
 8006946:	4603      	mov	r3, r0
 8006948:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 800694a:	887a      	ldrh	r2, [r7, #2]
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	f1c3 030b 	rsb	r3, r3, #11
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	b21a      	sxth	r2, r3
 8006958:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800695c:	4313      	orrs	r3, r2
 800695e:	b21b      	sxth	r3, r3
 8006960:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8006962:	2201      	movs	r2, #1
 8006964:	2101      	movs	r1, #1
 8006966:	4807      	ldr	r0, [pc, #28]	; (8006984 <XPT2046_ReadCMD+0x74>)
 8006968:	f001 feb7 	bl	80086da <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	3301      	adds	r3, #1
 8006970:	71fb      	strb	r3, [r7, #7]
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	2b0b      	cmp	r3, #11
 8006976:	d9dd      	bls.n	8006934 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8006978:	88bb      	ldrh	r3, [r7, #4]

}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40011800 	.word	0x40011800

08006988 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff ff77 	bl	8006888 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 800699a:	f7ff ffb9 	bl	8006910 <XPT2046_ReadCMD>
 800699e:	4603      	mov	r3, r0

}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 80069b2:	2090      	movs	r0, #144	; 0x90
 80069b4:	f7ff ffe8 	bl	8006988 <XPT2046_ReadAdc>
 80069b8:	4603      	mov	r3, r0
 80069ba:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 80069bc:	2001      	movs	r0, #1
 80069be:	f7ff ff47 	bl	8006850 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 80069c2:	20d0      	movs	r0, #208	; 0xd0
 80069c4:	f7ff ffe0 	bl	8006988 <XPT2046_ReadAdc>
 80069c8:	4603      	mov	r3, r0
 80069ca:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	89fa      	ldrh	r2, [r7, #14]
 80069d0:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	89ba      	ldrh	r2, [r7, #12]
 80069d6:	801a      	strh	r2, [r3, #0]

}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b092      	sub	sp, #72	; 0x48
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80069e8:	2300      	movs	r3, #0
 80069ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 80069ee:	f107 0308 	add.w	r3, r7, #8
 80069f2:	2228      	movs	r2, #40	; 0x28
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f004 fba4 	bl	800b144 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 80069fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006a00:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8006a04:	4611      	mov	r1, r2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff ffce 	bl	80069a8 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8006a0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a10:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	3348      	adds	r3, #72	; 0x48
 8006a18:	443b      	add	r3, r7
 8006a1a:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 8006a1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a22:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8006a26:	330a      	adds	r3, #10
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	3348      	adds	r3, #72	; 0x48
 8006a2c:	443b      	add	r3, r7
 8006a2e:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 8006a32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a36:	3301      	adds	r3, #1
 8006a38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 8006a3c:	2110      	movs	r1, #16
 8006a3e:	4871      	ldr	r0, [pc, #452]	; (8006c04 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006a40:	f001 fe34 	bl	80086ac <HAL_GPIO_ReadPin>
 8006a44:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d103      	bne.n	8006a52 <XPT2046_ReadAdc_Smooth_XY+0x72>
 8006a4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a4e:	2b09      	cmp	r3, #9
 8006a50:	d9d4      	bls.n	80069fc <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8006a52:	2110      	movs	r1, #16
 8006a54:	486b      	ldr	r0, [pc, #428]	; (8006c04 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006a56:	f001 fe29 	bl	80086ac <HAL_GPIO_ReadPin>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8006a60:	4b69      	ldr	r3, [pc, #420]	; (8006c08 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8006a66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a6a:	2b0a      	cmp	r3, #10
 8006a6c:	f040 80c4 	bne.w	8006bf8 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8006a70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006a74:	643b      	str	r3, [r7, #64]	; 0x40
 8006a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a78:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8006a7a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8006a84:	2301      	movs	r3, #1
 8006a86:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006a8a:	e02b      	b.n	8006ae4 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8006a8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	3348      	adds	r3, #72	; 0x48
 8006a94:	443b      	add	r3, r7
 8006a96:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	dd08      	ble.n	8006ab4 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8006aa2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	3348      	adds	r3, #72	; 0x48
 8006aaa:	443b      	add	r3, r7
 8006aac:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ab2:	e012      	b.n	8006ada <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8006ab4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	3348      	adds	r3, #72	; 0x48
 8006abc:	443b      	add	r3, r7
 8006abe:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	da07      	bge.n	8006ada <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8006aca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	3348      	adds	r3, #72	; 0x48
 8006ad2:	443b      	add	r3, r7
 8006ad4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8006ada:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006ade:	3301      	adds	r3, #1
 8006ae0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006ae4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006ae8:	2b09      	cmp	r3, #9
 8006aea:	d9cf      	bls.n	8006a8c <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006af2:	e02f      	b.n	8006b54 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8006af4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006af8:	330a      	adds	r3, #10
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	3348      	adds	r3, #72	; 0x48
 8006afe:	443b      	add	r3, r7
 8006b00:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	dd09      	ble.n	8006b20 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8006b0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b10:	330a      	adds	r3, #10
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	3348      	adds	r3, #72	; 0x48
 8006b16:	443b      	add	r3, r7
 8006b18:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b1e:	e014      	b.n	8006b4a <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 8006b20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b24:	330a      	adds	r3, #10
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	3348      	adds	r3, #72	; 0x48
 8006b2a:	443b      	add	r3, r7
 8006b2c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b34:	4293      	cmp	r3, r2
 8006b36:	da08      	bge.n	8006b4a <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8006b38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b3c:	330a      	adds	r3, #10
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	3348      	adds	r3, #72	; 0x48
 8006b42:	443b      	add	r3, r7
 8006b44:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 8006b4a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b4e:	3301      	adds	r3, #1
 8006b50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006b54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b58:	2b09      	cmp	r3, #9
 8006b5a:	d9cb      	bls.n	8006af4 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8006b5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006b60:	461a      	mov	r2, r3
 8006b62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b66:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8006b68:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006b72:	4413      	add	r3, r2
 8006b74:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006b78:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8006b7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006b8a:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8006b8c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006b90:	4413      	add	r3, r2
 8006b92:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006b96:	441a      	add	r2, r3
 8006b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9e:	1ad3      	subs	r3, r2, r3
				>> 3;
 8006ba0:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8006ba8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006bb2:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8006bb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006bc4:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8006bc6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006bca:	4413      	add	r3, r2
 8006bcc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006bd6:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8006bd8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8006bdc:	4413      	add	r3, r2
 8006bde:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006be2:	441a      	add	r2, r3
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	1ad3      	subs	r3, r2, r3
				>> 3;
 8006bec:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	805a      	strh	r2, [r3, #2]

		return 1;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8006bf8:	2300      	movs	r3, #0

}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3748      	adds	r7, #72	; 0x48
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40011800 	.word	0x40011800
 8006c08:	20000bda 	.word	0x20000bda

08006c0c <XPT2046_Calculate_CalibrationFactor>:
#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(
		strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_Coordinate *pScreenSample,
		strType_XPT2046_Calibration *pCalibrationFactor) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	3308      	adds	r3, #8
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	1ad3      	subs	r3, r2, r3
			* (pScreenSample[1].y - pScreenSample[2].y))
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	3204      	adds	r2, #4
 8006c2e:	8852      	ldrh	r2, [r2, #2]
 8006c30:	4611      	mov	r1, r2
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	3208      	adds	r2, #8
 8006c36:	8852      	ldrh	r2, [r2, #2]
 8006c38:	1a8a      	subs	r2, r1, r2
 8006c3a:	fb03 f202 	mul.w	r2, r3, r2
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	3304      	adds	r3, #4
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	4619      	mov	r1, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	1acb      	subs	r3, r1, r3
					* (pScreenSample[0].y - pScreenSample[2].y));
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	8849      	ldrh	r1, [r1, #2]
 8006c52:	4608      	mov	r0, r1
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	3108      	adds	r1, #8
 8006c58:	8849      	ldrh	r1, [r1, #2]
 8006c5a:	1a41      	subs	r1, r0, r1
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8006c60:	1ad3      	subs	r3, r2, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7f9 fc3a 	bl	80004dc <__aeabi_i2d>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	f7f9 fefe 	bl	8000a80 <__aeabi_dcmpeq>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]
 8006c8e:	e145      	b.n	8006f1c <XPT2046_Calculate_CalibrationFactor+0x310>

	else {

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].x)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	3204      	adds	r2, #4
 8006ca2:	8852      	ldrh	r2, [r2, #2]
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	3208      	adds	r2, #8
 8006caa:	8852      	ldrh	r2, [r2, #2]
 8006cac:	1a8a      	subs	r2, r1, r2
 8006cae:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	8849      	ldrh	r1, [r1, #2]
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	3108      	adds	r1, #8
 8006ccc:	8849      	ldrh	r1, [r1, #2]
 8006cce:	1a41      	subs	r1, r0, r1
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8006cd4:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7f9 fc00 	bl	80004dc <__aeabi_i2d>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	3308      	adds	r3, #8
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x))
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	3204      	adds	r2, #4
 8006cf8:	8812      	ldrh	r2, [r2, #0]
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	3208      	adds	r2, #8
 8006d00:	8812      	ldrh	r2, [r2, #0]
 8006d02:	1a8a      	subs	r2, r1, r2
 8006d04:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3308      	adds	r3, #8
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	3104      	adds	r1, #4
 8006d1a:	8809      	ldrh	r1, [r1, #0]
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	3108      	adds	r1, #8
 8006d22:	8809      	ldrh	r1, [r1, #0]
 8006d24:	1a41      	subs	r1, r0, r1
 8006d26:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8006d2a:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7f9 fbd5 	bl	80004dc <__aeabi_i2d>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	3308      	adds	r3, #8
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3304      	adds	r3, #4
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].x)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	3304      	adds	r3, #4
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	4619      	mov	r1, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	fb01 f303 	mul.w	r3, r1, r3
 8006d60:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	8852      	ldrh	r2, [r2, #2]
 8006d66:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3308      	adds	r3, #8
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].x)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	4618      	mov	r0, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	fb00 f303 	mul.w	r3, r0, r3
 8006d8a:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	3104      	adds	r1, #4
 8006d90:	8849      	ldrh	r1, [r1, #2]
 8006d92:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8006d96:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].x)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3304      	adds	r3, #4
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	fb00 f303 	mul.w	r3, r0, r3
 8006db8:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	3108      	adds	r1, #8
 8006dbe:	8849      	ldrh	r1, [r1, #2]
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8006dc4:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7f9 fb88 	bl	80004dc <__aeabi_i2d>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	885b      	ldrh	r3, [r3, #2]
 8006dda:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].y)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3308      	adds	r3, #8
 8006de0:	885b      	ldrh	r3, [r3, #2]
 8006de2:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	3204      	adds	r2, #4
 8006de8:	8852      	ldrh	r2, [r2, #2]
 8006dea:	4611      	mov	r1, r2
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	3208      	adds	r2, #8
 8006df0:	8852      	ldrh	r2, [r2, #2]
 8006df2:	1a8a      	subs	r2, r1, r2
 8006df4:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	885b      	ldrh	r3, [r3, #2]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3308      	adds	r3, #8
 8006e04:	885b      	ldrh	r3, [r3, #2]
 8006e06:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	8849      	ldrh	r1, [r1, #2]
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	3108      	adds	r1, #8
 8006e12:	8849      	ldrh	r1, [r1, #2]
 8006e14:	1a41      	subs	r1, r0, r1
 8006e16:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8006e1a:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7f9 fb5d 	bl	80004dc <__aeabi_i2d>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	3308      	adds	r3, #8
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y))
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	3204      	adds	r2, #4
 8006e3e:	8852      	ldrh	r2, [r2, #2]
 8006e40:	4611      	mov	r1, r2
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	3208      	adds	r2, #8
 8006e46:	8852      	ldrh	r2, [r2, #2]
 8006e48:	1a8a      	subs	r2, r1, r2
 8006e4a:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	4619      	mov	r1, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3308      	adds	r3, #8
 8006e58:	885b      	ldrh	r3, [r3, #2]
 8006e5a:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	3104      	adds	r1, #4
 8006e60:	8809      	ldrh	r1, [r1, #0]
 8006e62:	4608      	mov	r0, r1
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	3108      	adds	r1, #8
 8006e68:	8809      	ldrh	r1, [r1, #0]
 8006e6a:	1a41      	subs	r1, r0, r1
 8006e6c:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8006e70:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7f9 fb32 	bl	80004dc <__aeabi_i2d>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3308      	adds	r3, #8
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].y)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	3304      	adds	r3, #4
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	885b      	ldrh	r3, [r3, #2]
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	8852      	ldrh	r2, [r2, #2]
 8006eac:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	885b      	ldrh	r3, [r3, #2]
 8006ebc:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].y)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	885b      	ldrh	r3, [r3, #2]
 8006ecc:	fb00 f303 	mul.w	r3, r0, r3
 8006ed0:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	3104      	adds	r1, #4
 8006ed6:	8849      	ldrh	r1, [r1, #2]
 8006ed8:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8006edc:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	885b      	ldrh	r3, [r3, #2]
 8006eea:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].y)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	fb00 f303 	mul.w	r3, r0, r3
 8006efe:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	3108      	adds	r1, #8
 8006f04:	8849      	ldrh	r1, [r1, #2]
 8006f06:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8006f0a:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7f9 fae5 	bl	80004dc <__aeabi_i2d>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}

	return ucRet;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]

}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void) {
 8006f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f2c:	b0a0      	sub	sp, #128	; 0x80
 8006f2e:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006f36:	2300      	movs	r3, #0
 8006f38:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8006f42:	2300      	movs	r3, #0
 8006f44:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char *pStr = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	66bb      	str	r3, [r7, #104]	; 0x68
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 8006f4c:	23f0      	movs	r3, #240	; 0xf0
 8006f4e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 8006f52:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006f56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	    usScreenWidth = LCD_Default_Max_Heigth;
	    usScreenHeigth = LCD_Default_Max_Width;
	
	  #endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 8006f5a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 8006f66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006f6a:	089b      	lsrs	r3, r3, #2
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8006f72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006f76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8006f7a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8006f7e:	4613      	mov	r3, r2
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	4413      	add	r3, r2
 8006f84:	109b      	asrs	r3, r3, #2
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8006f8c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006f90:	4613      	mov	r3, r2
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	4413      	add	r3, r2
 8006f96:	109b      	asrs	r3, r3, #2
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8006f9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fa2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8006fa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006faa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8006fae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006fb2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	LCD_GramScan(1);
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	f7fb fdfc 	bl	8002bb4 <LCD_GramScan>

	for (i = 0; i < 4; i++) {
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006fc2:	e047      	b.n	8007054 <XPT2046_Touch_Calibrate+0x12c>
		LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8006fc4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006fc8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006fcc:	2100      	movs	r1, #0
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f7fb fb76 	bl	80026c0 <LCD_Clear>

		pStr = "Touch Calibrate ......";
 8006fd4:	4bb6      	ldr	r3, [pc, #728]	; (80072b0 <XPT2046_Touch_Calibrate+0x388>)
 8006fd6:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color(
				(usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1,
 8006fd8:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8006fdc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006fde:	f7f9 f923 	bl	8000228 <strlen>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	3b07      	subs	r3, #7
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	1ae3      	subs	r3, r4, r3
 8006fea:	085b      	lsrs	r3, r3, #1
		LCD_DrawString_Color(
 8006fec:	b298      	uxth	r0, r3
 8006fee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	b299      	uxth	r1, r3
 8006ff6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007000:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007002:	f7fb fda1 	bl	8002b48 <LCD_DrawString_Color>
		/*
		sprintf(cStr, "%d", i + 1);
		LCD_DrawString_Color(usScreenWidth >> 1,
				(usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
		*/
		XPT2046_DelayUS(100000);
 8007006:	48ab      	ldr	r0, [pc, #684]	; (80072b4 <XPT2046_Touch_Calibrate+0x38c>)
 8007008:	f7ff fc22 	bl	8006850 <XPT2046_DelayUS>

		LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 800700c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	3378      	adds	r3, #120	; 0x78
 8007014:	443b      	add	r3, r7
 8007016:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800701a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	3378      	adds	r3, #120	; 0x78
 8007022:	443b      	add	r3, r7
 8007024:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f7fb fd6a 	bl	8002b04 <LCD_DrawCross>

		while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
 8007030:	bf00      	nop
 8007032:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007036:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff fcce 	bl	80069e0 <XPT2046_ReadAdc_Smooth_XY>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f3      	beq.n	8007032 <XPT2046_Touch_Calibrate+0x10a>
	for (i = 0; i < 4; i++) {
 800704a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800704e:	3301      	adds	r3, #1
 8007050:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007054:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007058:	2b03      	cmp	r3, #3
 800705a:	d9b3      	bls.n	8006fc4 <XPT2046_Touch_Calibrate+0x9c>
			;

	}

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample,
 800705c:	463a      	mov	r2, r7
 800705e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007062:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fdd0 	bl	8006c0c <XPT2046_Calculate_CalibrationFactor>
			&CalibrationFactor);

	if (CalibrationFactor.Divider == 0)
 800706c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	f7f9 fd02 	bl	8000a80 <__aeabi_dcmpeq>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	f040 8113 	bne.w	80072aa <XPT2046_Touch_Calibrate+0x382>
		goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8007084:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007088:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800708c:	4618      	mov	r0, r3
 800708e:	f7f9 fa25 	bl	80004dc <__aeabi_i2d>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4620      	mov	r0, r4
 8007098:	4629      	mov	r1, r5
 800709a:	f7f9 fa89 	bl	80005b0 <__aeabi_dmul>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4690      	mov	r8, r2
 80070a4:	4699      	mov	r9, r3
			+ (CalibrationFactor.Bn * strScreenSample[3].y)
 80070a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80070aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7f9 fa14 	bl	80004dc <__aeabi_i2d>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4620      	mov	r0, r4
 80070ba:	4629      	mov	r1, r5
 80070bc:	f7f9 fa78 	bl	80005b0 <__aeabi_dmul>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4640      	mov	r0, r8
 80070c6:	4649      	mov	r1, r9
 80070c8:	f7f9 f8bc 	bl	8000244 <__adddf3>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4610      	mov	r0, r2
 80070d2:	4619      	mov	r1, r3
			+ CalibrationFactor.Cn) / CalibrationFactor.Divider;
 80070d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070d8:	f7f9 f8b4 	bl	8000244 <__adddf3>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4610      	mov	r0, r2
 80070e2:	4619      	mov	r1, r3
 80070e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80070e8:	f7f9 fb8c 	bl	8000804 <__aeabi_ddiv>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 80070f0:	4610      	mov	r0, r2
 80070f2:	4619      	mov	r1, r3
 80070f4:	f7f9 fd1e 	bl	8000b34 <__aeabi_d2uiz>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 80070fe:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8007102:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007106:	4618      	mov	r0, r3
 8007108:	f7f9 f9e8 	bl	80004dc <__aeabi_i2d>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4620      	mov	r0, r4
 8007112:	4629      	mov	r1, r5
 8007114:	f7f9 fa4c 	bl	80005b0 <__aeabi_dmul>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4690      	mov	r8, r2
 800711e:	4699      	mov	r9, r3
			+ (CalibrationFactor.En * strScreenSample[3].y)
 8007120:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007124:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007128:	4618      	mov	r0, r3
 800712a:	f7f9 f9d7 	bl	80004dc <__aeabi_i2d>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4620      	mov	r0, r4
 8007134:	4629      	mov	r1, r5
 8007136:	f7f9 fa3b 	bl	80005b0 <__aeabi_dmul>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4640      	mov	r0, r8
 8007140:	4649      	mov	r1, r9
 8007142:	f7f9 f87f 	bl	8000244 <__adddf3>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4610      	mov	r0, r2
 800714c:	4619      	mov	r1, r3
			+ CalibrationFactor.Fn) / CalibrationFactor.Divider;
 800714e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007152:	f7f9 f877 	bl	8000244 <__adddf3>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4610      	mov	r0, r2
 800715c:	4619      	mov	r1, r3
 800715e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007162:	f7f9 fb4f 	bl	8000804 <__aeabi_ddiv>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 800716a:	4610      	mov	r0, r2
 800716c:	4619      	mov	r1, r3
 800716e:	f7f9 fce1 	bl	8000b34 <__aeabi_d2uiz>
 8007172:	4603      	mov	r3, r0
 8007174:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x =
			(usTest_x > strCrossCoordinate[3].x) ?
 8007178:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 800717c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8007180:	429a      	cmp	r2, r3
 8007182:	d906      	bls.n	8007192 <XPT2046_Touch_Calibrate+0x26a>
					(usTest_x - strCrossCoordinate[3].x) :
 8007184:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8007188:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	b29b      	uxth	r3, r3
 8007190:	e005      	b.n	800719e <XPT2046_Touch_Calibrate+0x276>
					(strCrossCoordinate[3].x - usTest_x);
 8007192:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	usGap_x =
 8007196:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	b29b      	uxth	r3, r3
 800719e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y =
			(usTest_y > strCrossCoordinate[3].y) ?
 80071a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 80071a6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d906      	bls.n	80071bc <XPT2046_Touch_Calibrate+0x294>
					(usTest_y - strCrossCoordinate[3].y) :
 80071ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 80071b2:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	e005      	b.n	80071c8 <XPT2046_Touch_Calibrate+0x2a0>
					(strCrossCoordinate[3].y - usTest_y);
 80071bc:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
	usGap_y =
 80071c0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((usGap_x > 10) || (usGap_y > 10))
 80071cc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80071d0:	2b0a      	cmp	r3, #10
 80071d2:	d877      	bhi.n	80072c4 <XPT2046_Touch_Calibrate+0x39c>
 80071d4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80071d8:	2b0a      	cmp	r3, #10
 80071da:	d873      	bhi.n	80072c4 <XPT2046_Touch_Calibrate+0x39c>
		goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 80071dc:	e9d7 0100 	ldrd	r0, r1, [r7]
			/ CalibrationFactor.Divider;
 80071e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071e4:	f7f9 fb0e 	bl	8000804 <__aeabi_ddiv>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 80071ec:	4932      	ldr	r1, [pc, #200]	; (80072b8 <XPT2046_Touch_Calibrate+0x390>)
 80071ee:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 80071f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
			/ CalibrationFactor.Divider;
 80071f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071fa:	f7f9 fb03 	bl	8000804 <__aeabi_ddiv>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8007202:	492d      	ldr	r1, [pc, #180]	; (80072b8 <XPT2046_Touch_Calibrate+0x390>)
 8007204:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8007208:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
			/ CalibrationFactor.Divider;
 800720c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007210:	f7f9 faf8 	bl	8000804 <__aeabi_ddiv>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8007218:	4927      	ldr	r1, [pc, #156]	; (80072b8 <XPT2046_Touch_Calibrate+0x390>)
 800721a:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 800721e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			/ CalibrationFactor.Divider;
 8007222:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007226:	f7f9 faed 	bl	8000804 <__aeabi_ddiv>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 800722e:	4922      	ldr	r1, [pc, #136]	; (80072b8 <XPT2046_Touch_Calibrate+0x390>)
 8007230:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8007234:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
			/ CalibrationFactor.Divider;
 8007238:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800723c:	f7f9 fae2 	bl	8000804 <__aeabi_ddiv>
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8007244:	491c      	ldr	r1, [pc, #112]	; (80072b8 <XPT2046_Touch_Calibrate+0x390>)
 8007246:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 800724a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
			/ CalibrationFactor.Divider;
 800724e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007252:	f7f9 fad7 	bl	8000804 <__aeabi_ddiv>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 800725a:	4917      	ldr	r1, [pc, #92]	; (80072b8 <XPT2046_Touch_Calibrate+0x390>)
 800725c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

#endif

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8007260:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007264:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8007268:	2100      	movs	r1, #0
 800726a:	2000      	movs	r0, #0
 800726c:	f7fb fa28 	bl	80026c0 <LCD_Clear>

	pStr = "Welcome !";
 8007270:	4b12      	ldr	r3, [pc, #72]	; (80072bc <XPT2046_Touch_Calibrate+0x394>)
 8007272:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8007274:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8007278:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800727a:	f7f8 ffd5 	bl	8000228 <strlen>
 800727e:	4603      	mov	r3, r0
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	1ae3      	subs	r3, r4, r3
 8007284:	085b      	lsrs	r3, r3, #1
 8007286:	b298      	uxth	r0, r3
 8007288:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	b299      	uxth	r1, r3
 8007290:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800729a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800729c:	f7fb fc54 	bl	8002b48 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(200000);
 80072a0:	4807      	ldr	r0, [pc, #28]	; (80072c0 <XPT2046_Touch_Calibrate+0x398>)
 80072a2:	f7ff fad5 	bl	8006850 <XPT2046_DelayUS>

	return 1;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e04b      	b.n	8007342 <XPT2046_Touch_Calibrate+0x41a>
		goto Failure;
 80072aa:	bf00      	nop
 80072ac:	e00b      	b.n	80072c6 <XPT2046_Touch_Calibrate+0x39e>
 80072ae:	bf00      	nop
 80072b0:	0800d1d0 	.word	0x0800d1d0
 80072b4:	000186a0 	.word	0x000186a0
 80072b8:	20000018 	.word	0x20000018
 80072bc:	0800d1e8 	.word	0x0800d1e8
 80072c0:	00030d40 	.word	0x00030d40
		goto Failure;
 80072c4:	bf00      	nop

	Failure:

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 80072c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072ca:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80072ce:	2100      	movs	r1, #0
 80072d0:	2000      	movs	r0, #0
 80072d2:	f7fb f9f5 	bl	80026c0 <LCD_Clear>

	pStr = "Calibrate fail";
 80072d6:	4b1d      	ldr	r3, [pc, #116]	; (800734c <XPT2046_Touch_Calibrate+0x424>)
 80072d8:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 80072da:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80072de:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80072e0:	f7f8 ffa2 	bl	8000228 <strlen>
 80072e4:	4603      	mov	r3, r0
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	1ae3      	subs	r3, r4, r3
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	b298      	uxth	r0, r3
 80072ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	b299      	uxth	r1, r3
 80072f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007300:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007302:	f7fb fc21 	bl	8002b48 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	pStr = "try again";
 8007306:	4b12      	ldr	r3, [pc, #72]	; (8007350 <XPT2046_Touch_Calibrate+0x428>)
 8007308:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 800730a:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800730e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007310:	f7f8 ff8a 	bl	8000228 <strlen>
 8007314:	4603      	mov	r3, r0
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	1ae3      	subs	r3, r4, r3
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	b298      	uxth	r0, r3
 800731e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	b29b      	uxth	r3, r3
 8007326:	3310      	adds	r3, #16
 8007328:	b299      	uxth	r1, r3
 800732a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007334:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007336:	f7fb fc07 	bl	8002b48 <LCD_DrawString_Color>
			(usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);
 800733a:	4806      	ldr	r0, [pc, #24]	; (8007354 <XPT2046_Touch_Calibrate+0x42c>)
 800733c:	f7ff fa88 	bl	8006850 <XPT2046_DelayUS>

	return 0;
 8007340:	2300      	movs	r3, #0

}
 8007342:	4618      	mov	r0, r3
 8007344:	3778      	adds	r7, #120	; 0x78
 8007346:	46bd      	mov	sp, r7
 8007348:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800734c:	0800d1f4 	.word	0x0800d1f4
 8007350:	0800d204 	.word	0x0800d204
 8007354:	000f4240 	.word	0x000f4240

08007358 <XPT2046_Get_TouchedPoint>:

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8007358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8007368:	f107 0308 	add.w	r3, r7, #8
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff fb37 	bl	80069e0 <XPT2046_ReadAdc_Smooth_XY>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d06e      	beq.n	8007456 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800737e:	893b      	ldrh	r3, [r7, #8]
 8007380:	4618      	mov	r0, r3
 8007382:	f7f9 f8ab 	bl	80004dc <__aeabi_i2d>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4620      	mov	r0, r4
 800738c:	4629      	mov	r1, r5
 800738e:	f7f9 f90f 	bl	80005b0 <__aeabi_dmul>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4690      	mov	r8, r2
 8007398:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80073a0:	897b      	ldrh	r3, [r7, #10]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7f9 f89a 	bl	80004dc <__aeabi_i2d>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	f7f9 f8fe 	bl	80005b0 <__aeabi_dmul>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4640      	mov	r0, r8
 80073ba:	4649      	mov	r1, r9
 80073bc:	f7f8 ff42 	bl	8000244 <__adddf3>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4610      	mov	r0, r2
 80073c6:	4619      	mov	r1, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80073ce:	f7f8 ff39 	bl	8000244 <__adddf3>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80073d6:	4610      	mov	r0, r2
 80073d8:	4619      	mov	r1, r3
 80073da:	f7f9 fbab 	bl	8000b34 <__aeabi_d2uiz>
 80073de:	4603      	mov	r3, r0
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80073ec:	893b      	ldrh	r3, [r7, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7f9 f874 	bl	80004dc <__aeabi_i2d>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4620      	mov	r0, r4
 80073fa:	4629      	mov	r1, r5
 80073fc:	f7f9 f8d8 	bl	80005b0 <__aeabi_dmul>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4690      	mov	r8, r2
 8007406:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800740e:	897b      	ldrh	r3, [r7, #10]
 8007410:	4618      	mov	r0, r3
 8007412:	f7f9 f863 	bl	80004dc <__aeabi_i2d>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4620      	mov	r0, r4
 800741c:	4629      	mov	r1, r5
 800741e:	f7f9 f8c7 	bl	80005b0 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4640      	mov	r0, r8
 8007428:	4649      	mov	r1, r9
 800742a:	f7f8 ff0b 	bl	8000244 <__adddf3>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4610      	mov	r0, r2
 8007434:	4619      	mov	r1, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800743c:	f7f8 ff02 	bl	8000244 <__adddf3>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8007444:	4610      	mov	r0, r2
 8007446:	4619      	mov	r1, r3
 8007448:	f7f9 fb74 	bl	8000b34 <__aeabi_d2uiz>
 800744c:	4603      	mov	r3, r0
 800744e:	b29a      	uxth	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	805a      	strh	r2, [r3, #2]
 8007454:	e001      	b.n	800745a <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 800745a:	7bfb      	ldrb	r3, [r7, #15]

}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007466 <XPT2046_Reset_TouchPoint>:

void XPT2046_Reset_TouchPoint(strType_XPT2046_Coordinate *pDisplayCoordinate){
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
	//Reset X and Y
	pDisplayCoordinate->x = 0;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	801a      	strh	r2, [r3, #0]
	pDisplayCoordinate->y = 0;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	805a      	strh	r2, [r3, #2]
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	bc80      	pop	{r7}
 8007482:	4770      	bx	lr

08007484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007484:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007486:	e003      	b.n	8007490 <LoopCopyDataInit>

08007488 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007488:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800748a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800748c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800748e:	3104      	adds	r1, #4

08007490 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007490:	480a      	ldr	r0, [pc, #40]	; (80074bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007494:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007496:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007498:	d3f6      	bcc.n	8007488 <CopyDataInit>
  ldr r2, =_sbss
 800749a:	4a0a      	ldr	r2, [pc, #40]	; (80074c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800749c:	e002      	b.n	80074a4 <LoopFillZerobss>

0800749e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800749e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80074a0:	f842 3b04 	str.w	r3, [r2], #4

080074a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80074a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80074a8:	d3f9      	bcc.n	800749e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80074aa:	f7ff f931 	bl	8006710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074ae:	f003 fe25 	bl	800b0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80074b2:	f7fb fcd1 	bl	8002e58 <main>
  bx lr
 80074b6:	4770      	bx	lr
  ldr r3, =_sidata
 80074b8:	08077510 	.word	0x08077510
  ldr r0, =_sdata
 80074bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80074c0:	200000b4 	.word	0x200000b4
  ldr r2, =_sbss
 80074c4:	200000b4 	.word	0x200000b4
  ldr r3, = _ebss
 80074c8:	20000bf0 	.word	0x20000bf0

080074cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80074cc:	e7fe      	b.n	80074cc <ADC1_2_IRQHandler>
	...

080074d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074d4:	4b08      	ldr	r3, [pc, #32]	; (80074f8 <HAL_Init+0x28>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a07      	ldr	r2, [pc, #28]	; (80074f8 <HAL_Init+0x28>)
 80074da:	f043 0310 	orr.w	r3, r3, #16
 80074de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074e0:	2003      	movs	r0, #3
 80074e2:	f000 fe01 	bl	80080e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074e6:	2000      	movs	r0, #0
 80074e8:	f000 f808 	bl	80074fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80074ec:	f7fe fde0 	bl	80060b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	40022000 	.word	0x40022000

080074fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007504:	4b12      	ldr	r3, [pc, #72]	; (8007550 <HAL_InitTick+0x54>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	4b12      	ldr	r3, [pc, #72]	; (8007554 <HAL_InitTick+0x58>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	4619      	mov	r1, r3
 800750e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007512:	fbb3 f3f1 	udiv	r3, r3, r1
 8007516:	fbb2 f3f3 	udiv	r3, r2, r3
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fe19 	bl	8008152 <HAL_SYSTICK_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e00e      	b.n	8007548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b0f      	cmp	r3, #15
 800752e:	d80a      	bhi.n	8007546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007530:	2200      	movs	r2, #0
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	f000 fde1 	bl	80080fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800753c:	4a06      	ldr	r2, [pc, #24]	; (8007558 <HAL_InitTick+0x5c>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	e000      	b.n	8007548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000014 	.word	0x20000014
 8007554:	2000004c 	.word	0x2000004c
 8007558:	20000048 	.word	0x20000048

0800755c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <HAL_IncTick+0x1c>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	4b05      	ldr	r3, [pc, #20]	; (800757c <HAL_IncTick+0x20>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4413      	add	r3, r2
 800756c:	4a03      	ldr	r2, [pc, #12]	; (800757c <HAL_IncTick+0x20>)
 800756e:	6013      	str	r3, [r2, #0]
}
 8007570:	bf00      	nop
 8007572:	46bd      	mov	sp, r7
 8007574:	bc80      	pop	{r7}
 8007576:	4770      	bx	lr
 8007578:	2000004c 	.word	0x2000004c
 800757c:	20000bdc 	.word	0x20000bdc

08007580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  return uwTick;
 8007584:	4b02      	ldr	r3, [pc, #8]	; (8007590 <HAL_GetTick+0x10>)
 8007586:	681b      	ldr	r3, [r3, #0]
}
 8007588:	4618      	mov	r0, r3
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr
 8007590:	20000bdc 	.word	0x20000bdc

08007594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800759c:	f7ff fff0 	bl	8007580 <HAL_GetTick>
 80075a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d005      	beq.n	80075ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80075ae:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <HAL_Delay+0x44>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80075ba:	bf00      	nop
 80075bc:	f7ff ffe0 	bl	8007580 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d8f7      	bhi.n	80075bc <HAL_Delay+0x28>
  {
  }
}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	2000004c 	.word	0x2000004c

080075dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e0ce      	b.n	800779c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	2b00      	cmp	r3, #0
 800760a:	d109      	bne.n	8007620 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fe fd7a 	bl	8006114 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fbc3 	bl	8007dac <ADC_ConversionStop_Disable>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	f003 0310 	and.w	r3, r3, #16
 8007632:	2b00      	cmp	r3, #0
 8007634:	f040 80a9 	bne.w	800778a <HAL_ADC_Init+0x1ae>
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f040 80a5 	bne.w	800778a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007648:	f023 0302 	bic.w	r3, r3, #2
 800764c:	f043 0202 	orr.w	r2, r3, #2
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4951      	ldr	r1, [pc, #324]	; (80077a4 <HAL_ADC_Init+0x1c8>)
 800765e:	428b      	cmp	r3, r1
 8007660:	d10a      	bne.n	8007678 <HAL_ADC_Init+0x9c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800766a:	d002      	beq.n	8007672 <HAL_ADC_Init+0x96>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	e004      	b.n	800767c <HAL_ADC_Init+0xa0>
 8007672:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007676:	e001      	b.n	800767c <HAL_ADC_Init+0xa0>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800767c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8007684:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	4313      	orrs	r3, r2
 800768a:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007694:	d003      	beq.n	800769e <HAL_ADC_Init+0xc2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d102      	bne.n	80076a4 <HAL_ADC_Init+0xc8>
 800769e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076a2:	e000      	b.n	80076a6 <HAL_ADC_Init+0xca>
 80076a4:	2300      	movs	r3, #0
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d119      	bne.n	80076e8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d109      	bne.n	80076d0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	035a      	lsls	r2, r3, #13
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	e00b      	b.n	80076e8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	f043 0220 	orr.w	r2, r3, #32
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	f043 0201 	orr.w	r2, r3, #1
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	4b29      	ldr	r3, [pc, #164]	; (80077a8 <HAL_ADC_Init+0x1cc>)
 8007704:	4013      	ands	r3, r2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	430b      	orrs	r3, r1
 800770e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007718:	d003      	beq.n	8007722 <HAL_ADC_Init+0x146>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d104      	bne.n	800772c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	3b01      	subs	r3, #1
 8007728:	051b      	lsls	r3, r3, #20
 800772a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	430a      	orrs	r2, r1
 800773e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	4b19      	ldr	r3, [pc, #100]	; (80077ac <HAL_ADC_Init+0x1d0>)
 8007748:	4013      	ands	r3, r2
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	429a      	cmp	r2, r3
 800774e:	d10b      	bne.n	8007768 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	f043 0201 	orr.w	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007766:	e018      	b.n	800779a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776c:	f023 0312 	bic.w	r3, r3, #18
 8007770:	f043 0210 	orr.w	r2, r3, #16
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	f043 0201 	orr.w	r2, r3, #1
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007788:	e007      	b.n	800779a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	f043 0210 	orr.w	r2, r3, #16
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40013c00 	.word	0x40013c00
 80077a8:	ffe1f7fd 	.word	0xffe1f7fd
 80077ac:	ff1f0efe 	.word	0xff1f0efe

080077b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d101      	bne.n	80077ca <HAL_ADC_Start+0x1a>
 80077c6:	2302      	movs	r3, #2
 80077c8:	e098      	b.n	80078fc <HAL_ADC_Start+0x14c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa98 	bl	8007d08 <ADC_Enable>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f040 8087 	bne.w	80078f2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ec:	f023 0301 	bic.w	r3, r3, #1
 80077f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a41      	ldr	r2, [pc, #260]	; (8007904 <HAL_ADC_Start+0x154>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d105      	bne.n	800780e <HAL_ADC_Start+0x5e>
 8007802:	4b41      	ldr	r3, [pc, #260]	; (8007908 <HAL_ADC_Start+0x158>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d115      	bne.n	800783a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007824:	2b00      	cmp	r3, #0
 8007826:	d026      	beq.n	8007876 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007830:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007838:	e01d      	b.n	8007876 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a2f      	ldr	r2, [pc, #188]	; (8007908 <HAL_ADC_Start+0x158>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d004      	beq.n	800785a <HAL_ADC_Start+0xaa>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2b      	ldr	r2, [pc, #172]	; (8007904 <HAL_ADC_Start+0x154>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d10d      	bne.n	8007876 <HAL_ADC_Start+0xc6>
 800785a:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <HAL_ADC_Start+0x158>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800786e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d006      	beq.n	8007890 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	f023 0206 	bic.w	r2, r3, #6
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	62da      	str	r2, [r3, #44]	; 0x2c
 800788e:	e002      	b.n	8007896 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f06f 0202 	mvn.w	r2, #2
 80078a6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80078b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80078b6:	d113      	bne.n	80078e0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80078bc:	4a11      	ldr	r2, [pc, #68]	; (8007904 <HAL_ADC_Start+0x154>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d105      	bne.n	80078ce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80078c2:	4b11      	ldr	r3, [pc, #68]	; (8007908 <HAL_ADC_Start+0x158>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d108      	bne.n	80078e0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80078dc:	609a      	str	r2, [r3, #8]
 80078de:	e00c      	b.n	80078fa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80078ee:	609a      	str	r2, [r3, #8]
 80078f0:	e003      	b.n	80078fa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40012800 	.word	0x40012800
 8007908:	40012400 	.word	0x40012400

0800790c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8007922:	f7ff fe2d 	bl	8007580 <HAL_GetTick>
 8007926:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	f043 0220 	orr.w	r2, r3, #32
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e0c8      	b.n	8007ae0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d12a      	bne.n	80079b2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007966:	2b00      	cmp	r3, #0
 8007968:	d123      	bne.n	80079b2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800796a:	e01a      	b.n	80079a2 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007972:	d016      	beq.n	80079a2 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_ADC_PollForConversion+0x7e>
 800797a:	f7ff fe01 	bl	8007580 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d20b      	bcs.n	80079a2 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	f043 0204 	orr.w	r2, r3, #4
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e09e      	b.n	8007ae0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0dd      	beq.n	800796c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80079b0:	e06c      	b.n	8007a8c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80079b2:	4b4d      	ldr	r3, [pc, #308]	; (8007ae8 <HAL_ADC_PollForConversion+0x1dc>)
 80079b4:	681c      	ldr	r4, [r3, #0]
 80079b6:	2002      	movs	r0, #2
 80079b8:	f001 fbac 	bl	8009114 <HAL_RCCEx_GetPeriphCLKFreq>
 80079bc:	4603      	mov	r3, r0
 80079be:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6919      	ldr	r1, [r3, #16]
 80079c8:	4b48      	ldr	r3, [pc, #288]	; (8007aec <HAL_ADC_PollForConversion+0x1e0>)
 80079ca:	400b      	ands	r3, r1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d118      	bne.n	8007a02 <HAL_ADC_PollForConversion+0xf6>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68d9      	ldr	r1, [r3, #12]
 80079d6:	4b46      	ldr	r3, [pc, #280]	; (8007af0 <HAL_ADC_PollForConversion+0x1e4>)
 80079d8:	400b      	ands	r3, r1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d111      	bne.n	8007a02 <HAL_ADC_PollForConversion+0xf6>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6919      	ldr	r1, [r3, #16]
 80079e4:	4b43      	ldr	r3, [pc, #268]	; (8007af4 <HAL_ADC_PollForConversion+0x1e8>)
 80079e6:	400b      	ands	r3, r1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d108      	bne.n	80079fe <HAL_ADC_PollForConversion+0xf2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68d9      	ldr	r1, [r3, #12]
 80079f2:	4b41      	ldr	r3, [pc, #260]	; (8007af8 <HAL_ADC_PollForConversion+0x1ec>)
 80079f4:	400b      	ands	r3, r1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_ADC_PollForConversion+0xf2>
 80079fa:	2314      	movs	r3, #20
 80079fc:	e020      	b.n	8007a40 <HAL_ADC_PollForConversion+0x134>
 80079fe:	2329      	movs	r3, #41	; 0x29
 8007a00:	e01e      	b.n	8007a40 <HAL_ADC_PollForConversion+0x134>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6919      	ldr	r1, [r3, #16]
 8007a08:	4b3a      	ldr	r3, [pc, #232]	; (8007af4 <HAL_ADC_PollForConversion+0x1e8>)
 8007a0a:	400b      	ands	r3, r1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <HAL_ADC_PollForConversion+0x112>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68d9      	ldr	r1, [r3, #12]
 8007a16:	4b38      	ldr	r3, [pc, #224]	; (8007af8 <HAL_ADC_PollForConversion+0x1ec>)
 8007a18:	400b      	ands	r3, r1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <HAL_ADC_PollForConversion+0x12e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6919      	ldr	r1, [r3, #16]
 8007a24:	4b35      	ldr	r3, [pc, #212]	; (8007afc <HAL_ADC_PollForConversion+0x1f0>)
 8007a26:	400b      	ands	r3, r1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d108      	bne.n	8007a3e <HAL_ADC_PollForConversion+0x132>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68d9      	ldr	r1, [r3, #12]
 8007a32:	4b32      	ldr	r3, [pc, #200]	; (8007afc <HAL_ADC_PollForConversion+0x1f0>)
 8007a34:	400b      	ands	r3, r1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_ADC_PollForConversion+0x132>
 8007a3a:	2354      	movs	r3, #84	; 0x54
 8007a3c:	e000      	b.n	8007a40 <HAL_ADC_PollForConversion+0x134>
 8007a3e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007a46:	e01d      	b.n	8007a84 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4e:	d016      	beq.n	8007a7e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d007      	beq.n	8007a66 <HAL_ADC_PollForConversion+0x15a>
 8007a56:	f7ff fd93 	bl	8007580 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d20b      	bcs.n	8007a7e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e030      	b.n	8007ae0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d8dd      	bhi.n	8007a48 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0212 	mvn.w	r2, #18
 8007a94:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007aac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007ab0:	d115      	bne.n	8007ade <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d111      	bne.n	8007ade <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	f043 0201 	orr.w	r2, r3, #1
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	371c      	adds	r7, #28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd90      	pop	{r4, r7, pc}
 8007ae8:	20000014 	.word	0x20000014
 8007aec:	24924924 	.word	0x24924924
 8007af0:	00924924 	.word	0x00924924
 8007af4:	12492492 	.word	0x12492492
 8007af8:	00492492 	.word	0x00492492
 8007afc:	00249249 	.word	0x00249249

08007b00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr

08007b18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_ADC_ConfigChannel+0x20>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e0dc      	b.n	8007cf2 <HAL_ADC_ConfigChannel+0x1da>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2b06      	cmp	r3, #6
 8007b46:	d81c      	bhi.n	8007b82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	3b05      	subs	r3, #5
 8007b5a:	221f      	movs	r2, #31
 8007b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b60:	43db      	mvns	r3, r3
 8007b62:	4019      	ands	r1, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	3b05      	subs	r3, #5
 8007b74:	fa00 f203 	lsl.w	r2, r0, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	635a      	str	r2, [r3, #52]	; 0x34
 8007b80:	e03c      	b.n	8007bfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b0c      	cmp	r3, #12
 8007b88:	d81c      	bhi.n	8007bc4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	3b23      	subs	r3, #35	; 0x23
 8007b9c:	221f      	movs	r2, #31
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	4019      	ands	r1, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3b23      	subs	r3, #35	; 0x23
 8007bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8007bc2:	e01b      	b.n	8007bfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3b41      	subs	r3, #65	; 0x41
 8007bd6:	221f      	movs	r2, #31
 8007bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	4019      	ands	r1, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	3b41      	subs	r3, #65	; 0x41
 8007bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	d91c      	bls.n	8007c3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68d9      	ldr	r1, [r3, #12]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	4413      	add	r3, r2
 8007c14:	3b1e      	subs	r3, #30
 8007c16:	2207      	movs	r2, #7
 8007c18:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1c:	43db      	mvns	r3, r3
 8007c1e:	4019      	ands	r1, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	6898      	ldr	r0, [r3, #8]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	4413      	add	r3, r2
 8007c2e:	3b1e      	subs	r3, #30
 8007c30:	fa00 f203 	lsl.w	r2, r0, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	60da      	str	r2, [r3, #12]
 8007c3c:	e019      	b.n	8007c72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6919      	ldr	r1, [r3, #16]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	4413      	add	r3, r2
 8007c4e:	2207      	movs	r2, #7
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	43db      	mvns	r3, r3
 8007c56:	4019      	ands	r1, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6898      	ldr	r0, [r3, #8]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	4613      	mov	r3, r2
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	4413      	add	r3, r2
 8007c66:	fa00 f203 	lsl.w	r2, r0, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d003      	beq.n	8007c82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007c7e:	2b11      	cmp	r3, #17
 8007c80:	d132      	bne.n	8007ce8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a1d      	ldr	r2, [pc, #116]	; (8007cfc <HAL_ADC_ConfigChannel+0x1e4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d125      	bne.n	8007cd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d126      	bne.n	8007ce8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007ca8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b10      	cmp	r3, #16
 8007cb0:	d11a      	bne.n	8007ce8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007cb2:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <HAL_ADC_ConfigChannel+0x1e8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <HAL_ADC_ConfigChannel+0x1ec>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	0c9a      	lsrs	r2, r3, #18
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007cc8:	e002      	b.n	8007cd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f9      	bne.n	8007cca <HAL_ADC_ConfigChannel+0x1b2>
 8007cd6:	e007      	b.n	8007ce8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f043 0220 	orr.w	r2, r3, #32
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr
 8007cfc:	40012400 	.word	0x40012400
 8007d00:	20000014 	.word	0x20000014
 8007d04:	431bde83 	.word	0x431bde83

08007d08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d039      	beq.n	8007d9a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0201 	orr.w	r2, r2, #1
 8007d34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007d36:	4b1b      	ldr	r3, [pc, #108]	; (8007da4 <ADC_Enable+0x9c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1b      	ldr	r2, [pc, #108]	; (8007da8 <ADC_Enable+0xa0>)
 8007d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d40:	0c9b      	lsrs	r3, r3, #18
 8007d42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007d44:	e002      	b.n	8007d4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f9      	bne.n	8007d46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007d52:	f7ff fc15 	bl	8007580 <HAL_GetTick>
 8007d56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007d58:	e018      	b.n	8007d8c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007d5a:	f7ff fc11 	bl	8007580 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d911      	bls.n	8007d8c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	f043 0210 	orr.w	r2, r3, #16
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	f043 0201 	orr.w	r2, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e007      	b.n	8007d9c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d1df      	bne.n	8007d5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000014 	.word	0x20000014
 8007da8:	431bde83 	.word	0x431bde83

08007dac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d127      	bne.n	8007e16 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0201 	bic.w	r2, r2, #1
 8007dd4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007dd6:	f7ff fbd3 	bl	8007580 <HAL_GetTick>
 8007dda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007ddc:	e014      	b.n	8007e08 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007dde:	f7ff fbcf 	bl	8007580 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d90d      	bls.n	8007e08 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	f043 0210 	orr.w	r2, r3, #16
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	f043 0201 	orr.w	r2, r3, #1
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e007      	b.n	8007e18 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d0e3      	beq.n	8007dde <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8007e20:	b590      	push	{r4, r7, lr}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d101      	bne.n	8007e3e <HAL_ADCEx_Calibration_Start+0x1e>
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	e086      	b.n	8007f4c <HAL_ADCEx_Calibration_Start+0x12c>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff ffb0 	bl	8007dac <ADC_ConversionStop_Disable>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d175      	bne.n	8007f42 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007e5e:	f023 0302 	bic.w	r3, r3, #2
 8007e62:	f043 0202 	orr.w	r2, r3, #2
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007e6a:	4b3a      	ldr	r3, [pc, #232]	; (8007f54 <HAL_ADCEx_Calibration_Start+0x134>)
 8007e6c:	681c      	ldr	r4, [r3, #0]
 8007e6e:	2002      	movs	r0, #2
 8007e70:	f001 f950 	bl	8009114 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e74:	4603      	mov	r3, r0
 8007e76:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8007e7a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8007e7c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8007e7e:	e002      	b.n	8007e86 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f9      	bne.n	8007e80 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff ff3b 	bl	8007d08 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0208 	orr.w	r2, r2, #8
 8007ea0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007ea2:	f7ff fb6d 	bl	8007580 <HAL_GetTick>
 8007ea6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007ea8:	e014      	b.n	8007ed4 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007eaa:	f7ff fb69 	bl	8007580 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b0a      	cmp	r3, #10
 8007eb6:	d90d      	bls.n	8007ed4 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	f023 0312 	bic.w	r3, r3, #18
 8007ec0:	f043 0210 	orr.w	r2, r3, #16
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e03b      	b.n	8007f4c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 0308 	and.w	r3, r3, #8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e3      	bne.n	8007eaa <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f042 0204 	orr.w	r2, r2, #4
 8007ef0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007ef2:	f7ff fb45 	bl	8007580 <HAL_GetTick>
 8007ef6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007ef8:	e014      	b.n	8007f24 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007efa:	f7ff fb41 	bl	8007580 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b0a      	cmp	r3, #10
 8007f06:	d90d      	bls.n	8007f24 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	f023 0312 	bic.w	r3, r3, #18
 8007f10:	f043 0210 	orr.w	r2, r3, #16
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e013      	b.n	8007f4c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0304 	and.w	r3, r3, #4
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e3      	bne.n	8007efa <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	f023 0303 	bic.w	r3, r3, #3
 8007f3a:	f043 0201 	orr.w	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd90      	pop	{r4, r7, pc}
 8007f54:	20000014 	.word	0x20000014

08007f58 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f68:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <NVIC_SetPriorityGrouping+0x44>)
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f74:	4013      	ands	r3, r2
 8007f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f8a:	4a04      	ldr	r2, [pc, #16]	; (8007f9c <NVIC_SetPriorityGrouping+0x44>)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	60d3      	str	r3, [r2, #12]
}
 8007f90:	bf00      	nop
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	e000ed00 	.word	0xe000ed00

08007fa0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fa4:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <NVIC_GetPriorityGrouping+0x18>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	0a1b      	lsrs	r3, r3, #8
 8007faa:	f003 0307 	and.w	r3, r3, #7
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	e000ed00 	.word	0xe000ed00

08007fbc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	f003 021f 	and.w	r2, r3, #31
 8007fcc:	4906      	ldr	r1, [pc, #24]	; (8007fe8 <NVIC_EnableIRQ+0x2c>)
 8007fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8007fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr
 8007fe8:	e000e100 	.word	0xe000e100

08007fec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	6039      	str	r1, [r7, #0]
 8007ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8007ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	da0b      	bge.n	8008018 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	b2da      	uxtb	r2, r3
 8008004:	490c      	ldr	r1, [pc, #48]	; (8008038 <NVIC_SetPriority+0x4c>)
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	3b04      	subs	r3, #4
 800800e:	0112      	lsls	r2, r2, #4
 8008010:	b2d2      	uxtb	r2, r2
 8008012:	440b      	add	r3, r1
 8008014:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008016:	e009      	b.n	800802c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	b2da      	uxtb	r2, r3
 800801c:	4907      	ldr	r1, [pc, #28]	; (800803c <NVIC_SetPriority+0x50>)
 800801e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008022:	0112      	lsls	r2, r2, #4
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	440b      	add	r3, r1
 8008028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	e000ed00 	.word	0xe000ed00
 800803c:	e000e100 	.word	0xe000e100

08008040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008040:	b480      	push	{r7}
 8008042:	b089      	sub	sp, #36	; 0x24
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	f1c3 0307 	rsb	r3, r3, #7
 800805a:	2b04      	cmp	r3, #4
 800805c:	bf28      	it	cs
 800805e:	2304      	movcs	r3, #4
 8008060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	3304      	adds	r3, #4
 8008066:	2b06      	cmp	r3, #6
 8008068:	d902      	bls.n	8008070 <NVIC_EncodePriority+0x30>
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	3b03      	subs	r3, #3
 800806e:	e000      	b.n	8008072 <NVIC_EncodePriority+0x32>
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	fa02 f303 	lsl.w	r3, r2, r3
 800807e:	43da      	mvns	r2, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	401a      	ands	r2, r3
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008088:	f04f 31ff 	mov.w	r1, #4294967295
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	fa01 f303 	lsl.w	r3, r1, r3
 8008092:	43d9      	mvns	r1, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008098:	4313      	orrs	r3, r2
         );
}
 800809a:	4618      	mov	r0, r3
 800809c:	3724      	adds	r7, #36	; 0x24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bc80      	pop	{r7}
 80080a2:	4770      	bx	lr

080080a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080b4:	d301      	bcc.n	80080ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080b6:	2301      	movs	r3, #1
 80080b8:	e00f      	b.n	80080da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080ba:	4a0a      	ldr	r2, [pc, #40]	; (80080e4 <SysTick_Config+0x40>)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3b01      	subs	r3, #1
 80080c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080c2:	210f      	movs	r1, #15
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	f7ff ff90 	bl	8007fec <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080cc:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <SysTick_Config+0x40>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080d2:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <SysTick_Config+0x40>)
 80080d4:	2207      	movs	r2, #7
 80080d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	e000e010 	.word	0xe000e010

080080e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff ff31 	bl	8007f58 <NVIC_SetPriorityGrouping>
}
 80080f6:	bf00      	nop
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080fe:	b580      	push	{r7, lr}
 8008100:	b086      	sub	sp, #24
 8008102:	af00      	add	r7, sp, #0
 8008104:	4603      	mov	r3, r0
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008110:	f7ff ff46 	bl	8007fa0 <NVIC_GetPriorityGrouping>
 8008114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	68b9      	ldr	r1, [r7, #8]
 800811a:	6978      	ldr	r0, [r7, #20]
 800811c:	f7ff ff90 	bl	8008040 <NVIC_EncodePriority>
 8008120:	4602      	mov	r2, r0
 8008122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008126:	4611      	mov	r1, r2
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff ff5f 	bl	8007fec <NVIC_SetPriority>
}
 800812e:	bf00      	nop
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	4603      	mov	r3, r0
 800813e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff ff39 	bl	8007fbc <NVIC_EnableIRQ>
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff ffa2 	bl	80080a4 <SysTick_Config>
 8008160:	4603      	mov	r3, r0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800817e:	2b02      	cmp	r3, #2
 8008180:	d005      	beq.n	800818e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2204      	movs	r2, #4
 8008186:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
 800818c:	e0d6      	b.n	800833c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 020e 	bic.w	r2, r2, #14
 800819c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	4b64      	ldr	r3, [pc, #400]	; (8008348 <HAL_DMA_Abort_IT+0x1dc>)
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d958      	bls.n	800826c <HAL_DMA_Abort_IT+0x100>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a63      	ldr	r2, [pc, #396]	; (800834c <HAL_DMA_Abort_IT+0x1e0>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d04f      	beq.n	8008264 <HAL_DMA_Abort_IT+0xf8>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a61      	ldr	r2, [pc, #388]	; (8008350 <HAL_DMA_Abort_IT+0x1e4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d048      	beq.n	8008260 <HAL_DMA_Abort_IT+0xf4>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a60      	ldr	r2, [pc, #384]	; (8008354 <HAL_DMA_Abort_IT+0x1e8>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d040      	beq.n	800825a <HAL_DMA_Abort_IT+0xee>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a5e      	ldr	r2, [pc, #376]	; (8008358 <HAL_DMA_Abort_IT+0x1ec>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d038      	beq.n	8008254 <HAL_DMA_Abort_IT+0xe8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a5d      	ldr	r2, [pc, #372]	; (800835c <HAL_DMA_Abort_IT+0x1f0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d030      	beq.n	800824e <HAL_DMA_Abort_IT+0xe2>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a5b      	ldr	r2, [pc, #364]	; (8008360 <HAL_DMA_Abort_IT+0x1f4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d028      	beq.n	8008248 <HAL_DMA_Abort_IT+0xdc>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a53      	ldr	r2, [pc, #332]	; (8008348 <HAL_DMA_Abort_IT+0x1dc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d020      	beq.n	8008242 <HAL_DMA_Abort_IT+0xd6>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a57      	ldr	r2, [pc, #348]	; (8008364 <HAL_DMA_Abort_IT+0x1f8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d019      	beq.n	800823e <HAL_DMA_Abort_IT+0xd2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a56      	ldr	r2, [pc, #344]	; (8008368 <HAL_DMA_Abort_IT+0x1fc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d012      	beq.n	800823a <HAL_DMA_Abort_IT+0xce>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a54      	ldr	r2, [pc, #336]	; (800836c <HAL_DMA_Abort_IT+0x200>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00a      	beq.n	8008234 <HAL_DMA_Abort_IT+0xc8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a53      	ldr	r2, [pc, #332]	; (8008370 <HAL_DMA_Abort_IT+0x204>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d102      	bne.n	800822e <HAL_DMA_Abort_IT+0xc2>
 8008228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800822c:	e01b      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 800822e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008232:	e018      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 8008234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008238:	e015      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 800823a:	2310      	movs	r3, #16
 800823c:	e013      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 800823e:	2301      	movs	r3, #1
 8008240:	e011      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 8008242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008246:	e00e      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 8008248:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800824c:	e00b      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 800824e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008252:	e008      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 8008254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008258:	e005      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 800825a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800825e:	e002      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 8008260:	2310      	movs	r3, #16
 8008262:	e000      	b.n	8008266 <HAL_DMA_Abort_IT+0xfa>
 8008264:	2301      	movs	r3, #1
 8008266:	4a43      	ldr	r2, [pc, #268]	; (8008374 <HAL_DMA_Abort_IT+0x208>)
 8008268:	6053      	str	r3, [r2, #4]
 800826a:	e057      	b.n	800831c <HAL_DMA_Abort_IT+0x1b0>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a36      	ldr	r2, [pc, #216]	; (800834c <HAL_DMA_Abort_IT+0x1e0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d04f      	beq.n	8008316 <HAL_DMA_Abort_IT+0x1aa>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a35      	ldr	r2, [pc, #212]	; (8008350 <HAL_DMA_Abort_IT+0x1e4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d048      	beq.n	8008312 <HAL_DMA_Abort_IT+0x1a6>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a33      	ldr	r2, [pc, #204]	; (8008354 <HAL_DMA_Abort_IT+0x1e8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d040      	beq.n	800830c <HAL_DMA_Abort_IT+0x1a0>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a32      	ldr	r2, [pc, #200]	; (8008358 <HAL_DMA_Abort_IT+0x1ec>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d038      	beq.n	8008306 <HAL_DMA_Abort_IT+0x19a>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a30      	ldr	r2, [pc, #192]	; (800835c <HAL_DMA_Abort_IT+0x1f0>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d030      	beq.n	8008300 <HAL_DMA_Abort_IT+0x194>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2f      	ldr	r2, [pc, #188]	; (8008360 <HAL_DMA_Abort_IT+0x1f4>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d028      	beq.n	80082fa <HAL_DMA_Abort_IT+0x18e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a26      	ldr	r2, [pc, #152]	; (8008348 <HAL_DMA_Abort_IT+0x1dc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d020      	beq.n	80082f4 <HAL_DMA_Abort_IT+0x188>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a2b      	ldr	r2, [pc, #172]	; (8008364 <HAL_DMA_Abort_IT+0x1f8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d019      	beq.n	80082f0 <HAL_DMA_Abort_IT+0x184>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a29      	ldr	r2, [pc, #164]	; (8008368 <HAL_DMA_Abort_IT+0x1fc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d012      	beq.n	80082ec <HAL_DMA_Abort_IT+0x180>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a28      	ldr	r2, [pc, #160]	; (800836c <HAL_DMA_Abort_IT+0x200>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00a      	beq.n	80082e6 <HAL_DMA_Abort_IT+0x17a>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a26      	ldr	r2, [pc, #152]	; (8008370 <HAL_DMA_Abort_IT+0x204>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d102      	bne.n	80082e0 <HAL_DMA_Abort_IT+0x174>
 80082da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082de:	e01b      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 80082e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082e4:	e018      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 80082e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082ea:	e015      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 80082ec:	2310      	movs	r3, #16
 80082ee:	e013      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e011      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 80082f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082f8:	e00e      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 80082fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80082fe:	e00b      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 8008300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008304:	e008      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 8008306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800830a:	e005      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 800830c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008310:	e002      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 8008312:	2310      	movs	r3, #16
 8008314:	e000      	b.n	8008318 <HAL_DMA_Abort_IT+0x1ac>
 8008316:	2301      	movs	r3, #1
 8008318:	4a17      	ldr	r2, [pc, #92]	; (8008378 <HAL_DMA_Abort_IT+0x20c>)
 800831a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
    } 
  }
  return status;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40020080 	.word	0x40020080
 800834c:	40020008 	.word	0x40020008
 8008350:	4002001c 	.word	0x4002001c
 8008354:	40020030 	.word	0x40020030
 8008358:	40020044 	.word	0x40020044
 800835c:	40020058 	.word	0x40020058
 8008360:	4002006c 	.word	0x4002006c
 8008364:	40020408 	.word	0x40020408
 8008368:	4002041c 	.word	0x4002041c
 800836c:	40020430 	.word	0x40020430
 8008370:	40020444 	.word	0x40020444
 8008374:	40020400 	.word	0x40020400
 8008378:	40020000 	.word	0x40020000

0800837c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800837c:	b480      	push	{r7}
 800837e:	b08b      	sub	sp, #44	; 0x2c
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800838a:	2300      	movs	r3, #0
 800838c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8008392:	2300      	movs	r3, #0
 8008394:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8008396:	2300      	movs	r3, #0
 8008398:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800839a:	2300      	movs	r3, #0
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	e179      	b.n	8008694 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80083a0:	2201      	movs	r2, #1
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69fa      	ldr	r2, [r7, #28]
 80083b0:	4013      	ands	r3, r2
 80083b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	f040 8168 	bne.w	800868e <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	4a96      	ldr	r2, [pc, #600]	; (800861c <HAL_GPIO_Init+0x2a0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d05e      	beq.n	8008486 <HAL_GPIO_Init+0x10a>
 80083c8:	4a94      	ldr	r2, [pc, #592]	; (800861c <HAL_GPIO_Init+0x2a0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d875      	bhi.n	80084ba <HAL_GPIO_Init+0x13e>
 80083ce:	4a94      	ldr	r2, [pc, #592]	; (8008620 <HAL_GPIO_Init+0x2a4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d058      	beq.n	8008486 <HAL_GPIO_Init+0x10a>
 80083d4:	4a92      	ldr	r2, [pc, #584]	; (8008620 <HAL_GPIO_Init+0x2a4>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d86f      	bhi.n	80084ba <HAL_GPIO_Init+0x13e>
 80083da:	4a92      	ldr	r2, [pc, #584]	; (8008624 <HAL_GPIO_Init+0x2a8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d052      	beq.n	8008486 <HAL_GPIO_Init+0x10a>
 80083e0:	4a90      	ldr	r2, [pc, #576]	; (8008624 <HAL_GPIO_Init+0x2a8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d869      	bhi.n	80084ba <HAL_GPIO_Init+0x13e>
 80083e6:	4a90      	ldr	r2, [pc, #576]	; (8008628 <HAL_GPIO_Init+0x2ac>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d04c      	beq.n	8008486 <HAL_GPIO_Init+0x10a>
 80083ec:	4a8e      	ldr	r2, [pc, #568]	; (8008628 <HAL_GPIO_Init+0x2ac>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d863      	bhi.n	80084ba <HAL_GPIO_Init+0x13e>
 80083f2:	4a8e      	ldr	r2, [pc, #568]	; (800862c <HAL_GPIO_Init+0x2b0>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d046      	beq.n	8008486 <HAL_GPIO_Init+0x10a>
 80083f8:	4a8c      	ldr	r2, [pc, #560]	; (800862c <HAL_GPIO_Init+0x2b0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d85d      	bhi.n	80084ba <HAL_GPIO_Init+0x13e>
 80083fe:	2b12      	cmp	r3, #18
 8008400:	d82a      	bhi.n	8008458 <HAL_GPIO_Init+0xdc>
 8008402:	2b12      	cmp	r3, #18
 8008404:	d859      	bhi.n	80084ba <HAL_GPIO_Init+0x13e>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <HAL_GPIO_Init+0x90>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	08008487 	.word	0x08008487
 8008410:	08008461 	.word	0x08008461
 8008414:	08008473 	.word	0x08008473
 8008418:	080084b5 	.word	0x080084b5
 800841c:	080084bb 	.word	0x080084bb
 8008420:	080084bb 	.word	0x080084bb
 8008424:	080084bb 	.word	0x080084bb
 8008428:	080084bb 	.word	0x080084bb
 800842c:	080084bb 	.word	0x080084bb
 8008430:	080084bb 	.word	0x080084bb
 8008434:	080084bb 	.word	0x080084bb
 8008438:	080084bb 	.word	0x080084bb
 800843c:	080084bb 	.word	0x080084bb
 8008440:	080084bb 	.word	0x080084bb
 8008444:	080084bb 	.word	0x080084bb
 8008448:	080084bb 	.word	0x080084bb
 800844c:	080084bb 	.word	0x080084bb
 8008450:	08008469 	.word	0x08008469
 8008454:	0800847d 	.word	0x0800847d
 8008458:	4a75      	ldr	r2, [pc, #468]	; (8008630 <HAL_GPIO_Init+0x2b4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800845e:	e02c      	b.n	80084ba <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	623b      	str	r3, [r7, #32]
          break;
 8008466:	e029      	b.n	80084bc <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	3304      	adds	r3, #4
 800846e:	623b      	str	r3, [r7, #32]
          break;
 8008470:	e024      	b.n	80084bc <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	3308      	adds	r3, #8
 8008478:	623b      	str	r3, [r7, #32]
          break;
 800847a:	e01f      	b.n	80084bc <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	330c      	adds	r3, #12
 8008482:	623b      	str	r3, [r7, #32]
          break;
 8008484:	e01a      	b.n	80084bc <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800848e:	2304      	movs	r3, #4
 8008490:	623b      	str	r3, [r7, #32]
          break;
 8008492:	e013      	b.n	80084bc <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d105      	bne.n	80084a8 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800849c:	2308      	movs	r3, #8
 800849e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	611a      	str	r2, [r3, #16]
          break;
 80084a6:	e009      	b.n	80084bc <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80084a8:	2308      	movs	r3, #8
 80084aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	69fa      	ldr	r2, [r7, #28]
 80084b0:	615a      	str	r2, [r3, #20]
          break;
 80084b2:	e003      	b.n	80084bc <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80084b4:	2300      	movs	r3, #0
 80084b6:	623b      	str	r3, [r7, #32]
          break;
 80084b8:	e000      	b.n	80084bc <HAL_GPIO_Init+0x140>
          break;
 80084ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	2bff      	cmp	r3, #255	; 0xff
 80084c0:	d801      	bhi.n	80084c6 <HAL_GPIO_Init+0x14a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	e001      	b.n	80084ca <HAL_GPIO_Init+0x14e>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3304      	adds	r3, #4
 80084ca:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2bff      	cmp	r3, #255	; 0xff
 80084d0:	d802      	bhi.n	80084d8 <HAL_GPIO_Init+0x15c>
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	e002      	b.n	80084de <HAL_GPIO_Init+0x162>
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	3b08      	subs	r3, #8
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	210f      	movs	r1, #15
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	fa01 f303 	lsl.w	r3, r1, r3
 80084ec:	43db      	mvns	r3, r3
 80084ee:	401a      	ands	r2, r3
 80084f0:	6a39      	ldr	r1, [r7, #32]
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	fa01 f303 	lsl.w	r3, r1, r3
 80084f8:	431a      	orrs	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80c1 	beq.w	800868e <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800850c:	4b49      	ldr	r3, [pc, #292]	; (8008634 <HAL_GPIO_Init+0x2b8>)
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	4a48      	ldr	r2, [pc, #288]	; (8008634 <HAL_GPIO_Init+0x2b8>)
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	6193      	str	r3, [r2, #24]
 8008518:	4b46      	ldr	r3, [pc, #280]	; (8008634 <HAL_GPIO_Init+0x2b8>)
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	60bb      	str	r3, [r7, #8]
 8008522:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8008524:	4a44      	ldr	r2, [pc, #272]	; (8008638 <HAL_GPIO_Init+0x2bc>)
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	089b      	lsrs	r3, r3, #2
 800852a:	3302      	adds	r3, #2
 800852c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008530:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	f003 0303 	and.w	r3, r3, #3
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	220f      	movs	r2, #15
 800853c:	fa02 f303 	lsl.w	r3, r2, r3
 8008540:	43db      	mvns	r3, r3
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4013      	ands	r3, r2
 8008546:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a3c      	ldr	r2, [pc, #240]	; (800863c <HAL_GPIO_Init+0x2c0>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d01f      	beq.n	8008590 <HAL_GPIO_Init+0x214>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a3b      	ldr	r2, [pc, #236]	; (8008640 <HAL_GPIO_Init+0x2c4>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d019      	beq.n	800858c <HAL_GPIO_Init+0x210>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a3a      	ldr	r2, [pc, #232]	; (8008644 <HAL_GPIO_Init+0x2c8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d013      	beq.n	8008588 <HAL_GPIO_Init+0x20c>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a39      	ldr	r2, [pc, #228]	; (8008648 <HAL_GPIO_Init+0x2cc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00d      	beq.n	8008584 <HAL_GPIO_Init+0x208>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a38      	ldr	r2, [pc, #224]	; (800864c <HAL_GPIO_Init+0x2d0>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d007      	beq.n	8008580 <HAL_GPIO_Init+0x204>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a37      	ldr	r2, [pc, #220]	; (8008650 <HAL_GPIO_Init+0x2d4>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d101      	bne.n	800857c <HAL_GPIO_Init+0x200>
 8008578:	2305      	movs	r3, #5
 800857a:	e00a      	b.n	8008592 <HAL_GPIO_Init+0x216>
 800857c:	2306      	movs	r3, #6
 800857e:	e008      	b.n	8008592 <HAL_GPIO_Init+0x216>
 8008580:	2304      	movs	r3, #4
 8008582:	e006      	b.n	8008592 <HAL_GPIO_Init+0x216>
 8008584:	2303      	movs	r3, #3
 8008586:	e004      	b.n	8008592 <HAL_GPIO_Init+0x216>
 8008588:	2302      	movs	r3, #2
 800858a:	e002      	b.n	8008592 <HAL_GPIO_Init+0x216>
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <HAL_GPIO_Init+0x216>
 8008590:	2300      	movs	r3, #0
 8008592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008594:	f002 0203 	and.w	r2, r2, #3
 8008598:	0092      	lsls	r2, r2, #2
 800859a:	4093      	lsls	r3, r2
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80085a2:	4925      	ldr	r1, [pc, #148]	; (8008638 <HAL_GPIO_Init+0x2bc>)
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	089b      	lsrs	r3, r3, #2
 80085a8:	3302      	adds	r3, #2
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d006      	beq.n	80085ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80085bc:	4b25      	ldr	r3, [pc, #148]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	4924      	ldr	r1, [pc, #144]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	600b      	str	r3, [r1, #0]
 80085c8:	e006      	b.n	80085d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80085ca:	4b22      	ldr	r3, [pc, #136]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	43db      	mvns	r3, r3
 80085d2:	4920      	ldr	r1, [pc, #128]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d006      	beq.n	80085f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80085e4:	4b1b      	ldr	r3, [pc, #108]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	491a      	ldr	r1, [pc, #104]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	604b      	str	r3, [r1, #4]
 80085f0:	e006      	b.n	8008600 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80085f2:	4b18      	ldr	r3, [pc, #96]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	43db      	mvns	r3, r3
 80085fa:	4916      	ldr	r1, [pc, #88]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d025      	beq.n	8008658 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800860c:	4b11      	ldr	r3, [pc, #68]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	4910      	ldr	r1, [pc, #64]	; (8008654 <HAL_GPIO_Init+0x2d8>)
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	4313      	orrs	r3, r2
 8008616:	608b      	str	r3, [r1, #8]
 8008618:	e025      	b.n	8008666 <HAL_GPIO_Init+0x2ea>
 800861a:	bf00      	nop
 800861c:	10320000 	.word	0x10320000
 8008620:	10310000 	.word	0x10310000
 8008624:	10220000 	.word	0x10220000
 8008628:	10210000 	.word	0x10210000
 800862c:	10120000 	.word	0x10120000
 8008630:	10110000 	.word	0x10110000
 8008634:	40021000 	.word	0x40021000
 8008638:	40010000 	.word	0x40010000
 800863c:	40010800 	.word	0x40010800
 8008640:	40010c00 	.word	0x40010c00
 8008644:	40011000 	.word	0x40011000
 8008648:	40011400 	.word	0x40011400
 800864c:	40011800 	.word	0x40011800
 8008650:	40011c00 	.word	0x40011c00
 8008654:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008658:	4b13      	ldr	r3, [pc, #76]	; (80086a8 <HAL_GPIO_Init+0x32c>)
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	43db      	mvns	r3, r3
 8008660:	4911      	ldr	r1, [pc, #68]	; (80086a8 <HAL_GPIO_Init+0x32c>)
 8008662:	4013      	ands	r3, r2
 8008664:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008672:	4b0d      	ldr	r3, [pc, #52]	; (80086a8 <HAL_GPIO_Init+0x32c>)
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	490c      	ldr	r1, [pc, #48]	; (80086a8 <HAL_GPIO_Init+0x32c>)
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	4313      	orrs	r3, r2
 800867c:	60cb      	str	r3, [r1, #12]
 800867e:	e006      	b.n	800868e <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008680:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <HAL_GPIO_Init+0x32c>)
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	43db      	mvns	r3, r3
 8008688:	4907      	ldr	r1, [pc, #28]	; (80086a8 <HAL_GPIO_Init+0x32c>)
 800868a:	4013      	ands	r3, r2
 800868c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	3301      	adds	r3, #1
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	2b0f      	cmp	r3, #15
 8008698:	f67f ae82 	bls.w	80083a0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800869c:	bf00      	nop
 800869e:	bf00      	nop
 80086a0:	372c      	adds	r7, #44	; 0x2c
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc80      	pop	{r7}
 80086a6:	4770      	bx	lr
 80086a8:	40010400 	.word	0x40010400

080086ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	887b      	ldrh	r3, [r7, #2]
 80086be:	4013      	ands	r3, r2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
 80086c8:	e001      	b.n	80086ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80086ca:	2300      	movs	r3, #0
 80086cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr

080086da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	460b      	mov	r3, r1
 80086e4:	807b      	strh	r3, [r7, #2]
 80086e6:	4613      	mov	r3, r2
 80086e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086ea:	787b      	ldrb	r3, [r7, #1]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086f0:	887a      	ldrh	r2, [r7, #2]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80086f6:	e003      	b.n	8008700 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80086f8:	887b      	ldrh	r3, [r7, #2]
 80086fa:	041a      	lsls	r2, r3, #16
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	611a      	str	r2, [r3, #16]
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	bc80      	pop	{r7}
 8008708:	4770      	bx	lr
	...

0800870c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008716:	4b08      	ldr	r3, [pc, #32]	; (8008738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008718:	695a      	ldr	r2, [r3, #20]
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	4013      	ands	r3, r2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d006      	beq.n	8008730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008722:	4a05      	ldr	r2, [pc, #20]	; (8008738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008724:	88fb      	ldrh	r3, [r7, #6]
 8008726:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008728:	88fb      	ldrh	r3, [r7, #6]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f806 	bl	800873c <HAL_GPIO_EXTI_Callback>
  }
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	40010400 	.word	0x40010400

0800873c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr

08008750 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008754:	4b03      	ldr	r3, [pc, #12]	; (8008764 <HAL_PWR_EnableBkUpAccess+0x14>)
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]
}
 800875a:	bf00      	nop
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	420e0020 	.word	0x420e0020

08008768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 8087 	beq.w	8008890 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008782:	4b92      	ldr	r3, [pc, #584]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f003 030c 	and.w	r3, r3, #12
 800878a:	2b04      	cmp	r3, #4
 800878c:	d00c      	beq.n	80087a8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800878e:	4b8f      	ldr	r3, [pc, #572]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f003 030c 	and.w	r3, r3, #12
 8008796:	2b08      	cmp	r3, #8
 8008798:	d112      	bne.n	80087c0 <HAL_RCC_OscConfig+0x58>
 800879a:	4b8c      	ldr	r3, [pc, #560]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a6:	d10b      	bne.n	80087c0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087a8:	4b88      	ldr	r3, [pc, #544]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d06c      	beq.n	800888e <HAL_RCC_OscConfig+0x126>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d168      	bne.n	800888e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e22d      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c8:	d106      	bne.n	80087d8 <HAL_RCC_OscConfig+0x70>
 80087ca:	4b80      	ldr	r3, [pc, #512]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a7f      	ldr	r2, [pc, #508]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80087d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	e02e      	b.n	8008836 <HAL_RCC_OscConfig+0xce>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10c      	bne.n	80087fa <HAL_RCC_OscConfig+0x92>
 80087e0:	4b7a      	ldr	r3, [pc, #488]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a79      	ldr	r2, [pc, #484]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80087e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	4b77      	ldr	r3, [pc, #476]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a76      	ldr	r2, [pc, #472]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80087f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	e01d      	b.n	8008836 <HAL_RCC_OscConfig+0xce>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008802:	d10c      	bne.n	800881e <HAL_RCC_OscConfig+0xb6>
 8008804:	4b71      	ldr	r3, [pc, #452]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a70      	ldr	r2, [pc, #448]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 800880a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800880e:	6013      	str	r3, [r2, #0]
 8008810:	4b6e      	ldr	r3, [pc, #440]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a6d      	ldr	r2, [pc, #436]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	e00b      	b.n	8008836 <HAL_RCC_OscConfig+0xce>
 800881e:	4b6b      	ldr	r3, [pc, #428]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a6a      	ldr	r2, [pc, #424]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	4b68      	ldr	r3, [pc, #416]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a67      	ldr	r2, [pc, #412]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008834:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d013      	beq.n	8008866 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800883e:	f7fe fe9f 	bl	8007580 <HAL_GetTick>
 8008842:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008844:	e008      	b.n	8008858 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008846:	f7fe fe9b 	bl	8007580 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b64      	cmp	r3, #100	; 0x64
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e1e1      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008858:	4b5c      	ldr	r3, [pc, #368]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0f0      	beq.n	8008846 <HAL_RCC_OscConfig+0xde>
 8008864:	e014      	b.n	8008890 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008866:	f7fe fe8b 	bl	8007580 <HAL_GetTick>
 800886a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800886c:	e008      	b.n	8008880 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800886e:	f7fe fe87 	bl	8007580 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b64      	cmp	r3, #100	; 0x64
 800887a:	d901      	bls.n	8008880 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e1cd      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008880:	4b52      	ldr	r3, [pc, #328]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1f0      	bne.n	800886e <HAL_RCC_OscConfig+0x106>
 800888c:	e000      	b.n	8008890 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800888e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d063      	beq.n	8008964 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800889c:	4b4b      	ldr	r3, [pc, #300]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f003 030c 	and.w	r3, r3, #12
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80088a8:	4b48      	ldr	r3, [pc, #288]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f003 030c 	and.w	r3, r3, #12
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d11c      	bne.n	80088ee <HAL_RCC_OscConfig+0x186>
 80088b4:	4b45      	ldr	r3, [pc, #276]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d116      	bne.n	80088ee <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088c0:	4b42      	ldr	r3, [pc, #264]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <HAL_RCC_OscConfig+0x170>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d001      	beq.n	80088d8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e1a1      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d8:	4b3c      	ldr	r3, [pc, #240]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	00db      	lsls	r3, r3, #3
 80088e6:	4939      	ldr	r1, [pc, #228]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088ec:	e03a      	b.n	8008964 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d020      	beq.n	8008938 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088f6:	4b36      	ldr	r3, [pc, #216]	; (80089d0 <HAL_RCC_OscConfig+0x268>)
 80088f8:	2201      	movs	r2, #1
 80088fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088fc:	f7fe fe40 	bl	8007580 <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008904:	f7fe fe3c 	bl	8007580 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e182      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008916:	4b2d      	ldr	r3, [pc, #180]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f0      	beq.n	8008904 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008922:	4b2a      	ldr	r3, [pc, #168]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4926      	ldr	r1, [pc, #152]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 8008932:	4313      	orrs	r3, r2
 8008934:	600b      	str	r3, [r1, #0]
 8008936:	e015      	b.n	8008964 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008938:	4b25      	ldr	r3, [pc, #148]	; (80089d0 <HAL_RCC_OscConfig+0x268>)
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800893e:	f7fe fe1f 	bl	8007580 <HAL_GetTick>
 8008942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008944:	e008      	b.n	8008958 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008946:	f7fe fe1b 	bl	8007580 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d901      	bls.n	8008958 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e161      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008958:	4b1c      	ldr	r3, [pc, #112]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f0      	bne.n	8008946 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0308 	and.w	r3, r3, #8
 800896c:	2b00      	cmp	r3, #0
 800896e:	d039      	beq.n	80089e4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d019      	beq.n	80089ac <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008978:	4b16      	ldr	r3, [pc, #88]	; (80089d4 <HAL_RCC_OscConfig+0x26c>)
 800897a:	2201      	movs	r2, #1
 800897c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800897e:	f7fe fdff 	bl	8007580 <HAL_GetTick>
 8008982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008984:	e008      	b.n	8008998 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008986:	f7fe fdfb 	bl	8007580 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	2b02      	cmp	r3, #2
 8008992:	d901      	bls.n	8008998 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e141      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008998:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <HAL_RCC_OscConfig+0x264>)
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	f003 0302 	and.w	r3, r3, #2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d0f0      	beq.n	8008986 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80089a4:	2001      	movs	r0, #1
 80089a6:	f000 fadf 	bl	8008f68 <RCC_Delay>
 80089aa:	e01b      	b.n	80089e4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <HAL_RCC_OscConfig+0x26c>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089b2:	f7fe fde5 	bl	8007580 <HAL_GetTick>
 80089b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089b8:	e00e      	b.n	80089d8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089ba:	f7fe fde1 	bl	8007580 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d907      	bls.n	80089d8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e127      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
 80089cc:	40021000 	.word	0x40021000
 80089d0:	42420000 	.word	0x42420000
 80089d4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089d8:	4b92      	ldr	r3, [pc, #584]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1ea      	bne.n	80089ba <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 80a6 	beq.w	8008b3e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089f2:	2300      	movs	r3, #0
 80089f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089f6:	4b8b      	ldr	r3, [pc, #556]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10d      	bne.n	8008a1e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a02:	4b88      	ldr	r3, [pc, #544]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	4a87      	ldr	r2, [pc, #540]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a0c:	61d3      	str	r3, [r2, #28]
 8008a0e:	4b85      	ldr	r3, [pc, #532]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a1e:	4b82      	ldr	r3, [pc, #520]	; (8008c28 <HAL_RCC_OscConfig+0x4c0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d118      	bne.n	8008a5c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a2a:	4b7f      	ldr	r3, [pc, #508]	; (8008c28 <HAL_RCC_OscConfig+0x4c0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a7e      	ldr	r2, [pc, #504]	; (8008c28 <HAL_RCC_OscConfig+0x4c0>)
 8008a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a36:	f7fe fda3 	bl	8007580 <HAL_GetTick>
 8008a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a3c:	e008      	b.n	8008a50 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a3e:	f7fe fd9f 	bl	8007580 <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	2b64      	cmp	r3, #100	; 0x64
 8008a4a:	d901      	bls.n	8008a50 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e0e5      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a50:	4b75      	ldr	r3, [pc, #468]	; (8008c28 <HAL_RCC_OscConfig+0x4c0>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0f0      	beq.n	8008a3e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d106      	bne.n	8008a72 <HAL_RCC_OscConfig+0x30a>
 8008a64:	4b6f      	ldr	r3, [pc, #444]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	4a6e      	ldr	r2, [pc, #440]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a6a:	f043 0301 	orr.w	r3, r3, #1
 8008a6e:	6213      	str	r3, [r2, #32]
 8008a70:	e02d      	b.n	8008ace <HAL_RCC_OscConfig+0x366>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10c      	bne.n	8008a94 <HAL_RCC_OscConfig+0x32c>
 8008a7a:	4b6a      	ldr	r3, [pc, #424]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	4a69      	ldr	r2, [pc, #420]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a80:	f023 0301 	bic.w	r3, r3, #1
 8008a84:	6213      	str	r3, [r2, #32]
 8008a86:	4b67      	ldr	r3, [pc, #412]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	4a66      	ldr	r2, [pc, #408]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a8c:	f023 0304 	bic.w	r3, r3, #4
 8008a90:	6213      	str	r3, [r2, #32]
 8008a92:	e01c      	b.n	8008ace <HAL_RCC_OscConfig+0x366>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	2b05      	cmp	r3, #5
 8008a9a:	d10c      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x34e>
 8008a9c:	4b61      	ldr	r3, [pc, #388]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	4a60      	ldr	r2, [pc, #384]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008aa2:	f043 0304 	orr.w	r3, r3, #4
 8008aa6:	6213      	str	r3, [r2, #32]
 8008aa8:	4b5e      	ldr	r3, [pc, #376]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	4a5d      	ldr	r2, [pc, #372]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008aae:	f043 0301 	orr.w	r3, r3, #1
 8008ab2:	6213      	str	r3, [r2, #32]
 8008ab4:	e00b      	b.n	8008ace <HAL_RCC_OscConfig+0x366>
 8008ab6:	4b5b      	ldr	r3, [pc, #364]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	4a5a      	ldr	r2, [pc, #360]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	6213      	str	r3, [r2, #32]
 8008ac2:	4b58      	ldr	r3, [pc, #352]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	4a57      	ldr	r2, [pc, #348]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008ac8:	f023 0304 	bic.w	r3, r3, #4
 8008acc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d015      	beq.n	8008b02 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ad6:	f7fe fd53 	bl	8007580 <HAL_GetTick>
 8008ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008adc:	e00a      	b.n	8008af4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ade:	f7fe fd4f 	bl	8007580 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d901      	bls.n	8008af4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e093      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008af4:	4b4b      	ldr	r3, [pc, #300]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0ee      	beq.n	8008ade <HAL_RCC_OscConfig+0x376>
 8008b00:	e014      	b.n	8008b2c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b02:	f7fe fd3d 	bl	8007580 <HAL_GetTick>
 8008b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b08:	e00a      	b.n	8008b20 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b0a:	f7fe fd39 	bl	8007580 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e07d      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b20:	4b40      	ldr	r3, [pc, #256]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1ee      	bne.n	8008b0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d105      	bne.n	8008b3e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b32:	4b3c      	ldr	r3, [pc, #240]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	4a3b      	ldr	r2, [pc, #236]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d069      	beq.n	8008c1a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b46:	4b37      	ldr	r3, [pc, #220]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f003 030c 	and.w	r3, r3, #12
 8008b4e:	2b08      	cmp	r3, #8
 8008b50:	d061      	beq.n	8008c16 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d146      	bne.n	8008be8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b5a:	4b34      	ldr	r3, [pc, #208]	; (8008c2c <HAL_RCC_OscConfig+0x4c4>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b60:	f7fe fd0e 	bl	8007580 <HAL_GetTick>
 8008b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b68:	f7fe fd0a 	bl	8007580 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e050      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b7a:	4b2a      	ldr	r3, [pc, #168]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1f0      	bne.n	8008b68 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b8e:	d108      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008b90:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	4921      	ldr	r1, [pc, #132]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ba2:	4b20      	ldr	r3, [pc, #128]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a19      	ldr	r1, [r3, #32]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	491b      	ldr	r1, [pc, #108]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bba:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <HAL_RCC_OscConfig+0x4c4>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bc0:	f7fe fcde 	bl	8007580 <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bc8:	f7fe fcda 	bl	8007580 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e020      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0f0      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x460>
 8008be6:	e018      	b.n	8008c1a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008be8:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <HAL_RCC_OscConfig+0x4c4>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bee:	f7fe fcc7 	bl	8007580 <HAL_GetTick>
 8008bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bf6:	f7fe fcc3 	bl	8007580 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e009      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c08:	4b06      	ldr	r3, [pc, #24]	; (8008c24 <HAL_RCC_OscConfig+0x4bc>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f0      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x48e>
 8008c14:	e001      	b.n	8008c1a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	40021000 	.word	0x40021000
 8008c28:	40007000 	.word	0x40007000
 8008c2c:	42420060 	.word	0x42420060

08008c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008c3e:	4b7e      	ldr	r3, [pc, #504]	; (8008e38 <HAL_RCC_ClockConfig+0x208>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d910      	bls.n	8008c6e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4c:	4b7a      	ldr	r3, [pc, #488]	; (8008e38 <HAL_RCC_ClockConfig+0x208>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f023 0207 	bic.w	r2, r3, #7
 8008c54:	4978      	ldr	r1, [pc, #480]	; (8008e38 <HAL_RCC_ClockConfig+0x208>)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008c5c:	4b76      	ldr	r3, [pc, #472]	; (8008e38 <HAL_RCC_ClockConfig+0x208>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0307 	and.w	r3, r3, #7
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d001      	beq.n	8008c6e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e0e0      	b.n	8008e30 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d020      	beq.n	8008cbc <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d005      	beq.n	8008c92 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c86:	4b6d      	ldr	r3, [pc, #436]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	4a6c      	ldr	r2, [pc, #432]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008c8c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008c90:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d005      	beq.n	8008caa <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c9e:	4b67      	ldr	r3, [pc, #412]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	4a66      	ldr	r2, [pc, #408]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008ca4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008ca8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008caa:	4b64      	ldr	r3, [pc, #400]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	4961      	ldr	r1, [pc, #388]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d06a      	beq.n	8008d9e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d107      	bne.n	8008ce0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cd0:	4b5a      	ldr	r3, [pc, #360]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d115      	bne.n	8008d08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e0a7      	b.n	8008e30 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d107      	bne.n	8008cf8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ce8:	4b54      	ldr	r3, [pc, #336]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e09b      	b.n	8008e30 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cf8:	4b50      	ldr	r3, [pc, #320]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e093      	b.n	8008e30 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d08:	4b4c      	ldr	r3, [pc, #304]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f023 0203 	bic.w	r2, r3, #3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	4949      	ldr	r1, [pc, #292]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d1a:	f7fe fc31 	bl	8007580 <HAL_GetTick>
 8008d1e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d112      	bne.n	8008d4e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d28:	e00a      	b.n	8008d40 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d2a:	f7fe fc29 	bl	8007580 <HAL_GetTick>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d901      	bls.n	8008d40 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e077      	b.n	8008e30 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d40:	4b3e      	ldr	r3, [pc, #248]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f003 030c 	and.w	r3, r3, #12
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d1ee      	bne.n	8008d2a <HAL_RCC_ClockConfig+0xfa>
 8008d4c:	e027      	b.n	8008d9e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d11d      	bne.n	8008d92 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d56:	e00a      	b.n	8008d6e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d58:	f7fe fc12 	bl	8007580 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d901      	bls.n	8008d6e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e060      	b.n	8008e30 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d6e:	4b33      	ldr	r3, [pc, #204]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f003 030c 	and.w	r3, r3, #12
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d1ee      	bne.n	8008d58 <HAL_RCC_ClockConfig+0x128>
 8008d7a:	e010      	b.n	8008d9e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d7c:	f7fe fc00 	bl	8007580 <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e04e      	b.n	8008e30 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d92:	4b2a      	ldr	r3, [pc, #168]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f003 030c 	and.w	r3, r3, #12
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1ee      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008d9e:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <HAL_RCC_ClockConfig+0x208>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d210      	bcs.n	8008dce <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dac:	4b22      	ldr	r3, [pc, #136]	; (8008e38 <HAL_RCC_ClockConfig+0x208>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f023 0207 	bic.w	r2, r3, #7
 8008db4:	4920      	ldr	r1, [pc, #128]	; (8008e38 <HAL_RCC_ClockConfig+0x208>)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008dbc:	4b1e      	ldr	r3, [pc, #120]	; (8008e38 <HAL_RCC_ClockConfig+0x208>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0307 	and.w	r3, r3, #7
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d001      	beq.n	8008dce <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e030      	b.n	8008e30 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0304 	and.w	r3, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d008      	beq.n	8008dec <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dda:	4b18      	ldr	r3, [pc, #96]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	4915      	ldr	r1, [pc, #84]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008de8:	4313      	orrs	r3, r2
 8008dea:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d009      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008df8:	4b10      	ldr	r3, [pc, #64]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	490d      	ldr	r1, [pc, #52]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e0c:	f000 f81c 	bl	8008e48 <HAL_RCC_GetSysClockFreq>
 8008e10:	4602      	mov	r2, r0
 8008e12:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <HAL_RCC_ClockConfig+0x20c>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	091b      	lsrs	r3, r3, #4
 8008e18:	f003 030f 	and.w	r3, r3, #15
 8008e1c:	4908      	ldr	r1, [pc, #32]	; (8008e40 <HAL_RCC_ClockConfig+0x210>)
 8008e1e:	5ccb      	ldrb	r3, [r1, r3]
 8008e20:	fa22 f303 	lsr.w	r3, r2, r3
 8008e24:	4a07      	ldr	r2, [pc, #28]	; (8008e44 <HAL_RCC_ClockConfig+0x214>)
 8008e26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f7fe fb67 	bl	80074fc <HAL_InitTick>
  
  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	40022000 	.word	0x40022000
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	0800d998 	.word	0x0800d998
 8008e44:	20000014 	.word	0x20000014

08008e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e48:	b490      	push	{r4, r7}
 8008e4a:	b08a      	sub	sp, #40	; 0x28
 8008e4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008e4e:	4b29      	ldr	r3, [pc, #164]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0xac>)
 8008e50:	1d3c      	adds	r4, r7, #4
 8008e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008e58:	f240 2301 	movw	r3, #513	; 0x201
 8008e5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	61fb      	str	r3, [r7, #28]
 8008e62:	2300      	movs	r3, #0
 8008e64:	61bb      	str	r3, [r7, #24]
 8008e66:	2300      	movs	r3, #0
 8008e68:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008e72:	4b21      	ldr	r3, [pc, #132]	; (8008ef8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f003 030c 	and.w	r3, r3, #12
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d002      	beq.n	8008e88 <HAL_RCC_GetSysClockFreq+0x40>
 8008e82:	2b08      	cmp	r3, #8
 8008e84:	d003      	beq.n	8008e8e <HAL_RCC_GetSysClockFreq+0x46>
 8008e86:	e02b      	b.n	8008ee0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008e88:	4b1c      	ldr	r3, [pc, #112]	; (8008efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8008e8a:	623b      	str	r3, [r7, #32]
      break;
 8008e8c:	e02b      	b.n	8008ee6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	0c9b      	lsrs	r3, r3, #18
 8008e92:	f003 030f 	and.w	r3, r3, #15
 8008e96:	3328      	adds	r3, #40	; 0x28
 8008e98:	443b      	add	r3, r7
 8008e9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008e9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d012      	beq.n	8008ed0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008eaa:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	0c5b      	lsrs	r3, r3, #17
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	3328      	adds	r3, #40	; 0x28
 8008eb6:	443b      	add	r3, r7
 8008eb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008ebc:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4a0e      	ldr	r2, [pc, #56]	; (8008efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8008ec2:	fb03 f202 	mul.w	r2, r3, r2
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ece:	e004      	b.n	8008eda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	4a0b      	ldr	r2, [pc, #44]	; (8008f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ed4:	fb02 f303 	mul.w	r3, r2, r3
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	623b      	str	r3, [r7, #32]
      break;
 8008ede:	e002      	b.n	8008ee6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008ee0:	4b06      	ldr	r3, [pc, #24]	; (8008efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8008ee2:	623b      	str	r3, [r7, #32]
      break;
 8008ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3728      	adds	r7, #40	; 0x28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bc90      	pop	{r4, r7}
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	0800d210 	.word	0x0800d210
 8008ef8:	40021000 	.word	0x40021000
 8008efc:	007a1200 	.word	0x007a1200
 8008f00:	003d0900 	.word	0x003d0900

08008f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f08:	4b02      	ldr	r3, [pc, #8]	; (8008f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bc80      	pop	{r7}
 8008f12:	4770      	bx	lr
 8008f14:	20000014 	.word	0x20000014

08008f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f1c:	f7ff fff2 	bl	8008f04 <HAL_RCC_GetHCLKFreq>
 8008f20:	4602      	mov	r2, r0
 8008f22:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	f003 0307 	and.w	r3, r3, #7
 8008f2c:	4903      	ldr	r1, [pc, #12]	; (8008f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f2e:	5ccb      	ldrb	r3, [r1, r3]
 8008f30:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8008f34:	4618      	mov	r0, r3
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	40021000 	.word	0x40021000
 8008f3c:	0800d9a8 	.word	0x0800d9a8

08008f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008f44:	f7ff ffde 	bl	8008f04 <HAL_RCC_GetHCLKFreq>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	0adb      	lsrs	r3, r3, #11
 8008f50:	f003 0307 	and.w	r3, r3, #7
 8008f54:	4903      	ldr	r1, [pc, #12]	; (8008f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f56:	5ccb      	ldrb	r3, [r1, r3]
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	40021000 	.word	0x40021000
 8008f64:	0800d9a8 	.word	0x0800d9a8

08008f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008f70:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <RCC_Delay+0x38>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0b      	ldr	r2, [pc, #44]	; (8008fa4 <RCC_Delay+0x3c>)
 8008f76:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7a:	0a5b      	lsrs	r3, r3, #9
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	fb02 f303 	mul.w	r3, r2, r3
 8008f82:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8008f84:	bf00      	nop
}
 8008f86:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	1e5a      	subs	r2, r3, #1
 8008f8c:	60fa      	str	r2, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f8      	bne.n	8008f84 <RCC_Delay+0x1c>
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bc80      	pop	{r7}
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000014 	.word	0x20000014
 8008fa4:	10624dd3 	.word	0x10624dd3

08008fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	613b      	str	r3, [r7, #16]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d07d      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fc8:	4b4f      	ldr	r3, [pc, #316]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10d      	bne.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fd4:	4b4c      	ldr	r3, [pc, #304]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	4a4b      	ldr	r2, [pc, #300]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fde:	61d3      	str	r3, [r2, #28]
 8008fe0:	4b49      	ldr	r3, [pc, #292]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe8:	60bb      	str	r3, [r7, #8]
 8008fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fec:	2301      	movs	r3, #1
 8008fee:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ff0:	4b46      	ldr	r3, [pc, #280]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d118      	bne.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ffc:	4b43      	ldr	r3, [pc, #268]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a42      	ldr	r2, [pc, #264]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009006:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009008:	f7fe faba 	bl	8007580 <HAL_GetTick>
 800900c:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800900e:	e008      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009010:	f7fe fab6 	bl	8007580 <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	2b64      	cmp	r3, #100	; 0x64
 800901c:	d901      	bls.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e06d      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009022:	4b3a      	ldr	r3, [pc, #232]	; (800910c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f0      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800902e:	4b36      	ldr	r3, [pc, #216]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009036:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d02e      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	429a      	cmp	r2, r3
 800904a:	d027      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800904c:	4b2e      	ldr	r3, [pc, #184]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009054:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009056:	4b2e      	ldr	r3, [pc, #184]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009058:	2201      	movs	r2, #1
 800905a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800905c:	4b2c      	ldr	r3, [pc, #176]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009062:	4a29      	ldr	r2, [pc, #164]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d014      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009072:	f7fe fa85 	bl	8007580 <HAL_GetTick>
 8009076:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009078:	e00a      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800907a:	f7fe fa81 	bl	8007580 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	f241 3288 	movw	r2, #5000	; 0x1388
 8009088:	4293      	cmp	r3, r2
 800908a:	d901      	bls.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e036      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009090:	4b1d      	ldr	r3, [pc, #116]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0ee      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800909c:	4b1a      	ldr	r3, [pc, #104]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	4917      	ldr	r1, [pc, #92]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d105      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090b4:	4b14      	ldr	r3, [pc, #80]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	4a13      	ldr	r2, [pc, #76]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d008      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090cc:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	490b      	ldr	r1, [pc, #44]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0310 	and.w	r3, r3, #16
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d008      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090ea:	4b07      	ldr	r3, [pc, #28]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	4904      	ldr	r1, [pc, #16]	; (8009108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	40021000 	.word	0x40021000
 800910c:	40007000 	.word	0x40007000
 8009110:	42420440 	.word	0x42420440

08009114 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009114:	b590      	push	{r4, r7, lr}
 8009116:	b08d      	sub	sp, #52	; 0x34
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800911c:	4b6b      	ldr	r3, [pc, #428]	; (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800911e:	f107 040c 	add.w	r4, r7, #12
 8009122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009128:	f240 2301 	movw	r3, #513	; 0x201
 800912c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	627b      	str	r3, [r7, #36]	; 0x24
 8009132:	2300      	movs	r3, #0
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009136:	2300      	movs	r3, #0
 8009138:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	61fb      	str	r3, [r7, #28]
 800913e:	2300      	movs	r3, #0
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3b01      	subs	r3, #1
 8009146:	2b0f      	cmp	r3, #15
 8009148:	f200 80b7 	bhi.w	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 800914c:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800914e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009152:	bf00      	nop
 8009154:	08009233 	.word	0x08009233
 8009158:	0800929f 	.word	0x0800929f
 800915c:	080092bb 	.word	0x080092bb
 8009160:	08009223 	.word	0x08009223
 8009164:	080092bb 	.word	0x080092bb
 8009168:	080092bb 	.word	0x080092bb
 800916c:	080092bb 	.word	0x080092bb
 8009170:	0800922b 	.word	0x0800922b
 8009174:	080092bb 	.word	0x080092bb
 8009178:	080092bb 	.word	0x080092bb
 800917c:	080092bb 	.word	0x080092bb
 8009180:	080092bb 	.word	0x080092bb
 8009184:	080092bb 	.word	0x080092bb
 8009188:	080092bb 	.word	0x080092bb
 800918c:	080092bb 	.word	0x080092bb
 8009190:	08009195 	.word	0x08009195
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8009194:	4b4e      	ldr	r3, [pc, #312]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800919a:	4b4d      	ldr	r3, [pc, #308]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 808b 	beq.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	0c9b      	lsrs	r3, r3, #18
 80091ac:	f003 030f 	and.w	r3, r3, #15
 80091b0:	3330      	adds	r3, #48	; 0x30
 80091b2:	443b      	add	r3, r7
 80091b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80091b8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d017      	beq.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80091c4:	4b42      	ldr	r3, [pc, #264]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	0c5b      	lsrs	r3, r3, #17
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	3330      	adds	r3, #48	; 0x30
 80091d0:	443b      	add	r3, r7
 80091d2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00d      	beq.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80091e2:	4a3c      	ldr	r2, [pc, #240]	; (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	fb02 f303 	mul.w	r3, r2, r3
 80091f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091f2:	e004      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	4a38      	ldr	r2, [pc, #224]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80091f8:	fb02 f303 	mul.w	r3, r2, r3
 80091fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80091fe:	4b34      	ldr	r3, [pc, #208]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800920a:	d102      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8009210:	e055      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          frequency = (pllclk * 2) / 3;
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	4a31      	ldr	r2, [pc, #196]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8009218:	fba2 2303 	umull	r2, r3, r2, r3
 800921c:	085b      	lsrs	r3, r3, #1
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8009220:	e04d      	b.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8009222:	f7ff fe11 	bl	8008e48 <HAL_RCC_GetSysClockFreq>
 8009226:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009228:	e04a      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800922a:	f7ff fe0d 	bl	8008e48 <HAL_RCC_GetSysClockFreq>
 800922e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009230:	e046      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8009232:	4b27      	ldr	r3, [pc, #156]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800923e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009242:	d108      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 800924e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009252:	62bb      	str	r3, [r7, #40]	; 0x28
 8009254:	e022      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800925c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009260:	d109      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8009262:	4b1b      	ldr	r3, [pc, #108]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 800926e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28
 8009274:	e012      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800927c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009280:	d109      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8009282:	4b13      	ldr	r3, [pc, #76]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = HSE_VALUE / 128U;
 800928e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009292:	62bb      	str	r3, [r7, #40]	; 0x28
 8009294:	e002      	b.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800929a:	e011      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800929c:	e010      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800929e:	f7ff fe4f 	bl	8008f40 <HAL_RCC_GetPCLK2Freq>
 80092a2:	4602      	mov	r2, r0
 80092a4:	4b0a      	ldr	r3, [pc, #40]	; (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	0b9b      	lsrs	r3, r3, #14
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	3301      	adds	r3, #1
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80092b8:	e002      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  default: 
    {
      break;
 80092ba:	bf00      	nop
 80092bc:	e000      	b.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 80092be:	bf00      	nop
    }
  }
  return(frequency);
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3734      	adds	r7, #52	; 0x34
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd90      	pop	{r4, r7, pc}
 80092ca:	bf00      	nop
 80092cc:	0800d220 	.word	0x0800d220
 80092d0:	40021000 	.word	0x40021000
 80092d4:	007a1200 	.word	0x007a1200
 80092d8:	003d0900 	.word	0x003d0900
 80092dc:	aaaaaaab 	.word	0xaaaaaaab

080092e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e084      	b.n	8009400 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	7c5b      	ldrb	r3, [r3, #17]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d105      	bne.n	800930c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7fc ff40 	bl	800618c <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f87a 	bl	800940c <HAL_RTC_WaitForSynchro>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d004      	beq.n	8009328 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2204      	movs	r2, #4
 8009322:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e06b      	b.n	8009400 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f89c 	bl	8009466 <RTC_EnterInitMode>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2204      	movs	r2, #4
 8009338:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e060      	b.n	8009400 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0207 	bic.w	r2, r2, #7
 800934c:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009356:	4b2c      	ldr	r3, [pc, #176]	; (8009408 <HAL_RTC_Init+0x128>)
 8009358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935a:	4a2b      	ldr	r2, [pc, #172]	; (8009408 <HAL_RTC_Init+0x128>)
 800935c:	f023 0301 	bic.w	r3, r3, #1
 8009360:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8009362:	4b29      	ldr	r3, [pc, #164]	; (8009408 <HAL_RTC_Init+0x128>)
 8009364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009366:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	4926      	ldr	r1, [pc, #152]	; (8009408 <HAL_RTC_Init+0x128>)
 8009370:	4313      	orrs	r3, r2
 8009372:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937c:	d003      	beq.n	8009386 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	e00e      	b.n	80093a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8009386:	2001      	movs	r0, #1
 8009388:	f7ff fec4 	bl	8009114 <HAL_RCCEx_GetPeriphCLKFreq>
 800938c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d104      	bne.n	800939e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2204      	movs	r2, #4
 8009398:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e030      	b.n	8009400 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f023 010f 	bic.w	r1, r3, #15
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	0c1a      	lsrs	r2, r3, #16
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	0c1b      	lsrs	r3, r3, #16
 80093c2:	041b      	lsls	r3, r3, #16
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	b291      	uxth	r1, r2
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6812      	ldr	r2, [r2, #0]
 80093cc:	430b      	orrs	r3, r1
 80093ce:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f870 	bl	80094b6 <RTC_ExitInitMode>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d004      	beq.n	80093e6 <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2204      	movs	r2, #4
 80093e0:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e00c      	b.n	8009400 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 80093fe:	2300      	movs	r3, #0
  }
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	40006c00 	.word	0x40006c00

0800940c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009414:	2300      	movs	r3, #0
 8009416:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e01d      	b.n	800945e <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0208 	bic.w	r2, r2, #8
 8009430:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8009432:	f7fe f8a5 	bl	8007580 <HAL_GetTick>
 8009436:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009438:	e009      	b.n	800944e <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800943a:	f7fe f8a1 	bl	8007580 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009448:	d901      	bls.n	800944e <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e007      	b.n	800945e <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	f003 0308 	and.w	r3, r3, #8
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0ee      	beq.n	800943a <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8009472:	f7fe f885 	bl	8007580 <HAL_GetTick>
 8009476:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009478:	e009      	b.n	800948e <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800947a:	f7fe f881 	bl	8007580 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009488:	d901      	bls.n	800948e <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e00f      	b.n	80094ae <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f003 0320 	and.w	r3, r3, #32
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0ee      	beq.n	800947a <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f042 0210 	orr.w	r2, r2, #16
 80094aa:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 0210 	bic.w	r2, r2, #16
 80094d0:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 80094d2:	f7fe f855 	bl	8007580 <HAL_GetTick>
 80094d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80094d8:	e009      	b.n	80094ee <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80094da:	f7fe f851 	bl	8007580 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094e8:	d901      	bls.n	80094ee <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e007      	b.n	80094fe <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d0ee      	beq.n	80094da <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 8009518:	4b07      	ldr	r3, [pc, #28]	; (8009538 <HAL_RTCEx_BKUPWrite+0x30>)
 800951a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	4413      	add	r3, r2
 8009524:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	b292      	uxth	r2, r2
 800952c:	601a      	str	r2, [r3, #0]
}
 800952e:	bf00      	nop
 8009530:	371c      	adds	r7, #28
 8009532:	46bd      	mov	sp, r7
 8009534:	bc80      	pop	{r7}
 8009536:	4770      	bx	lr
 8009538:	40006c00 	.word	0x40006c00

0800953c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 800954e:	4b08      	ldr	r3, [pc, #32]	; (8009570 <HAL_RTCEx_BKUPRead+0x34>)
 8009550:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	b29b      	uxth	r3, r3
 8009562:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8009564:	68bb      	ldr	r3, [r7, #8]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	bc80      	pop	{r7}
 800956e:	4770      	bx	lr
 8009570:	40006c00 	.word	0x40006c00

08009574 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e034      	b.n	80095f4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7fc ff90 	bl	80064c4 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3308      	adds	r3, #8
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f001 fcb2 	bl	800af18 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	461a      	mov	r2, r3
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	f001 fd2a 	bl	800b018 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6858      	ldr	r0, [r3, #4]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	f001 fd55 	bl	800b080 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	6892      	ldr	r2, [r2, #8]
 80095de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	6892      	ldr	r2, [r2, #8]
 80095ea:	f041 0101 	orr.w	r1, r1, #1
 80095ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e01d      	b.n	800964a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d106      	bne.n	8009628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7fc fdd6 	bl	80061d4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3304      	adds	r3, #4
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f000 fc38 	bl	8009eb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0201 	orr.w	r2, r2, #1
 8009670:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	bc80      	pop	{r7}
 8009684:	4770      	bx	lr

08009686 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2202      	movs	r2, #2
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6a1a      	ldr	r2, [r3, #32]
 800969c:	f241 1311 	movw	r3, #4369	; 0x1111
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10f      	bne.n	80096c6 <HAL_TIM_Base_Stop+0x40>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6a1a      	ldr	r2, [r3, #32]
 80096ac:	f240 4344 	movw	r3, #1092	; 0x444
 80096b0:	4013      	ands	r3, r2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d107      	bne.n	80096c6 <HAL_TIM_Base_Stop+0x40>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 0201 	bic.w	r2, r2, #1
 80096c4:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bc80      	pop	{r7}
 80096d8:	4770      	bx	lr

080096da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0201 	orr.w	r2, r2, #1
 80096f0:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f042 0201 	orr.w	r2, r2, #1
 8009700:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	bc80      	pop	{r7}
 800970c:	4770      	bx	lr

0800970e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800970e:	b480      	push	{r7}
 8009710:	b083      	sub	sp, #12
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68da      	ldr	r2, [r3, #12]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 0201 	bic.w	r2, r2, #1
 8009724:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6a1a      	ldr	r2, [r3, #32]
 800972c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009730:	4013      	ands	r3, r2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10f      	bne.n	8009756 <HAL_TIM_Base_Stop_IT+0x48>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6a1a      	ldr	r2, [r3, #32]
 800973c:	f240 4344 	movw	r3, #1092	; 0x444
 8009740:	4013      	ands	r3, r2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d107      	bne.n	8009756 <HAL_TIM_Base_Stop_IT+0x48>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0201 	bic.w	r2, r2, #1
 8009754:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	bc80      	pop	{r7}
 8009760:	4770      	bx	lr

08009762 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e01d      	b.n	80097b0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f815 	bl	80097b8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2202      	movs	r2, #2
 8009792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3304      	adds	r3, #4
 800979e:	4619      	mov	r1, r3
 80097a0:	4610      	mov	r0, r2
 80097a2:	f000 fb85 	bl	8009eb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bc80      	pop	{r7}
 80097c8:	4770      	bx	lr
	...

080097cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2201      	movs	r2, #1
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fe4d 	bl	800a47e <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a10      	ldr	r2, [pc, #64]	; (800982c <HAL_TIM_PWM_Start+0x60>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d004      	beq.n	80097f8 <HAL_TIM_PWM_Start+0x2c>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a0f      	ldr	r2, [pc, #60]	; (8009830 <HAL_TIM_PWM_Start+0x64>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d101      	bne.n	80097fc <HAL_TIM_PWM_Start+0x30>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e000      	b.n	80097fe <HAL_TIM_PWM_Start+0x32>
 80097fc:	2300      	movs	r3, #0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0201 	orr.w	r2, r2, #1
 8009820:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	40012c00 	.word	0x40012c00
 8009830:	40013400 	.word	0x40013400

08009834 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2200      	movs	r2, #0
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f000 fe19 	bl	800a47e <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a22      	ldr	r2, [pc, #136]	; (80098dc <HAL_TIM_PWM_Stop+0xa8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <HAL_TIM_PWM_Stop+0x2c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a21      	ldr	r2, [pc, #132]	; (80098e0 <HAL_TIM_PWM_Stop+0xac>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d101      	bne.n	8009864 <HAL_TIM_PWM_Stop+0x30>
 8009860:	2301      	movs	r3, #1
 8009862:	e000      	b.n	8009866 <HAL_TIM_PWM_Stop+0x32>
 8009864:	2300      	movs	r3, #0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d017      	beq.n	800989a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a1a      	ldr	r2, [r3, #32]
 8009870:	f241 1311 	movw	r3, #4369	; 0x1111
 8009874:	4013      	ands	r3, r2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10f      	bne.n	800989a <HAL_TIM_PWM_Stop+0x66>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6a1a      	ldr	r2, [r3, #32]
 8009880:	f240 4344 	movw	r3, #1092	; 0x444
 8009884:	4013      	ands	r3, r2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d107      	bne.n	800989a <HAL_TIM_PWM_Stop+0x66>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6a1a      	ldr	r2, [r3, #32]
 80098a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80098a4:	4013      	ands	r3, r2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10f      	bne.n	80098ca <HAL_TIM_PWM_Stop+0x96>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	6a1a      	ldr	r2, [r3, #32]
 80098b0:	f240 4344 	movw	r3, #1092	; 0x444
 80098b4:	4013      	ands	r3, r2
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d107      	bne.n	80098ca <HAL_TIM_PWM_Stop+0x96>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0201 	bic.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40012c00 	.word	0x40012c00
 80098e0:	40013400 	.word	0x40013400

080098e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d122      	bne.n	8009940 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b02      	cmp	r3, #2
 8009906:	d11b      	bne.n	8009940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f06f 0202 	mvn.w	r2, #2
 8009910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d003      	beq.n	800992e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 faa7 	bl	8009e7a <HAL_TIM_IC_CaptureCallback>
 800992c:	e005      	b.n	800993a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fa9a 	bl	8009e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 faa9 	bl	8009e8c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	f003 0304 	and.w	r3, r3, #4
 800994a:	2b04      	cmp	r3, #4
 800994c:	d122      	bne.n	8009994 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b04      	cmp	r3, #4
 800995a:	d11b      	bne.n	8009994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f06f 0204 	mvn.w	r2, #4
 8009964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2202      	movs	r2, #2
 800996a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa7d 	bl	8009e7a <HAL_TIM_IC_CaptureCallback>
 8009980:	e005      	b.n	800998e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa70 	bl	8009e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa7f 	bl	8009e8c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b08      	cmp	r3, #8
 80099a0:	d122      	bne.n	80099e8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b08      	cmp	r3, #8
 80099ae:	d11b      	bne.n	80099e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f06f 0208 	mvn.w	r2, #8
 80099b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2204      	movs	r2, #4
 80099be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	f003 0303 	and.w	r3, r3, #3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fa53 	bl	8009e7a <HAL_TIM_IC_CaptureCallback>
 80099d4:	e005      	b.n	80099e2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fa46 	bl	8009e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fa55 	bl	8009e8c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	f003 0310 	and.w	r3, r3, #16
 80099f2:	2b10      	cmp	r3, #16
 80099f4:	d122      	bne.n	8009a3c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f003 0310 	and.w	r3, r3, #16
 8009a00:	2b10      	cmp	r3, #16
 8009a02:	d11b      	bne.n	8009a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f06f 0210 	mvn.w	r2, #16
 8009a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2208      	movs	r2, #8
 8009a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	69db      	ldr	r3, [r3, #28]
 8009a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa29 	bl	8009e7a <HAL_TIM_IC_CaptureCallback>
 8009a28:	e005      	b.n	8009a36 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fa1c 	bl	8009e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fa2b 	bl	8009e8c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d10e      	bne.n	8009a68 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d107      	bne.n	8009a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f06f 0201 	mvn.w	r2, #1
 8009a60:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f9f7 	bl	8009e56 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a72:	2b80      	cmp	r3, #128	; 0x80
 8009a74:	d10e      	bne.n	8009a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a80:	2b80      	cmp	r3, #128	; 0x80
 8009a82:	d107      	bne.n	8009a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fdbc 	bl	800a60c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9e:	2b40      	cmp	r3, #64	; 0x40
 8009aa0:	d10e      	bne.n	8009ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	2b40      	cmp	r3, #64	; 0x40
 8009aae:	d107      	bne.n	8009ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ab8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f9ef 	bl	8009e9e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b20      	cmp	r3, #32
 8009acc:	d10e      	bne.n	8009aec <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d107      	bne.n	8009aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f06f 0220 	mvn.w	r2, #32
 8009ae4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fd87 	bl	800a5fa <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d101      	bne.n	8009b0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	e0b4      	b.n	8009c78 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b0c      	cmp	r3, #12
 8009b22:	f200 809f 	bhi.w	8009c64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009b26:	a201      	add	r2, pc, #4	; (adr r2, 8009b2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009b61 	.word	0x08009b61
 8009b30:	08009c65 	.word	0x08009c65
 8009b34:	08009c65 	.word	0x08009c65
 8009b38:	08009c65 	.word	0x08009c65
 8009b3c:	08009ba1 	.word	0x08009ba1
 8009b40:	08009c65 	.word	0x08009c65
 8009b44:	08009c65 	.word	0x08009c65
 8009b48:	08009c65 	.word	0x08009c65
 8009b4c:	08009be3 	.word	0x08009be3
 8009b50:	08009c65 	.word	0x08009c65
 8009b54:	08009c65 	.word	0x08009c65
 8009b58:	08009c65 	.word	0x08009c65
 8009b5c:	08009c23 	.word	0x08009c23
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68b9      	ldr	r1, [r7, #8]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fa20 	bl	8009fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699a      	ldr	r2, [r3, #24]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f042 0208 	orr.w	r2, r2, #8
 8009b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0204 	bic.w	r2, r2, #4
 8009b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6999      	ldr	r1, [r3, #24]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	619a      	str	r2, [r3, #24]
    }
    break;
 8009b9e:	e062      	b.n	8009c66 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fa76 	bl	800a098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	699a      	ldr	r2, [r3, #24]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6999      	ldr	r1, [r3, #24]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	021a      	lsls	r2, r3, #8
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	619a      	str	r2, [r3, #24]
    }
    break;
 8009be0:	e041      	b.n	8009c66 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 facf 	bl	800a18c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	69da      	ldr	r2, [r3, #28]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0208 	orr.w	r2, r2, #8
 8009bfc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69da      	ldr	r2, [r3, #28]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f022 0204 	bic.w	r2, r2, #4
 8009c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69d9      	ldr	r1, [r3, #28]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	691a      	ldr	r2, [r3, #16]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	61da      	str	r2, [r3, #28]
    }
    break;
 8009c20:	e021      	b.n	8009c66 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68b9      	ldr	r1, [r7, #8]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fb29 	bl	800a280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69da      	ldr	r2, [r3, #28]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c3c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	69da      	ldr	r2, [r3, #28]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	69d9      	ldr	r1, [r3, #28]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	021a      	lsls	r2, r3, #8
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	61da      	str	r2, [r3, #28]
    }
    break;
 8009c62:	e000      	b.n	8009c66 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8009c64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <HAL_TIM_ConfigClockSource+0x1c>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e0d8      	b.n	8009e4e <HAL_TIM_ConfigClockSource+0x1ce>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009cba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cd4:	d052      	beq.n	8009d7c <HAL_TIM_ConfigClockSource+0xfc>
 8009cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cda:	f200 80ae 	bhi.w	8009e3a <HAL_TIM_ConfigClockSource+0x1ba>
 8009cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce2:	d027      	beq.n	8009d34 <HAL_TIM_ConfigClockSource+0xb4>
 8009ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce8:	f200 80a7 	bhi.w	8009e3a <HAL_TIM_ConfigClockSource+0x1ba>
 8009cec:	2b70      	cmp	r3, #112	; 0x70
 8009cee:	d02a      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0xc6>
 8009cf0:	2b70      	cmp	r3, #112	; 0x70
 8009cf2:	f200 80a2 	bhi.w	8009e3a <HAL_TIM_ConfigClockSource+0x1ba>
 8009cf6:	2b60      	cmp	r3, #96	; 0x60
 8009cf8:	d063      	beq.n	8009dc2 <HAL_TIM_ConfigClockSource+0x142>
 8009cfa:	2b60      	cmp	r3, #96	; 0x60
 8009cfc:	f200 809d 	bhi.w	8009e3a <HAL_TIM_ConfigClockSource+0x1ba>
 8009d00:	2b50      	cmp	r3, #80	; 0x50
 8009d02:	d04e      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x122>
 8009d04:	2b50      	cmp	r3, #80	; 0x50
 8009d06:	f200 8098 	bhi.w	8009e3a <HAL_TIM_ConfigClockSource+0x1ba>
 8009d0a:	2b40      	cmp	r3, #64	; 0x40
 8009d0c:	d069      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x162>
 8009d0e:	2b40      	cmp	r3, #64	; 0x40
 8009d10:	f200 8093 	bhi.w	8009e3a <HAL_TIM_ConfigClockSource+0x1ba>
 8009d14:	2b30      	cmp	r3, #48	; 0x30
 8009d16:	f000 8089 	beq.w	8009e2c <HAL_TIM_ConfigClockSource+0x1ac>
 8009d1a:	2b30      	cmp	r3, #48	; 0x30
 8009d1c:	f200 808d 	bhi.w	8009e3a <HAL_TIM_ConfigClockSource+0x1ba>
 8009d20:	2b20      	cmp	r3, #32
 8009d22:	d07c      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x19e>
 8009d24:	2b20      	cmp	r3, #32
 8009d26:	f200 8088 	bhi.w	8009e3a <HAL_TIM_ConfigClockSource+0x1ba>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d069      	beq.n	8009e02 <HAL_TIM_ConfigClockSource+0x182>
 8009d2e:	2b10      	cmp	r3, #16
 8009d30:	d06e      	beq.n	8009e10 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8009d32:	e082      	b.n	8009e3a <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f022 0207 	bic.w	r2, r2, #7
 8009d42:	609a      	str	r2, [r3, #8]
    break;
 8009d44:	e07a      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	6899      	ldr	r1, [r3, #8]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f000 fb71 	bl	800a43c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	609a      	str	r2, [r3, #8]
    break;
 8009d7a:	e05f      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	6899      	ldr	r1, [r3, #8]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f000 fb56 	bl	800a43c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	689a      	ldr	r2, [r3, #8]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d9e:	609a      	str	r2, [r3, #8]
    break;
 8009da0:	e04c      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	6859      	ldr	r1, [r3, #4]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f000 fac0 	bl	800a334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2150      	movs	r1, #80	; 0x50
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fb1f 	bl	800a3fe <TIM_ITRx_SetConfig>
    break;
 8009dc0:	e03c      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	6859      	ldr	r1, [r3, #4]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f000 fae2 	bl	800a398 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2160      	movs	r1, #96	; 0x60
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 fb0f 	bl	800a3fe <TIM_ITRx_SetConfig>
    break;
 8009de0:	e02c      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	6859      	ldr	r1, [r3, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f000 faa0 	bl	800a334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2140      	movs	r1, #64	; 0x40
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 faff 	bl	800a3fe <TIM_ITRx_SetConfig>
    break;
 8009e00:	e01c      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2100      	movs	r1, #0
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 faf8 	bl	800a3fe <TIM_ITRx_SetConfig>
    break;
 8009e0e:	e015      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2110      	movs	r1, #16
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 faf1 	bl	800a3fe <TIM_ITRx_SetConfig>
    break;
 8009e1c:	e00e      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2120      	movs	r1, #32
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 faea 	bl	800a3fe <TIM_ITRx_SetConfig>
    break;
 8009e2a:	e007      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2130      	movs	r1, #48	; 0x30
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fae3 	bl	800a3fe <TIM_ITRx_SetConfig>
    break;
 8009e38:	e000      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8009e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b083      	sub	sp, #12
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8009e5e:	bf00      	nop
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bc80      	pop	{r7}
 8009e66:	4770      	bx	lr

08009e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bc80      	pop	{r7}
 8009e78:	4770      	bx	lr

08009e7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bc80      	pop	{r7}
 8009e8a:	4770      	bx	lr

08009e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr

08009eb0 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a34      	ldr	r2, [pc, #208]	; (8009f98 <TIM_Base_SetConfig+0xe8>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d013      	beq.n	8009ef4 <TIM_Base_SetConfig+0x44>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a33      	ldr	r2, [pc, #204]	; (8009f9c <TIM_Base_SetConfig+0xec>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00f      	beq.n	8009ef4 <TIM_Base_SetConfig+0x44>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eda:	d00b      	beq.n	8009ef4 <TIM_Base_SetConfig+0x44>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a30      	ldr	r2, [pc, #192]	; (8009fa0 <TIM_Base_SetConfig+0xf0>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d007      	beq.n	8009ef4 <TIM_Base_SetConfig+0x44>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a2f      	ldr	r2, [pc, #188]	; (8009fa4 <TIM_Base_SetConfig+0xf4>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d003      	beq.n	8009ef4 <TIM_Base_SetConfig+0x44>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a2e      	ldr	r2, [pc, #184]	; (8009fa8 <TIM_Base_SetConfig+0xf8>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d108      	bne.n	8009f06 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a23      	ldr	r2, [pc, #140]	; (8009f98 <TIM_Base_SetConfig+0xe8>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d013      	beq.n	8009f36 <TIM_Base_SetConfig+0x86>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a22      	ldr	r2, [pc, #136]	; (8009f9c <TIM_Base_SetConfig+0xec>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00f      	beq.n	8009f36 <TIM_Base_SetConfig+0x86>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1c:	d00b      	beq.n	8009f36 <TIM_Base_SetConfig+0x86>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a1f      	ldr	r2, [pc, #124]	; (8009fa0 <TIM_Base_SetConfig+0xf0>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d007      	beq.n	8009f36 <TIM_Base_SetConfig+0x86>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a1e      	ldr	r2, [pc, #120]	; (8009fa4 <TIM_Base_SetConfig+0xf4>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d003      	beq.n	8009f36 <TIM_Base_SetConfig+0x86>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a1d      	ldr	r2, [pc, #116]	; (8009fa8 <TIM_Base_SetConfig+0xf8>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d108      	bne.n	8009f48 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f4e:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a09      	ldr	r2, [pc, #36]	; (8009f98 <TIM_Base_SetConfig+0xe8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d003      	beq.n	8009f80 <TIM_Base_SetConfig+0xd0>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a08      	ldr	r2, [pc, #32]	; (8009f9c <TIM_Base_SetConfig+0xec>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d103      	bne.n	8009f88 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	691a      	ldr	r2, [r3, #16]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	615a      	str	r2, [r3, #20]
}
 8009f8e:	bf00      	nop
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bc80      	pop	{r7}
 8009f96:	4770      	bx	lr
 8009f98:	40012c00 	.word	0x40012c00
 8009f9c:	40013400 	.word	0x40013400
 8009fa0:	40000400 	.word	0x40000400
 8009fa4:	40000800 	.word	0x40000800
 8009fa8:	40000c00 	.word	0x40000c00

08009fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	f023 0201 	bic.w	r2, r3, #1
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 0303 	bic.w	r3, r3, #3
 8009fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f023 0302 	bic.w	r3, r3, #2
 800a000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	4313      	orrs	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a20      	ldr	r2, [pc, #128]	; (800a090 <TIM_OC1_SetConfig+0xe4>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d003      	beq.n	800a01c <TIM_OC1_SetConfig+0x70>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a1f      	ldr	r2, [pc, #124]	; (800a094 <TIM_OC1_SetConfig+0xe8>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d10c      	bne.n	800a036 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f023 0308 	bic.w	r3, r3, #8
 800a022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f023 0304 	bic.w	r3, r3, #4
 800a034:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a15      	ldr	r2, [pc, #84]	; (800a090 <TIM_OC1_SetConfig+0xe4>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d003      	beq.n	800a046 <TIM_OC1_SetConfig+0x9a>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a14      	ldr	r2, [pc, #80]	; (800a094 <TIM_OC1_SetConfig+0xe8>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d111      	bne.n	800a06a <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a04c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	621a      	str	r2, [r3, #32]
}
 800a084:	bf00      	nop
 800a086:	371c      	adds	r7, #28
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	40012c00 	.word	0x40012c00
 800a094:	40013400 	.word	0x40013400

0800a098 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f023 0210 	bic.w	r2, r3, #16
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	021b      	lsls	r3, r3, #8
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f023 0320 	bic.w	r3, r3, #32
 800a0ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	011b      	lsls	r3, r3, #4
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a21      	ldr	r2, [pc, #132]	; (800a184 <TIM_OC2_SetConfig+0xec>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d003      	beq.n	800a10c <TIM_OC2_SetConfig+0x74>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a20      	ldr	r2, [pc, #128]	; (800a188 <TIM_OC2_SetConfig+0xf0>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d10d      	bne.n	800a128 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	011b      	lsls	r3, r3, #4
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a126:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a16      	ldr	r2, [pc, #88]	; (800a184 <TIM_OC2_SetConfig+0xec>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d003      	beq.n	800a138 <TIM_OC2_SetConfig+0xa0>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a15      	ldr	r2, [pc, #84]	; (800a188 <TIM_OC2_SetConfig+0xf0>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d113      	bne.n	800a160 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a13e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	4313      	orrs	r3, r2
 800a152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	621a      	str	r2, [r3, #32]
}
 800a17a:	bf00      	nop
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	bc80      	pop	{r7}
 800a182:	4770      	bx	lr
 800a184:	40012c00 	.word	0x40012c00
 800a188:	40013400 	.word	0x40013400

0800a18c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f023 0303 	bic.w	r3, r3, #3
 800a1ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	021b      	lsls	r3, r3, #8
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a21      	ldr	r2, [pc, #132]	; (800a278 <TIM_OC3_SetConfig+0xec>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d003      	beq.n	800a1fe <TIM_OC3_SetConfig+0x72>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a20      	ldr	r2, [pc, #128]	; (800a27c <TIM_OC3_SetConfig+0xf0>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d10d      	bne.n	800a21a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	021b      	lsls	r3, r3, #8
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a218:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a16      	ldr	r2, [pc, #88]	; (800a278 <TIM_OC3_SetConfig+0xec>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d003      	beq.n	800a22a <TIM_OC3_SetConfig+0x9e>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a15      	ldr	r2, [pc, #84]	; (800a27c <TIM_OC3_SetConfig+0xf0>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d113      	bne.n	800a252 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	011b      	lsls	r3, r3, #4
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	4313      	orrs	r3, r2
 800a244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4313      	orrs	r3, r2
 800a250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	621a      	str	r2, [r3, #32]
}
 800a26c:	bf00      	nop
 800a26e:	371c      	adds	r7, #28
 800a270:	46bd      	mov	sp, r7
 800a272:	bc80      	pop	{r7}
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	40012c00 	.word	0x40012c00
 800a27c:	40013400 	.word	0x40013400

0800a280 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ba:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2c2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2d6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	031b      	lsls	r3, r3, #12
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a11      	ldr	r2, [pc, #68]	; (800a32c <TIM_OC4_SetConfig+0xac>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d003      	beq.n	800a2f4 <TIM_OC4_SetConfig+0x74>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a10      	ldr	r2, [pc, #64]	; (800a330 <TIM_OC4_SetConfig+0xb0>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d109      	bne.n	800a308 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	019b      	lsls	r3, r3, #6
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	4313      	orrs	r3, r2
 800a306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	621a      	str	r2, [r3, #32]
}
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	bc80      	pop	{r7}
 800a32a:	4770      	bx	lr
 800a32c:	40012c00 	.word	0x40012c00
 800a330:	40013400 	.word	0x40013400

0800a334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800a340:	2300      	movs	r3, #0
 800a342:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800a344:	2300      	movs	r3, #0
 800a346:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
 800a34c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	f023 0201 	bic.w	r2, r3, #1
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a366:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	011b      	lsls	r3, r3, #4
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	4313      	orrs	r3, r2
 800a370:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f023 030a 	bic.w	r3, r3, #10
 800a378:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4313      	orrs	r3, r2
 800a380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	621a      	str	r2, [r3, #32]
}
 800a38e:	bf00      	nop
 800a390:	371c      	adds	r7, #28
 800a392:	46bd      	mov	sp, r7
 800a394:	bc80      	pop	{r7}
 800a396:	4770      	bx	lr

0800a398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6a1b      	ldr	r3, [r3, #32]
 800a3b0:	f023 0210 	bic.w	r2, r3, #16
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	031b      	lsls	r3, r3, #12
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	011b      	lsls	r3, r3, #4
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	621a      	str	r2, [r3, #32]
}
 800a3f4:	bf00      	nop
 800a3f6:	371c      	adds	r7, #28
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bc80      	pop	{r7}
 800a3fc:	4770      	bx	lr

0800a3fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b085      	sub	sp, #20
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	460b      	mov	r3, r1
 800a408:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a41c:	887b      	ldrh	r3, [r7, #2]
 800a41e:	f043 0307 	orr.w	r3, r3, #7
 800a422:	b29b      	uxth	r3, r3
 800a424:	461a      	mov	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	4313      	orrs	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	609a      	str	r2, [r3, #8]
}
 800a432:	bf00      	nop
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	bc80      	pop	{r7}
 800a43a:	4770      	bx	lr

0800a43c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a45a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	021a      	lsls	r2, r3, #8
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	431a      	orrs	r2, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	4313      	orrs	r3, r2
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	609a      	str	r2, [r3, #8]
}
 800a474:	bf00      	nop
 800a476:	371c      	adds	r7, #28
 800a478:	46bd      	mov	sp, r7
 800a47a:	bc80      	pop	{r7}
 800a47c:	4770      	bx	lr

0800a47e <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a47e:	b480      	push	{r7}
 800a480:	b087      	sub	sp, #28
 800a482:	af00      	add	r7, sp, #0
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	60b9      	str	r1, [r7, #8]
 800a488:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800a48e:	2201      	movs	r2, #1
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	fa02 f303 	lsl.w	r3, r2, r3
 800a496:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6a1a      	ldr	r2, [r3, #32]
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	43db      	mvns	r3, r3
 800a4a0:	401a      	ands	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6a1a      	ldr	r2, [r3, #32]
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	621a      	str	r2, [r3, #32]
}
 800a4b8:	bf00      	nop
 800a4ba:	371c      	adds	r7, #28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bc80      	pop	{r7}
 800a4c0:	4770      	bx	lr

0800a4c2 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d101      	bne.n	800a4de <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	e044      	b.n	800a568 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	4313      	orrs	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	4313      	orrs	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	4313      	orrs	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bc80      	pop	{r7}
 800a570:	4770      	bx	lr

0800a572 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a582:	2b01      	cmp	r3, #1
 800a584:	d101      	bne.n	800a58a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a586:	2302      	movs	r3, #2
 800a588:	e032      	b.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2202      	movs	r2, #2
 800a596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a5a8:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6859      	ldr	r1, [r3, #4]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689a      	ldr	r2, [r3, #8]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5ca:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6899      	ldr	r1, [r3, #8]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	685a      	ldr	r2, [r3, #4]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bc80      	pop	{r7}
 800a5f8:	4770      	bx	lr

0800a5fa <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b083      	sub	sp, #12
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800a602:	bf00      	nop
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	bc80      	pop	{r7}
 800a60a:	4770      	bx	lr

0800a60c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	bc80      	pop	{r7}
 800a61c:	4770      	bx	lr

0800a61e <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e03f      	b.n	800a6b0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d106      	bne.n	800a64a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7fb fe61 	bl	800630c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2224      	movs	r2, #36	; 0x24
 800a64e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68da      	ldr	r2, [r3, #12]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a660:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fb40 	bl	800ace8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691a      	ldr	r2, [r3, #16]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a676:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	695a      	ldr	r2, [r3, #20]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a686:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a696:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b20      	cmp	r3, #32
 800a6d6:	f040 8083 	bne.w	800a7e0 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <HAL_UART_Transmit+0x2e>
 800a6e0:	88fb      	ldrh	r3, [r7, #6]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e07b      	b.n	800a7e2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d101      	bne.n	800a6f8 <HAL_UART_Transmit+0x40>
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	e074      	b.n	800a7e2 <HAL_UART_Transmit+0x12a>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2221      	movs	r2, #33	; 0x21
 800a70a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a70e:	f7fc ff37 	bl	8007580 <HAL_GetTick>
 800a712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	88fa      	ldrh	r2, [r7, #6]
 800a718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	88fa      	ldrh	r2, [r7, #6]
 800a71e:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800a720:	e042      	b.n	800a7a8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a726:	b29b      	uxth	r3, r3
 800a728:	3b01      	subs	r3, #1
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a738:	d122      	bne.n	800a780 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2200      	movs	r2, #0
 800a742:	2180      	movs	r1, #128	; 0x80
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 f966 	bl	800aa16 <UART_WaitOnFlagUntilTimeout>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e046      	b.n	800a7e2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	461a      	mov	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a766:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	3302      	adds	r3, #2
 800a774:	60bb      	str	r3, [r7, #8]
 800a776:	e017      	b.n	800a7a8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	3301      	adds	r3, #1
 800a77c:	60bb      	str	r3, [r7, #8]
 800a77e:	e013      	b.n	800a7a8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	2200      	movs	r2, #0
 800a788:	2180      	movs	r1, #128	; 0x80
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 f943 	bl	800aa16 <UART_WaitOnFlagUntilTimeout>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e023      	b.n	800a7e2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	60ba      	str	r2, [r7, #8]
 800a7a0:	781a      	ldrb	r2, [r3, #0]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1b7      	bne.n	800a722 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2140      	movs	r1, #64	; 0x40
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f000 f92a 	bl	800aa16 <UART_WaitOnFlagUntilTimeout>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e00a      	b.n	800a7e2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e000      	b.n	800a7e2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a7e0:	2302      	movs	r3, #2
  }
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b088      	sub	sp, #32
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800a80c:	2300      	movs	r3, #0
 800a80e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800a810:	2300      	movs	r3, #0
 800a812:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	f003 030f 	and.w	r3, r3, #15
 800a81a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10d      	bne.n	800a83e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	f003 0320 	and.w	r3, r3, #32
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d008      	beq.n	800a83e <HAL_UART_IRQHandler+0x52>
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	f003 0320 	and.w	r3, r3, #32
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f9d5 	bl	800abe6 <UART_Receive_IT>
      return;
 800a83c:	e0cb      	b.n	800a9d6 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 80ab 	beq.w	800a99c <HAL_UART_IRQHandler+0x1b0>
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d105      	bne.n	800a85c <HAL_UART_IRQHandler+0x70>
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 80a0 	beq.w	800a99c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <HAL_UART_IRQHandler+0x90>
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d005      	beq.n	800a87c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a874:	f043 0201 	orr.w	r2, r3, #1
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	f003 0304 	and.w	r3, r3, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <HAL_UART_IRQHandler+0xb0>
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f003 0301 	and.w	r3, r3, #1
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a894:	f043 0202 	orr.w	r2, r3, #2
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <HAL_UART_IRQHandler+0xd0>
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b4:	f043 0204 	orr.w	r2, r3, #4
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	f003 0308 	and.w	r3, r3, #8
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <HAL_UART_IRQHandler+0xf0>
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d005      	beq.n	800a8dc <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d4:	f043 0208 	orr.w	r2, r3, #8
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d077      	beq.n	800a9d4 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	f003 0320 	and.w	r3, r3, #32
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d007      	beq.n	800a8fe <HAL_UART_IRQHandler+0x112>
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	f003 0320 	and.w	r3, r3, #32
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f974 	bl	800abe6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	695b      	ldr	r3, [r3, #20]
 800a904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bf14      	ite	ne
 800a90c:	2301      	movne	r3, #1
 800a90e:	2300      	moveq	r3, #0
 800a910:	b2db      	uxtb	r3, r3
 800a912:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a918:	f003 0308 	and.w	r3, r3, #8
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d102      	bne.n	800a926 <HAL_UART_IRQHandler+0x13a>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d031      	beq.n	800a98a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f8bf 	bl	800aaaa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a936:	2b00      	cmp	r3, #0
 800a938:	d023      	beq.n	800a982 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695a      	ldr	r2, [r3, #20]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a948:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d013      	beq.n	800a97a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a956:	4a21      	ldr	r2, [pc, #132]	; (800a9dc <HAL_UART_IRQHandler+0x1f0>)
 800a958:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fd fc04 	bl	800816c <HAL_DMA_Abort_IT>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d016      	beq.n	800a998 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a974:	4610      	mov	r0, r2
 800a976:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a978:	e00e      	b.n	800a998 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f842 	bl	800aa04 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a980:	e00a      	b.n	800a998 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f83e 	bl	800aa04 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a988:	e006      	b.n	800a998 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f83a 	bl	800aa04 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a996:	e01d      	b.n	800a9d4 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a998:	bf00      	nop
    return;
 800a99a:	e01b      	b.n	800a9d4 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d008      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x1cc>
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d003      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f8ab 	bl	800ab0c <UART_Transmit_IT>
    return;
 800a9b6:	e00e      	b.n	800a9d6 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d009      	beq.n	800a9d6 <HAL_UART_IRQHandler+0x1ea>
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d004      	beq.n	800a9d6 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 f8f2 	bl	800abb6 <UART_EndTransmit_IT>
    return;
 800a9d2:	e000      	b.n	800a9d6 <HAL_UART_IRQHandler+0x1ea>
    return;
 800a9d4:	bf00      	nop
  }
}
 800a9d6:	3720      	adds	r7, #32
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	0800aae5 	.word	0x0800aae5

0800a9e0 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bc80      	pop	{r7}
 800a9f0:	4770      	bx	lr

0800a9f2 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a9fa:	bf00      	nop
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bc80      	pop	{r7}
 800aa02:	4770      	bx	lr

0800aa04 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bc80      	pop	{r7}
 800aa14:	4770      	bx	lr

0800aa16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b084      	sub	sp, #16
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	60f8      	str	r0, [r7, #12]
 800aa1e:	60b9      	str	r1, [r7, #8]
 800aa20:	603b      	str	r3, [r7, #0]
 800aa22:	4613      	mov	r3, r2
 800aa24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800aa26:	e02c      	b.n	800aa82 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2e:	d028      	beq.n	800aa82 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d007      	beq.n	800aa46 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa36:	f7fc fda3 	bl	8007580 <HAL_GetTick>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	69ba      	ldr	r2, [r7, #24]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d21d      	bcs.n	800aa82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68da      	ldr	r2, [r3, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	695a      	ldr	r2, [r3, #20]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 0201 	bic.w	r2, r2, #1
 800aa64:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2220      	movs	r2, #32
 800aa6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2220      	movs	r2, #32
 800aa72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e00f      	b.n	800aaa2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	bf0c      	ite	eq
 800aa92:	2301      	moveq	r3, #1
 800aa94:	2300      	movne	r3, #0
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	461a      	mov	r2, r3
 800aa9a:	79fb      	ldrb	r3, [r7, #7]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d0c3      	beq.n	800aa28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68da      	ldr	r2, [r3, #12]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aac0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	695a      	ldr	r2, [r3, #20]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 0201 	bic.w	r2, r2, #1
 800aad0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800aada:	bf00      	nop
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	bc80      	pop	{r7}
 800aae2:	4770      	bx	lr

0800aae4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f7ff ff80 	bl	800aa04 <HAL_UART_ErrorCallback>
}
 800ab04:	bf00      	nop
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b21      	cmp	r3, #33	; 0x21
 800ab1e:	d144      	bne.n	800abaa <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab28:	d11a      	bne.n	800ab60 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab3e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d105      	bne.n	800ab54 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	1c9a      	adds	r2, r3, #2
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	621a      	str	r2, [r3, #32]
 800ab52:	e00e      	b.n	800ab72 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a1b      	ldr	r3, [r3, #32]
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	621a      	str	r2, [r3, #32]
 800ab5e:	e008      	b.n	800ab72 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a1b      	ldr	r3, [r3, #32]
 800ab64:	1c59      	adds	r1, r3, #1
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	6211      	str	r1, [r2, #32]
 800ab6a:	781a      	ldrb	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10f      	bne.n	800aba6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68da      	ldr	r2, [r3, #12]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aba4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	e000      	b.n	800abac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800abaa:	2302      	movs	r3, #2
  }
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bc80      	pop	{r7}
 800abb4:	4770      	bx	lr

0800abb6 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68da      	ldr	r2, [r3, #12]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abcc:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2220      	movs	r2, #32
 800abd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7ff ff02 	bl	800a9e0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b084      	sub	sp, #16
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b22      	cmp	r3, #34	; 0x22
 800abf8:	d171      	bne.n	800acde <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac02:	d123      	bne.n	800ac4c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10e      	bne.n	800ac30 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac28:	1c9a      	adds	r2, r3, #2
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	629a      	str	r2, [r3, #40]	; 0x28
 800ac2e:	e029      	b.n	800ac84 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	629a      	str	r2, [r3, #40]	; 0x28
 800ac4a:	e01b      	b.n	800ac84 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10a      	bne.n	800ac6a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6858      	ldr	r0, [r3, #4]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	1c59      	adds	r1, r3, #1
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	6291      	str	r1, [r2, #40]	; 0x28
 800ac64:	b2c2      	uxtb	r2, r0
 800ac66:	701a      	strb	r2, [r3, #0]
 800ac68:	e00c      	b.n	800ac84 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac76:	1c58      	adds	r0, r3, #1
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	6288      	str	r0, [r1, #40]	; 0x28
 800ac7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ac80:	b2d2      	uxtb	r2, r2
 800ac82:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	4619      	mov	r1, r3
 800ac92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d120      	bne.n	800acda <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68da      	ldr	r2, [r3, #12]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f022 0220 	bic.w	r2, r2, #32
 800aca6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68da      	ldr	r2, [r3, #12]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acb6:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	695a      	ldr	r2, [r3, #20]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f022 0201 	bic.w	r2, r2, #1
 800acc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2220      	movs	r2, #32
 800accc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff fe8e 	bl	800a9f2 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	e002      	b.n	800ace0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	e000      	b.n	800ace0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800acde:	2302      	movs	r3, #2
  }
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ace8:	b5b0      	push	{r4, r5, r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68da      	ldr	r2, [r3, #12]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	430a      	orrs	r2, r1
 800ad08:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	689a      	ldr	r2, [r3, #8]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ad2a:	f023 030c 	bic.w	r3, r3, #12
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6812      	ldr	r2, [r2, #0]
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	430b      	orrs	r3, r1
 800ad36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a6f      	ldr	r2, [pc, #444]	; (800af10 <UART_SetConfig+0x228>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d16b      	bne.n	800ae30 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ad58:	f7fe f8f2 	bl	8008f40 <HAL_RCC_GetPCLK2Freq>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009a      	lsls	r2, r3, #2
 800ad66:	441a      	add	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad72:	4a68      	ldr	r2, [pc, #416]	; (800af14 <UART_SetConfig+0x22c>)
 800ad74:	fba2 2303 	umull	r2, r3, r2, r3
 800ad78:	095b      	lsrs	r3, r3, #5
 800ad7a:	011c      	lsls	r4, r3, #4
 800ad7c:	f7fe f8e0 	bl	8008f40 <HAL_RCC_GetPCLK2Freq>
 800ad80:	4602      	mov	r2, r0
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	009a      	lsls	r2, r3, #2
 800ad8a:	441a      	add	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	fbb2 f5f3 	udiv	r5, r2, r3
 800ad96:	f7fe f8d3 	bl	8008f40 <HAL_RCC_GetPCLK2Freq>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4413      	add	r3, r2
 800ada2:	009a      	lsls	r2, r3, #2
 800ada4:	441a      	add	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb0:	4a58      	ldr	r2, [pc, #352]	; (800af14 <UART_SetConfig+0x22c>)
 800adb2:	fba2 2303 	umull	r2, r3, r2, r3
 800adb6:	095b      	lsrs	r3, r3, #5
 800adb8:	2264      	movs	r2, #100	; 0x64
 800adba:	fb02 f303 	mul.w	r3, r2, r3
 800adbe:	1aeb      	subs	r3, r5, r3
 800adc0:	011b      	lsls	r3, r3, #4
 800adc2:	3332      	adds	r3, #50	; 0x32
 800adc4:	4a53      	ldr	r2, [pc, #332]	; (800af14 <UART_SetConfig+0x22c>)
 800adc6:	fba2 2303 	umull	r2, r3, r2, r3
 800adca:	095b      	lsrs	r3, r3, #5
 800adcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800add0:	441c      	add	r4, r3
 800add2:	f7fe f8b5 	bl	8008f40 <HAL_RCC_GetPCLK2Freq>
 800add6:	4602      	mov	r2, r0
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009a      	lsls	r2, r3, #2
 800ade0:	441a      	add	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	fbb2 f5f3 	udiv	r5, r2, r3
 800adec:	f7fe f8a8 	bl	8008f40 <HAL_RCC_GetPCLK2Freq>
 800adf0:	4602      	mov	r2, r0
 800adf2:	4613      	mov	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	009a      	lsls	r2, r3, #2
 800adfa:	441a      	add	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae06:	4a43      	ldr	r2, [pc, #268]	; (800af14 <UART_SetConfig+0x22c>)
 800ae08:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0c:	095b      	lsrs	r3, r3, #5
 800ae0e:	2264      	movs	r2, #100	; 0x64
 800ae10:	fb02 f303 	mul.w	r3, r2, r3
 800ae14:	1aeb      	subs	r3, r5, r3
 800ae16:	011b      	lsls	r3, r3, #4
 800ae18:	3332      	adds	r3, #50	; 0x32
 800ae1a:	4a3e      	ldr	r2, [pc, #248]	; (800af14 <UART_SetConfig+0x22c>)
 800ae1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae20:	095b      	lsrs	r3, r3, #5
 800ae22:	f003 020f 	and.w	r2, r3, #15
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4422      	add	r2, r4
 800ae2c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800ae2e:	e06a      	b.n	800af06 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800ae30:	f7fe f872 	bl	8008f18 <HAL_RCC_GetPCLK1Freq>
 800ae34:	4602      	mov	r2, r0
 800ae36:	4613      	mov	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009a      	lsls	r2, r3, #2
 800ae3e:	441a      	add	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae4a:	4a32      	ldr	r2, [pc, #200]	; (800af14 <UART_SetConfig+0x22c>)
 800ae4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae50:	095b      	lsrs	r3, r3, #5
 800ae52:	011c      	lsls	r4, r3, #4
 800ae54:	f7fe f860 	bl	8008f18 <HAL_RCC_GetPCLK1Freq>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	009a      	lsls	r2, r3, #2
 800ae62:	441a      	add	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	fbb2 f5f3 	udiv	r5, r2, r3
 800ae6e:	f7fe f853 	bl	8008f18 <HAL_RCC_GetPCLK1Freq>
 800ae72:	4602      	mov	r2, r0
 800ae74:	4613      	mov	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	009a      	lsls	r2, r3, #2
 800ae7c:	441a      	add	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae88:	4a22      	ldr	r2, [pc, #136]	; (800af14 <UART_SetConfig+0x22c>)
 800ae8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae8e:	095b      	lsrs	r3, r3, #5
 800ae90:	2264      	movs	r2, #100	; 0x64
 800ae92:	fb02 f303 	mul.w	r3, r2, r3
 800ae96:	1aeb      	subs	r3, r5, r3
 800ae98:	011b      	lsls	r3, r3, #4
 800ae9a:	3332      	adds	r3, #50	; 0x32
 800ae9c:	4a1d      	ldr	r2, [pc, #116]	; (800af14 <UART_SetConfig+0x22c>)
 800ae9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aea2:	095b      	lsrs	r3, r3, #5
 800aea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aea8:	441c      	add	r4, r3
 800aeaa:	f7fe f835 	bl	8008f18 <HAL_RCC_GetPCLK1Freq>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4413      	add	r3, r2
 800aeb6:	009a      	lsls	r2, r3, #2
 800aeb8:	441a      	add	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	fbb2 f5f3 	udiv	r5, r2, r3
 800aec4:	f7fe f828 	bl	8008f18 <HAL_RCC_GetPCLK1Freq>
 800aec8:	4602      	mov	r2, r0
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009a      	lsls	r2, r3, #2
 800aed2:	441a      	add	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	fbb2 f3f3 	udiv	r3, r2, r3
 800aede:	4a0d      	ldr	r2, [pc, #52]	; (800af14 <UART_SetConfig+0x22c>)
 800aee0:	fba2 2303 	umull	r2, r3, r2, r3
 800aee4:	095b      	lsrs	r3, r3, #5
 800aee6:	2264      	movs	r2, #100	; 0x64
 800aee8:	fb02 f303 	mul.w	r3, r2, r3
 800aeec:	1aeb      	subs	r3, r5, r3
 800aeee:	011b      	lsls	r3, r3, #4
 800aef0:	3332      	adds	r3, #50	; 0x32
 800aef2:	4a08      	ldr	r2, [pc, #32]	; (800af14 <UART_SetConfig+0x22c>)
 800aef4:	fba2 2303 	umull	r2, r3, r2, r3
 800aef8:	095b      	lsrs	r3, r3, #5
 800aefa:	f003 020f 	and.w	r2, r3, #15
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4422      	add	r2, r4
 800af04:	609a      	str	r2, [r3, #8]
}
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bdb0      	pop	{r4, r5, r7, pc}
 800af0e:	bf00      	nop
 800af10:	40013800 	.word	0x40013800
 800af14:	51eb851f 	.word	0x51eb851f

0800af18 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	6812      	ldr	r2, [r2, #0]
 800af30:	f023 0101 	bic.w	r1, r3, #1
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	2b08      	cmp	r3, #8
 800af40:	d132      	bne.n	800afa8 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af4c:	4b31      	ldr	r3, [pc, #196]	; (800b014 <FSMC_NORSRAM_Init+0xfc>)
 800af4e:	4013      	ands	r3, r2
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	6851      	ldr	r1, [r2, #4]
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	6892      	ldr	r2, [r2, #8]
 800af58:	4311      	orrs	r1, r2
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	68d2      	ldr	r2, [r2, #12]
 800af5e:	4311      	orrs	r1, r2
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	6912      	ldr	r2, [r2, #16]
 800af64:	4311      	orrs	r1, r2
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	6952      	ldr	r2, [r2, #20]
 800af6a:	4311      	orrs	r1, r2
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	6992      	ldr	r2, [r2, #24]
 800af70:	4311      	orrs	r1, r2
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	69d2      	ldr	r2, [r2, #28]
 800af76:	4311      	orrs	r1, r2
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	6a12      	ldr	r2, [r2, #32]
 800af7c:	4311      	orrs	r1, r2
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af82:	4311      	orrs	r1, r2
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800af88:	4311      	orrs	r1, r2
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af8e:	4311      	orrs	r1, r2
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af94:	430a      	orrs	r2, r1
 800af96:	4313      	orrs	r3, r2
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	6812      	ldr	r2, [r2, #0]
 800af9c:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800afa6:	e02f      	b.n	800b008 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800afb2:	4b18      	ldr	r3, [pc, #96]	; (800b014 <FSMC_NORSRAM_Init+0xfc>)
 800afb4:	4013      	ands	r3, r2
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	6851      	ldr	r1, [r2, #4]
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	6892      	ldr	r2, [r2, #8]
 800afbe:	4311      	orrs	r1, r2
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	68d2      	ldr	r2, [r2, #12]
 800afc4:	4311      	orrs	r1, r2
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	6912      	ldr	r2, [r2, #16]
 800afca:	4311      	orrs	r1, r2
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	6952      	ldr	r2, [r2, #20]
 800afd0:	4311      	orrs	r1, r2
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	6992      	ldr	r2, [r2, #24]
 800afd6:	4311      	orrs	r1, r2
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	69d2      	ldr	r2, [r2, #28]
 800afdc:	4311      	orrs	r1, r2
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	6a12      	ldr	r2, [r2, #32]
 800afe2:	4311      	orrs	r1, r2
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800afe8:	4311      	orrs	r1, r2
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800afee:	4311      	orrs	r1, r2
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aff4:	4311      	orrs	r1, r2
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800affa:	4311      	orrs	r1, r2
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	6812      	ldr	r2, [r2, #0]
 800b000:	4319      	orrs	r1, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr
 800b014:	fff70081 	.word	0xfff70081

0800b018 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	011b      	lsls	r3, r3, #4
 800b03c:	431a      	orrs	r2, r3
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	021b      	lsls	r3, r3, #8
 800b044:	431a      	orrs	r2, r3
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	041b      	lsls	r3, r3, #16
 800b04c:	431a      	orrs	r2, r3
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	3b01      	subs	r3, #1
 800b054:	051b      	lsls	r3, r3, #20
 800b056:	431a      	orrs	r2, r3
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	3b02      	subs	r3, #2
 800b05e:	061b      	lsls	r3, r3, #24
 800b060:	431a      	orrs	r2, r3
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	4313      	orrs	r3, r2
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	3201      	adds	r2, #1
 800b06c:	4319      	orrs	r1, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bc80      	pop	{r7}
 800b07e:	4770      	bx	lr

0800b080 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
 800b08c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b094:	d11d      	bne.n	800b0d2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b09e:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	6811      	ldr	r1, [r2, #0]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	6852      	ldr	r2, [r2, #4]
 800b0aa:	0112      	lsls	r2, r2, #4
 800b0ac:	4311      	orrs	r1, r2
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	6892      	ldr	r2, [r2, #8]
 800b0b2:	0212      	lsls	r2, r2, #8
 800b0b4:	4311      	orrs	r1, r2
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	6992      	ldr	r2, [r2, #24]
 800b0ba:	4311      	orrs	r1, r2
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	68d2      	ldr	r2, [r2, #12]
 800b0c0:	0412      	lsls	r2, r2, #16
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	ea43 0102 	orr.w	r1, r3, r2
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b0d0:	e005      	b.n	800b0de <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b0da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bc80      	pop	{r7}
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	cff00000 	.word	0xcff00000

0800b0f0 <__errno>:
 800b0f0:	4b01      	ldr	r3, [pc, #4]	; (800b0f8 <__errno+0x8>)
 800b0f2:	6818      	ldr	r0, [r3, #0]
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	20000050 	.word	0x20000050

0800b0fc <__libc_init_array>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	2600      	movs	r6, #0
 800b100:	4d0c      	ldr	r5, [pc, #48]	; (800b134 <__libc_init_array+0x38>)
 800b102:	4c0d      	ldr	r4, [pc, #52]	; (800b138 <__libc_init_array+0x3c>)
 800b104:	1b64      	subs	r4, r4, r5
 800b106:	10a4      	asrs	r4, r4, #2
 800b108:	42a6      	cmp	r6, r4
 800b10a:	d109      	bne.n	800b120 <__libc_init_array+0x24>
 800b10c:	f001 fe62 	bl	800cdd4 <_init>
 800b110:	2600      	movs	r6, #0
 800b112:	4d0a      	ldr	r5, [pc, #40]	; (800b13c <__libc_init_array+0x40>)
 800b114:	4c0a      	ldr	r4, [pc, #40]	; (800b140 <__libc_init_array+0x44>)
 800b116:	1b64      	subs	r4, r4, r5
 800b118:	10a4      	asrs	r4, r4, #2
 800b11a:	42a6      	cmp	r6, r4
 800b11c:	d105      	bne.n	800b12a <__libc_init_array+0x2e>
 800b11e:	bd70      	pop	{r4, r5, r6, pc}
 800b120:	f855 3b04 	ldr.w	r3, [r5], #4
 800b124:	4798      	blx	r3
 800b126:	3601      	adds	r6, #1
 800b128:	e7ee      	b.n	800b108 <__libc_init_array+0xc>
 800b12a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b12e:	4798      	blx	r3
 800b130:	3601      	adds	r6, #1
 800b132:	e7f2      	b.n	800b11a <__libc_init_array+0x1e>
 800b134:	08077508 	.word	0x08077508
 800b138:	08077508 	.word	0x08077508
 800b13c:	08077508 	.word	0x08077508
 800b140:	0807750c 	.word	0x0807750c

0800b144 <memset>:
 800b144:	4603      	mov	r3, r0
 800b146:	4402      	add	r2, r0
 800b148:	4293      	cmp	r3, r2
 800b14a:	d100      	bne.n	800b14e <memset+0xa>
 800b14c:	4770      	bx	lr
 800b14e:	f803 1b01 	strb.w	r1, [r3], #1
 800b152:	e7f9      	b.n	800b148 <memset+0x4>

0800b154 <siscanf>:
 800b154:	b40e      	push	{r1, r2, r3}
 800b156:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b15a:	b530      	push	{r4, r5, lr}
 800b15c:	b09c      	sub	sp, #112	; 0x70
 800b15e:	ac1f      	add	r4, sp, #124	; 0x7c
 800b160:	f854 5b04 	ldr.w	r5, [r4], #4
 800b164:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b168:	9002      	str	r0, [sp, #8]
 800b16a:	9006      	str	r0, [sp, #24]
 800b16c:	f7f5 f85c 	bl	8000228 <strlen>
 800b170:	4b0b      	ldr	r3, [pc, #44]	; (800b1a0 <siscanf+0x4c>)
 800b172:	9003      	str	r0, [sp, #12]
 800b174:	930b      	str	r3, [sp, #44]	; 0x2c
 800b176:	2300      	movs	r3, #0
 800b178:	930f      	str	r3, [sp, #60]	; 0x3c
 800b17a:	9314      	str	r3, [sp, #80]	; 0x50
 800b17c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b180:	9007      	str	r0, [sp, #28]
 800b182:	4808      	ldr	r0, [pc, #32]	; (800b1a4 <siscanf+0x50>)
 800b184:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b188:	462a      	mov	r2, r5
 800b18a:	4623      	mov	r3, r4
 800b18c:	a902      	add	r1, sp, #8
 800b18e:	6800      	ldr	r0, [r0, #0]
 800b190:	9401      	str	r4, [sp, #4]
 800b192:	f000 f865 	bl	800b260 <__ssvfiscanf_r>
 800b196:	b01c      	add	sp, #112	; 0x70
 800b198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b19c:	b003      	add	sp, #12
 800b19e:	4770      	bx	lr
 800b1a0:	0800b1a9 	.word	0x0800b1a9
 800b1a4:	20000050 	.word	0x20000050

0800b1a8 <__seofread>:
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	4770      	bx	lr

0800b1ac <_sungetc_r>:
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	1c4b      	adds	r3, r1, #1
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	d103      	bne.n	800b1bc <_sungetc_r+0x10>
 800b1b4:	f04f 35ff 	mov.w	r5, #4294967295
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	8993      	ldrh	r3, [r2, #12]
 800b1be:	b2cd      	uxtb	r5, r1
 800b1c0:	f023 0320 	bic.w	r3, r3, #32
 800b1c4:	8193      	strh	r3, [r2, #12]
 800b1c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1c8:	6852      	ldr	r2, [r2, #4]
 800b1ca:	b18b      	cbz	r3, 800b1f0 <_sungetc_r+0x44>
 800b1cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	dd08      	ble.n	800b1e4 <_sungetc_r+0x38>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	1e5a      	subs	r2, r3, #1
 800b1d6:	6022      	str	r2, [r4, #0]
 800b1d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b1dc:	6863      	ldr	r3, [r4, #4]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	6063      	str	r3, [r4, #4]
 800b1e2:	e7e9      	b.n	800b1b8 <_sungetc_r+0xc>
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	f000 fc31 	bl	800ba4c <__submore>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d0f1      	beq.n	800b1d2 <_sungetc_r+0x26>
 800b1ee:	e7e1      	b.n	800b1b4 <_sungetc_r+0x8>
 800b1f0:	6921      	ldr	r1, [r4, #16]
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	b151      	cbz	r1, 800b20c <_sungetc_r+0x60>
 800b1f6:	4299      	cmp	r1, r3
 800b1f8:	d208      	bcs.n	800b20c <_sungetc_r+0x60>
 800b1fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b1fe:	42a9      	cmp	r1, r5
 800b200:	d104      	bne.n	800b20c <_sungetc_r+0x60>
 800b202:	3b01      	subs	r3, #1
 800b204:	3201      	adds	r2, #1
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	6062      	str	r2, [r4, #4]
 800b20a:	e7d5      	b.n	800b1b8 <_sungetc_r+0xc>
 800b20c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b214:	6363      	str	r3, [r4, #52]	; 0x34
 800b216:	2303      	movs	r3, #3
 800b218:	63a3      	str	r3, [r4, #56]	; 0x38
 800b21a:	4623      	mov	r3, r4
 800b21c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	2301      	movs	r3, #1
 800b224:	e7dc      	b.n	800b1e0 <_sungetc_r+0x34>

0800b226 <__ssrefill_r>:
 800b226:	b510      	push	{r4, lr}
 800b228:	460c      	mov	r4, r1
 800b22a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b22c:	b169      	cbz	r1, 800b24a <__ssrefill_r+0x24>
 800b22e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b232:	4299      	cmp	r1, r3
 800b234:	d001      	beq.n	800b23a <__ssrefill_r+0x14>
 800b236:	f000 fc5f 	bl	800baf8 <_free_r>
 800b23a:	2000      	movs	r0, #0
 800b23c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b23e:	6360      	str	r0, [r4, #52]	; 0x34
 800b240:	6063      	str	r3, [r4, #4]
 800b242:	b113      	cbz	r3, 800b24a <__ssrefill_r+0x24>
 800b244:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b246:	6023      	str	r3, [r4, #0]
 800b248:	bd10      	pop	{r4, pc}
 800b24a:	6923      	ldr	r3, [r4, #16]
 800b24c:	f04f 30ff 	mov.w	r0, #4294967295
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	2300      	movs	r3, #0
 800b254:	6063      	str	r3, [r4, #4]
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	f043 0320 	orr.w	r3, r3, #32
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	e7f3      	b.n	800b248 <__ssrefill_r+0x22>

0800b260 <__ssvfiscanf_r>:
 800b260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b264:	460c      	mov	r4, r1
 800b266:	2100      	movs	r1, #0
 800b268:	4606      	mov	r6, r0
 800b26a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b26e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b272:	49a7      	ldr	r1, [pc, #668]	; (800b510 <__ssvfiscanf_r+0x2b0>)
 800b274:	f10d 0804 	add.w	r8, sp, #4
 800b278:	91a0      	str	r1, [sp, #640]	; 0x280
 800b27a:	49a6      	ldr	r1, [pc, #664]	; (800b514 <__ssvfiscanf_r+0x2b4>)
 800b27c:	4fa6      	ldr	r7, [pc, #664]	; (800b518 <__ssvfiscanf_r+0x2b8>)
 800b27e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b51c <__ssvfiscanf_r+0x2bc>
 800b282:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b286:	91a1      	str	r1, [sp, #644]	; 0x284
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	7813      	ldrb	r3, [r2, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 815c 	beq.w	800b54a <__ssvfiscanf_r+0x2ea>
 800b292:	5dd9      	ldrb	r1, [r3, r7]
 800b294:	1c55      	adds	r5, r2, #1
 800b296:	f011 0108 	ands.w	r1, r1, #8
 800b29a:	d019      	beq.n	800b2d0 <__ssvfiscanf_r+0x70>
 800b29c:	6863      	ldr	r3, [r4, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	dd0f      	ble.n	800b2c2 <__ssvfiscanf_r+0x62>
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	781a      	ldrb	r2, [r3, #0]
 800b2a6:	5cba      	ldrb	r2, [r7, r2]
 800b2a8:	0712      	lsls	r2, r2, #28
 800b2aa:	d401      	bmi.n	800b2b0 <__ssvfiscanf_r+0x50>
 800b2ac:	462a      	mov	r2, r5
 800b2ae:	e7ec      	b.n	800b28a <__ssvfiscanf_r+0x2a>
 800b2b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	3201      	adds	r2, #1
 800b2b6:	9245      	str	r2, [sp, #276]	; 0x114
 800b2b8:	6862      	ldr	r2, [r4, #4]
 800b2ba:	6023      	str	r3, [r4, #0]
 800b2bc:	3a01      	subs	r2, #1
 800b2be:	6062      	str	r2, [r4, #4]
 800b2c0:	e7ec      	b.n	800b29c <__ssvfiscanf_r+0x3c>
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2c8:	4798      	blx	r3
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d0e9      	beq.n	800b2a2 <__ssvfiscanf_r+0x42>
 800b2ce:	e7ed      	b.n	800b2ac <__ssvfiscanf_r+0x4c>
 800b2d0:	2b25      	cmp	r3, #37	; 0x25
 800b2d2:	d012      	beq.n	800b2fa <__ssvfiscanf_r+0x9a>
 800b2d4:	469a      	mov	sl, r3
 800b2d6:	6863      	ldr	r3, [r4, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f340 8094 	ble.w	800b406 <__ssvfiscanf_r+0x1a6>
 800b2de:	6822      	ldr	r2, [r4, #0]
 800b2e0:	7813      	ldrb	r3, [r2, #0]
 800b2e2:	4553      	cmp	r3, sl
 800b2e4:	f040 8131 	bne.w	800b54a <__ssvfiscanf_r+0x2ea>
 800b2e8:	6863      	ldr	r3, [r4, #4]
 800b2ea:	3201      	adds	r2, #1
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	6063      	str	r3, [r4, #4]
 800b2f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b2f2:	6022      	str	r2, [r4, #0]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	9345      	str	r3, [sp, #276]	; 0x114
 800b2f8:	e7d8      	b.n	800b2ac <__ssvfiscanf_r+0x4c>
 800b2fa:	9141      	str	r1, [sp, #260]	; 0x104
 800b2fc:	9143      	str	r1, [sp, #268]	; 0x10c
 800b2fe:	7853      	ldrb	r3, [r2, #1]
 800b300:	2b2a      	cmp	r3, #42	; 0x2a
 800b302:	bf04      	itt	eq
 800b304:	2310      	moveq	r3, #16
 800b306:	1c95      	addeq	r5, r2, #2
 800b308:	f04f 020a 	mov.w	r2, #10
 800b30c:	bf08      	it	eq
 800b30e:	9341      	streq	r3, [sp, #260]	; 0x104
 800b310:	46aa      	mov	sl, r5
 800b312:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b316:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b31a:	2b09      	cmp	r3, #9
 800b31c:	d91d      	bls.n	800b35a <__ssvfiscanf_r+0xfa>
 800b31e:	2203      	movs	r2, #3
 800b320:	487e      	ldr	r0, [pc, #504]	; (800b51c <__ssvfiscanf_r+0x2bc>)
 800b322:	f000 fbcd 	bl	800bac0 <memchr>
 800b326:	b140      	cbz	r0, 800b33a <__ssvfiscanf_r+0xda>
 800b328:	2301      	movs	r3, #1
 800b32a:	4655      	mov	r5, sl
 800b32c:	eba0 0009 	sub.w	r0, r0, r9
 800b330:	fa03 f000 	lsl.w	r0, r3, r0
 800b334:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b336:	4318      	orrs	r0, r3
 800b338:	9041      	str	r0, [sp, #260]	; 0x104
 800b33a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b33e:	2b78      	cmp	r3, #120	; 0x78
 800b340:	d806      	bhi.n	800b350 <__ssvfiscanf_r+0xf0>
 800b342:	2b57      	cmp	r3, #87	; 0x57
 800b344:	d810      	bhi.n	800b368 <__ssvfiscanf_r+0x108>
 800b346:	2b25      	cmp	r3, #37	; 0x25
 800b348:	d0c4      	beq.n	800b2d4 <__ssvfiscanf_r+0x74>
 800b34a:	d857      	bhi.n	800b3fc <__ssvfiscanf_r+0x19c>
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d065      	beq.n	800b41c <__ssvfiscanf_r+0x1bc>
 800b350:	2303      	movs	r3, #3
 800b352:	9347      	str	r3, [sp, #284]	; 0x11c
 800b354:	230a      	movs	r3, #10
 800b356:	9342      	str	r3, [sp, #264]	; 0x108
 800b358:	e072      	b.n	800b440 <__ssvfiscanf_r+0x1e0>
 800b35a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b35c:	4655      	mov	r5, sl
 800b35e:	fb02 1103 	mla	r1, r2, r3, r1
 800b362:	3930      	subs	r1, #48	; 0x30
 800b364:	9143      	str	r1, [sp, #268]	; 0x10c
 800b366:	e7d3      	b.n	800b310 <__ssvfiscanf_r+0xb0>
 800b368:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b36c:	2a20      	cmp	r2, #32
 800b36e:	d8ef      	bhi.n	800b350 <__ssvfiscanf_r+0xf0>
 800b370:	a101      	add	r1, pc, #4	; (adr r1, 800b378 <__ssvfiscanf_r+0x118>)
 800b372:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b376:	bf00      	nop
 800b378:	0800b42b 	.word	0x0800b42b
 800b37c:	0800b351 	.word	0x0800b351
 800b380:	0800b351 	.word	0x0800b351
 800b384:	0800b489 	.word	0x0800b489
 800b388:	0800b351 	.word	0x0800b351
 800b38c:	0800b351 	.word	0x0800b351
 800b390:	0800b351 	.word	0x0800b351
 800b394:	0800b351 	.word	0x0800b351
 800b398:	0800b351 	.word	0x0800b351
 800b39c:	0800b351 	.word	0x0800b351
 800b3a0:	0800b351 	.word	0x0800b351
 800b3a4:	0800b49f 	.word	0x0800b49f
 800b3a8:	0800b475 	.word	0x0800b475
 800b3ac:	0800b403 	.word	0x0800b403
 800b3b0:	0800b403 	.word	0x0800b403
 800b3b4:	0800b403 	.word	0x0800b403
 800b3b8:	0800b351 	.word	0x0800b351
 800b3bc:	0800b479 	.word	0x0800b479
 800b3c0:	0800b351 	.word	0x0800b351
 800b3c4:	0800b351 	.word	0x0800b351
 800b3c8:	0800b351 	.word	0x0800b351
 800b3cc:	0800b351 	.word	0x0800b351
 800b3d0:	0800b4af 	.word	0x0800b4af
 800b3d4:	0800b481 	.word	0x0800b481
 800b3d8:	0800b423 	.word	0x0800b423
 800b3dc:	0800b351 	.word	0x0800b351
 800b3e0:	0800b351 	.word	0x0800b351
 800b3e4:	0800b4ab 	.word	0x0800b4ab
 800b3e8:	0800b351 	.word	0x0800b351
 800b3ec:	0800b475 	.word	0x0800b475
 800b3f0:	0800b351 	.word	0x0800b351
 800b3f4:	0800b351 	.word	0x0800b351
 800b3f8:	0800b42b 	.word	0x0800b42b
 800b3fc:	3b45      	subs	r3, #69	; 0x45
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d8a6      	bhi.n	800b350 <__ssvfiscanf_r+0xf0>
 800b402:	2305      	movs	r3, #5
 800b404:	e01b      	b.n	800b43e <__ssvfiscanf_r+0x1de>
 800b406:	4621      	mov	r1, r4
 800b408:	4630      	mov	r0, r6
 800b40a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b40c:	4798      	blx	r3
 800b40e:	2800      	cmp	r0, #0
 800b410:	f43f af65 	beq.w	800b2de <__ssvfiscanf_r+0x7e>
 800b414:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b416:	2800      	cmp	r0, #0
 800b418:	f040 808d 	bne.w	800b536 <__ssvfiscanf_r+0x2d6>
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	e08f      	b.n	800b542 <__ssvfiscanf_r+0x2e2>
 800b422:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b424:	f042 0220 	orr.w	r2, r2, #32
 800b428:	9241      	str	r2, [sp, #260]	; 0x104
 800b42a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b42c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b430:	9241      	str	r2, [sp, #260]	; 0x104
 800b432:	2210      	movs	r2, #16
 800b434:	2b6f      	cmp	r3, #111	; 0x6f
 800b436:	bf34      	ite	cc
 800b438:	2303      	movcc	r3, #3
 800b43a:	2304      	movcs	r3, #4
 800b43c:	9242      	str	r2, [sp, #264]	; 0x108
 800b43e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b440:	6863      	ldr	r3, [r4, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	dd42      	ble.n	800b4cc <__ssvfiscanf_r+0x26c>
 800b446:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b448:	0659      	lsls	r1, r3, #25
 800b44a:	d404      	bmi.n	800b456 <__ssvfiscanf_r+0x1f6>
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	781a      	ldrb	r2, [r3, #0]
 800b450:	5cba      	ldrb	r2, [r7, r2]
 800b452:	0712      	lsls	r2, r2, #28
 800b454:	d441      	bmi.n	800b4da <__ssvfiscanf_r+0x27a>
 800b456:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b458:	2b02      	cmp	r3, #2
 800b45a:	dc50      	bgt.n	800b4fe <__ssvfiscanf_r+0x29e>
 800b45c:	466b      	mov	r3, sp
 800b45e:	4622      	mov	r2, r4
 800b460:	4630      	mov	r0, r6
 800b462:	a941      	add	r1, sp, #260	; 0x104
 800b464:	f000 f876 	bl	800b554 <_scanf_chars>
 800b468:	2801      	cmp	r0, #1
 800b46a:	d06e      	beq.n	800b54a <__ssvfiscanf_r+0x2ea>
 800b46c:	2802      	cmp	r0, #2
 800b46e:	f47f af1d 	bne.w	800b2ac <__ssvfiscanf_r+0x4c>
 800b472:	e7cf      	b.n	800b414 <__ssvfiscanf_r+0x1b4>
 800b474:	220a      	movs	r2, #10
 800b476:	e7dd      	b.n	800b434 <__ssvfiscanf_r+0x1d4>
 800b478:	2300      	movs	r3, #0
 800b47a:	9342      	str	r3, [sp, #264]	; 0x108
 800b47c:	2303      	movs	r3, #3
 800b47e:	e7de      	b.n	800b43e <__ssvfiscanf_r+0x1de>
 800b480:	2308      	movs	r3, #8
 800b482:	9342      	str	r3, [sp, #264]	; 0x108
 800b484:	2304      	movs	r3, #4
 800b486:	e7da      	b.n	800b43e <__ssvfiscanf_r+0x1de>
 800b488:	4629      	mov	r1, r5
 800b48a:	4640      	mov	r0, r8
 800b48c:	f000 f9b4 	bl	800b7f8 <__sccl>
 800b490:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b492:	4605      	mov	r5, r0
 800b494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b498:	9341      	str	r3, [sp, #260]	; 0x104
 800b49a:	2301      	movs	r3, #1
 800b49c:	e7cf      	b.n	800b43e <__ssvfiscanf_r+0x1de>
 800b49e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4a4:	9341      	str	r3, [sp, #260]	; 0x104
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	e7c9      	b.n	800b43e <__ssvfiscanf_r+0x1de>
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	e7c7      	b.n	800b43e <__ssvfiscanf_r+0x1de>
 800b4ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b4b0:	06c3      	lsls	r3, r0, #27
 800b4b2:	f53f aefb 	bmi.w	800b2ac <__ssvfiscanf_r+0x4c>
 800b4b6:	9b00      	ldr	r3, [sp, #0]
 800b4b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b4ba:	1d19      	adds	r1, r3, #4
 800b4bc:	9100      	str	r1, [sp, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f010 0f01 	tst.w	r0, #1
 800b4c4:	bf14      	ite	ne
 800b4c6:	801a      	strhne	r2, [r3, #0]
 800b4c8:	601a      	streq	r2, [r3, #0]
 800b4ca:	e6ef      	b.n	800b2ac <__ssvfiscanf_r+0x4c>
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4d2:	4798      	blx	r3
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d0b6      	beq.n	800b446 <__ssvfiscanf_r+0x1e6>
 800b4d8:	e79c      	b.n	800b414 <__ssvfiscanf_r+0x1b4>
 800b4da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b4dc:	3201      	adds	r2, #1
 800b4de:	9245      	str	r2, [sp, #276]	; 0x114
 800b4e0:	6862      	ldr	r2, [r4, #4]
 800b4e2:	3a01      	subs	r2, #1
 800b4e4:	2a00      	cmp	r2, #0
 800b4e6:	6062      	str	r2, [r4, #4]
 800b4e8:	dd02      	ble.n	800b4f0 <__ssvfiscanf_r+0x290>
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	e7ad      	b.n	800b44c <__ssvfiscanf_r+0x1ec>
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4f6:	4798      	blx	r3
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0a7      	beq.n	800b44c <__ssvfiscanf_r+0x1ec>
 800b4fc:	e78a      	b.n	800b414 <__ssvfiscanf_r+0x1b4>
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	dc0e      	bgt.n	800b520 <__ssvfiscanf_r+0x2c0>
 800b502:	466b      	mov	r3, sp
 800b504:	4622      	mov	r2, r4
 800b506:	4630      	mov	r0, r6
 800b508:	a941      	add	r1, sp, #260	; 0x104
 800b50a:	f000 f87d 	bl	800b608 <_scanf_i>
 800b50e:	e7ab      	b.n	800b468 <__ssvfiscanf_r+0x208>
 800b510:	0800b1ad 	.word	0x0800b1ad
 800b514:	0800b227 	.word	0x0800b227
 800b518:	080771c8 	.word	0x080771c8
 800b51c:	080771a8 	.word	0x080771a8
 800b520:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <__ssvfiscanf_r+0x2f0>)
 800b522:	2b00      	cmp	r3, #0
 800b524:	f43f aec2 	beq.w	800b2ac <__ssvfiscanf_r+0x4c>
 800b528:	466b      	mov	r3, sp
 800b52a:	4622      	mov	r2, r4
 800b52c:	4630      	mov	r0, r6
 800b52e:	a941      	add	r1, sp, #260	; 0x104
 800b530:	f3af 8000 	nop.w
 800b534:	e798      	b.n	800b468 <__ssvfiscanf_r+0x208>
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b53c:	bf18      	it	ne
 800b53e:	f04f 30ff 	movne.w	r0, #4294967295
 800b542:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b54a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b54c:	e7f9      	b.n	800b542 <__ssvfiscanf_r+0x2e2>
 800b54e:	bf00      	nop
 800b550:	00000000 	.word	0x00000000

0800b554 <_scanf_chars>:
 800b554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b558:	4615      	mov	r5, r2
 800b55a:	688a      	ldr	r2, [r1, #8]
 800b55c:	4680      	mov	r8, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	b932      	cbnz	r2, 800b570 <_scanf_chars+0x1c>
 800b562:	698a      	ldr	r2, [r1, #24]
 800b564:	2a00      	cmp	r2, #0
 800b566:	bf0c      	ite	eq
 800b568:	2201      	moveq	r2, #1
 800b56a:	f04f 32ff 	movne.w	r2, #4294967295
 800b56e:	608a      	str	r2, [r1, #8]
 800b570:	2700      	movs	r7, #0
 800b572:	6822      	ldr	r2, [r4, #0]
 800b574:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b604 <_scanf_chars+0xb0>
 800b578:	06d1      	lsls	r1, r2, #27
 800b57a:	bf5f      	itttt	pl
 800b57c:	681a      	ldrpl	r2, [r3, #0]
 800b57e:	1d11      	addpl	r1, r2, #4
 800b580:	6019      	strpl	r1, [r3, #0]
 800b582:	6816      	ldrpl	r6, [r2, #0]
 800b584:	69a0      	ldr	r0, [r4, #24]
 800b586:	b188      	cbz	r0, 800b5ac <_scanf_chars+0x58>
 800b588:	2801      	cmp	r0, #1
 800b58a:	d107      	bne.n	800b59c <_scanf_chars+0x48>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	781a      	ldrb	r2, [r3, #0]
 800b590:	6963      	ldr	r3, [r4, #20]
 800b592:	5c9b      	ldrb	r3, [r3, r2]
 800b594:	b953      	cbnz	r3, 800b5ac <_scanf_chars+0x58>
 800b596:	2f00      	cmp	r7, #0
 800b598:	d031      	beq.n	800b5fe <_scanf_chars+0xaa>
 800b59a:	e022      	b.n	800b5e2 <_scanf_chars+0x8e>
 800b59c:	2802      	cmp	r0, #2
 800b59e:	d120      	bne.n	800b5e2 <_scanf_chars+0x8e>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b5a8:	071b      	lsls	r3, r3, #28
 800b5aa:	d41a      	bmi.n	800b5e2 <_scanf_chars+0x8e>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	3701      	adds	r7, #1
 800b5b0:	06da      	lsls	r2, r3, #27
 800b5b2:	bf5e      	ittt	pl
 800b5b4:	682b      	ldrpl	r3, [r5, #0]
 800b5b6:	781b      	ldrbpl	r3, [r3, #0]
 800b5b8:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b5bc:	682a      	ldr	r2, [r5, #0]
 800b5be:	686b      	ldr	r3, [r5, #4]
 800b5c0:	3201      	adds	r2, #1
 800b5c2:	602a      	str	r2, [r5, #0]
 800b5c4:	68a2      	ldr	r2, [r4, #8]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	3a01      	subs	r2, #1
 800b5ca:	606b      	str	r3, [r5, #4]
 800b5cc:	60a2      	str	r2, [r4, #8]
 800b5ce:	b142      	cbz	r2, 800b5e2 <_scanf_chars+0x8e>
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	dcd7      	bgt.n	800b584 <_scanf_chars+0x30>
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b5dc:	4798      	blx	r3
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d0d0      	beq.n	800b584 <_scanf_chars+0x30>
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	f013 0310 	ands.w	r3, r3, #16
 800b5e8:	d105      	bne.n	800b5f6 <_scanf_chars+0xa2>
 800b5ea:	68e2      	ldr	r2, [r4, #12]
 800b5ec:	3201      	adds	r2, #1
 800b5ee:	60e2      	str	r2, [r4, #12]
 800b5f0:	69a2      	ldr	r2, [r4, #24]
 800b5f2:	b102      	cbz	r2, 800b5f6 <_scanf_chars+0xa2>
 800b5f4:	7033      	strb	r3, [r6, #0]
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	6923      	ldr	r3, [r4, #16]
 800b5fa:	443b      	add	r3, r7
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b602:	bf00      	nop
 800b604:	080771c8 	.word	0x080771c8

0800b608 <_scanf_i>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	460c      	mov	r4, r1
 800b60e:	4698      	mov	r8, r3
 800b610:	4b75      	ldr	r3, [pc, #468]	; (800b7e8 <_scanf_i+0x1e0>)
 800b612:	b087      	sub	sp, #28
 800b614:	4682      	mov	sl, r0
 800b616:	4616      	mov	r6, r2
 800b618:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b61c:	ab03      	add	r3, sp, #12
 800b61e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b622:	4b72      	ldr	r3, [pc, #456]	; (800b7ec <_scanf_i+0x1e4>)
 800b624:	69a1      	ldr	r1, [r4, #24]
 800b626:	4a72      	ldr	r2, [pc, #456]	; (800b7f0 <_scanf_i+0x1e8>)
 800b628:	4627      	mov	r7, r4
 800b62a:	2903      	cmp	r1, #3
 800b62c:	bf18      	it	ne
 800b62e:	461a      	movne	r2, r3
 800b630:	68a3      	ldr	r3, [r4, #8]
 800b632:	9201      	str	r2, [sp, #4]
 800b634:	1e5a      	subs	r2, r3, #1
 800b636:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b63a:	bf81      	itttt	hi
 800b63c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b640:	eb03 0905 	addhi.w	r9, r3, r5
 800b644:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b648:	60a3      	strhi	r3, [r4, #8]
 800b64a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b64e:	bf98      	it	ls
 800b650:	f04f 0900 	movls.w	r9, #0
 800b654:	463d      	mov	r5, r7
 800b656:	f04f 0b00 	mov.w	fp, #0
 800b65a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b65e:	6023      	str	r3, [r4, #0]
 800b660:	6831      	ldr	r1, [r6, #0]
 800b662:	ab03      	add	r3, sp, #12
 800b664:	2202      	movs	r2, #2
 800b666:	7809      	ldrb	r1, [r1, #0]
 800b668:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b66c:	f000 fa28 	bl	800bac0 <memchr>
 800b670:	b328      	cbz	r0, 800b6be <_scanf_i+0xb6>
 800b672:	f1bb 0f01 	cmp.w	fp, #1
 800b676:	d159      	bne.n	800b72c <_scanf_i+0x124>
 800b678:	6862      	ldr	r2, [r4, #4]
 800b67a:	b92a      	cbnz	r2, 800b688 <_scanf_i+0x80>
 800b67c:	2308      	movs	r3, #8
 800b67e:	6822      	ldr	r2, [r4, #0]
 800b680:	6063      	str	r3, [r4, #4]
 800b682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b686:	6022      	str	r2, [r4, #0]
 800b688:	6822      	ldr	r2, [r4, #0]
 800b68a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b68e:	6022      	str	r2, [r4, #0]
 800b690:	68a2      	ldr	r2, [r4, #8]
 800b692:	1e51      	subs	r1, r2, #1
 800b694:	60a1      	str	r1, [r4, #8]
 800b696:	b192      	cbz	r2, 800b6be <_scanf_i+0xb6>
 800b698:	6832      	ldr	r2, [r6, #0]
 800b69a:	1c51      	adds	r1, r2, #1
 800b69c:	6031      	str	r1, [r6, #0]
 800b69e:	7812      	ldrb	r2, [r2, #0]
 800b6a0:	f805 2b01 	strb.w	r2, [r5], #1
 800b6a4:	6872      	ldr	r2, [r6, #4]
 800b6a6:	3a01      	subs	r2, #1
 800b6a8:	2a00      	cmp	r2, #0
 800b6aa:	6072      	str	r2, [r6, #4]
 800b6ac:	dc07      	bgt.n	800b6be <_scanf_i+0xb6>
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4650      	mov	r0, sl
 800b6b2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b6b6:	4790      	blx	r2
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	f040 8085 	bne.w	800b7c8 <_scanf_i+0x1c0>
 800b6be:	f10b 0b01 	add.w	fp, fp, #1
 800b6c2:	f1bb 0f03 	cmp.w	fp, #3
 800b6c6:	d1cb      	bne.n	800b660 <_scanf_i+0x58>
 800b6c8:	6863      	ldr	r3, [r4, #4]
 800b6ca:	b90b      	cbnz	r3, 800b6d0 <_scanf_i+0xc8>
 800b6cc:	230a      	movs	r3, #10
 800b6ce:	6063      	str	r3, [r4, #4]
 800b6d0:	6863      	ldr	r3, [r4, #4]
 800b6d2:	4948      	ldr	r1, [pc, #288]	; (800b7f4 <_scanf_i+0x1ec>)
 800b6d4:	6960      	ldr	r0, [r4, #20]
 800b6d6:	1ac9      	subs	r1, r1, r3
 800b6d8:	f000 f88e 	bl	800b7f8 <__sccl>
 800b6dc:	f04f 0b00 	mov.w	fp, #0
 800b6e0:	68a3      	ldr	r3, [r4, #8]
 800b6e2:	6822      	ldr	r2, [r4, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d03d      	beq.n	800b764 <_scanf_i+0x15c>
 800b6e8:	6831      	ldr	r1, [r6, #0]
 800b6ea:	6960      	ldr	r0, [r4, #20]
 800b6ec:	f891 c000 	ldrb.w	ip, [r1]
 800b6f0:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d035      	beq.n	800b764 <_scanf_i+0x15c>
 800b6f8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b6fc:	d124      	bne.n	800b748 <_scanf_i+0x140>
 800b6fe:	0510      	lsls	r0, r2, #20
 800b700:	d522      	bpl.n	800b748 <_scanf_i+0x140>
 800b702:	f10b 0b01 	add.w	fp, fp, #1
 800b706:	f1b9 0f00 	cmp.w	r9, #0
 800b70a:	d003      	beq.n	800b714 <_scanf_i+0x10c>
 800b70c:	3301      	adds	r3, #1
 800b70e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b712:	60a3      	str	r3, [r4, #8]
 800b714:	6873      	ldr	r3, [r6, #4]
 800b716:	3b01      	subs	r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	6073      	str	r3, [r6, #4]
 800b71c:	dd1b      	ble.n	800b756 <_scanf_i+0x14e>
 800b71e:	6833      	ldr	r3, [r6, #0]
 800b720:	3301      	adds	r3, #1
 800b722:	6033      	str	r3, [r6, #0]
 800b724:	68a3      	ldr	r3, [r4, #8]
 800b726:	3b01      	subs	r3, #1
 800b728:	60a3      	str	r3, [r4, #8]
 800b72a:	e7d9      	b.n	800b6e0 <_scanf_i+0xd8>
 800b72c:	f1bb 0f02 	cmp.w	fp, #2
 800b730:	d1ae      	bne.n	800b690 <_scanf_i+0x88>
 800b732:	6822      	ldr	r2, [r4, #0]
 800b734:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b738:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b73c:	d1bf      	bne.n	800b6be <_scanf_i+0xb6>
 800b73e:	2310      	movs	r3, #16
 800b740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b744:	6063      	str	r3, [r4, #4]
 800b746:	e7a2      	b.n	800b68e <_scanf_i+0x86>
 800b748:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b74c:	6022      	str	r2, [r4, #0]
 800b74e:	780b      	ldrb	r3, [r1, #0]
 800b750:	f805 3b01 	strb.w	r3, [r5], #1
 800b754:	e7de      	b.n	800b714 <_scanf_i+0x10c>
 800b756:	4631      	mov	r1, r6
 800b758:	4650      	mov	r0, sl
 800b75a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b75e:	4798      	blx	r3
 800b760:	2800      	cmp	r0, #0
 800b762:	d0df      	beq.n	800b724 <_scanf_i+0x11c>
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	05db      	lsls	r3, r3, #23
 800b768:	d50d      	bpl.n	800b786 <_scanf_i+0x17e>
 800b76a:	42bd      	cmp	r5, r7
 800b76c:	d909      	bls.n	800b782 <_scanf_i+0x17a>
 800b76e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b772:	4632      	mov	r2, r6
 800b774:	4650      	mov	r0, sl
 800b776:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b77a:	f105 39ff 	add.w	r9, r5, #4294967295
 800b77e:	4798      	blx	r3
 800b780:	464d      	mov	r5, r9
 800b782:	42bd      	cmp	r5, r7
 800b784:	d02d      	beq.n	800b7e2 <_scanf_i+0x1da>
 800b786:	6822      	ldr	r2, [r4, #0]
 800b788:	f012 0210 	ands.w	r2, r2, #16
 800b78c:	d113      	bne.n	800b7b6 <_scanf_i+0x1ae>
 800b78e:	702a      	strb	r2, [r5, #0]
 800b790:	4639      	mov	r1, r7
 800b792:	6863      	ldr	r3, [r4, #4]
 800b794:	4650      	mov	r0, sl
 800b796:	9e01      	ldr	r6, [sp, #4]
 800b798:	47b0      	blx	r6
 800b79a:	6821      	ldr	r1, [r4, #0]
 800b79c:	f8d8 3000 	ldr.w	r3, [r8]
 800b7a0:	f011 0f20 	tst.w	r1, #32
 800b7a4:	d013      	beq.n	800b7ce <_scanf_i+0x1c6>
 800b7a6:	1d1a      	adds	r2, r3, #4
 800b7a8:	f8c8 2000 	str.w	r2, [r8]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	6018      	str	r0, [r3, #0]
 800b7b0:	68e3      	ldr	r3, [r4, #12]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	60e3      	str	r3, [r4, #12]
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	1bed      	subs	r5, r5, r7
 800b7ba:	44ab      	add	fp, r5
 800b7bc:	6925      	ldr	r5, [r4, #16]
 800b7be:	445d      	add	r5, fp
 800b7c0:	6125      	str	r5, [r4, #16]
 800b7c2:	b007      	add	sp, #28
 800b7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c8:	f04f 0b00 	mov.w	fp, #0
 800b7cc:	e7ca      	b.n	800b764 <_scanf_i+0x15c>
 800b7ce:	1d1a      	adds	r2, r3, #4
 800b7d0:	f8c8 2000 	str.w	r2, [r8]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f011 0f01 	tst.w	r1, #1
 800b7da:	bf14      	ite	ne
 800b7dc:	8018      	strhne	r0, [r3, #0]
 800b7de:	6018      	streq	r0, [r3, #0]
 800b7e0:	e7e6      	b.n	800b7b0 <_scanf_i+0x1a8>
 800b7e2:	2001      	movs	r0, #1
 800b7e4:	e7ed      	b.n	800b7c2 <_scanf_i+0x1ba>
 800b7e6:	bf00      	nop
 800b7e8:	0800d230 	.word	0x0800d230
 800b7ec:	0800ba49 	.word	0x0800ba49
 800b7f0:	0800b961 	.word	0x0800b961
 800b7f4:	080771c5 	.word	0x080771c5

0800b7f8 <__sccl>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	780b      	ldrb	r3, [r1, #0]
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	2b5e      	cmp	r3, #94	; 0x5e
 800b800:	bf13      	iteet	ne
 800b802:	2200      	movne	r2, #0
 800b804:	2201      	moveq	r2, #1
 800b806:	784b      	ldrbeq	r3, [r1, #1]
 800b808:	1c48      	addne	r0, r1, #1
 800b80a:	bf08      	it	eq
 800b80c:	1c88      	addeq	r0, r1, #2
 800b80e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b812:	1e61      	subs	r1, r4, #1
 800b814:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b818:	42a9      	cmp	r1, r5
 800b81a:	d1fb      	bne.n	800b814 <__sccl+0x1c>
 800b81c:	b90b      	cbnz	r3, 800b822 <__sccl+0x2a>
 800b81e:	3801      	subs	r0, #1
 800b820:	bd70      	pop	{r4, r5, r6, pc}
 800b822:	f082 0201 	eor.w	r2, r2, #1
 800b826:	4605      	mov	r5, r0
 800b828:	54e2      	strb	r2, [r4, r3]
 800b82a:	4628      	mov	r0, r5
 800b82c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b830:	292d      	cmp	r1, #45	; 0x2d
 800b832:	d006      	beq.n	800b842 <__sccl+0x4a>
 800b834:	295d      	cmp	r1, #93	; 0x5d
 800b836:	d0f3      	beq.n	800b820 <__sccl+0x28>
 800b838:	b909      	cbnz	r1, 800b83e <__sccl+0x46>
 800b83a:	4628      	mov	r0, r5
 800b83c:	e7f0      	b.n	800b820 <__sccl+0x28>
 800b83e:	460b      	mov	r3, r1
 800b840:	e7f1      	b.n	800b826 <__sccl+0x2e>
 800b842:	786e      	ldrb	r6, [r5, #1]
 800b844:	2e5d      	cmp	r6, #93	; 0x5d
 800b846:	d0fa      	beq.n	800b83e <__sccl+0x46>
 800b848:	42b3      	cmp	r3, r6
 800b84a:	dcf8      	bgt.n	800b83e <__sccl+0x46>
 800b84c:	4619      	mov	r1, r3
 800b84e:	3502      	adds	r5, #2
 800b850:	3101      	adds	r1, #1
 800b852:	428e      	cmp	r6, r1
 800b854:	5462      	strb	r2, [r4, r1]
 800b856:	dcfb      	bgt.n	800b850 <__sccl+0x58>
 800b858:	1af1      	subs	r1, r6, r3
 800b85a:	3901      	subs	r1, #1
 800b85c:	42b3      	cmp	r3, r6
 800b85e:	bfa8      	it	ge
 800b860:	2100      	movge	r1, #0
 800b862:	1c58      	adds	r0, r3, #1
 800b864:	1843      	adds	r3, r0, r1
 800b866:	e7e0      	b.n	800b82a <__sccl+0x32>

0800b868 <_strtol_l.constprop.0>:
 800b868:	2b01      	cmp	r3, #1
 800b86a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b86e:	4680      	mov	r8, r0
 800b870:	d001      	beq.n	800b876 <_strtol_l.constprop.0+0xe>
 800b872:	2b24      	cmp	r3, #36	; 0x24
 800b874:	d906      	bls.n	800b884 <_strtol_l.constprop.0+0x1c>
 800b876:	f7ff fc3b 	bl	800b0f0 <__errno>
 800b87a:	2316      	movs	r3, #22
 800b87c:	6003      	str	r3, [r0, #0]
 800b87e:	2000      	movs	r0, #0
 800b880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b884:	460d      	mov	r5, r1
 800b886:	4f35      	ldr	r7, [pc, #212]	; (800b95c <_strtol_l.constprop.0+0xf4>)
 800b888:	4628      	mov	r0, r5
 800b88a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b88e:	5de6      	ldrb	r6, [r4, r7]
 800b890:	f016 0608 	ands.w	r6, r6, #8
 800b894:	d1f8      	bne.n	800b888 <_strtol_l.constprop.0+0x20>
 800b896:	2c2d      	cmp	r4, #45	; 0x2d
 800b898:	d12f      	bne.n	800b8fa <_strtol_l.constprop.0+0x92>
 800b89a:	2601      	movs	r6, #1
 800b89c:	782c      	ldrb	r4, [r5, #0]
 800b89e:	1c85      	adds	r5, r0, #2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d057      	beq.n	800b954 <_strtol_l.constprop.0+0xec>
 800b8a4:	2b10      	cmp	r3, #16
 800b8a6:	d109      	bne.n	800b8bc <_strtol_l.constprop.0+0x54>
 800b8a8:	2c30      	cmp	r4, #48	; 0x30
 800b8aa:	d107      	bne.n	800b8bc <_strtol_l.constprop.0+0x54>
 800b8ac:	7828      	ldrb	r0, [r5, #0]
 800b8ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b8b2:	2858      	cmp	r0, #88	; 0x58
 800b8b4:	d149      	bne.n	800b94a <_strtol_l.constprop.0+0xe2>
 800b8b6:	2310      	movs	r3, #16
 800b8b8:	786c      	ldrb	r4, [r5, #1]
 800b8ba:	3502      	adds	r5, #2
 800b8bc:	2700      	movs	r7, #0
 800b8be:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b8c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b8c6:	fbbe f9f3 	udiv	r9, lr, r3
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	fb03 ea19 	mls	sl, r3, r9, lr
 800b8d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b8d4:	f1bc 0f09 	cmp.w	ip, #9
 800b8d8:	d814      	bhi.n	800b904 <_strtol_l.constprop.0+0x9c>
 800b8da:	4664      	mov	r4, ip
 800b8dc:	42a3      	cmp	r3, r4
 800b8de:	dd22      	ble.n	800b926 <_strtol_l.constprop.0+0xbe>
 800b8e0:	2f00      	cmp	r7, #0
 800b8e2:	db1d      	blt.n	800b920 <_strtol_l.constprop.0+0xb8>
 800b8e4:	4581      	cmp	r9, r0
 800b8e6:	d31b      	bcc.n	800b920 <_strtol_l.constprop.0+0xb8>
 800b8e8:	d101      	bne.n	800b8ee <_strtol_l.constprop.0+0x86>
 800b8ea:	45a2      	cmp	sl, r4
 800b8ec:	db18      	blt.n	800b920 <_strtol_l.constprop.0+0xb8>
 800b8ee:	2701      	movs	r7, #1
 800b8f0:	fb00 4003 	mla	r0, r0, r3, r4
 800b8f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8f8:	e7ea      	b.n	800b8d0 <_strtol_l.constprop.0+0x68>
 800b8fa:	2c2b      	cmp	r4, #43	; 0x2b
 800b8fc:	bf04      	itt	eq
 800b8fe:	782c      	ldrbeq	r4, [r5, #0]
 800b900:	1c85      	addeq	r5, r0, #2
 800b902:	e7cd      	b.n	800b8a0 <_strtol_l.constprop.0+0x38>
 800b904:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b908:	f1bc 0f19 	cmp.w	ip, #25
 800b90c:	d801      	bhi.n	800b912 <_strtol_l.constprop.0+0xaa>
 800b90e:	3c37      	subs	r4, #55	; 0x37
 800b910:	e7e4      	b.n	800b8dc <_strtol_l.constprop.0+0x74>
 800b912:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b916:	f1bc 0f19 	cmp.w	ip, #25
 800b91a:	d804      	bhi.n	800b926 <_strtol_l.constprop.0+0xbe>
 800b91c:	3c57      	subs	r4, #87	; 0x57
 800b91e:	e7dd      	b.n	800b8dc <_strtol_l.constprop.0+0x74>
 800b920:	f04f 37ff 	mov.w	r7, #4294967295
 800b924:	e7e6      	b.n	800b8f4 <_strtol_l.constprop.0+0x8c>
 800b926:	2f00      	cmp	r7, #0
 800b928:	da07      	bge.n	800b93a <_strtol_l.constprop.0+0xd2>
 800b92a:	2322      	movs	r3, #34	; 0x22
 800b92c:	4670      	mov	r0, lr
 800b92e:	f8c8 3000 	str.w	r3, [r8]
 800b932:	2a00      	cmp	r2, #0
 800b934:	d0a4      	beq.n	800b880 <_strtol_l.constprop.0+0x18>
 800b936:	1e69      	subs	r1, r5, #1
 800b938:	e005      	b.n	800b946 <_strtol_l.constprop.0+0xde>
 800b93a:	b106      	cbz	r6, 800b93e <_strtol_l.constprop.0+0xd6>
 800b93c:	4240      	negs	r0, r0
 800b93e:	2a00      	cmp	r2, #0
 800b940:	d09e      	beq.n	800b880 <_strtol_l.constprop.0+0x18>
 800b942:	2f00      	cmp	r7, #0
 800b944:	d1f7      	bne.n	800b936 <_strtol_l.constprop.0+0xce>
 800b946:	6011      	str	r1, [r2, #0]
 800b948:	e79a      	b.n	800b880 <_strtol_l.constprop.0+0x18>
 800b94a:	2430      	movs	r4, #48	; 0x30
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1b5      	bne.n	800b8bc <_strtol_l.constprop.0+0x54>
 800b950:	2308      	movs	r3, #8
 800b952:	e7b3      	b.n	800b8bc <_strtol_l.constprop.0+0x54>
 800b954:	2c30      	cmp	r4, #48	; 0x30
 800b956:	d0a9      	beq.n	800b8ac <_strtol_l.constprop.0+0x44>
 800b958:	230a      	movs	r3, #10
 800b95a:	e7af      	b.n	800b8bc <_strtol_l.constprop.0+0x54>
 800b95c:	080771c8 	.word	0x080771c8

0800b960 <_strtol_r>:
 800b960:	f7ff bf82 	b.w	800b868 <_strtol_l.constprop.0>

0800b964 <_strtoul_l.constprop.0>:
 800b964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b968:	4686      	mov	lr, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	4f35      	ldr	r7, [pc, #212]	; (800ba44 <_strtoul_l.constprop.0+0xe0>)
 800b96e:	4628      	mov	r0, r5
 800b970:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b974:	5de6      	ldrb	r6, [r4, r7]
 800b976:	f016 0608 	ands.w	r6, r6, #8
 800b97a:	d1f8      	bne.n	800b96e <_strtoul_l.constprop.0+0xa>
 800b97c:	2c2d      	cmp	r4, #45	; 0x2d
 800b97e:	d12f      	bne.n	800b9e0 <_strtoul_l.constprop.0+0x7c>
 800b980:	2601      	movs	r6, #1
 800b982:	782c      	ldrb	r4, [r5, #0]
 800b984:	1c85      	adds	r5, r0, #2
 800b986:	2b00      	cmp	r3, #0
 800b988:	d057      	beq.n	800ba3a <_strtoul_l.constprop.0+0xd6>
 800b98a:	2b10      	cmp	r3, #16
 800b98c:	d109      	bne.n	800b9a2 <_strtoul_l.constprop.0+0x3e>
 800b98e:	2c30      	cmp	r4, #48	; 0x30
 800b990:	d107      	bne.n	800b9a2 <_strtoul_l.constprop.0+0x3e>
 800b992:	7828      	ldrb	r0, [r5, #0]
 800b994:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b998:	2858      	cmp	r0, #88	; 0x58
 800b99a:	d149      	bne.n	800ba30 <_strtoul_l.constprop.0+0xcc>
 800b99c:	2310      	movs	r3, #16
 800b99e:	786c      	ldrb	r4, [r5, #1]
 800b9a0:	3502      	adds	r5, #2
 800b9a2:	f04f 38ff 	mov.w	r8, #4294967295
 800b9a6:	fbb8 f8f3 	udiv	r8, r8, r3
 800b9aa:	2700      	movs	r7, #0
 800b9ac:	fb03 f908 	mul.w	r9, r3, r8
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	ea6f 0909 	mvn.w	r9, r9
 800b9b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b9ba:	f1bc 0f09 	cmp.w	ip, #9
 800b9be:	d814      	bhi.n	800b9ea <_strtoul_l.constprop.0+0x86>
 800b9c0:	4664      	mov	r4, ip
 800b9c2:	42a3      	cmp	r3, r4
 800b9c4:	dd22      	ble.n	800ba0c <_strtoul_l.constprop.0+0xa8>
 800b9c6:	2f00      	cmp	r7, #0
 800b9c8:	db1d      	blt.n	800ba06 <_strtoul_l.constprop.0+0xa2>
 800b9ca:	4580      	cmp	r8, r0
 800b9cc:	d31b      	bcc.n	800ba06 <_strtoul_l.constprop.0+0xa2>
 800b9ce:	d101      	bne.n	800b9d4 <_strtoul_l.constprop.0+0x70>
 800b9d0:	45a1      	cmp	r9, r4
 800b9d2:	db18      	blt.n	800ba06 <_strtoul_l.constprop.0+0xa2>
 800b9d4:	2701      	movs	r7, #1
 800b9d6:	fb00 4003 	mla	r0, r0, r3, r4
 800b9da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9de:	e7ea      	b.n	800b9b6 <_strtoul_l.constprop.0+0x52>
 800b9e0:	2c2b      	cmp	r4, #43	; 0x2b
 800b9e2:	bf04      	itt	eq
 800b9e4:	782c      	ldrbeq	r4, [r5, #0]
 800b9e6:	1c85      	addeq	r5, r0, #2
 800b9e8:	e7cd      	b.n	800b986 <_strtoul_l.constprop.0+0x22>
 800b9ea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b9ee:	f1bc 0f19 	cmp.w	ip, #25
 800b9f2:	d801      	bhi.n	800b9f8 <_strtoul_l.constprop.0+0x94>
 800b9f4:	3c37      	subs	r4, #55	; 0x37
 800b9f6:	e7e4      	b.n	800b9c2 <_strtoul_l.constprop.0+0x5e>
 800b9f8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b9fc:	f1bc 0f19 	cmp.w	ip, #25
 800ba00:	d804      	bhi.n	800ba0c <_strtoul_l.constprop.0+0xa8>
 800ba02:	3c57      	subs	r4, #87	; 0x57
 800ba04:	e7dd      	b.n	800b9c2 <_strtoul_l.constprop.0+0x5e>
 800ba06:	f04f 37ff 	mov.w	r7, #4294967295
 800ba0a:	e7e6      	b.n	800b9da <_strtoul_l.constprop.0+0x76>
 800ba0c:	2f00      	cmp	r7, #0
 800ba0e:	da07      	bge.n	800ba20 <_strtoul_l.constprop.0+0xbc>
 800ba10:	2322      	movs	r3, #34	; 0x22
 800ba12:	f04f 30ff 	mov.w	r0, #4294967295
 800ba16:	f8ce 3000 	str.w	r3, [lr]
 800ba1a:	b932      	cbnz	r2, 800ba2a <_strtoul_l.constprop.0+0xc6>
 800ba1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba20:	b106      	cbz	r6, 800ba24 <_strtoul_l.constprop.0+0xc0>
 800ba22:	4240      	negs	r0, r0
 800ba24:	2a00      	cmp	r2, #0
 800ba26:	d0f9      	beq.n	800ba1c <_strtoul_l.constprop.0+0xb8>
 800ba28:	b107      	cbz	r7, 800ba2c <_strtoul_l.constprop.0+0xc8>
 800ba2a:	1e69      	subs	r1, r5, #1
 800ba2c:	6011      	str	r1, [r2, #0]
 800ba2e:	e7f5      	b.n	800ba1c <_strtoul_l.constprop.0+0xb8>
 800ba30:	2430      	movs	r4, #48	; 0x30
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1b5      	bne.n	800b9a2 <_strtoul_l.constprop.0+0x3e>
 800ba36:	2308      	movs	r3, #8
 800ba38:	e7b3      	b.n	800b9a2 <_strtoul_l.constprop.0+0x3e>
 800ba3a:	2c30      	cmp	r4, #48	; 0x30
 800ba3c:	d0a9      	beq.n	800b992 <_strtoul_l.constprop.0+0x2e>
 800ba3e:	230a      	movs	r3, #10
 800ba40:	e7af      	b.n	800b9a2 <_strtoul_l.constprop.0+0x3e>
 800ba42:	bf00      	nop
 800ba44:	080771c8 	.word	0x080771c8

0800ba48 <_strtoul_r>:
 800ba48:	f7ff bf8c 	b.w	800b964 <_strtoul_l.constprop.0>

0800ba4c <__submore>:
 800ba4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba50:	460c      	mov	r4, r1
 800ba52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ba54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba58:	4299      	cmp	r1, r3
 800ba5a:	d11b      	bne.n	800ba94 <__submore+0x48>
 800ba5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ba60:	f000 f8b2 	bl	800bbc8 <_malloc_r>
 800ba64:	b918      	cbnz	r0, 800ba6e <__submore+0x22>
 800ba66:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba72:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba74:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ba78:	6360      	str	r0, [r4, #52]	; 0x34
 800ba7a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ba7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ba86:	7043      	strb	r3, [r0, #1]
 800ba88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba8c:	7003      	strb	r3, [r0, #0]
 800ba8e:	6020      	str	r0, [r4, #0]
 800ba90:	2000      	movs	r0, #0
 800ba92:	e7ea      	b.n	800ba6a <__submore+0x1e>
 800ba94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ba96:	0077      	lsls	r7, r6, #1
 800ba98:	463a      	mov	r2, r7
 800ba9a:	f000 f909 	bl	800bcb0 <_realloc_r>
 800ba9e:	4605      	mov	r5, r0
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d0e0      	beq.n	800ba66 <__submore+0x1a>
 800baa4:	eb00 0806 	add.w	r8, r0, r6
 800baa8:	4601      	mov	r1, r0
 800baaa:	4632      	mov	r2, r6
 800baac:	4640      	mov	r0, r8
 800baae:	f000 f815 	bl	800badc <memcpy>
 800bab2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bab6:	f8c4 8000 	str.w	r8, [r4]
 800baba:	e7e9      	b.n	800ba90 <__submore+0x44>

0800babc <__retarget_lock_acquire_recursive>:
 800babc:	4770      	bx	lr

0800babe <__retarget_lock_release_recursive>:
 800babe:	4770      	bx	lr

0800bac0 <memchr>:
 800bac0:	4603      	mov	r3, r0
 800bac2:	b510      	push	{r4, lr}
 800bac4:	b2c9      	uxtb	r1, r1
 800bac6:	4402      	add	r2, r0
 800bac8:	4293      	cmp	r3, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	d101      	bne.n	800bad2 <memchr+0x12>
 800bace:	2000      	movs	r0, #0
 800bad0:	e003      	b.n	800bada <memchr+0x1a>
 800bad2:	7804      	ldrb	r4, [r0, #0]
 800bad4:	3301      	adds	r3, #1
 800bad6:	428c      	cmp	r4, r1
 800bad8:	d1f6      	bne.n	800bac8 <memchr+0x8>
 800bada:	bd10      	pop	{r4, pc}

0800badc <memcpy>:
 800badc:	440a      	add	r2, r1
 800bade:	4291      	cmp	r1, r2
 800bae0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bae4:	d100      	bne.n	800bae8 <memcpy+0xc>
 800bae6:	4770      	bx	lr
 800bae8:	b510      	push	{r4, lr}
 800baea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baee:	4291      	cmp	r1, r2
 800baf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baf4:	d1f9      	bne.n	800baea <memcpy+0xe>
 800baf6:	bd10      	pop	{r4, pc}

0800baf8 <_free_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	4605      	mov	r5, r0
 800bafc:	2900      	cmp	r1, #0
 800bafe:	d040      	beq.n	800bb82 <_free_r+0x8a>
 800bb00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb04:	1f0c      	subs	r4, r1, #4
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	bfb8      	it	lt
 800bb0a:	18e4      	addlt	r4, r4, r3
 800bb0c:	f000 f910 	bl	800bd30 <__malloc_lock>
 800bb10:	4a1c      	ldr	r2, [pc, #112]	; (800bb84 <_free_r+0x8c>)
 800bb12:	6813      	ldr	r3, [r2, #0]
 800bb14:	b933      	cbnz	r3, 800bb24 <_free_r+0x2c>
 800bb16:	6063      	str	r3, [r4, #4]
 800bb18:	6014      	str	r4, [r2, #0]
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb20:	f000 b90c 	b.w	800bd3c <__malloc_unlock>
 800bb24:	42a3      	cmp	r3, r4
 800bb26:	d908      	bls.n	800bb3a <_free_r+0x42>
 800bb28:	6820      	ldr	r0, [r4, #0]
 800bb2a:	1821      	adds	r1, r4, r0
 800bb2c:	428b      	cmp	r3, r1
 800bb2e:	bf01      	itttt	eq
 800bb30:	6819      	ldreq	r1, [r3, #0]
 800bb32:	685b      	ldreq	r3, [r3, #4]
 800bb34:	1809      	addeq	r1, r1, r0
 800bb36:	6021      	streq	r1, [r4, #0]
 800bb38:	e7ed      	b.n	800bb16 <_free_r+0x1e>
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	b10b      	cbz	r3, 800bb44 <_free_r+0x4c>
 800bb40:	42a3      	cmp	r3, r4
 800bb42:	d9fa      	bls.n	800bb3a <_free_r+0x42>
 800bb44:	6811      	ldr	r1, [r2, #0]
 800bb46:	1850      	adds	r0, r2, r1
 800bb48:	42a0      	cmp	r0, r4
 800bb4a:	d10b      	bne.n	800bb64 <_free_r+0x6c>
 800bb4c:	6820      	ldr	r0, [r4, #0]
 800bb4e:	4401      	add	r1, r0
 800bb50:	1850      	adds	r0, r2, r1
 800bb52:	4283      	cmp	r3, r0
 800bb54:	6011      	str	r1, [r2, #0]
 800bb56:	d1e0      	bne.n	800bb1a <_free_r+0x22>
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	4401      	add	r1, r0
 800bb5e:	6011      	str	r1, [r2, #0]
 800bb60:	6053      	str	r3, [r2, #4]
 800bb62:	e7da      	b.n	800bb1a <_free_r+0x22>
 800bb64:	d902      	bls.n	800bb6c <_free_r+0x74>
 800bb66:	230c      	movs	r3, #12
 800bb68:	602b      	str	r3, [r5, #0]
 800bb6a:	e7d6      	b.n	800bb1a <_free_r+0x22>
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	1821      	adds	r1, r4, r0
 800bb70:	428b      	cmp	r3, r1
 800bb72:	bf01      	itttt	eq
 800bb74:	6819      	ldreq	r1, [r3, #0]
 800bb76:	685b      	ldreq	r3, [r3, #4]
 800bb78:	1809      	addeq	r1, r1, r0
 800bb7a:	6021      	streq	r1, [r4, #0]
 800bb7c:	6063      	str	r3, [r4, #4]
 800bb7e:	6054      	str	r4, [r2, #4]
 800bb80:	e7cb      	b.n	800bb1a <_free_r+0x22>
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	20000be8 	.word	0x20000be8

0800bb88 <sbrk_aligned>:
 800bb88:	b570      	push	{r4, r5, r6, lr}
 800bb8a:	4e0e      	ldr	r6, [pc, #56]	; (800bbc4 <sbrk_aligned+0x3c>)
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	6831      	ldr	r1, [r6, #0]
 800bb90:	4605      	mov	r5, r0
 800bb92:	b911      	cbnz	r1, 800bb9a <sbrk_aligned+0x12>
 800bb94:	f000 f8bc 	bl	800bd10 <_sbrk_r>
 800bb98:	6030      	str	r0, [r6, #0]
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f000 f8b7 	bl	800bd10 <_sbrk_r>
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	d00a      	beq.n	800bbbc <sbrk_aligned+0x34>
 800bba6:	1cc4      	adds	r4, r0, #3
 800bba8:	f024 0403 	bic.w	r4, r4, #3
 800bbac:	42a0      	cmp	r0, r4
 800bbae:	d007      	beq.n	800bbc0 <sbrk_aligned+0x38>
 800bbb0:	1a21      	subs	r1, r4, r0
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f000 f8ac 	bl	800bd10 <_sbrk_r>
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d101      	bne.n	800bbc0 <sbrk_aligned+0x38>
 800bbbc:	f04f 34ff 	mov.w	r4, #4294967295
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
 800bbc4:	20000bec 	.word	0x20000bec

0800bbc8 <_malloc_r>:
 800bbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbcc:	1ccd      	adds	r5, r1, #3
 800bbce:	f025 0503 	bic.w	r5, r5, #3
 800bbd2:	3508      	adds	r5, #8
 800bbd4:	2d0c      	cmp	r5, #12
 800bbd6:	bf38      	it	cc
 800bbd8:	250c      	movcc	r5, #12
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	4607      	mov	r7, r0
 800bbde:	db01      	blt.n	800bbe4 <_malloc_r+0x1c>
 800bbe0:	42a9      	cmp	r1, r5
 800bbe2:	d905      	bls.n	800bbf0 <_malloc_r+0x28>
 800bbe4:	230c      	movs	r3, #12
 800bbe6:	2600      	movs	r6, #0
 800bbe8:	603b      	str	r3, [r7, #0]
 800bbea:	4630      	mov	r0, r6
 800bbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf0:	4e2e      	ldr	r6, [pc, #184]	; (800bcac <_malloc_r+0xe4>)
 800bbf2:	f000 f89d 	bl	800bd30 <__malloc_lock>
 800bbf6:	6833      	ldr	r3, [r6, #0]
 800bbf8:	461c      	mov	r4, r3
 800bbfa:	bb34      	cbnz	r4, 800bc4a <_malloc_r+0x82>
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	4638      	mov	r0, r7
 800bc00:	f7ff ffc2 	bl	800bb88 <sbrk_aligned>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	4604      	mov	r4, r0
 800bc08:	d14d      	bne.n	800bca6 <_malloc_r+0xde>
 800bc0a:	6834      	ldr	r4, [r6, #0]
 800bc0c:	4626      	mov	r6, r4
 800bc0e:	2e00      	cmp	r6, #0
 800bc10:	d140      	bne.n	800bc94 <_malloc_r+0xcc>
 800bc12:	6823      	ldr	r3, [r4, #0]
 800bc14:	4631      	mov	r1, r6
 800bc16:	4638      	mov	r0, r7
 800bc18:	eb04 0803 	add.w	r8, r4, r3
 800bc1c:	f000 f878 	bl	800bd10 <_sbrk_r>
 800bc20:	4580      	cmp	r8, r0
 800bc22:	d13a      	bne.n	800bc9a <_malloc_r+0xd2>
 800bc24:	6821      	ldr	r1, [r4, #0]
 800bc26:	3503      	adds	r5, #3
 800bc28:	1a6d      	subs	r5, r5, r1
 800bc2a:	f025 0503 	bic.w	r5, r5, #3
 800bc2e:	3508      	adds	r5, #8
 800bc30:	2d0c      	cmp	r5, #12
 800bc32:	bf38      	it	cc
 800bc34:	250c      	movcc	r5, #12
 800bc36:	4638      	mov	r0, r7
 800bc38:	4629      	mov	r1, r5
 800bc3a:	f7ff ffa5 	bl	800bb88 <sbrk_aligned>
 800bc3e:	3001      	adds	r0, #1
 800bc40:	d02b      	beq.n	800bc9a <_malloc_r+0xd2>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	442b      	add	r3, r5
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	e00e      	b.n	800bc68 <_malloc_r+0xa0>
 800bc4a:	6822      	ldr	r2, [r4, #0]
 800bc4c:	1b52      	subs	r2, r2, r5
 800bc4e:	d41e      	bmi.n	800bc8e <_malloc_r+0xc6>
 800bc50:	2a0b      	cmp	r2, #11
 800bc52:	d916      	bls.n	800bc82 <_malloc_r+0xba>
 800bc54:	1961      	adds	r1, r4, r5
 800bc56:	42a3      	cmp	r3, r4
 800bc58:	6025      	str	r5, [r4, #0]
 800bc5a:	bf18      	it	ne
 800bc5c:	6059      	strne	r1, [r3, #4]
 800bc5e:	6863      	ldr	r3, [r4, #4]
 800bc60:	bf08      	it	eq
 800bc62:	6031      	streq	r1, [r6, #0]
 800bc64:	5162      	str	r2, [r4, r5]
 800bc66:	604b      	str	r3, [r1, #4]
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f104 060b 	add.w	r6, r4, #11
 800bc6e:	f000 f865 	bl	800bd3c <__malloc_unlock>
 800bc72:	f026 0607 	bic.w	r6, r6, #7
 800bc76:	1d23      	adds	r3, r4, #4
 800bc78:	1af2      	subs	r2, r6, r3
 800bc7a:	d0b6      	beq.n	800bbea <_malloc_r+0x22>
 800bc7c:	1b9b      	subs	r3, r3, r6
 800bc7e:	50a3      	str	r3, [r4, r2]
 800bc80:	e7b3      	b.n	800bbea <_malloc_r+0x22>
 800bc82:	6862      	ldr	r2, [r4, #4]
 800bc84:	42a3      	cmp	r3, r4
 800bc86:	bf0c      	ite	eq
 800bc88:	6032      	streq	r2, [r6, #0]
 800bc8a:	605a      	strne	r2, [r3, #4]
 800bc8c:	e7ec      	b.n	800bc68 <_malloc_r+0xa0>
 800bc8e:	4623      	mov	r3, r4
 800bc90:	6864      	ldr	r4, [r4, #4]
 800bc92:	e7b2      	b.n	800bbfa <_malloc_r+0x32>
 800bc94:	4634      	mov	r4, r6
 800bc96:	6876      	ldr	r6, [r6, #4]
 800bc98:	e7b9      	b.n	800bc0e <_malloc_r+0x46>
 800bc9a:	230c      	movs	r3, #12
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	603b      	str	r3, [r7, #0]
 800bca0:	f000 f84c 	bl	800bd3c <__malloc_unlock>
 800bca4:	e7a1      	b.n	800bbea <_malloc_r+0x22>
 800bca6:	6025      	str	r5, [r4, #0]
 800bca8:	e7de      	b.n	800bc68 <_malloc_r+0xa0>
 800bcaa:	bf00      	nop
 800bcac:	20000be8 	.word	0x20000be8

0800bcb0 <_realloc_r>:
 800bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	4614      	mov	r4, r2
 800bcb8:	460e      	mov	r6, r1
 800bcba:	b921      	cbnz	r1, 800bcc6 <_realloc_r+0x16>
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	f7ff bf81 	b.w	800bbc8 <_malloc_r>
 800bcc6:	b92a      	cbnz	r2, 800bcd4 <_realloc_r+0x24>
 800bcc8:	f7ff ff16 	bl	800baf8 <_free_r>
 800bccc:	4625      	mov	r5, r4
 800bcce:	4628      	mov	r0, r5
 800bcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd4:	f000 f838 	bl	800bd48 <_malloc_usable_size_r>
 800bcd8:	4284      	cmp	r4, r0
 800bcda:	4607      	mov	r7, r0
 800bcdc:	d802      	bhi.n	800bce4 <_realloc_r+0x34>
 800bcde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bce2:	d812      	bhi.n	800bd0a <_realloc_r+0x5a>
 800bce4:	4621      	mov	r1, r4
 800bce6:	4640      	mov	r0, r8
 800bce8:	f7ff ff6e 	bl	800bbc8 <_malloc_r>
 800bcec:	4605      	mov	r5, r0
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d0ed      	beq.n	800bcce <_realloc_r+0x1e>
 800bcf2:	42bc      	cmp	r4, r7
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	4631      	mov	r1, r6
 800bcf8:	bf28      	it	cs
 800bcfa:	463a      	movcs	r2, r7
 800bcfc:	f7ff feee 	bl	800badc <memcpy>
 800bd00:	4631      	mov	r1, r6
 800bd02:	4640      	mov	r0, r8
 800bd04:	f7ff fef8 	bl	800baf8 <_free_r>
 800bd08:	e7e1      	b.n	800bcce <_realloc_r+0x1e>
 800bd0a:	4635      	mov	r5, r6
 800bd0c:	e7df      	b.n	800bcce <_realloc_r+0x1e>
	...

0800bd10 <_sbrk_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	2300      	movs	r3, #0
 800bd14:	4d05      	ldr	r5, [pc, #20]	; (800bd2c <_sbrk_r+0x1c>)
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	602b      	str	r3, [r5, #0]
 800bd1c:	f7fa fcc2 	bl	80066a4 <_sbrk>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_sbrk_r+0x1a>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_sbrk_r+0x1a>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	20000be0 	.word	0x20000be0

0800bd30 <__malloc_lock>:
 800bd30:	4801      	ldr	r0, [pc, #4]	; (800bd38 <__malloc_lock+0x8>)
 800bd32:	f7ff bec3 	b.w	800babc <__retarget_lock_acquire_recursive>
 800bd36:	bf00      	nop
 800bd38:	20000be4 	.word	0x20000be4

0800bd3c <__malloc_unlock>:
 800bd3c:	4801      	ldr	r0, [pc, #4]	; (800bd44 <__malloc_unlock+0x8>)
 800bd3e:	f7ff bebe 	b.w	800babe <__retarget_lock_release_recursive>
 800bd42:	bf00      	nop
 800bd44:	20000be4 	.word	0x20000be4

0800bd48 <_malloc_usable_size_r>:
 800bd48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd4c:	1f18      	subs	r0, r3, #4
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	bfbc      	itt	lt
 800bd52:	580b      	ldrlt	r3, [r1, r0]
 800bd54:	18c0      	addlt	r0, r0, r3
 800bd56:	4770      	bx	lr

0800bd58 <cos>:
 800bd58:	b530      	push	{r4, r5, lr}
 800bd5a:	4a20      	ldr	r2, [pc, #128]	; (800bddc <cos+0x84>)
 800bd5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd60:	4293      	cmp	r3, r2
 800bd62:	b087      	sub	sp, #28
 800bd64:	dc06      	bgt.n	800bd74 <cos+0x1c>
 800bd66:	2200      	movs	r2, #0
 800bd68:	2300      	movs	r3, #0
 800bd6a:	b007      	add	sp, #28
 800bd6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd70:	f000 ba76 	b.w	800c260 <__kernel_cos>
 800bd74:	4a1a      	ldr	r2, [pc, #104]	; (800bde0 <cos+0x88>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	dd05      	ble.n	800bd86 <cos+0x2e>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	f7f4 fa5f 	bl	8000240 <__aeabi_dsub>
 800bd82:	b007      	add	sp, #28
 800bd84:	bd30      	pop	{r4, r5, pc}
 800bd86:	aa02      	add	r2, sp, #8
 800bd88:	f000 f872 	bl	800be70 <__ieee754_rem_pio2>
 800bd8c:	f000 0003 	and.w	r0, r0, #3
 800bd90:	2801      	cmp	r0, #1
 800bd92:	d009      	beq.n	800bda8 <cos+0x50>
 800bd94:	2802      	cmp	r0, #2
 800bd96:	d011      	beq.n	800bdbc <cos+0x64>
 800bd98:	b9b8      	cbnz	r0, 800bdca <cos+0x72>
 800bd9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bda2:	f000 fa5d 	bl	800c260 <__kernel_cos>
 800bda6:	e7ec      	b.n	800bd82 <cos+0x2a>
 800bda8:	9000      	str	r0, [sp, #0]
 800bdaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb2:	f000 fe55 	bl	800ca60 <__kernel_sin>
 800bdb6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bdba:	e7e2      	b.n	800bd82 <cos+0x2a>
 800bdbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc4:	f000 fa4c 	bl	800c260 <__kernel_cos>
 800bdc8:	e7f5      	b.n	800bdb6 <cos+0x5e>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdd6:	f000 fe43 	bl	800ca60 <__kernel_sin>
 800bdda:	e7d2      	b.n	800bd82 <cos+0x2a>
 800bddc:	3fe921fb 	.word	0x3fe921fb
 800bde0:	7fefffff 	.word	0x7fefffff

0800bde4 <sin>:
 800bde4:	b530      	push	{r4, r5, lr}
 800bde6:	4a20      	ldr	r2, [pc, #128]	; (800be68 <sin+0x84>)
 800bde8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdec:	4293      	cmp	r3, r2
 800bdee:	b087      	sub	sp, #28
 800bdf0:	dc06      	bgt.n	800be00 <sin+0x1c>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f000 fe31 	bl	800ca60 <__kernel_sin>
 800bdfe:	e006      	b.n	800be0e <sin+0x2a>
 800be00:	4a1a      	ldr	r2, [pc, #104]	; (800be6c <sin+0x88>)
 800be02:	4293      	cmp	r3, r2
 800be04:	dd05      	ble.n	800be12 <sin+0x2e>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	f7f4 fa19 	bl	8000240 <__aeabi_dsub>
 800be0e:	b007      	add	sp, #28
 800be10:	bd30      	pop	{r4, r5, pc}
 800be12:	aa02      	add	r2, sp, #8
 800be14:	f000 f82c 	bl	800be70 <__ieee754_rem_pio2>
 800be18:	f000 0003 	and.w	r0, r0, #3
 800be1c:	2801      	cmp	r0, #1
 800be1e:	d009      	beq.n	800be34 <sin+0x50>
 800be20:	2802      	cmp	r0, #2
 800be22:	d00e      	beq.n	800be42 <sin+0x5e>
 800be24:	b9c0      	cbnz	r0, 800be58 <sin+0x74>
 800be26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be2a:	2301      	movs	r3, #1
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be32:	e7e2      	b.n	800bdfa <sin+0x16>
 800be34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3c:	f000 fa10 	bl	800c260 <__kernel_cos>
 800be40:	e7e5      	b.n	800be0e <sin+0x2a>
 800be42:	2301      	movs	r3, #1
 800be44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be48:	9300      	str	r3, [sp, #0]
 800be4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be4e:	f000 fe07 	bl	800ca60 <__kernel_sin>
 800be52:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800be56:	e7da      	b.n	800be0e <sin+0x2a>
 800be58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be60:	f000 f9fe 	bl	800c260 <__kernel_cos>
 800be64:	e7f5      	b.n	800be52 <sin+0x6e>
 800be66:	bf00      	nop
 800be68:	3fe921fb 	.word	0x3fe921fb
 800be6c:	7fefffff 	.word	0x7fefffff

0800be70 <__ieee754_rem_pio2>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	4614      	mov	r4, r2
 800be76:	4ac4      	ldr	r2, [pc, #784]	; (800c188 <__ieee754_rem_pio2+0x318>)
 800be78:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800be7c:	b08d      	sub	sp, #52	; 0x34
 800be7e:	4592      	cmp	sl, r2
 800be80:	9104      	str	r1, [sp, #16]
 800be82:	dc07      	bgt.n	800be94 <__ieee754_rem_pio2+0x24>
 800be84:	2200      	movs	r2, #0
 800be86:	2300      	movs	r3, #0
 800be88:	e9c4 0100 	strd	r0, r1, [r4]
 800be8c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800be90:	2500      	movs	r5, #0
 800be92:	e024      	b.n	800bede <__ieee754_rem_pio2+0x6e>
 800be94:	4abd      	ldr	r2, [pc, #756]	; (800c18c <__ieee754_rem_pio2+0x31c>)
 800be96:	4592      	cmp	sl, r2
 800be98:	dc72      	bgt.n	800bf80 <__ieee754_rem_pio2+0x110>
 800be9a:	9b04      	ldr	r3, [sp, #16]
 800be9c:	4dbc      	ldr	r5, [pc, #752]	; (800c190 <__ieee754_rem_pio2+0x320>)
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	a3ab      	add	r3, pc, #684	; (adr r3, 800c150 <__ieee754_rem_pio2+0x2e0>)
 800bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea6:	dd36      	ble.n	800bf16 <__ieee754_rem_pio2+0xa6>
 800bea8:	f7f4 f9ca 	bl	8000240 <__aeabi_dsub>
 800beac:	45aa      	cmp	sl, r5
 800beae:	4606      	mov	r6, r0
 800beb0:	460f      	mov	r7, r1
 800beb2:	d018      	beq.n	800bee6 <__ieee754_rem_pio2+0x76>
 800beb4:	a3a8      	add	r3, pc, #672	; (adr r3, 800c158 <__ieee754_rem_pio2+0x2e8>)
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	f7f4 f9c1 	bl	8000240 <__aeabi_dsub>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	4630      	mov	r0, r6
 800bec4:	e9c4 2300 	strd	r2, r3, [r4]
 800bec8:	4639      	mov	r1, r7
 800beca:	f7f4 f9b9 	bl	8000240 <__aeabi_dsub>
 800bece:	a3a2      	add	r3, pc, #648	; (adr r3, 800c158 <__ieee754_rem_pio2+0x2e8>)
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	f7f4 f9b4 	bl	8000240 <__aeabi_dsub>
 800bed8:	2501      	movs	r5, #1
 800beda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bede:	4628      	mov	r0, r5
 800bee0:	b00d      	add	sp, #52	; 0x34
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee6:	a39e      	add	r3, pc, #632	; (adr r3, 800c160 <__ieee754_rem_pio2+0x2f0>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f7f4 f9a8 	bl	8000240 <__aeabi_dsub>
 800bef0:	a39d      	add	r3, pc, #628	; (adr r3, 800c168 <__ieee754_rem_pio2+0x2f8>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	4606      	mov	r6, r0
 800bef8:	460f      	mov	r7, r1
 800befa:	f7f4 f9a1 	bl	8000240 <__aeabi_dsub>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	4630      	mov	r0, r6
 800bf04:	e9c4 2300 	strd	r2, r3, [r4]
 800bf08:	4639      	mov	r1, r7
 800bf0a:	f7f4 f999 	bl	8000240 <__aeabi_dsub>
 800bf0e:	a396      	add	r3, pc, #600	; (adr r3, 800c168 <__ieee754_rem_pio2+0x2f8>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	e7de      	b.n	800bed4 <__ieee754_rem_pio2+0x64>
 800bf16:	f7f4 f995 	bl	8000244 <__adddf3>
 800bf1a:	45aa      	cmp	sl, r5
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	460f      	mov	r7, r1
 800bf20:	d016      	beq.n	800bf50 <__ieee754_rem_pio2+0xe0>
 800bf22:	a38d      	add	r3, pc, #564	; (adr r3, 800c158 <__ieee754_rem_pio2+0x2e8>)
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f7f4 f98c 	bl	8000244 <__adddf3>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4630      	mov	r0, r6
 800bf32:	e9c4 2300 	strd	r2, r3, [r4]
 800bf36:	4639      	mov	r1, r7
 800bf38:	f7f4 f982 	bl	8000240 <__aeabi_dsub>
 800bf3c:	a386      	add	r3, pc, #536	; (adr r3, 800c158 <__ieee754_rem_pio2+0x2e8>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f7f4 f97f 	bl	8000244 <__adddf3>
 800bf46:	f04f 35ff 	mov.w	r5, #4294967295
 800bf4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf4e:	e7c6      	b.n	800bede <__ieee754_rem_pio2+0x6e>
 800bf50:	a383      	add	r3, pc, #524	; (adr r3, 800c160 <__ieee754_rem_pio2+0x2f0>)
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	f7f4 f975 	bl	8000244 <__adddf3>
 800bf5a:	a383      	add	r3, pc, #524	; (adr r3, 800c168 <__ieee754_rem_pio2+0x2f8>)
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	4606      	mov	r6, r0
 800bf62:	460f      	mov	r7, r1
 800bf64:	f7f4 f96e 	bl	8000244 <__adddf3>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	e9c4 2300 	strd	r2, r3, [r4]
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 f964 	bl	8000240 <__aeabi_dsub>
 800bf78:	a37b      	add	r3, pc, #492	; (adr r3, 800c168 <__ieee754_rem_pio2+0x2f8>)
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	e7e0      	b.n	800bf42 <__ieee754_rem_pio2+0xd2>
 800bf80:	4a84      	ldr	r2, [pc, #528]	; (800c194 <__ieee754_rem_pio2+0x324>)
 800bf82:	4592      	cmp	sl, r2
 800bf84:	f300 80d5 	bgt.w	800c132 <__ieee754_rem_pio2+0x2c2>
 800bf88:	f000 fe20 	bl	800cbcc <fabs>
 800bf8c:	a378      	add	r3, pc, #480	; (adr r3, 800c170 <__ieee754_rem_pio2+0x300>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	4606      	mov	r6, r0
 800bf94:	460f      	mov	r7, r1
 800bf96:	f7f4 fb0b 	bl	80005b0 <__aeabi_dmul>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	4b7e      	ldr	r3, [pc, #504]	; (800c198 <__ieee754_rem_pio2+0x328>)
 800bf9e:	f7f4 f951 	bl	8000244 <__adddf3>
 800bfa2:	f7f4 fd9f 	bl	8000ae4 <__aeabi_d2iz>
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	f7f4 fa98 	bl	80004dc <__aeabi_i2d>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfb4:	a366      	add	r3, pc, #408	; (adr r3, 800c150 <__ieee754_rem_pio2+0x2e0>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	f7f4 faf9 	bl	80005b0 <__aeabi_dmul>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	f7f4 f93b 	bl	8000240 <__aeabi_dsub>
 800bfca:	a363      	add	r3, pc, #396	; (adr r3, 800c158 <__ieee754_rem_pio2+0x2e8>)
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	4689      	mov	r9, r1
 800bfd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfd8:	f7f4 faea 	bl	80005b0 <__aeabi_dmul>
 800bfdc:	2d1f      	cmp	r5, #31
 800bfde:	4606      	mov	r6, r0
 800bfe0:	460f      	mov	r7, r1
 800bfe2:	dc0e      	bgt.n	800c002 <__ieee754_rem_pio2+0x192>
 800bfe4:	4b6d      	ldr	r3, [pc, #436]	; (800c19c <__ieee754_rem_pio2+0x32c>)
 800bfe6:	1e6a      	subs	r2, r5, #1
 800bfe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfec:	4553      	cmp	r3, sl
 800bfee:	d008      	beq.n	800c002 <__ieee754_rem_pio2+0x192>
 800bff0:	4632      	mov	r2, r6
 800bff2:	463b      	mov	r3, r7
 800bff4:	4640      	mov	r0, r8
 800bff6:	4649      	mov	r1, r9
 800bff8:	f7f4 f922 	bl	8000240 <__aeabi_dsub>
 800bffc:	e9c4 0100 	strd	r0, r1, [r4]
 800c000:	e013      	b.n	800c02a <__ieee754_rem_pio2+0x1ba>
 800c002:	463b      	mov	r3, r7
 800c004:	4632      	mov	r2, r6
 800c006:	4640      	mov	r0, r8
 800c008:	4649      	mov	r1, r9
 800c00a:	f7f4 f919 	bl	8000240 <__aeabi_dsub>
 800c00e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c012:	9305      	str	r3, [sp, #20]
 800c014:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c018:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c01c:	f1ba 0f10 	cmp.w	sl, #16
 800c020:	dc1f      	bgt.n	800c062 <__ieee754_rem_pio2+0x1f2>
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	e9c4 2300 	strd	r2, r3, [r4]
 800c02a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c02e:	4640      	mov	r0, r8
 800c030:	4653      	mov	r3, sl
 800c032:	4649      	mov	r1, r9
 800c034:	f7f4 f904 	bl	8000240 <__aeabi_dsub>
 800c038:	4632      	mov	r2, r6
 800c03a:	463b      	mov	r3, r7
 800c03c:	f7f4 f900 	bl	8000240 <__aeabi_dsub>
 800c040:	460b      	mov	r3, r1
 800c042:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c046:	9904      	ldr	r1, [sp, #16]
 800c048:	4602      	mov	r2, r0
 800c04a:	2900      	cmp	r1, #0
 800c04c:	f6bf af47 	bge.w	800bede <__ieee754_rem_pio2+0x6e>
 800c050:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c054:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c058:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c05c:	60e3      	str	r3, [r4, #12]
 800c05e:	426d      	negs	r5, r5
 800c060:	e73d      	b.n	800bede <__ieee754_rem_pio2+0x6e>
 800c062:	a33f      	add	r3, pc, #252	; (adr r3, 800c160 <__ieee754_rem_pio2+0x2f0>)
 800c064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06c:	f7f4 faa0 	bl	80005b0 <__aeabi_dmul>
 800c070:	4606      	mov	r6, r0
 800c072:	460f      	mov	r7, r1
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	4640      	mov	r0, r8
 800c07a:	4649      	mov	r1, r9
 800c07c:	f7f4 f8e0 	bl	8000240 <__aeabi_dsub>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	4682      	mov	sl, r0
 800c086:	468b      	mov	fp, r1
 800c088:	4640      	mov	r0, r8
 800c08a:	4649      	mov	r1, r9
 800c08c:	f7f4 f8d8 	bl	8000240 <__aeabi_dsub>
 800c090:	4632      	mov	r2, r6
 800c092:	463b      	mov	r3, r7
 800c094:	f7f4 f8d4 	bl	8000240 <__aeabi_dsub>
 800c098:	a333      	add	r3, pc, #204	; (adr r3, 800c168 <__ieee754_rem_pio2+0x2f8>)
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a6:	f7f4 fa83 	bl	80005b0 <__aeabi_dmul>
 800c0aa:	4632      	mov	r2, r6
 800c0ac:	463b      	mov	r3, r7
 800c0ae:	f7f4 f8c7 	bl	8000240 <__aeabi_dsub>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	460f      	mov	r7, r1
 800c0ba:	4650      	mov	r0, sl
 800c0bc:	4659      	mov	r1, fp
 800c0be:	f7f4 f8bf 	bl	8000240 <__aeabi_dsub>
 800c0c2:	9a05      	ldr	r2, [sp, #20]
 800c0c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	2b31      	cmp	r3, #49	; 0x31
 800c0cc:	dc06      	bgt.n	800c0dc <__ieee754_rem_pio2+0x26c>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	46d0      	mov	r8, sl
 800c0d4:	46d9      	mov	r9, fp
 800c0d6:	e9c4 2300 	strd	r2, r3, [r4]
 800c0da:	e7a6      	b.n	800c02a <__ieee754_rem_pio2+0x1ba>
 800c0dc:	a326      	add	r3, pc, #152	; (adr r3, 800c178 <__ieee754_rem_pio2+0x308>)
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0e6:	f7f4 fa63 	bl	80005b0 <__aeabi_dmul>
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4650      	mov	r0, sl
 800c0f4:	4659      	mov	r1, fp
 800c0f6:	f7f4 f8a3 	bl	8000240 <__aeabi_dsub>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4680      	mov	r8, r0
 800c100:	4689      	mov	r9, r1
 800c102:	4650      	mov	r0, sl
 800c104:	4659      	mov	r1, fp
 800c106:	f7f4 f89b 	bl	8000240 <__aeabi_dsub>
 800c10a:	4632      	mov	r2, r6
 800c10c:	463b      	mov	r3, r7
 800c10e:	f7f4 f897 	bl	8000240 <__aeabi_dsub>
 800c112:	a31b      	add	r3, pc, #108	; (adr r3, 800c180 <__ieee754_rem_pio2+0x310>)
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	4606      	mov	r6, r0
 800c11a:	460f      	mov	r7, r1
 800c11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c120:	f7f4 fa46 	bl	80005b0 <__aeabi_dmul>
 800c124:	4632      	mov	r2, r6
 800c126:	463b      	mov	r3, r7
 800c128:	f7f4 f88a 	bl	8000240 <__aeabi_dsub>
 800c12c:	4606      	mov	r6, r0
 800c12e:	460f      	mov	r7, r1
 800c130:	e75e      	b.n	800bff0 <__ieee754_rem_pio2+0x180>
 800c132:	4a1b      	ldr	r2, [pc, #108]	; (800c1a0 <__ieee754_rem_pio2+0x330>)
 800c134:	4592      	cmp	sl, r2
 800c136:	dd35      	ble.n	800c1a4 <__ieee754_rem_pio2+0x334>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	f7f4 f880 	bl	8000240 <__aeabi_dsub>
 800c140:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c144:	e9c4 0100 	strd	r0, r1, [r4]
 800c148:	e6a2      	b.n	800be90 <__ieee754_rem_pio2+0x20>
 800c14a:	bf00      	nop
 800c14c:	f3af 8000 	nop.w
 800c150:	54400000 	.word	0x54400000
 800c154:	3ff921fb 	.word	0x3ff921fb
 800c158:	1a626331 	.word	0x1a626331
 800c15c:	3dd0b461 	.word	0x3dd0b461
 800c160:	1a600000 	.word	0x1a600000
 800c164:	3dd0b461 	.word	0x3dd0b461
 800c168:	2e037073 	.word	0x2e037073
 800c16c:	3ba3198a 	.word	0x3ba3198a
 800c170:	6dc9c883 	.word	0x6dc9c883
 800c174:	3fe45f30 	.word	0x3fe45f30
 800c178:	2e000000 	.word	0x2e000000
 800c17c:	3ba3198a 	.word	0x3ba3198a
 800c180:	252049c1 	.word	0x252049c1
 800c184:	397b839a 	.word	0x397b839a
 800c188:	3fe921fb 	.word	0x3fe921fb
 800c18c:	4002d97b 	.word	0x4002d97b
 800c190:	3ff921fb 	.word	0x3ff921fb
 800c194:	413921fb 	.word	0x413921fb
 800c198:	3fe00000 	.word	0x3fe00000
 800c19c:	08077328 	.word	0x08077328
 800c1a0:	7fefffff 	.word	0x7fefffff
 800c1a4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c1a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c1ac:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c1b0:	460f      	mov	r7, r1
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	f7f4 fc96 	bl	8000ae4 <__aeabi_d2iz>
 800c1b8:	f7f4 f990 	bl	80004dc <__aeabi_i2d>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1c8:	f7f4 f83a 	bl	8000240 <__aeabi_dsub>
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	4b22      	ldr	r3, [pc, #136]	; (800c258 <__ieee754_rem_pio2+0x3e8>)
 800c1d0:	f7f4 f9ee 	bl	80005b0 <__aeabi_dmul>
 800c1d4:	460f      	mov	r7, r1
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	f7f4 fc84 	bl	8000ae4 <__aeabi_d2iz>
 800c1dc:	f7f4 f97e 	bl	80004dc <__aeabi_i2d>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1ec:	f7f4 f828 	bl	8000240 <__aeabi_dsub>
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	4b19      	ldr	r3, [pc, #100]	; (800c258 <__ieee754_rem_pio2+0x3e8>)
 800c1f4:	f7f4 f9dc 	bl	80005b0 <__aeabi_dmul>
 800c1f8:	f04f 0803 	mov.w	r8, #3
 800c1fc:	2600      	movs	r6, #0
 800c1fe:	2700      	movs	r7, #0
 800c200:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c204:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c208:	4632      	mov	r2, r6
 800c20a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c20e:	463b      	mov	r3, r7
 800c210:	46c2      	mov	sl, r8
 800c212:	f108 38ff 	add.w	r8, r8, #4294967295
 800c216:	f7f4 fc33 	bl	8000a80 <__aeabi_dcmpeq>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d1f4      	bne.n	800c208 <__ieee754_rem_pio2+0x398>
 800c21e:	4b0f      	ldr	r3, [pc, #60]	; (800c25c <__ieee754_rem_pio2+0x3ec>)
 800c220:	462a      	mov	r2, r5
 800c222:	9301      	str	r3, [sp, #4]
 800c224:	2302      	movs	r3, #2
 800c226:	4621      	mov	r1, r4
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	a806      	add	r0, sp, #24
 800c22c:	4653      	mov	r3, sl
 800c22e:	f000 f8d5 	bl	800c3dc <__kernel_rem_pio2>
 800c232:	9b04      	ldr	r3, [sp, #16]
 800c234:	4605      	mov	r5, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	f6bf ae51 	bge.w	800bede <__ieee754_rem_pio2+0x6e>
 800c23c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c240:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c244:	e9c4 2300 	strd	r2, r3, [r4]
 800c248:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c24c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c250:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c254:	e703      	b.n	800c05e <__ieee754_rem_pio2+0x1ee>
 800c256:	bf00      	nop
 800c258:	41700000 	.word	0x41700000
 800c25c:	080773a8 	.word	0x080773a8

0800c260 <__kernel_cos>:
 800c260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c268:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c26c:	4680      	mov	r8, r0
 800c26e:	460f      	mov	r7, r1
 800c270:	e9cd 2300 	strd	r2, r3, [sp]
 800c274:	da04      	bge.n	800c280 <__kernel_cos+0x20>
 800c276:	f7f4 fc35 	bl	8000ae4 <__aeabi_d2iz>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	f000 8086 	beq.w	800c38c <__kernel_cos+0x12c>
 800c280:	4642      	mov	r2, r8
 800c282:	463b      	mov	r3, r7
 800c284:	4640      	mov	r0, r8
 800c286:	4639      	mov	r1, r7
 800c288:	f7f4 f992 	bl	80005b0 <__aeabi_dmul>
 800c28c:	2200      	movs	r2, #0
 800c28e:	4b4e      	ldr	r3, [pc, #312]	; (800c3c8 <__kernel_cos+0x168>)
 800c290:	4604      	mov	r4, r0
 800c292:	460d      	mov	r5, r1
 800c294:	f7f4 f98c 	bl	80005b0 <__aeabi_dmul>
 800c298:	a33f      	add	r3, pc, #252	; (adr r3, 800c398 <__kernel_cos+0x138>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	4682      	mov	sl, r0
 800c2a0:	468b      	mov	fp, r1
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7f4 f983 	bl	80005b0 <__aeabi_dmul>
 800c2aa:	a33d      	add	r3, pc, #244	; (adr r3, 800c3a0 <__kernel_cos+0x140>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f3 ffc8 	bl	8000244 <__adddf3>
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	f7f4 f97a 	bl	80005b0 <__aeabi_dmul>
 800c2bc:	a33a      	add	r3, pc, #232	; (adr r3, 800c3a8 <__kernel_cos+0x148>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	f7f3 ffbd 	bl	8000240 <__aeabi_dsub>
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	462b      	mov	r3, r5
 800c2ca:	f7f4 f971 	bl	80005b0 <__aeabi_dmul>
 800c2ce:	a338      	add	r3, pc, #224	; (adr r3, 800c3b0 <__kernel_cos+0x150>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f7f3 ffb6 	bl	8000244 <__adddf3>
 800c2d8:	4622      	mov	r2, r4
 800c2da:	462b      	mov	r3, r5
 800c2dc:	f7f4 f968 	bl	80005b0 <__aeabi_dmul>
 800c2e0:	a335      	add	r3, pc, #212	; (adr r3, 800c3b8 <__kernel_cos+0x158>)
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	f7f3 ffab 	bl	8000240 <__aeabi_dsub>
 800c2ea:	4622      	mov	r2, r4
 800c2ec:	462b      	mov	r3, r5
 800c2ee:	f7f4 f95f 	bl	80005b0 <__aeabi_dmul>
 800c2f2:	a333      	add	r3, pc, #204	; (adr r3, 800c3c0 <__kernel_cos+0x160>)
 800c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f8:	f7f3 ffa4 	bl	8000244 <__adddf3>
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	462b      	mov	r3, r5
 800c300:	f7f4 f956 	bl	80005b0 <__aeabi_dmul>
 800c304:	4622      	mov	r2, r4
 800c306:	462b      	mov	r3, r5
 800c308:	f7f4 f952 	bl	80005b0 <__aeabi_dmul>
 800c30c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c310:	4604      	mov	r4, r0
 800c312:	460d      	mov	r5, r1
 800c314:	4640      	mov	r0, r8
 800c316:	4639      	mov	r1, r7
 800c318:	f7f4 f94a 	bl	80005b0 <__aeabi_dmul>
 800c31c:	460b      	mov	r3, r1
 800c31e:	4602      	mov	r2, r0
 800c320:	4629      	mov	r1, r5
 800c322:	4620      	mov	r0, r4
 800c324:	f7f3 ff8c 	bl	8000240 <__aeabi_dsub>
 800c328:	4b28      	ldr	r3, [pc, #160]	; (800c3cc <__kernel_cos+0x16c>)
 800c32a:	4680      	mov	r8, r0
 800c32c:	429e      	cmp	r6, r3
 800c32e:	4689      	mov	r9, r1
 800c330:	dc0e      	bgt.n	800c350 <__kernel_cos+0xf0>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	4650      	mov	r0, sl
 800c338:	4659      	mov	r1, fp
 800c33a:	f7f3 ff81 	bl	8000240 <__aeabi_dsub>
 800c33e:	4602      	mov	r2, r0
 800c340:	2000      	movs	r0, #0
 800c342:	460b      	mov	r3, r1
 800c344:	4922      	ldr	r1, [pc, #136]	; (800c3d0 <__kernel_cos+0x170>)
 800c346:	f7f3 ff7b 	bl	8000240 <__aeabi_dsub>
 800c34a:	b003      	add	sp, #12
 800c34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c350:	2400      	movs	r4, #0
 800c352:	4b20      	ldr	r3, [pc, #128]	; (800c3d4 <__kernel_cos+0x174>)
 800c354:	4622      	mov	r2, r4
 800c356:	429e      	cmp	r6, r3
 800c358:	bfcc      	ite	gt
 800c35a:	4d1f      	ldrgt	r5, [pc, #124]	; (800c3d8 <__kernel_cos+0x178>)
 800c35c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c360:	462b      	mov	r3, r5
 800c362:	2000      	movs	r0, #0
 800c364:	491a      	ldr	r1, [pc, #104]	; (800c3d0 <__kernel_cos+0x170>)
 800c366:	f7f3 ff6b 	bl	8000240 <__aeabi_dsub>
 800c36a:	4622      	mov	r2, r4
 800c36c:	4606      	mov	r6, r0
 800c36e:	460f      	mov	r7, r1
 800c370:	462b      	mov	r3, r5
 800c372:	4650      	mov	r0, sl
 800c374:	4659      	mov	r1, fp
 800c376:	f7f3 ff63 	bl	8000240 <__aeabi_dsub>
 800c37a:	4642      	mov	r2, r8
 800c37c:	464b      	mov	r3, r9
 800c37e:	f7f3 ff5f 	bl	8000240 <__aeabi_dsub>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	4630      	mov	r0, r6
 800c388:	4639      	mov	r1, r7
 800c38a:	e7dc      	b.n	800c346 <__kernel_cos+0xe6>
 800c38c:	2000      	movs	r0, #0
 800c38e:	4910      	ldr	r1, [pc, #64]	; (800c3d0 <__kernel_cos+0x170>)
 800c390:	e7db      	b.n	800c34a <__kernel_cos+0xea>
 800c392:	bf00      	nop
 800c394:	f3af 8000 	nop.w
 800c398:	be8838d4 	.word	0xbe8838d4
 800c39c:	bda8fae9 	.word	0xbda8fae9
 800c3a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c3a4:	3e21ee9e 	.word	0x3e21ee9e
 800c3a8:	809c52ad 	.word	0x809c52ad
 800c3ac:	3e927e4f 	.word	0x3e927e4f
 800c3b0:	19cb1590 	.word	0x19cb1590
 800c3b4:	3efa01a0 	.word	0x3efa01a0
 800c3b8:	16c15177 	.word	0x16c15177
 800c3bc:	3f56c16c 	.word	0x3f56c16c
 800c3c0:	5555554c 	.word	0x5555554c
 800c3c4:	3fa55555 	.word	0x3fa55555
 800c3c8:	3fe00000 	.word	0x3fe00000
 800c3cc:	3fd33332 	.word	0x3fd33332
 800c3d0:	3ff00000 	.word	0x3ff00000
 800c3d4:	3fe90000 	.word	0x3fe90000
 800c3d8:	3fd20000 	.word	0x3fd20000

0800c3dc <__kernel_rem_pio2>:
 800c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c3e4:	9308      	str	r3, [sp, #32]
 800c3e6:	9106      	str	r1, [sp, #24]
 800c3e8:	4bb6      	ldr	r3, [pc, #728]	; (800c6c4 <__kernel_rem_pio2+0x2e8>)
 800c3ea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c3ec:	f112 0f14 	cmn.w	r2, #20
 800c3f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3f4:	bfa8      	it	ge
 800c3f6:	1ed4      	subge	r4, r2, #3
 800c3f8:	9302      	str	r3, [sp, #8]
 800c3fa:	9b08      	ldr	r3, [sp, #32]
 800c3fc:	bfb8      	it	lt
 800c3fe:	2400      	movlt	r4, #0
 800c400:	f103 33ff 	add.w	r3, r3, #4294967295
 800c404:	9307      	str	r3, [sp, #28]
 800c406:	bfa4      	itt	ge
 800c408:	2318      	movge	r3, #24
 800c40a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c40e:	f06f 0317 	mvn.w	r3, #23
 800c412:	fb04 3303 	mla	r3, r4, r3, r3
 800c416:	eb03 0b02 	add.w	fp, r3, r2
 800c41a:	9a07      	ldr	r2, [sp, #28]
 800c41c:	9b02      	ldr	r3, [sp, #8]
 800c41e:	1aa7      	subs	r7, r4, r2
 800c420:	eb03 0802 	add.w	r8, r3, r2
 800c424:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c426:	2500      	movs	r5, #0
 800c428:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c42c:	2200      	movs	r2, #0
 800c42e:	2300      	movs	r3, #0
 800c430:	9009      	str	r0, [sp, #36]	; 0x24
 800c432:	ae20      	add	r6, sp, #128	; 0x80
 800c434:	4545      	cmp	r5, r8
 800c436:	dd14      	ble.n	800c462 <__kernel_rem_pio2+0x86>
 800c438:	f04f 0800 	mov.w	r8, #0
 800c43c:	9a08      	ldr	r2, [sp, #32]
 800c43e:	ab20      	add	r3, sp, #128	; 0x80
 800c440:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c444:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c448:	9b02      	ldr	r3, [sp, #8]
 800c44a:	4598      	cmp	r8, r3
 800c44c:	dc35      	bgt.n	800c4ba <__kernel_rem_pio2+0xde>
 800c44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c450:	2200      	movs	r2, #0
 800c452:	f1a3 0908 	sub.w	r9, r3, #8
 800c456:	2300      	movs	r3, #0
 800c458:	462f      	mov	r7, r5
 800c45a:	2600      	movs	r6, #0
 800c45c:	e9cd 2300 	strd	r2, r3, [sp]
 800c460:	e01f      	b.n	800c4a2 <__kernel_rem_pio2+0xc6>
 800c462:	42ef      	cmn	r7, r5
 800c464:	d40b      	bmi.n	800c47e <__kernel_rem_pio2+0xa2>
 800c466:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c46a:	e9cd 2300 	strd	r2, r3, [sp]
 800c46e:	f7f4 f835 	bl	80004dc <__aeabi_i2d>
 800c472:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c476:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c47a:	3501      	adds	r5, #1
 800c47c:	e7da      	b.n	800c434 <__kernel_rem_pio2+0x58>
 800c47e:	4610      	mov	r0, r2
 800c480:	4619      	mov	r1, r3
 800c482:	e7f8      	b.n	800c476 <__kernel_rem_pio2+0x9a>
 800c484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c488:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c48c:	f7f4 f890 	bl	80005b0 <__aeabi_dmul>
 800c490:	4602      	mov	r2, r0
 800c492:	460b      	mov	r3, r1
 800c494:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c498:	f7f3 fed4 	bl	8000244 <__adddf3>
 800c49c:	e9cd 0100 	strd	r0, r1, [sp]
 800c4a0:	3601      	adds	r6, #1
 800c4a2:	9b07      	ldr	r3, [sp, #28]
 800c4a4:	3f08      	subs	r7, #8
 800c4a6:	429e      	cmp	r6, r3
 800c4a8:	ddec      	ble.n	800c484 <__kernel_rem_pio2+0xa8>
 800c4aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ae:	f108 0801 	add.w	r8, r8, #1
 800c4b2:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c4b6:	3508      	adds	r5, #8
 800c4b8:	e7c6      	b.n	800c448 <__kernel_rem_pio2+0x6c>
 800c4ba:	9b02      	ldr	r3, [sp, #8]
 800c4bc:	aa0c      	add	r2, sp, #48	; 0x30
 800c4be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c4c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4c4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c4c6:	9e02      	ldr	r6, [sp, #8]
 800c4c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c4cc:	930a      	str	r3, [sp, #40]	; 0x28
 800c4ce:	ab98      	add	r3, sp, #608	; 0x260
 800c4d0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c4d4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c4d8:	ab70      	add	r3, sp, #448	; 0x1c0
 800c4da:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c4de:	46d0      	mov	r8, sl
 800c4e0:	46b1      	mov	r9, r6
 800c4e2:	af0c      	add	r7, sp, #48	; 0x30
 800c4e4:	9700      	str	r7, [sp, #0]
 800c4e6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ea:	f1a8 0808 	sub.w	r8, r8, #8
 800c4ee:	dc71      	bgt.n	800c5d4 <__kernel_rem_pio2+0x1f8>
 800c4f0:	465a      	mov	r2, fp
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f000 fbef 	bl	800ccd8 <scalbn>
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c500:	4604      	mov	r4, r0
 800c502:	460d      	mov	r5, r1
 800c504:	f7f4 f854 	bl	80005b0 <__aeabi_dmul>
 800c508:	f000 fb66 	bl	800cbd8 <floor>
 800c50c:	2200      	movs	r2, #0
 800c50e:	4b6e      	ldr	r3, [pc, #440]	; (800c6c8 <__kernel_rem_pio2+0x2ec>)
 800c510:	f7f4 f84e 	bl	80005b0 <__aeabi_dmul>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	4620      	mov	r0, r4
 800c51a:	4629      	mov	r1, r5
 800c51c:	f7f3 fe90 	bl	8000240 <__aeabi_dsub>
 800c520:	460d      	mov	r5, r1
 800c522:	4604      	mov	r4, r0
 800c524:	f7f4 fade 	bl	8000ae4 <__aeabi_d2iz>
 800c528:	9004      	str	r0, [sp, #16]
 800c52a:	f7f3 ffd7 	bl	80004dc <__aeabi_i2d>
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	4620      	mov	r0, r4
 800c534:	4629      	mov	r1, r5
 800c536:	f7f3 fe83 	bl	8000240 <__aeabi_dsub>
 800c53a:	f1bb 0f00 	cmp.w	fp, #0
 800c53e:	4680      	mov	r8, r0
 800c540:	4689      	mov	r9, r1
 800c542:	dd70      	ble.n	800c626 <__kernel_rem_pio2+0x24a>
 800c544:	1e72      	subs	r2, r6, #1
 800c546:	ab0c      	add	r3, sp, #48	; 0x30
 800c548:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c54c:	9c04      	ldr	r4, [sp, #16]
 800c54e:	f1cb 0118 	rsb	r1, fp, #24
 800c552:	fa40 f301 	asr.w	r3, r0, r1
 800c556:	441c      	add	r4, r3
 800c558:	408b      	lsls	r3, r1
 800c55a:	1ac0      	subs	r0, r0, r3
 800c55c:	ab0c      	add	r3, sp, #48	; 0x30
 800c55e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c562:	f1cb 0317 	rsb	r3, fp, #23
 800c566:	9404      	str	r4, [sp, #16]
 800c568:	fa40 f303 	asr.w	r3, r0, r3
 800c56c:	9300      	str	r3, [sp, #0]
 800c56e:	9b00      	ldr	r3, [sp, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	dd66      	ble.n	800c642 <__kernel_rem_pio2+0x266>
 800c574:	2200      	movs	r2, #0
 800c576:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c57a:	4614      	mov	r4, r2
 800c57c:	9b04      	ldr	r3, [sp, #16]
 800c57e:	3301      	adds	r3, #1
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	4296      	cmp	r6, r2
 800c584:	f300 80ac 	bgt.w	800c6e0 <__kernel_rem_pio2+0x304>
 800c588:	f1bb 0f00 	cmp.w	fp, #0
 800c58c:	dd07      	ble.n	800c59e <__kernel_rem_pio2+0x1c2>
 800c58e:	f1bb 0f01 	cmp.w	fp, #1
 800c592:	f000 80b4 	beq.w	800c6fe <__kernel_rem_pio2+0x322>
 800c596:	f1bb 0f02 	cmp.w	fp, #2
 800c59a:	f000 80ba 	beq.w	800c712 <__kernel_rem_pio2+0x336>
 800c59e:	9b00      	ldr	r3, [sp, #0]
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d14e      	bne.n	800c642 <__kernel_rem_pio2+0x266>
 800c5a4:	4642      	mov	r2, r8
 800c5a6:	464b      	mov	r3, r9
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	4948      	ldr	r1, [pc, #288]	; (800c6cc <__kernel_rem_pio2+0x2f0>)
 800c5ac:	f7f3 fe48 	bl	8000240 <__aeabi_dsub>
 800c5b0:	4680      	mov	r8, r0
 800c5b2:	4689      	mov	r9, r1
 800c5b4:	2c00      	cmp	r4, #0
 800c5b6:	d044      	beq.n	800c642 <__kernel_rem_pio2+0x266>
 800c5b8:	465a      	mov	r2, fp
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	4943      	ldr	r1, [pc, #268]	; (800c6cc <__kernel_rem_pio2+0x2f0>)
 800c5be:	f000 fb8b 	bl	800ccd8 <scalbn>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	4649      	mov	r1, r9
 800c5ca:	f7f3 fe39 	bl	8000240 <__aeabi_dsub>
 800c5ce:	4680      	mov	r8, r0
 800c5d0:	4689      	mov	r9, r1
 800c5d2:	e036      	b.n	800c642 <__kernel_rem_pio2+0x266>
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4b3e      	ldr	r3, [pc, #248]	; (800c6d0 <__kernel_rem_pio2+0x2f4>)
 800c5d8:	4620      	mov	r0, r4
 800c5da:	4629      	mov	r1, r5
 800c5dc:	f7f3 ffe8 	bl	80005b0 <__aeabi_dmul>
 800c5e0:	f7f4 fa80 	bl	8000ae4 <__aeabi_d2iz>
 800c5e4:	f7f3 ff7a 	bl	80004dc <__aeabi_i2d>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	4b38      	ldr	r3, [pc, #224]	; (800c6d4 <__kernel_rem_pio2+0x2f8>)
 800c5f4:	f7f3 ffdc 	bl	80005b0 <__aeabi_dmul>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	4629      	mov	r1, r5
 800c600:	f7f3 fe1e 	bl	8000240 <__aeabi_dsub>
 800c604:	f7f4 fa6e 	bl	8000ae4 <__aeabi_d2iz>
 800c608:	9b00      	ldr	r3, [sp, #0]
 800c60a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c60e:	f843 0b04 	str.w	r0, [r3], #4
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c618:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c61c:	f7f3 fe12 	bl	8000244 <__adddf3>
 800c620:	4604      	mov	r4, r0
 800c622:	460d      	mov	r5, r1
 800c624:	e75f      	b.n	800c4e6 <__kernel_rem_pio2+0x10a>
 800c626:	d105      	bne.n	800c634 <__kernel_rem_pio2+0x258>
 800c628:	1e73      	subs	r3, r6, #1
 800c62a:	aa0c      	add	r2, sp, #48	; 0x30
 800c62c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c630:	15c3      	asrs	r3, r0, #23
 800c632:	e79b      	b.n	800c56c <__kernel_rem_pio2+0x190>
 800c634:	2200      	movs	r2, #0
 800c636:	4b28      	ldr	r3, [pc, #160]	; (800c6d8 <__kernel_rem_pio2+0x2fc>)
 800c638:	f7f4 fa40 	bl	8000abc <__aeabi_dcmpge>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d13e      	bne.n	800c6be <__kernel_rem_pio2+0x2e2>
 800c640:	9000      	str	r0, [sp, #0]
 800c642:	2200      	movs	r2, #0
 800c644:	2300      	movs	r3, #0
 800c646:	4640      	mov	r0, r8
 800c648:	4649      	mov	r1, r9
 800c64a:	f7f4 fa19 	bl	8000a80 <__aeabi_dcmpeq>
 800c64e:	2800      	cmp	r0, #0
 800c650:	f000 80b1 	beq.w	800c7b6 <__kernel_rem_pio2+0x3da>
 800c654:	1e74      	subs	r4, r6, #1
 800c656:	4623      	mov	r3, r4
 800c658:	2200      	movs	r2, #0
 800c65a:	9902      	ldr	r1, [sp, #8]
 800c65c:	428b      	cmp	r3, r1
 800c65e:	da5f      	bge.n	800c720 <__kernel_rem_pio2+0x344>
 800c660:	2a00      	cmp	r2, #0
 800c662:	d074      	beq.n	800c74e <__kernel_rem_pio2+0x372>
 800c664:	ab0c      	add	r3, sp, #48	; 0x30
 800c666:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c66a:	f1ab 0b18 	sub.w	fp, fp, #24
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 809f 	beq.w	800c7b2 <__kernel_rem_pio2+0x3d6>
 800c674:	465a      	mov	r2, fp
 800c676:	2000      	movs	r0, #0
 800c678:	4914      	ldr	r1, [pc, #80]	; (800c6cc <__kernel_rem_pio2+0x2f0>)
 800c67a:	f000 fb2d 	bl	800ccd8 <scalbn>
 800c67e:	46a2      	mov	sl, r4
 800c680:	4606      	mov	r6, r0
 800c682:	460f      	mov	r7, r1
 800c684:	f04f 0800 	mov.w	r8, #0
 800c688:	ab70      	add	r3, sp, #448	; 0x1c0
 800c68a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c6d0 <__kernel_rem_pio2+0x2f4>
 800c68e:	00e5      	lsls	r5, r4, #3
 800c690:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c694:	f1ba 0f00 	cmp.w	sl, #0
 800c698:	f280 80c3 	bge.w	800c822 <__kernel_rem_pio2+0x446>
 800c69c:	4626      	mov	r6, r4
 800c69e:	2e00      	cmp	r6, #0
 800c6a0:	f2c0 80f5 	blt.w	800c88e <__kernel_rem_pio2+0x4b2>
 800c6a4:	4b0d      	ldr	r3, [pc, #52]	; (800c6dc <__kernel_rem_pio2+0x300>)
 800c6a6:	f04f 0a00 	mov.w	sl, #0
 800c6aa:	9307      	str	r3, [sp, #28]
 800c6ac:	ab70      	add	r3, sp, #448	; 0x1c0
 800c6ae:	f04f 0b00 	mov.w	fp, #0
 800c6b2:	f04f 0800 	mov.w	r8, #0
 800c6b6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c6ba:	1ba7      	subs	r7, r4, r6
 800c6bc:	e0db      	b.n	800c876 <__kernel_rem_pio2+0x49a>
 800c6be:	2302      	movs	r3, #2
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	e757      	b.n	800c574 <__kernel_rem_pio2+0x198>
 800c6c4:	080774f0 	.word	0x080774f0
 800c6c8:	40200000 	.word	0x40200000
 800c6cc:	3ff00000 	.word	0x3ff00000
 800c6d0:	3e700000 	.word	0x3e700000
 800c6d4:	41700000 	.word	0x41700000
 800c6d8:	3fe00000 	.word	0x3fe00000
 800c6dc:	080774b0 	.word	0x080774b0
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	b944      	cbnz	r4, 800c6f6 <__kernel_rem_pio2+0x31a>
 800c6e4:	b11b      	cbz	r3, 800c6ee <__kernel_rem_pio2+0x312>
 800c6e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c6ea:	603b      	str	r3, [r7, #0]
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	461c      	mov	r4, r3
 800c6f0:	3201      	adds	r2, #1
 800c6f2:	3704      	adds	r7, #4
 800c6f4:	e745      	b.n	800c582 <__kernel_rem_pio2+0x1a6>
 800c6f6:	1acb      	subs	r3, r1, r3
 800c6f8:	603b      	str	r3, [r7, #0]
 800c6fa:	4623      	mov	r3, r4
 800c6fc:	e7f7      	b.n	800c6ee <__kernel_rem_pio2+0x312>
 800c6fe:	1e72      	subs	r2, r6, #1
 800c700:	ab0c      	add	r3, sp, #48	; 0x30
 800c702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c706:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c70a:	a90c      	add	r1, sp, #48	; 0x30
 800c70c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c710:	e745      	b.n	800c59e <__kernel_rem_pio2+0x1c2>
 800c712:	1e72      	subs	r2, r6, #1
 800c714:	ab0c      	add	r3, sp, #48	; 0x30
 800c716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c71e:	e7f4      	b.n	800c70a <__kernel_rem_pio2+0x32e>
 800c720:	a90c      	add	r1, sp, #48	; 0x30
 800c722:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c726:	3b01      	subs	r3, #1
 800c728:	430a      	orrs	r2, r1
 800c72a:	e796      	b.n	800c65a <__kernel_rem_pio2+0x27e>
 800c72c:	3401      	adds	r4, #1
 800c72e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c732:	2a00      	cmp	r2, #0
 800c734:	d0fa      	beq.n	800c72c <__kernel_rem_pio2+0x350>
 800c736:	9b08      	ldr	r3, [sp, #32]
 800c738:	f106 0801 	add.w	r8, r6, #1
 800c73c:	18f5      	adds	r5, r6, r3
 800c73e:	ab20      	add	r3, sp, #128	; 0x80
 800c740:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c744:	4434      	add	r4, r6
 800c746:	4544      	cmp	r4, r8
 800c748:	da04      	bge.n	800c754 <__kernel_rem_pio2+0x378>
 800c74a:	4626      	mov	r6, r4
 800c74c:	e6bf      	b.n	800c4ce <__kernel_rem_pio2+0xf2>
 800c74e:	2401      	movs	r4, #1
 800c750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c752:	e7ec      	b.n	800c72e <__kernel_rem_pio2+0x352>
 800c754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c756:	f04f 0900 	mov.w	r9, #0
 800c75a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c75e:	f7f3 febd 	bl	80004dc <__aeabi_i2d>
 800c762:	2600      	movs	r6, #0
 800c764:	2700      	movs	r7, #0
 800c766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c768:	e9c5 0100 	strd	r0, r1, [r5]
 800c76c:	3b08      	subs	r3, #8
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	9504      	str	r5, [sp, #16]
 800c772:	9b07      	ldr	r3, [sp, #28]
 800c774:	4599      	cmp	r9, r3
 800c776:	dd05      	ble.n	800c784 <__kernel_rem_pio2+0x3a8>
 800c778:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c77c:	f108 0801 	add.w	r8, r8, #1
 800c780:	3508      	adds	r5, #8
 800c782:	e7e0      	b.n	800c746 <__kernel_rem_pio2+0x36a>
 800c784:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c788:	9900      	ldr	r1, [sp, #0]
 800c78a:	f109 0901 	add.w	r9, r9, #1
 800c78e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c792:	9100      	str	r1, [sp, #0]
 800c794:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c798:	f8cd c010 	str.w	ip, [sp, #16]
 800c79c:	f7f3 ff08 	bl	80005b0 <__aeabi_dmul>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	4639      	mov	r1, r7
 800c7a8:	f7f3 fd4c 	bl	8000244 <__adddf3>
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	460f      	mov	r7, r1
 800c7b0:	e7df      	b.n	800c772 <__kernel_rem_pio2+0x396>
 800c7b2:	3c01      	subs	r4, #1
 800c7b4:	e756      	b.n	800c664 <__kernel_rem_pio2+0x288>
 800c7b6:	f1cb 0200 	rsb	r2, fp, #0
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	4649      	mov	r1, r9
 800c7be:	f000 fa8b 	bl	800ccd8 <scalbn>
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	4ba4      	ldr	r3, [pc, #656]	; (800ca58 <__kernel_rem_pio2+0x67c>)
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	460d      	mov	r5, r1
 800c7ca:	f7f4 f977 	bl	8000abc <__aeabi_dcmpge>
 800c7ce:	b1f8      	cbz	r0, 800c810 <__kernel_rem_pio2+0x434>
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	4ba2      	ldr	r3, [pc, #648]	; (800ca5c <__kernel_rem_pio2+0x680>)
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	f7f3 feea 	bl	80005b0 <__aeabi_dmul>
 800c7dc:	f7f4 f982 	bl	8000ae4 <__aeabi_d2iz>
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	f7f3 fe7b 	bl	80004dc <__aeabi_i2d>
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	4b9b      	ldr	r3, [pc, #620]	; (800ca58 <__kernel_rem_pio2+0x67c>)
 800c7ea:	f7f3 fee1 	bl	80005b0 <__aeabi_dmul>
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7f3 fd23 	bl	8000240 <__aeabi_dsub>
 800c7fa:	f7f4 f973 	bl	8000ae4 <__aeabi_d2iz>
 800c7fe:	1c74      	adds	r4, r6, #1
 800c800:	ab0c      	add	r3, sp, #48	; 0x30
 800c802:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c806:	f10b 0b18 	add.w	fp, fp, #24
 800c80a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c80e:	e731      	b.n	800c674 <__kernel_rem_pio2+0x298>
 800c810:	4620      	mov	r0, r4
 800c812:	4629      	mov	r1, r5
 800c814:	f7f4 f966 	bl	8000ae4 <__aeabi_d2iz>
 800c818:	ab0c      	add	r3, sp, #48	; 0x30
 800c81a:	4634      	mov	r4, r6
 800c81c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c820:	e728      	b.n	800c674 <__kernel_rem_pio2+0x298>
 800c822:	ab0c      	add	r3, sp, #48	; 0x30
 800c824:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c828:	f7f3 fe58 	bl	80004dc <__aeabi_i2d>
 800c82c:	4632      	mov	r2, r6
 800c82e:	463b      	mov	r3, r7
 800c830:	f7f3 febe 	bl	80005b0 <__aeabi_dmul>
 800c834:	4642      	mov	r2, r8
 800c836:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c83a:	464b      	mov	r3, r9
 800c83c:	4630      	mov	r0, r6
 800c83e:	4639      	mov	r1, r7
 800c840:	f7f3 feb6 	bl	80005b0 <__aeabi_dmul>
 800c844:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c848:	4606      	mov	r6, r0
 800c84a:	460f      	mov	r7, r1
 800c84c:	e722      	b.n	800c694 <__kernel_rem_pio2+0x2b8>
 800c84e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c852:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c856:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c85a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c85e:	f7f3 fea7 	bl	80005b0 <__aeabi_dmul>
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4650      	mov	r0, sl
 800c868:	4659      	mov	r1, fp
 800c86a:	f7f3 fceb 	bl	8000244 <__adddf3>
 800c86e:	4682      	mov	sl, r0
 800c870:	468b      	mov	fp, r1
 800c872:	f108 0801 	add.w	r8, r8, #1
 800c876:	9b02      	ldr	r3, [sp, #8]
 800c878:	4598      	cmp	r8, r3
 800c87a:	dc01      	bgt.n	800c880 <__kernel_rem_pio2+0x4a4>
 800c87c:	45b8      	cmp	r8, r7
 800c87e:	dde6      	ble.n	800c84e <__kernel_rem_pio2+0x472>
 800c880:	ab48      	add	r3, sp, #288	; 0x120
 800c882:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c886:	e9c7 ab00 	strd	sl, fp, [r7]
 800c88a:	3e01      	subs	r6, #1
 800c88c:	e707      	b.n	800c69e <__kernel_rem_pio2+0x2c2>
 800c88e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c890:	2b02      	cmp	r3, #2
 800c892:	dc09      	bgt.n	800c8a8 <__kernel_rem_pio2+0x4cc>
 800c894:	2b00      	cmp	r3, #0
 800c896:	dc32      	bgt.n	800c8fe <__kernel_rem_pio2+0x522>
 800c898:	d05a      	beq.n	800c950 <__kernel_rem_pio2+0x574>
 800c89a:	9b04      	ldr	r3, [sp, #16]
 800c89c:	f003 0007 	and.w	r0, r3, #7
 800c8a0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d1f5      	bne.n	800c89a <__kernel_rem_pio2+0x4be>
 800c8ae:	ab48      	add	r3, sp, #288	; 0x120
 800c8b0:	441d      	add	r5, r3
 800c8b2:	46aa      	mov	sl, r5
 800c8b4:	46a3      	mov	fp, r4
 800c8b6:	f1bb 0f00 	cmp.w	fp, #0
 800c8ba:	dc76      	bgt.n	800c9aa <__kernel_rem_pio2+0x5ce>
 800c8bc:	46aa      	mov	sl, r5
 800c8be:	46a3      	mov	fp, r4
 800c8c0:	f1bb 0f01 	cmp.w	fp, #1
 800c8c4:	f300 8090 	bgt.w	800c9e8 <__kernel_rem_pio2+0x60c>
 800c8c8:	2700      	movs	r7, #0
 800c8ca:	463e      	mov	r6, r7
 800c8cc:	2c01      	cmp	r4, #1
 800c8ce:	f300 80aa 	bgt.w	800ca26 <__kernel_rem_pio2+0x64a>
 800c8d2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c8d6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c8da:	9b00      	ldr	r3, [sp, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f040 80ac 	bne.w	800ca3a <__kernel_rem_pio2+0x65e>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	462a      	mov	r2, r5
 800c8e6:	9806      	ldr	r0, [sp, #24]
 800c8e8:	e9c0 2300 	strd	r2, r3, [r0]
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c8f4:	463a      	mov	r2, r7
 800c8f6:	4633      	mov	r3, r6
 800c8f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c8fc:	e7cd      	b.n	800c89a <__kernel_rem_pio2+0x4be>
 800c8fe:	2000      	movs	r0, #0
 800c900:	46a0      	mov	r8, r4
 800c902:	4601      	mov	r1, r0
 800c904:	ab48      	add	r3, sp, #288	; 0x120
 800c906:	441d      	add	r5, r3
 800c908:	f1b8 0f00 	cmp.w	r8, #0
 800c90c:	da3a      	bge.n	800c984 <__kernel_rem_pio2+0x5a8>
 800c90e:	9b00      	ldr	r3, [sp, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d03e      	beq.n	800c992 <__kernel_rem_pio2+0x5b6>
 800c914:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c918:	4602      	mov	r2, r0
 800c91a:	462b      	mov	r3, r5
 800c91c:	9d06      	ldr	r5, [sp, #24]
 800c91e:	2601      	movs	r6, #1
 800c920:	e9c5 2300 	strd	r2, r3, [r5]
 800c924:	460b      	mov	r3, r1
 800c926:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c92a:	f7f3 fc89 	bl	8000240 <__aeabi_dsub>
 800c92e:	4684      	mov	ip, r0
 800c930:	460f      	mov	r7, r1
 800c932:	ad48      	add	r5, sp, #288	; 0x120
 800c934:	42b4      	cmp	r4, r6
 800c936:	f105 0508 	add.w	r5, r5, #8
 800c93a:	da2c      	bge.n	800c996 <__kernel_rem_pio2+0x5ba>
 800c93c:	9b00      	ldr	r3, [sp, #0]
 800c93e:	b10b      	cbz	r3, 800c944 <__kernel_rem_pio2+0x568>
 800c940:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c944:	4662      	mov	r2, ip
 800c946:	463b      	mov	r3, r7
 800c948:	9906      	ldr	r1, [sp, #24]
 800c94a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c94e:	e7a4      	b.n	800c89a <__kernel_rem_pio2+0x4be>
 800c950:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c952:	ab48      	add	r3, sp, #288	; 0x120
 800c954:	4637      	mov	r7, r6
 800c956:	441d      	add	r5, r3
 800c958:	2c00      	cmp	r4, #0
 800c95a:	da09      	bge.n	800c970 <__kernel_rem_pio2+0x594>
 800c95c:	9b00      	ldr	r3, [sp, #0]
 800c95e:	b10b      	cbz	r3, 800c964 <__kernel_rem_pio2+0x588>
 800c960:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c964:	4632      	mov	r2, r6
 800c966:	463b      	mov	r3, r7
 800c968:	9906      	ldr	r1, [sp, #24]
 800c96a:	e9c1 2300 	strd	r2, r3, [r1]
 800c96e:	e794      	b.n	800c89a <__kernel_rem_pio2+0x4be>
 800c970:	4630      	mov	r0, r6
 800c972:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c976:	4639      	mov	r1, r7
 800c978:	f7f3 fc64 	bl	8000244 <__adddf3>
 800c97c:	3c01      	subs	r4, #1
 800c97e:	4606      	mov	r6, r0
 800c980:	460f      	mov	r7, r1
 800c982:	e7e9      	b.n	800c958 <__kernel_rem_pio2+0x57c>
 800c984:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c988:	f7f3 fc5c 	bl	8000244 <__adddf3>
 800c98c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c990:	e7ba      	b.n	800c908 <__kernel_rem_pio2+0x52c>
 800c992:	460d      	mov	r5, r1
 800c994:	e7c0      	b.n	800c918 <__kernel_rem_pio2+0x53c>
 800c996:	4660      	mov	r0, ip
 800c998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c99c:	4639      	mov	r1, r7
 800c99e:	f7f3 fc51 	bl	8000244 <__adddf3>
 800c9a2:	3601      	adds	r6, #1
 800c9a4:	4684      	mov	ip, r0
 800c9a6:	460f      	mov	r7, r1
 800c9a8:	e7c4      	b.n	800c934 <__kernel_rem_pio2+0x558>
 800c9aa:	e9da 6700 	ldrd	r6, r7, [sl]
 800c9ae:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800c9b2:	4632      	mov	r2, r6
 800c9b4:	463b      	mov	r3, r7
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	4649      	mov	r1, r9
 800c9ba:	f7f3 fc43 	bl	8000244 <__adddf3>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	4649      	mov	r1, r9
 800c9ca:	f7f3 fc39 	bl	8000240 <__aeabi_dsub>
 800c9ce:	4632      	mov	r2, r6
 800c9d0:	463b      	mov	r3, r7
 800c9d2:	f7f3 fc37 	bl	8000244 <__adddf3>
 800c9d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9da:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c9de:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c9e2:	e9ca 2300 	strd	r2, r3, [sl]
 800c9e6:	e766      	b.n	800c8b6 <__kernel_rem_pio2+0x4da>
 800c9e8:	e9da 8900 	ldrd	r8, r9, [sl]
 800c9ec:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c9f0:	4642      	mov	r2, r8
 800c9f2:	464b      	mov	r3, r9
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	f7f3 fc24 	bl	8000244 <__adddf3>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca04:	4630      	mov	r0, r6
 800ca06:	4639      	mov	r1, r7
 800ca08:	f7f3 fc1a 	bl	8000240 <__aeabi_dsub>
 800ca0c:	4642      	mov	r2, r8
 800ca0e:	464b      	mov	r3, r9
 800ca10:	f7f3 fc18 	bl	8000244 <__adddf3>
 800ca14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca18:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ca1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca20:	e9ca 2300 	strd	r2, r3, [sl]
 800ca24:	e74c      	b.n	800c8c0 <__kernel_rem_pio2+0x4e4>
 800ca26:	4638      	mov	r0, r7
 800ca28:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	f7f3 fc09 	bl	8000244 <__adddf3>
 800ca32:	3c01      	subs	r4, #1
 800ca34:	4607      	mov	r7, r0
 800ca36:	460e      	mov	r6, r1
 800ca38:	e748      	b.n	800c8cc <__kernel_rem_pio2+0x4f0>
 800ca3a:	9b06      	ldr	r3, [sp, #24]
 800ca3c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ca40:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ca44:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ca48:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800ca4c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800ca50:	601d      	str	r5, [r3, #0]
 800ca52:	615e      	str	r6, [r3, #20]
 800ca54:	e721      	b.n	800c89a <__kernel_rem_pio2+0x4be>
 800ca56:	bf00      	nop
 800ca58:	41700000 	.word	0x41700000
 800ca5c:	3e700000 	.word	0x3e700000

0800ca60 <__kernel_sin>:
 800ca60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca64:	b086      	sub	sp, #24
 800ca66:	e9cd 2300 	strd	r2, r3, [sp]
 800ca6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca6e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ca72:	4682      	mov	sl, r0
 800ca74:	460c      	mov	r4, r1
 800ca76:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ca78:	da03      	bge.n	800ca82 <__kernel_sin+0x22>
 800ca7a:	f7f4 f833 	bl	8000ae4 <__aeabi_d2iz>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d050      	beq.n	800cb24 <__kernel_sin+0xc4>
 800ca82:	4652      	mov	r2, sl
 800ca84:	4623      	mov	r3, r4
 800ca86:	4650      	mov	r0, sl
 800ca88:	4621      	mov	r1, r4
 800ca8a:	f7f3 fd91 	bl	80005b0 <__aeabi_dmul>
 800ca8e:	4606      	mov	r6, r0
 800ca90:	460f      	mov	r7, r1
 800ca92:	4602      	mov	r2, r0
 800ca94:	460b      	mov	r3, r1
 800ca96:	4650      	mov	r0, sl
 800ca98:	4621      	mov	r1, r4
 800ca9a:	f7f3 fd89 	bl	80005b0 <__aeabi_dmul>
 800ca9e:	a33e      	add	r3, pc, #248	; (adr r3, 800cb98 <__kernel_sin+0x138>)
 800caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa4:	4680      	mov	r8, r0
 800caa6:	4689      	mov	r9, r1
 800caa8:	4630      	mov	r0, r6
 800caaa:	4639      	mov	r1, r7
 800caac:	f7f3 fd80 	bl	80005b0 <__aeabi_dmul>
 800cab0:	a33b      	add	r3, pc, #236	; (adr r3, 800cba0 <__kernel_sin+0x140>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	f7f3 fbc3 	bl	8000240 <__aeabi_dsub>
 800caba:	4632      	mov	r2, r6
 800cabc:	463b      	mov	r3, r7
 800cabe:	f7f3 fd77 	bl	80005b0 <__aeabi_dmul>
 800cac2:	a339      	add	r3, pc, #228	; (adr r3, 800cba8 <__kernel_sin+0x148>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	f7f3 fbbc 	bl	8000244 <__adddf3>
 800cacc:	4632      	mov	r2, r6
 800cace:	463b      	mov	r3, r7
 800cad0:	f7f3 fd6e 	bl	80005b0 <__aeabi_dmul>
 800cad4:	a336      	add	r3, pc, #216	; (adr r3, 800cbb0 <__kernel_sin+0x150>)
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	f7f3 fbb1 	bl	8000240 <__aeabi_dsub>
 800cade:	4632      	mov	r2, r6
 800cae0:	463b      	mov	r3, r7
 800cae2:	f7f3 fd65 	bl	80005b0 <__aeabi_dmul>
 800cae6:	a334      	add	r3, pc, #208	; (adr r3, 800cbb8 <__kernel_sin+0x158>)
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	f7f3 fbaa 	bl	8000244 <__adddf3>
 800caf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800caf4:	b9dd      	cbnz	r5, 800cb2e <__kernel_sin+0xce>
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	4630      	mov	r0, r6
 800cafc:	4639      	mov	r1, r7
 800cafe:	f7f3 fd57 	bl	80005b0 <__aeabi_dmul>
 800cb02:	a32f      	add	r3, pc, #188	; (adr r3, 800cbc0 <__kernel_sin+0x160>)
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	f7f3 fb9a 	bl	8000240 <__aeabi_dsub>
 800cb0c:	4642      	mov	r2, r8
 800cb0e:	464b      	mov	r3, r9
 800cb10:	f7f3 fd4e 	bl	80005b0 <__aeabi_dmul>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	4650      	mov	r0, sl
 800cb1a:	4621      	mov	r1, r4
 800cb1c:	f7f3 fb92 	bl	8000244 <__adddf3>
 800cb20:	4682      	mov	sl, r0
 800cb22:	460c      	mov	r4, r1
 800cb24:	4650      	mov	r0, sl
 800cb26:	4621      	mov	r1, r4
 800cb28:	b006      	add	sp, #24
 800cb2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb2e:	2200      	movs	r2, #0
 800cb30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb34:	4b24      	ldr	r3, [pc, #144]	; (800cbc8 <__kernel_sin+0x168>)
 800cb36:	f7f3 fd3b 	bl	80005b0 <__aeabi_dmul>
 800cb3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb42:	4640      	mov	r0, r8
 800cb44:	4649      	mov	r1, r9
 800cb46:	f7f3 fd33 	bl	80005b0 <__aeabi_dmul>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb52:	f7f3 fb75 	bl	8000240 <__aeabi_dsub>
 800cb56:	4632      	mov	r2, r6
 800cb58:	463b      	mov	r3, r7
 800cb5a:	f7f3 fd29 	bl	80005b0 <__aeabi_dmul>
 800cb5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb62:	f7f3 fb6d 	bl	8000240 <__aeabi_dsub>
 800cb66:	a316      	add	r3, pc, #88	; (adr r3, 800cbc0 <__kernel_sin+0x160>)
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	460f      	mov	r7, r1
 800cb70:	4640      	mov	r0, r8
 800cb72:	4649      	mov	r1, r9
 800cb74:	f7f3 fd1c 	bl	80005b0 <__aeabi_dmul>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	4639      	mov	r1, r7
 800cb80:	f7f3 fb60 	bl	8000244 <__adddf3>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	4650      	mov	r0, sl
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	f7f3 fb58 	bl	8000240 <__aeabi_dsub>
 800cb90:	e7c6      	b.n	800cb20 <__kernel_sin+0xc0>
 800cb92:	bf00      	nop
 800cb94:	f3af 8000 	nop.w
 800cb98:	5acfd57c 	.word	0x5acfd57c
 800cb9c:	3de5d93a 	.word	0x3de5d93a
 800cba0:	8a2b9ceb 	.word	0x8a2b9ceb
 800cba4:	3e5ae5e6 	.word	0x3e5ae5e6
 800cba8:	57b1fe7d 	.word	0x57b1fe7d
 800cbac:	3ec71de3 	.word	0x3ec71de3
 800cbb0:	19c161d5 	.word	0x19c161d5
 800cbb4:	3f2a01a0 	.word	0x3f2a01a0
 800cbb8:	1110f8a6 	.word	0x1110f8a6
 800cbbc:	3f811111 	.word	0x3f811111
 800cbc0:	55555549 	.word	0x55555549
 800cbc4:	3fc55555 	.word	0x3fc55555
 800cbc8:	3fe00000 	.word	0x3fe00000

0800cbcc <fabs>:
 800cbcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cbd0:	4770      	bx	lr
 800cbd2:	0000      	movs	r0, r0
 800cbd4:	0000      	movs	r0, r0
	...

0800cbd8 <floor>:
 800cbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbdc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800cbe0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800cbe4:	2e13      	cmp	r6, #19
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4607      	mov	r7, r0
 800cbec:	460c      	mov	r4, r1
 800cbee:	4605      	mov	r5, r0
 800cbf0:	dc33      	bgt.n	800cc5a <floor+0x82>
 800cbf2:	2e00      	cmp	r6, #0
 800cbf4:	da14      	bge.n	800cc20 <floor+0x48>
 800cbf6:	a334      	add	r3, pc, #208	; (adr r3, 800ccc8 <floor+0xf0>)
 800cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfc:	f7f3 fb22 	bl	8000244 <__adddf3>
 800cc00:	2200      	movs	r2, #0
 800cc02:	2300      	movs	r3, #0
 800cc04:	f7f3 ff64 	bl	8000ad0 <__aeabi_dcmpgt>
 800cc08:	b138      	cbz	r0, 800cc1a <floor+0x42>
 800cc0a:	2c00      	cmp	r4, #0
 800cc0c:	da58      	bge.n	800ccc0 <floor+0xe8>
 800cc0e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cc12:	431d      	orrs	r5, r3
 800cc14:	d001      	beq.n	800cc1a <floor+0x42>
 800cc16:	2500      	movs	r5, #0
 800cc18:	4c2d      	ldr	r4, [pc, #180]	; (800ccd0 <floor+0xf8>)
 800cc1a:	4623      	mov	r3, r4
 800cc1c:	462f      	mov	r7, r5
 800cc1e:	e025      	b.n	800cc6c <floor+0x94>
 800cc20:	4a2c      	ldr	r2, [pc, #176]	; (800ccd4 <floor+0xfc>)
 800cc22:	fa42 f806 	asr.w	r8, r2, r6
 800cc26:	ea01 0208 	and.w	r2, r1, r8
 800cc2a:	4302      	orrs	r2, r0
 800cc2c:	d01e      	beq.n	800cc6c <floor+0x94>
 800cc2e:	a326      	add	r3, pc, #152	; (adr r3, 800ccc8 <floor+0xf0>)
 800cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc34:	f7f3 fb06 	bl	8000244 <__adddf3>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	f7f3 ff48 	bl	8000ad0 <__aeabi_dcmpgt>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d0ea      	beq.n	800cc1a <floor+0x42>
 800cc44:	2c00      	cmp	r4, #0
 800cc46:	bfbe      	ittt	lt
 800cc48:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cc4c:	fa43 f606 	asrlt.w	r6, r3, r6
 800cc50:	19a4      	addlt	r4, r4, r6
 800cc52:	2500      	movs	r5, #0
 800cc54:	ea24 0408 	bic.w	r4, r4, r8
 800cc58:	e7df      	b.n	800cc1a <floor+0x42>
 800cc5a:	2e33      	cmp	r6, #51	; 0x33
 800cc5c:	dd0a      	ble.n	800cc74 <floor+0x9c>
 800cc5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cc62:	d103      	bne.n	800cc6c <floor+0x94>
 800cc64:	f7f3 faee 	bl	8000244 <__adddf3>
 800cc68:	4607      	mov	r7, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	4619      	mov	r1, r3
 800cc70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc74:	f04f 32ff 	mov.w	r2, #4294967295
 800cc78:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cc7c:	fa22 f808 	lsr.w	r8, r2, r8
 800cc80:	ea18 0f00 	tst.w	r8, r0
 800cc84:	d0f2      	beq.n	800cc6c <floor+0x94>
 800cc86:	a310      	add	r3, pc, #64	; (adr r3, 800ccc8 <floor+0xf0>)
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	f7f3 fada 	bl	8000244 <__adddf3>
 800cc90:	2200      	movs	r2, #0
 800cc92:	2300      	movs	r3, #0
 800cc94:	f7f3 ff1c 	bl	8000ad0 <__aeabi_dcmpgt>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d0be      	beq.n	800cc1a <floor+0x42>
 800cc9c:	2c00      	cmp	r4, #0
 800cc9e:	da02      	bge.n	800cca6 <floor+0xce>
 800cca0:	2e14      	cmp	r6, #20
 800cca2:	d103      	bne.n	800ccac <floor+0xd4>
 800cca4:	3401      	adds	r4, #1
 800cca6:	ea25 0508 	bic.w	r5, r5, r8
 800ccaa:	e7b6      	b.n	800cc1a <floor+0x42>
 800ccac:	2301      	movs	r3, #1
 800ccae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ccb2:	fa03 f606 	lsl.w	r6, r3, r6
 800ccb6:	4435      	add	r5, r6
 800ccb8:	42bd      	cmp	r5, r7
 800ccba:	bf38      	it	cc
 800ccbc:	18e4      	addcc	r4, r4, r3
 800ccbe:	e7f2      	b.n	800cca6 <floor+0xce>
 800ccc0:	2500      	movs	r5, #0
 800ccc2:	462c      	mov	r4, r5
 800ccc4:	e7a9      	b.n	800cc1a <floor+0x42>
 800ccc6:	bf00      	nop
 800ccc8:	8800759c 	.word	0x8800759c
 800cccc:	7e37e43c 	.word	0x7e37e43c
 800ccd0:	bff00000 	.word	0xbff00000
 800ccd4:	000fffff 	.word	0x000fffff

0800ccd8 <scalbn>:
 800ccd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccda:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ccde:	4604      	mov	r4, r0
 800cce0:	460d      	mov	r5, r1
 800cce2:	4617      	mov	r7, r2
 800cce4:	460b      	mov	r3, r1
 800cce6:	b996      	cbnz	r6, 800cd0e <scalbn+0x36>
 800cce8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccec:	4303      	orrs	r3, r0
 800ccee:	d039      	beq.n	800cd64 <scalbn+0x8c>
 800ccf0:	4b33      	ldr	r3, [pc, #204]	; (800cdc0 <scalbn+0xe8>)
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f7f3 fc5c 	bl	80005b0 <__aeabi_dmul>
 800ccf8:	4b32      	ldr	r3, [pc, #200]	; (800cdc4 <scalbn+0xec>)
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	429f      	cmp	r7, r3
 800ccfe:	460d      	mov	r5, r1
 800cd00:	da0f      	bge.n	800cd22 <scalbn+0x4a>
 800cd02:	a32b      	add	r3, pc, #172	; (adr r3, 800cdb0 <scalbn+0xd8>)
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	f7f3 fc52 	bl	80005b0 <__aeabi_dmul>
 800cd0c:	e006      	b.n	800cd1c <scalbn+0x44>
 800cd0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cd12:	4296      	cmp	r6, r2
 800cd14:	d10a      	bne.n	800cd2c <scalbn+0x54>
 800cd16:	4602      	mov	r2, r0
 800cd18:	f7f3 fa94 	bl	8000244 <__adddf3>
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	460d      	mov	r5, r1
 800cd20:	e020      	b.n	800cd64 <scalbn+0x8c>
 800cd22:	460b      	mov	r3, r1
 800cd24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cd28:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800cd2c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800cd30:	19b9      	adds	r1, r7, r6
 800cd32:	4291      	cmp	r1, r2
 800cd34:	dd0e      	ble.n	800cd54 <scalbn+0x7c>
 800cd36:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cd3a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800cd3e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cd42:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cd46:	4820      	ldr	r0, [pc, #128]	; (800cdc8 <scalbn+0xf0>)
 800cd48:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800cd4c:	a31a      	add	r3, pc, #104	; (adr r3, 800cdb8 <scalbn+0xe0>)
 800cd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd52:	e7d9      	b.n	800cd08 <scalbn+0x30>
 800cd54:	2900      	cmp	r1, #0
 800cd56:	dd08      	ble.n	800cd6a <scalbn+0x92>
 800cd58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cd64:	4620      	mov	r0, r4
 800cd66:	4629      	mov	r1, r5
 800cd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd6a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800cd6e:	da12      	bge.n	800cd96 <scalbn+0xbe>
 800cd70:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cd74:	429f      	cmp	r7, r3
 800cd76:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800cd7a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800cd7e:	dcdc      	bgt.n	800cd3a <scalbn+0x62>
 800cd80:	a30b      	add	r3, pc, #44	; (adr r3, 800cdb0 <scalbn+0xd8>)
 800cd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd86:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800cd8a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800cd8e:	480f      	ldr	r0, [pc, #60]	; (800cdcc <scalbn+0xf4>)
 800cd90:	f041 011f 	orr.w	r1, r1, #31
 800cd94:	e7b8      	b.n	800cd08 <scalbn+0x30>
 800cd96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd9a:	3136      	adds	r1, #54	; 0x36
 800cd9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cda0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cda4:	4620      	mov	r0, r4
 800cda6:	4629      	mov	r1, r5
 800cda8:	2200      	movs	r2, #0
 800cdaa:	4b09      	ldr	r3, [pc, #36]	; (800cdd0 <scalbn+0xf8>)
 800cdac:	e7ac      	b.n	800cd08 <scalbn+0x30>
 800cdae:	bf00      	nop
 800cdb0:	c2f8f359 	.word	0xc2f8f359
 800cdb4:	01a56e1f 	.word	0x01a56e1f
 800cdb8:	8800759c 	.word	0x8800759c
 800cdbc:	7e37e43c 	.word	0x7e37e43c
 800cdc0:	43500000 	.word	0x43500000
 800cdc4:	ffff3cb0 	.word	0xffff3cb0
 800cdc8:	8800759c 	.word	0x8800759c
 800cdcc:	c2f8f359 	.word	0xc2f8f359
 800cdd0:	3c900000 	.word	0x3c900000

0800cdd4 <_init>:
 800cdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd6:	bf00      	nop
 800cdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdda:	bc08      	pop	{r3}
 800cddc:	469e      	mov	lr, r3
 800cdde:	4770      	bx	lr

0800cde0 <_fini>:
 800cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde2:	bf00      	nop
 800cde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde6:	bc08      	pop	{r3}
 800cde8:	469e      	mov	lr, r3
 800cdea:	4770      	bx	lr
