
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800471c  0800471c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800471c  0800471c  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800471c  0800471c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004724  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200000a4  080047c8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080047c8  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063ba  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001922  00000000  00000000  00026487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00027db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00028438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016af9  00000000  00000000  000289e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c19  00000000  00000000  0003f4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077492  00000000  00000000  000480fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bf58c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e74  00000000  00000000  000bf5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000a4 	.word	0x200000a4
 8000200:	00000000 	.word	0x00000000
 8000204:	08004064 	.word	0x08004064

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000a8 	.word	0x200000a8
 8000220:	08004064 	.word	0x08004064

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	; 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	e002      	b.n	8000b30 <Delay+0x10>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f9      	bne.n	8000b2a <Delay+0xa>
 8000b36:	bf00      	nop
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 f829 	bl	8000ba0 <LCD_BackLed_Control>
	LCD_Rst();
 8000b4e:	f000 f80f 	bl	8000b70 <LCD_Rst>
	LCD_REG_Config();
 8000b52:	f000 f85f 	bl	8000c14 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b60:	22f0      	movs	r2, #240	; 0xf0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f9e6 	bl	8000f36 <LCD_Clear>
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2102      	movs	r1, #2
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <LCD_Rst+0x28>)
 8000b7a:	f002 f86e 	bl	8002c5a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <LCD_Rst+0x2c>)
 8000b80:	f7ff ffce 	bl	8000b20 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2102      	movs	r1, #2
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <LCD_Rst+0x28>)
 8000b8a:	f002 f866 	bl	8002c5a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <LCD_Rst+0x2c>)
 8000b90:	f7ff ffc6 	bl	8000b20 <Delay>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40011800 	.word	0x40011800
 8000b9c:	0002bffc 	.word	0x0002bffc

08000ba0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <LCD_BackLed_Control+0x34>)
 8000bb8:	f002 f84f 	bl	8002c5a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000bbc:	e005      	b.n	8000bca <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <LCD_BackLed_Control+0x34>)
 8000bc6:	f002 f848 	bl	8002c5a <HAL_GPIO_WritePin>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40011400 	.word	0x40011400

08000bd8 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000be2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	8013      	strh	r3, [r2, #0]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <LCD_Write_Data+0x1c>)
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	8013      	strh	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	60020000 	.word	0x60020000

08000c14 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000c18:	20cf      	movs	r0, #207	; 0xcf
 8000c1a:	f7ff ffdd 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff ffe8 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000c24:	2081      	movs	r0, #129	; 0x81
 8000c26:	f7ff ffe5 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000c2a:	2030      	movs	r0, #48	; 0x30
 8000c2c:	f7ff ffe2 	bl	8000bf4 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000c30:	20ed      	movs	r0, #237	; 0xed
 8000c32:	f7ff ffd1 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000c36:	2064      	movs	r0, #100	; 0x64
 8000c38:	f7ff ffdc 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff ffd9 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000c42:	2012      	movs	r0, #18
 8000c44:	f7ff ffd6 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000c48:	2081      	movs	r0, #129	; 0x81
 8000c4a:	f7ff ffd3 	bl	8000bf4 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000c4e:	20e8      	movs	r0, #232	; 0xe8
 8000c50:	f7ff ffc2 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000c54:	2085      	movs	r0, #133	; 0x85
 8000c56:	f7ff ffcd 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000c5a:	2010      	movs	r0, #16
 8000c5c:	f7ff ffca 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000c60:	2078      	movs	r0, #120	; 0x78
 8000c62:	f7ff ffc7 	bl	8000bf4 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000c66:	20cb      	movs	r0, #203	; 0xcb
 8000c68:	f7ff ffb6 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000c6c:	2039      	movs	r0, #57	; 0x39
 8000c6e:	f7ff ffc1 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000c72:	202c      	movs	r0, #44	; 0x2c
 8000c74:	f7ff ffbe 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff ffbb 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000c7e:	2034      	movs	r0, #52	; 0x34
 8000c80:	f7ff ffb8 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff ffb5 	bl	8000bf4 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000c8a:	20f7      	movs	r0, #247	; 0xf7
 8000c8c:	f7ff ffa4 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000c90:	2020      	movs	r0, #32
 8000c92:	f7ff ffaf 	bl	8000bf4 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000c96:	20ea      	movs	r0, #234	; 0xea
 8000c98:	f7ff ff9e 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff ffa9 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff ffa6 	bl	8000bf4 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000ca8:	20b1      	movs	r0, #177	; 0xb1
 8000caa:	f7ff ff95 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff ffa0 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000cb4:	201b      	movs	r0, #27
 8000cb6:	f7ff ff9d 	bl	8000bf4 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000cba:	20b6      	movs	r0, #182	; 0xb6
 8000cbc:	f7ff ff8c 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000cc0:	200a      	movs	r0, #10
 8000cc2:	f7ff ff97 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000cc6:	20a2      	movs	r0, #162	; 0xa2
 8000cc8:	f7ff ff94 	bl	8000bf4 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000ccc:	20c0      	movs	r0, #192	; 0xc0
 8000cce:	f7ff ff83 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000cd2:	2035      	movs	r0, #53	; 0x35
 8000cd4:	f7ff ff8e 	bl	8000bf4 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000cd8:	20c1      	movs	r0, #193	; 0xc1
 8000cda:	f7ff ff7d 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000cde:	2011      	movs	r0, #17
 8000ce0:	f7ff ff88 	bl	8000bf4 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000ce4:	20c5      	movs	r0, #197	; 0xc5
 8000ce6:	f7ff ff77 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000cea:	2045      	movs	r0, #69	; 0x45
 8000cec:	f7ff ff82 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000cf0:	2045      	movs	r0, #69	; 0x45
 8000cf2:	f7ff ff7f 	bl	8000bf4 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000cf6:	20c7      	movs	r0, #199	; 0xc7
 8000cf8:	f7ff ff6e 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000cfc:	20a2      	movs	r0, #162	; 0xa2
 8000cfe:	f7ff ff79 	bl	8000bf4 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000d02:	20f2      	movs	r0, #242	; 0xf2
 8000d04:	f7ff ff68 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ff73 	bl	8000bf4 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000d0e:	2026      	movs	r0, #38	; 0x26
 8000d10:	f7ff ff62 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000d14:	2001      	movs	r0, #1
 8000d16:	f7ff ff6d 	bl	8000bf4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000d1a:	20e0      	movs	r0, #224	; 0xe0
 8000d1c:	f7ff ff5c 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000d20:	200f      	movs	r0, #15
 8000d22:	f7ff ff67 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f7ff ff64 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000d2c:	2024      	movs	r0, #36	; 0x24
 8000d2e:	f7ff ff61 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000d32:	200b      	movs	r0, #11
 8000d34:	f7ff ff5e 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000d38:	200e      	movs	r0, #14
 8000d3a:	f7ff ff5b 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000d3e:	2009      	movs	r0, #9
 8000d40:	f7ff ff58 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000d44:	2054      	movs	r0, #84	; 0x54
 8000d46:	f7ff ff55 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000d4a:	20a8      	movs	r0, #168	; 0xa8
 8000d4c:	f7ff ff52 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000d50:	2046      	movs	r0, #70	; 0x46
 8000d52:	f7ff ff4f 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000d56:	200c      	movs	r0, #12
 8000d58:	f7ff ff4c 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000d5c:	2017      	movs	r0, #23
 8000d5e:	f7ff ff49 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000d62:	2009      	movs	r0, #9
 8000d64:	f7ff ff46 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000d68:	200f      	movs	r0, #15
 8000d6a:	f7ff ff43 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000d6e:	2007      	movs	r0, #7
 8000d70:	f7ff ff40 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff ff3d 	bl	8000bf4 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000d7a:	20e1      	movs	r0, #225	; 0xe1
 8000d7c:	f7ff ff2c 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff ff37 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000d86:	2019      	movs	r0, #25
 8000d88:	f7ff ff34 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000d8c:	201b      	movs	r0, #27
 8000d8e:	f7ff ff31 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000d92:	2004      	movs	r0, #4
 8000d94:	f7ff ff2e 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000d98:	2010      	movs	r0, #16
 8000d9a:	f7ff ff2b 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000d9e:	2007      	movs	r0, #7
 8000da0:	f7ff ff28 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000da4:	202a      	movs	r0, #42	; 0x2a
 8000da6:	f7ff ff25 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000daa:	2047      	movs	r0, #71	; 0x47
 8000dac:	f7ff ff22 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000db0:	2039      	movs	r0, #57	; 0x39
 8000db2:	f7ff ff1f 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000db6:	2003      	movs	r0, #3
 8000db8:	f7ff ff1c 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000dbc:	2006      	movs	r0, #6
 8000dbe:	f7ff ff19 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000dc2:	2006      	movs	r0, #6
 8000dc4:	f7ff ff16 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000dc8:	2030      	movs	r0, #48	; 0x30
 8000dca:	f7ff ff13 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000dce:	2038      	movs	r0, #56	; 0x38
 8000dd0:	f7ff ff10 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000dd4:	200f      	movs	r0, #15
 8000dd6:	f7ff ff0d 	bl	8000bf4 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000dda:	2036      	movs	r0, #54	; 0x36
 8000ddc:	f7ff fefc 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000de0:	20c8      	movs	r0, #200	; 0xc8
 8000de2:	f7ff ff07 	bl	8000bf4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000de6:	202a      	movs	r0, #42	; 0x2a
 8000de8:	f7ff fef6 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ff01 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fefe 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff fefb 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000dfe:	20ef      	movs	r0, #239	; 0xef
 8000e00:	f7ff fef8 	bl	8000bf4 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000e04:	202b      	movs	r0, #43	; 0x2b
 8000e06:	f7ff fee7 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fef2 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff feef 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff feec 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000e1c:	203f      	movs	r0, #63	; 0x3f
 8000e1e:	f7ff fee9 	bl	8000bf4 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000e22:	203a      	movs	r0, #58	; 0x3a
 8000e24:	f7ff fed8 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000e28:	2055      	movs	r0, #85	; 0x55
 8000e2a:	f7ff fee3 	bl	8000bf4 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000e2e:	2011      	movs	r0, #17
 8000e30:	f7ff fed2 	bl	8000bd8 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <LCD_REG_Config+0x230>)
 8000e36:	f7ff fe73 	bl	8000b20 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000e3a:	2029      	movs	r0, #41	; 0x29
 8000e3c:	f7ff fecc 	bl	8000bd8 <LCD_Write_Cmd>
	
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0002bffc 	.word	0x0002bffc

08000e48 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	80fb      	strh	r3, [r7, #6]
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80bb      	strh	r3, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	807b      	strh	r3, [r7, #2]
 8000e62:	4613      	mov	r3, r2
 8000e64:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000e66:	202a      	movs	r0, #42	; 0x2a
 8000e68:	f7ff feb6 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff febe 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff feb8 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000e84:	88fa      	ldrh	r2, [r7, #6]
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	121b      	asrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff feaf 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000e96:	88fa      	ldrh	r2, [r7, #6]
 8000e98:	887b      	ldrh	r3, [r7, #2]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fea4 	bl	8000bf4 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000eac:	202b      	movs	r0, #43	; 0x2b
 8000eae:	f7ff fe93 	bl	8000bd8 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe9b 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe95 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000eca:	88ba      	ldrh	r2, [r7, #4]
 8000ecc:	883b      	ldrh	r3, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	121b      	asrs	r3, r3, #8
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fe8c 	bl	8000bf4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fe81 	bl	8000bf4 <LCD_Write_Data>
	
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd90      	pop	{r4, r7, pc}

08000efa <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	460b      	mov	r3, r1
 8000f04:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000f0a:	202c      	movs	r0, #44	; 0x2c
 8000f0c:	f7ff fe64 	bl	8000bd8 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	e006      	b.n	8000f24 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fe6b 	bl	8000bf4 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d3f4      	bcc.n	8000f16 <LCD_FillColor+0x1c>
		
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000f36:	b590      	push	{r4, r7, lr}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	4608      	mov	r0, r1
 8000f40:	4611      	mov	r1, r2
 8000f42:	461a      	mov	r2, r3
 8000f44:	4623      	mov	r3, r4
 8000f46:	80fb      	strh	r3, [r7, #6]
 8000f48:	4603      	mov	r3, r0
 8000f4a:	80bb      	strh	r3, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000f54:	883b      	ldrh	r3, [r7, #0]
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	88b9      	ldrh	r1, [r7, #4]
 8000f5a:	88f8      	ldrh	r0, [r7, #6]
 8000f5c:	f7ff ff74 	bl	8000e48 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	883a      	ldrh	r2, [r7, #0]
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	8b3b      	ldrh	r3, [r7, #24]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4610      	mov	r0, r2
 8000f70:	f7ff ffc3 	bl	8000efa <LCD_FillColor>
	
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd90      	pop	{r4, r7, pc}

08000f7c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	460b      	mov	r3, r1
 8000f88:	80bb      	strh	r3, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	3b20      	subs	r3, #32
 8000f92:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000f94:	88b9      	ldrh	r1, [r7, #4]
 8000f96:	88f8      	ldrh	r0, [r7, #6]
 8000f98:	2310      	movs	r3, #16
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	f7ff ff54 	bl	8000e48 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fa0:	202c      	movs	r0, #44	; 0x2c
 8000fa2:	f7ff fe19 	bl	8000bd8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	e023      	b.n	8000ff4 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000fac:	7b3a      	ldrb	r2, [r7, #12]
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	4914      	ldr	r1, [pc, #80]	; (8001004 <LCD_DrawChar+0x88>)
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	440a      	add	r2, r1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	737b      	strb	r3, [r7, #13]
 8000fc0:	e012      	b.n	8000fe8 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000fcc:	201f      	movs	r0, #31
 8000fce:	f7ff fe11 	bl	8000bf4 <LCD_Write_Data>
 8000fd2:	e003      	b.n	8000fdc <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000fd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fd8:	f7ff fe0c 	bl	8000bf4 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	737b      	strb	r3, [r7, #13]
 8000fe8:	7b7b      	ldrb	r3, [r7, #13]
 8000fea:	2b07      	cmp	r3, #7
 8000fec:	d9e9      	bls.n	8000fc2 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	73bb      	strb	r3, [r7, #14]
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	d9d8      	bls.n	8000fac <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	080040e8 	.word	0x080040e8

08001008 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	603a      	str	r2, [r7, #0]
 8001012:	80fb      	strh	r3, [r7, #6]
 8001014:	460b      	mov	r3, r1
 8001016:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001018:	e01c      	b.n	8001054 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	2be8      	cmp	r3, #232	; 0xe8
 800101e:	d904      	bls.n	800102a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001020:	2300      	movs	r3, #0
 8001022:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	3310      	adds	r3, #16
 8001028:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800102a:	88bb      	ldrh	r3, [r7, #4]
 800102c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001030:	d903      	bls.n	800103a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001032:	2300      	movs	r3, #0
 8001034:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001036:	2300      	movs	r3, #0
 8001038:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	88b9      	ldrh	r1, [r7, #4]
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff9a 	bl	8000f7c <LCD_DrawChar>
		
		pStr ++;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	3308      	adds	r3, #8
 8001052:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1de      	bne.n	800101a <LCD_DrawString+0x12>
		
	}
	
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4604      	mov	r4, r0
 8001070:	4608      	mov	r0, r1
 8001072:	4611      	mov	r1, r2
 8001074:	461a      	mov	r2, r3
 8001076:	4623      	mov	r3, r4
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	4603      	mov	r3, r0
 800107c:	80bb      	strh	r3, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	70fb      	strb	r3, [r7, #3]
 8001082:	4613      	mov	r3, r2
 8001084:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	3b20      	subs	r3, #32
 800108a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800108c:	88b9      	ldrh	r1, [r7, #4]
 800108e:	88f8      	ldrh	r0, [r7, #6]
 8001090:	2310      	movs	r3, #16
 8001092:	2208      	movs	r2, #8
 8001094:	f7ff fed8 	bl	8000e48 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001098:	202c      	movs	r0, #44	; 0x2c
 800109a:	f7ff fd9d 	bl	8000bd8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800109e:	2300      	movs	r3, #0
 80010a0:	73bb      	strb	r3, [r7, #14]
 80010a2:	e024      	b.n	80010ee <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80010a4:	7b3a      	ldrb	r2, [r7, #12]
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	4915      	ldr	r1, [pc, #84]	; (8001100 <LCD_DrawChar_Color+0x98>)
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	440a      	add	r2, r1
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80010b4:	2300      	movs	r3, #0
 80010b6:	737b      	strb	r3, [r7, #13]
 80010b8:	e013      	b.n	80010e2 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80010c4:	8c3b      	ldrh	r3, [r7, #32]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fd94 	bl	8000bf4 <LCD_Write_Data>
 80010cc:	e003      	b.n	80010d6 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80010ce:	883b      	ldrh	r3, [r7, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fd8f 	bl	8000bf4 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	085b      	lsrs	r3, r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80010dc:	7b7b      	ldrb	r3, [r7, #13]
 80010de:	3301      	adds	r3, #1
 80010e0:	737b      	strb	r3, [r7, #13]
 80010e2:	7b7b      	ldrb	r3, [r7, #13]
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	d9e8      	bls.n	80010ba <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	3301      	adds	r3, #1
 80010ec:	73bb      	strb	r3, [r7, #14]
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d9d7      	bls.n	80010a4 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	bf00      	nop
 8001100:	080040e8 	.word	0x080040e8

08001104 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	80fb      	strh	r3, [r7, #6]
 8001110:	4613      	mov	r3, r2
 8001112:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	3b0a      	subs	r3, #10
 8001118:	b298      	uxth	r0, r3
 800111a:	88b9      	ldrh	r1, [r7, #4]
 800111c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2214      	movs	r2, #20
 8001126:	f7ff ff06 	bl	8000f36 <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	3b0a      	subs	r3, #10
 800112e:	b299      	uxth	r1, r3
 8001130:	88f8      	ldrh	r0, [r7, #6]
 8001132:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2314      	movs	r3, #20
 800113a:	2201      	movs	r2, #1
 800113c:	f7ff fefb 	bl	8000f36 <LCD_Clear>
	
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b087      	sub	sp, #28
 800114c:	af02      	add	r7, sp, #8
 800114e:	60ba      	str	r2, [r7, #8]
 8001150:	461a      	mov	r2, r3
 8001152:	4603      	mov	r3, r0
 8001154:	81fb      	strh	r3, [r7, #14]
 8001156:	460b      	mov	r3, r1
 8001158:	81bb      	strh	r3, [r7, #12]
 800115a:	4613      	mov	r3, r2
 800115c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800115e:	e01f      	b.n	80011a0 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	2be8      	cmp	r3, #232	; 0xe8
 8001164:	d904      	bls.n	8001170 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001166:	2300      	movs	r3, #0
 8001168:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 800116a:	89bb      	ldrh	r3, [r7, #12]
 800116c:	3310      	adds	r3, #16
 800116e:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001170:	89bb      	ldrh	r3, [r7, #12]
 8001172:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001176:	d903      	bls.n	8001180 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001178:	2300      	movs	r3, #0
 800117a:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 800117c:	2300      	movs	r3, #0
 800117e:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	88fc      	ldrh	r4, [r7, #6]
 8001186:	89b9      	ldrh	r1, [r7, #12]
 8001188:	89f8      	ldrh	r0, [r7, #14]
 800118a:	8c3b      	ldrh	r3, [r7, #32]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	4623      	mov	r3, r4
 8001190:	f7ff ff6a 	bl	8001068 <LCD_DrawChar_Color>
		
		pStr ++;
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3301      	adds	r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	3308      	adds	r3, #8
 800119e:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1db      	bne.n	8001160 <LCD_DrawString_Color+0x18>
		
	}
	
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}
	...

080011b4 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	f200 80a0 	bhi.w	8001308 <LCD_GramScan+0x154>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <LCD_GramScan+0x1c>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	0800122b 	.word	0x0800122b
 80011d8:	08001275 	.word	0x08001275
 80011dc:	080012bf 	.word	0x080012bf

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 80011e0:	2036      	movs	r0, #54	; 0x36
 80011e2:	f7ff fcf9 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 80011e6:	20c8      	movs	r0, #200	; 0xc8
 80011e8:	f7ff fd04 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80011ec:	202a      	movs	r0, #42	; 0x2a
 80011ee:	f7ff fcf3 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fcfe 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fcfb 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fcf8 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8001204:	20ef      	movs	r0, #239	; 0xef
 8001206:	f7ff fcf5 	bl	8000bf4 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800120a:	202b      	movs	r0, #43	; 0x2b
 800120c:	f7ff fce4 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fcef 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fcec 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff fce9 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8001222:	203f      	movs	r0, #63	; 0x3f
 8001224:	f7ff fce6 	bl	8000bf4 <LCD_Write_Data>
					
		  break;
 8001228:	e06e      	b.n	8001308 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 800122a:	2036      	movs	r0, #54	; 0x36
 800122c:	f7ff fcd4 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8001230:	2068      	movs	r0, #104	; 0x68
 8001232:	f7ff fcdf 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001236:	202a      	movs	r0, #42	; 0x2a
 8001238:	f7ff fcce 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fcd9 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fcd6 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff fcd3 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 800124e:	203f      	movs	r0, #63	; 0x3f
 8001250:	f7ff fcd0 	bl	8000bf4 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001254:	202b      	movs	r0, #43	; 0x2b
 8001256:	f7ff fcbf 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff fcca 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fcc7 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fcc4 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 800126c:	20ef      	movs	r0, #239	; 0xef
 800126e:	f7ff fcc1 	bl	8000bf4 <LCD_Write_Data>
		
		  break;
 8001272:	e049      	b.n	8001308 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001274:	2036      	movs	r0, #54	; 0x36
 8001276:	f7ff fcaf 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 800127a:	2028      	movs	r0, #40	; 0x28
 800127c:	f7ff fcba 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001280:	202a      	movs	r0, #42	; 0x2a
 8001282:	f7ff fca9 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fcb4 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fcb1 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff fcae 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001298:	203f      	movs	r0, #63	; 0x3f
 800129a:	f7ff fcab 	bl	8000bf4 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800129e:	202b      	movs	r0, #43	; 0x2b
 80012a0:	f7ff fc9a 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fca5 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff fca2 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fc9f 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 80012b6:	20ef      	movs	r0, #239	; 0xef
 80012b8:	f7ff fc9c 	bl	8000bf4 <LCD_Write_Data>
		  
		  break;
 80012bc:	e024      	b.n	8001308 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 80012be:	2036      	movs	r0, #54	; 0x36
 80012c0:	f7ff fc8a 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 80012c4:	2048      	movs	r0, #72	; 0x48
 80012c6:	f7ff fc95 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80012ca:	202a      	movs	r0, #42	; 0x2a
 80012cc:	f7ff fc84 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fc8f 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fc8c 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fc89 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 80012e2:	20ef      	movs	r0, #239	; 0xef
 80012e4:	f7ff fc86 	bl	8000bf4 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80012e8:	202b      	movs	r0, #43	; 0x2b
 80012ea:	f7ff fc75 	bl	8000bd8 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fc80 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fc7d 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff fc7a 	bl	8000bf4 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8001300:	203f      	movs	r0, #63	; 0x3f
 8001302:	f7ff fc77 	bl	8000bf4 <LCD_Write_Data>
		
	    break;
 8001306:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8001308:	202c      	movs	r0, #44	; 0x2c
 800130a:	f7ff fc65 	bl	8000bd8 <LCD_Write_Cmd>
	
	
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f001 f95d 	bl	80025dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f84d 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f000 f891 	bl	800144c <MX_GPIO_Init>
  MX_FSMC_Init();
 800132a:	f000 f93f 	bl	80015ac <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
	
	macXPT2046_CS_DISABLE();
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001334:	481f      	ldr	r0, [pc, #124]	; (80013b4 <main+0x9c>)
 8001336:	f001 fc90 	bl	8002c5a <HAL_GPIO_WritePin>
	
	LCD_INIT();
 800133a:	f7ff fc02 	bl	8000b42 <LCD_INIT>

	LCD_Clear (50, 80, 140, 70, RED);
 800133e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2346      	movs	r3, #70	; 0x46
 8001346:	228c      	movs	r2, #140	; 0x8c
 8001348:	2150      	movs	r1, #80	; 0x50
 800134a:	2032      	movs	r0, #50	; 0x32
 800134c:	f7ff fdf3 	bl	8000f36 <LCD_Clear>
	LCD_DrawString(68, 100, "TOUCHPAD DEMO");
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <main+0xa0>)
 8001352:	2164      	movs	r1, #100	; 0x64
 8001354:	2044      	movs	r0, #68	; 0x44
 8001356:	f7ff fe57 	bl	8001008 <LCD_DrawString>
	HAL_Delay(2000);
 800135a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800135e:	f001 f99f 	bl	80026a0 <HAL_Delay>

	while( ! XPT2046_Touch_Calibrate () );   
 8001362:	bf00      	nop
 8001364:	f000 fe26 	bl	8001fb4 <XPT2046_Touch_Calibrate>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0fa      	beq.n	8001364 <main+0x4c>

	LCD_GramScan ( 1 );
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff ff20 	bl	80011b4 <LCD_GramScan>
	LCD_Clear ( 0, 0, 240, 320, GREY );
 8001374:	f24f 73de 	movw	r3, #63454	; 0xf7de
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800137e:	22f0      	movs	r2, #240	; 0xf0
 8001380:	2100      	movs	r1, #0
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fdd7 	bl	8000f36 <LCD_Clear>
	LCD_Clear ( 90,  230,  60, 60, BLUE	);
 8001388:	231f      	movs	r3, #31
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	233c      	movs	r3, #60	; 0x3c
 800138e:	223c      	movs	r2, #60	; 0x3c
 8001390:	21e6      	movs	r1, #230	; 0xe6
 8001392:	205a      	movs	r0, #90	; 0x5a
 8001394:	f7ff fdcf 	bl	8000f36 <LCD_Clear>
  /* USER CODE BEGIN WHILE */
	
	
  while (1)
  {
    if ( ucXPT2046_TouchFlag == 1 )	         
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <main+0xa4>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d104      	bne.n	80013ac <main+0x94>
    {
			Check_touchkey();			
 80013a2:	f001 f8cf 	bl	8002544 <Check_touchkey>
      ucXPT2046_TouchFlag = 0;		            
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <main+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
    }					
		HAL_Delay(50);		
 80013ac:	2032      	movs	r0, #50	; 0x32
 80013ae:	f001 f977 	bl	80026a0 <HAL_Delay>
    if ( ucXPT2046_TouchFlag == 1 )	         
 80013b2:	e7f1      	b.n	8001398 <main+0x80>
 80013b4:	40011400 	.word	0x40011400
 80013b8:	0800407c 	.word	0x0800407c
 80013bc:	2000010c 	.word	0x2000010c

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b090      	sub	sp, #64	; 0x40
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	2228      	movs	r2, #40	; 0x28
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 f9c6 	bl	8003760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f0:	2301      	movs	r3, #1
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f4:	2302      	movs	r3, #2
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fc61 	bl	8002cd0 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001414:	f000 f92e 	bl	8001674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2302      	movs	r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2102      	movs	r1, #2
 8001432:	4618      	mov	r0, r3
 8001434:	f001 feb0 	bl	8003198 <HAL_RCC_ClockConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800143e:	f000 f919 	bl	8001674 <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	3740      	adds	r7, #64	; 0x40
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001460:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <MX_GPIO_Init+0x14c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <MX_GPIO_Init+0x14c>)
 8001466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <MX_GPIO_Init+0x14c>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001478:	4b47      	ldr	r3, [pc, #284]	; (8001598 <MX_GPIO_Init+0x14c>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a46      	ldr	r2, [pc, #280]	; (8001598 <MX_GPIO_Init+0x14c>)
 800147e:	f043 0310 	orr.w	r3, r3, #16
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b44      	ldr	r3, [pc, #272]	; (8001598 <MX_GPIO_Init+0x14c>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	4b41      	ldr	r3, [pc, #260]	; (8001598 <MX_GPIO_Init+0x14c>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a40      	ldr	r2, [pc, #256]	; (8001598 <MX_GPIO_Init+0x14c>)
 8001496:	f043 0308 	orr.w	r3, r3, #8
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <MX_GPIO_Init+0x14c>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <MX_GPIO_Init+0x14c>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a3a      	ldr	r2, [pc, #232]	; (8001598 <MX_GPIO_Init+0x14c>)
 80014ae:	f043 0320 	orr.w	r3, r3, #32
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b38      	ldr	r3, [pc, #224]	; (8001598 <MX_GPIO_Init+0x14c>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0320 	and.w	r3, r3, #32
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b35      	ldr	r3, [pc, #212]	; (8001598 <MX_GPIO_Init+0x14c>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a34      	ldr	r2, [pc, #208]	; (8001598 <MX_GPIO_Init+0x14c>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <MX_GPIO_Init+0x14c>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2107      	movs	r1, #7
 80014dc:	482f      	ldr	r0, [pc, #188]	; (800159c <MX_GPIO_Init+0x150>)
 80014de:	f001 fbbc 	bl	8002c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2123      	movs	r1, #35	; 0x23
 80014e6:	482e      	ldr	r0, [pc, #184]	; (80015a0 <MX_GPIO_Init+0x154>)
 80014e8:	f001 fbb7 	bl	8002c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <MX_GPIO_Init+0x158>)
 80014f4:	f001 fbb1 	bl	8002c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 80014f8:	2307      	movs	r3, #7
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4619      	mov	r1, r3
 800150e:	4823      	ldr	r0, [pc, #140]	; (800159c <MX_GPIO_Init+0x150>)
 8001510:	f001 f9f4 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001514:	2308      	movs	r3, #8
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	4619      	mov	r1, r3
 8001526:	481d      	ldr	r0, [pc, #116]	; (800159c <MX_GPIO_Init+0x150>)
 8001528:	f001 f9e8 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800152c:	2310      	movs	r3, #16
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_GPIO_Init+0x15c>)
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	2301      	movs	r3, #1
 8001536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	4817      	ldr	r0, [pc, #92]	; (800159c <MX_GPIO_Init+0x150>)
 8001540:	f001 f9dc 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001544:	2323      	movs	r3, #35	; 0x23
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	4619      	mov	r1, r3
 800155a:	4811      	ldr	r0, [pc, #68]	; (80015a0 <MX_GPIO_Init+0x154>)
 800155c:	f001 f9ce 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001560:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	4619      	mov	r1, r3
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <MX_GPIO_Init+0x158>)
 800157a:	f001 f9bf 	bl	80028fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	200a      	movs	r0, #10
 8001584:	f001 f983 	bl	800288e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001588:	200a      	movs	r0, #10
 800158a:	f001 f99c 	bl	80028c6 <HAL_NVIC_EnableIRQ>

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40011800 	.word	0x40011800
 80015a0:	40010c00 	.word	0x40010c00
 80015a4:	40011400 	.word	0x40011400
 80015a8:	10210000 	.word	0x10210000

080015ac <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015c6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015ca:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015ce:	4a27      	ldr	r2, [pc, #156]	; (800166c <MX_FSMC_Init+0xc0>)
 80015d0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015e6:	2210      	movs	r2, #16
 80015e8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_FSMC_Init+0xbc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_FSMC_Init+0xbc>)
 8001604:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_FSMC_Init+0xbc>)
 800160c:	2200      	movs	r2, #0
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_FSMC_Init+0xbc>)
 8001612:	2200      	movs	r2, #0
 8001614:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_FSMC_Init+0xbc>)
 8001618:	2200      	movs	r2, #0
 800161a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_FSMC_Init+0xbc>)
 800161e:	2200      	movs	r2, #0
 8001620:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001622:	230f      	movs	r3, #15
 8001624:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001626:	230f      	movs	r3, #15
 8001628:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800162a:	23ff      	movs	r3, #255	; 0xff
 800162c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800162e:	230f      	movs	r3, #15
 8001630:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001632:	2310      	movs	r3, #16
 8001634:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001636:	2311      	movs	r3, #17
 8001638:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <MX_FSMC_Init+0xbc>)
 8001646:	f001 ff31 	bl	80034ac <HAL_SRAM_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001650:	f000 f810 	bl	8001674 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_FSMC_Init+0xc4>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a05      	ldr	r2, [pc, #20]	; (8001670 <MX_FSMC_Init+0xc4>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200000c0 	.word	0x200000c0
 800166c:	a0000104 	.word	0xa0000104
 8001670:	40010000 	.word	0x40010000

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_MspInit+0x5c>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a14      	ldr	r2, [pc, #80]	; (80016dc <HAL_MspInit+0x5c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6193      	str	r3, [r2, #24]
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_MspInit+0x5c>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_MspInit+0x5c>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_MspInit+0x5c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_MspInit+0x5c>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_MspInit+0x60>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_MspInit+0x60>)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000

080016e4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_FSMC_MspInit+0x78>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d129      	bne.n	8001754 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_FSMC_MspInit+0x78>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_FSMC_MspInit+0x7c>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_FSMC_MspInit+0x7c>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6153      	str	r3, [r2, #20]
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_FSMC_MspInit+0x7c>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800171e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001722:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4619      	mov	r1, r3
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <HAL_FSMC_MspInit+0x80>)
 8001734:	f001 f8e2 	bl	80028fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001738:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800173c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4619      	mov	r1, r3
 800174c:	4806      	ldr	r0, [pc, #24]	; (8001768 <HAL_FSMC_MspInit+0x84>)
 800174e:	f001 f8d5 	bl	80028fc <HAL_GPIO_Init>
 8001752:	e000      	b.n	8001756 <HAL_FSMC_MspInit+0x72>
    return;
 8001754:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000104 	.word	0x20000104
 8001760:	40021000 	.word	0x40021000
 8001764:	40011800 	.word	0x40011800
 8001768:	40011400 	.word	0x40011400

0800176c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001774:	f7ff ffb6 	bl	80016e4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <HardFault_Handler+0x4>

08001792 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <MemManage_Handler+0x4>

08001798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <BusFault_Handler+0x4>

0800179e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <UsageFault_Handler+0x4>

080017a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 ff4c 	bl	8002668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <EXTI4_IRQHandler+0x2c>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <EXTI4_IRQHandler+0x30>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <EXTI4_IRQHandler+0x2c>)
 80017ec:	2210      	movs	r2, #16
 80017ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80017f0:	2010      	movs	r0, #16
 80017f2:	f001 fa63 	bl	8002cbc <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80017f6:	2010      	movs	r0, #16
 80017f8:	f001 fa48 	bl	8002c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40010400 	.word	0x40010400
 8001804:	2000010c 	.word	0x2000010c

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f001 ff68 	bl	800370c <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20010000 	.word	0x20010000
 8001868:	00000400 	.word	0x00000400
 800186c:	20000108 	.word	0x20000108
 8001870:	20000128 	.word	0x20000128

08001874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <SystemInit+0x5c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <SystemInit+0x5c>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <SystemInit+0x5c>)
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	4911      	ldr	r1, [pc, #68]	; (80018d0 <SystemInit+0x5c>)
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <SystemInit+0x60>)
 800188c:	4013      	ands	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <SystemInit+0x5c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <SystemInit+0x5c>)
 8001896:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800189a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <SystemInit+0x5c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SystemInit+0x5c>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <SystemInit+0x5c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <SystemInit+0x5c>)
 80018b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80018b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SystemInit+0x5c>)
 80018ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80018be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SystemInit+0x64>)
 80018c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000
 80018d4:	f8ff0000 	.word	0xf8ff0000
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	e00a      	b.n	8001900 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 80018ea:	230c      	movs	r3, #12
 80018ec:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 80018ee:	bf00      	nop
 80018f0:	7afb      	ldrb	r3, [r7, #11]
 80018f2:	1e5a      	subs	r2, r3, #1
 80018f4:	72fa      	strb	r2, [r7, #11]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1fa      	bne.n	80018f0 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3f0      	bcc.n	80018ea <XPT2046_DelayUS+0xe>

	}
	
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 800191e:	2200      	movs	r2, #0
 8001920:	2104      	movs	r1, #4
 8001922:	481d      	ldr	r0, [pc, #116]	; (8001998 <XPT2046_WriteCMD+0x84>)
 8001924:	f001 f999 	bl	8002c5a <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 8001928:	2200      	movs	r2, #0
 800192a:	2101      	movs	r1, #1
 800192c:	481a      	ldr	r0, [pc, #104]	; (8001998 <XPT2046_WriteCMD+0x84>)
 800192e:	f001 f994 	bl	8002c5a <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e027      	b.n	8001988 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8001938:	79fa      	ldrb	r2, [r7, #7]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	f1c3 0307 	rsb	r3, r3, #7
 8001940:	fa42 f303 	asr.w	r3, r2, r3
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <XPT2046_WriteCMD+0x44>
 800194c:	2201      	movs	r2, #1
 800194e:	2104      	movs	r1, #4
 8001950:	4811      	ldr	r0, [pc, #68]	; (8001998 <XPT2046_WriteCMD+0x84>)
 8001952:	f001 f982 	bl	8002c5a <HAL_GPIO_WritePin>
 8001956:	e004      	b.n	8001962 <XPT2046_WriteCMD+0x4e>
 8001958:	2200      	movs	r2, #0
 800195a:	2104      	movs	r1, #4
 800195c:	480e      	ldr	r0, [pc, #56]	; (8001998 <XPT2046_WriteCMD+0x84>)
 800195e:	f001 f97c 	bl	8002c5a <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 8001962:	2005      	movs	r0, #5
 8001964:	f7ff ffba 	bl	80018dc <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 8001968:	2201      	movs	r2, #1
 800196a:	2101      	movs	r1, #1
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <XPT2046_WriteCMD+0x84>)
 800196e:	f001 f974 	bl	8002c5a <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 8001972:	2005      	movs	r0, #5
 8001974:	f7ff ffb2 	bl	80018dc <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8001978:	2200      	movs	r2, #0
 800197a:	2101      	movs	r1, #1
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <XPT2046_WriteCMD+0x84>)
 800197e:	f001 f96c 	bl	8002c5a <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	3301      	adds	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b07      	cmp	r3, #7
 800198c:	d9d4      	bls.n	8001938 <XPT2046_WriteCMD+0x24>
	}
	
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40011800 	.word	0x40011800

0800199c <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 80019a2:	2300      	movs	r3, #0
 80019a4:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 80019a6:	2200      	movs	r2, #0
 80019a8:	2104      	movs	r1, #4
 80019aa:	4819      	ldr	r0, [pc, #100]	; (8001a10 <XPT2046_ReadCMD+0x74>)
 80019ac:	f001 f955 	bl	8002c5a <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80019b0:	2201      	movs	r2, #1
 80019b2:	2101      	movs	r1, #1
 80019b4:	4816      	ldr	r0, [pc, #88]	; (8001a10 <XPT2046_ReadCMD+0x74>)
 80019b6:	f001 f950 	bl	8002c5a <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 80019ba:	2300      	movs	r3, #0
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	e01e      	b.n	80019fe <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 80019c0:	2200      	movs	r2, #0
 80019c2:	2101      	movs	r1, #1
 80019c4:	4812      	ldr	r0, [pc, #72]	; (8001a10 <XPT2046_ReadCMD+0x74>)
 80019c6:	f001 f948 	bl	8002c5a <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 80019ca:	2108      	movs	r1, #8
 80019cc:	4810      	ldr	r0, [pc, #64]	; (8001a10 <XPT2046_ReadCMD+0x74>)
 80019ce:	f001 f92d 	bl	8002c2c <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f1c3 030b 	rsb	r3, r3, #11
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 80019ee:	2201      	movs	r2, #1
 80019f0:	2101      	movs	r1, #1
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <XPT2046_ReadCMD+0x74>)
 80019f4:	f001 f931 	bl	8002c5a <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	3301      	adds	r3, #1
 80019fc:	71fb      	strb	r3, [r7, #7]
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b0b      	cmp	r3, #11
 8001a02:	d9dd      	bls.n	80019c0 <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 8001a04:	88bb      	ldrh	r3, [r7, #4]

}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40011800 	.word	0x40011800

08001a14 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff77 	bl	8001914 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8001a26:	f7ff ffb9 	bl	800199c <XPT2046_ReadCMD>
 8001a2a:	4603      	mov	r3, r0
	
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8001a3e:	2090      	movs	r0, #144	; 0x90
 8001a40:	f7ff ffe8 	bl	8001a14 <XPT2046_ReadAdc>
 8001a44:	4603      	mov	r3, r0
 8001a46:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7ff ff47 	bl	80018dc <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 8001a4e:	20d0      	movs	r0, #208	; 0xd0
 8001a50:	f7ff ffe0 	bl	8001a14 <XPT2046_ReadAdc>
 8001a54:	4603      	mov	r3, r0
 8001a56:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	89fa      	ldrh	r2, [r7, #14]
 8001a5c:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	89ba      	ldrh	r2, [r7, #12]
 8001a62:	801a      	strh	r2, [r3, #0]
	
	
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b092      	sub	sp, #72	; 0x48
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	2228      	movs	r2, #40	; 0x28
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fe6c 	bl	8003760 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 8001a88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a8c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ffce 	bl	8001a34 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 8001a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a9c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	3348      	adds	r3, #72	; 0x48
 8001aa4:	443b      	add	r3, r7
 8001aa6:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8001aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aae:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8001ab2:	330a      	adds	r3, #10
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	3348      	adds	r3, #72	; 0x48
 8001ab8:	443b      	add	r3, r7
 8001aba:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 8001abe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8001ac8:	2110      	movs	r1, #16
 8001aca:	4871      	ldr	r0, [pc, #452]	; (8001c90 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8001acc:	f001 f8ae 	bl	8002c2c <HAL_GPIO_ReadPin>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d103      	bne.n	8001ade <XPT2046_ReadAdc_Smooth_XY+0x72>
 8001ad6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ada:	2b09      	cmp	r3, #9
 8001adc:	d9d4      	bls.n	8001a88 <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 8001ade:	2110      	movs	r1, #16
 8001ae0:	486b      	ldr	r0, [pc, #428]	; (8001c90 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8001ae2:	f001 f8a3 	bl	8002c2c <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 8001af2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001af6:	2b0a      	cmp	r3, #10
 8001af8:	f040 80c4 	bne.w	8001c84 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8001afc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b00:	643b      	str	r3, [r7, #64]	; 0x40
 8001b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b04:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8001b06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 8001b10:	2301      	movs	r3, #1
 8001b12:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001b16:	e02b      	b.n	8001b70 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8001b18:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	3348      	adds	r3, #72	; 0x48
 8001b20:	443b      	add	r3, r7
 8001b22:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001b26:	461a      	mov	r2, r3
 8001b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	dd08      	ble.n	8001b40 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8001b2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	3348      	adds	r3, #72	; 0x48
 8001b36:	443b      	add	r3, r7
 8001b38:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8001b3e:	e012      	b.n	8001b66 <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8001b40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	3348      	adds	r3, #72	; 0x48
 8001b48:	443b      	add	r3, r7
 8001b4a:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b52:	4293      	cmp	r3, r2
 8001b54:	da07      	bge.n	8001b66 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 8001b56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	3348      	adds	r3, #72	; 0x48
 8001b5e:	443b      	add	r3, r7
 8001b60:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 8001b66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001b70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b74:	2b09      	cmp	r3, #9
 8001b76:	d9cf      	bls.n	8001b18 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001b7e:	e02f      	b.n	8001be0 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8001b80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b84:	330a      	adds	r3, #10
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	3348      	adds	r3, #72	; 0x48
 8001b8a:	443b      	add	r3, r7
 8001b8c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001b90:	461a      	mov	r2, r3
 8001b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b94:	4293      	cmp	r3, r2
 8001b96:	dd09      	ble.n	8001bac <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8001b98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b9c:	330a      	adds	r3, #10
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	3348      	adds	r3, #72	; 0x48
 8001ba2:	443b      	add	r3, r7
 8001ba4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001ba8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001baa:	e014      	b.n	8001bd6 <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8001bac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001bb0:	330a      	adds	r3, #10
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	3348      	adds	r3, #72	; 0x48
 8001bb6:	443b      	add	r3, r7
 8001bb8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	da08      	bge.n	8001bd6 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8001bc4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001bc8:	330a      	adds	r3, #10
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	3348      	adds	r3, #72	; 0x48
 8001bce:	443b      	add	r3, r7
 8001bd0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 8001bd6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001be0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	d9cb      	bls.n	8001b80 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8001be8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c04:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8001c06:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8001c0a:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8001c0c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c10:	4413      	add	r3, r2
 8001c12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c16:	4413      	add	r3, r2
 8001c18:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001c22:	441a      	add	r2, r3
 8001c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c26:	1ad2      	subs	r2, r2, r3
 8001c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8001c34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001c44:	4413      	add	r3, r2
 8001c46:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001c50:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8001c52:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8001c56:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8001c58:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001c62:	4413      	add	r3, r2
 8001c64:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001c68:	4413      	add	r3, r2
 8001c6a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001c6e:	441a      	add	r2, r3
 8001c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c72:	1ad2      	subs	r2, r2, r3
 8001c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 8001c84:	2300      	movs	r3, #0
	
	
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3748      	adds	r7, #72	; 0x48
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40011800 	.word	0x40011800
 8001c94:	2000010c 	.word	0x2000010c

08001c98 <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	3204      	adds	r2, #4
 8001cba:	8852      	ldrh	r2, [r2, #2]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	8852      	ldrh	r2, [r2, #2]
 8001cc4:	1a8a      	subs	r2, r1, r2
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3308      	adds	r3, #8
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	1acb      	subs	r3, r1, r3
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	8849      	ldrh	r1, [r1, #2]
 8001cde:	4608      	mov	r0, r1
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	3108      	adds	r1, #8
 8001ce4:	8849      	ldrh	r1, [r1, #2]
 8001ce6:	1a41      	subs	r1, r0, r1
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fbf2 	bl	80004d8 <__aeabi_i2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	
	
	if (  pCalibrationFactor -> Divider == 0  )
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	f7fe feb6 	bl	8000a7c <__aeabi_dcmpeq>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]
 8001d1a:	e145      	b.n	8001fa8 <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3308      	adds	r3, #8
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	3204      	adds	r2, #4
 8001d2e:	8852      	ldrh	r2, [r2, #2]
 8001d30:	4611      	mov	r1, r2
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	3208      	adds	r2, #8
 8001d36:	8852      	ldrh	r2, [r2, #2]
 8001d38:	1a8a      	subs	r2, r1, r2
 8001d3a:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3304      	adds	r3, #4
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3308      	adds	r3, #8
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	1acb      	subs	r3, r1, r3
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	8849      	ldrh	r1, [r1, #2]
 8001d52:	4608      	mov	r0, r1
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	3108      	adds	r1, #8
 8001d58:	8849      	ldrh	r1, [r1, #2]
 8001d5a:	1a41      	subs	r1, r0, r1
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbb8 	bl	80004d8 <__aeabi_i2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	e9c1 2300 	strd	r2, r3, [r1]
		
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	3204      	adds	r2, #4
 8001d84:	8812      	ldrh	r2, [r2, #0]
 8001d86:	4611      	mov	r1, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	8812      	ldrh	r2, [r2, #0]
 8001d8e:	1a8a      	subs	r2, r1, r2
 8001d90:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	1acb      	subs	r3, r1, r3
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	3104      	adds	r1, #4
 8001da6:	8809      	ldrh	r1, [r1, #0]
 8001da8:	4608      	mov	r0, r1
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	3108      	adds	r1, #8
 8001dae:	8809      	ldrh	r1, [r1, #0]
 8001db0:	1a41      	subs	r1, r0, r1
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fb8d 	bl	80004d8 <__aeabi_i2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	fb03 f202 	mul.w	r2, r3, r2
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3308      	adds	r3, #8
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	8852      	ldrh	r2, [r2, #2]
 8001df2:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	fb03 f101 	mul.w	r1, r3, r1
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3308      	adds	r3, #8
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	fb00 f303 	mul.w	r3, r0, r3
 8001e16:	1acb      	subs	r3, r1, r3
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	3104      	adds	r1, #4
 8001e1c:	8849      	ldrh	r1, [r1, #2]
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8001e22:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3304      	adds	r3, #4
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	fb03 f101 	mul.w	r1, r3, r1
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	fb00 f303 	mul.w	r3, r0, r3
 8001e44:	1acb      	subs	r3, r1, r3
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	3108      	adds	r1, #8
 8001e4a:	8849      	ldrh	r1, [r1, #2]
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8001e50:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb40 	bl	80004d8 <__aeabi_i2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	885b      	ldrh	r3, [r3, #2]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3308      	adds	r3, #8
 8001e6c:	885b      	ldrh	r3, [r3, #2]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	3204      	adds	r2, #4
 8001e74:	8852      	ldrh	r2, [r2, #2]
 8001e76:	4611      	mov	r1, r2
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	8852      	ldrh	r2, [r2, #2]
 8001e7e:	1a8a      	subs	r2, r1, r2
 8001e80:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3304      	adds	r3, #4
 8001e88:	885b      	ldrh	r3, [r3, #2]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3308      	adds	r3, #8
 8001e90:	885b      	ldrh	r3, [r3, #2]
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	8849      	ldrh	r1, [r1, #2]
 8001e98:	4608      	mov	r0, r1
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	3108      	adds	r1, #8
 8001e9e:	8849      	ldrh	r1, [r1, #2]
 8001ea0:	1a41      	subs	r1, r0, r1
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb15 	bl	80004d8 <__aeabi_i2d>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	3204      	adds	r2, #4
 8001eca:	8852      	ldrh	r2, [r2, #2]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	3208      	adds	r2, #8
 8001ed2:	8852      	ldrh	r2, [r2, #2]
 8001ed4:	1a8a      	subs	r2, r1, r2
 8001ed6:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	885b      	ldrh	r3, [r3, #2]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	885b      	ldrh	r3, [r3, #2]
 8001ee6:	1acb      	subs	r3, r1, r3
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	3104      	adds	r1, #4
 8001eec:	8809      	ldrh	r1, [r1, #0]
 8001eee:	4608      	mov	r0, r1
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	3108      	adds	r1, #8
 8001ef4:	8809      	ldrh	r1, [r1, #0]
 8001ef6:	1a41      	subs	r1, r0, r1
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe faea 	bl	80004d8 <__aeabi_i2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	e9c1 2308 	strd	r2, r3, [r1, #32]
		

		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3308      	adds	r3, #8
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	fb03 f202 	mul.w	r2, r3, r2
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	3304      	adds	r3, #4
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	4619      	mov	r1, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	885b      	ldrh	r3, [r3, #2]
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	8852      	ldrh	r2, [r2, #2]
 8001f38:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3308      	adds	r3, #8
 8001f46:	885b      	ldrh	r3, [r3, #2]
 8001f48:	fb03 f101 	mul.w	r1, r3, r1
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	885b      	ldrh	r3, [r3, #2]
 8001f58:	fb00 f303 	mul.w	r3, r0, r3
 8001f5c:	1acb      	subs	r3, r1, r3
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	3104      	adds	r1, #4
 8001f62:	8849      	ldrh	r1, [r1, #2]
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8001f68:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	885b      	ldrh	r3, [r3, #2]
 8001f76:	fb03 f101 	mul.w	r1, r3, r1
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3304      	adds	r3, #4
 8001f84:	885b      	ldrh	r3, [r3, #2]
 8001f86:	fb00 f303 	mul.w	r3, r0, r3
 8001f8a:	1acb      	subs	r3, r1, r3
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	3108      	adds	r1, #8
 8001f90:	8849      	ldrh	r1, [r1, #2]
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8001f96:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fa9d 	bl	80004d8 <__aeabi_i2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			
	}
	
	
	return ucRet;
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
	
	
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 8001fb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fb8:	b0a0      	sub	sp, #128	; 0x80
 8001fba:	af02      	add	r7, sp, #8
		uint8_t i;
		
		char cStr [ 10 ];
		
    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
	  char * pStr = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	66bb      	str	r3, [r7, #104]	; 0x68
	  
	  strType_XPT2046_Calibration CalibrationFactor;
    		

		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 8001fd8:	23f0      	movs	r3, #240	; 0xf0
 8001fda:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 8001fde:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001fe2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	
	  #endif
		
		

		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 8001fe6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 8001ff2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		
		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 8001ffe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002002:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 8002006:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	109b      	asrs	r3, r3, #2
 8002012:	b29b      	uxth	r3, r3
 8002014:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		
		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 8002018:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	109b      	asrs	r3, r3, #2
 8002024:	b29b      	uxth	r3, r3
 8002026:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 800202a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800202e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		
		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 8002032:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002036:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;		
 800203a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800203e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  	
			
		LCD_GramScan (1 );
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff f8b6 	bl	80011b4 <LCD_GramScan>
		
		
		for ( i = 0; i < 4; i ++ )
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800204e:	e066      	b.n	800211e <XPT2046_Touch_Calibrate+0x16a>
		{ 
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );       
 8002050:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002054:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002058:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800205c:	9100      	str	r1, [sp, #0]
 800205e:	2100      	movs	r1, #0
 8002060:	2000      	movs	r0, #0
 8002062:	f7fe ff68 	bl	8000f36 <LCD_Clear>
			
			pStr = "Touch Calibrate ......";			
 8002066:	4bc6      	ldr	r3, [pc, #792]	; (8002380 <XPT2046_Touch_Calibrate+0x3cc>)
 8002068:	66bb      	str	r3, [r7, #104]	; 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );			
 800206a:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800206e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002070:	f7fe f8d8 	bl	8000224 <strlen>
 8002074:	4603      	mov	r3, r0
 8002076:	3b07      	subs	r3, #7
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	1ae3      	subs	r3, r4, r3
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	b298      	uxth	r0, r3
 8002080:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	b299      	uxth	r1, r3
 8002088:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002092:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002094:	f7ff f858 	bl	8001148 <LCD_DrawString_Color>
		
			sprintf ( cStr, "%d", i + 1 );
 8002098:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020a2:	49b8      	ldr	r1, [pc, #736]	; (8002384 <XPT2046_Touch_Calibrate+0x3d0>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 fb63 	bl	8003770 <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 80020aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	b298      	uxth	r0, r3
 80020b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b10      	subs	r3, #16
 80020bc:	b299      	uxth	r1, r3
 80020be:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020cc:	f7ff f83c 	bl	8001148 <LCD_DrawString_Color>
		
			XPT2046_DelayUS ( 100000 );		                                                   
 80020d0:	48ad      	ldr	r0, [pc, #692]	; (8002388 <XPT2046_Touch_Calibrate+0x3d4>)
 80020d2:	f7ff fc03 	bl	80018dc <XPT2046_DelayUS>
			
			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );  
 80020d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	3378      	adds	r3, #120	; 0x78
 80020de:	443b      	add	r3, r7
 80020e0:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80020e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	3378      	adds	r3, #120	; 0x78
 80020ec:	443b      	add	r3, r7
 80020ee:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f7ff f805 	bl	8001104 <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );         
 80020fa:	bf00      	nop
 80020fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002100:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fcaf 	bl	8001a6c <XPT2046_ReadAdc_Smooth_XY>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f3      	beq.n	80020fc <XPT2046_Touch_Calibrate+0x148>
		for ( i = 0; i < 4; i ++ )
 8002114:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002118:	3301      	adds	r3, #1
 800211a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800211e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002122:	2b03      	cmp	r3, #3
 8002124:	d994      	bls.n	8002050 <XPT2046_Touch_Calibrate+0x9c>

		}
		
		
		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;  	 
 8002126:	463a      	mov	r2, r7
 8002128:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800212c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fdb1 	bl	8001c98 <XPT2046_Calculate_CalibrationFactor>
		
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8002136:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	f7fe fc9b 	bl	8000a7c <__aeabi_dcmpeq>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	f040 8116 	bne.w	800237a <XPT2046_Touch_Calibrate+0x3c6>
		
			
		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;		
 800214e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002152:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f9be 	bl	80004d8 <__aeabi_i2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4620      	mov	r0, r4
 8002162:	4629      	mov	r1, r5
 8002164:	f7fe fa22 	bl	80005ac <__aeabi_dmul>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4690      	mov	r8, r2
 800216e:	4699      	mov	r9, r3
 8002170:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002174:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f9ad 	bl	80004d8 <__aeabi_i2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f7fe fa11 	bl	80005ac <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4640      	mov	r0, r8
 8002190:	4649      	mov	r1, r9
 8002192:	f7fe f855 	bl	8000240 <__adddf3>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021a2:	f7fe f84d 	bl	8000240 <__adddf3>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021b2:	f7fe fb25 	bl	8000800 <__aeabi_ddiv>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fc8f 	bl	8000ae0 <__aeabi_d2uiz>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;   
 80021c8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80021cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f981 	bl	80004d8 <__aeabi_i2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	f7fe f9e5 	bl	80005ac <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4690      	mov	r8, r2
 80021e8:	4699      	mov	r9, r3
 80021ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f970 	bl	80004d8 <__aeabi_i2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4620      	mov	r0, r4
 80021fe:	4629      	mov	r1, r5
 8002200:	f7fe f9d4 	bl	80005ac <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4640      	mov	r0, r8
 800220a:	4649      	mov	r1, r9
 800220c:	f7fe f818 	bl	8000240 <__adddf3>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800221c:	f7fe f810 	bl	8000240 <__adddf3>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800222c:	f7fe fae8 	bl	8000800 <__aeabi_ddiv>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fc52 	bl	8000ae0 <__aeabi_d2uiz>
 800223c:	4603      	mov	r3, r0
 800223e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		
		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );  
 8002242:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002246:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800224a:	429a      	cmp	r2, r3
 800224c:	d906      	bls.n	800225c <XPT2046_Touch_Calibrate+0x2a8>
 800224e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002252:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b29b      	uxth	r3, r3
 800225a:	e005      	b.n	8002268 <XPT2046_Touch_Calibrate+0x2b4>
 800225c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002260:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	b29b      	uxth	r3, r3
 8002268:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );  
 800226c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002270:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8002274:	429a      	cmp	r2, r3
 8002276:	d906      	bls.n	8002286 <XPT2046_Touch_Calibrate+0x2d2>
 8002278:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800227c:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	e005      	b.n	8002292 <XPT2046_Touch_Calibrate+0x2de>
 8002286:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800228a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	b29b      	uxth	r3, r3
 8002292:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8002296:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800229a:	2b0a      	cmp	r3, #10
 800229c:	d87c      	bhi.n	8002398 <XPT2046_Touch_Calibrate+0x3e4>
 800229e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80022a2:	2b0a      	cmp	r3, #10
 80022a4:	d878      	bhi.n	8002398 <XPT2046_Touch_Calibrate+0x3e4>
		

		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 80022a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022ae:	f7fe faa7 	bl	8000800 <__aeabi_ddiv>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4935      	ldr	r1, [pc, #212]	; (800238c <XPT2046_Touch_Calibrate+0x3d8>)
 80022b8:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 80022bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022c4:	f7fe fa9c 	bl	8000800 <__aeabi_ddiv>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	492f      	ldr	r1, [pc, #188]	; (800238c <XPT2046_Touch_Calibrate+0x3d8>)
 80022ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 80022d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022da:	f7fe fa91 	bl	8000800 <__aeabi_ddiv>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	492a      	ldr	r1, [pc, #168]	; (800238c <XPT2046_Touch_Calibrate+0x3d8>)
 80022e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 80022e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022f0:	f7fe fa86 	bl	8000800 <__aeabi_ddiv>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4924      	ldr	r1, [pc, #144]	; (800238c <XPT2046_Touch_Calibrate+0x3d8>)
 80022fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 80022fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002302:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002306:	f7fe fa7b 	bl	8000800 <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	491f      	ldr	r1, [pc, #124]	; (800238c <XPT2046_Touch_Calibrate+0x3d8>)
 8002310:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 8002314:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002318:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800231c:	f7fe fa70 	bl	8000800 <__aeabi_ddiv>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4919      	ldr	r1, [pc, #100]	; (800238c <XPT2046_Touch_Calibrate+0x3d8>)
 8002326:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	

	#endif
	
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 800232a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800232e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002332:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002336:	9100      	str	r1, [sp, #0]
 8002338:	2100      	movs	r1, #0
 800233a:	2000      	movs	r0, #0
 800233c:	f7fe fdfb 	bl	8000f36 <LCD_Clear>
	
	pStr = "Calibrate Succed";			
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <XPT2046_Touch_Calibrate+0x3dc>)
 8002342:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8002344:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8002348:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800234a:	f7fd ff6b 	bl	8000224 <strlen>
 800234e:	4603      	mov	r3, r0
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1ae3      	subs	r3, r4, r3
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	b298      	uxth	r0, r3
 8002358:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	b299      	uxth	r1, r3
 8002360:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800236c:	f7fe feec 	bl	8001148 <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 8002370:	4808      	ldr	r0, [pc, #32]	; (8002394 <XPT2046_Touch_Calibrate+0x3e0>)
 8002372:	f7ff fab3 	bl	80018dc <XPT2046_DelayUS>

	return 1;    
 8002376:	2301      	movs	r3, #1
 8002378:	e050      	b.n	800241c <XPT2046_Touch_Calibrate+0x468>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 800237a:	bf00      	nop
 800237c:	e00d      	b.n	800239a <XPT2046_Touch_Calibrate+0x3e6>
 800237e:	bf00      	nop
 8002380:	0800408c 	.word	0x0800408c
 8002384:	080040a4 	.word	0x080040a4
 8002388:	000186a0 	.word	0x000186a0
 800238c:	20000008 	.word	0x20000008
 8002390:	080040a8 	.word	0x080040a8
 8002394:	00030d40 	.word	0x00030d40
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8002398:	bf00      	nop
	

	Failure:
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND ); 
 800239a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800239e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80023a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023a6:	9100      	str	r1, [sp, #0]
 80023a8:	2100      	movs	r1, #0
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7fe fdc3 	bl	8000f36 <LCD_Clear>
	
	pStr = "Calibrate fail";			
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <XPT2046_Touch_Calibrate+0x474>)
 80023b2:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 80023b4:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80023b8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80023ba:	f7fd ff33 	bl	8000224 <strlen>
 80023be:	4603      	mov	r3, r0
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	1ae3      	subs	r3, r4, r3
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	b298      	uxth	r0, r3
 80023c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	b299      	uxth	r1, r3
 80023d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80023dc:	f7fe feb4 	bl	8001148 <LCD_DrawString_Color>

	pStr = "try again";			
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <XPT2046_Touch_Calibrate+0x478>)
 80023e2:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );				
 80023e4:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80023e8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80023ea:	f7fd ff1b 	bl	8000224 <strlen>
 80023ee:	4603      	mov	r3, r0
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	1ae3      	subs	r3, r4, r3
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	b298      	uxth	r0, r3
 80023f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3310      	adds	r3, #16
 8002402:	b299      	uxth	r1, r3
 8002404:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002410:	f7fe fe9a 	bl	8001148 <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );		
 8002414:	4806      	ldr	r0, [pc, #24]	; (8002430 <XPT2046_Touch_Calibrate+0x47c>)
 8002416:	f7ff fa61 	bl	80018dc <XPT2046_DelayUS>
	
	return 0; 
 800241a:	2300      	movs	r3, #0
		
		
}
 800241c:	4618      	mov	r0, r3
 800241e:	3778      	adds	r7, #120	; 0x78
 8002420:	46bd      	mov	sp, r7
 8002422:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002426:	bf00      	nop
 8002428:	080040bc 	.word	0x080040bc
 800242c:	080040cc 	.word	0x080040cc
 8002430:	000f4240 	.word	0x000f4240

08002434 <XPT2046_Get_TouchedPoint>:

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8002434:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fb0f 	bl	8001a6c <XPT2046_ReadAdc_Smooth_XY>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d06e      	beq.n	8002532 <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	e9d3 4500 	ldrd	r4, r5, [r3]
 800245a:	893b      	ldrh	r3, [r7, #8]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f83b 	bl	80004d8 <__aeabi_i2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	f7fe f89f 	bl	80005ac <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4690      	mov	r8, r2
 8002474:	4699      	mov	r9, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800247c:	897b      	ldrh	r3, [r7, #10]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f82a 	bl	80004d8 <__aeabi_i2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f7fe f88e 	bl	80005ac <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4640      	mov	r0, r8
 8002496:	4649      	mov	r1, r9
 8002498:	f7fd fed2 	bl	8000240 <__adddf3>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80024aa:	f7fd fec9 	bl	8000240 <__adddf3>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	f7fe fb13 	bl	8000ae0 <__aeabi_d2uiz>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b29a      	uxth	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80024c8:	893b      	ldrh	r3, [r7, #8]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f804 	bl	80004d8 <__aeabi_i2d>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4620      	mov	r0, r4
 80024d6:	4629      	mov	r1, r5
 80024d8:	f7fe f868 	bl	80005ac <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4690      	mov	r8, r2
 80024e2:	4699      	mov	r9, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80024ea:	897b      	ldrh	r3, [r7, #10]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fd fff3 	bl	80004d8 <__aeabi_i2d>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4620      	mov	r0, r4
 80024f8:	4629      	mov	r1, r5
 80024fa:	f7fe f857 	bl	80005ac <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4640      	mov	r0, r8
 8002504:	4649      	mov	r1, r9
 8002506:	f7fd fe9b 	bl	8000240 <__adddf3>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002518:	f7fd fe92 	bl	8000240 <__adddf3>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fadc 	bl	8000ae0 <__aeabi_d2uiz>
 8002528:	4603      	mov	r3, r0
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	805a      	strh	r2, [r3, #2]
 8002530:	e001      	b.n	8002536 <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002544 <Check_touchkey>:


void Check_touchkey(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
		strType_XPT2046_Coordinate strDisplayCoordinate;
	
	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	490e      	ldr	r1, [pc, #56]	; (8002588 <Check_touchkey+0x44>)
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff70 	bl	8002434 <XPT2046_Get_TouchedPoint>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d012      	beq.n	8002580 <Check_touchkey+0x3c>
	{
		if ( ( strDisplayCoordinate .y > 232 ) && ( strDisplayCoordinate .y < 282 ) )
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	2be8      	cmp	r3, #232	; 0xe8
 800255e:	d90f      	bls.n	8002580 <Check_touchkey+0x3c>
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8002566:	d20b      	bcs.n	8002580 <Check_touchkey+0x3c>
		{
			if ( ( strDisplayCoordinate .x > 95 ) && ( strDisplayCoordinate .x < 145 ) )
 8002568:	88bb      	ldrh	r3, [r7, #4]
 800256a:	2b5f      	cmp	r3, #95	; 0x5f
 800256c:	d908      	bls.n	8002580 <Check_touchkey+0x3c>
 800256e:	88bb      	ldrh	r3, [r7, #4]
 8002570:	2b90      	cmp	r3, #144	; 0x90
 8002572:	d805      	bhi.n	8002580 <Check_touchkey+0x3c>
			{
				GPIOB -> ODR ^= GPIO_PIN_1;
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <Check_touchkey+0x48>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <Check_touchkey+0x48>)
 800257a:	f083 0302 	eor.w	r3, r3, #2
 800257e:	60d3      	str	r3, [r2, #12]
			}					
		}

	}
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000008 	.word	0x20000008
 800258c:	40010c00 	.word	0x40010c00

08002590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002590:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002592:	e003      	b.n	800259c <LoopCopyDataInit>

08002594 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002596:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002598:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800259a:	3104      	adds	r1, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800259c:	480a      	ldr	r0, [pc, #40]	; (80025c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025a4:	d3f6      	bcc.n	8002594 <CopyDataInit>
  ldr r2, =_sbss
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025a8:	e002      	b.n	80025b0 <LoopFillZerobss>

080025aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025ac:	f842 3b04 	str.w	r3, [r2], #4

080025b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025b4:	d3f9      	bcc.n	80025aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025b6:	f7ff f95d 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ba:	f001 f8ad 	bl	8003718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025be:	f7fe feab 	bl	8001318 <main>
  bx lr
 80025c2:	4770      	bx	lr
  ldr r3, =_sidata
 80025c4:	08004724 	.word	0x08004724
  ldr r0, =_sdata
 80025c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80025cc:	200000a4 	.word	0x200000a4
  ldr r2, =_sbss
 80025d0:	200000a4 	.word	0x200000a4
  ldr r3, = _ebss
 80025d4:	20000124 	.word	0x20000124

080025d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC1_2_IRQHandler>
	...

080025dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_Init+0x28>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_Init+0x28>)
 80025e6:	f043 0310 	orr.w	r3, r3, #16
 80025ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 f943 	bl	8002878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f000 f808 	bl	8002608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f8:	f7ff f842 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40022000 	.word	0x40022000

08002608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_InitTick+0x54>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_InitTick+0x58>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f95b 	bl	80028e2 <HAL_SYSTICK_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e00e      	b.n	8002654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b0f      	cmp	r3, #15
 800263a:	d80a      	bhi.n	8002652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800263c:	2200      	movs	r2, #0
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	f000 f923 	bl	800288e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002648:	4a06      	ldr	r2, [pc, #24]	; (8002664 <HAL_InitTick+0x5c>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000000 	.word	0x20000000
 8002660:	2000003c 	.word	0x2000003c
 8002664:	20000038 	.word	0x20000038

08002668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_IncTick+0x1c>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_IncTick+0x20>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4413      	add	r3, r2
 8002678:	4a03      	ldr	r2, [pc, #12]	; (8002688 <HAL_IncTick+0x20>)
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	2000003c 	.word	0x2000003c
 8002688:	20000110 	.word	0x20000110

0800268c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return uwTick;
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <HAL_GetTick+0x10>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	20000110 	.word	0x20000110

080026a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff fff0 	bl	800268c <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d005      	beq.n	80026c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_Delay+0x44>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c6:	bf00      	nop
 80026c8:	f7ff ffe0 	bl	800268c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d8f7      	bhi.n	80026c8 <HAL_Delay+0x28>
  {
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000003c 	.word	0x2000003c

080026e8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <NVIC_SetPriorityGrouping+0x44>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	; (800272c <NVIC_SetPriorityGrouping+0x44>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4906      	ldr	r1, [pc, #24]	; (8002778 <NVIC_EnableIRQ+0x2c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	e000e100 	.word	0xe000e100

0800277c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	da0b      	bge.n	80027a8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <NVIC_SetPriority+0x4c>)
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	3b04      	subs	r3, #4
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a6:	e009      	b.n	80027bc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4907      	ldr	r1, [pc, #28]	; (80027cc <NVIC_SetPriority+0x50>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000ed00 	.word	0xe000ed00
 80027cc:	e000e100 	.word	0xe000e100

080027d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002844:	d301      	bcc.n	800284a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002846:	2301      	movs	r3, #1
 8002848:	e00f      	b.n	800286a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <SysTick_Config+0x40>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002852:	210f      	movs	r1, #15
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f7ff ff90 	bl	800277c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <SysTick_Config+0x40>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SysTick_Config+0x40>)
 8002864:	2207      	movs	r2, #7
 8002866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	e000e010 	.word	0xe000e010

08002878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff31 	bl	80026e8 <NVIC_SetPriorityGrouping>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a0:	f7ff ff46 	bl	8002730 <NVIC_GetPriorityGrouping>
 80028a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	6978      	ldr	r0, [r7, #20]
 80028ac:	f7ff ff90 	bl	80027d0 <NVIC_EncodePriority>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff5f 	bl	800277c <NVIC_SetPriority>
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff39 	bl	800274c <NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ffa2 	bl	8002834 <SysTick_Config>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b08b      	sub	sp, #44	; 0x2c
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	e179      	b.n	8002c14 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8002920:	2201      	movs	r2, #1
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	429a      	cmp	r2, r3
 800293a:	f040 8168 	bne.w	8002c0e <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a96      	ldr	r2, [pc, #600]	; (8002b9c <HAL_GPIO_Init+0x2a0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d05e      	beq.n	8002a06 <HAL_GPIO_Init+0x10a>
 8002948:	4a94      	ldr	r2, [pc, #592]	; (8002b9c <HAL_GPIO_Init+0x2a0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d875      	bhi.n	8002a3a <HAL_GPIO_Init+0x13e>
 800294e:	4a94      	ldr	r2, [pc, #592]	; (8002ba0 <HAL_GPIO_Init+0x2a4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d058      	beq.n	8002a06 <HAL_GPIO_Init+0x10a>
 8002954:	4a92      	ldr	r2, [pc, #584]	; (8002ba0 <HAL_GPIO_Init+0x2a4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d86f      	bhi.n	8002a3a <HAL_GPIO_Init+0x13e>
 800295a:	4a92      	ldr	r2, [pc, #584]	; (8002ba4 <HAL_GPIO_Init+0x2a8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d052      	beq.n	8002a06 <HAL_GPIO_Init+0x10a>
 8002960:	4a90      	ldr	r2, [pc, #576]	; (8002ba4 <HAL_GPIO_Init+0x2a8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d869      	bhi.n	8002a3a <HAL_GPIO_Init+0x13e>
 8002966:	4a90      	ldr	r2, [pc, #576]	; (8002ba8 <HAL_GPIO_Init+0x2ac>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d04c      	beq.n	8002a06 <HAL_GPIO_Init+0x10a>
 800296c:	4a8e      	ldr	r2, [pc, #568]	; (8002ba8 <HAL_GPIO_Init+0x2ac>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d863      	bhi.n	8002a3a <HAL_GPIO_Init+0x13e>
 8002972:	4a8e      	ldr	r2, [pc, #568]	; (8002bac <HAL_GPIO_Init+0x2b0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d046      	beq.n	8002a06 <HAL_GPIO_Init+0x10a>
 8002978:	4a8c      	ldr	r2, [pc, #560]	; (8002bac <HAL_GPIO_Init+0x2b0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d85d      	bhi.n	8002a3a <HAL_GPIO_Init+0x13e>
 800297e:	2b12      	cmp	r3, #18
 8002980:	d82a      	bhi.n	80029d8 <HAL_GPIO_Init+0xdc>
 8002982:	2b12      	cmp	r3, #18
 8002984:	d859      	bhi.n	8002a3a <HAL_GPIO_Init+0x13e>
 8002986:	a201      	add	r2, pc, #4	; (adr r2, 800298c <HAL_GPIO_Init+0x90>)
 8002988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298c:	08002a07 	.word	0x08002a07
 8002990:	080029e1 	.word	0x080029e1
 8002994:	080029f3 	.word	0x080029f3
 8002998:	08002a35 	.word	0x08002a35
 800299c:	08002a3b 	.word	0x08002a3b
 80029a0:	08002a3b 	.word	0x08002a3b
 80029a4:	08002a3b 	.word	0x08002a3b
 80029a8:	08002a3b 	.word	0x08002a3b
 80029ac:	08002a3b 	.word	0x08002a3b
 80029b0:	08002a3b 	.word	0x08002a3b
 80029b4:	08002a3b 	.word	0x08002a3b
 80029b8:	08002a3b 	.word	0x08002a3b
 80029bc:	08002a3b 	.word	0x08002a3b
 80029c0:	08002a3b 	.word	0x08002a3b
 80029c4:	08002a3b 	.word	0x08002a3b
 80029c8:	08002a3b 	.word	0x08002a3b
 80029cc:	08002a3b 	.word	0x08002a3b
 80029d0:	080029e9 	.word	0x080029e9
 80029d4:	080029fd 	.word	0x080029fd
 80029d8:	4a75      	ldr	r2, [pc, #468]	; (8002bb0 <HAL_GPIO_Init+0x2b4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029de:	e02c      	b.n	8002a3a <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	623b      	str	r3, [r7, #32]
          break;
 80029e6:	e029      	b.n	8002a3c <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	3304      	adds	r3, #4
 80029ee:	623b      	str	r3, [r7, #32]
          break;
 80029f0:	e024      	b.n	8002a3c <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	3308      	adds	r3, #8
 80029f8:	623b      	str	r3, [r7, #32]
          break;
 80029fa:	e01f      	b.n	8002a3c <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	330c      	adds	r3, #12
 8002a02:	623b      	str	r3, [r7, #32]
          break;
 8002a04:	e01a      	b.n	8002a3c <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	623b      	str	r3, [r7, #32]
          break;
 8002a12:	e013      	b.n	8002a3c <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d105      	bne.n	8002a28 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	611a      	str	r2, [r3, #16]
          break;
 8002a26:	e009      	b.n	8002a3c <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a28:	2308      	movs	r3, #8
 8002a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	615a      	str	r2, [r3, #20]
          break;
 8002a32:	e003      	b.n	8002a3c <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a34:	2300      	movs	r3, #0
 8002a36:	623b      	str	r3, [r7, #32]
          break;
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x140>
          break;
 8002a3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2bff      	cmp	r3, #255	; 0xff
 8002a40:	d801      	bhi.n	8002a46 <HAL_GPIO_Init+0x14a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	e001      	b.n	8002a4a <HAL_GPIO_Init+0x14e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2bff      	cmp	r3, #255	; 0xff
 8002a50:	d802      	bhi.n	8002a58 <HAL_GPIO_Init+0x15c>
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	e002      	b.n	8002a5e <HAL_GPIO_Init+0x162>
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	3b08      	subs	r3, #8
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	210f      	movs	r1, #15
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	6a39      	ldr	r1, [r7, #32]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80c1 	beq.w	8002c0e <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a8c:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <HAL_GPIO_Init+0x2b8>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a48      	ldr	r2, [pc, #288]	; (8002bb4 <HAL_GPIO_Init+0x2b8>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6193      	str	r3, [r2, #24]
 8002a98:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_GPIO_Init+0x2b8>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8002aa4:	4a44      	ldr	r2, [pc, #272]	; (8002bb8 <HAL_GPIO_Init+0x2bc>)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	220f      	movs	r2, #15
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a3c      	ldr	r2, [pc, #240]	; (8002bbc <HAL_GPIO_Init+0x2c0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d01f      	beq.n	8002b10 <HAL_GPIO_Init+0x214>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <HAL_GPIO_Init+0x2c4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d019      	beq.n	8002b0c <HAL_GPIO_Init+0x210>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <HAL_GPIO_Init+0x2c8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_GPIO_Init+0x20c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a39      	ldr	r2, [pc, #228]	; (8002bc8 <HAL_GPIO_Init+0x2cc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00d      	beq.n	8002b04 <HAL_GPIO_Init+0x208>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <HAL_GPIO_Init+0x2d0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d007      	beq.n	8002b00 <HAL_GPIO_Init+0x204>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a37      	ldr	r2, [pc, #220]	; (8002bd0 <HAL_GPIO_Init+0x2d4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_GPIO_Init+0x200>
 8002af8:	2305      	movs	r3, #5
 8002afa:	e00a      	b.n	8002b12 <HAL_GPIO_Init+0x216>
 8002afc:	2306      	movs	r3, #6
 8002afe:	e008      	b.n	8002b12 <HAL_GPIO_Init+0x216>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_Init+0x216>
 8002b04:	2303      	movs	r3, #3
 8002b06:	e004      	b.n	8002b12 <HAL_GPIO_Init+0x216>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e002      	b.n	8002b12 <HAL_GPIO_Init+0x216>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_GPIO_Init+0x216>
 8002b10:	2300      	movs	r3, #0
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	4093      	lsls	r3, r2
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8002b22:	4925      	ldr	r1, [pc, #148]	; (8002bb8 <HAL_GPIO_Init+0x2bc>)
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d006      	beq.n	8002b4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4924      	ldr	r1, [pc, #144]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
 8002b48:	e006      	b.n	8002b58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	4920      	ldr	r1, [pc, #128]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	491a      	ldr	r1, [pc, #104]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d025      	beq.n	8002bd8 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4910      	ldr	r1, [pc, #64]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
 8002b98:	e025      	b.n	8002be6 <HAL_GPIO_Init+0x2ea>
 8002b9a:	bf00      	nop
 8002b9c:	10320000 	.word	0x10320000
 8002ba0:	10310000 	.word	0x10310000
 8002ba4:	10220000 	.word	0x10220000
 8002ba8:	10210000 	.word	0x10210000
 8002bac:	10120000 	.word	0x10120000
 8002bb0:	10110000 	.word	0x10110000
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40010800 	.word	0x40010800
 8002bc0:	40010c00 	.word	0x40010c00
 8002bc4:	40011000 	.word	0x40011000
 8002bc8:	40011400 	.word	0x40011400
 8002bcc:	40011800 	.word	0x40011800
 8002bd0:	40011c00 	.word	0x40011c00
 8002bd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	4911      	ldr	r1, [pc, #68]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	490c      	ldr	r1, [pc, #48]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60cb      	str	r3, [r1, #12]
 8002bfe:	e006      	b.n	8002c0e <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	4907      	ldr	r1, [pc, #28]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	3301      	adds	r3, #1
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	f67f ae82 	bls.w	8002920 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	372c      	adds	r7, #44	; 0x2c
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	40010400 	.word	0x40010400

08002c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	e001      	b.n	8002c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	807b      	strh	r3, [r7, #2]
 8002c66:	4613      	mov	r3, r2
 8002c68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c6a:	787b      	ldrb	r3, [r7, #1]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c70:	887a      	ldrh	r2, [r7, #2]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c76:	e003      	b.n	8002c80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c78:	887b      	ldrh	r3, [r7, #2]
 8002c7a:	041a      	lsls	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	611a      	str	r2, [r3, #16]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d006      	beq.n	8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f806 	bl	8002cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40010400 	.word	0x40010400

08002cbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8087 	beq.w	8002df8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cea:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf6:	4b8f      	ldr	r3, [pc, #572]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d112      	bne.n	8002d28 <HAL_RCC_OscConfig+0x58>
 8002d02:	4b8c      	ldr	r3, [pc, #560]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d06c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x126>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d168      	bne.n	8002df6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e22d      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d106      	bne.n	8002d40 <HAL_RCC_OscConfig+0x70>
 8002d32:	4b80      	ldr	r3, [pc, #512]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7f      	ldr	r2, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e02e      	b.n	8002d9e <HAL_RCC_OscConfig+0xce>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x92>
 8002d48:	4b7a      	ldr	r3, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a79      	ldr	r2, [pc, #484]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b77      	ldr	r3, [pc, #476]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a76      	ldr	r2, [pc, #472]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e01d      	b.n	8002d9e <HAL_RCC_OscConfig+0xce>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCC_OscConfig+0xb6>
 8002d6c:	4b71      	ldr	r3, [pc, #452]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a70      	ldr	r2, [pc, #448]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b6e      	ldr	r3, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6d      	ldr	r2, [pc, #436]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	e00b      	b.n	8002d9e <HAL_RCC_OscConfig+0xce>
 8002d86:	4b6b      	ldr	r3, [pc, #428]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6a      	ldr	r2, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a67      	ldr	r2, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d013      	beq.n	8002dce <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7ff fc71 	bl	800268c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dae:	f7ff fc6d 	bl	800268c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1e1      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc0:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0xde>
 8002dcc:	e014      	b.n	8002df8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7ff fc5d 	bl	800268c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd6:	f7ff fc59 	bl	800268c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b64      	cmp	r3, #100	; 0x64
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e1cd      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de8:	4b52      	ldr	r3, [pc, #328]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x106>
 8002df4:	e000      	b.n	8002df8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d063      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e10:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d11c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x186>
 8002e1c:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d116      	bne.n	8002e56 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e28:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_OscConfig+0x170>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e1a1      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4939      	ldr	r1, [pc, #228]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e54:	e03a      	b.n	8002ecc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d020      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5e:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x268>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff fc12 	bl	800268c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7ff fc0e 	bl	800268c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e182      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4926      	ldr	r1, [pc, #152]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
 8002e9e:	e015      	b.n	8002ecc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_OscConfig+0x268>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7ff fbf1 	bl	800268c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eae:	f7ff fbed 	bl	800268c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e161      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d039      	beq.n	8002f4c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d019      	beq.n	8002f14 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee6:	f7ff fbd1 	bl	800268c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eee:	f7ff fbcd 	bl	800268c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e141      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_RCC_OscConfig+0x264>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	f000 faad 	bl	800346c <RCC_Delay>
 8002f12:	e01b      	b.n	8002f4c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCC_OscConfig+0x26c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7ff fbb7 	bl	800268c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	e00e      	b.n	8002f40 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f22:	f7ff fbb3 	bl	800268c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d907      	bls.n	8002f40 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e127      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	42420000 	.word	0x42420000
 8002f3c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	4b92      	ldr	r3, [pc, #584]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ea      	bne.n	8002f22 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a6 	beq.w	80030a6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]
 8002f76:	4b85      	ldr	r3, [pc, #532]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b82      	ldr	r3, [pc, #520]	; (8003190 <HAL_RCC_OscConfig+0x4c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b7f      	ldr	r3, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x4c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <HAL_RCC_OscConfig+0x4c0>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff fb75 	bl	800268c <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7ff fb71 	bl	800268c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0e5      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b75      	ldr	r3, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x4c0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x30a>
 8002fcc:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	e02d      	b.n	8003036 <HAL_RCC_OscConfig+0x366>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x32c>
 8002fe2:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a69      	ldr	r2, [pc, #420]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	4b67      	ldr	r3, [pc, #412]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a66      	ldr	r2, [pc, #408]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	6213      	str	r3, [r2, #32]
 8002ffa:	e01c      	b.n	8003036 <HAL_RCC_OscConfig+0x366>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b05      	cmp	r3, #5
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x34e>
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a60      	ldr	r2, [pc, #384]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	4b5e      	ldr	r3, [pc, #376]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a5d      	ldr	r2, [pc, #372]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e00b      	b.n	8003036 <HAL_RCC_OscConfig+0x366>
 800301e:	4b5b      	ldr	r3, [pc, #364]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a5a      	ldr	r2, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6213      	str	r3, [r2, #32]
 800302a:	4b58      	ldr	r3, [pc, #352]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303e:	f7ff fb25 	bl	800268c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7ff fb21 	bl	800268c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e093      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCC_OscConfig+0x376>
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7ff fb0f 	bl	800268c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7ff fb0b 	bl	800268c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e07d      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ee      	bne.n	8003072 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4b3c      	ldr	r3, [pc, #240]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4a3b      	ldr	r2, [pc, #236]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d069      	beq.n	8003182 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ae:	4b37      	ldr	r3, [pc, #220]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d061      	beq.n	800317e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d146      	bne.n	8003150 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7ff fae0 	bl	800268c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7ff fadc 	bl	800268c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e050      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f6:	d108      	bne.n	800310a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030f8:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4921      	ldr	r1, [pc, #132]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a19      	ldr	r1, [r3, #32]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	430b      	orrs	r3, r1
 800311c:	491b      	ldr	r1, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7ff fab0 	bl	800268c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7ff faac 	bl	800268c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e020      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x460>
 800314e:	e018      	b.n	8003182 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7ff fa99 	bl	800268c <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315e:	f7ff fa95 	bl	800268c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e009      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCC_OscConfig+0x4bc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x48e>
 800317c:	e001      	b.n	8003182 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
 8003194:	42420060 	.word	0x42420060

08003198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80031a6:	4b7e      	ldr	r3, [pc, #504]	; (80033a0 <HAL_RCC_ClockConfig+0x208>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d910      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b4:	4b7a      	ldr	r3, [pc, #488]	; (80033a0 <HAL_RCC_ClockConfig+0x208>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 0207 	bic.w	r2, r3, #7
 80031bc:	4978      	ldr	r1, [pc, #480]	; (80033a0 <HAL_RCC_ClockConfig+0x208>)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c4:	4b76      	ldr	r3, [pc, #472]	; (80033a0 <HAL_RCC_ClockConfig+0x208>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0e0      	b.n	8003398 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d020      	beq.n	8003224 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ee:	4b6d      	ldr	r3, [pc, #436]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a6c      	ldr	r2, [pc, #432]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 80031f4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031f8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003206:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a66      	ldr	r2, [pc, #408]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 800320c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003210:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003212:	4b64      	ldr	r3, [pc, #400]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	4961      	ldr	r1, [pc, #388]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d06a      	beq.n	8003306 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d107      	bne.n	8003248 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003238:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d115      	bne.n	8003270 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0a7      	b.n	8003398 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d107      	bne.n	8003260 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003250:	4b54      	ldr	r3, [pc, #336]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e09b      	b.n	8003398 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e093      	b.n	8003398 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003270:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f023 0203 	bic.w	r2, r3, #3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4949      	ldr	r1, [pc, #292]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003282:	f7ff fa03 	bl	800268c <HAL_GetTick>
 8003286:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d112      	bne.n	80032b6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003292:	f7ff f9fb 	bl	800268c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e077      	b.n	8003398 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a8:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d1ee      	bne.n	8003292 <HAL_RCC_ClockConfig+0xfa>
 80032b4:	e027      	b.n	8003306 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d11d      	bne.n	80032fa <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7ff f9e4 	bl	800268c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e060      	b.n	8003398 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d6:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d1ee      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x128>
 80032e2:	e010      	b.n	8003306 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7ff f9d2 	bl	800268c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04e      	b.n	8003398 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fa:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ee      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <HAL_RCC_ClockConfig+0x208>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d210      	bcs.n	8003336 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <HAL_RCC_ClockConfig+0x208>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 0207 	bic.w	r2, r3, #7
 800331c:	4920      	ldr	r1, [pc, #128]	; (80033a0 <HAL_RCC_ClockConfig+0x208>)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003324:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <HAL_RCC_ClockConfig+0x208>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d001      	beq.n	8003336 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e030      	b.n	8003398 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003342:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	4915      	ldr	r1, [pc, #84]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	490d      	ldr	r1, [pc, #52]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003374:	f000 f81c 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x20c>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	4908      	ldr	r1, [pc, #32]	; (80033a8 <HAL_RCC_ClockConfig+0x210>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
 800338c:	4a07      	ldr	r2, [pc, #28]	; (80033ac <HAL_RCC_ClockConfig+0x214>)
 800338e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003390:	2000      	movs	r0, #0
 8003392:	f7ff f939 	bl	8002608 <HAL_InitTick>
  
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40021000 	.word	0x40021000
 80033a8:	080046d8 	.word	0x080046d8
 80033ac:	20000000 	.word	0x20000000

080033b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	b490      	push	{r4, r7}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033b6:	4b29      	ldr	r3, [pc, #164]	; (800345c <HAL_RCC_GetSysClockFreq+0xac>)
 80033b8:	1d3c      	adds	r4, r7, #4
 80033ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033c0:	f240 2301 	movw	r3, #513	; 0x201
 80033c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033da:	4b21      	ldr	r3, [pc, #132]	; (8003460 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x40>
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x46>
 80033ee:	e02b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f0:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033f2:	623b      	str	r3, [r7, #32]
      break;
 80033f4:	e02b      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	0c9b      	lsrs	r3, r3, #18
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	3328      	adds	r3, #40	; 0x28
 8003400:	443b      	add	r3, r7
 8003402:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003406:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d012      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0c5b      	lsrs	r3, r3, #17
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	3328      	adds	r3, #40	; 0x28
 800341e:	443b      	add	r3, r7
 8003420:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003424:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <HAL_RCC_GetSysClockFreq+0xb4>)
 800342a:	fb03 f202 	mul.w	r2, r3, r2
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e004      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	623b      	str	r3, [r7, #32]
      break;
 8003446:	e002      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_GetSysClockFreq+0xb4>)
 800344a:	623b      	str	r3, [r7, #32]
      break;
 800344c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344e:	6a3b      	ldr	r3, [r7, #32]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3728      	adds	r7, #40	; 0x28
 8003454:	46bd      	mov	sp, r7
 8003456:	bc90      	pop	{r4, r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	080040d8 	.word	0x080040d8
 8003460:	40021000 	.word	0x40021000
 8003464:	007a1200 	.word	0x007a1200
 8003468:	003d0900 	.word	0x003d0900

0800346c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <RCC_Delay+0x38>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <RCC_Delay+0x3c>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0a5b      	lsrs	r3, r3, #9
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003488:	bf00      	nop
}
 800348a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e5a      	subs	r2, r3, #1
 8003490:	60fa      	str	r2, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f8      	bne.n	8003488 <RCC_Delay+0x1c>
}
 8003496:	bf00      	nop
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000
 80034a8:	10624dd3 	.word	0x10624dd3

080034ac <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e034      	b.n	800352c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7fe f948 	bl	800176c <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3308      	adds	r3, #8
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 f824 	bl	8003534 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	461a      	mov	r2, r3
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	f000 f89c 	bl	8003634 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6858      	ldr	r0, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	f000 f8c7 	bl	800369c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	f041 0101 	orr.w	r1, r1, #1
 8003526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	f023 0101 	bic.w	r1, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b08      	cmp	r3, #8
 800355c:	d132      	bne.n	80035c4 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003568:	4b31      	ldr	r3, [pc, #196]	; (8003630 <FSMC_NORSRAM_Init+0xfc>)
 800356a:	4013      	ands	r3, r2
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	6851      	ldr	r1, [r2, #4]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	6892      	ldr	r2, [r2, #8]
 8003574:	4311      	orrs	r1, r2
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	4311      	orrs	r1, r2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	6912      	ldr	r2, [r2, #16]
 8003580:	4311      	orrs	r1, r2
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	6952      	ldr	r2, [r2, #20]
 8003586:	4311      	orrs	r1, r2
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	6992      	ldr	r2, [r2, #24]
 800358c:	4311      	orrs	r1, r2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	69d2      	ldr	r2, [r2, #28]
 8003592:	4311      	orrs	r1, r2
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	6a12      	ldr	r2, [r2, #32]
 8003598:	4311      	orrs	r1, r2
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800359e:	4311      	orrs	r1, r2
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035a4:	4311      	orrs	r1, r2
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035aa:	4311      	orrs	r1, r2
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035b0:	430a      	orrs	r2, r1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035c2:	e02f      	b.n	8003624 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035ce:	4b18      	ldr	r3, [pc, #96]	; (8003630 <FSMC_NORSRAM_Init+0xfc>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	6851      	ldr	r1, [r2, #4]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	6892      	ldr	r2, [r2, #8]
 80035da:	4311      	orrs	r1, r2
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	68d2      	ldr	r2, [r2, #12]
 80035e0:	4311      	orrs	r1, r2
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	6912      	ldr	r2, [r2, #16]
 80035e6:	4311      	orrs	r1, r2
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	6952      	ldr	r2, [r2, #20]
 80035ec:	4311      	orrs	r1, r2
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	6992      	ldr	r2, [r2, #24]
 80035f2:	4311      	orrs	r1, r2
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	69d2      	ldr	r2, [r2, #28]
 80035f8:	4311      	orrs	r1, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	6a12      	ldr	r2, [r2, #32]
 80035fe:	4311      	orrs	r1, r2
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003604:	4311      	orrs	r1, r2
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800360a:	4311      	orrs	r1, r2
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003610:	4311      	orrs	r1, r2
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003616:	4311      	orrs	r1, r2
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	4319      	orrs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	fff70081 	.word	0xfff70081

08003634 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	431a      	orrs	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	431a      	orrs	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	041b      	lsls	r3, r3, #16
 8003668:	431a      	orrs	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	3b01      	subs	r3, #1
 8003670:	051b      	lsls	r3, r3, #20
 8003672:	431a      	orrs	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	3b02      	subs	r3, #2
 800367a:	061b      	lsls	r3, r3, #24
 800367c:	431a      	orrs	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	3201      	adds	r2, #1
 8003688:	4319      	orrs	r1, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b0:	d11d      	bne.n	80036ee <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036ba:	4b13      	ldr	r3, [pc, #76]	; (8003708 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80036bc:	4013      	ands	r3, r2
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	6811      	ldr	r1, [r2, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	6852      	ldr	r2, [r2, #4]
 80036c6:	0112      	lsls	r2, r2, #4
 80036c8:	4311      	orrs	r1, r2
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	6892      	ldr	r2, [r2, #8]
 80036ce:	0212      	lsls	r2, r2, #8
 80036d0:	4311      	orrs	r1, r2
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	6992      	ldr	r2, [r2, #24]
 80036d6:	4311      	orrs	r1, r2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	68d2      	ldr	r2, [r2, #12]
 80036dc:	0412      	lsls	r2, r2, #16
 80036de:	430a      	orrs	r2, r1
 80036e0:	ea43 0102 	orr.w	r1, r3, r2
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80036ec:	e005      	b.n	80036fa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80036f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	cff00000 	.word	0xcff00000

0800370c <__errno>:
 800370c:	4b01      	ldr	r3, [pc, #4]	; (8003714 <__errno+0x8>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000040 	.word	0x20000040

08003718 <__libc_init_array>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	2600      	movs	r6, #0
 800371c:	4d0c      	ldr	r5, [pc, #48]	; (8003750 <__libc_init_array+0x38>)
 800371e:	4c0d      	ldr	r4, [pc, #52]	; (8003754 <__libc_init_array+0x3c>)
 8003720:	1b64      	subs	r4, r4, r5
 8003722:	10a4      	asrs	r4, r4, #2
 8003724:	42a6      	cmp	r6, r4
 8003726:	d109      	bne.n	800373c <__libc_init_array+0x24>
 8003728:	f000 fc9c 	bl	8004064 <_init>
 800372c:	2600      	movs	r6, #0
 800372e:	4d0a      	ldr	r5, [pc, #40]	; (8003758 <__libc_init_array+0x40>)
 8003730:	4c0a      	ldr	r4, [pc, #40]	; (800375c <__libc_init_array+0x44>)
 8003732:	1b64      	subs	r4, r4, r5
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	42a6      	cmp	r6, r4
 8003738:	d105      	bne.n	8003746 <__libc_init_array+0x2e>
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003740:	4798      	blx	r3
 8003742:	3601      	adds	r6, #1
 8003744:	e7ee      	b.n	8003724 <__libc_init_array+0xc>
 8003746:	f855 3b04 	ldr.w	r3, [r5], #4
 800374a:	4798      	blx	r3
 800374c:	3601      	adds	r6, #1
 800374e:	e7f2      	b.n	8003736 <__libc_init_array+0x1e>
 8003750:	0800471c 	.word	0x0800471c
 8003754:	0800471c 	.word	0x0800471c
 8003758:	0800471c 	.word	0x0800471c
 800375c:	08004720 	.word	0x08004720

08003760 <memset>:
 8003760:	4603      	mov	r3, r0
 8003762:	4402      	add	r2, r0
 8003764:	4293      	cmp	r3, r2
 8003766:	d100      	bne.n	800376a <memset+0xa>
 8003768:	4770      	bx	lr
 800376a:	f803 1b01 	strb.w	r1, [r3], #1
 800376e:	e7f9      	b.n	8003764 <memset+0x4>

08003770 <siprintf>:
 8003770:	b40e      	push	{r1, r2, r3}
 8003772:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003776:	b500      	push	{lr}
 8003778:	b09c      	sub	sp, #112	; 0x70
 800377a:	ab1d      	add	r3, sp, #116	; 0x74
 800377c:	9002      	str	r0, [sp, #8]
 800377e:	9006      	str	r0, [sp, #24]
 8003780:	9107      	str	r1, [sp, #28]
 8003782:	9104      	str	r1, [sp, #16]
 8003784:	4808      	ldr	r0, [pc, #32]	; (80037a8 <siprintf+0x38>)
 8003786:	4909      	ldr	r1, [pc, #36]	; (80037ac <siprintf+0x3c>)
 8003788:	f853 2b04 	ldr.w	r2, [r3], #4
 800378c:	9105      	str	r1, [sp, #20]
 800378e:	6800      	ldr	r0, [r0, #0]
 8003790:	a902      	add	r1, sp, #8
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	f000 f868 	bl	8003868 <_svfiprintf_r>
 8003798:	2200      	movs	r2, #0
 800379a:	9b02      	ldr	r3, [sp, #8]
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	b01c      	add	sp, #112	; 0x70
 80037a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037a4:	b003      	add	sp, #12
 80037a6:	4770      	bx	lr
 80037a8:	20000040 	.word	0x20000040
 80037ac:	ffff0208 	.word	0xffff0208

080037b0 <__ssputs_r>:
 80037b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b4:	688e      	ldr	r6, [r1, #8]
 80037b6:	4682      	mov	sl, r0
 80037b8:	429e      	cmp	r6, r3
 80037ba:	460c      	mov	r4, r1
 80037bc:	4690      	mov	r8, r2
 80037be:	461f      	mov	r7, r3
 80037c0:	d838      	bhi.n	8003834 <__ssputs_r+0x84>
 80037c2:	898a      	ldrh	r2, [r1, #12]
 80037c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037c8:	d032      	beq.n	8003830 <__ssputs_r+0x80>
 80037ca:	6825      	ldr	r5, [r4, #0]
 80037cc:	6909      	ldr	r1, [r1, #16]
 80037ce:	3301      	adds	r3, #1
 80037d0:	eba5 0901 	sub.w	r9, r5, r1
 80037d4:	6965      	ldr	r5, [r4, #20]
 80037d6:	444b      	add	r3, r9
 80037d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037e0:	106d      	asrs	r5, r5, #1
 80037e2:	429d      	cmp	r5, r3
 80037e4:	bf38      	it	cc
 80037e6:	461d      	movcc	r5, r3
 80037e8:	0553      	lsls	r3, r2, #21
 80037ea:	d531      	bpl.n	8003850 <__ssputs_r+0xa0>
 80037ec:	4629      	mov	r1, r5
 80037ee:	f000 fb6f 	bl	8003ed0 <_malloc_r>
 80037f2:	4606      	mov	r6, r0
 80037f4:	b950      	cbnz	r0, 800380c <__ssputs_r+0x5c>
 80037f6:	230c      	movs	r3, #12
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	f8ca 3000 	str.w	r3, [sl]
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003806:	81a3      	strh	r3, [r4, #12]
 8003808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800380c:	464a      	mov	r2, r9
 800380e:	6921      	ldr	r1, [r4, #16]
 8003810:	f000 face 	bl	8003db0 <memcpy>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800381a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381e:	81a3      	strh	r3, [r4, #12]
 8003820:	6126      	str	r6, [r4, #16]
 8003822:	444e      	add	r6, r9
 8003824:	6026      	str	r6, [r4, #0]
 8003826:	463e      	mov	r6, r7
 8003828:	6165      	str	r5, [r4, #20]
 800382a:	eba5 0509 	sub.w	r5, r5, r9
 800382e:	60a5      	str	r5, [r4, #8]
 8003830:	42be      	cmp	r6, r7
 8003832:	d900      	bls.n	8003836 <__ssputs_r+0x86>
 8003834:	463e      	mov	r6, r7
 8003836:	4632      	mov	r2, r6
 8003838:	4641      	mov	r1, r8
 800383a:	6820      	ldr	r0, [r4, #0]
 800383c:	f000 fac6 	bl	8003dcc <memmove>
 8003840:	68a3      	ldr	r3, [r4, #8]
 8003842:	2000      	movs	r0, #0
 8003844:	1b9b      	subs	r3, r3, r6
 8003846:	60a3      	str	r3, [r4, #8]
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	4433      	add	r3, r6
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	e7db      	b.n	8003808 <__ssputs_r+0x58>
 8003850:	462a      	mov	r2, r5
 8003852:	f000 fbb1 	bl	8003fb8 <_realloc_r>
 8003856:	4606      	mov	r6, r0
 8003858:	2800      	cmp	r0, #0
 800385a:	d1e1      	bne.n	8003820 <__ssputs_r+0x70>
 800385c:	4650      	mov	r0, sl
 800385e:	6921      	ldr	r1, [r4, #16]
 8003860:	f000 face 	bl	8003e00 <_free_r>
 8003864:	e7c7      	b.n	80037f6 <__ssputs_r+0x46>
	...

08003868 <_svfiprintf_r>:
 8003868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386c:	4698      	mov	r8, r3
 800386e:	898b      	ldrh	r3, [r1, #12]
 8003870:	4607      	mov	r7, r0
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	460d      	mov	r5, r1
 8003876:	4614      	mov	r4, r2
 8003878:	b09d      	sub	sp, #116	; 0x74
 800387a:	d50e      	bpl.n	800389a <_svfiprintf_r+0x32>
 800387c:	690b      	ldr	r3, [r1, #16]
 800387e:	b963      	cbnz	r3, 800389a <_svfiprintf_r+0x32>
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	f000 fb25 	bl	8003ed0 <_malloc_r>
 8003886:	6028      	str	r0, [r5, #0]
 8003888:	6128      	str	r0, [r5, #16]
 800388a:	b920      	cbnz	r0, 8003896 <_svfiprintf_r+0x2e>
 800388c:	230c      	movs	r3, #12
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	e0d1      	b.n	8003a3a <_svfiprintf_r+0x1d2>
 8003896:	2340      	movs	r3, #64	; 0x40
 8003898:	616b      	str	r3, [r5, #20]
 800389a:	2300      	movs	r3, #0
 800389c:	9309      	str	r3, [sp, #36]	; 0x24
 800389e:	2320      	movs	r3, #32
 80038a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038a4:	2330      	movs	r3, #48	; 0x30
 80038a6:	f04f 0901 	mov.w	r9, #1
 80038aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80038ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a54 <_svfiprintf_r+0x1ec>
 80038b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038b6:	4623      	mov	r3, r4
 80038b8:	469a      	mov	sl, r3
 80038ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038be:	b10a      	cbz	r2, 80038c4 <_svfiprintf_r+0x5c>
 80038c0:	2a25      	cmp	r2, #37	; 0x25
 80038c2:	d1f9      	bne.n	80038b8 <_svfiprintf_r+0x50>
 80038c4:	ebba 0b04 	subs.w	fp, sl, r4
 80038c8:	d00b      	beq.n	80038e2 <_svfiprintf_r+0x7a>
 80038ca:	465b      	mov	r3, fp
 80038cc:	4622      	mov	r2, r4
 80038ce:	4629      	mov	r1, r5
 80038d0:	4638      	mov	r0, r7
 80038d2:	f7ff ff6d 	bl	80037b0 <__ssputs_r>
 80038d6:	3001      	adds	r0, #1
 80038d8:	f000 80aa 	beq.w	8003a30 <_svfiprintf_r+0x1c8>
 80038dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038de:	445a      	add	r2, fp
 80038e0:	9209      	str	r2, [sp, #36]	; 0x24
 80038e2:	f89a 3000 	ldrb.w	r3, [sl]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80a2 	beq.w	8003a30 <_svfiprintf_r+0x1c8>
 80038ec:	2300      	movs	r3, #0
 80038ee:	f04f 32ff 	mov.w	r2, #4294967295
 80038f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038f6:	f10a 0a01 	add.w	sl, sl, #1
 80038fa:	9304      	str	r3, [sp, #16]
 80038fc:	9307      	str	r3, [sp, #28]
 80038fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003902:	931a      	str	r3, [sp, #104]	; 0x68
 8003904:	4654      	mov	r4, sl
 8003906:	2205      	movs	r2, #5
 8003908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800390c:	4851      	ldr	r0, [pc, #324]	; (8003a54 <_svfiprintf_r+0x1ec>)
 800390e:	f000 fa41 	bl	8003d94 <memchr>
 8003912:	9a04      	ldr	r2, [sp, #16]
 8003914:	b9d8      	cbnz	r0, 800394e <_svfiprintf_r+0xe6>
 8003916:	06d0      	lsls	r0, r2, #27
 8003918:	bf44      	itt	mi
 800391a:	2320      	movmi	r3, #32
 800391c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003920:	0711      	lsls	r1, r2, #28
 8003922:	bf44      	itt	mi
 8003924:	232b      	movmi	r3, #43	; 0x2b
 8003926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800392a:	f89a 3000 	ldrb.w	r3, [sl]
 800392e:	2b2a      	cmp	r3, #42	; 0x2a
 8003930:	d015      	beq.n	800395e <_svfiprintf_r+0xf6>
 8003932:	4654      	mov	r4, sl
 8003934:	2000      	movs	r0, #0
 8003936:	f04f 0c0a 	mov.w	ip, #10
 800393a:	9a07      	ldr	r2, [sp, #28]
 800393c:	4621      	mov	r1, r4
 800393e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003942:	3b30      	subs	r3, #48	; 0x30
 8003944:	2b09      	cmp	r3, #9
 8003946:	d94e      	bls.n	80039e6 <_svfiprintf_r+0x17e>
 8003948:	b1b0      	cbz	r0, 8003978 <_svfiprintf_r+0x110>
 800394a:	9207      	str	r2, [sp, #28]
 800394c:	e014      	b.n	8003978 <_svfiprintf_r+0x110>
 800394e:	eba0 0308 	sub.w	r3, r0, r8
 8003952:	fa09 f303 	lsl.w	r3, r9, r3
 8003956:	4313      	orrs	r3, r2
 8003958:	46a2      	mov	sl, r4
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	e7d2      	b.n	8003904 <_svfiprintf_r+0x9c>
 800395e:	9b03      	ldr	r3, [sp, #12]
 8003960:	1d19      	adds	r1, r3, #4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	9103      	str	r1, [sp, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	bfbb      	ittet	lt
 800396a:	425b      	neglt	r3, r3
 800396c:	f042 0202 	orrlt.w	r2, r2, #2
 8003970:	9307      	strge	r3, [sp, #28]
 8003972:	9307      	strlt	r3, [sp, #28]
 8003974:	bfb8      	it	lt
 8003976:	9204      	strlt	r2, [sp, #16]
 8003978:	7823      	ldrb	r3, [r4, #0]
 800397a:	2b2e      	cmp	r3, #46	; 0x2e
 800397c:	d10c      	bne.n	8003998 <_svfiprintf_r+0x130>
 800397e:	7863      	ldrb	r3, [r4, #1]
 8003980:	2b2a      	cmp	r3, #42	; 0x2a
 8003982:	d135      	bne.n	80039f0 <_svfiprintf_r+0x188>
 8003984:	9b03      	ldr	r3, [sp, #12]
 8003986:	3402      	adds	r4, #2
 8003988:	1d1a      	adds	r2, r3, #4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	9203      	str	r2, [sp, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	bfb8      	it	lt
 8003992:	f04f 33ff 	movlt.w	r3, #4294967295
 8003996:	9305      	str	r3, [sp, #20]
 8003998:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003a58 <_svfiprintf_r+0x1f0>
 800399c:	2203      	movs	r2, #3
 800399e:	4650      	mov	r0, sl
 80039a0:	7821      	ldrb	r1, [r4, #0]
 80039a2:	f000 f9f7 	bl	8003d94 <memchr>
 80039a6:	b140      	cbz	r0, 80039ba <_svfiprintf_r+0x152>
 80039a8:	2340      	movs	r3, #64	; 0x40
 80039aa:	eba0 000a 	sub.w	r0, r0, sl
 80039ae:	fa03 f000 	lsl.w	r0, r3, r0
 80039b2:	9b04      	ldr	r3, [sp, #16]
 80039b4:	3401      	adds	r4, #1
 80039b6:	4303      	orrs	r3, r0
 80039b8:	9304      	str	r3, [sp, #16]
 80039ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039be:	2206      	movs	r2, #6
 80039c0:	4826      	ldr	r0, [pc, #152]	; (8003a5c <_svfiprintf_r+0x1f4>)
 80039c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039c6:	f000 f9e5 	bl	8003d94 <memchr>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d038      	beq.n	8003a40 <_svfiprintf_r+0x1d8>
 80039ce:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <_svfiprintf_r+0x1f8>)
 80039d0:	bb1b      	cbnz	r3, 8003a1a <_svfiprintf_r+0x1b2>
 80039d2:	9b03      	ldr	r3, [sp, #12]
 80039d4:	3307      	adds	r3, #7
 80039d6:	f023 0307 	bic.w	r3, r3, #7
 80039da:	3308      	adds	r3, #8
 80039dc:	9303      	str	r3, [sp, #12]
 80039de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039e0:	4433      	add	r3, r6
 80039e2:	9309      	str	r3, [sp, #36]	; 0x24
 80039e4:	e767      	b.n	80038b6 <_svfiprintf_r+0x4e>
 80039e6:	460c      	mov	r4, r1
 80039e8:	2001      	movs	r0, #1
 80039ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80039ee:	e7a5      	b.n	800393c <_svfiprintf_r+0xd4>
 80039f0:	2300      	movs	r3, #0
 80039f2:	f04f 0c0a 	mov.w	ip, #10
 80039f6:	4619      	mov	r1, r3
 80039f8:	3401      	adds	r4, #1
 80039fa:	9305      	str	r3, [sp, #20]
 80039fc:	4620      	mov	r0, r4
 80039fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a02:	3a30      	subs	r2, #48	; 0x30
 8003a04:	2a09      	cmp	r2, #9
 8003a06:	d903      	bls.n	8003a10 <_svfiprintf_r+0x1a8>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0c5      	beq.n	8003998 <_svfiprintf_r+0x130>
 8003a0c:	9105      	str	r1, [sp, #20]
 8003a0e:	e7c3      	b.n	8003998 <_svfiprintf_r+0x130>
 8003a10:	4604      	mov	r4, r0
 8003a12:	2301      	movs	r3, #1
 8003a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a18:	e7f0      	b.n	80039fc <_svfiprintf_r+0x194>
 8003a1a:	ab03      	add	r3, sp, #12
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	462a      	mov	r2, r5
 8003a20:	4638      	mov	r0, r7
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <_svfiprintf_r+0x1fc>)
 8003a24:	a904      	add	r1, sp, #16
 8003a26:	f3af 8000 	nop.w
 8003a2a:	1c42      	adds	r2, r0, #1
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	d1d6      	bne.n	80039de <_svfiprintf_r+0x176>
 8003a30:	89ab      	ldrh	r3, [r5, #12]
 8003a32:	065b      	lsls	r3, r3, #25
 8003a34:	f53f af2c 	bmi.w	8003890 <_svfiprintf_r+0x28>
 8003a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a3a:	b01d      	add	sp, #116	; 0x74
 8003a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a40:	ab03      	add	r3, sp, #12
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	462a      	mov	r2, r5
 8003a46:	4638      	mov	r0, r7
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <_svfiprintf_r+0x1fc>)
 8003a4a:	a904      	add	r1, sp, #16
 8003a4c:	f000 f87c 	bl	8003b48 <_printf_i>
 8003a50:	e7eb      	b.n	8003a2a <_svfiprintf_r+0x1c2>
 8003a52:	bf00      	nop
 8003a54:	080046e8 	.word	0x080046e8
 8003a58:	080046ee 	.word	0x080046ee
 8003a5c:	080046f2 	.word	0x080046f2
 8003a60:	00000000 	.word	0x00000000
 8003a64:	080037b1 	.word	0x080037b1

08003a68 <_printf_common>:
 8003a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6c:	4616      	mov	r6, r2
 8003a6e:	4699      	mov	r9, r3
 8003a70:	688a      	ldr	r2, [r1, #8]
 8003a72:	690b      	ldr	r3, [r1, #16]
 8003a74:	4607      	mov	r7, r0
 8003a76:	4293      	cmp	r3, r2
 8003a78:	bfb8      	it	lt
 8003a7a:	4613      	movlt	r3, r2
 8003a7c:	6033      	str	r3, [r6, #0]
 8003a7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a82:	460c      	mov	r4, r1
 8003a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a88:	b10a      	cbz	r2, 8003a8e <_printf_common+0x26>
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	6033      	str	r3, [r6, #0]
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	0699      	lsls	r1, r3, #26
 8003a92:	bf42      	ittt	mi
 8003a94:	6833      	ldrmi	r3, [r6, #0]
 8003a96:	3302      	addmi	r3, #2
 8003a98:	6033      	strmi	r3, [r6, #0]
 8003a9a:	6825      	ldr	r5, [r4, #0]
 8003a9c:	f015 0506 	ands.w	r5, r5, #6
 8003aa0:	d106      	bne.n	8003ab0 <_printf_common+0x48>
 8003aa2:	f104 0a19 	add.w	sl, r4, #25
 8003aa6:	68e3      	ldr	r3, [r4, #12]
 8003aa8:	6832      	ldr	r2, [r6, #0]
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	42ab      	cmp	r3, r5
 8003aae:	dc28      	bgt.n	8003b02 <_printf_common+0x9a>
 8003ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ab4:	1e13      	subs	r3, r2, #0
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	bf18      	it	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	0692      	lsls	r2, r2, #26
 8003abe:	d42d      	bmi.n	8003b1c <_printf_common+0xb4>
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ac8:	47c0      	blx	r8
 8003aca:	3001      	adds	r0, #1
 8003acc:	d020      	beq.n	8003b10 <_printf_common+0xa8>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	68e5      	ldr	r5, [r4, #12]
 8003ad2:	f003 0306 	and.w	r3, r3, #6
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	bf18      	it	ne
 8003ada:	2500      	movne	r5, #0
 8003adc:	6832      	ldr	r2, [r6, #0]
 8003ade:	f04f 0600 	mov.w	r6, #0
 8003ae2:	68a3      	ldr	r3, [r4, #8]
 8003ae4:	bf08      	it	eq
 8003ae6:	1aad      	subeq	r5, r5, r2
 8003ae8:	6922      	ldr	r2, [r4, #16]
 8003aea:	bf08      	it	eq
 8003aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bfc4      	itt	gt
 8003af4:	1a9b      	subgt	r3, r3, r2
 8003af6:	18ed      	addgt	r5, r5, r3
 8003af8:	341a      	adds	r4, #26
 8003afa:	42b5      	cmp	r5, r6
 8003afc:	d11a      	bne.n	8003b34 <_printf_common+0xcc>
 8003afe:	2000      	movs	r0, #0
 8003b00:	e008      	b.n	8003b14 <_printf_common+0xac>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4652      	mov	r2, sl
 8003b06:	4649      	mov	r1, r9
 8003b08:	4638      	mov	r0, r7
 8003b0a:	47c0      	blx	r8
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d103      	bne.n	8003b18 <_printf_common+0xb0>
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	3501      	adds	r5, #1
 8003b1a:	e7c4      	b.n	8003aa6 <_printf_common+0x3e>
 8003b1c:	2030      	movs	r0, #48	; 0x30
 8003b1e:	18e1      	adds	r1, r4, r3
 8003b20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b2a:	4422      	add	r2, r4
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b32:	e7c5      	b.n	8003ac0 <_printf_common+0x58>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4622      	mov	r2, r4
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	47c0      	blx	r8
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d0e6      	beq.n	8003b10 <_printf_common+0xa8>
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7d9      	b.n	8003afa <_printf_common+0x92>
	...

08003b48 <_printf_i>:
 8003b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	7e0f      	ldrb	r7, [r1, #24]
 8003b4e:	4691      	mov	r9, r2
 8003b50:	2f78      	cmp	r7, #120	; 0x78
 8003b52:	4680      	mov	r8, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	469a      	mov	sl, r3
 8003b58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b5e:	d807      	bhi.n	8003b70 <_printf_i+0x28>
 8003b60:	2f62      	cmp	r7, #98	; 0x62
 8003b62:	d80a      	bhi.n	8003b7a <_printf_i+0x32>
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	f000 80d9 	beq.w	8003d1c <_printf_i+0x1d4>
 8003b6a:	2f58      	cmp	r7, #88	; 0x58
 8003b6c:	f000 80a4 	beq.w	8003cb8 <_printf_i+0x170>
 8003b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b78:	e03a      	b.n	8003bf0 <_printf_i+0xa8>
 8003b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b7e:	2b15      	cmp	r3, #21
 8003b80:	d8f6      	bhi.n	8003b70 <_printf_i+0x28>
 8003b82:	a101      	add	r1, pc, #4	; (adr r1, 8003b88 <_printf_i+0x40>)
 8003b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003b71 	.word	0x08003b71
 8003b94:	08003b71 	.word	0x08003b71
 8003b98:	08003b71 	.word	0x08003b71
 8003b9c:	08003b71 	.word	0x08003b71
 8003ba0:	08003bf5 	.word	0x08003bf5
 8003ba4:	08003b71 	.word	0x08003b71
 8003ba8:	08003b71 	.word	0x08003b71
 8003bac:	08003b71 	.word	0x08003b71
 8003bb0:	08003b71 	.word	0x08003b71
 8003bb4:	08003d03 	.word	0x08003d03
 8003bb8:	08003c25 	.word	0x08003c25
 8003bbc:	08003ce5 	.word	0x08003ce5
 8003bc0:	08003b71 	.word	0x08003b71
 8003bc4:	08003b71 	.word	0x08003b71
 8003bc8:	08003d25 	.word	0x08003d25
 8003bcc:	08003b71 	.word	0x08003b71
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003b71 	.word	0x08003b71
 8003bd8:	08003b71 	.word	0x08003b71
 8003bdc:	08003ced 	.word	0x08003ced
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	602a      	str	r2, [r5, #0]
 8003be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0a4      	b.n	8003d3e <_printf_i+0x1f6>
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	6829      	ldr	r1, [r5, #0]
 8003bf8:	0606      	lsls	r6, r0, #24
 8003bfa:	f101 0304 	add.w	r3, r1, #4
 8003bfe:	d50a      	bpl.n	8003c16 <_printf_i+0xce>
 8003c00:	680e      	ldr	r6, [r1, #0]
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	2e00      	cmp	r6, #0
 8003c06:	da03      	bge.n	8003c10 <_printf_i+0xc8>
 8003c08:	232d      	movs	r3, #45	; 0x2d
 8003c0a:	4276      	negs	r6, r6
 8003c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c10:	230a      	movs	r3, #10
 8003c12:	485e      	ldr	r0, [pc, #376]	; (8003d8c <_printf_i+0x244>)
 8003c14:	e019      	b.n	8003c4a <_printf_i+0x102>
 8003c16:	680e      	ldr	r6, [r1, #0]
 8003c18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c1c:	602b      	str	r3, [r5, #0]
 8003c1e:	bf18      	it	ne
 8003c20:	b236      	sxthne	r6, r6
 8003c22:	e7ef      	b.n	8003c04 <_printf_i+0xbc>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	6820      	ldr	r0, [r4, #0]
 8003c28:	1d19      	adds	r1, r3, #4
 8003c2a:	6029      	str	r1, [r5, #0]
 8003c2c:	0601      	lsls	r1, r0, #24
 8003c2e:	d501      	bpl.n	8003c34 <_printf_i+0xec>
 8003c30:	681e      	ldr	r6, [r3, #0]
 8003c32:	e002      	b.n	8003c3a <_printf_i+0xf2>
 8003c34:	0646      	lsls	r6, r0, #25
 8003c36:	d5fb      	bpl.n	8003c30 <_printf_i+0xe8>
 8003c38:	881e      	ldrh	r6, [r3, #0]
 8003c3a:	2f6f      	cmp	r7, #111	; 0x6f
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2308      	moveq	r3, #8
 8003c40:	230a      	movne	r3, #10
 8003c42:	4852      	ldr	r0, [pc, #328]	; (8003d8c <_printf_i+0x244>)
 8003c44:	2100      	movs	r1, #0
 8003c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c4a:	6865      	ldr	r5, [r4, #4]
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	bfa8      	it	ge
 8003c50:	6821      	ldrge	r1, [r4, #0]
 8003c52:	60a5      	str	r5, [r4, #8]
 8003c54:	bfa4      	itt	ge
 8003c56:	f021 0104 	bicge.w	r1, r1, #4
 8003c5a:	6021      	strge	r1, [r4, #0]
 8003c5c:	b90e      	cbnz	r6, 8003c62 <_printf_i+0x11a>
 8003c5e:	2d00      	cmp	r5, #0
 8003c60:	d04d      	beq.n	8003cfe <_printf_i+0x1b6>
 8003c62:	4615      	mov	r5, r2
 8003c64:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c68:	fb03 6711 	mls	r7, r3, r1, r6
 8003c6c:	5dc7      	ldrb	r7, [r0, r7]
 8003c6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c72:	4637      	mov	r7, r6
 8003c74:	42bb      	cmp	r3, r7
 8003c76:	460e      	mov	r6, r1
 8003c78:	d9f4      	bls.n	8003c64 <_printf_i+0x11c>
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d10b      	bne.n	8003c96 <_printf_i+0x14e>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	07de      	lsls	r6, r3, #31
 8003c82:	d508      	bpl.n	8003c96 <_printf_i+0x14e>
 8003c84:	6923      	ldr	r3, [r4, #16]
 8003c86:	6861      	ldr	r1, [r4, #4]
 8003c88:	4299      	cmp	r1, r3
 8003c8a:	bfde      	ittt	le
 8003c8c:	2330      	movle	r3, #48	; 0x30
 8003c8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c96:	1b52      	subs	r2, r2, r5
 8003c98:	6122      	str	r2, [r4, #16]
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f8cd a000 	str.w	sl, [sp]
 8003ca4:	aa03      	add	r2, sp, #12
 8003ca6:	f7ff fedf 	bl	8003a68 <_printf_common>
 8003caa:	3001      	adds	r0, #1
 8003cac:	d14c      	bne.n	8003d48 <_printf_i+0x200>
 8003cae:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb2:	b004      	add	sp, #16
 8003cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb8:	4834      	ldr	r0, [pc, #208]	; (8003d8c <_printf_i+0x244>)
 8003cba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003cbe:	6829      	ldr	r1, [r5, #0]
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cc6:	6029      	str	r1, [r5, #0]
 8003cc8:	061d      	lsls	r5, r3, #24
 8003cca:	d514      	bpl.n	8003cf6 <_printf_i+0x1ae>
 8003ccc:	07df      	lsls	r7, r3, #31
 8003cce:	bf44      	itt	mi
 8003cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cd4:	6023      	strmi	r3, [r4, #0]
 8003cd6:	b91e      	cbnz	r6, 8003ce0 <_printf_i+0x198>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	f023 0320 	bic.w	r3, r3, #32
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	e7af      	b.n	8003c44 <_printf_i+0xfc>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f043 0320 	orr.w	r3, r3, #32
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	2378      	movs	r3, #120	; 0x78
 8003cee:	4828      	ldr	r0, [pc, #160]	; (8003d90 <_printf_i+0x248>)
 8003cf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cf4:	e7e3      	b.n	8003cbe <_printf_i+0x176>
 8003cf6:	0659      	lsls	r1, r3, #25
 8003cf8:	bf48      	it	mi
 8003cfa:	b2b6      	uxthmi	r6, r6
 8003cfc:	e7e6      	b.n	8003ccc <_printf_i+0x184>
 8003cfe:	4615      	mov	r5, r2
 8003d00:	e7bb      	b.n	8003c7a <_printf_i+0x132>
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	6826      	ldr	r6, [r4, #0]
 8003d06:	1d18      	adds	r0, r3, #4
 8003d08:	6961      	ldr	r1, [r4, #20]
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	0635      	lsls	r5, r6, #24
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	d501      	bpl.n	8003d16 <_printf_i+0x1ce>
 8003d12:	6019      	str	r1, [r3, #0]
 8003d14:	e002      	b.n	8003d1c <_printf_i+0x1d4>
 8003d16:	0670      	lsls	r0, r6, #25
 8003d18:	d5fb      	bpl.n	8003d12 <_printf_i+0x1ca>
 8003d1a:	8019      	strh	r1, [r3, #0]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	4615      	mov	r5, r2
 8003d20:	6123      	str	r3, [r4, #16]
 8003d22:	e7ba      	b.n	8003c9a <_printf_i+0x152>
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	2100      	movs	r1, #0
 8003d28:	1d1a      	adds	r2, r3, #4
 8003d2a:	602a      	str	r2, [r5, #0]
 8003d2c:	681d      	ldr	r5, [r3, #0]
 8003d2e:	6862      	ldr	r2, [r4, #4]
 8003d30:	4628      	mov	r0, r5
 8003d32:	f000 f82f 	bl	8003d94 <memchr>
 8003d36:	b108      	cbz	r0, 8003d3c <_printf_i+0x1f4>
 8003d38:	1b40      	subs	r0, r0, r5
 8003d3a:	6060      	str	r0, [r4, #4]
 8003d3c:	6863      	ldr	r3, [r4, #4]
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	2300      	movs	r3, #0
 8003d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d46:	e7a8      	b.n	8003c9a <_printf_i+0x152>
 8003d48:	462a      	mov	r2, r5
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	4640      	mov	r0, r8
 8003d4e:	6923      	ldr	r3, [r4, #16]
 8003d50:	47d0      	blx	sl
 8003d52:	3001      	adds	r0, #1
 8003d54:	d0ab      	beq.n	8003cae <_printf_i+0x166>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	079b      	lsls	r3, r3, #30
 8003d5a:	d413      	bmi.n	8003d84 <_printf_i+0x23c>
 8003d5c:	68e0      	ldr	r0, [r4, #12]
 8003d5e:	9b03      	ldr	r3, [sp, #12]
 8003d60:	4298      	cmp	r0, r3
 8003d62:	bfb8      	it	lt
 8003d64:	4618      	movlt	r0, r3
 8003d66:	e7a4      	b.n	8003cb2 <_printf_i+0x16a>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4632      	mov	r2, r6
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	4640      	mov	r0, r8
 8003d70:	47d0      	blx	sl
 8003d72:	3001      	adds	r0, #1
 8003d74:	d09b      	beq.n	8003cae <_printf_i+0x166>
 8003d76:	3501      	adds	r5, #1
 8003d78:	68e3      	ldr	r3, [r4, #12]
 8003d7a:	9903      	ldr	r1, [sp, #12]
 8003d7c:	1a5b      	subs	r3, r3, r1
 8003d7e:	42ab      	cmp	r3, r5
 8003d80:	dcf2      	bgt.n	8003d68 <_printf_i+0x220>
 8003d82:	e7eb      	b.n	8003d5c <_printf_i+0x214>
 8003d84:	2500      	movs	r5, #0
 8003d86:	f104 0619 	add.w	r6, r4, #25
 8003d8a:	e7f5      	b.n	8003d78 <_printf_i+0x230>
 8003d8c:	080046f9 	.word	0x080046f9
 8003d90:	0800470a 	.word	0x0800470a

08003d94 <memchr>:
 8003d94:	4603      	mov	r3, r0
 8003d96:	b510      	push	{r4, lr}
 8003d98:	b2c9      	uxtb	r1, r1
 8003d9a:	4402      	add	r2, r0
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	d101      	bne.n	8003da6 <memchr+0x12>
 8003da2:	2000      	movs	r0, #0
 8003da4:	e003      	b.n	8003dae <memchr+0x1a>
 8003da6:	7804      	ldrb	r4, [r0, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	428c      	cmp	r4, r1
 8003dac:	d1f6      	bne.n	8003d9c <memchr+0x8>
 8003dae:	bd10      	pop	{r4, pc}

08003db0 <memcpy>:
 8003db0:	440a      	add	r2, r1
 8003db2:	4291      	cmp	r1, r2
 8003db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003db8:	d100      	bne.n	8003dbc <memcpy+0xc>
 8003dba:	4770      	bx	lr
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dc2:	4291      	cmp	r1, r2
 8003dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dc8:	d1f9      	bne.n	8003dbe <memcpy+0xe>
 8003dca:	bd10      	pop	{r4, pc}

08003dcc <memmove>:
 8003dcc:	4288      	cmp	r0, r1
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	eb01 0402 	add.w	r4, r1, r2
 8003dd4:	d902      	bls.n	8003ddc <memmove+0x10>
 8003dd6:	4284      	cmp	r4, r0
 8003dd8:	4623      	mov	r3, r4
 8003dda:	d807      	bhi.n	8003dec <memmove+0x20>
 8003ddc:	1e43      	subs	r3, r0, #1
 8003dde:	42a1      	cmp	r1, r4
 8003de0:	d008      	beq.n	8003df4 <memmove+0x28>
 8003de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dea:	e7f8      	b.n	8003dde <memmove+0x12>
 8003dec:	4601      	mov	r1, r0
 8003dee:	4402      	add	r2, r0
 8003df0:	428a      	cmp	r2, r1
 8003df2:	d100      	bne.n	8003df6 <memmove+0x2a>
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dfe:	e7f7      	b.n	8003df0 <memmove+0x24>

08003e00 <_free_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4605      	mov	r5, r0
 8003e04:	2900      	cmp	r1, #0
 8003e06:	d040      	beq.n	8003e8a <_free_r+0x8a>
 8003e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e0c:	1f0c      	subs	r4, r1, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bfb8      	it	lt
 8003e12:	18e4      	addlt	r4, r4, r3
 8003e14:	f000 f910 	bl	8004038 <__malloc_lock>
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <_free_r+0x8c>)
 8003e1a:	6813      	ldr	r3, [r2, #0]
 8003e1c:	b933      	cbnz	r3, 8003e2c <_free_r+0x2c>
 8003e1e:	6063      	str	r3, [r4, #4]
 8003e20:	6014      	str	r4, [r2, #0]
 8003e22:	4628      	mov	r0, r5
 8003e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e28:	f000 b90c 	b.w	8004044 <__malloc_unlock>
 8003e2c:	42a3      	cmp	r3, r4
 8003e2e:	d908      	bls.n	8003e42 <_free_r+0x42>
 8003e30:	6820      	ldr	r0, [r4, #0]
 8003e32:	1821      	adds	r1, r4, r0
 8003e34:	428b      	cmp	r3, r1
 8003e36:	bf01      	itttt	eq
 8003e38:	6819      	ldreq	r1, [r3, #0]
 8003e3a:	685b      	ldreq	r3, [r3, #4]
 8003e3c:	1809      	addeq	r1, r1, r0
 8003e3e:	6021      	streq	r1, [r4, #0]
 8003e40:	e7ed      	b.n	8003e1e <_free_r+0x1e>
 8003e42:	461a      	mov	r2, r3
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	b10b      	cbz	r3, 8003e4c <_free_r+0x4c>
 8003e48:	42a3      	cmp	r3, r4
 8003e4a:	d9fa      	bls.n	8003e42 <_free_r+0x42>
 8003e4c:	6811      	ldr	r1, [r2, #0]
 8003e4e:	1850      	adds	r0, r2, r1
 8003e50:	42a0      	cmp	r0, r4
 8003e52:	d10b      	bne.n	8003e6c <_free_r+0x6c>
 8003e54:	6820      	ldr	r0, [r4, #0]
 8003e56:	4401      	add	r1, r0
 8003e58:	1850      	adds	r0, r2, r1
 8003e5a:	4283      	cmp	r3, r0
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	d1e0      	bne.n	8003e22 <_free_r+0x22>
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4401      	add	r1, r0
 8003e66:	6011      	str	r1, [r2, #0]
 8003e68:	6053      	str	r3, [r2, #4]
 8003e6a:	e7da      	b.n	8003e22 <_free_r+0x22>
 8003e6c:	d902      	bls.n	8003e74 <_free_r+0x74>
 8003e6e:	230c      	movs	r3, #12
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	e7d6      	b.n	8003e22 <_free_r+0x22>
 8003e74:	6820      	ldr	r0, [r4, #0]
 8003e76:	1821      	adds	r1, r4, r0
 8003e78:	428b      	cmp	r3, r1
 8003e7a:	bf01      	itttt	eq
 8003e7c:	6819      	ldreq	r1, [r3, #0]
 8003e7e:	685b      	ldreq	r3, [r3, #4]
 8003e80:	1809      	addeq	r1, r1, r0
 8003e82:	6021      	streq	r1, [r4, #0]
 8003e84:	6063      	str	r3, [r4, #4]
 8003e86:	6054      	str	r4, [r2, #4]
 8003e88:	e7cb      	b.n	8003e22 <_free_r+0x22>
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	20000114 	.word	0x20000114

08003e90 <sbrk_aligned>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	4e0e      	ldr	r6, [pc, #56]	; (8003ecc <sbrk_aligned+0x3c>)
 8003e94:	460c      	mov	r4, r1
 8003e96:	6831      	ldr	r1, [r6, #0]
 8003e98:	4605      	mov	r5, r0
 8003e9a:	b911      	cbnz	r1, 8003ea2 <sbrk_aligned+0x12>
 8003e9c:	f000 f8bc 	bl	8004018 <_sbrk_r>
 8003ea0:	6030      	str	r0, [r6, #0]
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f000 f8b7 	bl	8004018 <_sbrk_r>
 8003eaa:	1c43      	adds	r3, r0, #1
 8003eac:	d00a      	beq.n	8003ec4 <sbrk_aligned+0x34>
 8003eae:	1cc4      	adds	r4, r0, #3
 8003eb0:	f024 0403 	bic.w	r4, r4, #3
 8003eb4:	42a0      	cmp	r0, r4
 8003eb6:	d007      	beq.n	8003ec8 <sbrk_aligned+0x38>
 8003eb8:	1a21      	subs	r1, r4, r0
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f000 f8ac 	bl	8004018 <_sbrk_r>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d101      	bne.n	8003ec8 <sbrk_aligned+0x38>
 8003ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8003ec8:	4620      	mov	r0, r4
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	20000118 	.word	0x20000118

08003ed0 <_malloc_r>:
 8003ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed4:	1ccd      	adds	r5, r1, #3
 8003ed6:	f025 0503 	bic.w	r5, r5, #3
 8003eda:	3508      	adds	r5, #8
 8003edc:	2d0c      	cmp	r5, #12
 8003ede:	bf38      	it	cc
 8003ee0:	250c      	movcc	r5, #12
 8003ee2:	2d00      	cmp	r5, #0
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	db01      	blt.n	8003eec <_malloc_r+0x1c>
 8003ee8:	42a9      	cmp	r1, r5
 8003eea:	d905      	bls.n	8003ef8 <_malloc_r+0x28>
 8003eec:	230c      	movs	r3, #12
 8003eee:	2600      	movs	r6, #0
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef8:	4e2e      	ldr	r6, [pc, #184]	; (8003fb4 <_malloc_r+0xe4>)
 8003efa:	f000 f89d 	bl	8004038 <__malloc_lock>
 8003efe:	6833      	ldr	r3, [r6, #0]
 8003f00:	461c      	mov	r4, r3
 8003f02:	bb34      	cbnz	r4, 8003f52 <_malloc_r+0x82>
 8003f04:	4629      	mov	r1, r5
 8003f06:	4638      	mov	r0, r7
 8003f08:	f7ff ffc2 	bl	8003e90 <sbrk_aligned>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	4604      	mov	r4, r0
 8003f10:	d14d      	bne.n	8003fae <_malloc_r+0xde>
 8003f12:	6834      	ldr	r4, [r6, #0]
 8003f14:	4626      	mov	r6, r4
 8003f16:	2e00      	cmp	r6, #0
 8003f18:	d140      	bne.n	8003f9c <_malloc_r+0xcc>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	4638      	mov	r0, r7
 8003f20:	eb04 0803 	add.w	r8, r4, r3
 8003f24:	f000 f878 	bl	8004018 <_sbrk_r>
 8003f28:	4580      	cmp	r8, r0
 8003f2a:	d13a      	bne.n	8003fa2 <_malloc_r+0xd2>
 8003f2c:	6821      	ldr	r1, [r4, #0]
 8003f2e:	3503      	adds	r5, #3
 8003f30:	1a6d      	subs	r5, r5, r1
 8003f32:	f025 0503 	bic.w	r5, r5, #3
 8003f36:	3508      	adds	r5, #8
 8003f38:	2d0c      	cmp	r5, #12
 8003f3a:	bf38      	it	cc
 8003f3c:	250c      	movcc	r5, #12
 8003f3e:	4638      	mov	r0, r7
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7ff ffa5 	bl	8003e90 <sbrk_aligned>
 8003f46:	3001      	adds	r0, #1
 8003f48:	d02b      	beq.n	8003fa2 <_malloc_r+0xd2>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	442b      	add	r3, r5
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	e00e      	b.n	8003f70 <_malloc_r+0xa0>
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	1b52      	subs	r2, r2, r5
 8003f56:	d41e      	bmi.n	8003f96 <_malloc_r+0xc6>
 8003f58:	2a0b      	cmp	r2, #11
 8003f5a:	d916      	bls.n	8003f8a <_malloc_r+0xba>
 8003f5c:	1961      	adds	r1, r4, r5
 8003f5e:	42a3      	cmp	r3, r4
 8003f60:	6025      	str	r5, [r4, #0]
 8003f62:	bf18      	it	ne
 8003f64:	6059      	strne	r1, [r3, #4]
 8003f66:	6863      	ldr	r3, [r4, #4]
 8003f68:	bf08      	it	eq
 8003f6a:	6031      	streq	r1, [r6, #0]
 8003f6c:	5162      	str	r2, [r4, r5]
 8003f6e:	604b      	str	r3, [r1, #4]
 8003f70:	4638      	mov	r0, r7
 8003f72:	f104 060b 	add.w	r6, r4, #11
 8003f76:	f000 f865 	bl	8004044 <__malloc_unlock>
 8003f7a:	f026 0607 	bic.w	r6, r6, #7
 8003f7e:	1d23      	adds	r3, r4, #4
 8003f80:	1af2      	subs	r2, r6, r3
 8003f82:	d0b6      	beq.n	8003ef2 <_malloc_r+0x22>
 8003f84:	1b9b      	subs	r3, r3, r6
 8003f86:	50a3      	str	r3, [r4, r2]
 8003f88:	e7b3      	b.n	8003ef2 <_malloc_r+0x22>
 8003f8a:	6862      	ldr	r2, [r4, #4]
 8003f8c:	42a3      	cmp	r3, r4
 8003f8e:	bf0c      	ite	eq
 8003f90:	6032      	streq	r2, [r6, #0]
 8003f92:	605a      	strne	r2, [r3, #4]
 8003f94:	e7ec      	b.n	8003f70 <_malloc_r+0xa0>
 8003f96:	4623      	mov	r3, r4
 8003f98:	6864      	ldr	r4, [r4, #4]
 8003f9a:	e7b2      	b.n	8003f02 <_malloc_r+0x32>
 8003f9c:	4634      	mov	r4, r6
 8003f9e:	6876      	ldr	r6, [r6, #4]
 8003fa0:	e7b9      	b.n	8003f16 <_malloc_r+0x46>
 8003fa2:	230c      	movs	r3, #12
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	f000 f84c 	bl	8004044 <__malloc_unlock>
 8003fac:	e7a1      	b.n	8003ef2 <_malloc_r+0x22>
 8003fae:	6025      	str	r5, [r4, #0]
 8003fb0:	e7de      	b.n	8003f70 <_malloc_r+0xa0>
 8003fb2:	bf00      	nop
 8003fb4:	20000114 	.word	0x20000114

08003fb8 <_realloc_r>:
 8003fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbc:	4680      	mov	r8, r0
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	460e      	mov	r6, r1
 8003fc2:	b921      	cbnz	r1, 8003fce <_realloc_r+0x16>
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fca:	f7ff bf81 	b.w	8003ed0 <_malloc_r>
 8003fce:	b92a      	cbnz	r2, 8003fdc <_realloc_r+0x24>
 8003fd0:	f7ff ff16 	bl	8003e00 <_free_r>
 8003fd4:	4625      	mov	r5, r4
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fdc:	f000 f838 	bl	8004050 <_malloc_usable_size_r>
 8003fe0:	4284      	cmp	r4, r0
 8003fe2:	4607      	mov	r7, r0
 8003fe4:	d802      	bhi.n	8003fec <_realloc_r+0x34>
 8003fe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fea:	d812      	bhi.n	8004012 <_realloc_r+0x5a>
 8003fec:	4621      	mov	r1, r4
 8003fee:	4640      	mov	r0, r8
 8003ff0:	f7ff ff6e 	bl	8003ed0 <_malloc_r>
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d0ed      	beq.n	8003fd6 <_realloc_r+0x1e>
 8003ffa:	42bc      	cmp	r4, r7
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	4631      	mov	r1, r6
 8004000:	bf28      	it	cs
 8004002:	463a      	movcs	r2, r7
 8004004:	f7ff fed4 	bl	8003db0 <memcpy>
 8004008:	4631      	mov	r1, r6
 800400a:	4640      	mov	r0, r8
 800400c:	f7ff fef8 	bl	8003e00 <_free_r>
 8004010:	e7e1      	b.n	8003fd6 <_realloc_r+0x1e>
 8004012:	4635      	mov	r5, r6
 8004014:	e7df      	b.n	8003fd6 <_realloc_r+0x1e>
	...

08004018 <_sbrk_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	2300      	movs	r3, #0
 800401c:	4d05      	ldr	r5, [pc, #20]	; (8004034 <_sbrk_r+0x1c>)
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	f7fd fbf0 	bl	8001808 <_sbrk>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_sbrk_r+0x1a>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_sbrk_r+0x1a>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	2000011c 	.word	0x2000011c

08004038 <__malloc_lock>:
 8004038:	4801      	ldr	r0, [pc, #4]	; (8004040 <__malloc_lock+0x8>)
 800403a:	f000 b811 	b.w	8004060 <__retarget_lock_acquire_recursive>
 800403e:	bf00      	nop
 8004040:	20000120 	.word	0x20000120

08004044 <__malloc_unlock>:
 8004044:	4801      	ldr	r0, [pc, #4]	; (800404c <__malloc_unlock+0x8>)
 8004046:	f000 b80c 	b.w	8004062 <__retarget_lock_release_recursive>
 800404a:	bf00      	nop
 800404c:	20000120 	.word	0x20000120

08004050 <_malloc_usable_size_r>:
 8004050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004054:	1f18      	subs	r0, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	bfbc      	itt	lt
 800405a:	580b      	ldrlt	r3, [r1, r0]
 800405c:	18c0      	addlt	r0, r0, r3
 800405e:	4770      	bx	lr

08004060 <__retarget_lock_acquire_recursive>:
 8004060:	4770      	bx	lr

08004062 <__retarget_lock_release_recursive>:
 8004062:	4770      	bx	lr

08004064 <_init>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr

08004070 <_fini>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr
