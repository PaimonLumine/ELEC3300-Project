
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cfc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00024228  08010ee8  08010ee8  00020ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035110  08035110  000509fc  2**0
                  CONTENTS
  4 .ARM          00000008  08035110  08035110  00045110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035118  08035118  000509fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08035118  08035118  00045118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08035120  08035120  00045120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009fc  20000000  08035124  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200009fc  08035b20  000509fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  08035b20  00050c00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000509fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122fd  00000000  00000000  00050a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a3  00000000  00000000  00062d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  000665c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  000678d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b206  00000000  00000000  000689c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001502f  00000000  00000000  00083bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084df1  00000000  00000000  00098bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d9ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000694c  00000000  00000000  0011da40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200009fc 	.word	0x200009fc
 8000204:	00000000 	.word	0x00000000
 8000208:	08010ecc 	.word	0x08010ecc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000a00 	.word	0x20000a00
 8000224:	08010ecc 	.word	0x08010ecc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b9ae 	b.w	8000fb4 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f83e 	bl	8000ce0 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_d2lz>:
 8000c70:	b538      	push	{r3, r4, r5, lr}
 8000c72:	4605      	mov	r5, r0
 8000c74:	460c      	mov	r4, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4628      	mov	r0, r5
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	f7ff ff09 	bl	8000a94 <__aeabi_dcmplt>
 8000c82:	b928      	cbnz	r0, 8000c90 <__aeabi_d2lz+0x20>
 8000c84:	4628      	mov	r0, r5
 8000c86:	4621      	mov	r1, r4
 8000c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c8c:	f000 b80a 	b.w	8000ca4 <__aeabi_d2ulz>
 8000c90:	4628      	mov	r0, r5
 8000c92:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c96:	f000 f805 	bl	8000ca4 <__aeabi_d2ulz>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_d2ulz>:
 8000ca4:	b5d0      	push	{r4, r6, r7, lr}
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <__aeabi_d2ulz+0x34>)
 8000caa:	4606      	mov	r6, r0
 8000cac:	460f      	mov	r7, r1
 8000cae:	f7ff fc7f 	bl	80005b0 <__aeabi_dmul>
 8000cb2:	f7ff ff55 	bl	8000b60 <__aeabi_d2uiz>
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	f7ff fc00 	bl	80004bc <__aeabi_ui2d>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <__aeabi_d2ulz+0x38>)
 8000cc0:	f7ff fc76 	bl	80005b0 <__aeabi_dmul>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4630      	mov	r0, r6
 8000cca:	4639      	mov	r1, r7
 8000ccc:	f7ff fab8 	bl	8000240 <__aeabi_dsub>
 8000cd0:	f7ff ff46 	bl	8000b60 <__aeabi_d2uiz>
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd8:	3df00000 	.word	0x3df00000
 8000cdc:	41f00000 	.word	0x41f00000

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	9e08      	ldr	r6, [sp, #32]
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	4688      	mov	r8, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14d      	bne.n	8000d8c <__udivmoddi4+0xac>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4694      	mov	ip, r2
 8000cf4:	d968      	bls.n	8000dc8 <__udivmoddi4+0xe8>
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	b152      	cbz	r2, 8000d12 <__udivmoddi4+0x32>
 8000cfc:	fa01 f302 	lsl.w	r3, r1, r2
 8000d00:	f1c2 0120 	rsb	r1, r2, #32
 8000d04:	fa20 f101 	lsr.w	r1, r0, r1
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	ea41 0803 	orr.w	r8, r1, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d16:	fbb8 f7f1 	udiv	r7, r8, r1
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	fb01 8817 	mls	r8, r1, r7, r8
 8000d22:	fb07 f00e 	mul.w	r0, r7, lr
 8000d26:	0c23      	lsrs	r3, r4, #16
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x66>
 8000d30:	eb1c 0303 	adds.w	r3, ip, r3
 8000d34:	f107 35ff 	add.w	r5, r7, #4294967295
 8000d38:	f080 811e 	bcs.w	8000f78 <__udivmoddi4+0x298>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f240 811b 	bls.w	8000f78 <__udivmoddi4+0x298>
 8000d42:	3f02      	subs	r7, #2
 8000d44:	4463      	add	r3, ip
 8000d46:	1a1b      	subs	r3, r3, r0
 8000d48:	fbb3 f0f1 	udiv	r0, r3, r1
 8000d4c:	fb01 3310 	mls	r3, r1, r0, r3
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	b2a4      	uxth	r4, r4
 8000d56:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	d90a      	bls.n	8000d74 <__udivmoddi4+0x94>
 8000d5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8109 	bcs.w	8000f7c <__udivmoddi4+0x29c>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f240 8106 	bls.w	8000f7c <__udivmoddi4+0x29c>
 8000d70:	4464      	add	r4, ip
 8000d72:	3802      	subs	r0, #2
 8000d74:	2100      	movs	r1, #0
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa8>
 8000d80:	2300      	movs	r3, #0
 8000d82:	40d4      	lsrs	r4, r2
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0xc2>
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	f000 80ee 	beq.w	8000f72 <__udivmoddi4+0x292>
 8000d96:	2100      	movs	r1, #0
 8000d98:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d14a      	bne.n	8000e40 <__udivmoddi4+0x160>
 8000daa:	42ab      	cmp	r3, r5
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xd4>
 8000dae:	4282      	cmp	r2, r0
 8000db0:	f200 80fc 	bhi.w	8000fac <__udivmoddi4+0x2cc>
 8000db4:	1a84      	subs	r4, r0, r2
 8000db6:	eb65 0303 	sbc.w	r3, r5, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	4698      	mov	r8, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d0e2      	beq.n	8000d88 <__udivmoddi4+0xa8>
 8000dc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000dc6:	e7df      	b.n	8000d88 <__udivmoddi4+0xa8>
 8000dc8:	b902      	cbnz	r2, 8000dcc <__udivmoddi4+0xec>
 8000dca:	deff      	udf	#255	; 0xff
 8000dcc:	fab2 f282 	clz	r2, r2
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	f040 8091 	bne.w	8000ef8 <__udivmoddi4+0x218>
 8000dd6:	eba1 000c 	sub.w	r0, r1, ip
 8000dda:	2101      	movs	r1, #1
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000de8:	fb07 0013 	mls	r0, r7, r3, r0
 8000dec:	0c25      	lsrs	r5, r4, #16
 8000dee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000df2:	fb0e f003 	mul.w	r0, lr, r3
 8000df6:	42a8      	cmp	r0, r5
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x12c>
 8000dfa:	eb1c 0505 	adds.w	r5, ip, r5
 8000dfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x12a>
 8000e04:	42a8      	cmp	r0, r5
 8000e06:	f200 80ce 	bhi.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e0a:	4643      	mov	r3, r8
 8000e0c:	1a2d      	subs	r5, r5, r0
 8000e0e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e12:	fb07 5510 	mls	r5, r7, r0, r5
 8000e16:	fb0e fe00 	mul.w	lr, lr, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x156>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x154>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80b6 	bhi.w	8000fa0 <__udivmoddi4+0x2c0>
 8000e34:	4628      	mov	r0, r5
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e3e:	e79e      	b.n	8000d7e <__udivmoddi4+0x9e>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fbba f8f9 	udiv	r8, sl, r9
 8000e5a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e5e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e62:	408d      	lsls	r5, r1
 8000e64:	fa1f fe8c 	uxth.w	lr, ip
 8000e68:	431d      	orrs	r5, r3
 8000e6a:	fa00 f301 	lsl.w	r3, r0, r1
 8000e6e:	fb08 f00e 	mul.w	r0, r8, lr
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e78:	42a0      	cmp	r0, r4
 8000e7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b8>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2bc>
 8000e8c:	42a0      	cmp	r0, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2bc>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1a24      	subs	r4, r4, r0
 8000e9a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000e9e:	fb09 4410 	mls	r4, r9, r0, r4
 8000ea2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea6:	b2ad      	uxth	r5, r5
 8000ea8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1e2>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2b4>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2b4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ec6:	fba0 9502 	umull	r9, r5, r0, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x2a4>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x2a0>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2d0>
 8000edc:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee0:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee4:	fa22 f301 	lsr.w	r3, r2, r1
 8000ee8:	fa04 f707 	lsl.w	r7, r4, r7
 8000eec:	431f      	orrs	r7, r3
 8000eee:	40cc      	lsrs	r4, r1
 8000ef0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa8>
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	f1c2 0120 	rsb	r1, r2, #32
 8000f00:	fa25 f301 	lsr.w	r3, r5, r1
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa20 f101 	lsr.w	r1, r0, r1
 8000f0c:	4095      	lsls	r5, r2
 8000f0e:	430d      	orrs	r5, r1
 8000f10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f14:	fb07 3311 	mls	r3, r7, r1, r3
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	0c28      	lsrs	r0, r5, #16
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	fb01 f30e 	mul.w	r3, r1, lr
 8000f26:	4283      	cmp	r3, r0
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x260>
 8000f2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000f32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b8>
 8000f38:	4283      	cmp	r3, r0
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b8>
 8000f3c:	3902      	subs	r1, #2
 8000f3e:	4460      	add	r0, ip
 8000f40:	1ac0      	subs	r0, r0, r3
 8000f42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000f46:	fb07 0013 	mls	r0, r7, r3, r0
 8000f4a:	b2ad      	uxth	r5, r5
 8000f4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f50:	fb03 f00e 	mul.w	r0, r3, lr
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x28a>
 8000f58:	eb1c 0505 	adds.w	r5, ip, r5
 8000f5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2b0>
 8000f62:	42a8      	cmp	r0, r5
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2b0>
 8000f66:	3b02      	subs	r3, #2
 8000f68:	4465      	add	r5, ip
 8000f6a:	1a28      	subs	r0, r5, r0
 8000f6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0x104>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e707      	b.n	8000d88 <__udivmoddi4+0xa8>
 8000f78:	462f      	mov	r7, r5
 8000f7a:	e6e4      	b.n	8000d46 <__udivmoddi4+0x66>
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	e6f9      	b.n	8000d74 <__udivmoddi4+0x94>
 8000f80:	454b      	cmp	r3, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f8>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3801      	subs	r0, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f8>
 8000f90:	4643      	mov	r3, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x28a>
 8000f94:	4628      	mov	r0, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1e2>
 8000f98:	4641      	mov	r1, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x260>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b8>
 8000fa0:	4464      	add	r4, ip
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	e747      	b.n	8000e36 <__udivmoddi4+0x156>
 8000fa6:	3b02      	subs	r3, #2
 8000fa8:	4465      	add	r5, ip
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x12c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e706      	b.n	8000dbe <__udivmoddi4+0xde>
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa8>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <Check_touchkey>:
#include "UI.h"
#include "lcdtp.h"
#include "rtc.h"

uint8_t Check_touchkey(const int *constraints,
		strType_XPT2046_Coordinate *pDisplayCoordinate) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	8812      	ldrh	r2, [r2, #0]
			&& constraints[1] >= pDisplayCoordinate->x
			&& constraints[2] <= pDisplayCoordinate->y
			&& constraints[3] >= pDisplayCoordinate->y);
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	dc16      	bgt.n	8000ffc <Check_touchkey+0x44>
			&& constraints[1] >= pDisplayCoordinate->x
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	8812      	ldrh	r2, [r2, #0]
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	db0f      	blt.n	8000ffc <Check_touchkey+0x44>
			&& constraints[2] <= pDisplayCoordinate->y
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	8852      	ldrh	r2, [r2, #2]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	dc08      	bgt.n	8000ffc <Check_touchkey+0x44>
			&& constraints[3] >= pDisplayCoordinate->y);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	330c      	adds	r3, #12
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	8852      	ldrh	r2, [r2, #2]
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	db01      	blt.n	8000ffc <Check_touchkey+0x44>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <Check_touchkey+0x46>
 8000ffc:	2300      	movs	r3, #0
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000ffe:	73fb      	strb	r3, [r7, #15]
	return match;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <Render>:

void Render(uint8_t *mode_new, uint8_t *render_status,
		const unsigned char *petStats) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	//Not Render if done
	if (*render_status == 1)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d02e      	beq.n	800107e <Render+0x72>
		return;

	//Mode 0 = Home, Mode 1 = Drink Water, Mode 2 = Toggle Dark Mode, Mode 3 = Stats,
	switch (*mode_new) {
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b05      	cmp	r3, #5
 8001026:	d826      	bhi.n	8001076 <Render+0x6a>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <Render+0x24>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001049 	.word	0x08001049
 8001034:	0800104f 	.word	0x0800104f
 8001038:	0800105b 	.word	0x0800105b
 800103c:	08001067 	.word	0x08001067
 8001040:	0800106d 	.word	0x0800106d
 8001044:	08001073 	.word	0x08001073
	case (0):
		UI_Home();
 8001048:	f000 f866 	bl	8001118 <UI_Home>
		break;
 800104c:	e013      	b.n	8001076 <Render+0x6a>
	case (1):
		UI_Drink_Water();
 800104e:	f000 f81b 	bl	8001088 <UI_Drink_Water>
		*mode_new = 0;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		break;
 8001058:	e00d      	b.n	8001076 <Render+0x6a>
	case (2):
		LCD_Darkmode_Toggle();
 800105a:	f001 f971 	bl	8002340 <LCD_Darkmode_Toggle>
		*mode_new = 0;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
		break;
 8001064:	e007      	b.n	8001076 <Render+0x6a>
	case (3):
		UI_Stats();
 8001066:	f000 f99d 	bl	80013a4 <UI_Stats>
		break;
 800106a:	e004      	b.n	8001076 <Render+0x6a>
	case (4):
		UI_Config();
 800106c:	f000 fac0 	bl	80015f0 <UI_Config>
		break;
 8001070:	e001      	b.n	8001076 <Render+0x6a>
	case (5):
		UI_Time_set();
 8001072:	f000 fad7 	bl	8001624 <UI_Time_set>
	}
	*render_status = 1;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e000      	b.n	8001080 <Render+0x74>
		return;
 800107e:	bf00      	nop
}
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop

08001088 <UI_Drink_Water>:

void UI_Drink_Water() {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 800108c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001090:	22f0      	movs	r2, #240	; 0xf0
 8001092:	2100      	movs	r1, #0
 8001094:	2000      	movs	r0, #0
 8001096:	f000 fe29 	bl	8001cec <LCD_Clear>

	LCD_DrawString(10, 150, "Drinked a glass of water");
 800109a:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <UI_Drink_Water+0x7c>)
 800109c:	2196      	movs	r1, #150	; 0x96
 800109e:	200a      	movs	r0, #10
 80010a0:	f000 ff1c 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(10, 250, "Return to home in 2s");
 80010a4:	4a18      	ldr	r2, [pc, #96]	; (8001108 <UI_Drink_Water+0x80>)
 80010a6:	21fa      	movs	r1, #250	; 0xfa
 80010a8:	200a      	movs	r0, #10
 80010aa:	f000 ff17 	bl	8001edc <LCD_DrawString>
	HAL_Delay(1000);
 80010ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b2:	f004 ff57 	bl	8005f64 <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 80010b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010ba:	22f0      	movs	r2, #240	; 0xf0
 80010bc:	21fa      	movs	r1, #250	; 0xfa
 80010be:	200a      	movs	r0, #10
 80010c0:	f000 fe14 	bl	8001cec <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 1s");
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <UI_Drink_Water+0x84>)
 80010c6:	21fa      	movs	r1, #250	; 0xfa
 80010c8:	200a      	movs	r0, #10
 80010ca:	f000 ff07 	bl	8001edc <LCD_DrawString>
	HAL_Delay(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d2:	f004 ff47 	bl	8005f64 <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 80010d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010da:	22f0      	movs	r2, #240	; 0xf0
 80010dc:	21fa      	movs	r1, #250	; 0xfa
 80010de:	200a      	movs	r0, #10
 80010e0:	f000 fe04 	bl	8001cec <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 0s");
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <UI_Drink_Water+0x88>)
 80010e6:	21fa      	movs	r1, #250	; 0xfa
 80010e8:	200a      	movs	r0, #10
 80010ea:	f000 fef7 	bl	8001edc <LCD_DrawString>
	HAL_Delay(1000);
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	f004 ff37 	bl	8005f64 <HAL_Delay>
	extern uint32_t lastdrink_raw;
	lastdrink_raw = RTC_raw();
 80010f6:	f003 fd2f 	bl	8004b58 <RTC_raw>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a05      	ldr	r2, [pc, #20]	; (8001114 <UI_Drink_Water+0x8c>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	08010ee8 	.word	0x08010ee8
 8001108:	08010f04 	.word	0x08010f04
 800110c:	08010f1c 	.word	0x08010f1c
 8001110:	08010f34 	.word	0x08010f34
 8001114:	20000b8c 	.word	0x20000b8c

08001118 <UI_Home>:

void UI_Home() {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

	extern const unsigned char *petStats;
	UI_Home_Display_Button();
 800111c:	f000 f80e 	bl	800113c <UI_Home_Display_Button>
	UI_Home_Display_Pet(60, 70, petStats);
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <UI_Home+0x20>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	2146      	movs	r1, #70	; 0x46
 8001128:	203c      	movs	r0, #60	; 0x3c
 800112a:	f000 f8cb 	bl	80012c4 <UI_Home_Display_Pet>
	UI_Home_Display_DHT11();
 800112e:	f000 f8db 	bl	80012e8 <UI_Home_Display_DHT11>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000004 	.word	0x20000004

0800113c <UI_Home_Display_Button>:

void UI_Home_Display_Button() {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001140:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001144:	22f0      	movs	r2, #240	; 0xf0
 8001146:	2100      	movs	r1, #0
 8001148:	2000      	movs	r0, #0
 800114a:	f000 fdcf 	bl	8001cec <LCD_Clear>
	LCD_DrawString(2, 10, "Config");
 800114e:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <UI_Home_Display_Button+0x78>)
 8001150:	210a      	movs	r1, #10
 8001152:	2002      	movs	r0, #2
 8001154:	f000 fec2 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(200, 10, "Stats");
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <UI_Home_Display_Button+0x7c>)
 800115a:	210a      	movs	r1, #10
 800115c:	20c8      	movs	r0, #200	; 0xc8
 800115e:	f000 febd 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(40, 220, "Set");
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <UI_Home_Display_Button+0x80>)
 8001164:	21dc      	movs	r1, #220	; 0xdc
 8001166:	2028      	movs	r0, #40	; 0x28
 8001168:	f000 feb8 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(40, 240, "Exercise");
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <UI_Home_Display_Button+0x84>)
 800116e:	21f0      	movs	r1, #240	; 0xf0
 8001170:	2028      	movs	r0, #40	; 0x28
 8001172:	f000 feb3 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(40, 260, "Timer");
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <UI_Home_Display_Button+0x88>)
 8001178:	f44f 7182 	mov.w	r1, #260	; 0x104
 800117c:	2028      	movs	r0, #40	; 0x28
 800117e:	f000 fead 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(140, 220, "Drink");
 8001182:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <UI_Home_Display_Button+0x8c>)
 8001184:	21dc      	movs	r1, #220	; 0xdc
 8001186:	208c      	movs	r0, #140	; 0x8c
 8001188:	f000 fea8 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(140, 240, "water");
 800118c:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <UI_Home_Display_Button+0x90>)
 800118e:	21f0      	movs	r1, #240	; 0xf0
 8001190:	208c      	movs	r0, #140	; 0x8c
 8001192:	f000 fea3 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(200, 260, "Dark");
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <UI_Home_Display_Button+0x94>)
 8001198:	f44f 7182 	mov.w	r1, #260	; 0x104
 800119c:	20c8      	movs	r0, #200	; 0xc8
 800119e:	f000 fe9d 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(200, 280, "mode");
 80011a2:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <UI_Home_Display_Button+0x98>)
 80011a4:	f44f 718c 	mov.w	r1, #280	; 0x118
 80011a8:	20c8      	movs	r0, #200	; 0xc8
 80011aa:	f000 fe97 	bl	8001edc <LCD_DrawString>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	08010f4c 	.word	0x08010f4c
 80011b8:	08010f54 	.word	0x08010f54
 80011bc:	08010f5c 	.word	0x08010f5c
 80011c0:	08010f60 	.word	0x08010f60
 80011c4:	08010f6c 	.word	0x08010f6c
 80011c8:	08010f74 	.word	0x08010f74
 80011cc:	08010f7c 	.word	0x08010f7c
 80011d0:	08010f84 	.word	0x08010f84
 80011d4:	08010f8c 	.word	0x08010f8c

080011d8 <UI_Home_Display_Date>:

void UI_Home_Display_Date(uint16_t year, uint8_t month, uint8_t day) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
 80011e2:	460b      	mov	r3, r1
 80011e4:	717b      	strb	r3, [r7, #5]
 80011e6:	4613      	mov	r3, r2
 80011e8:	713b      	strb	r3, [r7, #4]
	char str[10];

	//Draw Year
	sprintf(str, "%04i", year);
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4915      	ldr	r1, [pc, #84]	; (8001248 <UI_Home_Display_Date+0x70>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fa2c 	bl	8004650 <sprintf_>
	LCD_DrawString(86, 10, str);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	461a      	mov	r2, r3
 80011fe:	210a      	movs	r1, #10
 8001200:	2056      	movs	r0, #86	; 0x56
 8001202:	f000 fe6b 	bl	8001edc <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", month);
 8001206:	797a      	ldrb	r2, [r7, #5]
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	490f      	ldr	r1, [pc, #60]	; (800124c <UI_Home_Display_Date+0x74>)
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fa1e 	bl	8004650 <sprintf_>
	LCD_DrawString(125, 10, str);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	461a      	mov	r2, r3
 800121a:	210a      	movs	r1, #10
 800121c:	207d      	movs	r0, #125	; 0x7d
 800121e:	f000 fe5d 	bl	8001edc <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", day);
 8001222:	793a      	ldrb	r2, [r7, #4]
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4908      	ldr	r1, [pc, #32]	; (800124c <UI_Home_Display_Date+0x74>)
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fa10 	bl	8004650 <sprintf_>
	LCD_DrawString(145, 10, str);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	461a      	mov	r2, r3
 8001236:	210a      	movs	r1, #10
 8001238:	2091      	movs	r0, #145	; 0x91
 800123a:	f000 fe4f 	bl	8001edc <LCD_DrawString>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08010f94 	.word	0x08010f94
 800124c:	08010f9c 	.word	0x08010f9c

08001250 <UI_Home_Display_Time>:

void UI_Home_Display_Time(uint8_t hour, uint8_t minute, uint8_t second) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	717b      	strb	r3, [r7, #5]
	char str[10];

	//Draw Hour
	sprintf(str, "%02i", hour);
 8001262:	79fa      	ldrb	r2, [r7, #7]
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4915      	ldr	r1, [pc, #84]	; (80012c0 <UI_Home_Display_Time+0x70>)
 800126a:	4618      	mov	r0, r3
 800126c:	f003 f9f0 	bl	8004650 <sprintf_>
	LCD_DrawString(95, 30, str);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	461a      	mov	r2, r3
 8001276:	211e      	movs	r1, #30
 8001278:	205f      	movs	r0, #95	; 0x5f
 800127a:	f000 fe2f 	bl	8001edc <LCD_DrawString>

	//Draw Minute
	sprintf(str, "%02i", minute);
 800127e:	79ba      	ldrb	r2, [r7, #6]
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	490e      	ldr	r1, [pc, #56]	; (80012c0 <UI_Home_Display_Time+0x70>)
 8001286:	4618      	mov	r0, r3
 8001288:	f003 f9e2 	bl	8004650 <sprintf_>
	LCD_DrawString(115, 30, str);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	461a      	mov	r2, r3
 8001292:	211e      	movs	r1, #30
 8001294:	2073      	movs	r0, #115	; 0x73
 8001296:	f000 fe21 	bl	8001edc <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", second);
 800129a:	797a      	ldrb	r2, [r7, #5]
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <UI_Home_Display_Time+0x70>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 f9d4 	bl	8004650 <sprintf_>
	LCD_DrawString(135, 30, str);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	461a      	mov	r2, r3
 80012ae:	211e      	movs	r1, #30
 80012b0:	2087      	movs	r0, #135	; 0x87
 80012b2:	f000 fe13 	bl	8001edc <LCD_DrawString>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	08010f9c 	.word	0x08010f9c

080012c4 <UI_Home_Display_Pet>:

void UI_Home_Display_Pet(uint16_t StartX, uint16_t StartY, unsigned char *pic) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	603a      	str	r2, [r7, #0]
 80012ce:	80fb      	strh	r3, [r7, #6]
 80012d0:	460b      	mov	r3, r1
 80012d2:	80bb      	strh	r3, [r7, #4]

	LCD_DrawPicture(StartX, StartY, pic);
 80012d4:	88b9      	ldrh	r1, [r7, #4]
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 f850 	bl	8002380 <LCD_DrawPicture>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <UI_Home_Display_DHT11>:

void UI_Home_Display_DHT11() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
	extern DHT11_datastruct DHT11_data;
	char Stemp[10];
	char Shum[10];
	sprintf(Stemp, "%02i", DHT11_data.temp_int);
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <UI_Home_Display_DHT11+0xa0>)
 80012f0:	789b      	ldrb	r3, [r3, #2]
 80012f2:	461a      	mov	r2, r3
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4924      	ldr	r1, [pc, #144]	; (800138c <UI_Home_Display_DHT11+0xa4>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 f9a8 	bl	8004650 <sprintf_>
	LCD_DrawString(10, 50, "T");
 8001300:	4a23      	ldr	r2, [pc, #140]	; (8001390 <UI_Home_Display_DHT11+0xa8>)
 8001302:	2132      	movs	r1, #50	; 0x32
 8001304:	200a      	movs	r0, #10
 8001306:	f000 fde9 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(0, 70, Stemp);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	461a      	mov	r2, r3
 8001310:	2146      	movs	r1, #70	; 0x46
 8001312:	2000      	movs	r0, #0
 8001314:	f000 fde2 	bl	8001edc <LCD_DrawString>
	if (LCD_GetPointPixel(240, 320) == 0x000000) {
 8001318:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800131c:	20f0      	movs	r0, #240	; 0xf0
 800131e:	f000 fd69 	bl	8001df4 <LCD_GetPointPixel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <UI_Home_Display_DHT11+0x50>
		LCD_DrawCircle(17, 72, 2, WHITE);
 8001328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800132c:	2202      	movs	r2, #2
 800132e:	2148      	movs	r1, #72	; 0x48
 8001330:	2011      	movs	r0, #17
 8001332:	f000 fe21 	bl	8001f78 <LCD_DrawCircle>
 8001336:	e005      	b.n	8001344 <UI_Home_Display_DHT11+0x5c>
	} else {
		LCD_DrawCircle(17, 72, 2, BLACK);
 8001338:	2300      	movs	r3, #0
 800133a:	2202      	movs	r2, #2
 800133c:	2148      	movs	r1, #72	; 0x48
 800133e:	2011      	movs	r0, #17
 8001340:	f000 fe1a 	bl	8001f78 <LCD_DrawCircle>
	}
	LCD_DrawString(20, 70, "C");
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <UI_Home_Display_DHT11+0xac>)
 8001346:	2146      	movs	r1, #70	; 0x46
 8001348:	2014      	movs	r0, #20
 800134a:	f000 fdc7 	bl	8001edc <LCD_DrawString>
	sprintf(Shum, "%03i", DHT11_data.humid_int);
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <UI_Home_Display_DHT11+0xa0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	463b      	mov	r3, r7
 8001356:	4910      	ldr	r1, [pc, #64]	; (8001398 <UI_Home_Display_DHT11+0xb0>)
 8001358:	4618      	mov	r0, r3
 800135a:	f003 f979 	bl	8004650 <sprintf_>
	LCD_DrawString(220, 50, "H");
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <UI_Home_Display_DHT11+0xb4>)
 8001360:	2132      	movs	r1, #50	; 0x32
 8001362:	20dc      	movs	r0, #220	; 0xdc
 8001364:	f000 fdba 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(205, 70, Shum);
 8001368:	463b      	mov	r3, r7
 800136a:	461a      	mov	r2, r3
 800136c:	2146      	movs	r1, #70	; 0x46
 800136e:	20cd      	movs	r0, #205	; 0xcd
 8001370:	f000 fdb4 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(230, 70, "%");
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <UI_Home_Display_DHT11+0xb8>)
 8001376:	2146      	movs	r1, #70	; 0x46
 8001378:	20e6      	movs	r0, #230	; 0xe6
 800137a:	f000 fdaf 	bl	8001edc <LCD_DrawString>

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000b74 	.word	0x20000b74
 800138c:	08010f9c 	.word	0x08010f9c
 8001390:	08010fa4 	.word	0x08010fa4
 8001394:	08010fa8 	.word	0x08010fa8
 8001398:	08010fac 	.word	0x08010fac
 800139c:	08010fb4 	.word	0x08010fb4
 80013a0:	08010fb8 	.word	0x08010fb8

080013a4 <UI_Stats>:

void UI_Stats() {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 80013a8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013ac:	22f0      	movs	r2, #240	; 0xf0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f000 fc9b 	bl	8001cec <LCD_Clear>
	LCD_DrawString(40, 50, "Time since last drink");
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <UI_Stats+0x38>)
 80013b8:	2132      	movs	r1, #50	; 0x32
 80013ba:	2028      	movs	r0, #40	; 0x28
 80013bc:	f000 fd8e 	bl	8001edc <LCD_DrawString>

	UI_Stats_Update();
 80013c0:	f000 f812 	bl	80013e8 <UI_Stats_Update>
	LCD_DrawString(80, 125, "Next drink");
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <UI_Stats+0x3c>)
 80013c6:	217d      	movs	r1, #125	; 0x7d
 80013c8:	2050      	movs	r0, #80	; 0x50
 80013ca:	f000 fd87 	bl	8001edc <LCD_DrawString>
	//TODO: Time Of Next Water Drinking Event
	LCD_DrawString(70, 200, "Back to home");
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <UI_Stats+0x40>)
 80013d0:	21c8      	movs	r1, #200	; 0xc8
 80013d2:	2046      	movs	r0, #70	; 0x46
 80013d4:	f000 fd82 	bl	8001edc <LCD_DrawString>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	08010fbc 	.word	0x08010fbc
 80013e0:	08010fd4 	.word	0x08010fd4
 80013e4:	08010fe0 	.word	0x08010fe0

080013e8 <UI_Stats_Update>:
void UI_Stats_Update() {
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af02      	add	r7, sp, #8
	extern uint32_t lastupdate_raw, lastdrink_raw;
	uint32_t realtime_raw = RTC_raw();
 80013ee:	f003 fbb3 	bl	8004b58 <RTC_raw>
 80013f2:	6278      	str	r0, [r7, #36]	; 0x24

	if (realtime_raw == lastupdate_raw)
 80013f4:	4b71      	ldr	r3, [pc, #452]	; (80015bc <UI_Stats_Update+0x1d4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f000 80d9 	beq.w	80015b2 <UI_Stats_Update+0x1ca>
		return;
	uint32_t time_diff = realtime_raw - lastdrink_raw;
 8001400:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <UI_Stats_Update+0x1d8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	623b      	str	r3, [r7, #32]

	//Update New Last Drink
	lastupdate_raw = realtime_raw;
 800140a:	4a6c      	ldr	r2, [pc, #432]	; (80015bc <UI_Stats_Update+0x1d4>)
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	6013      	str	r3, [r2, #0]

	char timestr[15];
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	4a6c      	ldr	r2, [pc, #432]	; (80015c4 <UI_Stats_Update+0x1dc>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0adc      	lsrs	r4, r3, #11
			(time_diff % 3600) / 60, time_diff % 60);
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	4b69      	ldr	r3, [pc, #420]	; (80015c4 <UI_Stats_Update+0x1dc>)
 800141e:	fba3 1302 	umull	r1, r3, r3, r2
 8001422:	0adb      	lsrs	r3, r3, #11
 8001424:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001428:	fb01 f303 	mul.w	r3, r1, r3
 800142c:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 800142e:	4a66      	ldr	r2, [pc, #408]	; (80015c8 <UI_Stats_Update+0x1e0>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	095d      	lsrs	r5, r3, #5
 8001436:	6a39      	ldr	r1, [r7, #32]
 8001438:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <UI_Stats_Update+0x1e0>)
 800143a:	fba3 2301 	umull	r2, r3, r3, r1
 800143e:	095a      	lsrs	r2, r3, #5
 8001440:	4613      	mov	r3, r2
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	1aca      	subs	r2, r1, r3
 800144a:	4638      	mov	r0, r7
 800144c:	9200      	str	r2, [sp, #0]
 800144e:	462b      	mov	r3, r5
 8001450:	4622      	mov	r2, r4
 8001452:	495e      	ldr	r1, [pc, #376]	; (80015cc <UI_Stats_Update+0x1e4>)
 8001454:	f003 f8fc 	bl	8004650 <sprintf_>
	LCD_DrawString(75, 85, timestr);
 8001458:	463b      	mov	r3, r7
 800145a:	461a      	mov	r2, r3
 800145c:	2155      	movs	r1, #85	; 0x55
 800145e:	204b      	movs	r0, #75	; 0x4b
 8001460:	f000 fd3c 	bl	8001edc <LCD_DrawString>

	//Update next drink
	extern uint32_t next; //default value
	extern DHT11_datastruct DHT11_data;
	extern uint32_t tilnext; // time till next drink
	double humid = DHT11_data.humid_int;
 8001464:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <UI_Stats_Update+0x1e8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f827 	bl	80004bc <__aeabi_ui2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double temp = DHT11_data.temp_int;
 8001476:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <UI_Stats_Update+0x1e8>)
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f81e 	bl	80004bc <__aeabi_ui2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (next == 9999) { //Initialize
 8001488:	4b52      	ldr	r3, [pc, #328]	; (80015d4 <UI_Stats_Update+0x1ec>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001490:	4293      	cmp	r3, r2
 8001492:	d15a      	bne.n	800154a <UI_Stats_Update+0x162>
		next = 2400 * (1 + (humid / 100)); //humidity
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <UI_Stats_Update+0x1f0>)
 800149a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800149e:	f7ff f9b1 	bl	8000804 <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <UI_Stats_Update+0x1f4>)
 80014b0:	f7fe fec8 	bl	8000244 <__adddf3>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <UI_Stats_Update+0x1f8>)
 80014c2:	f7ff f875 	bl	80005b0 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb47 	bl	8000b60 <__aeabi_d2uiz>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a3f      	ldr	r2, [pc, #252]	; (80015d4 <UI_Stats_Update+0x1ec>)
 80014d6:	6013      	str	r3, [r2, #0]
		if (temp > 26) {
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <UI_Stats_Update+0x1fc>)
 80014de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014e2:	f7ff faf5 	bl	8000ad0 <__aeabi_dcmpgt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02e      	beq.n	800154a <UI_Stats_Update+0x162>
			next = next / (1 + (temp - 26) / 10); //temperature
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <UI_Stats_Update+0x1ec>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe ffe3 	bl	80004bc <__aeabi_ui2d>
 80014f6:	4604      	mov	r4, r0
 80014f8:	460d      	mov	r5, r1
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <UI_Stats_Update+0x1fc>)
 8001500:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001504:	f7fe fe9c 	bl	8000240 <__aeabi_dsub>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <UI_Stats_Update+0x200>)
 8001516:	f7ff f975 	bl	8000804 <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <UI_Stats_Update+0x1f4>)
 8001528:	f7fe fe8c 	bl	8000244 <__adddf3>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7ff f966 	bl	8000804 <__aeabi_ddiv>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb0e 	bl	8000b60 <__aeabi_d2uiz>
 8001544:	4603      	mov	r3, r0
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <UI_Stats_Update+0x1ec>)
 8001548:	6013      	str	r3, [r2, #0]
		}
	}
	tilnext = next - time_diff;
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <UI_Stats_Update+0x1ec>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	4a26      	ldr	r2, [pc, #152]	; (80015ec <UI_Stats_Update+0x204>)
 8001554:	6013      	str	r3, [r2, #0]
	if (tilnext < 0) {
		tilnext = 0;
	}

	sprintf(timestr, "%02d : %02d : %02d", tilnext / 3600,
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <UI_Stats_Update+0x204>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <UI_Stats_Update+0x1dc>)
 800155c:	fba2 2303 	umull	r2, r3, r2, r3
 8001560:	0adc      	lsrs	r4, r3, #11
			(tilnext % 3600) / 60, tilnext % 60);
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <UI_Stats_Update+0x204>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <UI_Stats_Update+0x1dc>)
 8001568:	fba3 1302 	umull	r1, r3, r3, r2
 800156c:	0adb      	lsrs	r3, r3, #11
 800156e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", tilnext / 3600,
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <UI_Stats_Update+0x1e0>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	095d      	lsrs	r5, r3, #5
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <UI_Stats_Update+0x204>)
 8001582:	6819      	ldr	r1, [r3, #0]
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <UI_Stats_Update+0x1e0>)
 8001586:	fba3 2301 	umull	r2, r3, r3, r1
 800158a:	095a      	lsrs	r2, r3, #5
 800158c:	4613      	mov	r3, r2
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	1aca      	subs	r2, r1, r3
 8001596:	4638      	mov	r0, r7
 8001598:	9200      	str	r2, [sp, #0]
 800159a:	462b      	mov	r3, r5
 800159c:	4622      	mov	r2, r4
 800159e:	490b      	ldr	r1, [pc, #44]	; (80015cc <UI_Stats_Update+0x1e4>)
 80015a0:	f003 f856 	bl	8004650 <sprintf_>
	LCD_DrawString(75, 155, timestr);
 80015a4:	463b      	mov	r3, r7
 80015a6:	461a      	mov	r2, r3
 80015a8:	219b      	movs	r1, #155	; 0x9b
 80015aa:	204b      	movs	r0, #75	; 0x4b
 80015ac:	f000 fc96 	bl	8001edc <LCD_DrawString>
 80015b0:	e000      	b.n	80015b4 <UI_Stats_Update+0x1cc>
		return;
 80015b2:	bf00      	nop

}
 80015b4:	3728      	adds	r7, #40	; 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000b88 	.word	0x20000b88
 80015c0:	20000b8c 	.word	0x20000b8c
 80015c4:	91a2b3c5 	.word	0x91a2b3c5
 80015c8:	88888889 	.word	0x88888889
 80015cc:	08010ff0 	.word	0x08010ff0
 80015d0:	20000b74 	.word	0x20000b74
 80015d4:	20000000 	.word	0x20000000
 80015d8:	40590000 	.word	0x40590000
 80015dc:	3ff00000 	.word	0x3ff00000
 80015e0:	40a2c000 	.word	0x40a2c000
 80015e4:	403a0000 	.word	0x403a0000
 80015e8:	40240000 	.word	0x40240000
 80015ec:	20000b90 	.word	0x20000b90

080015f0 <UI_Config>:

void UI_Config(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 80015f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015f8:	22f0      	movs	r2, #240	; 0xf0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2000      	movs	r0, #0
 80015fe:	f000 fb75 	bl	8001cec <LCD_Clear>
	LCD_DrawString(40, 50, "- Set Time");
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <UI_Config+0x2c>)
 8001604:	2132      	movs	r1, #50	; 0x32
 8001606:	2028      	movs	r0, #40	; 0x28
 8001608:	f000 fc68 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(10, 280, "Back");
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <UI_Config+0x30>)
 800160e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001612:	200a      	movs	r0, #10
 8001614:	f000 fc62 	bl	8001edc <LCD_DrawString>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08011004 	.word	0x08011004
 8001620:	08011010 	.word	0x08011010

08001624 <UI_Time_set>:

void UI_Time_set(){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001628:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800162c:	22f0      	movs	r2, #240	; 0xf0
 800162e:	2100      	movs	r1, #0
 8001630:	2000      	movs	r0, #0
 8001632:	f000 fb5b 	bl	8001cec <LCD_Clear>
	LCD_DrawString(90, 50, "Set Time");
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <UI_Time_set+0x34>)
 8001638:	2132      	movs	r1, #50	; 0x32
 800163a:	205a      	movs	r0, #90	; 0x5a
 800163c:	f000 fc4e 	bl	8001edc <LCD_DrawString>
	LCD_DrawString(10, 280, "Back");
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <UI_Time_set+0x38>)
 8001642:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001646:	200a      	movs	r0, #10
 8001648:	f000 fc48 	bl	8001edc <LCD_DrawString>
	//Handle In Main
	printf("Pleas Input Date Time: yyyymmddhhmmss");
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <UI_Time_set+0x3c>)
 800164e:	f002 ffe3 	bl	8004618 <printf_>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	08011018 	.word	0x08011018
 800165c:	08011010 	.word	0x08011010
 8001660:	08011024 	.word	0x08011024

08001664 <DHT11_IO_OUT>:
#include "dht11.h"
#include "printf.h"
#include "timer.h"

void DHT11_IO_OUT(void) //Set Pin As Output
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 800166a:	463b      	mov	r3, r7
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <DHT11_IO_OUT+0x34>)
 800168c:	f004 fd98 	bl	80061c0 <HAL_GPIO_Init>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40011800 	.word	0x40011800

0800169c <DHT11_IO_IN>:

void DHT11_IO_IN(void) //Set Pin As Input
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ae:	2340      	movs	r3, #64	; 0x40
 80016b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ba:	463b      	mov	r3, r7
 80016bc:	4619      	mov	r1, r3
 80016be:	4803      	ldr	r0, [pc, #12]	; (80016cc <DHT11_IO_IN+0x30>)
 80016c0:	f004 fd7e 	bl	80061c0 <HAL_GPIO_Init>
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40011800 	.word	0x40011800

080016d0 <DHT11_RST>:

void DHT11_RST(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	DHT11_IO_OUT();
 80016d4:	f7ff ffc6 	bl	8001664 <DHT11_IO_OUT>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2140      	movs	r1, #64	; 0x40
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <DHT11_RST+0x2c>)
 80016de:	f004 ff1e 	bl	800651e <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80016e2:	2014      	movs	r0, #20
 80016e4:	f004 fc3e 	bl	8005f64 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2140      	movs	r1, #64	; 0x40
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <DHT11_RST+0x2c>)
 80016ee:	f004 ff16 	bl	800651e <HAL_GPIO_WritePin>
	delay_us(30);
 80016f2:	201e      	movs	r0, #30
 80016f4:	f003 fd3a 	bl	800516c <delay_us>
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40011800 	.word	0x40011800

08001700 <Dht11_Check>:

uint8_t Dht11_Check(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8001706:	2300      	movs	r3, #0
 8001708:	71fb      	strb	r3, [r7, #7]
	DHT11_IO_IN();
 800170a:	f7ff ffc7 	bl	800169c <DHT11_IO_IN>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 800170e:	e005      	b.n	800171c <Dht11_Check+0x1c>
		++retry;
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	3301      	adds	r3, #1
 8001714:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f003 fd28 	bl	800516c <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 800171c:	2140      	movs	r1, #64	; 0x40
 800171e:	4815      	ldr	r0, [pc, #84]	; (8001774 <Dht11_Check+0x74>)
 8001720:	f004 fee6 	bl	80064f0 <HAL_GPIO_ReadPin>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <Dht11_Check+0x30>
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b63      	cmp	r3, #99	; 0x63
 800172e:	d9ef      	bls.n	8001710 <Dht11_Check+0x10>
	}
	if(retry>=100)return 1; else retry=0;
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b63      	cmp	r3, #99	; 0x63
 8001734:	d901      	bls.n	800173a <Dht11_Check+0x3a>
 8001736:	2301      	movs	r3, #1
 8001738:	e018      	b.n	800176c <Dht11_Check+0x6c>
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 800173e:	e005      	b.n	800174c <Dht11_Check+0x4c>
		++retry;
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	3301      	adds	r3, #1
 8001744:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f003 fd10 	bl	800516c <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 800174c:	2140      	movs	r1, #64	; 0x40
 800174e:	4809      	ldr	r0, [pc, #36]	; (8001774 <Dht11_Check+0x74>)
 8001750:	f004 fece 	bl	80064f0 <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <Dht11_Check+0x60>
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b63      	cmp	r3, #99	; 0x63
 800175e:	d9ef      	bls.n	8001740 <Dht11_Check+0x40>
	}
	if(retry>=100)return 1;
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b63      	cmp	r3, #99	; 0x63
 8001764:	d901      	bls.n	800176a <Dht11_Check+0x6a>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <Dht11_Check+0x6c>
	return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40011800 	.word	0x40011800

08001778 <DHT11_Init>:

uint8_t DHT11_Init(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	DHT11_RST();
 800177c:	f7ff ffa8 	bl	80016d0 <DHT11_RST>
	return Dht11_Check();
 8001780:	f7ff ffbe 	bl	8001700 <Dht11_Check>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8001792:	2300      	movs	r3, #0
 8001794:	71fb      	strb	r3, [r7, #7]
	//Wait For Last Set signal end
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001796:	e005      	b.n	80017a4 <DHT11_ReadBit+0x18>
		++retry;
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	3301      	adds	r3, #1
 800179c:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 800179e:	2001      	movs	r0, #1
 80017a0:	f003 fce4 	bl	800516c <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 80017a4:	2140      	movs	r1, #64	; 0x40
 80017a6:	4816      	ldr	r0, [pc, #88]	; (8001800 <DHT11_ReadBit+0x74>)
 80017a8:	f004 fea2 	bl	80064f0 <HAL_GPIO_ReadPin>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <DHT11_ReadBit+0x2c>
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b63      	cmp	r3, #99	; 0x63
 80017b6:	d9ef      	bls.n	8001798 <DHT11_ReadBit+0xc>
	}
	retry = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	71fb      	strb	r3, [r7, #7]
	//Wait For New Set Signal Begin
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 80017bc:	e005      	b.n	80017ca <DHT11_ReadBit+0x3e>
		++retry;
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	3301      	adds	r3, #1
 80017c2:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f003 fcd1 	bl	800516c <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <DHT11_ReadBit+0x74>)
 80017ce:	f004 fe8f 	bl	80064f0 <HAL_GPIO_ReadPin>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <DHT11_ReadBit+0x52>
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	2b63      	cmp	r3, #99	; 0x63
 80017dc:	d9ef      	bls.n	80017be <DHT11_ReadBit+0x32>
	}
	//0: 26-28us   1:70us
	delay_us(40);
 80017de:	2028      	movs	r0, #40	; 0x28
 80017e0:	f003 fcc4 	bl	800516c <delay_us>
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)) return 1; else return 0;
 80017e4:	2140      	movs	r1, #64	; 0x40
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <DHT11_ReadBit+0x74>)
 80017e8:	f004 fe82 	bl	80064f0 <HAL_GPIO_ReadPin>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <DHT11_ReadBit+0x6a>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <DHT11_ReadBit+0x6c>
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40011800 	.word	0x40011800

08001804 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	uint8_t i,dat;
	dat=0;
 800180a:	2300      	movs	r3, #0
 800180c:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 800180e:	2300      	movs	r3, #0
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	e00c      	b.n	800182e <DHT11_ReadByte+0x2a>
		dat<<=1;
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	71bb      	strb	r3, [r7, #6]
		dat|=DHT11_ReadBit();
 800181a:	f7ff ffb7 	bl	800178c <DHT11_ReadBit>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	79bb      	ldrb	r3, [r7, #6]
 8001824:	4313      	orrs	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	3301      	adds	r3, #1
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b07      	cmp	r3, #7
 8001832:	d9ef      	bls.n	8001814 <DHT11_ReadByte+0x10>
	}
	return dat;
 8001834:	79bb      	ldrb	r3, [r7, #6]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <DHT11_ReadData>:


uint8_t DHT11_ReadData(DHT11_datastruct *ds){
 800183e:	b590      	push	{r4, r7, lr}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
	uint8_t buf[5];
	uint8_t i;
	//Reset and Check
	if(DHT11_Init()==0){
 8001846:	f7ff ff97 	bl	8001778 <DHT11_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d133      	bne.n	80018b8 <DHT11_ReadData+0x7a>
		for(i=0;i<5;++i){
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	e00c      	b.n	8001870 <DHT11_ReadData+0x32>
			buf[i]=DHT11_ReadByte();
 8001856:	7bfc      	ldrb	r4, [r7, #15]
 8001858:	f7ff ffd4 	bl	8001804 <DHT11_ReadByte>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	f104 0310 	add.w	r3, r4, #16
 8001864:	443b      	add	r3, r7
 8001866:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(i=0;i<5;++i){
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	3301      	adds	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b04      	cmp	r3, #4
 8001874:	d9ef      	bls.n	8001856 <DHT11_ReadData+0x18>
		}
	//i=0,1  = humidity  00.11
	//i=2,3  = temperature 22.33
	//i=4    = Check Sum 0+1+2+3==4
		ds->humid_int = buf[0];
 8001876:	7a3a      	ldrb	r2, [r7, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	701a      	strb	r2, [r3, #0]
		ds->humid_dec = buf[1];
 800187c:	7a7a      	ldrb	r2, [r7, #9]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	705a      	strb	r2, [r3, #1]
		ds->temp_int = buf[2];
 8001882:	7aba      	ldrb	r2, [r7, #10]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	709a      	strb	r2, [r3, #2]
		ds->temp_dec = buf[3];
 8001888:	7afa      	ldrb	r2, [r7, #11]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	70da      	strb	r2, [r3, #3]
		ds->check_sum = buf[4];
 800188e:	7b3a      	ldrb	r2, [r7, #12]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	711a      	strb	r2, [r3, #4]
		if(ds->humid_int + ds->humid_dec + ds->temp_int + ds->temp_dec != ds->check_sum){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	785b      	ldrb	r3, [r3, #1]
 800189e:	4413      	add	r3, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	7892      	ldrb	r2, [r2, #2]
 80018a4:	4413      	add	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	78d2      	ldrb	r2, [r2, #3]
 80018aa:	4413      	add	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	7912      	ldrb	r2, [r2, #4]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d003      	beq.n	80018bc <DHT11_ReadData+0x7e>
			//Wrong Data
			return 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e002      	b.n	80018be <DHT11_ReadData+0x80>
		}
	}else return 1;//Success
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <DHT11_ReadData+0x80>
	return 0;//Not Responding
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}

080018c6 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	e002      	b.n	80018d6 <Delay+0x10>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <Delay+0xa>
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 80018ec:	2001      	movs	r0, #1
 80018ee:	f000 f825 	bl	800193c <LCD_BackLed_Control>
	LCD_Rst();
 80018f2:	f000 f80b 	bl	800190c <LCD_Rst>
	LCD_REG_Config();
 80018f6:	f000 f867 	bl	80019c8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 80018fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018fe:	22f0      	movs	r2, #240	; 0xf0
 8001900:	2100      	movs	r1, #0
 8001902:	2000      	movs	r0, #0
 8001904:	f000 f9f2 	bl	8001cec <LCD_Clear>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <LCD_Rst>:


void LCD_Rst ( void )
{			
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2102      	movs	r1, #2
 8001914:	4807      	ldr	r0, [pc, #28]	; (8001934 <LCD_Rst+0x28>)
 8001916:	f004 fe02 	bl	800651e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <LCD_Rst+0x2c>)
 800191c:	f7ff ffd3 	bl	80018c6 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2102      	movs	r1, #2
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <LCD_Rst+0x28>)
 8001926:	f004 fdfa 	bl	800651e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800192a:	4803      	ldr	r0, [pc, #12]	; (8001938 <LCD_Rst+0x2c>)
 800192c:	f7ff ffcb 	bl	80018c6 <Delay>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40011800 	.word	0x40011800
 8001938:	0002bffc 	.word	0x0002bffc

0800193c <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001952:	4807      	ldr	r0, [pc, #28]	; (8001970 <LCD_BackLed_Control+0x34>)
 8001954:	f004 fde3 	bl	800651e <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001958:	e005      	b.n	8001966 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800195a:	2201      	movs	r2, #1
 800195c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <LCD_BackLed_Control+0x34>)
 8001962:	f004 fddc 	bl	800651e <HAL_GPIO_WritePin>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40011400 	.word	0x40011400

08001974 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800197e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	8013      	strh	r3, [r2, #0]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <LCD_Write_Data+0x1c>)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	8013      	strh	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	60020000 	.word	0x60020000

080019b0 <LCD_Read_Data>:


uint16_t LCD_Read_Data ( void )
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <LCD_Read_Data+0x14>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	60020000 	.word	0x60020000

080019c8 <LCD_REG_Config>:


void LCD_REG_Config ( void )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80019cc:	20cf      	movs	r0, #207	; 0xcf
 80019ce:	f7ff ffd1 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff ffdc 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80019d8:	2081      	movs	r0, #129	; 0x81
 80019da:	f7ff ffd9 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80019de:	2030      	movs	r0, #48	; 0x30
 80019e0:	f7ff ffd6 	bl	8001990 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80019e4:	20ed      	movs	r0, #237	; 0xed
 80019e6:	f7ff ffc5 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80019ea:	2064      	movs	r0, #100	; 0x64
 80019ec:	f7ff ffd0 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80019f0:	2003      	movs	r0, #3
 80019f2:	f7ff ffcd 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80019f6:	2012      	movs	r0, #18
 80019f8:	f7ff ffca 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80019fc:	2081      	movs	r0, #129	; 0x81
 80019fe:	f7ff ffc7 	bl	8001990 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001a02:	20e8      	movs	r0, #232	; 0xe8
 8001a04:	f7ff ffb6 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001a08:	2085      	movs	r0, #133	; 0x85
 8001a0a:	f7ff ffc1 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001a0e:	2010      	movs	r0, #16
 8001a10:	f7ff ffbe 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001a14:	2078      	movs	r0, #120	; 0x78
 8001a16:	f7ff ffbb 	bl	8001990 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001a1a:	20cb      	movs	r0, #203	; 0xcb
 8001a1c:	f7ff ffaa 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001a20:	2039      	movs	r0, #57	; 0x39
 8001a22:	f7ff ffb5 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001a26:	202c      	movs	r0, #44	; 0x2c
 8001a28:	f7ff ffb2 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ffaf 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001a32:	2034      	movs	r0, #52	; 0x34
 8001a34:	f7ff ffac 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f7ff ffa9 	bl	8001990 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001a3e:	20f7      	movs	r0, #247	; 0xf7
 8001a40:	f7ff ff98 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001a44:	2020      	movs	r0, #32
 8001a46:	f7ff ffa3 	bl	8001990 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001a4a:	20ea      	movs	r0, #234	; 0xea
 8001a4c:	f7ff ff92 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff ff9d 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff ff9a 	bl	8001990 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001a5c:	20b1      	movs	r0, #177	; 0xb1
 8001a5e:	f7ff ff89 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff ff94 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001a68:	201b      	movs	r0, #27
 8001a6a:	f7ff ff91 	bl	8001990 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001a6e:	20b6      	movs	r0, #182	; 0xb6
 8001a70:	f7ff ff80 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001a74:	200a      	movs	r0, #10
 8001a76:	f7ff ff8b 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001a7a:	20a2      	movs	r0, #162	; 0xa2
 8001a7c:	f7ff ff88 	bl	8001990 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001a80:	20c0      	movs	r0, #192	; 0xc0
 8001a82:	f7ff ff77 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001a86:	2035      	movs	r0, #53	; 0x35
 8001a88:	f7ff ff82 	bl	8001990 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001a8c:	20c1      	movs	r0, #193	; 0xc1
 8001a8e:	f7ff ff71 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001a92:	2011      	movs	r0, #17
 8001a94:	f7ff ff7c 	bl	8001990 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001a98:	20c5      	movs	r0, #197	; 0xc5
 8001a9a:	f7ff ff6b 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001a9e:	2045      	movs	r0, #69	; 0x45
 8001aa0:	f7ff ff76 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001aa4:	2045      	movs	r0, #69	; 0x45
 8001aa6:	f7ff ff73 	bl	8001990 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001aaa:	20c7      	movs	r0, #199	; 0xc7
 8001aac:	f7ff ff62 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001ab0:	20a2      	movs	r0, #162	; 0xa2
 8001ab2:	f7ff ff6d 	bl	8001990 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001ab6:	20f2      	movs	r0, #242	; 0xf2
 8001ab8:	f7ff ff5c 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff ff67 	bl	8001990 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001ac2:	2026      	movs	r0, #38	; 0x26
 8001ac4:	f7ff ff56 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff ff61 	bl	8001990 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001ace:	20e0      	movs	r0, #224	; 0xe0
 8001ad0:	f7ff ff50 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001ad4:	200f      	movs	r0, #15
 8001ad6:	f7ff ff5b 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001ada:	2026      	movs	r0, #38	; 0x26
 8001adc:	f7ff ff58 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001ae0:	2024      	movs	r0, #36	; 0x24
 8001ae2:	f7ff ff55 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001ae6:	200b      	movs	r0, #11
 8001ae8:	f7ff ff52 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001aec:	200e      	movs	r0, #14
 8001aee:	f7ff ff4f 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001af2:	2009      	movs	r0, #9
 8001af4:	f7ff ff4c 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001af8:	2054      	movs	r0, #84	; 0x54
 8001afa:	f7ff ff49 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001afe:	20a8      	movs	r0, #168	; 0xa8
 8001b00:	f7ff ff46 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001b04:	2046      	movs	r0, #70	; 0x46
 8001b06:	f7ff ff43 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001b0a:	200c      	movs	r0, #12
 8001b0c:	f7ff ff40 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001b10:	2017      	movs	r0, #23
 8001b12:	f7ff ff3d 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001b16:	2009      	movs	r0, #9
 8001b18:	f7ff ff3a 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001b1c:	200f      	movs	r0, #15
 8001b1e:	f7ff ff37 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001b22:	2007      	movs	r0, #7
 8001b24:	f7ff ff34 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff ff31 	bl	8001990 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001b2e:	20e1      	movs	r0, #225	; 0xe1
 8001b30:	f7ff ff20 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff ff2b 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001b3a:	2019      	movs	r0, #25
 8001b3c:	f7ff ff28 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001b40:	201b      	movs	r0, #27
 8001b42:	f7ff ff25 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001b46:	2004      	movs	r0, #4
 8001b48:	f7ff ff22 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001b4c:	2010      	movs	r0, #16
 8001b4e:	f7ff ff1f 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001b52:	2007      	movs	r0, #7
 8001b54:	f7ff ff1c 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001b58:	202a      	movs	r0, #42	; 0x2a
 8001b5a:	f7ff ff19 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001b5e:	2047      	movs	r0, #71	; 0x47
 8001b60:	f7ff ff16 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001b64:	2039      	movs	r0, #57	; 0x39
 8001b66:	f7ff ff13 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f7ff ff10 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001b70:	2006      	movs	r0, #6
 8001b72:	f7ff ff0d 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001b76:	2006      	movs	r0, #6
 8001b78:	f7ff ff0a 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001b7c:	2030      	movs	r0, #48	; 0x30
 8001b7e:	f7ff ff07 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001b82:	2038      	movs	r0, #56	; 0x38
 8001b84:	f7ff ff04 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001b88:	200f      	movs	r0, #15
 8001b8a:	f7ff ff01 	bl	8001990 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001b8e:	2036      	movs	r0, #54	; 0x36
 8001b90:	f7ff fef0 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001b94:	20c8      	movs	r0, #200	; 0xc8
 8001b96:	f7ff fefb 	bl	8001990 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001b9a:	202a      	movs	r0, #42	; 0x2a
 8001b9c:	f7ff feea 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fef5 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fef2 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff feef 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001bb2:	20ef      	movs	r0, #239	; 0xef
 8001bb4:	f7ff feec 	bl	8001990 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001bb8:	202b      	movs	r0, #43	; 0x2b
 8001bba:	f7ff fedb 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fee6 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff fee3 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7ff fee0 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001bd0:	203f      	movs	r0, #63	; 0x3f
 8001bd2:	f7ff fedd 	bl	8001990 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001bd6:	203a      	movs	r0, #58	; 0x3a
 8001bd8:	f7ff fecc 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001bdc:	2055      	movs	r0, #85	; 0x55
 8001bde:	f7ff fed7 	bl	8001990 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001be2:	2011      	movs	r0, #17
 8001be4:	f7ff fec6 	bl	8001974 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <LCD_REG_Config+0x230>)
 8001bea:	f7ff fe6c 	bl	80018c6 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001bee:	2029      	movs	r0, #41	; 0x29
 8001bf0:	f7ff fec0 	bl	8001974 <LCD_Write_Cmd>
	
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	0002bffc 	.word	0x0002bffc

08001bfc <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	80fb      	strh	r3, [r7, #6]
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80bb      	strh	r3, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]
 8001c16:	4613      	mov	r3, r2
 8001c18:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001c1a:	202a      	movs	r0, #42	; 0x2a
 8001c1c:	f7ff feaa 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff feb2 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff feac 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	121b      	asrs	r3, r3, #8
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fea3 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001c4a:	88fa      	ldrh	r2, [r7, #6]
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fe98 	bl	8001990 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001c60:	202b      	movs	r0, #43	; 0x2b
 8001c62:	f7ff fe87 	bl	8001974 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001c66:	88bb      	ldrh	r3, [r7, #4]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fe8f 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fe89 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001c7e:	88ba      	ldrh	r2, [r7, #4]
 8001c80:	883b      	ldrh	r3, [r7, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	3b01      	subs	r3, #1
 8001c86:	121b      	asrs	r3, r3, #8
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fe80 	bl	8001990 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001c90:	88ba      	ldrh	r2, [r7, #4]
 8001c92:	883b      	ldrh	r3, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fe75 	bl	8001990 <LCD_Write_Data>
	
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd90      	pop	{r4, r7, pc}

08001cae <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001cbe:	202c      	movs	r0, #44	; 0x2c
 8001cc0:	f7ff fe58 	bl	8001974 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e006      	b.n	8001cd8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fe5f 	bl	8001990 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d3f4      	bcc.n	8001cca <LCD_FillColor+0x1c>
		
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4623      	mov	r3, r4
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80bb      	strh	r3, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	807b      	strh	r3, [r7, #2]
 8001d06:	4613      	mov	r3, r2
 8001d08:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <LCD_Clear+0x58>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <LCD_Clear+0x2a>
 8001d12:	2300      	movs	r3, #0
 8001d14:	e001      	b.n	8001d1a <LCD_Clear+0x2e>
 8001d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1a:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001d1c:	883b      	ldrh	r3, [r7, #0]
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	88b9      	ldrh	r1, [r7, #4]
 8001d22:	88f8      	ldrh	r0, [r7, #6]
 8001d24:	f7ff ff6a 	bl	8001bfc <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	883a      	ldrh	r2, [r7, #0]
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	89fb      	ldrh	r3, [r7, #14]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f7ff ffb9 	bl	8001cae <LCD_FillColor>
	
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd90      	pop	{r4, r7, pc}
 8001d44:	20000a18 	.word	0x20000a18

08001d48 <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4604      	mov	r4, r0
 8001d50:	4608      	mov	r0, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	80fb      	strh	r3, [r7, #6]
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	80bb      	strh	r3, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	807b      	strh	r3, [r7, #2]
 8001d62:	4613      	mov	r3, r2
 8001d64:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001d66:	883b      	ldrh	r3, [r7, #0]
 8001d68:	887a      	ldrh	r2, [r7, #2]
 8001d6a:	88b9      	ldrh	r1, [r7, #4]
 8001d6c:	88f8      	ldrh	r0, [r7, #6]
 8001d6e:	f7ff ff45 	bl	8001bfc <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	883a      	ldrh	r2, [r7, #0]
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	8b3b      	ldrh	r3, [r7, #24]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f7ff ff94 	bl	8001cae <LCD_FillColor>
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}

08001d8e <LCD_Read_PixelData>:

uint16_t LCD_Read_PixelData ( void )	
{	
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
	uint16_t usR=0, usG=0, usB=0 ;
 8001d94:	2300      	movs	r3, #0
 8001d96:	80fb      	strh	r3, [r7, #6]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	80bb      	strh	r3, [r7, #4]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	807b      	strh	r3, [r7, #2]

	
	LCD_Write_Cmd ( 0x2E ); 
 8001da0:	202e      	movs	r0, #46	; 0x2e
 8001da2:	f7ff fde7 	bl	8001974 <LCD_Write_Cmd>
	
	usR = LCD_Read_Data (); 	/*FIRST READ OUT DUMMY DATA*/
 8001da6:	f7ff fe03 	bl	80019b0 <LCD_Read_Data>
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
	
	usR = LCD_Read_Data ();  	/*READ OUT RED DATA  */
 8001dae:	f7ff fdff 	bl	80019b0 <LCD_Read_Data>
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
	usB = LCD_Read_Data ();  	/*READ OUT BLUE DATA*/
 8001db6:	f7ff fdfb 	bl	80019b0 <LCD_Read_Data>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	807b      	strh	r3, [r7, #2]
	usG = LCD_Read_Data ();  	/*READ OUT GREEN DATA*/	
 8001dbe:	f7ff fdf7 	bl	80019b0 <LCD_Read_Data>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80bb      	strh	r3, [r7, #4]
	
  return ( ( ( usR >> 11 ) << 11 ) | ( ( usG >> 10 ) << 5 ) | ( usB >> 11 ) );
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	0adb      	lsrs	r3, r3, #11
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	02db      	lsls	r3, r3, #11
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	88bb      	ldrh	r3, [r7, #4]
 8001dd2:	0a9b      	lsrs	r3, r3, #10
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	015b      	lsls	r3, r3, #5
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	0adb      	lsrs	r3, r3, #11
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	4313      	orrs	r3, r2
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	b29b      	uxth	r3, r3
	
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <LCD_GetPointPixel>:


uint16_t LCD_GetPointPixel ( uint16_t usCOLUMN, uint16_t usPAGE )
{ 
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	80fb      	strh	r3, [r7, #6]
 8001e00:	4613      	mov	r3, r2
 8001e02:	80bb      	strh	r3, [r7, #4]
	uint16_t usPixelData;

	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 8001e04:	88b9      	ldrh	r1, [r7, #4]
 8001e06:	88f8      	ldrh	r0, [r7, #6]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f7ff fef6 	bl	8001bfc <LCD_OpenWindow>
	
	usPixelData = LCD_Read_PixelData ();
 8001e10:	f7ff ffbd 	bl	8001d8e <LCD_Read_PixelData>
 8001e14:	4603      	mov	r3, r0
 8001e16:	81fb      	strh	r3, [r7, #14]
	
	return usPixelData;
 8001e18:	89fb      	ldrh	r3, [r7, #14]
	
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	80bb      	strh	r3, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 8001e36:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <LCD_DrawChar+0xb0>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <LCD_DrawChar+0x20>
 8001e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e42:	e000      	b.n	8001e46 <LCD_DrawChar+0x22>
 8001e44:	2300      	movs	r3, #0
 8001e46:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <LCD_DrawChar+0xb0>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <LCD_DrawChar+0x30>
 8001e50:	2300      	movs	r3, #0
 8001e52:	e001      	b.n	8001e58 <LCD_DrawChar+0x34>
 8001e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e58:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	3b20      	subs	r3, #32
 8001e5e:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001e60:	88b9      	ldrh	r1, [r7, #4]
 8001e62:	88f8      	ldrh	r0, [r7, #6]
 8001e64:	2310      	movs	r3, #16
 8001e66:	2208      	movs	r2, #8
 8001e68:	f7ff fec8 	bl	8001bfc <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001e6c:	202c      	movs	r0, #44	; 0x2c
 8001e6e:	f7ff fd81 	bl	8001974 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001e72:	2300      	movs	r3, #0
 8001e74:	75bb      	strb	r3, [r7, #22]
 8001e76:	e024      	b.n	8001ec2 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	7dbb      	ldrb	r3, [r7, #22]
 8001e7c:	4916      	ldr	r1, [pc, #88]	; (8001ed8 <LCD_DrawChar+0xb4>)
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	440a      	add	r2, r1
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001e88:	2300      	movs	r3, #0
 8001e8a:	757b      	strb	r3, [r7, #21]
 8001e8c:	e013      	b.n	8001eb6 <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 8001e98:	8a7b      	ldrh	r3, [r7, #18]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fd78 	bl	8001990 <LCD_Write_Data>
 8001ea0:	e003      	b.n	8001eaa <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 8001ea2:	8a3b      	ldrh	r3, [r7, #16]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fd73 	bl	8001990 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001eb0:	7d7b      	ldrb	r3, [r7, #21]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	757b      	strb	r3, [r7, #21]
 8001eb6:	7d7b      	ldrb	r3, [r7, #21]
 8001eb8:	2b07      	cmp	r3, #7
 8001eba:	d9e8      	bls.n	8001e8e <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001ebc:	7dbb      	ldrb	r3, [r7, #22]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	75bb      	strb	r3, [r7, #22]
 8001ec2:	7dbb      	ldrb	r3, [r7, #22]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d9d7      	bls.n	8001e78 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000a18 	.word	0x20000a18
 8001ed8:	08011118 	.word	0x08011118

08001edc <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	603a      	str	r2, [r7, #0]
 8001ee6:	80fb      	strh	r3, [r7, #6]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001eec:	e01c      	b.n	8001f28 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	2be8      	cmp	r3, #232	; 0xe8
 8001ef2:	d904      	bls.n	8001efe <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001ef8:	88bb      	ldrh	r3, [r7, #4]
 8001efa:	3310      	adds	r3, #16
 8001efc:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001efe:	88bb      	ldrh	r3, [r7, #4]
 8001f00:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001f04:	d903      	bls.n	8001f0e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001f06:	2300      	movs	r3, #0
 8001f08:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	88b9      	ldrh	r1, [r7, #4]
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff84 	bl	8001e24 <LCD_DrawChar>
		
		pStr ++;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	3308      	adds	r3, #8
 8001f26:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1de      	bne.n	8001eee <LCD_DrawString+0x12>
		
	}
	
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	80fb      	strh	r3, [r7, #6]
 8001f44:	460b      	mov	r3, r1
 8001f46:	80bb      	strh	r3, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	2bef      	cmp	r3, #239	; 0xef
 8001f50:	d809      	bhi.n	8001f66 <LCD_DrawDot+0x2c>
 8001f52:	88bb      	ldrh	r3, [r7, #4]
 8001f54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f58:	d205      	bcs.n	8001f66 <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 8001f5a:	88b9      	ldrh	r1, [r7, #4]
 8001f5c:	88f8      	ldrh	r0, [r7, #6]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	2201      	movs	r2, #1
 8001f62:	f7ff fe4b 	bl	8001bfc <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff fe9f 	bl	8001cae <LCD_FillColor>

}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <LCD_DrawCircle>:

void LCD_DrawCircle ( uint16_t usC, uint16_t usP, uint16_t R, uint16_t usColor)
{	
 8001f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4604      	mov	r4, r0
 8001f82:	4608      	mov	r0, r1
 8001f84:	4611      	mov	r1, r2
 8001f86:	461a      	mov	r2, r3
 8001f88:	4623      	mov	r3, r4
 8001f8a:	80fb      	strh	r3, [r7, #6]
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	80bb      	strh	r3, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	803b      	strh	r3, [r7, #0]
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001fa4:	e05a      	b.n	800205c <LCD_DrawCircle+0xe4>
			int x = usC + R*cos(i);
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fa97 	bl	80004dc <__aeabi_i2d>
 8001fae:	4604      	mov	r4, r0
 8001fb0:	460d      	mov	r5, r1
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fa91 	bl	80004dc <__aeabi_i2d>
 8001fba:	4680      	mov	r8, r0
 8001fbc:	4689      	mov	r9, r1
 8001fbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fc2:	f00d ff43 	bl	800fe4c <cos>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4640      	mov	r0, r8
 8001fcc:	4649      	mov	r1, r9
 8001fce:	f7fe faef 	bl	80005b0 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4629      	mov	r1, r5
 8001fda:	f7fe f933 	bl	8000244 <__adddf3>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7fe fd93 	bl	8000b10 <__aeabi_d2iz>
 8001fea:	4603      	mov	r3, r0
 8001fec:	60fb      	str	r3, [r7, #12]
			int y = usP + R*sin(i);
 8001fee:	88bb      	ldrh	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fa73 	bl	80004dc <__aeabi_i2d>
 8001ff6:	4604      	mov	r4, r0
 8001ff8:	460d      	mov	r5, r1
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa6d 	bl	80004dc <__aeabi_i2d>
 8002002:	4680      	mov	r8, r0
 8002004:	4689      	mov	r9, r1
 8002006:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800200a:	f00d ff65 	bl	800fed8 <sin>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4640      	mov	r0, r8
 8002014:	4649      	mov	r1, r9
 8002016:	f7fe facb 	bl	80005b0 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe f90f 	bl	8000244 <__adddf3>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fd6f 	bl	8000b10 <__aeabi_d2iz>
 8002032:	4603      	mov	r3, r0
 8002034:	60bb      	str	r3, [r7, #8]
			LCD_DrawDot(x,y,usColor);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	b29b      	uxth	r3, r3
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	b291      	uxth	r1, r2
 800203e:	883a      	ldrh	r2, [r7, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff7a 	bl	8001f3a <LCD_DrawDot>
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 8002046:	a30e      	add	r3, pc, #56	; (adr r3, 8002080 <LCD_DrawCircle+0x108>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002050:	f7fe f8f8 	bl	8000244 <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800205c:	a30a      	add	r3, pc, #40	; (adr r3, 8002088 <LCD_DrawCircle+0x110>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002066:	f7fe fd15 	bl	8000a94 <__aeabi_dcmplt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d19a      	bne.n	8001fa6 <LCD_DrawCircle+0x2e>
		}
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800207c:	f3af 8000 	nop.w
 8002080:	47ae147b 	.word	0x47ae147b
 8002084:	3f847ae1 	.word	0x3f847ae1
 8002088:	54442d18 	.word	0x54442d18
 800208c:	401921fb 	.word	0x401921fb

08002090 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	4604      	mov	r4, r0
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	461a      	mov	r2, r3
 800209e:	4623      	mov	r3, r4
 80020a0:	80fb      	strh	r3, [r7, #6]
 80020a2:	4603      	mov	r3, r0
 80020a4:	80bb      	strh	r3, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70fb      	strb	r3, [r7, #3]
 80020aa:	4613      	mov	r3, r2
 80020ac:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	3b20      	subs	r3, #32
 80020b2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80020b4:	88b9      	ldrh	r1, [r7, #4]
 80020b6:	88f8      	ldrh	r0, [r7, #6]
 80020b8:	2310      	movs	r3, #16
 80020ba:	2208      	movs	r2, #8
 80020bc:	f7ff fd9e 	bl	8001bfc <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80020c0:	202c      	movs	r0, #44	; 0x2c
 80020c2:	f7ff fc57 	bl	8001974 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80020c6:	2300      	movs	r3, #0
 80020c8:	73bb      	strb	r3, [r7, #14]
 80020ca:	e024      	b.n	8002116 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80020cc:	7b3a      	ldrb	r2, [r7, #12]
 80020ce:	7bbb      	ldrb	r3, [r7, #14]
 80020d0:	4915      	ldr	r1, [pc, #84]	; (8002128 <LCD_DrawChar_Color+0x98>)
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	440a      	add	r2, r1
 80020d6:	4413      	add	r3, r2
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80020dc:	2300      	movs	r3, #0
 80020de:	737b      	strb	r3, [r7, #13]
 80020e0:	e013      	b.n	800210a <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80020ec:	8c3b      	ldrh	r3, [r7, #32]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fc4e 	bl	8001990 <LCD_Write_Data>
 80020f4:	e003      	b.n	80020fe <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80020f6:	883b      	ldrh	r3, [r7, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fc49 	bl	8001990 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002104:	7b7b      	ldrb	r3, [r7, #13]
 8002106:	3301      	adds	r3, #1
 8002108:	737b      	strb	r3, [r7, #13]
 800210a:	7b7b      	ldrb	r3, [r7, #13]
 800210c:	2b07      	cmp	r3, #7
 800210e:	d9e8      	bls.n	80020e2 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	3301      	adds	r3, #1
 8002114:	73bb      	strb	r3, [r7, #14]
 8002116:	7bbb      	ldrb	r3, [r7, #14]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d9d7      	bls.n	80020cc <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}
 8002126:	bf00      	nop
 8002128:	08011118 	.word	0x08011118

0800212c <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af02      	add	r7, sp, #8
 8002132:	4603      	mov	r3, r0
 8002134:	460a      	mov	r2, r1
 8002136:	80fb      	strh	r3, [r7, #6]
 8002138:	4613      	mov	r3, r2
 800213a:	80bb      	strh	r3, [r7, #4]
  LCD_Clear_Color ( usX - 10, usY, 20, 1, RED);
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	3b0a      	subs	r3, #10
 8002140:	b298      	uxth	r0, r3
 8002142:	88b9      	ldrh	r1, [r7, #4]
 8002144:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2301      	movs	r3, #1
 800214c:	2214      	movs	r2, #20
 800214e:	f7ff fdfb 	bl	8001d48 <LCD_Clear_Color>
  LCD_Clear_Color ( usX, usY - 10, 1, 20, RED);
 8002152:	88bb      	ldrh	r3, [r7, #4]
 8002154:	3b0a      	subs	r3, #10
 8002156:	b299      	uxth	r1, r3
 8002158:	88f8      	ldrh	r0, [r7, #6]
 800215a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2314      	movs	r3, #20
 8002162:	2201      	movs	r2, #1
 8002164:	f7ff fdf0 	bl	8001d48 <LCD_Clear_Color>
	
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b087      	sub	sp, #28
 8002174:	af02      	add	r7, sp, #8
 8002176:	60ba      	str	r2, [r7, #8]
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	81fb      	strh	r3, [r7, #14]
 800217e:	460b      	mov	r3, r1
 8002180:	81bb      	strh	r3, [r7, #12]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002186:	e01f      	b.n	80021c8 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	2be8      	cmp	r3, #232	; 0xe8
 800218c:	d904      	bls.n	8002198 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800218e:	2300      	movs	r3, #0
 8002190:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8002192:	89bb      	ldrh	r3, [r7, #12]
 8002194:	3310      	adds	r3, #16
 8002196:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002198:	89bb      	ldrh	r3, [r7, #12]
 800219a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800219e:	d903      	bls.n	80021a8 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80021a0:	2300      	movs	r3, #0
 80021a2:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	88fc      	ldrh	r4, [r7, #6]
 80021ae:	89b9      	ldrh	r1, [r7, #12]
 80021b0:	89f8      	ldrh	r0, [r7, #14]
 80021b2:	8c3b      	ldrh	r3, [r7, #32]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4623      	mov	r3, r4
 80021b8:	f7ff ff6a 	bl	8002090 <LCD_DrawChar_Color>
		
		pStr ++;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3301      	adds	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80021c2:	89fb      	ldrh	r3, [r7, #14]
 80021c4:	3308      	adds	r3, #8
 80021c6:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1db      	bne.n	8002188 <LCD_DrawString_Color+0x18>
		
	}
	
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}
	...

080021dc <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	f200 80a0 	bhi.w	8002330 <LCD_GramScan+0x154>
 80021f0:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <LCD_GramScan+0x1c>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	08002209 	.word	0x08002209
 80021fc:	08002253 	.word	0x08002253
 8002200:	0800229d 	.word	0x0800229d
 8002204:	080022e7 	.word	0x080022e7

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002208:	2036      	movs	r0, #54	; 0x36
 800220a:	f7ff fbb3 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 800220e:	20c8      	movs	r0, #200	; 0xc8
 8002210:	f7ff fbbe 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002214:	202a      	movs	r0, #42	; 0x2a
 8002216:	f7ff fbad 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff fbb8 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002220:	2000      	movs	r0, #0
 8002222:	f7ff fbb5 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8002226:	2000      	movs	r0, #0
 8002228:	f7ff fbb2 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 800222c:	20ef      	movs	r0, #239	; 0xef
 800222e:	f7ff fbaf 	bl	8001990 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002232:	202b      	movs	r0, #43	; 0x2b
 8002234:	f7ff fb9e 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8002238:	2000      	movs	r0, #0
 800223a:	f7ff fba9 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff fba6 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff fba3 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 800224a:	203f      	movs	r0, #63	; 0x3f
 800224c:	f7ff fba0 	bl	8001990 <LCD_Write_Data>
					
		  break;
 8002250:	e06e      	b.n	8002330 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002252:	2036      	movs	r0, #54	; 0x36
 8002254:	f7ff fb8e 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8002258:	2068      	movs	r0, #104	; 0x68
 800225a:	f7ff fb99 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 800225e:	202a      	movs	r0, #42	; 0x2a
 8002260:	f7ff fb88 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002264:	2000      	movs	r0, #0
 8002266:	f7ff fb93 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff fb90 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff fb8d 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8002276:	203f      	movs	r0, #63	; 0x3f
 8002278:	f7ff fb8a 	bl	8001990 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800227c:	202b      	movs	r0, #43	; 0x2b
 800227e:	f7ff fb79 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff fb84 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff fb81 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff fb7e 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8002294:	20ef      	movs	r0, #239	; 0xef
 8002296:	f7ff fb7b 	bl	8001990 <LCD_Write_Data>
		
		  break;
 800229a:	e049      	b.n	8002330 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 800229c:	2036      	movs	r0, #54	; 0x36
 800229e:	f7ff fb69 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 80022a2:	2028      	movs	r0, #40	; 0x28
 80022a4:	f7ff fb74 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80022a8:	202a      	movs	r0, #42	; 0x2a
 80022aa:	f7ff fb63 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff fb6e 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7ff fb6b 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fb68 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 80022c0:	203f      	movs	r0, #63	; 0x3f
 80022c2:	f7ff fb65 	bl	8001990 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80022c6:	202b      	movs	r0, #43	; 0x2b
 80022c8:	f7ff fb54 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff fb5f 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7ff fb5c 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff fb59 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 80022de:	20ef      	movs	r0, #239	; 0xef
 80022e0:	f7ff fb56 	bl	8001990 <LCD_Write_Data>
		  
		  break;
 80022e4:	e024      	b.n	8002330 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 80022e6:	2036      	movs	r0, #54	; 0x36
 80022e8:	f7ff fb44 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 80022ec:	2048      	movs	r0, #72	; 0x48
 80022ee:	f7ff fb4f 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80022f2:	202a      	movs	r0, #42	; 0x2a
 80022f4:	f7ff fb3e 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff fb49 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff fb46 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fb43 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 800230a:	20ef      	movs	r0, #239	; 0xef
 800230c:	f7ff fb40 	bl	8001990 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002310:	202b      	movs	r0, #43	; 0x2b
 8002312:	f7ff fb2f 	bl	8001974 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002316:	2000      	movs	r0, #0
 8002318:	f7ff fb3a 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff fb37 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002322:	2001      	movs	r0, #1
 8002324:	f7ff fb34 	bl	8001990 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8002328:	203f      	movs	r0, #63	; 0x3f
 800232a:	f7ff fb31 	bl	8001990 <LCD_Write_Data>
		
	    break;
 800232e:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8002330:	202c      	movs	r0, #44	; 0x2c
 8002332:	f7ff fb1f 	bl	8001974 <LCD_Write_Cmd>
	
	
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop

08002340 <LCD_Darkmode_Toggle>:

void LCD_Darkmode_Toggle(){
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
	extern unsigned char *petStats;
	if (!darkmode_toggle) {
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <LCD_Darkmode_Toggle+0x30>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d106      	bne.n	800235a <LCD_Darkmode_Toggle+0x1a>
		darkmode_toggle = 1;
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <LCD_Darkmode_Toggle+0x30>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
		petStats = sleep1;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <LCD_Darkmode_Toggle+0x34>)
 8002354:	4a08      	ldr	r2, [pc, #32]	; (8002378 <LCD_Darkmode_Toggle+0x38>)
 8002356:	601a      	str	r2, [r3, #0]
	}
	else {
		darkmode_toggle = 0;
		petStats = normal;
	}
}
 8002358:	e005      	b.n	8002366 <LCD_Darkmode_Toggle+0x26>
		darkmode_toggle = 0;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <LCD_Darkmode_Toggle+0x30>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
		petStats = normal;
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <LCD_Darkmode_Toggle+0x34>)
 8002362:	4a06      	ldr	r2, [pc, #24]	; (800237c <LCD_Darkmode_Toggle+0x3c>)
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000a18 	.word	0x20000a18
 8002374:	20000004 	.word	0x20000004
 8002378:	0802da38 	.word	0x0802da38
 800237c:	080269b0 	.word	0x080269b0

08002380 <LCD_DrawPicture>:

void LCD_DrawPicture(uint16_t StartX, uint16_t StartY,unsigned char *pic) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	603a      	str	r2, [r7, #0]
 800238a:	80fb      	strh	r3, [r7, #6]
 800238c:	460b      	mov	r3, r1
 800238e:	80bb      	strh	r3, [r7, #4]
		uint32_t i = 8, len;
 8002390:	2308      	movs	r3, #8
 8002392:	617b      	str	r3, [r7, #20]
		uint16_t temp, x, y;

		x = ((uint16_t) (pic[2] << 8) + pic[3]) - 1;	  	//get width
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	3302      	adds	r3, #2
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	b29a      	uxth	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	3303      	adds	r3, #3
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	823b      	strh	r3, [r7, #16]
		y = ((uint16_t) (pic[4] << 8) + pic[5]) - 1;	  	//get height
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3304      	adds	r3, #4
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	3305      	adds	r3, #5
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	81fb      	strh	r3, [r7, #14]

		LCD_OpenWindow ( StartX, StartY, 120,120);
 80023cc:	88b9      	ldrh	r1, [r7, #4]
 80023ce:	88f8      	ldrh	r0, [r7, #6]
 80023d0:	2378      	movs	r3, #120	; 0x78
 80023d2:	2278      	movs	r2, #120	; 0x78
 80023d4:	f7ff fc12 	bl	8001bfc <LCD_OpenWindow>
		//LCD_FillColor ( StartX*StartY ,0x01010);
		LCD_Write_Cmd(CMD_SetPixel);					//fillcolor
 80023d8:	202c      	movs	r0, #44	; 0x2c
 80023da:	f7ff facb 	bl	8001974 <LCD_Write_Cmd>
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3302      	adds	r3, #2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	3303      	adds	r3, #3
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
				* ((uint16_t) (pic[4] << 8) + pic[5]);   	//calculate size
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	3204      	adds	r2, #4
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	b292      	uxth	r2, r2
 80023fc:	0212      	lsls	r2, r2, #8
 80023fe:	b292      	uxth	r2, r2
 8002400:	4611      	mov	r1, r2
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	3205      	adds	r2, #5
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	440a      	add	r2, r1
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	005b      	lsls	r3, r3, #1
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8002410:	60bb      	str	r3, [r7, #8]

		while (i < (len + 8)) {							 	//start from the 9th
 8002412:	e020      	b.n	8002456 <LCD_DrawPicture+0xd6>
			temp = (uint16_t) (pic[i] << 8) | pic[i + 1];	//2bits once
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	b29a      	uxth	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	6839      	ldr	r1, [r7, #0]
 8002428:	440b      	add	r3, r1
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	827b      	strh	r3, [r7, #18]
			if(darkmode_toggle){ //Flip Black and White In Darkmode
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <LCD_DrawPicture+0xec>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <LCD_DrawPicture+0xc8>
				if(temp==0xffff) temp = 0x0000;
 800243a:	8a7b      	ldrh	r3, [r7, #18]
 800243c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <LCD_DrawPicture+0xc8>
 8002444:	2300      	movs	r3, #0
 8002446:	827b      	strh	r3, [r7, #18]
			}
			LCD_Write_Data(temp);
 8002448:	8a7b      	ldrh	r3, [r7, #18]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff faa0 	bl	8001990 <LCD_Write_Data>
			i = i + 2;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3302      	adds	r3, #2
 8002454:	617b      	str	r3, [r7, #20]
		while (i < (len + 8)) {							 	//start from the 9th
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3308      	adds	r3, #8
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3d9      	bcc.n	8002414 <LCD_DrawPicture+0x94>
		}
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000a18 	.word	0x20000a18

08002470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002476:	f003 fd13 	bl	8005ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247a:	f000 f9d5 	bl	8002828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247e:	f000 fb45 	bl	8002b0c <MX_GPIO_Init>
  MX_FSMC_Init();
 8002482:	f000 fbf7 	bl	8002c74 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8002486:	f000 fb17 	bl	8002ab8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800248a:	f000 fa2d 	bl	80028e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800248e:	f000 fa77 	bl	8002980 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002492:	f000 fac3 	bl	8002a1c <MX_TIM5_Init>
  	 * Module Initializations:
  	 * rtc.c
  	 * XPT2046.c
  	 * LCD
  	 */
	RTC_Init(&hrtc);
 8002496:	48a2      	ldr	r0, [pc, #648]	; (8002720 <main+0x2b0>)
 8002498:	f002 f8f6 	bl	8004688 <RTC_Init>
	macXPT2046_CS_DISABLE();
 800249c:	2200      	movs	r2, #0
 800249e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a2:	48a0      	ldr	r0, [pc, #640]	; (8002724 <main+0x2b4>)
 80024a4:	f004 f83b 	bl	800651e <HAL_GPIO_WritePin>
	LCD_INIT();
 80024a8:	f7ff fa1e 	bl	80018e8 <LCD_INIT>

	RTC_Get();
 80024ac:	f002 f9cc 	bl	8004848 <RTC_Get>
	get_TimeStamp(&real_time);
 80024b0:	489d      	ldr	r0, [pc, #628]	; (8002728 <main+0x2b8>)
 80024b2:	f002 fb67 	bl	8004b84 <get_TimeStamp>
	lastdrink_raw = RTC_raw();
 80024b6:	f002 fb4f 	bl	8004b58 <RTC_raw>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4a9b      	ldr	r2, [pc, #620]	; (800272c <main+0x2bc>)
 80024be:	6013      	str	r3, [r2, #0]
	//Flow control of UI
	uint8_t mode = 0; //Current Mode: Mode 0 = Home, Mode 1 = Drink Water, Mode 3 = Pet
 80024c0:	2300      	movs	r3, #0
 80024c2:	77fb      	strb	r3, [r7, #31]
	uint8_t mode_new = 0; //To Determine Whether A Mode is Updated
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
	uint8_t render_done=0;//Set To 1 Whenever Screen Need to Update
 80024c8:	2300      	movs	r3, #0
 80024ca:	73bb      	strb	r3, [r7, #14]
	uint8_t pet_update=0; //Set To 1 Whenever Pet Image Need to Update
 80024cc:	2300      	movs	r3, #0
 80024ce:	77bb      	strb	r3, [r7, #30]


	//Calibration of TouchPad
	while( ! XPT2046_Touch_Calibrate () );
 80024d0:	bf00      	nop
 80024d2:	f003 fa11 	bl	80058f8 <XPT2046_Touch_Calibrate>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0fa      	beq.n	80024d2 <main+0x62>
	DHT11_ReadData(&DHT11_data);
 80024dc:	4894      	ldr	r0, [pc, #592]	; (8002730 <main+0x2c0>)
 80024de:	f7ff f9ae 	bl	800183e <DHT11_ReadData>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 80024e2:	f002 fe31 	bl	8005148 <TIMER_INIT>
	timer_min(1);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f002 fe78 	bl	80051dc <timer_min>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 80024ec:	4991      	ldr	r1, [pc, #580]	; (8002734 <main+0x2c4>)
 80024ee:	4892      	ldr	r0, [pc, #584]	; (8002738 <main+0x2c8>)
 80024f0:	f003 fc1a 	bl	8005d28 <XPT2046_Get_TouchedPoint>
	  			&strXPT2046_TouchPara);

	  //!!Only For UI that is changing every moment, Just For Testing, Need Refactoring Later
	  if(mode==0) {
 80024f4:	7ffb      	ldrb	r3, [r7, #31]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d114      	bne.n	8002524 <main+0xb4>
		  RTC_Get();
 80024fa:	f002 f9a5 	bl	8004848 <RTC_Get>
		  UI_Home_Display_Date(real_time.ryear, real_time.rmon, real_time.rday);
 80024fe:	4b8a      	ldr	r3, [pc, #552]	; (8002728 <main+0x2b8>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	4a89      	ldr	r2, [pc, #548]	; (8002728 <main+0x2b8>)
 8002504:	7891      	ldrb	r1, [r2, #2]
 8002506:	4a88      	ldr	r2, [pc, #544]	; (8002728 <main+0x2b8>)
 8002508:	78d2      	ldrb	r2, [r2, #3]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fe64 	bl	80011d8 <UI_Home_Display_Date>
		  UI_Home_Display_Time(real_time.rhour, real_time.rmin, real_time.rsec);
 8002510:	4b85      	ldr	r3, [pc, #532]	; (8002728 <main+0x2b8>)
 8002512:	791b      	ldrb	r3, [r3, #4]
 8002514:	4a84      	ldr	r2, [pc, #528]	; (8002728 <main+0x2b8>)
 8002516:	7951      	ldrb	r1, [r2, #5]
 8002518:	4a83      	ldr	r2, [pc, #524]	; (8002728 <main+0x2b8>)
 800251a:	7992      	ldrb	r2, [r2, #6]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fe97 	bl	8001250 <UI_Home_Display_Time>
 8002522:	e006      	b.n	8002532 <main+0xc2>
	  }
	  else if (mode == 3){
 8002524:	7ffb      	ldrb	r3, [r7, #31]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d103      	bne.n	8002532 <main+0xc2>
		  RTC_Get();
 800252a:	f002 f98d 	bl	8004848 <RTC_Get>
		  UI_Stats_Update();
 800252e:	f7fe ff5b 	bl	80013e8 <UI_Stats_Update>
	  }
	  get_TimeStamp(&real_time);
 8002532:	487d      	ldr	r0, [pc, #500]	; (8002728 <main+0x2b8>)
 8002534:	f002 fb26 	bl	8004b84 <get_TimeStamp>
	  if (petStats != sleep1 && mode==0){
 8002538:	4b80      	ldr	r3, [pc, #512]	; (800273c <main+0x2cc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a80      	ldr	r2, [pc, #512]	; (8002740 <main+0x2d0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01b      	beq.n	800257a <main+0x10a>
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d118      	bne.n	800257a <main+0x10a>
		  if (DHT11_data.temp_int > 27){
 8002548:	4b79      	ldr	r3, [pc, #484]	; (8002730 <main+0x2c0>)
 800254a:	789b      	ldrb	r3, [r3, #2]
 800254c:	2b1b      	cmp	r3, #27
 800254e:	d905      	bls.n	800255c <main+0xec>
			  petStats = hot1;
 8002550:	4b7a      	ldr	r3, [pc, #488]	; (800273c <main+0x2cc>)
 8002552:	4a7c      	ldr	r2, [pc, #496]	; (8002744 <main+0x2d4>)
 8002554:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	77bb      	strb	r3, [r7, #30]
 800255a:	e00e      	b.n	800257a <main+0x10a>
		  }
		  else if (DHT11_data.temp_int < 24){
 800255c:	4b74      	ldr	r3, [pc, #464]	; (8002730 <main+0x2c0>)
 800255e:	789b      	ldrb	r3, [r3, #2]
 8002560:	2b17      	cmp	r3, #23
 8002562:	d805      	bhi.n	8002570 <main+0x100>
			  petStats = cold1;
 8002564:	4b75      	ldr	r3, [pc, #468]	; (800273c <main+0x2cc>)
 8002566:	4a78      	ldr	r2, [pc, #480]	; (8002748 <main+0x2d8>)
 8002568:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 800256a:	2301      	movs	r3, #1
 800256c:	77bb      	strb	r3, [r7, #30]
 800256e:	e004      	b.n	800257a <main+0x10a>
		  }
		  else {
			  petStats = normal;
 8002570:	4b72      	ldr	r3, [pc, #456]	; (800273c <main+0x2cc>)
 8002572:	4a76      	ldr	r2, [pc, #472]	; (800274c <main+0x2dc>)
 8002574:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	77bb      	strb	r3, [r7, #30]
		  }
	  }

	  do {
		  //Home Buttons
		  if(mode==0){
 800257a:	7ffb      	ldrb	r3, [r7, #31]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d139      	bne.n	80025f4 <main+0x184>
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {mode_new = 1; break;}
 8002580:	496d      	ldr	r1, [pc, #436]	; (8002738 <main+0x2c8>)
 8002582:	4873      	ldr	r0, [pc, #460]	; (8002750 <main+0x2e0>)
 8002584:	f7fe fd18 	bl	8000fb8 <Check_touchkey>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <main+0x124>
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e067      	b.n	8002664 <main+0x1f4>
			  if(Check_touchkey(&home_dark_mode,&Coordinate)) {mode_new = 2; break;}
 8002594:	4968      	ldr	r1, [pc, #416]	; (8002738 <main+0x2c8>)
 8002596:	486f      	ldr	r0, [pc, #444]	; (8002754 <main+0x2e4>)
 8002598:	f7fe fd0e 	bl	8000fb8 <Check_touchkey>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <main+0x138>
 80025a2:	2302      	movs	r3, #2
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e05d      	b.n	8002664 <main+0x1f4>
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep1) {petStats = happy1;}; break;}
 80025a8:	4963      	ldr	r1, [pc, #396]	; (8002738 <main+0x2c8>)
 80025aa:	486b      	ldr	r0, [pc, #428]	; (8002758 <main+0x2e8>)
 80025ac:	f7fe fd04 	bl	8000fb8 <Check_touchkey>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <main+0x15c>
 80025b6:	2301      	movs	r3, #1
 80025b8:	77bb      	strb	r3, [r7, #30]
 80025ba:	4b60      	ldr	r3, [pc, #384]	; (800273c <main+0x2cc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a60      	ldr	r2, [pc, #384]	; (8002740 <main+0x2d0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d04e      	beq.n	8002662 <main+0x1f2>
 80025c4:	4b5d      	ldr	r3, [pc, #372]	; (800273c <main+0x2cc>)
 80025c6:	4a65      	ldr	r2, [pc, #404]	; (800275c <main+0x2ec>)
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e04a      	b.n	8002662 <main+0x1f2>
			  if(Check_touchkey(&home_stats,&Coordinate)) {mode_new = 3; break;}
 80025cc:	495a      	ldr	r1, [pc, #360]	; (8002738 <main+0x2c8>)
 80025ce:	4864      	ldr	r0, [pc, #400]	; (8002760 <main+0x2f0>)
 80025d0:	f7fe fcf2 	bl	8000fb8 <Check_touchkey>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <main+0x170>
 80025da:	2303      	movs	r3, #3
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	e041      	b.n	8002664 <main+0x1f4>
			  if(Check_touchkey(&home_config,&Coordinate)) {mode_new = 4; break;}
 80025e0:	4955      	ldr	r1, [pc, #340]	; (8002738 <main+0x2c8>)
 80025e2:	4860      	ldr	r0, [pc, #384]	; (8002764 <main+0x2f4>)
 80025e4:	f7fe fce8 	bl	8000fb8 <Check_touchkey>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d03a      	beq.n	8002664 <main+0x1f4>
 80025ee:	2304      	movs	r3, #4
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e037      	b.n	8002664 <main+0x1f4>
		  }
		  //Other Buttons In Other Screen
		  else if (mode==3){//Statistics
 80025f4:	7ffb      	ldrb	r3, [r7, #31]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d109      	bne.n	800260e <main+0x19e>
			  if(Check_touchkey(&stats_home,&Coordinate)) {mode_new = 0; break;}
 80025fa:	494f      	ldr	r1, [pc, #316]	; (8002738 <main+0x2c8>)
 80025fc:	485a      	ldr	r0, [pc, #360]	; (8002768 <main+0x2f8>)
 80025fe:	f7fe fcdb 	bl	8000fb8 <Check_touchkey>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d02d      	beq.n	8002664 <main+0x1f4>
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e02a      	b.n	8002664 <main+0x1f4>
		  }else if (mode==4){//Configuration
 800260e:	7ffb      	ldrb	r3, [r7, #31]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d116      	bne.n	8002642 <main+0x1d2>
			  if(Check_touchkey(&config_home,&Coordinate)) {mode_new = 0; break;}
 8002614:	4948      	ldr	r1, [pc, #288]	; (8002738 <main+0x2c8>)
 8002616:	4855      	ldr	r0, [pc, #340]	; (800276c <main+0x2fc>)
 8002618:	f7fe fcce 	bl	8000fb8 <Check_touchkey>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <main+0x1b8>
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	e01d      	b.n	8002664 <main+0x1f4>
			  if(Check_touchkey(&config_set_time,&Coordinate)) {mode_new = 5; USART_READ_FLAG = 1; break;}
 8002628:	4943      	ldr	r1, [pc, #268]	; (8002738 <main+0x2c8>)
 800262a:	4851      	ldr	r0, [pc, #324]	; (8002770 <main+0x300>)
 800262c:	f7fe fcc4 	bl	8000fb8 <Check_touchkey>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <main+0x1f4>
 8002636:	2305      	movs	r3, #5
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	4b4e      	ldr	r3, [pc, #312]	; (8002774 <main+0x304>)
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e010      	b.n	8002664 <main+0x1f4>
		  }else if (mode==5){
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d10d      	bne.n	8002664 <main+0x1f4>
			  if(Check_touchkey(&time_set_back,&Coordinate)) {mode_new = 4; USART_READ_FLAG = 0; break;}
 8002648:	493b      	ldr	r1, [pc, #236]	; (8002738 <main+0x2c8>)
 800264a:	484b      	ldr	r0, [pc, #300]	; (8002778 <main+0x308>)
 800264c:	f7fe fcb4 	bl	8000fb8 <Check_touchkey>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <main+0x1f4>
 8002656:	2304      	movs	r3, #4
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	4b46      	ldr	r3, [pc, #280]	; (8002774 <main+0x304>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e000      	b.n	8002664 <main+0x1f4>
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep1) {petStats = happy1;}; break;}
 8002662:	bf00      	nop
		  }

	  } while (0);

	  //Reset Coordinates
	  XPT2046_Reset_TouchPoint(&Coordinate);
 8002664:	4834      	ldr	r0, [pc, #208]	; (8002738 <main+0x2c8>)
 8002666:	f003 fbe6 	bl	8005e36 <XPT2046_Reset_TouchPoint>

	  if(mode != mode_new){
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	7ffa      	ldrb	r2, [r7, #31]
 800266e:	429a      	cmp	r2, r3
 8002670:	d003      	beq.n	800267a <main+0x20a>
		  mode = mode_new;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	77fb      	strb	r3, [r7, #31]
		  render_done = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	73bb      	strb	r3, [r7, #14]
	  }


	  //Render Pet Image If Updated
	  if(pet_update){
 800267a:	7fbb      	ldrb	r3, [r7, #30]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <main+0x222>
		  UI_Home_Display_Pet(60,70,petStats);
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <main+0x2cc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	2146      	movs	r1, #70	; 0x46
 8002688:	203c      	movs	r0, #60	; 0x3c
 800268a:	f7fe fe1b 	bl	80012c4 <UI_Home_Display_Pet>
		  pet_update = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	77bb      	strb	r3, [r7, #30]
	  }

	  //Flag Enables Every 30 Seconds
	  if(DHT11_SCHEDULE_FLAG){
 8002692:	4b3a      	ldr	r3, [pc, #232]	; (800277c <main+0x30c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <main+0x240>
		  DHT11_ReadData(&DHT11_data);
 800269a:	4825      	ldr	r0, [pc, #148]	; (8002730 <main+0x2c0>)
 800269c:	f7ff f8cf 	bl	800183e <DHT11_ReadData>
		  DHT11_SCHEDULE_FLAG = 0;
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <main+0x30c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
		  if(mode==0) UI_Home_Display_DHT11();
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <main+0x240>
 80026ac:	f7fe fe1c 	bl	80012e8 <UI_Home_Display_DHT11>
	  }

	  //Read Buffer when flag on
	  if(USART_READ_FLAG){
 80026b0:	4b30      	ldr	r3, [pc, #192]	; (8002774 <main+0x304>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a3 	beq.w	8002800 <main+0x390>

		  uint8_t valid_input = HAL_UART_Receive(&huart1,USART_DATE_BUFFER,15,100)==HAL_OK;
 80026ba:	2364      	movs	r3, #100	; 0x64
 80026bc:	220f      	movs	r2, #15
 80026be:	4930      	ldr	r1, [pc, #192]	; (8002780 <main+0x310>)
 80026c0:	4830      	ldr	r0, [pc, #192]	; (8002784 <main+0x314>)
 80026c2:	f005 fbf0 	bl	8007ea6 <HAL_UART_Receive>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	777b      	strb	r3, [r7, #29]
		  if(valid_input){//Check If data is Numeric
 80026d4:	7f7b      	ldrb	r3, [r7, #29]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d014      	beq.n	8002704 <main+0x294>
			  for(int i=0; i<14; ++i){
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e00e      	b.n	80026fe <main+0x28e>
				  uint8_t int_value = USART_DATE_BUFFER[i]  - '0';
 80026e0:	4a27      	ldr	r2, [pc, #156]	; (8002780 <main+0x310>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	3b30      	subs	r3, #48	; 0x30
 80026ea:	75fb      	strb	r3, [r7, #23]
				  if(!(int_value >= 0 && int_value <= 9)){valid_input = 0; break;}
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b09      	cmp	r3, #9
 80026f0:	d902      	bls.n	80026f8 <main+0x288>
 80026f2:	2300      	movs	r3, #0
 80026f4:	777b      	strb	r3, [r7, #29]
 80026f6:	e005      	b.n	8002704 <main+0x294>
			  for(int i=0; i<14; ++i){
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	3301      	adds	r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b0d      	cmp	r3, #13
 8002702:	dded      	ble.n	80026e0 <main+0x270>
			  }
		  }
		  if(!valid_input){//Invalid Input
 8002704:	7f7b      	ldrb	r3, [r7, #29]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d142      	bne.n	8002790 <main+0x320>
			  LCD_DrawString(20, 100, "Waiting For USART Response");
 800270a:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <main+0x318>)
 800270c:	2164      	movs	r1, #100	; 0x64
 800270e:	2014      	movs	r0, #20
 8002710:	f7ff fbe4 	bl	8001edc <LCD_DrawString>
			  LCD_DrawString(20, 130, "(yyyymmddhhmmss)");
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <main+0x31c>)
 8002716:	2182      	movs	r1, #130	; 0x82
 8002718:	2014      	movs	r0, #20
 800271a:	f7ff fbdf 	bl	8001edc <LCD_DrawString>
 800271e:	e06f      	b.n	8002800 <main+0x390>
 8002720:	20000a1c 	.word	0x20000a1c
 8002724:	40011400 	.word	0x40011400
 8002728:	20000b80 	.word	0x20000b80
 800272c:	20000b8c 	.word	0x20000b8c
 8002730:	20000b74 	.word	0x20000b74
 8002734:	20000010 	.word	0x20000010
 8002738:	20000b7c 	.word	0x20000b7c
 800273c:	20000004 	.word	0x20000004
 8002740:	0802da38 	.word	0x0802da38
 8002744:	0801f928 	.word	0x0801f928
 8002748:	08011818 	.word	0x08011818
 800274c:	080269b0 	.word	0x080269b0
 8002750:	08011708 	.word	0x08011708
 8002754:	08011718 	.word	0x08011718
 8002758:	08011728 	.word	0x08011728
 800275c:	080188a0 	.word	0x080188a0
 8002760:	08011738 	.word	0x08011738
 8002764:	08011748 	.word	0x08011748
 8002768:	08011758 	.word	0x08011758
 800276c:	08011778 	.word	0x08011778
 8002770:	08011768 	.word	0x08011768
 8002774:	20000b94 	.word	0x20000b94
 8002778:	08011788 	.word	0x08011788
 800277c:	20000008 	.word	0x20000008
 8002780:	20000b98 	.word	0x20000b98
 8002784:	20000af0 	.word	0x20000af0
 8002788:	0801104c 	.word	0x0801104c
 800278c:	08011068 	.word	0x08011068
		  }
		  else{//Update Date Time
			  char* t = USART_DATE_BUFFER;
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <main+0x3a4>)
 8002792:	613b      	str	r3, [r7, #16]
			  uint16_t dt[6];//yearmonth, day, hour, min, sec
			  sscanf(t, "%04d%02d%02d%02d%02d%02d", &dt[0], &dt[1],&dt[2],&dt[3],&dt[4],&dt[5]);
 8002794:	463b      	mov	r3, r7
 8002796:	1c99      	adds	r1, r3, #2
 8002798:	463a      	mov	r2, r7
 800279a:	463b      	mov	r3, r7
 800279c:	330a      	adds	r3, #10
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	463b      	mov	r3, r7
 80027a2:	3308      	adds	r3, #8
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	463b      	mov	r3, r7
 80027a8:	3306      	adds	r3, #6
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	463b      	mov	r3, r7
 80027ae:	3304      	adds	r3, #4
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	460b      	mov	r3, r1
 80027b4:	4918      	ldr	r1, [pc, #96]	; (8002818 <main+0x3a8>)
 80027b6:	6938      	ldr	r0, [r7, #16]
 80027b8:	f005 fe9c 	bl	80084f4 <sscanf>


			  //Update RTC Success
			  if(RTC_Set(dt[0],dt[1],dt[2],dt[3],dt[4],dt[5])==0){
 80027bc:	8838      	ldrh	r0, [r7, #0]
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	b259      	sxtb	r1, r3
 80027c2:	88bb      	ldrh	r3, [r7, #4]
 80027c4:	b2dc      	uxtb	r4, r3
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	b2dd      	uxtb	r5, r3
 80027ca:	893b      	ldrh	r3, [r7, #8]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	897a      	ldrh	r2, [r7, #10]
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	9201      	str	r2, [sp, #4]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	462b      	mov	r3, r5
 80027d8:	4622      	mov	r2, r4
 80027da:	f001 ff8b 	bl	80046f4 <RTC_Set>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10d      	bne.n	8002800 <main+0x390>

				  //Update Flag And UI
				  USART_READ_FLAG = 0;
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <main+0x3ac>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
				  LCD_Clear(0, 100, 250,150);
 80027ea:	2396      	movs	r3, #150	; 0x96
 80027ec:	22fa      	movs	r2, #250	; 0xfa
 80027ee:	2164      	movs	r1, #100	; 0x64
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff fa7b 	bl	8001cec <LCD_Clear>
				  LCD_DrawString(30, 100, "Done...");
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <main+0x3b0>)
 80027f8:	2164      	movs	r1, #100	; 0x64
 80027fa:	201e      	movs	r0, #30
 80027fc:	f7ff fb6e 	bl	8001edc <LCD_DrawString>
		  }

	  }

	  //Render LCD If Enter New Mode
	  Render(&mode_new, &render_done,petStats);
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <main+0x3b4>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	f107 010e 	add.w	r1, r7, #14
 8002808:	f107 030f 	add.w	r3, r7, #15
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fbfd 	bl	800100c <Render>
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8002812:	e66b      	b.n	80024ec <main+0x7c>
 8002814:	20000b98 	.word	0x20000b98
 8002818:	0801107c 	.word	0x0801107c
 800281c:	20000b94 	.word	0x20000b94
 8002820:	08011098 	.word	0x08011098
 8002824:	20000004 	.word	0x20000004

08002828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b096      	sub	sp, #88	; 0x58
 800282c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800282e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002832:	2228      	movs	r2, #40	; 0x28
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f005 fe54 	bl	80084e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800285c:	2305      	movs	r3, #5
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002866:	2300      	movs	r3, #0
 8002868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800286a:	2301      	movs	r3, #1
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800286e:	2301      	movs	r3, #1
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002872:	2302      	movs	r3, #2
 8002874:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800287c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002880:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fe90 	bl	80065ac <HAL_RCC_OscConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002892:	f000 fa53 	bl	8002d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002896:	230f      	movs	r3, #15
 8002898:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800289a:	2302      	movs	r3, #2
 800289c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	2102      	movs	r1, #2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 f8de 	bl	8006a74 <HAL_RCC_ClockConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80028be:	f000 fa3d 	bl	8002d3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028c2:	2301      	movs	r3, #1
 80028c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ca:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fa8c 	bl	8006dec <HAL_RCCEx_PeriphCLKConfig>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80028da:	f000 fa2f 	bl	8002d3c <Error_Handler>
  }
}
 80028de:	bf00      	nop
 80028e0:	3758      	adds	r7, #88	; 0x58
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028fc:	463b      	mov	r3, r7
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <MX_TIM2_Init+0x94>)
 8002906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800290a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <MX_TIM2_Init+0x94>)
 800290e:	2247      	movs	r2, #71	; 0x47
 8002910:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <MX_TIM2_Init+0x94>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <MX_TIM2_Init+0x94>)
 800291a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800291e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <MX_TIM2_Init+0x94>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <MX_TIM2_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800292c:	4813      	ldr	r0, [pc, #76]	; (800297c <MX_TIM2_Init+0x94>)
 800292e:	f004 fd87 	bl	8007440 <HAL_TIM_Base_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002938:	f000 fa00 	bl	8002d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800293c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002942:	f107 0308 	add.w	r3, r7, #8
 8002946:	4619      	mov	r1, r3
 8002948:	480c      	ldr	r0, [pc, #48]	; (800297c <MX_TIM2_Init+0x94>)
 800294a:	f004 ff34 	bl	80077b6 <HAL_TIM_ConfigClockSource>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002954:	f000 f9f2 	bl	8002d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002958:	2300      	movs	r3, #0
 800295a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002960:	463b      	mov	r3, r7
 8002962:	4619      	mov	r1, r3
 8002964:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_TIM2_Init+0x94>)
 8002966:	f005 f962 	bl	8007c2e <HAL_TIMEx_MasterConfigSynchronization>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002970:	f000 f9e4 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002974:	bf00      	nop
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000a30 	.word	0x20000a30

08002980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002986:	f107 0308 	add.w	r3, r7, #8
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002994:	463b      	mov	r3, r7
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <MX_TIM3_Init+0x94>)
 800299e:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <MX_TIM3_Init+0x98>)
 80029a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <MX_TIM3_Init+0x94>)
 80029a4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80029a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <MX_TIM3_Init+0x94>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <MX_TIM3_Init+0x94>)
 80029b2:	f248 32d5 	movw	r2, #33749	; 0x83d5
 80029b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <MX_TIM3_Init+0x94>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <MX_TIM3_Init+0x94>)
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029c4:	4813      	ldr	r0, [pc, #76]	; (8002a14 <MX_TIM3_Init+0x94>)
 80029c6:	f004 fd3b 	bl	8007440 <HAL_TIM_Base_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80029d0:	f000 f9b4 	bl	8002d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	4619      	mov	r1, r3
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <MX_TIM3_Init+0x94>)
 80029e2:	f004 fee8 	bl	80077b6 <HAL_TIM_ConfigClockSource>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80029ec:	f000 f9a6 	bl	8002d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029f8:	463b      	mov	r3, r7
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_TIM3_Init+0x94>)
 80029fe:	f005 f916 	bl	8007c2e <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002a08:	f000 f998 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000a70 	.word	0x20000a70
 8002a18:	40000400 	.word	0x40000400

08002a1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a30:	463b      	mov	r3, r7
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <MX_TIM5_Init+0x98>)
 8002a3c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a40:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002a44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a4e:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8002a52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a5c:	2280      	movs	r2, #128	; 0x80
 8002a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a60:	4813      	ldr	r0, [pc, #76]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a62:	f004 fced 	bl	8007440 <HAL_TIM_Base_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002a6c:	f000 f966 	bl	8002d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a7e:	f004 fe9a 	bl	80077b6 <HAL_TIM_ConfigClockSource>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002a88:	f000 f958 	bl	8002d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a94:	463b      	mov	r3, r7
 8002a96:	4619      	mov	r1, r3
 8002a98:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <MX_TIM5_Init+0x94>)
 8002a9a:	f005 f8c8 	bl	8007c2e <HAL_TIMEx_MasterConfigSynchronization>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002aa4:	f000 f94a 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000ab0 	.word	0x20000ab0
 8002ab4:	40000c00 	.word	0x40000c00

08002ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <MX_USART1_UART_Init+0x4c>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <MX_USART1_UART_Init+0x50>)
 8002ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <MX_USART1_UART_Init+0x4c>)
 8002ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <MX_USART1_UART_Init+0x4c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <MX_USART1_UART_Init+0x4c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <MX_USART1_UART_Init+0x4c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <MX_USART1_UART_Init+0x4c>)
 8002ade:	220c      	movs	r2, #12
 8002ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <MX_USART1_UART_Init+0x4c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <MX_USART1_UART_Init+0x4c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aee:	4805      	ldr	r0, [pc, #20]	; (8002b04 <MX_USART1_UART_Init+0x4c>)
 8002af0:	f005 f8f3 	bl	8007cda <HAL_UART_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002afa:	f000 f91f 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000af0 	.word	0x20000af0
 8002b08:	40013800 	.word	0x40013800

08002b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b12:	f107 0318 	add.w	r3, r7, #24
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b20:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4a4e      	ldr	r2, [pc, #312]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2a:	6193      	str	r3, [r2, #24]
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4a48      	ldr	r2, [pc, #288]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b3e:	f043 0310 	orr.w	r3, r3, #16
 8002b42:	6193      	str	r3, [r2, #24]
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b50:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b56:	f043 0308 	orr.w	r3, r3, #8
 8002b5a:	6193      	str	r3, [r2, #24]
 8002b5c:	4b40      	ldr	r3, [pc, #256]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b68:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	4a3c      	ldr	r2, [pc, #240]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b6e:	f043 0320 	orr.w	r3, r3, #32
 8002b72:	6193      	str	r3, [r2, #24]
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b80:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	4a36      	ldr	r2, [pc, #216]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	6193      	str	r3, [r2, #24]
 8002b8c:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <MX_GPIO_Init+0x154>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2107      	movs	r1, #7
 8002b9c:	4831      	ldr	r0, [pc, #196]	; (8002c64 <MX_GPIO_Init+0x158>)
 8002b9e:	f003 fcbe 	bl	800651e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2140      	movs	r1, #64	; 0x40
 8002ba6:	482f      	ldr	r0, [pc, #188]	; (8002c64 <MX_GPIO_Init+0x158>)
 8002ba8:	f003 fcb9 	bl	800651e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	2123      	movs	r1, #35	; 0x23
 8002bb0:	482d      	ldr	r0, [pc, #180]	; (8002c68 <MX_GPIO_Init+0x15c>)
 8002bb2:	f003 fcb4 	bl	800651e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002bbc:	482b      	ldr	r0, [pc, #172]	; (8002c6c <MX_GPIO_Init+0x160>)
 8002bbe:	f003 fcae 	bl	800651e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 DHT11_Pin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8002bc2:	2347      	movs	r3, #71	; 0x47
 8002bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bd2:	f107 0318 	add.w	r3, r7, #24
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4822      	ldr	r0, [pc, #136]	; (8002c64 <MX_GPIO_Init+0x158>)
 8002bda:	f003 faf1 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bde:	2308      	movs	r3, #8
 8002be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be6:	2301      	movs	r3, #1
 8002be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bea:	f107 0318 	add.w	r3, r7, #24
 8002bee:	4619      	mov	r1, r3
 8002bf0:	481c      	ldr	r0, [pc, #112]	; (8002c64 <MX_GPIO_Init+0x158>)
 8002bf2:	f003 fae5 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <MX_GPIO_Init+0x164>)
 8002bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c02:	f107 0318 	add.w	r3, r7, #24
 8002c06:	4619      	mov	r1, r3
 8002c08:	4816      	ldr	r0, [pc, #88]	; (8002c64 <MX_GPIO_Init+0x158>)
 8002c0a:	f003 fad9 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002c0e:	2323      	movs	r3, #35	; 0x23
 8002c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1e:	f107 0318 	add.w	r3, r7, #24
 8002c22:	4619      	mov	r1, r3
 8002c24:	4810      	ldr	r0, [pc, #64]	; (8002c68 <MX_GPIO_Init+0x15c>)
 8002c26:	f003 facb 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002c2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c30:	2301      	movs	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c3c:	f107 0318 	add.w	r3, r7, #24
 8002c40:	4619      	mov	r1, r3
 8002c42:	480a      	ldr	r0, [pc, #40]	; (8002c6c <MX_GPIO_Init+0x160>)
 8002c44:	f003 fabc 	bl	80061c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	200a      	movs	r0, #10
 8002c4e:	f003 fa80 	bl	8006152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002c52:	200a      	movs	r0, #10
 8002c54:	f003 fa99 	bl	800618a <HAL_NVIC_EnableIRQ>

}
 8002c58:	bf00      	nop
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40011800 	.word	0x40011800
 8002c68:	40010c00 	.word	0x40010c00
 8002c6c:	40011400 	.word	0x40011400
 8002c70:	10210000 	.word	0x10210000

08002c74 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
 8002c88:	615a      	str	r2, [r3, #20]
 8002c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002c8c:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002c8e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002c92:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002c94:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002c96:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <MX_FSMC_Init+0xc0>)
 8002c98:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002c9a:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002cae:	2210      	movs	r2, #16
 8002cb0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002cca:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002cea:	230f      	movs	r3, #15
 8002cec:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002cee:	230f      	movs	r3, #15
 8002cf0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002cf2:	23ff      	movs	r3, #255	; 0xff
 8002cf4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002cf6:	230f      	movs	r3, #15
 8002cf8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002cfe:	2311      	movs	r3, #17
 8002d00:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4808      	ldr	r0, [pc, #32]	; (8002d30 <MX_FSMC_Init+0xbc>)
 8002d0e:	f004 fb53 	bl	80073b8 <HAL_SRAM_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002d18:	f000 f810 	bl	8002d3c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <MX_FSMC_Init+0xc4>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <MX_FSMC_Init+0xc4>)
 8002d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d26:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002d28:	bf00      	nop
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000b30 	.word	0x20000b30
 8002d34:	a0000104 	.word	0xa0000104
 8002d38:	40010000 	.word	0x40010000

08002d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <_putchar>:
#if defined(PRINTF_SUPPORT_FLOAT)
#include <float.h>
#endif

void _putchar(char character)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
	///注意这里的输出函数需要自己修改，我这里是设置了串口输出
    HAL_UART_Transmit(&huart1 ,(uint8_t*)&character, 1, HAL_MAX_DELAY);
 8002d52:	1df9      	adds	r1, r7, #7
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4803      	ldr	r0, [pc, #12]	; (8002d68 <_putchar+0x20>)
 8002d5c:	f005 f80a 	bl	8007d74 <HAL_UART_Transmit>
    // send char to console etc.
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000af0 	.word	0x20000af0

08002d6c <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d204      	bcs.n	8002d8e <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	701a      	strb	r2, [r3, #0]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4603      	mov	r3, r0
 8002da6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <_out_char+0x1e>
    _putchar(character);
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ffbc 	bl	8002d48 <_putchar>
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e002      	b.n	8002dee <_strnlen_s+0x16>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d004      	beq.n	8002e00 <_strnlen_s+0x28>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	603a      	str	r2, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f3      	bne.n	8002de8 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	1ad3      	subs	r3, r2, r3
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b2f      	cmp	r3, #47	; 0x2f
 8002e1e:	d904      	bls.n	8002e2a <_is_digit+0x1a>
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	2b39      	cmp	r3, #57	; 0x39
 8002e24:	d801      	bhi.n	8002e2a <_is_digit+0x1a>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <_is_digit+0x1c>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	b2db      	uxtb	r3, r3
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002e48:	e00e      	b.n	8002e68 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	1c59      	adds	r1, r3, #1
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6011      	str	r1, [r2, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	4403      	add	r3, r0
 8002e64:	3b30      	subs	r3, #48	; 0x30
 8002e66:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ffce 	bl	8002e10 <_is_digit>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e7      	bne.n	8002e4a <_atoi+0xe>
  }
  return i;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d125      	bne.n	8002eec <_out_rev+0x68>
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d120      	bne.n	8002eec <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e00a      	b.n	8002ec6 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	1c53      	adds	r3, r2, #1
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	68fc      	ldr	r4, [r7, #12]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	2020      	movs	r0, #32
 8002ebe:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d3f0      	bcc.n	8002eb0 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002ece:	e00d      	b.n	8002eec <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	4413      	add	r3, r2
 8002edc:	7818      	ldrb	r0, [r3, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	1c53      	adds	r3, r2, #1
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	68fc      	ldr	r4, [r7, #12]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	47a0      	blx	r4
  while (len) {
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ee      	bne.n	8002ed0 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002efc:	e007      	b.n	8002f0e <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	1c53      	adds	r3, r2, #1
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	68fc      	ldr	r4, [r7, #12]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	2020      	movs	r0, #32
 8002f0c:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d8f1      	bhi.n	8002efe <_out_rev+0x7a>
    }
  }

  return idx;
 8002f1a:	687b      	ldr	r3, [r7, #4]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd90      	pop	{r4, r7, pc}

08002f24 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af04      	add	r7, sp, #16
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d136      	bne.n	8002faa <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d018      	beq.n	8002f74 <_ntoa_format+0x50>
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <_ntoa_format+0x50>
 8002f4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <_ntoa_format+0x3a>
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <_ntoa_format+0x50>
      width--;
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	3b01      	subs	r3, #1
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f64:	e006      	b.n	8002f74 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	61fa      	str	r2, [r7, #28]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4413      	add	r3, r2
 8002f70:	2230      	movs	r2, #48	; 0x30
 8002f72:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d20a      	bcs.n	8002f92 <_ntoa_format+0x6e>
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b1f      	cmp	r3, #31
 8002f80:	d9f1      	bls.n	8002f66 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f82:	e006      	b.n	8002f92 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	61fa      	str	r2, [r7, #28]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	2230      	movs	r2, #48	; 0x30
 8002f90:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <_ntoa_format+0x86>
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d202      	bcs.n	8002faa <_ntoa_format+0x86>
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	d9ec      	bls.n	8002f84 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d058      	beq.n	8003066 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <_ntoa_format+0xc8>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <_ntoa_format+0xc8>
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d003      	beq.n	8002fd4 <_ntoa_format+0xb0>
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d10b      	bne.n	8002fec <_ntoa_format+0xc8>
      len--;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <_ntoa_format+0xc8>
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d102      	bne.n	8002fec <_ntoa_format+0xc8>
        len--;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d10f      	bne.n	8003012 <_ntoa_format+0xee>
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <_ntoa_format+0xee>
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b1f      	cmp	r3, #31
 8003000:	d807      	bhi.n	8003012 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	61fa      	str	r2, [r7, #28]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4413      	add	r3, r2
 800300c:	2278      	movs	r2, #120	; 0x78
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e01f      	b.n	8003052 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	2b10      	cmp	r3, #16
 8003016:	d10f      	bne.n	8003038 <_ntoa_format+0x114>
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <_ntoa_format+0x114>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b1f      	cmp	r3, #31
 8003026:	d807      	bhi.n	8003038 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	61fa      	str	r2, [r7, #28]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4413      	add	r3, r2
 8003032:	2258      	movs	r2, #88	; 0x58
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e00c      	b.n	8003052 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	2b02      	cmp	r3, #2
 800303c:	d109      	bne.n	8003052 <_ntoa_format+0x12e>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	2b1f      	cmp	r3, #31
 8003042:	d806      	bhi.n	8003052 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	61fa      	str	r2, [r7, #28]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4413      	add	r3, r2
 800304e:	2262      	movs	r2, #98	; 0x62
 8003050:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	2b1f      	cmp	r3, #31
 8003056:	d806      	bhi.n	8003066 <_ntoa_format+0x142>
      buf[len++] = '0';
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	61fa      	str	r2, [r7, #28]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4413      	add	r3, r2
 8003062:	2230      	movs	r2, #48	; 0x30
 8003064:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2b1f      	cmp	r3, #31
 800306a:	d824      	bhi.n	80030b6 <_ntoa_format+0x192>
    if (negative) {
 800306c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <_ntoa_format+0x160>
      buf[len++] = '-';
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	61fa      	str	r2, [r7, #28]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4413      	add	r3, r2
 800307e:	222d      	movs	r2, #45	; 0x2d
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e018      	b.n	80030b6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	61fa      	str	r2, [r7, #28]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4413      	add	r3, r2
 8003098:	222b      	movs	r2, #43	; 0x2b
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e00b      	b.n	80030b6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	61fa      	str	r2, [r7, #28]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4413      	add	r3, r2
 80030b2:	2220      	movs	r2, #32
 80030b4:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	9303      	str	r3, [sp, #12]
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	9302      	str	r3, [sp, #8]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff fed9 	bl	8002e84 <_out_rev>
 80030d2:	4603      	mov	r3, r0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b096      	sub	sp, #88	; 0x58
 80030e0:	af08      	add	r7, sp, #32
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80030ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80030f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f6:	f023 0310 	bic.w	r3, r3, #16
 80030fa:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80030fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <_ntoa_long+0x30>
 8003106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d032      	beq.n	8003172 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800310c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003110:	fbb3 f2f2 	udiv	r2, r3, r2
 8003114:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003116:	fb01 f202 	mul.w	r2, r1, r2
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003124:	2b09      	cmp	r3, #9
 8003126:	d804      	bhi.n	8003132 <_ntoa_long+0x56>
 8003128:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800312c:	3330      	adds	r3, #48	; 0x30
 800312e:	b2da      	uxtb	r2, r3
 8003130:	e00d      	b.n	800314e <_ntoa_long+0x72>
 8003132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <_ntoa_long+0x64>
 800313c:	2241      	movs	r2, #65	; 0x41
 800313e:	e000      	b.n	8003142 <_ntoa_long+0x66>
 8003140:	2261      	movs	r2, #97	; 0x61
 8003142:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003146:	4413      	add	r3, r2
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3b0a      	subs	r3, #10
 800314c:	b2da      	uxtb	r2, r3
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	1c59      	adds	r1, r3, #1
 8003152:	6379      	str	r1, [r7, #52]	; 0x34
 8003154:	3338      	adds	r3, #56	; 0x38
 8003156:	443b      	add	r3, r7
 8003158:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800315c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800315e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <_ntoa_long+0x96>
 800316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316e:	2b1f      	cmp	r3, #31
 8003170:	d9cc      	bls.n	800310c <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003174:	9306      	str	r3, [sp, #24]
 8003176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003178:	9305      	str	r3, [sp, #20]
 800317a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317c:	9304      	str	r3, [sp, #16]
 800317e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003180:	9303      	str	r3, [sp, #12]
 8003182:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003186:	9302      	str	r3, [sp, #8]
 8003188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fec3 	bl	8002f24 <_ntoa_format>
 800319e:	4603      	mov	r3, r0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3738      	adds	r7, #56	; 0x38
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b096      	sub	sp, #88	; 0x58
 80031ac:	af08      	add	r7, sp, #32
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80031ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031be:	4313      	orrs	r3, r2
 80031c0:	d103      	bne.n	80031ca <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80031c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c4:	f023 0310 	bic.w	r3, r3, #16
 80031c8:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80031ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <_ntoa_long_long+0x34>
 80031d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031d8:	4313      	orrs	r3, r2
 80031da:	d037      	beq.n	800324c <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80031dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80031e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031e4:	f7fd fd2c 	bl	8000c40 <__aeabi_uldivmod>
 80031e8:	4613      	mov	r3, r2
 80031ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80031ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	d804      	bhi.n	8003200 <_ntoa_long_long+0x58>
 80031f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031fa:	3330      	adds	r3, #48	; 0x30
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	e00d      	b.n	800321c <_ntoa_long_long+0x74>
 8003200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <_ntoa_long_long+0x66>
 800320a:	2241      	movs	r2, #65	; 0x41
 800320c:	e000      	b.n	8003210 <_ntoa_long_long+0x68>
 800320e:	2261      	movs	r2, #97	; 0x61
 8003210:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003214:	4413      	add	r3, r2
 8003216:	b2db      	uxtb	r3, r3
 8003218:	3b0a      	subs	r3, #10
 800321a:	b2da      	uxtb	r2, r3
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	1c59      	adds	r1, r3, #1
 8003220:	6379      	str	r1, [r7, #52]	; 0x34
 8003222:	3338      	adds	r3, #56	; 0x38
 8003224:	443b      	add	r3, r7
 8003226:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800322a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800322e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003232:	f7fd fd05 	bl	8000c40 <__aeabi_uldivmod>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800323e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003242:	4313      	orrs	r3, r2
 8003244:	d002      	beq.n	800324c <_ntoa_long_long+0xa4>
 8003246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003248:	2b1f      	cmp	r3, #31
 800324a:	d9c7      	bls.n	80031dc <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800324c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003250:	9206      	str	r2, [sp, #24]
 8003252:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003254:	9205      	str	r2, [sp, #20]
 8003256:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003258:	9204      	str	r2, [sp, #16]
 800325a:	9303      	str	r3, [sp, #12]
 800325c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003260:	9302      	str	r3, [sp, #8]
 8003262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	f107 0310 	add.w	r3, r7, #16
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff fe56 	bl	8002f24 <_ntoa_format>
 8003278:	4603      	mov	r3, r0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3738      	adds	r7, #56	; 0x38
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	0000      	movs	r0, r0
 8003284:	0000      	movs	r0, r0
	...

08003288 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b09d      	sub	sp, #116	; 0x74
 800328c:	af06      	add	r7, sp, #24
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80032a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80032aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032ae:	f7fd fbe7 	bl	8000a80 <__aeabi_dcmpeq>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10f      	bne.n	80032d8 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80032b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ba:	9303      	str	r3, [sp, #12]
 80032bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032be:	9302      	str	r3, [sp, #8]
 80032c0:	2303      	movs	r3, #3
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	4b82      	ldr	r3, [pc, #520]	; (80034d0 <_ftoa+0x248>)
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff fdd8 	bl	8002e84 <_out_rev>
 80032d4:	4603      	mov	r3, r0
 80032d6:	e224      	b.n	8003722 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80032e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032e4:	f7fd fbd6 	bl	8000a94 <__aeabi_dcmplt>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00f      	beq.n	800330e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80032ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032f0:	9303      	str	r3, [sp, #12]
 80032f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f4:	9302      	str	r3, [sp, #8]
 80032f6:	2304      	movs	r3, #4
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	4b76      	ldr	r3, [pc, #472]	; (80034d4 <_ftoa+0x24c>)
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7ff fdbd 	bl	8002e84 <_out_rev>
 800330a:	4603      	mov	r3, r0
 800330c:	e209      	b.n	8003722 <_ftoa+0x49a>
  if (value > DBL_MAX)
 800330e:	f04f 32ff 	mov.w	r2, #4294967295
 8003312:	4b71      	ldr	r3, [pc, #452]	; (80034d8 <_ftoa+0x250>)
 8003314:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003318:	f7fd fbda 	bl	8000ad0 <__aeabi_dcmpgt>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01d      	beq.n	800335e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <_ftoa+0xa8>
 800332c:	4b6b      	ldr	r3, [pc, #428]	; (80034dc <_ftoa+0x254>)
 800332e:	e000      	b.n	8003332 <_ftoa+0xaa>
 8003330:	4b6b      	ldr	r3, [pc, #428]	; (80034e0 <_ftoa+0x258>)
 8003332:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003334:	f002 0204 	and.w	r2, r2, #4
 8003338:	2a00      	cmp	r2, #0
 800333a:	d001      	beq.n	8003340 <_ftoa+0xb8>
 800333c:	2204      	movs	r2, #4
 800333e:	e000      	b.n	8003342 <_ftoa+0xba>
 8003340:	2203      	movs	r2, #3
 8003342:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003344:	9103      	str	r1, [sp, #12]
 8003346:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003348:	9102      	str	r1, [sp, #8]
 800334a:	9201      	str	r2, [sp, #4]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7ff fd95 	bl	8002e84 <_out_rev>
 800335a:	4603      	mov	r3, r0
 800335c:	e1e1      	b.n	8003722 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800335e:	a358      	add	r3, pc, #352	; (adr r3, 80034c0 <_ftoa+0x238>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003368:	f7fd fbb2 	bl	8000ad0 <__aeabi_dcmpgt>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <_ftoa+0xfe>
 8003372:	a355      	add	r3, pc, #340	; (adr r3, 80034c8 <_ftoa+0x240>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800337c:	f7fd fb8a 	bl	8000a94 <__aeabi_dcmplt>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d011      	beq.n	80033aa <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003388:	9304      	str	r3, [sp, #16]
 800338a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338c:	9303      	str	r3, [sp, #12]
 800338e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003390:	9302      	str	r3, [sp, #8]
 8003392:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003396:	e9cd 2300 	strd	r2, r3, [sp]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f9c9 	bl	8003738 <_etoa>
 80033a6:	4603      	mov	r3, r0
 80033a8:	e1bb      	b.n	8003722 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033bc:	f7fd fb6a 	bl	8000a94 <__aeabi_dcmplt>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00e      	beq.n	80033e4 <_ftoa+0x15c>
    negative = true;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 80033cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	f7fc ff32 	bl	8000240 <__aeabi_dsub>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80033e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80033ee:	2306      	movs	r3, #6
 80033f0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80033f2:	e00a      	b.n	800340a <_ftoa+0x182>
    buf[len++] = '0';
 80033f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	657a      	str	r2, [r7, #84]	; 0x54
 80033fa:	3358      	adds	r3, #88	; 0x58
 80033fc:	443b      	add	r3, r7
 80033fe:	2230      	movs	r2, #48	; 0x30
 8003400:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003406:	3b01      	subs	r3, #1
 8003408:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800340a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800340c:	2b1f      	cmp	r3, #31
 800340e:	d802      	bhi.n	8003416 <_ftoa+0x18e>
 8003410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003412:	2b09      	cmp	r3, #9
 8003414:	d8ee      	bhi.n	80033f4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800341a:	f7fd fb79 	bl	8000b10 <__aeabi_d2iz>
 800341e:	4603      	mov	r3, r0
 8003420:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8003422:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003424:	f7fd f85a 	bl	80004dc <__aeabi_i2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003430:	f7fc ff06 	bl	8000240 <__aeabi_dsub>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	4a29      	ldr	r2, [pc, #164]	; (80034e4 <_ftoa+0x25c>)
 800343e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fd f8b2 	bl	80005b0 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8003454:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003458:	f7fd fb82 	bl	8000b60 <__aeabi_d2uiz>
 800345c:	4603      	mov	r3, r0
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8003460:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003462:	f7fd f82b 	bl	80004bc <__aeabi_ui2d>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800346e:	f7fc fee7 	bl	8000240 <__aeabi_dsub>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <_ftoa+0x260>)
 8003480:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003484:	f7fd fb24 	bl	8000ad0 <__aeabi_dcmpgt>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d02e      	beq.n	80034ec <_ftoa+0x264>
    ++frac;
 800348e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003490:	3301      	adds	r3, #1
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003494:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003496:	f7fd f811 	bl	80004bc <__aeabi_ui2d>
 800349a:	4a12      	ldr	r2, [pc, #72]	; (80034e4 <_ftoa+0x25c>)
 800349c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f7fd fb09 	bl	8000abc <__aeabi_dcmpge>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d032      	beq.n	8003516 <_ftoa+0x28e>
      frac = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b6:	3301      	adds	r3, #1
 80034b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ba:	e02c      	b.n	8003516 <_ftoa+0x28e>
 80034bc:	f3af 8000 	nop.w
 80034c0:	00000000 	.word	0x00000000
 80034c4:	41cdcd65 	.word	0x41cdcd65
 80034c8:	00000000 	.word	0x00000000
 80034cc:	c1cdcd65 	.word	0xc1cdcd65
 80034d0:	080110a0 	.word	0x080110a0
 80034d4:	080110a4 	.word	0x080110a4
 80034d8:	7fefffff 	.word	0x7fefffff
 80034dc:	080110ac 	.word	0x080110ac
 80034e0:	080110b4 	.word	0x080110b4
 80034e4:	08011798 	.word	0x08011798
 80034e8:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	4b8e      	ldr	r3, [pc, #568]	; (800372c <_ftoa+0x4a4>)
 80034f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80034f6:	f7fd facd 	bl	8000a94 <__aeabi_dcmplt>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <_ftoa+0x288>
 8003506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003512:	3301      	adds	r3, #1
 8003514:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8003516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003518:	2b00      	cmp	r3, #0
 800351a:	d133      	bne.n	8003584 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800351c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800351e:	f7fc ffdd 	bl	80004dc <__aeabi_i2d>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800352a:	f7fc fe89 	bl	8000240 <__aeabi_dsub>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003536:	2301      	movs	r3, #1
 8003538:	461c      	mov	r4, r3
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	4b7b      	ldr	r3, [pc, #492]	; (800372c <_ftoa+0x4a4>)
 8003540:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003544:	f7fd faa6 	bl	8000a94 <__aeabi_dcmplt>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <_ftoa+0x2ca>
 800354e:	2300      	movs	r3, #0
 8003550:	461c      	mov	r4, r3
 8003552:	b2e3      	uxtb	r3, r4
 8003554:	f083 0301 	eor.w	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <_ftoa+0x2ea>
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	4b72      	ldr	r3, [pc, #456]	; (800372c <_ftoa+0x4a4>)
 8003564:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003568:	f7fd fab2 	bl	8000ad0 <__aeabi_dcmpgt>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d04c      	beq.n	800360c <_ftoa+0x384>
 8003572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d069      	beq.n	8003650 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800357c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357e:	3301      	adds	r3, #1
 8003580:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003582:	e065      	b.n	8003650 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 8003584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003586:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003588:	e01f      	b.n	80035ca <_ftoa+0x342>
      --count;
 800358a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358c:	3b01      	subs	r3, #1
 800358e:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8003590:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003592:	4b67      	ldr	r3, [pc, #412]	; (8003730 <_ftoa+0x4a8>)
 8003594:	fba3 2301 	umull	r2, r3, r3, r1
 8003598:	08da      	lsrs	r2, r3, #3
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	1aca      	subs	r2, r1, r3
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a8:	1c59      	adds	r1, r3, #1
 80035aa:	6579      	str	r1, [r7, #84]	; 0x54
 80035ac:	3230      	adds	r2, #48	; 0x30
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	3358      	adds	r3, #88	; 0x58
 80035b2:	443b      	add	r3, r7
 80035b4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80035b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ba:	4a5d      	ldr	r2, [pc, #372]	; (8003730 <_ftoa+0x4a8>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	08db      	lsrs	r3, r3, #3
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80035ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035cc:	2b1f      	cmp	r3, #31
 80035ce:	d9dc      	bls.n	800358a <_ftoa+0x302>
 80035d0:	e009      	b.n	80035e6 <_ftoa+0x35e>
        break;
 80035d2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80035d4:	e007      	b.n	80035e6 <_ftoa+0x35e>
      buf[len++] = '0';
 80035d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	657a      	str	r2, [r7, #84]	; 0x54
 80035dc:	3358      	adds	r3, #88	; 0x58
 80035de:	443b      	add	r3, r7
 80035e0:	2230      	movs	r2, #48	; 0x30
 80035e2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80035e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e8:	2b1f      	cmp	r3, #31
 80035ea:	d804      	bhi.n	80035f6 <_ftoa+0x36e>
 80035ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ee:	1e5a      	subs	r2, r3, #1
 80035f0:	647a      	str	r2, [r7, #68]	; 0x44
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1ef      	bne.n	80035d6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80035f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f8:	2b1f      	cmp	r3, #31
 80035fa:	d829      	bhi.n	8003650 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80035fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	657a      	str	r2, [r7, #84]	; 0x54
 8003602:	3358      	adds	r3, #88	; 0x58
 8003604:	443b      	add	r3, r7
 8003606:	222e      	movs	r2, #46	; 0x2e
 8003608:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800360c:	e020      	b.n	8003650 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800360e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003610:	4b48      	ldr	r3, [pc, #288]	; (8003734 <_ftoa+0x4ac>)
 8003612:	fb83 1302 	smull	r1, r3, r3, r2
 8003616:	1099      	asrs	r1, r3, #2
 8003618:	17d3      	asrs	r3, r2, #31
 800361a:	1ac9      	subs	r1, r1, r3
 800361c:	460b      	mov	r3, r1
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	1ad1      	subs	r1, r2, r3
 8003626:	b2ca      	uxtb	r2, r1
 8003628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362a:	1c59      	adds	r1, r3, #1
 800362c:	6579      	str	r1, [r7, #84]	; 0x54
 800362e:	3230      	adds	r2, #48	; 0x30
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	3358      	adds	r3, #88	; 0x58
 8003634:	443b      	add	r3, r7
 8003636:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800363a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363c:	4a3d      	ldr	r2, [pc, #244]	; (8003734 <_ftoa+0x4ac>)
 800363e:	fb82 1203 	smull	r1, r2, r2, r3
 8003642:	1092      	asrs	r2, r2, #2
 8003644:	17db      	asrs	r3, r3, #31
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003652:	2b1f      	cmp	r3, #31
 8003654:	d9db      	bls.n	800360e <_ftoa+0x386>
 8003656:	e000      	b.n	800365a <_ftoa+0x3d2>
      break;
 8003658:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800365a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d123      	bne.n	80036ac <_ftoa+0x424>
 8003664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01e      	beq.n	80036ac <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800366e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003670:	2b00      	cmp	r3, #0
 8003672:	d014      	beq.n	800369e <_ftoa+0x416>
 8003674:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <_ftoa+0x3fe>
 800367c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <_ftoa+0x416>
      width--;
 8003686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003688:	3b01      	subs	r3, #1
 800368a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800368c:	e007      	b.n	800369e <_ftoa+0x416>
      buf[len++] = '0';
 800368e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	657a      	str	r2, [r7, #84]	; 0x54
 8003694:	3358      	adds	r3, #88	; 0x58
 8003696:	443b      	add	r3, r7
 8003698:	2230      	movs	r2, #48	; 0x30
 800369a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800369e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d202      	bcs.n	80036ac <_ftoa+0x424>
 80036a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a8:	2b1f      	cmp	r3, #31
 80036aa:	d9f0      	bls.n	800368e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80036ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ae:	2b1f      	cmp	r3, #31
 80036b0:	d827      	bhi.n	8003702 <_ftoa+0x47a>
    if (negative) {
 80036b2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <_ftoa+0x444>
      buf[len++] = '-';
 80036ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	657a      	str	r2, [r7, #84]	; 0x54
 80036c0:	3358      	adds	r3, #88	; 0x58
 80036c2:	443b      	add	r3, r7
 80036c4:	222d      	movs	r2, #45	; 0x2d
 80036c6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80036ca:	e01a      	b.n	8003702 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80036d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	657a      	str	r2, [r7, #84]	; 0x54
 80036dc:	3358      	adds	r3, #88	; 0x58
 80036de:	443b      	add	r3, r7
 80036e0:	222b      	movs	r2, #43	; 0x2b
 80036e2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80036e6:	e00c      	b.n	8003702 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 80036e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <_ftoa+0x47a>
      buf[len++] = ' ';
 80036f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	657a      	str	r2, [r7, #84]	; 0x54
 80036f8:	3358      	adds	r3, #88	; 0x58
 80036fa:	443b      	add	r3, r7
 80036fc:	2220      	movs	r2, #32
 80036fe:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003704:	9303      	str	r3, [sp, #12]
 8003706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003708:	9302      	str	r3, [sp, #8]
 800370a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	f107 0310 	add.w	r3, r7, #16
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fbb2 	bl	8002e84 <_out_rev>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	375c      	adds	r7, #92	; 0x5c
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	bf00      	nop
 800372c:	3fe00000 	.word	0x3fe00000
 8003730:	cccccccd 	.word	0xcccccccd
 8003734:	66666667 	.word	0x66666667

08003738 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373c:	b09d      	sub	sp, #116	; 0x74
 800373e:	af06      	add	r7, sp, #24
 8003740:	61f8      	str	r0, [r7, #28]
 8003742:	61b9      	str	r1, [r7, #24]
 8003744:	617a      	str	r2, [r7, #20]
 8003746:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003748:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800374c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003750:	f7fd f996 	bl	8000a80 <__aeabi_dcmpeq>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d014      	beq.n	8003784 <_etoa+0x4c>
 800375a:	f04f 32ff 	mov.w	r2, #4294967295
 800375e:	4bc4      	ldr	r3, [pc, #784]	; (8003a70 <_etoa+0x338>)
 8003760:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003764:	f7fd f9b4 	bl	8000ad0 <__aeabi_dcmpgt>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <_etoa+0x4c>
 800376e:	f04f 32ff 	mov.w	r2, #4294967295
 8003772:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800377a:	f7fd f98b 	bl	8000a94 <__aeabi_dcmplt>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d014      	beq.n	80037ae <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003788:	9304      	str	r3, [sp, #16]
 800378a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800378e:	9303      	str	r3, [sp, #12]
 8003790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003794:	9302      	str	r3, [sp, #8]
 8003796:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800379a:	e9cd 2300 	strd	r2, r3, [sp]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	69f8      	ldr	r0, [r7, #28]
 80037a6:	f7ff fd6f 	bl	8003288 <_ftoa>
 80037aa:	4603      	mov	r3, r0
 80037ac:	e247      	b.n	8003c3e <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 80037ae:	2301      	movs	r3, #1
 80037b0:	461e      	mov	r6, r3
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037be:	f7fd f969 	bl	8000a94 <__aeabi_dcmplt>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <_etoa+0x94>
 80037c8:	2300      	movs	r3, #0
 80037ca:	461e      	mov	r6, r3
 80037cc:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 80037d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <_etoa+0xb8>
    value = -value;
 80037d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ec:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80037f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80037fc:	2306      	movs	r3, #6
 80037fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003802:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003806:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800380a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	0d0a      	lsrs	r2, r1, #20
 8003818:	2300      	movs	r3, #0
 800381a:	4613      	mov	r3, r2
 800381c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003820:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003824:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800382a:	4690      	mov	r8, r2
 800382c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003830:	4644      	mov	r4, r8
 8003832:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003836:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800383a:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800383e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003840:	f7fc fe4c 	bl	80004dc <__aeabi_i2d>
 8003844:	a37e      	add	r3, pc, #504	; (adr r3, 8003a40 <_etoa+0x308>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f7fc feb1 	bl	80005b0 <__aeabi_dmul>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	a37c      	add	r3, pc, #496	; (adr r3, 8003a48 <_etoa+0x310>)
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f7fc fcf2 	bl	8000244 <__adddf3>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4614      	mov	r4, r2
 8003866:	461d      	mov	r5, r3
 8003868:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	4b80      	ldr	r3, [pc, #512]	; (8003a74 <_etoa+0x33c>)
 8003872:	f7fc fce5 	bl	8000240 <__aeabi_dsub>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	a374      	add	r3, pc, #464	; (adr r3, 8003a50 <_etoa+0x318>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fe94 	bl	80005b0 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4620      	mov	r0, r4
 800388e:	4629      	mov	r1, r5
 8003890:	f7fc fcd8 	bl	8000244 <__adddf3>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f7fd f938 	bl	8000b10 <__aeabi_d2iz>
 80038a0:	4603      	mov	r3, r0
 80038a2:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80038a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80038a6:	f7fc fe19 	bl	80004dc <__aeabi_i2d>
 80038aa:	a36b      	add	r3, pc, #428	; (adr r3, 8003a58 <_etoa+0x320>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f7fc fe7e 	bl	80005b0 <__aeabi_dmul>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	4b6d      	ldr	r3, [pc, #436]	; (8003a78 <_etoa+0x340>)
 80038c2:	f7fc fcbf 	bl	8000244 <__adddf3>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	f7fd f91f 	bl	8000b10 <__aeabi_d2iz>
 80038d2:	4603      	mov	r3, r0
 80038d4:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80038d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80038d8:	f7fc fe00 	bl	80004dc <__aeabi_i2d>
 80038dc:	a360      	add	r3, pc, #384	; (adr r3, 8003a60 <_etoa+0x328>)
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f7fc fe65 	bl	80005b0 <__aeabi_dmul>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4614      	mov	r4, r2
 80038ec:	461d      	mov	r5, r3
 80038ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038f0:	f7fc fdf4 	bl	80004dc <__aeabi_i2d>
 80038f4:	a35c      	add	r3, pc, #368	; (adr r3, 8003a68 <_etoa+0x330>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f7fc fe59 	bl	80005b0 <__aeabi_dmul>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4620      	mov	r0, r4
 8003904:	4629      	mov	r1, r5
 8003906:	f7fc fc9b 	bl	8000240 <__aeabi_dsub>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8003912:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003916:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800391a:	f7fc fe49 	bl	80005b0 <__aeabi_dmul>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003928:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800392c:	17da      	asrs	r2, r3, #31
 800392e:	469a      	mov	sl, r3
 8003930:	4693      	mov	fp, r2
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800393e:	2200      	movs	r2, #0
 8003940:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003944:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003948:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	f7fc fc78 	bl	8000244 <__adddf3>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4690      	mov	r8, r2
 800395a:	4699      	mov	r9, r3
 800395c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003960:	f04f 0000 	mov.w	r0, #0
 8003964:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003968:	f7fc fc6a 	bl	8000240 <__aeabi_dsub>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4692      	mov	sl, r2
 8003972:	469b      	mov	fp, r3
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <_etoa+0x344>)
 800397a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800397e:	f7fc ff41 	bl	8000804 <__aeabi_ddiv>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	4b3c      	ldr	r3, [pc, #240]	; (8003a80 <_etoa+0x348>)
 8003990:	f7fc fc58 	bl	8000244 <__adddf3>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800399c:	f7fc ff32 	bl	8000804 <__aeabi_ddiv>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	4b35      	ldr	r3, [pc, #212]	; (8003a84 <_etoa+0x34c>)
 80039ae:	f7fc fc49 	bl	8000244 <__adddf3>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80039ba:	f7fc ff23 	bl	8000804 <__aeabi_ddiv>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4650      	mov	r0, sl
 80039c4:	4659      	mov	r1, fp
 80039c6:	f7fc fc3d 	bl	8000244 <__adddf3>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4640      	mov	r0, r8
 80039d0:	4649      	mov	r1, r9
 80039d2:	f7fc ff17 	bl	8000804 <__aeabi_ddiv>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <_etoa+0x350>)
 80039e4:	f7fc fc2e 	bl	8000244 <__adddf3>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4620      	mov	r0, r4
 80039ee:	4629      	mov	r1, r5
 80039f0:	f7fc fdde 	bl	80005b0 <__aeabi_dmul>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80039fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a00:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a04:	f7fd f846 	bl	8000a94 <__aeabi_dcmplt>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <_etoa+0x2f2>
    expval--;
 8003a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a10:	3b01      	subs	r3, #1
 8003a12:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8003a14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <_etoa+0x348>)
 8003a1e:	f7fc fef1 	bl	8000804 <__aeabi_ddiv>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2c:	2b63      	cmp	r3, #99	; 0x63
 8003a2e:	dc2d      	bgt.n	8003a8c <_etoa+0x354>
 8003a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a32:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003a36:	db29      	blt.n	8003a8c <_etoa+0x354>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	e028      	b.n	8003a8e <_etoa+0x356>
 8003a3c:	f3af 8000 	nop.w
 8003a40:	509f79fb 	.word	0x509f79fb
 8003a44:	3fd34413 	.word	0x3fd34413
 8003a48:	8b60c8b3 	.word	0x8b60c8b3
 8003a4c:	3fc68a28 	.word	0x3fc68a28
 8003a50:	636f4361 	.word	0x636f4361
 8003a54:	3fd287a7 	.word	0x3fd287a7
 8003a58:	0979a371 	.word	0x0979a371
 8003a5c:	400a934f 	.word	0x400a934f
 8003a60:	bbb55516 	.word	0xbbb55516
 8003a64:	40026bb1 	.word	0x40026bb1
 8003a68:	fefa39ef 	.word	0xfefa39ef
 8003a6c:	3fe62e42 	.word	0x3fe62e42
 8003a70:	7fefffff 	.word	0x7fefffff
 8003a74:	3ff80000 	.word	0x3ff80000
 8003a78:	3fe00000 	.word	0x3fe00000
 8003a7c:	402c0000 	.word	0x402c0000
 8003a80:	40240000 	.word	0x40240000
 8003a84:	40180000 	.word	0x40180000
 8003a88:	3ff00000 	.word	0x3ff00000
 8003a8c:	2305      	movs	r3, #5
 8003a8e:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003a90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d03d      	beq.n	8003b18 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003a9c:	a36a      	add	r3, pc, #424	; (adr r3, 8003c48 <_etoa+0x510>)
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003aa6:	f7fd f809 	bl	8000abc <__aeabi_dcmpge>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d024      	beq.n	8003afa <_etoa+0x3c2>
 8003ab0:	a367      	add	r3, pc, #412	; (adr r3, 8003c50 <_etoa+0x518>)
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003aba:	f7fc ffeb 	bl	8000a94 <__aeabi_dcmplt>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01a      	beq.n	8003afa <_etoa+0x3c2>
      if ((int)prec > expval) {
 8003ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ac8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003aca:	429a      	cmp	r2, r3
 8003acc:	da07      	bge.n	8003ade <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8003ace:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003adc:	e002      	b.n	8003ae4 <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003ae4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	657b      	str	r3, [r7, #84]	; 0x54
 8003af8:	e00e      	b.n	8003b18 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <_etoa+0x3e0>
 8003b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <_etoa+0x3e0>
        --prec;
 8003b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b12:	3b01      	subs	r3, #1
 8003b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8003b1e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d904      	bls.n	8003b32 <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b30:	e001      	b.n	8003b36 <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <_etoa+0x414>
 8003b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <_etoa+0x42e>
    value /= conv.F;
 8003b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b5a:	f7fc fe53 	bl	8000804 <__aeabi_ddiv>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003b6a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <_etoa+0x44c>
 8003b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e003      	b.n	8003b8c <_etoa+0x454>
 8003b84:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003b88:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8003b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b94:	9304      	str	r3, [sp, #16]
 8003b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b98:	9303      	str	r3, [sp, #12]
 8003b9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b9e:	9302      	str	r3, [sp, #8]
 8003ba0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ba4:	e9cd 3400 	strd	r3, r4, [sp]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	69b9      	ldr	r1, [r7, #24]
 8003bae:	69f8      	ldr	r0, [r7, #28]
 8003bb0:	f7ff fb6a 	bl	8003288 <_ftoa>
 8003bb4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8003bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d03f      	beq.n	8003c3c <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003bbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <_etoa+0x494>
 8003bc8:	2045      	movs	r0, #69	; 0x45
 8003bca:	e000      	b.n	8003bce <_etoa+0x496>
 8003bcc:	2065      	movs	r0, #101	; 0x65
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	1c53      	adds	r3, r2, #1
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	69fc      	ldr	r4, [r7, #28]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bfb8      	it	lt
 8003be2:	425b      	neglt	r3, r3
 8003be4:	4618      	mov	r0, r3
 8003be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be8:	0fdb      	lsrs	r3, r3, #31
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bee:	3a01      	subs	r2, #1
 8003bf0:	2105      	movs	r1, #5
 8003bf2:	9105      	str	r1, [sp, #20]
 8003bf4:	9204      	str	r2, [sp, #16]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	9203      	str	r2, [sp, #12]
 8003bfa:	220a      	movs	r2, #10
 8003bfc:	9202      	str	r2, [sp, #8]
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	9000      	str	r0, [sp, #0]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	69f8      	ldr	r0, [r7, #28]
 8003c0a:	f7ff fa67 	bl	80030dc <_ntoa_long>
 8003c0e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003c10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00f      	beq.n	8003c3c <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003c1c:	e007      	b.n	8003c2e <_etoa+0x4f6>
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	1c53      	adds	r3, r2, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	69fc      	ldr	r4, [r7, #28]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	69b9      	ldr	r1, [r7, #24]
 8003c2a:	2020      	movs	r0, #32
 8003c2c:	47a0      	blx	r4
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d8f0      	bhi.n	8003c1e <_etoa+0x4e6>
    }
  }
  return idx;
 8003c3c:	697b      	ldr	r3, [r7, #20]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	375c      	adds	r7, #92	; 0x5c
 8003c42:	46bd      	mov	sp, r7
 8003c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c48:	eb1c432d 	.word	0xeb1c432d
 8003c4c:	3f1a36e2 	.word	0x3f1a36e2
 8003c50:	00000000 	.word	0x00000000
 8003c54:	412e8480 	.word	0x412e8480

08003c58 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5c:	b0a3      	sub	sp, #140	; 0x8c
 8003c5e:	af0a      	add	r7, sp, #40	; 0x28
 8003c60:	6178      	str	r0, [r7, #20]
 8003c62:	6139      	str	r1, [r7, #16]
 8003c64:	60fa      	str	r2, [r7, #12]
 8003c66:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 84ba 	bne.w	80045e8 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8003c74:	4ba3      	ldr	r3, [pc, #652]	; (8003f04 <_vsnprintf+0x2ac>)
 8003c76:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003c78:	f000 bcb6 	b.w	80045e8 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b25      	cmp	r3, #37	; 0x25
 8003c82:	d00d      	beq.n	8003ca0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	7818      	ldrb	r0, [r3, #0]
 8003c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c8a:	1c53      	adds	r3, r2, #1
 8003c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c8e:	697c      	ldr	r4, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6939      	ldr	r1, [r7, #16]
 8003c94:	47a0      	blx	r4
      format++;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	60bb      	str	r3, [r7, #8]
      continue;
 8003c9c:	f000 bca4 	b.w	80045e8 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	3b20      	subs	r3, #32
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d857      	bhi.n	8003d64 <_vsnprintf+0x10c>
 8003cb4:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <_vsnprintf+0x64>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003d3d 	.word	0x08003d3d
 8003cc0:	08003d65 	.word	0x08003d65
 8003cc4:	08003d65 	.word	0x08003d65
 8003cc8:	08003d51 	.word	0x08003d51
 8003ccc:	08003d65 	.word	0x08003d65
 8003cd0:	08003d65 	.word	0x08003d65
 8003cd4:	08003d65 	.word	0x08003d65
 8003cd8:	08003d65 	.word	0x08003d65
 8003cdc:	08003d65 	.word	0x08003d65
 8003ce0:	08003d65 	.word	0x08003d65
 8003ce4:	08003d65 	.word	0x08003d65
 8003ce8:	08003d29 	.word	0x08003d29
 8003cec:	08003d65 	.word	0x08003d65
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d65 	.word	0x08003d65
 8003cf8:	08003d65 	.word	0x08003d65
 8003cfc:	08003d01 	.word	0x08003d01
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	2301      	movs	r3, #1
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
 8003d12:	e02a      	b.n	8003d6a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	2301      	movs	r3, #1
 8003d24:	653b      	str	r3, [r7, #80]	; 0x50
 8003d26:	e020      	b.n	8003d6a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	2301      	movs	r3, #1
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3a:	e016      	b.n	8003d6a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3e:	f043 0308 	orr.w	r3, r3, #8
 8003d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d4e:	e00c      	b.n	8003d6a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d52:	f043 0310 	orr.w	r3, r3, #16
 8003d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
 8003d62:	e002      	b.n	8003d6a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8003d64:	2300      	movs	r3, #0
 8003d66:	653b      	str	r3, [r7, #80]	; 0x50
 8003d68:	bf00      	nop
      }
    } while (n);
 8003d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d19c      	bne.n	8003caa <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff f849 	bl	8002e10 <_is_digit>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d006      	beq.n	8003d92 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8003d84:	f107 0308 	add.w	r3, r7, #8
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff f857 	bl	8002e3c <_atoi>
 8003d8e:	65b8      	str	r0, [r7, #88]	; 0x58
 8003d90:	e01a      	b.n	8003dc8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b2a      	cmp	r3, #42	; 0x2a
 8003d98:	d116      	bne.n	8003dc8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8003d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da07      	bge.n	8003dbe <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8003dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db0:	f043 0302 	orr.w	r3, r3, #2
 8003db4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	425b      	negs	r3, r3
 8003dba:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dbc:	e001      	b.n	8003dc2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8003dd2:	d127      	bne.n	8003e24 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dda:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f812 	bl	8002e10 <_is_digit>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003df2:	f107 0308 	add.w	r3, r7, #8
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f820 	bl	8002e3c <_atoi>
 8003dfc:	6578      	str	r0, [r7, #84]	; 0x54
 8003dfe:	e011      	b.n	8003e24 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b2a      	cmp	r3, #42	; 0x2a
 8003e06:	d10d      	bne.n	8003e24 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003e08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e0c:	1d1a      	adds	r2, r3, #4
 8003e0e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003e1c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3301      	adds	r3, #1
 8003e22:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	3b68      	subs	r3, #104	; 0x68
 8003e2a:	2b12      	cmp	r3, #18
 8003e2c:	d866      	bhi.n	8003efc <_vsnprintf+0x2a4>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <_vsnprintf+0x1dc>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003ea7 	.word	0x08003ea7
 8003e38:	08003efd 	.word	0x08003efd
 8003e3c:	08003edd 	.word	0x08003edd
 8003e40:	08003efd 	.word	0x08003efd
 8003e44:	08003e81 	.word	0x08003e81
 8003e48:	08003efd 	.word	0x08003efd
 8003e4c:	08003efd 	.word	0x08003efd
 8003e50:	08003efd 	.word	0x08003efd
 8003e54:	08003efd 	.word	0x08003efd
 8003e58:	08003efd 	.word	0x08003efd
 8003e5c:	08003efd 	.word	0x08003efd
 8003e60:	08003efd 	.word	0x08003efd
 8003e64:	08003ecd 	.word	0x08003ecd
 8003e68:	08003efd 	.word	0x08003efd
 8003e6c:	08003efd 	.word	0x08003efd
 8003e70:	08003efd 	.word	0x08003efd
 8003e74:	08003efd 	.word	0x08003efd
 8003e78:	08003efd 	.word	0x08003efd
 8003e7c:	08003eed 	.word	0x08003eed
      case 'l' :
        flags |= FLAGS_LONG;
 8003e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e86:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b6c      	cmp	r3, #108	; 0x6c
 8003e94:	d134      	bne.n	8003f00 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003ea4:	e02c      	b.n	8003f00 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eac:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b68      	cmp	r3, #104	; 0x68
 8003eba:	d125      	bne.n	8003f08 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8003ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003eca:	e01d      	b.n	8003f08 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
        break;
 8003eda:	e016      	b.n	8003f0a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	60bb      	str	r3, [r7, #8]
        break;
 8003eea:	e00e      	b.n	8003f0a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60bb      	str	r3, [r7, #8]
        break;
 8003efa:	e006      	b.n	8003f0a <_vsnprintf+0x2b2>
      default :
        break;
 8003efc:	bf00      	nop
 8003efe:	e004      	b.n	8003f0a <_vsnprintf+0x2b2>
        break;
 8003f00:	bf00      	nop
 8003f02:	e002      	b.n	8003f0a <_vsnprintf+0x2b2>
 8003f04:	08002d99 	.word	0x08002d99
        break;
 8003f08:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	3b25      	subs	r3, #37	; 0x25
 8003f10:	2b53      	cmp	r3, #83	; 0x53
 8003f12:	f200 835c 	bhi.w	80045ce <_vsnprintf+0x976>
 8003f16:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <_vsnprintf+0x2c4>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	080045b7 	.word	0x080045b7
 8003f20:	080045cf 	.word	0x080045cf
 8003f24:	080045cf 	.word	0x080045cf
 8003f28:	080045cf 	.word	0x080045cf
 8003f2c:	080045cf 	.word	0x080045cf
 8003f30:	080045cf 	.word	0x080045cf
 8003f34:	080045cf 	.word	0x080045cf
 8003f38:	080045cf 	.word	0x080045cf
 8003f3c:	080045cf 	.word	0x080045cf
 8003f40:	080045cf 	.word	0x080045cf
 8003f44:	080045cf 	.word	0x080045cf
 8003f48:	080045cf 	.word	0x080045cf
 8003f4c:	080045cf 	.word	0x080045cf
 8003f50:	080045cf 	.word	0x080045cf
 8003f54:	080045cf 	.word	0x080045cf
 8003f58:	080045cf 	.word	0x080045cf
 8003f5c:	080045cf 	.word	0x080045cf
 8003f60:	080045cf 	.word	0x080045cf
 8003f64:	080045cf 	.word	0x080045cf
 8003f68:	080045cf 	.word	0x080045cf
 8003f6c:	080045cf 	.word	0x080045cf
 8003f70:	080045cf 	.word	0x080045cf
 8003f74:	080045cf 	.word	0x080045cf
 8003f78:	080045cf 	.word	0x080045cf
 8003f7c:	080045cf 	.word	0x080045cf
 8003f80:	080045cf 	.word	0x080045cf
 8003f84:	080045cf 	.word	0x080045cf
 8003f88:	080045cf 	.word	0x080045cf
 8003f8c:	080045cf 	.word	0x080045cf
 8003f90:	080045cf 	.word	0x080045cf
 8003f94:	080045cf 	.word	0x080045cf
 8003f98:	080045cf 	.word	0x080045cf
 8003f9c:	0800436f 	.word	0x0800436f
 8003fa0:	08004323 	.word	0x08004323
 8003fa4:	0800436f 	.word	0x0800436f
 8003fa8:	080045cf 	.word	0x080045cf
 8003fac:	080045cf 	.word	0x080045cf
 8003fb0:	080045cf 	.word	0x080045cf
 8003fb4:	080045cf 	.word	0x080045cf
 8003fb8:	080045cf 	.word	0x080045cf
 8003fbc:	080045cf 	.word	0x080045cf
 8003fc0:	080045cf 	.word	0x080045cf
 8003fc4:	080045cf 	.word	0x080045cf
 8003fc8:	080045cf 	.word	0x080045cf
 8003fcc:	080045cf 	.word	0x080045cf
 8003fd0:	080045cf 	.word	0x080045cf
 8003fd4:	080045cf 	.word	0x080045cf
 8003fd8:	080045cf 	.word	0x080045cf
 8003fdc:	080045cf 	.word	0x080045cf
 8003fe0:	080045cf 	.word	0x080045cf
 8003fe4:	080045cf 	.word	0x080045cf
 8003fe8:	0800406d 	.word	0x0800406d
 8003fec:	080045cf 	.word	0x080045cf
 8003ff0:	080045cf 	.word	0x080045cf
 8003ff4:	080045cf 	.word	0x080045cf
 8003ff8:	080045cf 	.word	0x080045cf
 8003ffc:	080045cf 	.word	0x080045cf
 8004000:	080045cf 	.word	0x080045cf
 8004004:	080045cf 	.word	0x080045cf
 8004008:	080045cf 	.word	0x080045cf
 800400c:	080045cf 	.word	0x080045cf
 8004010:	0800406d 	.word	0x0800406d
 8004014:	080043db 	.word	0x080043db
 8004018:	0800406d 	.word	0x0800406d
 800401c:	0800436f 	.word	0x0800436f
 8004020:	08004323 	.word	0x08004323
 8004024:	0800436f 	.word	0x0800436f
 8004028:	080045cf 	.word	0x080045cf
 800402c:	0800406d 	.word	0x0800406d
 8004030:	080045cf 	.word	0x080045cf
 8004034:	080045cf 	.word	0x080045cf
 8004038:	080045cf 	.word	0x080045cf
 800403c:	080045cf 	.word	0x080045cf
 8004040:	080045cf 	.word	0x080045cf
 8004044:	0800406d 	.word	0x0800406d
 8004048:	0800451b 	.word	0x0800451b
 800404c:	080045cf 	.word	0x080045cf
 8004050:	080045cf 	.word	0x080045cf
 8004054:	08004453 	.word	0x08004453
 8004058:	080045cf 	.word	0x080045cf
 800405c:	0800406d 	.word	0x0800406d
 8004060:	080045cf 	.word	0x080045cf
 8004064:	080045cf 	.word	0x080045cf
 8004068:	0800406d 	.word	0x0800406d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b78      	cmp	r3, #120	; 0x78
 8004072:	d003      	beq.n	800407c <_vsnprintf+0x424>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b58      	cmp	r3, #88	; 0x58
 800407a:	d102      	bne.n	8004082 <_vsnprintf+0x42a>
          base = 16U;
 800407c:	2310      	movs	r3, #16
 800407e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004080:	e013      	b.n	80040aa <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b6f      	cmp	r3, #111	; 0x6f
 8004088:	d102      	bne.n	8004090 <_vsnprintf+0x438>
          base =  8U;
 800408a:	2308      	movs	r3, #8
 800408c:	64bb      	str	r3, [r7, #72]	; 0x48
 800408e:	e00c      	b.n	80040aa <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b62      	cmp	r3, #98	; 0x62
 8004096:	d102      	bne.n	800409e <_vsnprintf+0x446>
          base =  2U;
 8004098:	2302      	movs	r3, #2
 800409a:	64bb      	str	r3, [r7, #72]	; 0x48
 800409c:	e005      	b.n	80040aa <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800409e:	230a      	movs	r3, #10
 80040a0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80040a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a4:	f023 0310 	bic.w	r3, r3, #16
 80040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b58      	cmp	r3, #88	; 0x58
 80040b0:	d103      	bne.n	80040ba <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80040b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b4:	f043 0320 	orr.w	r3, r3, #32
 80040b8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b69      	cmp	r3, #105	; 0x69
 80040c0:	d007      	beq.n	80040d2 <_vsnprintf+0x47a>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d003      	beq.n	80040d2 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80040ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040cc:	f023 030c 	bic.w	r3, r3, #12
 80040d0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80040d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 80040dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b69      	cmp	r3, #105	; 0x69
 80040ea:	d004      	beq.n	80040f6 <_vsnprintf+0x49e>
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b64      	cmp	r3, #100	; 0x64
 80040f2:	f040 8098 	bne.w	8004226 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80040f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d031      	beq.n	8004164 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004104:	3307      	adds	r3, #7
 8004106:	f023 0307 	bic.w	r3, r3, #7
 800410a:	f103 0208 	add.w	r2, r3, #8
 800410e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800411a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	da06      	bge.n	8004130 <_vsnprintf+0x4d8>
 8004122:	2100      	movs	r1, #0
 8004124:	f1d2 0800 	rsbs	r8, r2, #0
 8004128:	eb61 0903 	sbc.w	r9, r1, r3
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	69f9      	ldr	r1, [r7, #28]
 8004132:	0fc9      	lsrs	r1, r1, #31
 8004134:	b2c9      	uxtb	r1, r1
 8004136:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004138:	2400      	movs	r4, #0
 800413a:	4682      	mov	sl, r0
 800413c:	46a3      	mov	fp, r4
 800413e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004140:	9008      	str	r0, [sp, #32]
 8004142:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004144:	9007      	str	r0, [sp, #28]
 8004146:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004148:	9006      	str	r0, [sp, #24]
 800414a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800414e:	9102      	str	r1, [sp, #8]
 8004150:	e9cd 2300 	strd	r2, r3, [sp]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004158:	6939      	ldr	r1, [r7, #16]
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f7ff f824 	bl	80031a8 <_ntoa_long_long>
 8004160:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004162:	e0da      	b.n	800431a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d020      	beq.n	80041b0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800416e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	bfb8      	it	lt
 8004182:	425b      	neglt	r3, r3
 8004184:	4619      	mov	r1, r3
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	0fdb      	lsrs	r3, r3, #31
 800418a:	b2db      	uxtb	r3, r3
 800418c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800418e:	9205      	str	r2, [sp, #20]
 8004190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004192:	9204      	str	r2, [sp, #16]
 8004194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004196:	9203      	str	r2, [sp, #12]
 8004198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800419a:	9202      	str	r2, [sp, #8]
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	9100      	str	r1, [sp, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041a4:	6939      	ldr	r1, [r7, #16]
 80041a6:	6978      	ldr	r0, [r7, #20]
 80041a8:	f7fe ff98 	bl	80030dc <_ntoa_long>
 80041ac:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80041ae:	e0b4      	b.n	800431a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80041b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <_vsnprintf+0x572>
 80041ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041be:	1d1a      	adds	r2, r3, #4
 80041c0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	e012      	b.n	80041f0 <_vsnprintf+0x598>
 80041ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <_vsnprintf+0x58c>
 80041d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d8:	1d1a      	adds	r2, r3, #4
 80041da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	b21b      	sxth	r3, r3
 80041e2:	e005      	b.n	80041f0 <_vsnprintf+0x598>
 80041e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bfb8      	it	lt
 80041f8:	425b      	neglt	r3, r3
 80041fa:	4619      	mov	r1, r3
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	0fdb      	lsrs	r3, r3, #31
 8004200:	b2db      	uxtb	r3, r3
 8004202:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004204:	9205      	str	r2, [sp, #20]
 8004206:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004208:	9204      	str	r2, [sp, #16]
 800420a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800420c:	9203      	str	r2, [sp, #12]
 800420e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004210:	9202      	str	r2, [sp, #8]
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	9100      	str	r1, [sp, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800421a:	6939      	ldr	r1, [r7, #16]
 800421c:	6978      	ldr	r0, [r7, #20]
 800421e:	f7fe ff5d 	bl	80030dc <_ntoa_long>
 8004222:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004224:	e079      	b.n	800431a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800422c:	2b00      	cmp	r3, #0
 800422e:	d022      	beq.n	8004276 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004234:	3307      	adds	r3, #7
 8004236:	f023 0307 	bic.w	r3, r3, #7
 800423a:	f103 0208 	add.w	r2, r3, #8
 800423e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004248:	2000      	movs	r0, #0
 800424a:	460d      	mov	r5, r1
 800424c:	4606      	mov	r6, r0
 800424e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004250:	9108      	str	r1, [sp, #32]
 8004252:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004254:	9107      	str	r1, [sp, #28]
 8004256:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004258:	9106      	str	r1, [sp, #24]
 800425a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800425e:	2100      	movs	r1, #0
 8004260:	9102      	str	r1, [sp, #8]
 8004262:	e9cd 2300 	strd	r2, r3, [sp]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800426a:	6939      	ldr	r1, [r7, #16]
 800426c:	6978      	ldr	r0, [r7, #20]
 800426e:	f7fe ff9b 	bl	80031a8 <_ntoa_long_long>
 8004272:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004274:	e051      	b.n	800431a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d018      	beq.n	80042b2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004284:	1d1a      	adds	r2, r3, #4
 8004286:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800428e:	9205      	str	r2, [sp, #20]
 8004290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004292:	9204      	str	r2, [sp, #16]
 8004294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004296:	9203      	str	r2, [sp, #12]
 8004298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800429a:	9202      	str	r2, [sp, #8]
 800429c:	2200      	movs	r2, #0
 800429e:	9201      	str	r2, [sp, #4]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042a6:	6939      	ldr	r1, [r7, #16]
 80042a8:	6978      	ldr	r0, [r7, #20]
 80042aa:	f7fe ff17 	bl	80030dc <_ntoa_long>
 80042ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 80042b0:	e033      	b.n	800431a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80042b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <_vsnprintf+0x674>
 80042bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042c0:	1d1a      	adds	r2, r3, #4
 80042c2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e012      	b.n	80042f2 <_vsnprintf+0x69a>
 80042cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <_vsnprintf+0x68e>
 80042d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042da:	1d1a      	adds	r2, r3, #4
 80042dc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	e005      	b.n	80042f2 <_vsnprintf+0x69a>
 80042e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042ea:	1d1a      	adds	r2, r3, #4
 80042ec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80042f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042fa:	9304      	str	r3, [sp, #16]
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	9303      	str	r3, [sp, #12]
 8004300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004302:	9302      	str	r3, [sp, #8]
 8004304:	2300      	movs	r3, #0
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004310:	6939      	ldr	r1, [r7, #16]
 8004312:	6978      	ldr	r0, [r7, #20]
 8004314:	f7fe fee2 	bl	80030dc <_ntoa_long>
 8004318:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3301      	adds	r3, #1
 800431e:	60bb      	str	r3, [r7, #8]
        break;
 8004320:	e162      	b.n	80045e8 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b46      	cmp	r3, #70	; 0x46
 8004328:	d103      	bne.n	8004332 <_vsnprintf+0x6da>
 800432a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800432c:	f043 0320 	orr.w	r3, r3, #32
 8004330:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004336:	3307      	adds	r3, #7
 8004338:	f023 0307 	bic.w	r3, r3, #7
 800433c:	f103 0208 	add.w	r2, r3, #8
 8004340:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800434a:	9104      	str	r1, [sp, #16]
 800434c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800434e:	9103      	str	r1, [sp, #12]
 8004350:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004352:	9102      	str	r1, [sp, #8]
 8004354:	e9cd 2300 	strd	r2, r3, [sp]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800435c:	6939      	ldr	r1, [r7, #16]
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f7fe ff92 	bl	8003288 <_ftoa>
 8004364:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3301      	adds	r3, #1
 800436a:	60bb      	str	r3, [r7, #8]
        break;
 800436c:	e13c      	b.n	80045e8 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b67      	cmp	r3, #103	; 0x67
 8004374:	d003      	beq.n	800437e <_vsnprintf+0x726>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b47      	cmp	r3, #71	; 0x47
 800437c:	d103      	bne.n	8004386 <_vsnprintf+0x72e>
 800437e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004384:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b45      	cmp	r3, #69	; 0x45
 800438c:	d003      	beq.n	8004396 <_vsnprintf+0x73e>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b47      	cmp	r3, #71	; 0x47
 8004394:	d103      	bne.n	800439e <_vsnprintf+0x746>
 8004396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004398:	f043 0320 	orr.w	r3, r3, #32
 800439c:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800439e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043a2:	3307      	adds	r3, #7
 80043a4:	f023 0307 	bic.w	r3, r3, #7
 80043a8:	f103 0208 	add.w	r2, r3, #8
 80043ac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80043b6:	9104      	str	r1, [sp, #16]
 80043b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043ba:	9103      	str	r1, [sp, #12]
 80043bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043be:	9102      	str	r1, [sp, #8]
 80043c0:	e9cd 2300 	strd	r2, r3, [sp]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043c8:	6939      	ldr	r1, [r7, #16]
 80043ca:	6978      	ldr	r0, [r7, #20]
 80043cc:	f7ff f9b4 	bl	8003738 <_etoa>
 80043d0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60bb      	str	r3, [r7, #8]
        break;
 80043d8:	e106      	b.n	80045e8 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80043da:	2301      	movs	r3, #1
 80043dc:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80043de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10e      	bne.n	8004406 <_vsnprintf+0x7ae>
          while (l++ < width) {
 80043e8:	e007      	b.n	80043fa <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 80043ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ec:	1c53      	adds	r3, r2, #1
 80043ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f0:	697c      	ldr	r4, [r7, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6939      	ldr	r1, [r7, #16]
 80043f6:	2020      	movs	r0, #32
 80043f8:	47a0      	blx	r4
          while (l++ < width) {
 80043fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004402:	429a      	cmp	r2, r3
 8004404:	d8f1      	bhi.n	80043ea <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	b2d8      	uxtb	r0, r3
 8004414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004416:	1c53      	adds	r3, r2, #1
 8004418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800441a:	697c      	ldr	r4, [r7, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6939      	ldr	r1, [r7, #16]
 8004420:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00e      	beq.n	800444a <_vsnprintf+0x7f2>
          while (l++ < width) {
 800442c:	e007      	b.n	800443e <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 800442e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004430:	1c53      	adds	r3, r2, #1
 8004432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004434:	697c      	ldr	r4, [r7, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6939      	ldr	r1, [r7, #16]
 800443a:	2020      	movs	r0, #32
 800443c:	47a0      	blx	r4
          while (l++ < width) {
 800443e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	647a      	str	r2, [r7, #68]	; 0x44
 8004444:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004446:	429a      	cmp	r2, r3
 8004448:	d8f1      	bhi.n	800442e <_vsnprintf+0x7d6>
          }
        }
        format++;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	3301      	adds	r3, #1
 800444e:	60bb      	str	r3, [r7, #8]
        break;
 8004450:	e0ca      	b.n	80045e8 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004456:	1d1a      	adds	r2, r3, #4
 8004458:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <_vsnprintf+0x812>
 8004466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004468:	e001      	b.n	800446e <_vsnprintf+0x816>
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	4619      	mov	r1, r3
 8004470:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004472:	f7fe fcb1 	bl	8002dd8 <_strnlen_s>
 8004476:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 8004482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004486:	4293      	cmp	r3, r2
 8004488:	bf28      	it	cs
 800448a:	4613      	movcs	r3, r2
 800448c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 800448e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d11a      	bne.n	80044ce <_vsnprintf+0x876>
          while (l++ < width) {
 8004498:	e007      	b.n	80044aa <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 800449a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800449c:	1c53      	adds	r3, r2, #1
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a0:	697c      	ldr	r4, [r7, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6939      	ldr	r1, [r7, #16]
 80044a6:	2020      	movs	r0, #32
 80044a8:	47a0      	blx	r4
          while (l++ < width) {
 80044aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d8f1      	bhi.n	800449a <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80044b6:	e00a      	b.n	80044ce <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 80044b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	643a      	str	r2, [r7, #64]	; 0x40
 80044be:	7818      	ldrb	r0, [r3, #0]
 80044c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c2:	1c53      	adds	r3, r2, #1
 80044c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c6:	697c      	ldr	r4, [r7, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6939      	ldr	r1, [r7, #16]
 80044cc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80044ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <_vsnprintf+0x892>
 80044d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0eb      	beq.n	80044b8 <_vsnprintf+0x860>
 80044e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e2:	1e5a      	subs	r2, r3, #1
 80044e4:	657a      	str	r2, [r7, #84]	; 0x54
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e6      	bne.n	80044b8 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80044ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00e      	beq.n	8004512 <_vsnprintf+0x8ba>
          while (l++ < width) {
 80044f4:	e007      	b.n	8004506 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 80044f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044f8:	1c53      	adds	r3, r2, #1
 80044fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044fc:	697c      	ldr	r4, [r7, #20]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6939      	ldr	r1, [r7, #16]
 8004502:	2020      	movs	r0, #32
 8004504:	47a0      	blx	r4
          while (l++ < width) {
 8004506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800450c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800450e:	429a      	cmp	r2, r3
 8004510:	d8f1      	bhi.n	80044f6 <_vsnprintf+0x89e>
          }
        }
        format++;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3301      	adds	r3, #1
 8004516:	60bb      	str	r3, [r7, #8]
        break;
 8004518:	e066      	b.n	80045e8 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800451a:	2308      	movs	r3, #8
 800451c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800451e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004520:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004524:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004526:	2300      	movs	r3, #0
 8004528:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800452c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004530:	2b00      	cmp	r3, #0
 8004532:	d023      	beq.n	800457c <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004538:	1d1a      	adds	r2, r3, #4
 800453a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	2300      	movs	r3, #0
 8004544:	603a      	str	r2, [r7, #0]
 8004546:	607b      	str	r3, [r7, #4]
 8004548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454a:	9308      	str	r3, [sp, #32]
 800454c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800454e:	9307      	str	r3, [sp, #28]
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	9306      	str	r3, [sp, #24]
 8004554:	f04f 0210 	mov.w	r2, #16
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004560:	2300      	movs	r3, #0
 8004562:	9302      	str	r3, [sp, #8]
 8004564:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004568:	e9cd 3400 	strd	r3, r4, [sp]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004570:	6939      	ldr	r1, [r7, #16]
 8004572:	6978      	ldr	r0, [r7, #20]
 8004574:	f7fe fe18 	bl	80031a8 <_ntoa_long_long>
 8004578:	64f8      	str	r0, [r7, #76]	; 0x4c
 800457a:	e018      	b.n	80045ae <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800457c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004580:	1d1a      	adds	r2, r3, #4
 8004582:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458c:	9305      	str	r3, [sp, #20]
 800458e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004594:	9303      	str	r3, [sp, #12]
 8004596:	2310      	movs	r3, #16
 8004598:	9302      	str	r3, [sp, #8]
 800459a:	2300      	movs	r3, #0
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	9200      	str	r2, [sp, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a4:	6939      	ldr	r1, [r7, #16]
 80045a6:	6978      	ldr	r0, [r7, #20]
 80045a8:	f7fe fd98 	bl	80030dc <_ntoa_long>
 80045ac:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	3301      	adds	r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]
        break;
 80045b4:	e018      	b.n	80045e8 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80045b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b8:	1c53      	adds	r3, r2, #1
 80045ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045bc:	697c      	ldr	r4, [r7, #20]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6939      	ldr	r1, [r7, #16]
 80045c2:	2025      	movs	r0, #37	; 0x25
 80045c4:	47a0      	blx	r4
        format++;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
        break;
 80045cc:	e00c      	b.n	80045e8 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	7818      	ldrb	r0, [r3, #0]
 80045d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045d4:	1c53      	adds	r3, r2, #1
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d8:	697c      	ldr	r4, [r7, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6939      	ldr	r1, [r7, #16]
 80045de:	47a0      	blx	r4
        format++;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]
        break;
 80045e6:	bf00      	nop
  while (*format)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f47f ab45 	bne.w	8003c7c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80045f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <_vsnprintf+0x9a8>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1e5a      	subs	r2, r3, #1
 80045fe:	e000      	b.n	8004602 <_vsnprintf+0x9aa>
 8004600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004602:	697c      	ldr	r4, [r7, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6939      	ldr	r1, [r7, #16]
 8004608:	2000      	movs	r0, #0
 800460a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800460c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800460e:	4618      	mov	r0, r3
 8004610:	3764      	adds	r7, #100	; 0x64
 8004612:	46bd      	mov	sp, r7
 8004614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004618 <printf_>:


///

int printf_(const char* format, ...)
{
 8004618:	b40f      	push	{r0, r1, r2, r3}
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004620:	f107 031c 	add.w	r3, r7, #28
 8004624:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004626:	1d39      	adds	r1, r7, #4
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f04f 32ff 	mov.w	r2, #4294967295
 8004632:	4806      	ldr	r0, [pc, #24]	; (800464c <printf_+0x34>)
 8004634:	f7ff fb10 	bl	8003c58 <_vsnprintf>
 8004638:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800463a:	68fb      	ldr	r3, [r7, #12]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004646:	b004      	add	sp, #16
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	08002db3 	.word	0x08002db3

08004650 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8004650:	b40e      	push	{r1, r2, r3}
 8004652:	b580      	push	{r7, lr}
 8004654:	b087      	sub	sp, #28
 8004656:	af02      	add	r7, sp, #8
 8004658:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800465a:	f107 0320 	add.w	r3, r7, #32
 800465e:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f04f 32ff 	mov.w	r2, #4294967295
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4805      	ldr	r0, [pc, #20]	; (8004684 <sprintf_+0x34>)
 800466e:	f7ff faf3 	bl	8003c58 <_vsnprintf>
 8004672:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004674:	68fb      	ldr	r3, [r7, #12]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004680:	b003      	add	sp, #12
 8004682:	4770      	bx	lr
 8004684:	08002d6d 	.word	0x08002d6d

08004688 <RTC_Init>:
uint8_t rmon,rday,rhour,rmin,rsec,rweek;
uint8_t const table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5};
uint8_t const mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};

void RTC_Init(RTC_HandleTypeDef* hrtc)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af02      	add	r7, sp, #8
 800468e:	6078      	str	r0, [r7, #4]
	hrtc->Instance = RTC;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <RTC_Init+0x68>)
 8004694:	601a      	str	r2, [r3, #0]
	hrtc->Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f04f 32ff 	mov.w	r2, #4294967295
 800469c:	605a      	str	r2, [r3, #4]
	hrtc->Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(hrtc) != HAL_OK)
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f002 fd3d 	bl	8007124 <HAL_RTC_Init>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <RTC_Init+0x2c>
	{
		Error_Handler();
 80046b0:	f7fe fb44 	bl	8002d3c <Error_Handler>
	}
	//Check If first time connect to power source
	if(HAL_RTCEx_BKUPRead(hrtc,RTC_BKP_DR1)!=0x5050){//Deafult Value should be 0xffff
 80046b4:	2101      	movs	r1, #1
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f002 fe62 	bl	8007380 <HAL_RTCEx_BKUPRead>
 80046bc:	4603      	mov	r3, r0
 80046be:	f245 0250 	movw	r2, #20560	; 0x5050
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d010      	beq.n	80046e8 <RTC_Init+0x60>
		HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR1,0x5050);
 80046c6:	f245 0250 	movw	r2, #20560	; 0x5050
 80046ca:	2101      	movs	r1, #1
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f002 fe3d 	bl	800734c <HAL_RTCEx_BKUPWrite>
		RTC_Set(2022,1,1,0,0,0);
 80046d2:	2300      	movs	r3, #0
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	2300      	movs	r3, #0
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	2300      	movs	r3, #0
 80046dc:	2201      	movs	r2, #1
 80046de:	2101      	movs	r1, #1
 80046e0:	f240 70e6 	movw	r0, #2022	; 0x7e6
 80046e4:	f000 f806 	bl	80046f4 <RTC_Set>
	}
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40002800 	.word	0x40002800

080046f4 <RTC_Set>:

uint8_t RTC_Set(uint16_t syear, int8_t smon, uint8_t sday,uint8_t rhour,uint8_t rmin,uint8_t rsec){
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4604      	mov	r4, r0
 80046fc:	4608      	mov	r0, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	461a      	mov	r2, r3
 8004702:	4623      	mov	r3, r4
 8004704:	80fb      	strh	r3, [r7, #6]
 8004706:	4603      	mov	r3, r0
 8004708:	717b      	strb	r3, [r7, #5]
 800470a:	460b      	mov	r3, r1
 800470c:	713b      	strb	r3, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set Time According To Parameters (Be Done Later Using USART)
	 */
	uint16_t t;
	uint32_t seccount=0;
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
	if(syear<2000||syear>2099)return 1;// Range: 1970-2099
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800471c:	d304      	bcc.n	8004728 <RTC_Set+0x34>
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	f640 0233 	movw	r2, #2099	; 0x833
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <RTC_Set+0x38>
 8004728:	2301      	movs	r3, #1
 800472a:	e081      	b.n	8004830 <RTC_Set+0x13c>
	for(t=1970;t<syear;++t){
 800472c:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8004730:	81fb      	strh	r3, [r7, #14]
 8004732:	e014      	b.n	800475e <RTC_Set+0x6a>
		if(Is_Leap_Year(t))seccount+=31622400;
 8004734:	89fb      	ldrh	r3, [r7, #14]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f9dc 	bl	8004af4 <Is_Leap_Year>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d006      	beq.n	8004750 <RTC_Set+0x5c>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
 8004748:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	e003      	b.n	8004758 <RTC_Set+0x64>
		else seccount+=31536000;
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	4b39      	ldr	r3, [pc, #228]	; (8004838 <RTC_Set+0x144>)
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
	for(t=1970;t<syear;++t){
 8004758:	89fb      	ldrh	r3, [r7, #14]
 800475a:	3301      	adds	r3, #1
 800475c:	81fb      	strh	r3, [r7, #14]
 800475e:	89fa      	ldrh	r2, [r7, #14]
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	429a      	cmp	r2, r3
 8004764:	d3e6      	bcc.n	8004734 <RTC_Set+0x40>
	}
	smon-=1;
 8004766:	797b      	ldrb	r3, [r7, #5]
 8004768:	3b01      	subs	r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	717b      	strb	r3, [r7, #5]
	for(t=0;t<smon;t++){
 800476e:	2300      	movs	r3, #0
 8004770:	81fb      	strh	r3, [r7, #14]
 8004772:	e01c      	b.n	80047ae <RTC_Set+0xba>
		seccount+=(uint32_t)mon_table[t]*86400;
 8004774:	89fb      	ldrh	r3, [r7, #14]
 8004776:	4a31      	ldr	r2, [pc, #196]	; (800483c <RTC_Set+0x148>)
 8004778:	5cd3      	ldrb	r3, [r2, r3]
 800477a:	461a      	mov	r2, r3
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <RTC_Set+0x14c>)
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	4413      	add	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f9b2 	bl	8004af4 <Is_Leap_Year>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <RTC_Set+0xb4>
 8004796:	89fb      	ldrh	r3, [r7, #14]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <RTC_Set+0xb4>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80047a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047a6:	60bb      	str	r3, [r7, #8]
	for(t=0;t<smon;t++){
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	3301      	adds	r3, #1
 80047ac:	81fb      	strh	r3, [r7, #14]
 80047ae:	89fa      	ldrh	r2, [r7, #14]
 80047b0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	dbdd      	blt.n	8004774 <RTC_Set+0x80>
	}
	seccount+=(uint32_t)(sday-1)*86400;
 80047b8:	793b      	ldrb	r3, [r7, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	461a      	mov	r2, r3
 80047be:	4b20      	ldr	r3, [pc, #128]	; (8004840 <RTC_Set+0x14c>)
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	4413      	add	r3, r2
 80047c8:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rhour*3600;
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	4413      	add	r3, r2
 80047d8:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rmin*60;
 80047da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	461a      	mov	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4413      	add	r3, r2
 80047ec:	60bb      	str	r3, [r7, #8]
	seccount += rsec;
 80047ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	4413      	add	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]

	RTC->CRL|=1<<4;
 80047f8:	4b12      	ldr	r3, [pc, #72]	; (8004844 <RTC_Set+0x150>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a11      	ldr	r2, [pc, #68]	; (8004844 <RTC_Set+0x150>)
 80047fe:	f043 0310 	orr.w	r3, r3, #16
 8004802:	6053      	str	r3, [r2, #4]
	RTC->CNTL=seccount&0xffff;
 8004804:	4a0f      	ldr	r2, [pc, #60]	; (8004844 <RTC_Set+0x150>)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	b29b      	uxth	r3, r3
 800480a:	61d3      	str	r3, [r2, #28]
	RTC->CNTH=seccount>>16;
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <RTC_Set+0x150>)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	6193      	str	r3, [r2, #24]
	RTC->CRL&=~(1<<4);
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <RTC_Set+0x150>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <RTC_Set+0x150>)
 800481a:	f023 0310 	bic.w	r3, r3, #16
 800481e:	6053      	str	r3, [r2, #4]
	while(!(RTC->CRL&(1<<5)));
 8004820:	bf00      	nop
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <RTC_Set+0x150>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f9      	beq.n	8004822 <RTC_Set+0x12e>

	return 0;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bd90      	pop	{r4, r7, pc}
 8004838:	01e13380 	.word	0x01e13380
 800483c:	080117f4 	.word	0x080117f4
 8004840:	00015180 	.word	0x00015180
 8004844:	40002800 	.word	0x40002800

08004848 <RTC_Get>:

uint8_t RTC_Get(void){
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
	/*
	 * Refresh Time variables in rtc.c
	 */
	static uint16_t daycnt=0;
	uint32_t timecount=0;
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
	uint32_t temp=0;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
	uint32_t temp1=0;
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]

	timecount=RTC->CNTH;
 800485a:	4b65      	ldr	r3, [pc, #404]	; (80049f0 <RTC_Get+0x1a8>)
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	607b      	str	r3, [r7, #4]
	timecount<<=16;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	607b      	str	r3, [r7, #4]
	timecount+=RTC->CNTL;
 8004866:	4b62      	ldr	r3, [pc, #392]	; (80049f0 <RTC_Get+0x1a8>)
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	607b      	str	r3, [r7, #4]

	temp=timecount/86400;//Day
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a60      	ldr	r2, [pc, #384]	; (80049f4 <RTC_Get+0x1ac>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	60fb      	str	r3, [r7, #12]
	if(daycnt!=temp){//New Day
 800487c:	4b5e      	ldr	r3, [pc, #376]	; (80049f8 <RTC_Get+0x1b0>)
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4293      	cmp	r3, r2
 8004886:	d066      	beq.n	8004956 <RTC_Get+0x10e>
		daycnt=temp;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	b29a      	uxth	r2, r3
 800488c:	4b5a      	ldr	r3, [pc, #360]	; (80049f8 <RTC_Get+0x1b0>)
 800488e:	801a      	strh	r2, [r3, #0]
		temp1=1970;
 8004890:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8004894:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8004896:	e01b      	b.n	80048d0 <RTC_Get+0x88>
			if(Is_Leap_Year(temp1)){
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	b29b      	uxth	r3, r3
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f929 	bl	8004af4 <Is_Leap_Year>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00c      	beq.n	80048c2 <RTC_Get+0x7a>
				if(temp>=366)temp-=366;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 80048ae:	d304      	bcc.n	80048ba <RTC_Get+0x72>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e007      	b.n	80048ca <RTC_Get+0x82>
				else{temp1++; break;}
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3301      	adds	r3, #1
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	e00a      	b.n	80048d8 <RTC_Get+0x90>
			}
			else temp-=365;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 80048c8:	60fb      	str	r3, [r7, #12]
			temp1++;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 80048d6:	d8df      	bhi.n	8004898 <RTC_Get+0x50>
		}
		ryear=temp1;//Year
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	b29a      	uxth	r2, r3
 80048dc:	4b47      	ldr	r3, [pc, #284]	; (80049fc <RTC_Get+0x1b4>)
 80048de:	801a      	strh	r2, [r3, #0]
		temp1=0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 80048e4:	e024      	b.n	8004930 <RTC_Get+0xe8>
			if(Is_Leap_Year(ryear)&&temp1==1){
 80048e6:	4b45      	ldr	r3, [pc, #276]	; (80049fc <RTC_Get+0x1b4>)
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 f902 	bl	8004af4 <Is_Leap_Year>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <RTC_Get+0xc2>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d106      	bne.n	800490a <RTC_Get+0xc2>
				if(temp>=29)temp-=29;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b1c      	cmp	r3, #28
 8004900:	d91a      	bls.n	8004938 <RTC_Get+0xf0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3b1d      	subs	r3, #29
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e00f      	b.n	800492a <RTC_Get+0xe2>
				else break;
			}else{
			if(temp>=mon_table[temp1])temp-=mon_table[temp1];
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <RTC_Get+0x1b8>)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4413      	add	r3, r2
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4293      	cmp	r3, r2
 8004918:	d310      	bcc.n	800493c <RTC_Get+0xf4>
 800491a:	4a39      	ldr	r2, [pc, #228]	; (8004a00 <RTC_Get+0x1b8>)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
			else break;
			}
			temp1++;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3301      	adds	r3, #1
 800492e:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b1b      	cmp	r3, #27
 8004934:	d8d7      	bhi.n	80048e6 <RTC_Get+0x9e>
 8004936:	e002      	b.n	800493e <RTC_Get+0xf6>
				else break;
 8004938:	bf00      	nop
 800493a:	e000      	b.n	800493e <RTC_Get+0xf6>
			else break;
 800493c:	bf00      	nop
		}
		rmon=temp1+1;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	3301      	adds	r3, #1
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <RTC_Get+0x1bc>)
 8004948:	701a      	strb	r2, [r3, #0]
		rday=temp+1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	3301      	adds	r3, #1
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4b2d      	ldr	r3, [pc, #180]	; (8004a08 <RTC_Get+0x1c0>)
 8004954:	701a      	strb	r2, [r3, #0]
	}
	temp=timecount%86400;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <RTC_Get+0x1ac>)
 800495a:	fba2 1203 	umull	r1, r2, r2, r3
 800495e:	0c12      	lsrs	r2, r2, #16
 8004960:	492a      	ldr	r1, [pc, #168]	; (8004a0c <RTC_Get+0x1c4>)
 8004962:	fb01 f202 	mul.w	r2, r1, r2
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
	rhour=temp/3600;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <RTC_Get+0x1c8>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	0adb      	lsrs	r3, r3, #11
 8004974:	b2da      	uxtb	r2, r3
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <RTC_Get+0x1cc>)
 8004978:	701a      	strb	r2, [r3, #0]
	rmin=(temp%3600)/60;
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <RTC_Get+0x1c8>)
 800497e:	fba3 1302 	umull	r1, r3, r3, r2
 8004982:	0adb      	lsrs	r3, r3, #11
 8004984:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <RTC_Get+0x1d0>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	b2da      	uxtb	r2, r3
 8004998:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <RTC_Get+0x1d4>)
 800499a:	701a      	strb	r2, [r3, #0]
	rsec=(temp%3600)%60;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <RTC_Get+0x1c8>)
 80049a0:	fba2 1203 	umull	r1, r2, r2, r3
 80049a4:	0ad2      	lsrs	r2, r2, #11
 80049a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80049aa:	fb01 f202 	mul.w	r2, r1, r2
 80049ae:	1a9a      	subs	r2, r3, r2
 80049b0:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <RTC_Get+0x1d0>)
 80049b2:	fba3 1302 	umull	r1, r3, r3, r2
 80049b6:	0959      	lsrs	r1, r3, #5
 80049b8:	460b      	mov	r3, r1
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	1a5b      	subs	r3, r3, r1
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	1ad1      	subs	r1, r2, r3
 80049c2:	b2ca      	uxtb	r2, r1
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <RTC_Get+0x1d8>)
 80049c6:	701a      	strb	r2, [r3, #0]
	rweek=RTC_Get_Week(ryear,rmon,rday);
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <RTC_Get+0x1b4>)
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <RTC_Get+0x1bc>)
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	b291      	uxth	r1, r2
 80049d2:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <RTC_Get+0x1c0>)
 80049d4:	7812      	ldrb	r2, [r2, #0]
 80049d6:	b292      	uxth	r2, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f825 	bl	8004a28 <RTC_Get_Week>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <RTC_Get+0x1dc>)
 80049e4:	701a      	strb	r2, [r3, #0]
	return 0;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40002800 	.word	0x40002800
 80049f4:	c22e4507 	.word	0xc22e4507
 80049f8:	20000bb0 	.word	0x20000bb0
 80049fc:	20000ba8 	.word	0x20000ba8
 8004a00:	080117f4 	.word	0x080117f4
 8004a04:	20000baa 	.word	0x20000baa
 8004a08:	20000bab 	.word	0x20000bab
 8004a0c:	00015180 	.word	0x00015180
 8004a10:	91a2b3c5 	.word	0x91a2b3c5
 8004a14:	20000bac 	.word	0x20000bac
 8004a18:	88888889 	.word	0x88888889
 8004a1c:	20000bad 	.word	0x20000bad
 8004a20:	20000bae 	.word	0x20000bae
 8004a24:	20000baf 	.word	0x20000baf

08004a28 <RTC_Get_Week>:

uint8_t RTC_Get_Week(uint16_t year, uint16_t month, uint16_t day){
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	80fb      	strh	r3, [r7, #6]
 8004a32:	460b      	mov	r3, r1
 8004a34:	80bb      	strh	r3, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	807b      	strh	r3, [r7, #2]
	uint16_t temp2;
	uint8_t yearH,yearL;
	yearH=year/100;
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ae8 <RTC_Get_Week+0xc0>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	733b      	strb	r3, [r7, #12]
	yearL=year%100;
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	4a27      	ldr	r2, [pc, #156]	; (8004ae8 <RTC_Get_Week+0xc0>)
 8004a4c:	fba2 1203 	umull	r1, r2, r2, r3
 8004a50:	0952      	lsrs	r2, r2, #5
 8004a52:	2164      	movs	r1, #100	; 0x64
 8004a54:	fb01 f202 	mul.w	r2, r1, r2
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	737b      	strb	r3, [r7, #13]
	if (yearH>19)yearL+=100;
 8004a5e:	7b3b      	ldrb	r3, [r7, #12]
 8004a60:	2b13      	cmp	r3, #19
 8004a62:	d902      	bls.n	8004a6a <RTC_Get_Week+0x42>
 8004a64:	7b7b      	ldrb	r3, [r7, #13]
 8004a66:	3364      	adds	r3, #100	; 0x64
 8004a68:	737b      	strb	r3, [r7, #13]
	temp2=yearL+yearL/4;
 8004a6a:	7b7b      	ldrb	r3, [r7, #13]
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	7b7b      	ldrb	r3, [r7, #13]
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	81fb      	strh	r3, [r7, #14]
	temp2=temp2%7;
 8004a7a:	89fa      	ldrh	r2, [r7, #14]
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <RTC_Get_Week+0xc4>)
 8004a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a82:	1ad1      	subs	r1, r2, r3
 8004a84:	0849      	lsrs	r1, r1, #1
 8004a86:	440b      	add	r3, r1
 8004a88:	0899      	lsrs	r1, r3, #2
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	1a5b      	subs	r3, r3, r1
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	81fb      	strh	r3, [r7, #14]
	temp2=temp2+day+table_week[month-1];
 8004a94:	89fa      	ldrh	r2, [r7, #14]
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	4413      	add	r3, r2
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	88bb      	ldrh	r3, [r7, #4]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	4913      	ldr	r1, [pc, #76]	; (8004af0 <RTC_Get_Week+0xc8>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	81fb      	strh	r3, [r7, #14]
	if (yearL%4==0&&month<3)temp2--;
 8004aaa:	7b7b      	ldrb	r3, [r7, #13]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <RTC_Get_Week+0x9a>
 8004ab6:	88bb      	ldrh	r3, [r7, #4]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d802      	bhi.n	8004ac2 <RTC_Get_Week+0x9a>
 8004abc:	89fb      	ldrh	r3, [r7, #14]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	81fb      	strh	r3, [r7, #14]
	return(temp2%7);
 8004ac2:	89fa      	ldrh	r2, [r7, #14]
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <RTC_Get_Week+0xc4>)
 8004ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8004aca:	1ad1      	subs	r1, r2, r3
 8004acc:	0849      	lsrs	r1, r1, #1
 8004ace:	440b      	add	r3, r1
 8004ad0:	0899      	lsrs	r1, r3, #2
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	1a5b      	subs	r3, r3, r1
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	b2db      	uxtb	r3, r3
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr
 8004ae8:	51eb851f 	.word	0x51eb851f
 8004aec:	24924925 	.word	0x24924925
 8004af0:	080117e8 	.word	0x080117e8

08004af4 <Is_Leap_Year>:

uint8_t Is_Leap_Year(uint16_t year){
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	80fb      	strh	r3, [r7, #6]
	if(year%4==0){
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d11e      	bne.n	8004b48 <Is_Leap_Year+0x54>
		if(year%100==0){
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	4a11      	ldr	r2, [pc, #68]	; (8004b54 <Is_Leap_Year+0x60>)
 8004b0e:	fba2 1203 	umull	r1, r2, r2, r3
 8004b12:	0952      	lsrs	r2, r2, #5
 8004b14:	2164      	movs	r1, #100	; 0x64
 8004b16:	fb01 f202 	mul.w	r2, r1, r2
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d110      	bne.n	8004b44 <Is_Leap_Year+0x50>
			if(year%400==0)return 1;
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <Is_Leap_Year+0x60>)
 8004b26:	fba2 1203 	umull	r1, r2, r2, r3
 8004b2a:	09d2      	lsrs	r2, r2, #7
 8004b2c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004b30:	fb01 f202 	mul.w	r2, r1, r2
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <Is_Leap_Year+0x4c>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e004      	b.n	8004b4a <Is_Leap_Year+0x56>
			else return 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e002      	b.n	8004b4a <Is_Leap_Year+0x56>
		}else return 1;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <Is_Leap_Year+0x56>
	}else return 0;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	51eb851f 	.word	0x51eb851f

08004b58 <RTC_raw>:

uint32_t RTC_raw(){
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
	uint32_t time;
	time=RTC->CNTH;
 8004b5e:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <RTC_raw+0x28>)
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	607b      	str	r3, [r7, #4]
	time<<=16;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	041b      	lsls	r3, r3, #16
 8004b68:	607b      	str	r3, [r7, #4]
	time+=RTC->CNTL;
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <RTC_raw+0x28>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4413      	add	r3, r2
 8004b72:	607b      	str	r3, [r7, #4]

	return time;
 8004b74:	687b      	ldr	r3, [r7, #4]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	40002800 	.word	0x40002800

08004b84 <get_TimeStamp>:


void get_TimeStamp(TimeStamp* t){
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	/*
	 * Store Updated Values By a TimeStamp Pointer
	 */
	t->ryear = ryear;
 8004b8c:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <get_TimeStamp+0x4c>)
 8004b8e:	881a      	ldrh	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	801a      	strh	r2, [r3, #0]
	t->rmon = rmon;
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <get_TimeStamp+0x50>)
 8004b96:	781a      	ldrb	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	709a      	strb	r2, [r3, #2]
	t->rday = rday;
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <get_TimeStamp+0x54>)
 8004b9e:	781a      	ldrb	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	70da      	strb	r2, [r3, #3]
	t->rhour = rhour;
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <get_TimeStamp+0x58>)
 8004ba6:	781a      	ldrb	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	711a      	strb	r2, [r3, #4]
	t->rmin = rmin;
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <get_TimeStamp+0x5c>)
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	715a      	strb	r2, [r3, #5]
	t->rsec = rsec;
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <get_TimeStamp+0x60>)
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	719a      	strb	r2, [r3, #6]
	t->rweek = rweek;
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <get_TimeStamp+0x64>)
 8004bbe:	781a      	ldrb	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	71da      	strb	r2, [r3, #7]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000ba8 	.word	0x20000ba8
 8004bd4:	20000baa 	.word	0x20000baa
 8004bd8:	20000bab 	.word	0x20000bab
 8004bdc:	20000bac 	.word	0x20000bac
 8004be0:	20000bad 	.word	0x20000bad
 8004be4:	20000bae 	.word	0x20000bae
 8004be8:	20000baf 	.word	0x20000baf

08004bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <HAL_MspInit+0x5c>)
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <HAL_MspInit+0x5c>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6193      	str	r3, [r2, #24]
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <HAL_MspInit+0x5c>)
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	60bb      	str	r3, [r7, #8]
 8004c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <HAL_MspInit+0x5c>)
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <HAL_MspInit+0x5c>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	61d3      	str	r3, [r2, #28]
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <HAL_MspInit+0x5c>)
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004c22:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <HAL_MspInit+0x60>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	4a04      	ldr	r2, [pc, #16]	; (8004c4c <HAL_MspInit+0x60>)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40010000 	.word	0x40010000

08004c50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <HAL_RTC_MspInit+0x3c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d110      	bne.n	8004c84 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004c62:	f001 fc97 	bl	8006594 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <HAL_RTC_MspInit+0x40>)
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <HAL_RTC_MspInit+0x40>)
 8004c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c70:	61d3      	str	r3, [r2, #28]
 8004c72:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <HAL_RTC_MspInit+0x40>)
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RTC_MspInit+0x44>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40002800 	.word	0x40002800
 8004c90:	40021000 	.word	0x40021000
 8004c94:	4242043c 	.word	0x4242043c

08004c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004caa:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <HAL_TIM_Base_MspInit+0x9c>)
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <HAL_TIM_Base_MspInit+0x9c>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	61d3      	str	r3, [r2, #28]
 8004cb6:	4b1f      	ldr	r3, [pc, #124]	; (8004d34 <HAL_TIM_Base_MspInit+0x9c>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004cc2:	e032      	b.n	8004d2a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <HAL_TIM_Base_MspInit+0xa0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d114      	bne.n	8004cf8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_TIM_Base_MspInit+0x9c>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_TIM_Base_MspInit+0x9c>)
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	61d3      	str	r3, [r2, #28]
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <HAL_TIM_Base_MspInit+0x9c>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2100      	movs	r1, #0
 8004cea:	201d      	movs	r0, #29
 8004cec:	f001 fa31 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cf0:	201d      	movs	r0, #29
 8004cf2:	f001 fa4a 	bl	800618a <HAL_NVIC_EnableIRQ>
}
 8004cf6:	e018      	b.n	8004d2a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a0f      	ldr	r2, [pc, #60]	; (8004d3c <HAL_TIM_Base_MspInit+0xa4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d113      	bne.n	8004d2a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <HAL_TIM_Base_MspInit+0x9c>)
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <HAL_TIM_Base_MspInit+0x9c>)
 8004d08:	f043 0308 	orr.w	r3, r3, #8
 8004d0c:	61d3      	str	r3, [r2, #28]
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_TIM_Base_MspInit+0x9c>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	2032      	movs	r0, #50	; 0x32
 8004d20:	f001 fa17 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004d24:	2032      	movs	r0, #50	; 0x32
 8004d26:	f001 fa30 	bl	800618a <HAL_NVIC_EnableIRQ>
}
 8004d2a:	bf00      	nop
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000c00 	.word	0x40000c00

08004d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d48:	f107 0310 	add.w	r3, r7, #16
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <HAL_UART_MspInit+0x8c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d131      	bne.n	8004dc4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_UART_MspInit+0x90>)
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <HAL_UART_MspInit+0x90>)
 8004d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d6a:	6193      	str	r3, [r2, #24]
 8004d6c:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <HAL_UART_MspInit+0x90>)
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d78:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <HAL_UART_MspInit+0x90>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <HAL_UART_MspInit+0x90>)
 8004d7e:	f043 0304 	orr.w	r3, r3, #4
 8004d82:	6193      	str	r3, [r2, #24]
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <HAL_UART_MspInit+0x90>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d96:	2302      	movs	r3, #2
 8004d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9e:	f107 0310 	add.w	r3, r7, #16
 8004da2:	4619      	mov	r1, r3
 8004da4:	480b      	ldr	r0, [pc, #44]	; (8004dd4 <HAL_UART_MspInit+0x94>)
 8004da6:	f001 fa0b 	bl	80061c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4805      	ldr	r0, [pc, #20]	; (8004dd4 <HAL_UART_MspInit+0x94>)
 8004dc0:	f001 f9fe 	bl	80061c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004dc4:	bf00      	nop
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40013800 	.word	0x40013800
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40010800 	.word	0x40010800

08004dd8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8004dec:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <HAL_FSMC_MspInit+0x78>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d129      	bne.n	8004e48 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8004df4:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <HAL_FSMC_MspInit+0x78>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004dfa:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <HAL_FSMC_MspInit+0x7c>)
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <HAL_FSMC_MspInit+0x7c>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e04:	6153      	str	r3, [r2, #20]
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <HAL_FSMC_MspInit+0x7c>)
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004e12:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004e16:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e20:	f107 0308 	add.w	r3, r7, #8
 8004e24:	4619      	mov	r1, r3
 8004e26:	480c      	ldr	r0, [pc, #48]	; (8004e58 <HAL_FSMC_MspInit+0x80>)
 8004e28:	f001 f9ca 	bl	80061c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004e2c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8004e30:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e32:	2302      	movs	r3, #2
 8004e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e36:	2303      	movs	r3, #3
 8004e38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4806      	ldr	r0, [pc, #24]	; (8004e5c <HAL_FSMC_MspInit+0x84>)
 8004e42:	f001 f9bd 	bl	80061c0 <HAL_GPIO_Init>
 8004e46:	e000      	b.n	8004e4a <HAL_FSMC_MspInit+0x72>
    return;
 8004e48:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20000bb4 	.word	0x20000bb4
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40011800 	.word	0x40011800
 8004e5c:	40011400 	.word	0x40011400

08004e60 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004e68:	f7ff ffb6 	bl	8004dd8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr

08004e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e84:	e7fe      	b.n	8004e84 <HardFault_Handler+0x4>

08004e86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e8a:	e7fe      	b.n	8004e8a <MemManage_Handler+0x4>

08004e8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e90:	e7fe      	b.n	8004e90 <BusFault_Handler+0x4>

08004e92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <UsageFault_Handler+0x4>

08004e98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ec0:	f001 f834 	bl	8005f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ec4:	bf00      	nop
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <EXTI4_IRQHandler+0x2c>)
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <EXTI4_IRQHandler+0x30>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <EXTI4_IRQHandler+0x2c>)
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8004ee4:	2010      	movs	r0, #16
 8004ee6:	f001 fb4b 	bl	8006580 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004eea:	2010      	movs	r0, #16
 8004eec:	f001 fb30 	bl	8006550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004ef0:	bf00      	nop
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40010400 	.word	0x40010400
 8004ef8:	20000bbe 	.word	0x20000bbe

08004efc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 8004f00:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <TIM3_IRQHandler+0x3c>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <TIM3_IRQHandler+0x3c>)
 8004f0a:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <TIM3_IRQHandler+0x3c>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10c      	bne.n	8004f2e <TIM3_IRQHandler+0x32>
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <TIM3_IRQHandler+0x40>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d108      	bne.n	8004f2e <TIM3_IRQHandler+0x32>
		//LCD_DrawString(5,5,"Hi");



		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 8004f1c:	4808      	ldr	r0, [pc, #32]	; (8004f40 <TIM3_IRQHandler+0x44>)
 8004f1e:	f002 fad4 	bl	80074ca <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8004f22:	4807      	ldr	r0, [pc, #28]	; (8004f40 <TIM3_IRQHandler+0x44>)
 8004f24:	f002 fb15 	bl	8007552 <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <TIM3_IRQHandler+0x40>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f2e:	4804      	ldr	r0, [pc, #16]	; (8004f40 <TIM3_IRQHandler+0x44>)
 8004f30:	f002 fb39 	bl	80075a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f34:	bf00      	nop
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000bbc 	.word	0x20000bbc
 8004f3c:	20000bbd 	.word	0x20000bbd
 8004f40:	20000a70 	.word	0x20000a70

08004f44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <TIM5_IRQHandler+0x14>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004f4e:	4803      	ldr	r0, [pc, #12]	; (8004f5c <TIM5_IRQHandler+0x18>)
 8004f50:	f002 fb29 	bl	80075a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20000008 	.word	0x20000008
 8004f5c:	20000ab0 	.word	0x20000ab0

08004f60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
	return 1;
 8004f64:	2301      	movs	r3, #1
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <_kill>:

int _kill(int pid, int sig)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f78:	f003 fa8a 	bl	8008490 <__errno>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2216      	movs	r2, #22
 8004f80:	601a      	str	r2, [r3, #0]
	return -1;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <_exit>:

void _exit (int status)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f96:	f04f 31ff 	mov.w	r1, #4294967295
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff ffe7 	bl	8004f6e <_kill>
	while (1) {}		/* Make sure we hang here */
 8004fa0:	e7fe      	b.n	8004fa0 <_exit+0x12>

08004fa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b086      	sub	sp, #24
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	e00a      	b.n	8004fca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004fb4:	f3af 8000 	nop.w
 8004fb8:	4601      	mov	r1, r0
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	60ba      	str	r2, [r7, #8]
 8004fc0:	b2ca      	uxtb	r2, r1
 8004fc2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	dbf0      	blt.n	8004fb4 <_read+0x12>
	}

return len;
 8004fd2:	687b      	ldr	r3, [r7, #4]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e009      	b.n	8005002 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	60ba      	str	r2, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	3301      	adds	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	dbf1      	blt.n	8004fee <_write+0x12>
	}
	return len;
 800500a:	687b      	ldr	r3, [r7, #4]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <_close>:

int _close(int file)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	return -1;
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800503a:	605a      	str	r2, [r3, #4]
	return 0;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr

08005048 <_isatty>:

int _isatty(int file)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	return 1;
 8005050:	2301      	movs	r3, #1
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
	return 0;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <_sbrk+0x5c>)
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <_sbrk+0x60>)
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005088:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <_sbrk+0x64>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <_sbrk+0x64>)
 8005092:	4a12      	ldr	r2, [pc, #72]	; (80050dc <_sbrk+0x68>)
 8005094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <_sbrk+0x64>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d207      	bcs.n	80050b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050a4:	f003 f9f4 	bl	8008490 <__errno>
 80050a8:	4603      	mov	r3, r0
 80050aa:	220c      	movs	r2, #12
 80050ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295
 80050b2:	e009      	b.n	80050c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050b4:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <_sbrk+0x64>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <_sbrk+0x64>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <_sbrk+0x64>)
 80050c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050c6:	68fb      	ldr	r3, [r7, #12]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20010000 	.word	0x20010000
 80050d4:	00000400 	.word	0x00000400
 80050d8:	20000bb8 	.word	0x20000bb8
 80050dc:	20000c00 	.word	0x20000c00

080050e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80050e4:	4b15      	ldr	r3, [pc, #84]	; (800513c <SystemInit+0x5c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <SystemInit+0x5c>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80050f0:	4b12      	ldr	r3, [pc, #72]	; (800513c <SystemInit+0x5c>)
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	4911      	ldr	r1, [pc, #68]	; (800513c <SystemInit+0x5c>)
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <SystemInit+0x60>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80050fc:	4b0f      	ldr	r3, [pc, #60]	; (800513c <SystemInit+0x5c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0e      	ldr	r2, [pc, #56]	; (800513c <SystemInit+0x5c>)
 8005102:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <SystemInit+0x5c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <SystemInit+0x5c>)
 8005112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005116:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005118:	4b08      	ldr	r3, [pc, #32]	; (800513c <SystemInit+0x5c>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4a07      	ldr	r2, [pc, #28]	; (800513c <SystemInit+0x5c>)
 800511e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005122:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <SystemInit+0x5c>)
 8005126:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800512a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <SystemInit+0x64>)
 800512e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005132:	609a      	str	r2, [r3, #8]
#endif 
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr
 800513c:	40021000 	.word	0x40021000
 8005140:	f8ff0000 	.word	0xf8ff0000
 8005144:	e000ed00 	.word	0xe000ed00

08005148 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <TIMER_INIT+0x20>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0201 	mvn.w	r2, #1
 8005154:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 8005156:	4804      	ldr	r0, [pc, #16]	; (8005168 <TIMER_INIT+0x20>)
 8005158:	f002 f99d 	bl	8007496 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 800515c:	4802      	ldr	r0, [pc, #8]	; (8005168 <TIMER_INIT+0x20>)
 800515e:	f002 f9de 	bl	800751e <HAL_TIM_Base_Start_IT>
}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000ab0 	.word	0x20000ab0

0800516c <delay_us>:

void delay_us(uint16_t nus)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005176:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <delay_us+0x6c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2200      	movs	r2, #0
 800517c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim2);
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <delay_us+0x6c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <delay_us+0x6c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim2) < nus)
 800518e:	bf00      	nop
 8005190:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <delay_us+0x6c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	429a      	cmp	r2, r3
 800519a:	d3f9      	bcc.n	8005190 <delay_us+0x24>
	{
	}
	__HAL_TIM_DISABLE(&htim2);
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <delay_us+0x6c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6a1a      	ldr	r2, [r3, #32]
 80051a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10f      	bne.n	80051cc <delay_us+0x60>
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <delay_us+0x6c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a1a      	ldr	r2, [r3, #32]
 80051b2:	f240 4344 	movw	r3, #1092	; 0x444
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d107      	bne.n	80051cc <delay_us+0x60>
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <delay_us+0x6c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <delay_us+0x6c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000a30 	.word	0x20000a30

080051dc <timer_min>:

void timer_min(uint8_t min)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <timer_min+0x38>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f06f 0201 	mvn.w	r2, #1
 80051ee:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <timer_min+0x3c>)
 80051f8:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 80051fa:	4b08      	ldr	r3, [pc, #32]	; (800521c <timer_min+0x40>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8005200:	4804      	ldr	r0, [pc, #16]	; (8005214 <timer_min+0x38>)
 8005202:	f002 f948 	bl	8007496 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8005206:	4803      	ldr	r0, [pc, #12]	; (8005214 <timer_min+0x38>)
 8005208:	f002 f989 	bl	800751e <HAL_TIM_Base_Start_IT>
}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000a70 	.word	0x20000a70
 8005218:	20000bbc 	.word	0x20000bbc
 800521c:	20000bbd 	.word	0x20000bbd

08005220 <XPT2046_DelayUS>:
		-4.979353, -0.001750, 0.065168, -13.318824 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e00a      	b.n	8005244 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 800522e:	230c      	movs	r3, #12
 8005230:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8005232:	bf00      	nop
 8005234:	7afb      	ldrb	r3, [r7, #11]
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	72fa      	strb	r2, [r7, #11]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1fa      	bne.n	8005234 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	429a      	cmp	r2, r3
 800524a:	d3f0      	bcc.n	800522e <XPT2046_DelayUS+0xe>
			;

	}

}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 8005262:	2200      	movs	r2, #0
 8005264:	2104      	movs	r1, #4
 8005266:	481d      	ldr	r0, [pc, #116]	; (80052dc <XPT2046_WriteCMD+0x84>)
 8005268:	f001 f959 	bl	800651e <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 800526c:	2200      	movs	r2, #0
 800526e:	2101      	movs	r1, #1
 8005270:	481a      	ldr	r0, [pc, #104]	; (80052dc <XPT2046_WriteCMD+0x84>)
 8005272:	f001 f954 	bl	800651e <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
 800527a:	e027      	b.n	80052cc <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800527c:	79fa      	ldrb	r2, [r7, #7]
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	f1c3 0307 	rsb	r3, r3, #7
 8005284:	fa42 f303 	asr.w	r3, r2, r3
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <XPT2046_WriteCMD+0x44>
 8005290:	2201      	movs	r2, #1
 8005292:	2104      	movs	r1, #4
 8005294:	4811      	ldr	r0, [pc, #68]	; (80052dc <XPT2046_WriteCMD+0x84>)
 8005296:	f001 f942 	bl	800651e <HAL_GPIO_WritePin>
 800529a:	e004      	b.n	80052a6 <XPT2046_WriteCMD+0x4e>
 800529c:	2200      	movs	r2, #0
 800529e:	2104      	movs	r1, #4
 80052a0:	480e      	ldr	r0, [pc, #56]	; (80052dc <XPT2046_WriteCMD+0x84>)
 80052a2:	f001 f93c 	bl	800651e <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80052a6:	2005      	movs	r0, #5
 80052a8:	f7ff ffba 	bl	8005220 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 80052ac:	2201      	movs	r2, #1
 80052ae:	2101      	movs	r1, #1
 80052b0:	480a      	ldr	r0, [pc, #40]	; (80052dc <XPT2046_WriteCMD+0x84>)
 80052b2:	f001 f934 	bl	800651e <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 80052b6:	2005      	movs	r0, #5
 80052b8:	f7ff ffb2 	bl	8005220 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80052bc:	2200      	movs	r2, #0
 80052be:	2101      	movs	r1, #1
 80052c0:	4806      	ldr	r0, [pc, #24]	; (80052dc <XPT2046_WriteCMD+0x84>)
 80052c2:	f001 f92c 	bl	800651e <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	3301      	adds	r3, #1
 80052ca:	73fb      	strb	r3, [r7, #15]
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b07      	cmp	r3, #7
 80052d0:	d9d4      	bls.n	800527c <XPT2046_WriteCMD+0x24>
	}

}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40011800 	.word	0x40011800

080052e0 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 80052e6:	2300      	movs	r3, #0
 80052e8:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 80052ea:	2200      	movs	r2, #0
 80052ec:	2104      	movs	r1, #4
 80052ee:	4819      	ldr	r0, [pc, #100]	; (8005354 <XPT2046_ReadCMD+0x74>)
 80052f0:	f001 f915 	bl	800651e <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80052f4:	2201      	movs	r2, #1
 80052f6:	2101      	movs	r1, #1
 80052f8:	4816      	ldr	r0, [pc, #88]	; (8005354 <XPT2046_ReadCMD+0x74>)
 80052fa:	f001 f910 	bl	800651e <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 80052fe:	2300      	movs	r3, #0
 8005300:	71fb      	strb	r3, [r7, #7]
 8005302:	e01e      	b.n	8005342 <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8005304:	2200      	movs	r2, #0
 8005306:	2101      	movs	r1, #1
 8005308:	4812      	ldr	r0, [pc, #72]	; (8005354 <XPT2046_ReadCMD+0x74>)
 800530a:	f001 f908 	bl	800651e <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 800530e:	2108      	movs	r1, #8
 8005310:	4810      	ldr	r0, [pc, #64]	; (8005354 <XPT2046_ReadCMD+0x74>)
 8005312:	f001 f8ed 	bl	80064f0 <HAL_GPIO_ReadPin>
 8005316:	4603      	mov	r3, r0
 8005318:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 800531a:	887a      	ldrh	r2, [r7, #2]
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	f1c3 030b 	rsb	r3, r3, #11
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	b21a      	sxth	r2, r3
 8005328:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800532c:	4313      	orrs	r3, r2
 800532e:	b21b      	sxth	r3, r3
 8005330:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8005332:	2201      	movs	r2, #1
 8005334:	2101      	movs	r1, #1
 8005336:	4807      	ldr	r0, [pc, #28]	; (8005354 <XPT2046_ReadCMD+0x74>)
 8005338:	f001 f8f1 	bl	800651e <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	3301      	adds	r3, #1
 8005340:	71fb      	strb	r3, [r7, #7]
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	2b0b      	cmp	r3, #11
 8005346:	d9dd      	bls.n	8005304 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8005348:	88bb      	ldrh	r3, [r7, #4]

}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40011800 	.word	0x40011800

08005358 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff ff77 	bl	8005258 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 800536a:	f7ff ffb9 	bl	80052e0 <XPT2046_ReadCMD>
 800536e:	4603      	mov	r3, r0

}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 8005382:	2090      	movs	r0, #144	; 0x90
 8005384:	f7ff ffe8 	bl	8005358 <XPT2046_ReadAdc>
 8005388:	4603      	mov	r3, r0
 800538a:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 800538c:	2001      	movs	r0, #1
 800538e:	f7ff ff47 	bl	8005220 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 8005392:	20d0      	movs	r0, #208	; 0xd0
 8005394:	f7ff ffe0 	bl	8005358 <XPT2046_ReadAdc>
 8005398:	4603      	mov	r3, r0
 800539a:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	89fa      	ldrh	r2, [r7, #14]
 80053a0:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	89ba      	ldrh	r2, [r7, #12]
 80053a6:	801a      	strh	r2, [r3, #0]

}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b092      	sub	sp, #72	; 0x48
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 80053be:	f107 0308 	add.w	r3, r7, #8
 80053c2:	2228      	movs	r2, #40	; 0x28
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f003 f88c 	bl	80084e4 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 80053cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80053d0:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80053d4:	4611      	mov	r1, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff ffce 	bl	8005378 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 80053dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053e0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	3348      	adds	r3, #72	; 0x48
 80053e8:	443b      	add	r3, r7
 80053ea:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 80053ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053f2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80053f6:	330a      	adds	r3, #10
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	3348      	adds	r3, #72	; 0x48
 80053fc:	443b      	add	r3, r7
 80053fe:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 8005402:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005406:	3301      	adds	r3, #1
 8005408:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 800540c:	2110      	movs	r1, #16
 800540e:	4871      	ldr	r0, [pc, #452]	; (80055d4 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8005410:	f001 f86e 	bl	80064f0 <HAL_GPIO_ReadPin>
 8005414:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <XPT2046_ReadAdc_Smooth_XY+0x72>
 800541a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800541e:	2b09      	cmp	r3, #9
 8005420:	d9d4      	bls.n	80053cc <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8005422:	2110      	movs	r1, #16
 8005424:	486b      	ldr	r0, [pc, #428]	; (80055d4 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8005426:	f001 f863 	bl	80064f0 <HAL_GPIO_ReadPin>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8005430:	4b69      	ldr	r3, [pc, #420]	; (80055d8 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8005436:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800543a:	2b0a      	cmp	r3, #10
 800543c:	f040 80c4 	bne.w	80055c8 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8005440:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005444:	643b      	str	r3, [r7, #64]	; 0x40
 8005446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 800544a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800544e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8005454:	2301      	movs	r3, #1
 8005456:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800545a:	e02b      	b.n	80054b4 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 800545c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	3348      	adds	r3, #72	; 0x48
 8005464:	443b      	add	r3, r7
 8005466:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800546a:	461a      	mov	r2, r3
 800546c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800546e:	4293      	cmp	r3, r2
 8005470:	dd08      	ble.n	8005484 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8005472:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	3348      	adds	r3, #72	; 0x48
 800547a:	443b      	add	r3, r7
 800547c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005480:	643b      	str	r3, [r7, #64]	; 0x40
 8005482:	e012      	b.n	80054aa <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8005484:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	3348      	adds	r3, #72	; 0x48
 800548c:	443b      	add	r3, r7
 800548e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005492:	461a      	mov	r2, r3
 8005494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005496:	4293      	cmp	r3, r2
 8005498:	da07      	bge.n	80054aa <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 800549a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	3348      	adds	r3, #72	; 0x48
 80054a2:	443b      	add	r3, r7
 80054a4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 80054aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80054ae:	3301      	adds	r3, #1
 80054b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80054b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80054b8:	2b09      	cmp	r3, #9
 80054ba:	d9cf      	bls.n	800545c <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80054c2:	e02f      	b.n	8005524 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 80054c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80054c8:	330a      	adds	r3, #10
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	3348      	adds	r3, #72	; 0x48
 80054ce:	443b      	add	r3, r7
 80054d0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	4293      	cmp	r3, r2
 80054da:	dd09      	ble.n	80054f0 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 80054dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80054e0:	330a      	adds	r3, #10
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	3348      	adds	r3, #72	; 0x48
 80054e6:	443b      	add	r3, r7
 80054e8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ee:	e014      	b.n	800551a <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 80054f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80054f4:	330a      	adds	r3, #10
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	3348      	adds	r3, #72	; 0x48
 80054fa:	443b      	add	r3, r7
 80054fc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005500:	461a      	mov	r2, r3
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	4293      	cmp	r3, r2
 8005506:	da08      	bge.n	800551a <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8005508:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800550c:	330a      	adds	r3, #10
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	3348      	adds	r3, #72	; 0x48
 8005512:	443b      	add	r3, r7
 8005514:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 800551a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800551e:	3301      	adds	r3, #1
 8005520:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005524:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005528:	2b09      	cmp	r3, #9
 800552a:	d9cb      	bls.n	80054c4 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 800552c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005530:	461a      	mov	r2, r3
 8005532:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005536:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8005538:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005542:	4413      	add	r3, r2
 8005544:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005548:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 800554a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800554e:	4413      	add	r3, r2
 8005550:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005554:	4413      	add	r3, r2
 8005556:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800555a:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 800555c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005560:	4413      	add	r3, r2
 8005562:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005566:	441a      	add	r2, r3
 8005568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556a:	1ad2      	subs	r2, r2, r3
 800556c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556e:	1ad3      	subs	r3, r2, r3
				>> 3;
 8005570:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8005572:	b29a      	uxth	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8005578:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800557c:	461a      	mov	r2, r3
 800557e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005582:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8005584:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005588:	4413      	add	r3, r2
 800558a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800558e:	4413      	add	r3, r2
 8005590:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8005594:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8005596:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800559a:	4413      	add	r3, r2
 800559c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80055a0:	4413      	add	r3, r2
 80055a2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80055a6:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 80055a8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80055ac:	4413      	add	r3, r2
 80055ae:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80055b2:	441a      	add	r2, r3
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	1ad2      	subs	r2, r2, r3
 80055b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ba:	1ad3      	subs	r3, r2, r3
				>> 3;
 80055bc:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	805a      	strh	r2, [r3, #2]

		return 1;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 80055c8:	2300      	movs	r3, #0

}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3748      	adds	r7, #72	; 0x48
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40011800 	.word	0x40011800
 80055d8:	20000bbe 	.word	0x20000bbe

080055dc <XPT2046_Calculate_CalibrationFactor>:
#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(
		strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_Coordinate *pScreenSample,
		strType_XPT2046_Calibration *pCalibrationFactor) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	3308      	adds	r3, #8
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	1ad3      	subs	r3, r2, r3
			* (pScreenSample[1].y - pScreenSample[2].y))
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	3204      	adds	r2, #4
 80055fe:	8852      	ldrh	r2, [r2, #2]
 8005600:	4611      	mov	r1, r2
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	3208      	adds	r2, #8
 8005606:	8852      	ldrh	r2, [r2, #2]
 8005608:	1a8a      	subs	r2, r1, r2
 800560a:	fb03 f202 	mul.w	r2, r3, r2
			- ((pScreenSample[1].x - pScreenSample[2].x)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3304      	adds	r3, #4
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	4619      	mov	r1, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	3308      	adds	r3, #8
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	1acb      	subs	r3, r1, r3
					* (pScreenSample[0].y - pScreenSample[2].y));
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	8849      	ldrh	r1, [r1, #2]
 8005622:	4608      	mov	r0, r1
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	3108      	adds	r1, #8
 8005628:	8849      	ldrh	r1, [r1, #2]
 800562a:	1a41      	subs	r1, r0, r1
 800562c:	fb01 f303 	mul.w	r3, r1, r3
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8005630:	1ad3      	subs	r3, r2, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8005632:	4618      	mov	r0, r3
 8005634:	f7fa ff52 	bl	80004dc <__aeabi_i2d>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	f7fb fa16 	bl	8000a80 <__aeabi_dcmpeq>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	75fb      	strb	r3, [r7, #23]
 800565e:	e145      	b.n	80058ec <XPT2046_Calculate_CalibrationFactor+0x310>

	else {

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].x)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3308      	adds	r3, #8
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	3204      	adds	r2, #4
 8005672:	8852      	ldrh	r2, [r2, #2]
 8005674:	4611      	mov	r1, r2
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	3208      	adds	r2, #8
 800567a:	8852      	ldrh	r2, [r2, #2]
 800567c:	1a8a      	subs	r2, r1, r2
 800567e:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3304      	adds	r3, #4
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	4619      	mov	r1, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3308      	adds	r3, #8
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	8849      	ldrh	r1, [r1, #2]
 8005696:	4608      	mov	r0, r1
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	3108      	adds	r1, #8
 800569c:	8849      	ldrh	r1, [r1, #2]
 800569e:	1a41      	subs	r1, r0, r1
 80056a0:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 80056a4:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fa ff18 	bl	80004dc <__aeabi_i2d>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	3308      	adds	r3, #8
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x))
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	3204      	adds	r2, #4
 80056c8:	8812      	ldrh	r2, [r2, #0]
 80056ca:	4611      	mov	r1, r2
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	3208      	adds	r2, #8
 80056d0:	8812      	ldrh	r2, [r2, #0]
 80056d2:	1a8a      	subs	r2, r1, r2
 80056d4:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	4619      	mov	r1, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3308      	adds	r3, #8
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	3104      	adds	r1, #4
 80056ea:	8809      	ldrh	r1, [r1, #0]
 80056ec:	4608      	mov	r0, r1
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	3108      	adds	r1, #8
 80056f2:	8809      	ldrh	r1, [r1, #0]
 80056f4:	1a41      	subs	r1, r0, r1
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 80056fa:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fa feed 	bl	80004dc <__aeabi_i2d>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	3308      	adds	r3, #8
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3304      	adds	r3, #4
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].x)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	3304      	adds	r3, #4
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	4619      	mov	r1, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3308      	adds	r3, #8
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	8852      	ldrh	r2, [r2, #2]
 8005736:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	4619      	mov	r1, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3308      	adds	r3, #8
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].x)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	3308      	adds	r3, #8
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	fb00 f303 	mul.w	r3, r0, r3
 800575a:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	3104      	adds	r1, #4
 8005760:	8849      	ldrh	r1, [r1, #2]
 8005762:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8005766:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	3304      	adds	r3, #4
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	4619      	mov	r1, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].x)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3304      	adds	r3, #4
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	fb00 f303 	mul.w	r3, r0, r3
 8005788:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	3108      	adds	r1, #8
 800578e:	8849      	ldrh	r1, [r1, #2]
 8005790:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8005794:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8005796:	4618      	mov	r0, r3
 8005798:	f7fa fea0 	bl	80004dc <__aeabi_i2d>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	885b      	ldrh	r3, [r3, #2]
 80057aa:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].y)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3308      	adds	r3, #8
 80057b0:	885b      	ldrh	r3, [r3, #2]
 80057b2:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	3204      	adds	r2, #4
 80057b8:	8852      	ldrh	r2, [r2, #2]
 80057ba:	4611      	mov	r1, r2
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	3208      	adds	r2, #8
 80057c0:	8852      	ldrh	r2, [r2, #2]
 80057c2:	1a8a      	subs	r2, r1, r2
 80057c4:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3304      	adds	r3, #4
 80057cc:	885b      	ldrh	r3, [r3, #2]
 80057ce:	4619      	mov	r1, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3308      	adds	r3, #8
 80057d4:	885b      	ldrh	r3, [r3, #2]
 80057d6:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	8849      	ldrh	r1, [r1, #2]
 80057dc:	4608      	mov	r0, r1
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	3108      	adds	r1, #8
 80057e2:	8849      	ldrh	r1, [r1, #2]
 80057e4:	1a41      	subs	r1, r0, r1
 80057e6:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 80057ea:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fa fe75 	bl	80004dc <__aeabi_i2d>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	3308      	adds	r3, #8
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y))
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	3204      	adds	r2, #4
 800580e:	8852      	ldrh	r2, [r2, #2]
 8005810:	4611      	mov	r1, r2
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	3208      	adds	r2, #8
 8005816:	8852      	ldrh	r2, [r2, #2]
 8005818:	1a8a      	subs	r2, r1, r2
 800581a:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	885b      	ldrh	r3, [r3, #2]
 8005822:	4619      	mov	r1, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3308      	adds	r3, #8
 8005828:	885b      	ldrh	r3, [r3, #2]
 800582a:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	3104      	adds	r1, #4
 8005830:	8809      	ldrh	r1, [r1, #0]
 8005832:	4608      	mov	r0, r1
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	3108      	adds	r1, #8
 8005838:	8809      	ldrh	r1, [r1, #0]
 800583a:	1a41      	subs	r1, r0, r1
 800583c:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8005840:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8005842:	4618      	mov	r0, r3
 8005844:	f7fa fe4a 	bl	80004dc <__aeabi_i2d>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	3308      	adds	r3, #8
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3304      	adds	r3, #4
 800585e:	885b      	ldrh	r3, [r3, #2]
 8005860:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].y)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	3304      	adds	r3, #4
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	4619      	mov	r1, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3308      	adds	r3, #8
 8005870:	885b      	ldrh	r3, [r3, #2]
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	8852      	ldrh	r2, [r2, #2]
 800587c:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	4619      	mov	r1, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3308      	adds	r3, #8
 800588a:	885b      	ldrh	r3, [r3, #2]
 800588c:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].y)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3308      	adds	r3, #8
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	885b      	ldrh	r3, [r3, #2]
 800589c:	fb00 f303 	mul.w	r3, r0, r3
 80058a0:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	3104      	adds	r1, #4
 80058a6:	8849      	ldrh	r1, [r1, #2]
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 80058ac:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	3304      	adds	r3, #4
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	4619      	mov	r1, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	885b      	ldrh	r3, [r3, #2]
 80058ba:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].y)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3304      	adds	r3, #4
 80058c8:	885b      	ldrh	r3, [r3, #2]
 80058ca:	fb00 f303 	mul.w	r3, r0, r3
 80058ce:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	3108      	adds	r1, #8
 80058d4:	8849      	ldrh	r1, [r1, #2]
 80058d6:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 80058da:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fa fdfd 	bl	80004dc <__aeabi_i2d>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}

	return ucRet;
 80058ec:	7dfb      	ldrb	r3, [r7, #23]

}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void) {
 80058f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80058fc:	b0a0      	sub	sp, #128	; 0x80
 80058fe:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8005906:	2300      	movs	r3, #0
 8005908:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800590c:	2300      	movs	r3, #0
 800590e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8005912:	2300      	movs	r3, #0
 8005914:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char *pStr = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	66bb      	str	r3, [r7, #104]	; 0x68
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 800591c:	23f0      	movs	r3, #240	; 0xf0
 800591e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 8005922:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005926:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	    usScreenWidth = LCD_Default_Max_Heigth;
	    usScreenHeigth = LCD_Default_Max_Width;
	
	  #endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 800592a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800592e:	089b      	lsrs	r3, r3, #2
 8005930:	b29b      	uxth	r3, r3
 8005932:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 8005936:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800593a:	089b      	lsrs	r3, r3, #2
 800593c:	b29b      	uxth	r3, r3
 800593e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8005942:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005946:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 800594a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800594e:	4613      	mov	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4413      	add	r3, r2
 8005954:	109b      	asrs	r3, r3, #2
 8005956:	b29b      	uxth	r3, r3
 8005958:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 800595c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005960:	4613      	mov	r3, r2
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	4413      	add	r3, r2
 8005966:	109b      	asrs	r3, r3, #2
 8005968:	b29b      	uxth	r3, r3
 800596a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 800596e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005972:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8005976:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800597a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 800597e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005982:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	LCD_GramScan(1);
 8005986:	2001      	movs	r0, #1
 8005988:	f7fc fc28 	bl	80021dc <LCD_GramScan>

	for (i = 0; i < 4; i++) {
 800598c:	2300      	movs	r3, #0
 800598e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005992:	e047      	b.n	8005a24 <XPT2046_Touch_Calibrate+0x12c>
		LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8005994:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005998:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800599c:	2100      	movs	r1, #0
 800599e:	2000      	movs	r0, #0
 80059a0:	f7fc f9a4 	bl	8001cec <LCD_Clear>

		pStr = "Touch Calibrate ......";
 80059a4:	4bb6      	ldr	r3, [pc, #728]	; (8005c80 <XPT2046_Touch_Calibrate+0x388>)
 80059a6:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color(
				(usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1,
 80059a8:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80059ac:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80059ae:	f7fa fc3b 	bl	8000228 <strlen>
 80059b2:	4603      	mov	r3, r0
 80059b4:	3b07      	subs	r3, #7
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	1ae3      	subs	r3, r4, r3
 80059ba:	085b      	lsrs	r3, r3, #1
		LCD_DrawString_Color(
 80059bc:	b298      	uxth	r0, r3
 80059be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	b299      	uxth	r1, r3
 80059c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059d2:	f7fc fbcd 	bl	8002170 <LCD_DrawString_Color>
		/*
		sprintf(cStr, "%d", i + 1);
		LCD_DrawString_Color(usScreenWidth >> 1,
				(usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
		*/
		XPT2046_DelayUS(100000);
 80059d6:	48ab      	ldr	r0, [pc, #684]	; (8005c84 <XPT2046_Touch_Calibrate+0x38c>)
 80059d8:	f7ff fc22 	bl	8005220 <XPT2046_DelayUS>

		LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 80059dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	3378      	adds	r3, #120	; 0x78
 80059e4:	443b      	add	r3, r7
 80059e6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80059ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	3378      	adds	r3, #120	; 0x78
 80059f2:	443b      	add	r3, r7
 80059f4:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7fc fb96 	bl	800212c <LCD_DrawCross>

		while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
 8005a00:	bf00      	nop
 8005a02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005a06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fcce 	bl	80053b0 <XPT2046_ReadAdc_Smooth_XY>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f3      	beq.n	8005a02 <XPT2046_Touch_Calibrate+0x10a>
	for (i = 0; i < 4; i++) {
 8005a1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005a24:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d9b3      	bls.n	8005994 <XPT2046_Touch_Calibrate+0x9c>
			;

	}

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample,
 8005a2c:	463a      	mov	r2, r7
 8005a2e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005a32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fdd0 	bl	80055dc <XPT2046_Calculate_CalibrationFactor>
			&CalibrationFactor);

	if (CalibrationFactor.Divider == 0)
 8005a3c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	f7fb f81a 	bl	8000a80 <__aeabi_dcmpeq>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 8113 	bne.w	8005c7a <XPT2046_Touch_Calibrate+0x382>
		goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8005a54:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fa fd3d 	bl	80004dc <__aeabi_i2d>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f7fa fda1 	bl	80005b0 <__aeabi_dmul>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4690      	mov	r8, r2
 8005a74:	4699      	mov	r9, r3
			+ (CalibrationFactor.Bn * strScreenSample[3].y)
 8005a76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fa fd2c 	bl	80004dc <__aeabi_i2d>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4620      	mov	r0, r4
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	f7fa fd90 	bl	80005b0 <__aeabi_dmul>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4640      	mov	r0, r8
 8005a96:	4649      	mov	r1, r9
 8005a98:	f7fa fbd4 	bl	8000244 <__adddf3>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4619      	mov	r1, r3
			+ CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8005aa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005aa8:	f7fa fbcc 	bl	8000244 <__adddf3>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ab8:	f7fa fea4 	bl	8000804 <__aeabi_ddiv>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f7fb f84c 	bl	8000b60 <__aeabi_d2uiz>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8005ace:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8005ad2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fa fd00 	bl	80004dc <__aeabi_i2d>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	f7fa fd64 	bl	80005b0 <__aeabi_dmul>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4690      	mov	r8, r2
 8005aee:	4699      	mov	r9, r3
			+ (CalibrationFactor.En * strScreenSample[3].y)
 8005af0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005af4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fa fcef 	bl	80004dc <__aeabi_i2d>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4620      	mov	r0, r4
 8005b04:	4629      	mov	r1, r5
 8005b06:	f7fa fd53 	bl	80005b0 <__aeabi_dmul>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4649      	mov	r1, r9
 8005b12:	f7fa fb97 	bl	8000244 <__adddf3>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4619      	mov	r1, r3
			+ CalibrationFactor.Fn) / CalibrationFactor.Divider;
 8005b1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b22:	f7fa fb8f 	bl	8000244 <__adddf3>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b32:	f7fa fe67 	bl	8000804 <__aeabi_ddiv>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f7fb f80f 	bl	8000b60 <__aeabi_d2uiz>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x =
			(usTest_x > strCrossCoordinate[3].x) ?
 8005b48:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8005b4c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d906      	bls.n	8005b62 <XPT2046_Touch_Calibrate+0x26a>
					(usTest_x - strCrossCoordinate[3].x) :
 8005b54:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8005b58:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	e005      	b.n	8005b6e <XPT2046_Touch_Calibrate+0x276>
					(strCrossCoordinate[3].x - usTest_x);
 8005b62:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	usGap_x =
 8005b66:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y =
			(usTest_y > strCrossCoordinate[3].y) ?
 8005b72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8005b76:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d906      	bls.n	8005b8c <XPT2046_Touch_Calibrate+0x294>
					(usTest_y - strCrossCoordinate[3].y) :
 8005b7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8005b82:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	e005      	b.n	8005b98 <XPT2046_Touch_Calibrate+0x2a0>
					(strCrossCoordinate[3].y - usTest_y);
 8005b8c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
	usGap_y =
 8005b90:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((usGap_x > 10) || (usGap_y > 10))
 8005b9c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005ba0:	2b0a      	cmp	r3, #10
 8005ba2:	d877      	bhi.n	8005c94 <XPT2046_Touch_Calibrate+0x39c>
 8005ba4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005ba8:	2b0a      	cmp	r3, #10
 8005baa:	d873      	bhi.n	8005c94 <XPT2046_Touch_Calibrate+0x39c>
		goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8005bac:	e9d7 0100 	ldrd	r0, r1, [r7]
			/ CalibrationFactor.Divider;
 8005bb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bb4:	f7fa fe26 	bl	8000804 <__aeabi_ddiv>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8005bbc:	4932      	ldr	r1, [pc, #200]	; (8005c88 <XPT2046_Touch_Calibrate+0x390>)
 8005bbe:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8005bc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
			/ CalibrationFactor.Divider;
 8005bc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bca:	f7fa fe1b 	bl	8000804 <__aeabi_ddiv>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8005bd2:	492d      	ldr	r1, [pc, #180]	; (8005c88 <XPT2046_Touch_Calibrate+0x390>)
 8005bd4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8005bd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
			/ CalibrationFactor.Divider;
 8005bdc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005be0:	f7fa fe10 	bl	8000804 <__aeabi_ddiv>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8005be8:	4927      	ldr	r1, [pc, #156]	; (8005c88 <XPT2046_Touch_Calibrate+0x390>)
 8005bea:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 8005bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			/ CalibrationFactor.Divider;
 8005bf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bf6:	f7fa fe05 	bl	8000804 <__aeabi_ddiv>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 8005bfe:	4922      	ldr	r1, [pc, #136]	; (8005c88 <XPT2046_Touch_Calibrate+0x390>)
 8005c00:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8005c04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
			/ CalibrationFactor.Divider;
 8005c08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c0c:	f7fa fdfa 	bl	8000804 <__aeabi_ddiv>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8005c14:	491c      	ldr	r1, [pc, #112]	; (8005c88 <XPT2046_Touch_Calibrate+0x390>)
 8005c16:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8005c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
			/ CalibrationFactor.Divider;
 8005c1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c22:	f7fa fdef 	bl	8000804 <__aeabi_ddiv>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8005c2a:	4917      	ldr	r1, [pc, #92]	; (8005c88 <XPT2046_Touch_Calibrate+0x390>)
 8005c2c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

#endif

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8005c30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c34:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005c38:	2100      	movs	r1, #0
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f7fc f856 	bl	8001cec <LCD_Clear>

	pStr = "Welcome !";
 8005c40:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <XPT2046_Touch_Calibrate+0x394>)
 8005c42:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8005c44:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8005c48:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005c4a:	f7fa faed 	bl	8000228 <strlen>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	1ae3      	subs	r3, r4, r3
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	b298      	uxth	r0, r3
 8005c58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b299      	uxth	r1, r3
 8005c60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c6c:	f7fc fa80 	bl	8002170 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(200000);
 8005c70:	4807      	ldr	r0, [pc, #28]	; (8005c90 <XPT2046_Touch_Calibrate+0x398>)
 8005c72:	f7ff fad5 	bl	8005220 <XPT2046_DelayUS>

	return 1;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e04b      	b.n	8005d12 <XPT2046_Touch_Calibrate+0x41a>
		goto Failure;
 8005c7a:	bf00      	nop
 8005c7c:	e00b      	b.n	8005c96 <XPT2046_Touch_Calibrate+0x39e>
 8005c7e:	bf00      	nop
 8005c80:	080110b8 	.word	0x080110b8
 8005c84:	000186a0 	.word	0x000186a0
 8005c88:	20000010 	.word	0x20000010
 8005c8c:	080110d0 	.word	0x080110d0
 8005c90:	00030d40 	.word	0x00030d40
		goto Failure;
 8005c94:	bf00      	nop

	Failure:

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8005c96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c9a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f7fc f823 	bl	8001cec <LCD_Clear>

	pStr = "Calibrate fail";
 8005ca6:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <XPT2046_Touch_Calibrate+0x424>)
 8005ca8:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8005caa:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8005cae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005cb0:	f7fa faba 	bl	8000228 <strlen>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	1ae3      	subs	r3, r4, r3
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	b298      	uxth	r0, r3
 8005cbe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005cc2:	085b      	lsrs	r3, r3, #1
 8005cc4:	b299      	uxth	r1, r3
 8005cc6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cd2:	f7fc fa4d 	bl	8002170 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	pStr = "try again";
 8005cd6:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <XPT2046_Touch_Calibrate+0x428>)
 8005cd8:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8005cda:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8005cde:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005ce0:	f7fa faa2 	bl	8000228 <strlen>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	1ae3      	subs	r3, r4, r3
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	b298      	uxth	r0, r3
 8005cee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3310      	adds	r3, #16
 8005cf8:	b299      	uxth	r1, r3
 8005cfa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d06:	f7fc fa33 	bl	8002170 <LCD_DrawString_Color>
			(usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);
 8005d0a:	4806      	ldr	r0, [pc, #24]	; (8005d24 <XPT2046_Touch_Calibrate+0x42c>)
 8005d0c:	f7ff fa88 	bl	8005220 <XPT2046_DelayUS>

	return 0;
 8005d10:	2300      	movs	r3, #0

}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3778      	adds	r7, #120	; 0x78
 8005d16:	46bd      	mov	sp, r7
 8005d18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d1c:	080110dc 	.word	0x080110dc
 8005d20:	080110ec 	.word	0x080110ec
 8005d24:	000f4240 	.word	0x000f4240

08005d28 <XPT2046_Get_TouchedPoint>:

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8005d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8005d38:	f107 0308 	add.w	r3, r7, #8
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fb37 	bl	80053b0 <XPT2046_ReadAdc_Smooth_XY>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d06e      	beq.n	8005e26 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d4e:	893b      	ldrh	r3, [r7, #8]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fa fbc3 	bl	80004dc <__aeabi_i2d>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa fc27 	bl	80005b0 <__aeabi_dmul>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4690      	mov	r8, r2
 8005d68:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005d70:	897b      	ldrh	r3, [r7, #10]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fa fbb2 	bl	80004dc <__aeabi_i2d>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4629      	mov	r1, r5
 8005d80:	f7fa fc16 	bl	80005b0 <__aeabi_dmul>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4640      	mov	r0, r8
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	f7fa fa5a 	bl	8000244 <__adddf3>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4610      	mov	r0, r2
 8005d96:	4619      	mov	r1, r3
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005d9e:	f7fa fa51 	bl	8000244 <__adddf3>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8005da6:	4610      	mov	r0, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	f7fa fed9 	bl	8000b60 <__aeabi_d2uiz>
 8005dae:	4603      	mov	r3, r0
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005dbc:	893b      	ldrh	r3, [r7, #8]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fa fb8c 	bl	80004dc <__aeabi_i2d>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fbf0 	bl	80005b0 <__aeabi_dmul>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4690      	mov	r8, r2
 8005dd6:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005dde:	897b      	ldrh	r3, [r7, #10]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fa fb7b 	bl	80004dc <__aeabi_i2d>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4620      	mov	r0, r4
 8005dec:	4629      	mov	r1, r5
 8005dee:	f7fa fbdf 	bl	80005b0 <__aeabi_dmul>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4640      	mov	r0, r8
 8005df8:	4649      	mov	r1, r9
 8005dfa:	f7fa fa23 	bl	8000244 <__adddf3>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4610      	mov	r0, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005e0c:	f7fa fa1a 	bl	8000244 <__adddf3>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8005e14:	4610      	mov	r0, r2
 8005e16:	4619      	mov	r1, r3
 8005e18:	f7fa fea2 	bl	8000b60 <__aeabi_d2uiz>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	805a      	strh	r2, [r3, #2]
 8005e24:	e001      	b.n	8005e2a <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]

}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005e36 <XPT2046_Reset_TouchPoint>:

void XPT2046_Reset_TouchPoint(strType_XPT2046_Coordinate *pDisplayCoordinate){
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
	//Reset X and Y
	pDisplayCoordinate->x = 0;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	801a      	strh	r2, [r3, #0]
	pDisplayCoordinate->y = 0;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	805a      	strh	r2, [r3, #2]
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr

08005e54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005e54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005e56:	e003      	b.n	8005e60 <LoopCopyDataInit>

08005e58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005e58:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005e5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005e5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005e5e:	3104      	adds	r1, #4

08005e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005e60:	480a      	ldr	r0, [pc, #40]	; (8005e8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005e64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005e66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005e68:	d3f6      	bcc.n	8005e58 <CopyDataInit>
  ldr r2, =_sbss
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005e6c:	e002      	b.n	8005e74 <LoopFillZerobss>

08005e6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005e6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005e70:	f842 3b04 	str.w	r3, [r2], #4

08005e74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005e74:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005e76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005e78:	d3f9      	bcc.n	8005e6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005e7a:	f7ff f931 	bl	80050e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e7e:	f002 fb0d 	bl	800849c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005e82:	f7fc faf5 	bl	8002470 <main>
  bx lr
 8005e86:	4770      	bx	lr
  ldr r3, =_sidata
 8005e88:	08035124 	.word	0x08035124
  ldr r0, =_sdata
 8005e8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005e90:	200009fc 	.word	0x200009fc
  ldr r2, =_sbss
 8005e94:	200009fc 	.word	0x200009fc
  ldr r3, = _ebss
 8005e98:	20000c00 	.word	0x20000c00

08005e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e9c:	e7fe      	b.n	8005e9c <ADC1_2_IRQHandler>
	...

08005ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ea4:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <HAL_Init+0x28>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a07      	ldr	r2, [pc, #28]	; (8005ec8 <HAL_Init+0x28>)
 8005eaa:	f043 0310 	orr.w	r3, r3, #16
 8005eae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eb0:	2003      	movs	r0, #3
 8005eb2:	f000 f943 	bl	800613c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f000 f808 	bl	8005ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ebc:	f7fe fe96 	bl	8004bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	40022000 	.word	0x40022000

08005ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ed4:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <HAL_InitTick+0x54>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <HAL_InitTick+0x58>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	4619      	mov	r1, r3
 8005ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 f95b 	bl	80061a6 <HAL_SYSTICK_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e00e      	b.n	8005f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b0f      	cmp	r3, #15
 8005efe:	d80a      	bhi.n	8005f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f00:	2200      	movs	r2, #0
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	f000 f923 	bl	8006152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f0c:	4a06      	ldr	r2, [pc, #24]	; (8005f28 <HAL_InitTick+0x5c>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	e000      	b.n	8005f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	2000000c 	.word	0x2000000c
 8005f24:	20000044 	.word	0x20000044
 8005f28:	20000040 	.word	0x20000040

08005f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <HAL_IncTick+0x1c>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_IncTick+0x20>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	4a03      	ldr	r2, [pc, #12]	; (8005f4c <HAL_IncTick+0x20>)
 8005f3e:	6013      	str	r3, [r2, #0]
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr
 8005f48:	20000044 	.word	0x20000044
 8005f4c:	20000bc0 	.word	0x20000bc0

08005f50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  return uwTick;
 8005f54:	4b02      	ldr	r3, [pc, #8]	; (8005f60 <HAL_GetTick+0x10>)
 8005f56:	681b      	ldr	r3, [r3, #0]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr
 8005f60:	20000bc0 	.word	0x20000bc0

08005f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f6c:	f7ff fff0 	bl	8005f50 <HAL_GetTick>
 8005f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	d005      	beq.n	8005f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f7e:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <HAL_Delay+0x44>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f8a:	bf00      	nop
 8005f8c:	f7ff ffe0 	bl	8005f50 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d8f7      	bhi.n	8005f8c <HAL_Delay+0x28>
  {
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000044 	.word	0x20000044

08005fac <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <NVIC_SetPriorityGrouping+0x44>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fc8:	4013      	ands	r3, r2
 8005fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fde:	4a04      	ldr	r2, [pc, #16]	; (8005ff0 <NVIC_SetPriorityGrouping+0x44>)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	60d3      	str	r3, [r2, #12]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bc80      	pop	{r7}
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	e000ed00 	.word	0xe000ed00

08005ff4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ff8:	4b04      	ldr	r3, [pc, #16]	; (800600c <NVIC_GetPriorityGrouping+0x18>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	0a1b      	lsrs	r3, r3, #8
 8005ffe:	f003 0307 	and.w	r3, r3, #7
}
 8006002:	4618      	mov	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	e000ed00 	.word	0xe000ed00

08006010 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	4603      	mov	r3, r0
 8006018:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	f003 021f 	and.w	r2, r3, #31
 8006020:	4906      	ldr	r1, [pc, #24]	; (800603c <NVIC_EnableIRQ+0x2c>)
 8006022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	2001      	movs	r0, #1
 800602a:	fa00 f202 	lsl.w	r2, r0, r2
 800602e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr
 800603c:	e000e100 	.word	0xe000e100

08006040 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	6039      	str	r1, [r7, #0]
 800604a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800604c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006050:	2b00      	cmp	r3, #0
 8006052:	da0b      	bge.n	800606c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	490c      	ldr	r1, [pc, #48]	; (800608c <NVIC_SetPriority+0x4c>)
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	3b04      	subs	r3, #4
 8006062:	0112      	lsls	r2, r2, #4
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	440b      	add	r3, r1
 8006068:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800606a:	e009      	b.n	8006080 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	4907      	ldr	r1, [pc, #28]	; (8006090 <NVIC_SetPriority+0x50>)
 8006072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006076:	0112      	lsls	r2, r2, #4
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	440b      	add	r3, r1
 800607c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	e000ed00 	.word	0xe000ed00
 8006090:	e000e100 	.word	0xe000e100

08006094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	; 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f1c3 0307 	rsb	r3, r3, #7
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	bf28      	it	cs
 80060b2:	2304      	movcs	r3, #4
 80060b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	3304      	adds	r3, #4
 80060ba:	2b06      	cmp	r3, #6
 80060bc:	d902      	bls.n	80060c4 <NVIC_EncodePriority+0x30>
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	3b03      	subs	r3, #3
 80060c2:	e000      	b.n	80060c6 <NVIC_EncodePriority+0x32>
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060c8:	f04f 32ff 	mov.w	r2, #4294967295
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	fa02 f303 	lsl.w	r3, r2, r3
 80060d2:	43da      	mvns	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	401a      	ands	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060dc:	f04f 31ff 	mov.w	r1, #4294967295
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	fa01 f303 	lsl.w	r3, r1, r3
 80060e6:	43d9      	mvns	r1, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060ec:	4313      	orrs	r3, r2
         );
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3724      	adds	r7, #36	; 0x24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr

080060f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3b01      	subs	r3, #1
 8006104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006108:	d301      	bcc.n	800610e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800610a:	2301      	movs	r3, #1
 800610c:	e00f      	b.n	800612e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800610e:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <SysTick_Config+0x40>)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3b01      	subs	r3, #1
 8006114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006116:	210f      	movs	r1, #15
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	f7ff ff90 	bl	8006040 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <SysTick_Config+0x40>)
 8006122:	2200      	movs	r2, #0
 8006124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006126:	4b04      	ldr	r3, [pc, #16]	; (8006138 <SysTick_Config+0x40>)
 8006128:	2207      	movs	r2, #7
 800612a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	e000e010 	.word	0xe000e010

0800613c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff ff31 	bl	8005fac <NVIC_SetPriorityGrouping>
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006152:	b580      	push	{r7, lr}
 8006154:	b086      	sub	sp, #24
 8006156:	af00      	add	r7, sp, #0
 8006158:	4603      	mov	r3, r0
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006164:	f7ff ff46 	bl	8005ff4 <NVIC_GetPriorityGrouping>
 8006168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f7ff ff90 	bl	8006094 <NVIC_EncodePriority>
 8006174:	4602      	mov	r2, r0
 8006176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800617a:	4611      	mov	r1, r2
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff ff5f 	bl	8006040 <NVIC_SetPriority>
}
 8006182:	bf00      	nop
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	4603      	mov	r3, r0
 8006192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff ff39 	bl	8006010 <NVIC_EnableIRQ>
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff ffa2 	bl	80060f8 <SysTick_Config>
 80061b4:	4603      	mov	r3, r0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b08b      	sub	sp, #44	; 0x2c
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80061da:	2300      	movs	r3, #0
 80061dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
 80061e2:	e179      	b.n	80064d8 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80061e4:	2201      	movs	r2, #1
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	4013      	ands	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	f040 8168 	bne.w	80064d2 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	4a96      	ldr	r2, [pc, #600]	; (8006460 <HAL_GPIO_Init+0x2a0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d05e      	beq.n	80062ca <HAL_GPIO_Init+0x10a>
 800620c:	4a94      	ldr	r2, [pc, #592]	; (8006460 <HAL_GPIO_Init+0x2a0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d875      	bhi.n	80062fe <HAL_GPIO_Init+0x13e>
 8006212:	4a94      	ldr	r2, [pc, #592]	; (8006464 <HAL_GPIO_Init+0x2a4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d058      	beq.n	80062ca <HAL_GPIO_Init+0x10a>
 8006218:	4a92      	ldr	r2, [pc, #584]	; (8006464 <HAL_GPIO_Init+0x2a4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d86f      	bhi.n	80062fe <HAL_GPIO_Init+0x13e>
 800621e:	4a92      	ldr	r2, [pc, #584]	; (8006468 <HAL_GPIO_Init+0x2a8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d052      	beq.n	80062ca <HAL_GPIO_Init+0x10a>
 8006224:	4a90      	ldr	r2, [pc, #576]	; (8006468 <HAL_GPIO_Init+0x2a8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d869      	bhi.n	80062fe <HAL_GPIO_Init+0x13e>
 800622a:	4a90      	ldr	r2, [pc, #576]	; (800646c <HAL_GPIO_Init+0x2ac>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d04c      	beq.n	80062ca <HAL_GPIO_Init+0x10a>
 8006230:	4a8e      	ldr	r2, [pc, #568]	; (800646c <HAL_GPIO_Init+0x2ac>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d863      	bhi.n	80062fe <HAL_GPIO_Init+0x13e>
 8006236:	4a8e      	ldr	r2, [pc, #568]	; (8006470 <HAL_GPIO_Init+0x2b0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d046      	beq.n	80062ca <HAL_GPIO_Init+0x10a>
 800623c:	4a8c      	ldr	r2, [pc, #560]	; (8006470 <HAL_GPIO_Init+0x2b0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d85d      	bhi.n	80062fe <HAL_GPIO_Init+0x13e>
 8006242:	2b12      	cmp	r3, #18
 8006244:	d82a      	bhi.n	800629c <HAL_GPIO_Init+0xdc>
 8006246:	2b12      	cmp	r3, #18
 8006248:	d859      	bhi.n	80062fe <HAL_GPIO_Init+0x13e>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <HAL_GPIO_Init+0x90>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	080062cb 	.word	0x080062cb
 8006254:	080062a5 	.word	0x080062a5
 8006258:	080062b7 	.word	0x080062b7
 800625c:	080062f9 	.word	0x080062f9
 8006260:	080062ff 	.word	0x080062ff
 8006264:	080062ff 	.word	0x080062ff
 8006268:	080062ff 	.word	0x080062ff
 800626c:	080062ff 	.word	0x080062ff
 8006270:	080062ff 	.word	0x080062ff
 8006274:	080062ff 	.word	0x080062ff
 8006278:	080062ff 	.word	0x080062ff
 800627c:	080062ff 	.word	0x080062ff
 8006280:	080062ff 	.word	0x080062ff
 8006284:	080062ff 	.word	0x080062ff
 8006288:	080062ff 	.word	0x080062ff
 800628c:	080062ff 	.word	0x080062ff
 8006290:	080062ff 	.word	0x080062ff
 8006294:	080062ad 	.word	0x080062ad
 8006298:	080062c1 	.word	0x080062c1
 800629c:	4a75      	ldr	r2, [pc, #468]	; (8006474 <HAL_GPIO_Init+0x2b4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80062a2:	e02c      	b.n	80062fe <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	623b      	str	r3, [r7, #32]
          break;
 80062aa:	e029      	b.n	8006300 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	3304      	adds	r3, #4
 80062b2:	623b      	str	r3, [r7, #32]
          break;
 80062b4:	e024      	b.n	8006300 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	3308      	adds	r3, #8
 80062bc:	623b      	str	r3, [r7, #32]
          break;
 80062be:	e01f      	b.n	8006300 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	330c      	adds	r3, #12
 80062c6:	623b      	str	r3, [r7, #32]
          break;
 80062c8:	e01a      	b.n	8006300 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80062d2:	2304      	movs	r3, #4
 80062d4:	623b      	str	r3, [r7, #32]
          break;
 80062d6:	e013      	b.n	8006300 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d105      	bne.n	80062ec <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80062e0:	2308      	movs	r3, #8
 80062e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	611a      	str	r2, [r3, #16]
          break;
 80062ea:	e009      	b.n	8006300 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80062ec:	2308      	movs	r3, #8
 80062ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	615a      	str	r2, [r3, #20]
          break;
 80062f6:	e003      	b.n	8006300 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80062f8:	2300      	movs	r3, #0
 80062fa:	623b      	str	r3, [r7, #32]
          break;
 80062fc:	e000      	b.n	8006300 <HAL_GPIO_Init+0x140>
          break;
 80062fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2bff      	cmp	r3, #255	; 0xff
 8006304:	d801      	bhi.n	800630a <HAL_GPIO_Init+0x14a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	e001      	b.n	800630e <HAL_GPIO_Init+0x14e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3304      	adds	r3, #4
 800630e:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2bff      	cmp	r3, #255	; 0xff
 8006314:	d802      	bhi.n	800631c <HAL_GPIO_Init+0x15c>
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	e002      	b.n	8006322 <HAL_GPIO_Init+0x162>
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	3b08      	subs	r3, #8
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	210f      	movs	r1, #15
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	fa01 f303 	lsl.w	r3, r1, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	401a      	ands	r2, r3
 8006334:	6a39      	ldr	r1, [r7, #32]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 80c1 	beq.w	80064d2 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006350:	4b49      	ldr	r3, [pc, #292]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	4a48      	ldr	r2, [pc, #288]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	6193      	str	r3, [r2, #24]
 800635c:	4b46      	ldr	r3, [pc, #280]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8006368:	4a44      	ldr	r2, [pc, #272]	; (800647c <HAL_GPIO_Init+0x2bc>)
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	089b      	lsrs	r3, r3, #2
 800636e:	3302      	adds	r3, #2
 8006370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006374:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	220f      	movs	r2, #15
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	43db      	mvns	r3, r3
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4013      	ands	r3, r2
 800638a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3c      	ldr	r2, [pc, #240]	; (8006480 <HAL_GPIO_Init+0x2c0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d01f      	beq.n	80063d4 <HAL_GPIO_Init+0x214>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3b      	ldr	r2, [pc, #236]	; (8006484 <HAL_GPIO_Init+0x2c4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d019      	beq.n	80063d0 <HAL_GPIO_Init+0x210>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3a      	ldr	r2, [pc, #232]	; (8006488 <HAL_GPIO_Init+0x2c8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <HAL_GPIO_Init+0x20c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a39      	ldr	r2, [pc, #228]	; (800648c <HAL_GPIO_Init+0x2cc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00d      	beq.n	80063c8 <HAL_GPIO_Init+0x208>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a38      	ldr	r2, [pc, #224]	; (8006490 <HAL_GPIO_Init+0x2d0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <HAL_GPIO_Init+0x204>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a37      	ldr	r2, [pc, #220]	; (8006494 <HAL_GPIO_Init+0x2d4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <HAL_GPIO_Init+0x200>
 80063bc:	2305      	movs	r3, #5
 80063be:	e00a      	b.n	80063d6 <HAL_GPIO_Init+0x216>
 80063c0:	2306      	movs	r3, #6
 80063c2:	e008      	b.n	80063d6 <HAL_GPIO_Init+0x216>
 80063c4:	2304      	movs	r3, #4
 80063c6:	e006      	b.n	80063d6 <HAL_GPIO_Init+0x216>
 80063c8:	2303      	movs	r3, #3
 80063ca:	e004      	b.n	80063d6 <HAL_GPIO_Init+0x216>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e002      	b.n	80063d6 <HAL_GPIO_Init+0x216>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <HAL_GPIO_Init+0x216>
 80063d4:	2300      	movs	r3, #0
 80063d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d8:	f002 0203 	and.w	r2, r2, #3
 80063dc:	0092      	lsls	r2, r2, #2
 80063de:	4093      	lsls	r3, r2
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80063e6:	4925      	ldr	r1, [pc, #148]	; (800647c <HAL_GPIO_Init+0x2bc>)
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	3302      	adds	r3, #2
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006400:	4b25      	ldr	r3, [pc, #148]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4924      	ldr	r1, [pc, #144]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	4313      	orrs	r3, r2
 800640a:	600b      	str	r3, [r1, #0]
 800640c:	e006      	b.n	800641c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800640e:	4b22      	ldr	r3, [pc, #136]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	43db      	mvns	r3, r3
 8006416:	4920      	ldr	r1, [pc, #128]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 8006418:	4013      	ands	r3, r2
 800641a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d006      	beq.n	8006436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	491a      	ldr	r1, [pc, #104]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4313      	orrs	r3, r2
 8006432:	604b      	str	r3, [r1, #4]
 8006434:	e006      	b.n	8006444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006436:	4b18      	ldr	r3, [pc, #96]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	43db      	mvns	r3, r3
 800643e:	4916      	ldr	r1, [pc, #88]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 8006440:	4013      	ands	r3, r2
 8006442:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d025      	beq.n	800649c <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006450:	4b11      	ldr	r3, [pc, #68]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	4910      	ldr	r1, [pc, #64]	; (8006498 <HAL_GPIO_Init+0x2d8>)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	4313      	orrs	r3, r2
 800645a:	608b      	str	r3, [r1, #8]
 800645c:	e025      	b.n	80064aa <HAL_GPIO_Init+0x2ea>
 800645e:	bf00      	nop
 8006460:	10320000 	.word	0x10320000
 8006464:	10310000 	.word	0x10310000
 8006468:	10220000 	.word	0x10220000
 800646c:	10210000 	.word	0x10210000
 8006470:	10120000 	.word	0x10120000
 8006474:	10110000 	.word	0x10110000
 8006478:	40021000 	.word	0x40021000
 800647c:	40010000 	.word	0x40010000
 8006480:	40010800 	.word	0x40010800
 8006484:	40010c00 	.word	0x40010c00
 8006488:	40011000 	.word	0x40011000
 800648c:	40011400 	.word	0x40011400
 8006490:	40011800 	.word	0x40011800
 8006494:	40011c00 	.word	0x40011c00
 8006498:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800649c:	4b13      	ldr	r3, [pc, #76]	; (80064ec <HAL_GPIO_Init+0x32c>)
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	43db      	mvns	r3, r3
 80064a4:	4911      	ldr	r1, [pc, #68]	; (80064ec <HAL_GPIO_Init+0x32c>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d006      	beq.n	80064c4 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <HAL_GPIO_Init+0x32c>)
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	490c      	ldr	r1, [pc, #48]	; (80064ec <HAL_GPIO_Init+0x32c>)
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60cb      	str	r3, [r1, #12]
 80064c2:	e006      	b.n	80064d2 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80064c4:	4b09      	ldr	r3, [pc, #36]	; (80064ec <HAL_GPIO_Init+0x32c>)
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	43db      	mvns	r3, r3
 80064cc:	4907      	ldr	r1, [pc, #28]	; (80064ec <HAL_GPIO_Init+0x32c>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	3301      	adds	r3, #1
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	2b0f      	cmp	r3, #15
 80064dc:	f67f ae82 	bls.w	80061e4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	372c      	adds	r7, #44	; 0x2c
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr
 80064ec:	40010400 	.word	0x40010400

080064f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	887b      	ldrh	r3, [r7, #2]
 8006502:	4013      	ands	r3, r2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006508:	2301      	movs	r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
 800650c:	e001      	b.n	8006512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr

0800651e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	807b      	strh	r3, [r7, #2]
 800652a:	4613      	mov	r3, r2
 800652c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800652e:	787b      	ldrb	r3, [r7, #1]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006534:	887a      	ldrh	r2, [r7, #2]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800653a:	e003      	b.n	8006544 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800653c:	887b      	ldrh	r3, [r7, #2]
 800653e:	041a      	lsls	r2, r3, #16
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	611a      	str	r2, [r3, #16]
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr
	...

08006550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800655a:	4b08      	ldr	r3, [pc, #32]	; (800657c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	4013      	ands	r3, r2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d006      	beq.n	8006574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006566:	4a05      	ldr	r2, [pc, #20]	; (800657c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 f806 	bl	8006580 <HAL_GPIO_EXTI_Callback>
  }
}
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40010400 	.word	0x40010400

08006580 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006598:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <HAL_PWR_EnableBkUpAccess+0x14>)
 800659a:	2201      	movs	r2, #1
 800659c:	601a      	str	r2, [r3, #0]
}
 800659e:	bf00      	nop
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	420e0020 	.word	0x420e0020

080065ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8087 	beq.w	80066d4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80065c6:	4b92      	ldr	r3, [pc, #584]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d00c      	beq.n	80065ec <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065d2:	4b8f      	ldr	r3, [pc, #572]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d112      	bne.n	8006604 <HAL_RCC_OscConfig+0x58>
 80065de:	4b8c      	ldr	r3, [pc, #560]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ea:	d10b      	bne.n	8006604 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ec:	4b88      	ldr	r3, [pc, #544]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d06c      	beq.n	80066d2 <HAL_RCC_OscConfig+0x126>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d168      	bne.n	80066d2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e22d      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660c:	d106      	bne.n	800661c <HAL_RCC_OscConfig+0x70>
 800660e:	4b80      	ldr	r3, [pc, #512]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a7f      	ldr	r2, [pc, #508]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e02e      	b.n	800667a <HAL_RCC_OscConfig+0xce>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10c      	bne.n	800663e <HAL_RCC_OscConfig+0x92>
 8006624:	4b7a      	ldr	r3, [pc, #488]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a79      	ldr	r2, [pc, #484]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 800662a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	4b77      	ldr	r3, [pc, #476]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a76      	ldr	r2, [pc, #472]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	e01d      	b.n	800667a <HAL_RCC_OscConfig+0xce>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006646:	d10c      	bne.n	8006662 <HAL_RCC_OscConfig+0xb6>
 8006648:	4b71      	ldr	r3, [pc, #452]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a70      	ldr	r2, [pc, #448]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 800664e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	4b6e      	ldr	r3, [pc, #440]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a6d      	ldr	r2, [pc, #436]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 800665a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e00b      	b.n	800667a <HAL_RCC_OscConfig+0xce>
 8006662:	4b6b      	ldr	r3, [pc, #428]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a6a      	ldr	r2, [pc, #424]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4b68      	ldr	r3, [pc, #416]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a67      	ldr	r2, [pc, #412]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006678:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d013      	beq.n	80066aa <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006682:	f7ff fc65 	bl	8005f50 <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800668a:	f7ff fc61 	bl	8005f50 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b64      	cmp	r3, #100	; 0x64
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e1e1      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800669c:	4b5c      	ldr	r3, [pc, #368]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <HAL_RCC_OscConfig+0xde>
 80066a8:	e014      	b.n	80066d4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066aa:	f7ff fc51 	bl	8005f50 <HAL_GetTick>
 80066ae:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066b0:	e008      	b.n	80066c4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066b2:	f7ff fc4d 	bl	8005f50 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b64      	cmp	r3, #100	; 0x64
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e1cd      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066c4:	4b52      	ldr	r3, [pc, #328]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1f0      	bne.n	80066b2 <HAL_RCC_OscConfig+0x106>
 80066d0:	e000      	b.n	80066d4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d063      	beq.n	80067a8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80066e0:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066ec:	4b48      	ldr	r3, [pc, #288]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f003 030c 	and.w	r3, r3, #12
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d11c      	bne.n	8006732 <HAL_RCC_OscConfig+0x186>
 80066f8:	4b45      	ldr	r3, [pc, #276]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d116      	bne.n	8006732 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006704:	4b42      	ldr	r3, [pc, #264]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <HAL_RCC_OscConfig+0x170>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d001      	beq.n	800671c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e1a1      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800671c:	4b3c      	ldr	r3, [pc, #240]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4939      	ldr	r1, [pc, #228]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 800672c:	4313      	orrs	r3, r2
 800672e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006730:	e03a      	b.n	80067a8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d020      	beq.n	800677c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800673a:	4b36      	ldr	r3, [pc, #216]	; (8006814 <HAL_RCC_OscConfig+0x268>)
 800673c:	2201      	movs	r2, #1
 800673e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006740:	f7ff fc06 	bl	8005f50 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006748:	f7ff fc02 	bl	8005f50 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e182      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675a:	4b2d      	ldr	r3, [pc, #180]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006766:	4b2a      	ldr	r3, [pc, #168]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4926      	ldr	r1, [pc, #152]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 8006776:	4313      	orrs	r3, r2
 8006778:	600b      	str	r3, [r1, #0]
 800677a:	e015      	b.n	80067a8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800677c:	4b25      	ldr	r3, [pc, #148]	; (8006814 <HAL_RCC_OscConfig+0x268>)
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006782:	f7ff fbe5 	bl	8005f50 <HAL_GetTick>
 8006786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800678a:	f7ff fbe1 	bl	8005f50 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e161      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800679c:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1f0      	bne.n	800678a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d039      	beq.n	8006828 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d019      	beq.n	80067f0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <HAL_RCC_OscConfig+0x26c>)
 80067be:	2201      	movs	r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067c2:	f7ff fbc5 	bl	8005f50 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067ca:	f7ff fbc1 	bl	8005f50 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e141      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067dc:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <HAL_RCC_OscConfig+0x264>)
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0f0      	beq.n	80067ca <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80067e8:	2001      	movs	r0, #1
 80067ea:	f000 fadf 	bl	8006dac <RCC_Delay>
 80067ee:	e01b      	b.n	8006828 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067f0:	4b09      	ldr	r3, [pc, #36]	; (8006818 <HAL_RCC_OscConfig+0x26c>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f6:	f7ff fbab 	bl	8005f50 <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067fc:	e00e      	b.n	800681c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067fe:	f7ff fba7 	bl	8005f50 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d907      	bls.n	800681c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e127      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
 8006810:	40021000 	.word	0x40021000
 8006814:	42420000 	.word	0x42420000
 8006818:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800681c:	4b92      	ldr	r3, [pc, #584]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1ea      	bne.n	80067fe <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80a6 	beq.w	8006982 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006836:	2300      	movs	r3, #0
 8006838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800683a:	4b8b      	ldr	r3, [pc, #556]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10d      	bne.n	8006862 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006846:	4b88      	ldr	r3, [pc, #544]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	4a87      	ldr	r2, [pc, #540]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 800684c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006850:	61d3      	str	r3, [r2, #28]
 8006852:	4b85      	ldr	r3, [pc, #532]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006862:	4b82      	ldr	r3, [pc, #520]	; (8006a6c <HAL_RCC_OscConfig+0x4c0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d118      	bne.n	80068a0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800686e:	4b7f      	ldr	r3, [pc, #508]	; (8006a6c <HAL_RCC_OscConfig+0x4c0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a7e      	ldr	r2, [pc, #504]	; (8006a6c <HAL_RCC_OscConfig+0x4c0>)
 8006874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800687a:	f7ff fb69 	bl	8005f50 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006882:	f7ff fb65 	bl	8005f50 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b64      	cmp	r3, #100	; 0x64
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e0e5      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006894:	4b75      	ldr	r3, [pc, #468]	; (8006a6c <HAL_RCC_OscConfig+0x4c0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0f0      	beq.n	8006882 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d106      	bne.n	80068b6 <HAL_RCC_OscConfig+0x30a>
 80068a8:	4b6f      	ldr	r3, [pc, #444]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	4a6e      	ldr	r2, [pc, #440]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068ae:	f043 0301 	orr.w	r3, r3, #1
 80068b2:	6213      	str	r3, [r2, #32]
 80068b4:	e02d      	b.n	8006912 <HAL_RCC_OscConfig+0x366>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCC_OscConfig+0x32c>
 80068be:	4b6a      	ldr	r3, [pc, #424]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	4a69      	ldr	r2, [pc, #420]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	6213      	str	r3, [r2, #32]
 80068ca:	4b67      	ldr	r3, [pc, #412]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	4a66      	ldr	r2, [pc, #408]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068d0:	f023 0304 	bic.w	r3, r3, #4
 80068d4:	6213      	str	r3, [r2, #32]
 80068d6:	e01c      	b.n	8006912 <HAL_RCC_OscConfig+0x366>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	2b05      	cmp	r3, #5
 80068de:	d10c      	bne.n	80068fa <HAL_RCC_OscConfig+0x34e>
 80068e0:	4b61      	ldr	r3, [pc, #388]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	4a60      	ldr	r2, [pc, #384]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068e6:	f043 0304 	orr.w	r3, r3, #4
 80068ea:	6213      	str	r3, [r2, #32]
 80068ec:	4b5e      	ldr	r3, [pc, #376]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	4a5d      	ldr	r2, [pc, #372]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	6213      	str	r3, [r2, #32]
 80068f8:	e00b      	b.n	8006912 <HAL_RCC_OscConfig+0x366>
 80068fa:	4b5b      	ldr	r3, [pc, #364]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	4a5a      	ldr	r2, [pc, #360]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 8006900:	f023 0301 	bic.w	r3, r3, #1
 8006904:	6213      	str	r3, [r2, #32]
 8006906:	4b58      	ldr	r3, [pc, #352]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	4a57      	ldr	r2, [pc, #348]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 800690c:	f023 0304 	bic.w	r3, r3, #4
 8006910:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d015      	beq.n	8006946 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800691a:	f7ff fb19 	bl	8005f50 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006920:	e00a      	b.n	8006938 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006922:	f7ff fb15 	bl	8005f50 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006930:	4293      	cmp	r3, r2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e093      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006938:	4b4b      	ldr	r3, [pc, #300]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0ee      	beq.n	8006922 <HAL_RCC_OscConfig+0x376>
 8006944:	e014      	b.n	8006970 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006946:	f7ff fb03 	bl	8005f50 <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800694c:	e00a      	b.n	8006964 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800694e:	f7ff faff 	bl	8005f50 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	f241 3288 	movw	r2, #5000	; 0x1388
 800695c:	4293      	cmp	r3, r2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e07d      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006964:	4b40      	ldr	r3, [pc, #256]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1ee      	bne.n	800694e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d105      	bne.n	8006982 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006976:	4b3c      	ldr	r3, [pc, #240]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	4a3b      	ldr	r2, [pc, #236]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 800697c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006980:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d069      	beq.n	8006a5e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800698a:	4b37      	ldr	r3, [pc, #220]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 030c 	and.w	r3, r3, #12
 8006992:	2b08      	cmp	r3, #8
 8006994:	d061      	beq.n	8006a5a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d146      	bne.n	8006a2c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800699e:	4b34      	ldr	r3, [pc, #208]	; (8006a70 <HAL_RCC_OscConfig+0x4c4>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a4:	f7ff fad4 	bl	8005f50 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ac:	f7ff fad0 	bl	8005f50 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e050      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069be:	4b2a      	ldr	r3, [pc, #168]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d2:	d108      	bne.n	80069e6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069d4:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	4921      	ldr	r1, [pc, #132]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069e6:	4b20      	ldr	r3, [pc, #128]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a19      	ldr	r1, [r3, #32]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	430b      	orrs	r3, r1
 80069f8:	491b      	ldr	r1, [pc, #108]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069fe:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <HAL_RCC_OscConfig+0x4c4>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a04:	f7ff faa4 	bl	8005f50 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0c:	f7ff faa0 	bl	8005f50 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e020      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a1e:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0x460>
 8006a2a:	e018      	b.n	8006a5e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <HAL_RCC_OscConfig+0x4c4>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a32:	f7ff fa8d 	bl	8005f50 <HAL_GetTick>
 8006a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a3a:	f7ff fa89 	bl	8005f50 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e009      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <HAL_RCC_OscConfig+0x4bc>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1f0      	bne.n	8006a3a <HAL_RCC_OscConfig+0x48e>
 8006a58:	e001      	b.n	8006a5e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	40007000 	.word	0x40007000
 8006a70:	42420060 	.word	0x42420060

08006a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8006a82:	4b7e      	ldr	r3, [pc, #504]	; (8006c7c <HAL_RCC_ClockConfig+0x208>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d910      	bls.n	8006ab2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a90:	4b7a      	ldr	r3, [pc, #488]	; (8006c7c <HAL_RCC_ClockConfig+0x208>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f023 0207 	bic.w	r2, r3, #7
 8006a98:	4978      	ldr	r1, [pc, #480]	; (8006c7c <HAL_RCC_ClockConfig+0x208>)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006aa0:	4b76      	ldr	r3, [pc, #472]	; (8006c7c <HAL_RCC_ClockConfig+0x208>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d001      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e0e0      	b.n	8006c74 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d020      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006aca:	4b6d      	ldr	r3, [pc, #436]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	4a6c      	ldr	r2, [pc, #432]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006ad0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ad4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ae2:	4b67      	ldr	r3, [pc, #412]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4a66      	ldr	r2, [pc, #408]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006ae8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006aec:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aee:	4b64      	ldr	r3, [pc, #400]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	4961      	ldr	r1, [pc, #388]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d06a      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d107      	bne.n	8006b24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b14:	4b5a      	ldr	r3, [pc, #360]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d115      	bne.n	8006b4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0a7      	b.n	8006c74 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b2c:	4b54      	ldr	r3, [pc, #336]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d109      	bne.n	8006b4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e09b      	b.n	8006c74 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b3c:	4b50      	ldr	r3, [pc, #320]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e093      	b.n	8006c74 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b4c:	4b4c      	ldr	r3, [pc, #304]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f023 0203 	bic.w	r2, r3, #3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	4949      	ldr	r1, [pc, #292]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b5e:	f7ff f9f7 	bl	8005f50 <HAL_GetTick>
 8006b62:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d112      	bne.n	8006b92 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b6e:	f7ff f9ef 	bl	8005f50 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e077      	b.n	8006c74 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b84:	4b3e      	ldr	r3, [pc, #248]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f003 030c 	and.w	r3, r3, #12
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d1ee      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xfa>
 8006b90:	e027      	b.n	8006be2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d11d      	bne.n	8006bd6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b9a:	e00a      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9c:	f7ff f9d8 	bl	8005f50 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e060      	b.n	8006c74 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bb2:	4b33      	ldr	r3, [pc, #204]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d1ee      	bne.n	8006b9c <HAL_RCC_ClockConfig+0x128>
 8006bbe:	e010      	b.n	8006be2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc0:	f7ff f9c6 	bl	8005f50 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e04e      	b.n	8006c74 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f003 030c 	and.w	r3, r3, #12
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1ee      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8006be2:	4b26      	ldr	r3, [pc, #152]	; (8006c7c <HAL_RCC_ClockConfig+0x208>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d210      	bcs.n	8006c12 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf0:	4b22      	ldr	r3, [pc, #136]	; (8006c7c <HAL_RCC_ClockConfig+0x208>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f023 0207 	bic.w	r2, r3, #7
 8006bf8:	4920      	ldr	r1, [pc, #128]	; (8006c7c <HAL_RCC_ClockConfig+0x208>)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c00:	4b1e      	ldr	r3, [pc, #120]	; (8006c7c <HAL_RCC_ClockConfig+0x208>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d001      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e030      	b.n	8006c74 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d008      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c1e:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	4915      	ldr	r1, [pc, #84]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c3c:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	490d      	ldr	r1, [pc, #52]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c50:	f000 f81c 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8006c54:	4602      	mov	r2, r0
 8006c56:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <HAL_RCC_ClockConfig+0x20c>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	091b      	lsrs	r3, r3, #4
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	4908      	ldr	r1, [pc, #32]	; (8006c84 <HAL_RCC_ClockConfig+0x210>)
 8006c62:	5ccb      	ldrb	r3, [r1, r3]
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	4a07      	ldr	r2, [pc, #28]	; (8006c88 <HAL_RCC_ClockConfig+0x214>)
 8006c6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	f7ff f92d 	bl	8005ecc <HAL_InitTick>
  
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40022000 	.word	0x40022000
 8006c80:	40021000 	.word	0x40021000
 8006c84:	08011800 	.word	0x08011800
 8006c88:	2000000c 	.word	0x2000000c

08006c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c8c:	b490      	push	{r4, r7}
 8006c8e:	b08a      	sub	sp, #40	; 0x28
 8006c90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c92:	4b29      	ldr	r3, [pc, #164]	; (8006d38 <HAL_RCC_GetSysClockFreq+0xac>)
 8006c94:	1d3c      	adds	r4, r7, #4
 8006c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c9c:	f240 2301 	movw	r3, #513	; 0x201
 8006ca0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	2300      	movs	r3, #0
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006cb6:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f003 030c 	and.w	r3, r3, #12
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d002      	beq.n	8006ccc <HAL_RCC_GetSysClockFreq+0x40>
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d003      	beq.n	8006cd2 <HAL_RCC_GetSysClockFreq+0x46>
 8006cca:	e02b      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ccc:	4b1c      	ldr	r3, [pc, #112]	; (8006d40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006cce:	623b      	str	r3, [r7, #32]
      break;
 8006cd0:	e02b      	b.n	8006d2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	0c9b      	lsrs	r3, r3, #18
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	3328      	adds	r3, #40	; 0x28
 8006cdc:	443b      	add	r3, r7
 8006cde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ce2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d012      	beq.n	8006d14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	0c5b      	lsrs	r3, r3, #17
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	3328      	adds	r3, #40	; 0x28
 8006cfa:	443b      	add	r3, r7
 8006cfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d00:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	4a0e      	ldr	r2, [pc, #56]	; (8006d40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d06:	fb03 f202 	mul.w	r2, r3, r2
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
 8006d12:	e004      	b.n	8006d1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	4a0b      	ldr	r2, [pc, #44]	; (8006d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d18:	fb02 f303 	mul.w	r3, r2, r3
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	623b      	str	r3, [r7, #32]
      break;
 8006d22:	e002      	b.n	8006d2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d26:	623b      	str	r3, [r7, #32]
      break;
 8006d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3728      	adds	r7, #40	; 0x28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc90      	pop	{r4, r7}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	080110f8 	.word	0x080110f8
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	007a1200 	.word	0x007a1200
 8006d44:	003d0900 	.word	0x003d0900

08006d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	2000000c 	.word	0x2000000c

08006d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d60:	f7ff fff2 	bl	8006d48 <HAL_RCC_GetHCLKFreq>
 8006d64:	4602      	mov	r2, r0
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	0a1b      	lsrs	r3, r3, #8
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	4903      	ldr	r1, [pc, #12]	; (8006d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d72:	5ccb      	ldrb	r3, [r1, r3]
 8006d74:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8006d78:	4618      	mov	r0, r3
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	08011810 	.word	0x08011810

08006d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d88:	f7ff ffde 	bl	8006d48 <HAL_RCC_GetHCLKFreq>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	0adb      	lsrs	r3, r3, #11
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	4903      	ldr	r1, [pc, #12]	; (8006da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d9a:	5ccb      	ldrb	r3, [r1, r3]
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8006da0:	4618      	mov	r0, r3
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40021000 	.word	0x40021000
 8006da8:	08011810 	.word	0x08011810

08006dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006db4:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <RCC_Delay+0x38>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a0b      	ldr	r2, [pc, #44]	; (8006de8 <RCC_Delay+0x3c>)
 8006dba:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbe:	0a5b      	lsrs	r3, r3, #9
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	fb02 f303 	mul.w	r3, r2, r3
 8006dc6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8006dc8:	bf00      	nop
}
 8006dca:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	1e5a      	subs	r2, r3, #1
 8006dd0:	60fa      	str	r2, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f8      	bne.n	8006dc8 <RCC_Delay+0x1c>
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bc80      	pop	{r7}
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	2000000c 	.word	0x2000000c
 8006de8:	10624dd3 	.word	0x10624dd3

08006dec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d07d      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e0c:	4b4f      	ldr	r3, [pc, #316]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10d      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e18:	4b4c      	ldr	r3, [pc, #304]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	4a4b      	ldr	r2, [pc, #300]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e22:	61d3      	str	r3, [r2, #28]
 8006e24:	4b49      	ldr	r3, [pc, #292]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	60bb      	str	r3, [r7, #8]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e30:	2301      	movs	r3, #1
 8006e32:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e34:	4b46      	ldr	r3, [pc, #280]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d118      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e40:	4b43      	ldr	r3, [pc, #268]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a42      	ldr	r2, [pc, #264]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e4c:	f7ff f880 	bl	8005f50 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e52:	e008      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e54:	f7ff f87c 	bl	8005f50 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b64      	cmp	r3, #100	; 0x64
 8006e60:	d901      	bls.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e06d      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e66:	4b3a      	ldr	r3, [pc, #232]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0f0      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e72:	4b36      	ldr	r3, [pc, #216]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d02e      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d027      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e90:	4b2e      	ldr	r3, [pc, #184]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e9a:	4b2e      	ldr	r3, [pc, #184]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ea0:	4b2c      	ldr	r3, [pc, #176]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ea6:	4a29      	ldr	r2, [pc, #164]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d014      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb6:	f7ff f84b 	bl	8005f50 <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ebc:	e00a      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ebe:	f7ff f847 	bl	8005f50 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e036      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed4:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0ee      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	4917      	ldr	r1, [pc, #92]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d105      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef8:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	4a13      	ldr	r2, [pc, #76]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f10:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	490b      	ldr	r1, [pc, #44]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0310 	and.w	r3, r3, #16
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	4904      	ldr	r1, [pc, #16]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	40007000 	.word	0x40007000
 8006f54:	42420440 	.word	0x42420440

08006f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f58:	b590      	push	{r4, r7, lr}
 8006f5a:	b08d      	sub	sp, #52	; 0x34
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f60:	4b6b      	ldr	r3, [pc, #428]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006f62:	f107 040c 	add.w	r4, r7, #12
 8006f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f6c:	f240 2301 	movw	r3, #513	; 0x201
 8006f70:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
 8006f76:	2300      	movs	r3, #0
 8006f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	2300      	movs	r3, #0
 8006f84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	2b0f      	cmp	r3, #15
 8006f8c:	f200 80b7 	bhi.w	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8006f90:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08007077 	.word	0x08007077
 8006f9c:	080070e3 	.word	0x080070e3
 8006fa0:	080070ff 	.word	0x080070ff
 8006fa4:	08007067 	.word	0x08007067
 8006fa8:	080070ff 	.word	0x080070ff
 8006fac:	080070ff 	.word	0x080070ff
 8006fb0:	080070ff 	.word	0x080070ff
 8006fb4:	0800706f 	.word	0x0800706f
 8006fb8:	080070ff 	.word	0x080070ff
 8006fbc:	080070ff 	.word	0x080070ff
 8006fc0:	080070ff 	.word	0x080070ff
 8006fc4:	080070ff 	.word	0x080070ff
 8006fc8:	080070ff 	.word	0x080070ff
 8006fcc:	080070ff 	.word	0x080070ff
 8006fd0:	080070ff 	.word	0x080070ff
 8006fd4:	08006fd9 	.word	0x08006fd9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006fd8:	4b4e      	ldr	r3, [pc, #312]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8006fde:	4b4d      	ldr	r3, [pc, #308]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 808b 	beq.w	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	0c9b      	lsrs	r3, r3, #18
 8006ff0:	f003 030f 	and.w	r3, r3, #15
 8006ff4:	3330      	adds	r3, #48	; 0x30
 8006ff6:	443b      	add	r3, r7
 8006ff8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ffc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d017      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007008:	4b42      	ldr	r3, [pc, #264]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	0c5b      	lsrs	r3, r3, #17
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	3330      	adds	r3, #48	; 0x30
 8007014:	443b      	add	r3, r7
 8007016:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800701a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00d      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007026:	4a3c      	ldr	r2, [pc, #240]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	fbb2 f2f3 	udiv	r2, r2, r3
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	fb02 f303 	mul.w	r3, r2, r3
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007036:	e004      	b.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	4a38      	ldr	r2, [pc, #224]	; (800711c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800703c:	fb02 f303 	mul.w	r3, r2, r3
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007042:	4b34      	ldr	r3, [pc, #208]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800704a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800704e:	d102      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007054:	e055      	b.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          frequency = (pllclk * 2) / 3;
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	4a31      	ldr	r2, [pc, #196]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 800705c:	fba2 2303 	umull	r2, r3, r2, r3
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007064:	e04d      	b.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007066:	f7ff fe11 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 800706a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800706c:	e04a      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800706e:	f7ff fe0d 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8007072:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007074:	e046      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8007076:	4b27      	ldr	r3, [pc, #156]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007086:	d108      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8007092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28
 8007098:	e022      	b.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a4:	d109      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80070a6:	4b1b      	ldr	r3, [pc, #108]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80070b2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80070b8:	e012      	b.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070c4:	d109      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80070c6:	4b13      	ldr	r3, [pc, #76]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = HSE_VALUE / 128U;
 80070d2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d8:	e002      	b.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80070de:	e011      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80070e0:	e010      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80070e2:	f7ff fe4f 	bl	8006d84 <HAL_RCC_GetPCLK2Freq>
 80070e6:	4602      	mov	r2, r0
 80070e8:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	0b9b      	lsrs	r3, r3, #14
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	3301      	adds	r3, #1
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070fc:	e002      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  default: 
    {
      break;
 80070fe:	bf00      	nop
 8007100:	e000      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 8007102:	bf00      	nop
    }
  }
  return(frequency);
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007106:	4618      	mov	r0, r3
 8007108:	3734      	adds	r7, #52	; 0x34
 800710a:	46bd      	mov	sp, r7
 800710c:	bd90      	pop	{r4, r7, pc}
 800710e:	bf00      	nop
 8007110:	08011108 	.word	0x08011108
 8007114:	40021000 	.word	0x40021000
 8007118:	007a1200 	.word	0x007a1200
 800711c:	003d0900 	.word	0x003d0900
 8007120:	aaaaaaab 	.word	0xaaaaaaab

08007124 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e084      	b.n	8007244 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7c5b      	ldrb	r3, [r3, #17]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d105      	bne.n	8007150 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fd fd80 	bl	8004c50 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f87a 	bl	8007250 <HAL_RTC_WaitForSynchro>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d004      	beq.n	800716c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2204      	movs	r2, #4
 8007166:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e06b      	b.n	8007244 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f89c 	bl	80072aa <RTC_EnterInitMode>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2204      	movs	r2, #4
 800717c:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e060      	b.n	8007244 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0207 	bic.w	r2, r2, #7
 8007190:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800719a:	4b2c      	ldr	r3, [pc, #176]	; (800724c <HAL_RTC_Init+0x128>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	4a2b      	ldr	r2, [pc, #172]	; (800724c <HAL_RTC_Init+0x128>)
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80071a6:	4b29      	ldr	r3, [pc, #164]	; (800724c <HAL_RTC_Init+0x128>)
 80071a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071aa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	4926      	ldr	r1, [pc, #152]	; (800724c <HAL_RTC_Init+0x128>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d003      	beq.n	80071ca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e00e      	b.n	80071e8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80071ca:	2001      	movs	r0, #1
 80071cc:	f7ff fec4 	bl	8006f58 <HAL_RCCEx_GetPeriphCLKFreq>
 80071d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2204      	movs	r2, #4
 80071dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e030      	b.n	8007244 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 010f 	bic.w	r1, r3, #15
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	0c1a      	lsrs	r2, r3, #16
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	b291      	uxth	r1, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	430b      	orrs	r3, r1
 8007212:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f870 	bl	80072fa <RTC_ExitInitMode>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2204      	movs	r2, #4
 8007224:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e00c      	b.n	8007244 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 8007242:	2300      	movs	r3, #0
  }
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40006c00 	.word	0x40006c00

08007250 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e01d      	b.n	80072a2 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0208 	bic.w	r2, r2, #8
 8007274:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8007276:	f7fe fe6b 	bl	8005f50 <HAL_GetTick>
 800727a:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800727c:	e009      	b.n	8007292 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800727e:	f7fe fe67 	bl	8005f50 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800728c:	d901      	bls.n	8007292 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e007      	b.n	80072a2 <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0ee      	beq.n	800727e <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 80072b6:	f7fe fe4b 	bl	8005f50 <HAL_GetTick>
 80072ba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80072bc:	e009      	b.n	80072d2 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80072be:	f7fe fe47 	bl	8005f50 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072cc:	d901      	bls.n	80072d2 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e00f      	b.n	80072f2 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f003 0320 	and.w	r3, r3, #32
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0ee      	beq.n	80072be <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0210 	orr.w	r2, r2, #16
 80072ee:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0210 	bic.w	r2, r2, #16
 8007314:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8007316:	f7fe fe1b 	bl	8005f50 <HAL_GetTick>
 800731a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800731c:	e009      	b.n	8007332 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800731e:	f7fe fe17 	bl	8005f50 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800732c:	d901      	bls.n	8007332 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e007      	b.n	8007342 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0ee      	beq.n	800731e <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 800735c:	4b07      	ldr	r3, [pc, #28]	; (800737c <HAL_RTCEx_BKUPWrite+0x30>)
 800735e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4413      	add	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	b292      	uxth	r2, r2
 8007370:	601a      	str	r2, [r3, #0]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr
 800737c:	40006c00 	.word	0x40006c00

08007380 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <HAL_RTCEx_BKUPRead+0x34>)
 8007394:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80073a8:	68bb      	ldr	r3, [r7, #8]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr
 80073b4:	40006c00 	.word	0x40006c00

080073b8 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e034      	b.n	8007438 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7fd fd3c 	bl	8004e60 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3308      	adds	r3, #8
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f000 ff60 	bl	80082b8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	461a      	mov	r2, r3
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	f000 ffd8 	bl	80083b8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6858      	ldr	r0, [r3, #4]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	f001 f803 	bl	8008420 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	6892      	ldr	r2, [r2, #8]
 8007422:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	6892      	ldr	r2, [r2, #8]
 800742e:	f041 0101 	orr.w	r1, r1, #1
 8007432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e01d      	b.n	800748e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fd fc16 	bl	8004c98 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	4619      	mov	r1, r3
 800747e:	4610      	mov	r0, r2
 8007480:	f000 fab2 	bl	80079e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f042 0201 	orr.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr

080074ca <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2202      	movs	r2, #2
 80074d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80074e4:	4013      	ands	r3, r2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10f      	bne.n	800750a <HAL_TIM_Base_Stop+0x40>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6a1a      	ldr	r2, [r3, #32]
 80074f0:	f240 4344 	movw	r3, #1092	; 0x444
 80074f4:	4013      	ands	r3, r2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d107      	bne.n	800750a <HAL_TIM_Base_Stop+0x40>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr

0800751e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0201 	orr.w	r2, r2, #1
 8007534:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0201 	orr.w	r2, r2, #1
 8007544:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0201 	bic.w	r2, r2, #1
 8007568:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	f241 1311 	movw	r3, #4369	; 0x1111
 8007574:	4013      	ands	r3, r2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10f      	bne.n	800759a <HAL_TIM_Base_Stop_IT+0x48>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6a1a      	ldr	r2, [r3, #32]
 8007580:	f240 4344 	movw	r3, #1092	; 0x444
 8007584:	4013      	ands	r3, r2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d107      	bne.n	800759a <HAL_TIM_Base_Stop_IT+0x48>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0201 	bic.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d122      	bne.n	8007602 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d11b      	bne.n	8007602 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f06f 0202 	mvn.w	r2, #2
 80075d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f9e1 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 80075ee:	e005      	b.n	80075fc <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f9d4 	bl	800799e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9e3 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b04      	cmp	r3, #4
 800760e:	d122      	bne.n	8007656 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b04      	cmp	r3, #4
 800761c:	d11b      	bne.n	8007656 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f06f 0204 	mvn.w	r2, #4
 8007626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f9b7 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 8007642:	e005      	b.n	8007650 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9aa 	bl	800799e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9b9 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b08      	cmp	r3, #8
 8007662:	d122      	bne.n	80076aa <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b08      	cmp	r3, #8
 8007670:	d11b      	bne.n	80076aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f06f 0208 	mvn.w	r2, #8
 800767a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2204      	movs	r2, #4
 8007680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f98d 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 8007696:	e005      	b.n	80076a4 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f980 	bl	800799e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f98f 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d122      	bne.n	80076fe <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b10      	cmp	r3, #16
 80076c4:	d11b      	bne.n	80076fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f06f 0210 	mvn.w	r2, #16
 80076ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2208      	movs	r2, #8
 80076d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f963 	bl	80079b0 <HAL_TIM_IC_CaptureCallback>
 80076ea:	e005      	b.n	80076f8 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f956 	bl	800799e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f965 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b01      	cmp	r3, #1
 800770a:	d10e      	bne.n	800772a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b01      	cmp	r3, #1
 8007718:	d107      	bne.n	800772a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f06f 0201 	mvn.w	r2, #1
 8007722:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f931 	bl	800798c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007734:	2b80      	cmp	r3, #128	; 0x80
 8007736:	d10e      	bne.n	8007756 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007742:	2b80      	cmp	r3, #128	; 0x80
 8007744:	d107      	bne.n	8007756 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800774e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fab9 	bl	8007cc8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	d10e      	bne.n	8007782 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d107      	bne.n	8007782 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800777a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f929 	bl	80079d4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b20      	cmp	r3, #32
 800778e:	d10e      	bne.n	80077ae <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b20      	cmp	r3, #32
 800779c:	d107      	bne.n	80077ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f06f 0220 	mvn.w	r2, #32
 80077a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fa84 	bl	8007cb6 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d101      	bne.n	80077d2 <HAL_TIM_ConfigClockSource+0x1c>
 80077ce:	2302      	movs	r3, #2
 80077d0:	e0d8      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x1ce>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077f8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780a:	d052      	beq.n	80078b2 <HAL_TIM_ConfigClockSource+0xfc>
 800780c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007810:	f200 80ae 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x1ba>
 8007814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007818:	d027      	beq.n	800786a <HAL_TIM_ConfigClockSource+0xb4>
 800781a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781e:	f200 80a7 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x1ba>
 8007822:	2b70      	cmp	r3, #112	; 0x70
 8007824:	d02a      	beq.n	800787c <HAL_TIM_ConfigClockSource+0xc6>
 8007826:	2b70      	cmp	r3, #112	; 0x70
 8007828:	f200 80a2 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x1ba>
 800782c:	2b60      	cmp	r3, #96	; 0x60
 800782e:	d063      	beq.n	80078f8 <HAL_TIM_ConfigClockSource+0x142>
 8007830:	2b60      	cmp	r3, #96	; 0x60
 8007832:	f200 809d 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x1ba>
 8007836:	2b50      	cmp	r3, #80	; 0x50
 8007838:	d04e      	beq.n	80078d8 <HAL_TIM_ConfigClockSource+0x122>
 800783a:	2b50      	cmp	r3, #80	; 0x50
 800783c:	f200 8098 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x1ba>
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d069      	beq.n	8007918 <HAL_TIM_ConfigClockSource+0x162>
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	f200 8093 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x1ba>
 800784a:	2b30      	cmp	r3, #48	; 0x30
 800784c:	f000 8089 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x1ac>
 8007850:	2b30      	cmp	r3, #48	; 0x30
 8007852:	f200 808d 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x1ba>
 8007856:	2b20      	cmp	r3, #32
 8007858:	d07c      	beq.n	8007954 <HAL_TIM_ConfigClockSource+0x19e>
 800785a:	2b20      	cmp	r3, #32
 800785c:	f200 8088 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x1ba>
 8007860:	2b00      	cmp	r3, #0
 8007862:	d069      	beq.n	8007938 <HAL_TIM_ConfigClockSource+0x182>
 8007864:	2b10      	cmp	r3, #16
 8007866:	d06e      	beq.n	8007946 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8007868:	e082      	b.n	8007970 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0207 	bic.w	r2, r2, #7
 8007878:	609a      	str	r2, [r3, #8]
    break;
 800787a:	e07a      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	6899      	ldr	r1, [r3, #8]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f000 f9ae 	bl	8007bec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800789e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	609a      	str	r2, [r3, #8]
    break;
 80078b0:	e05f      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	6899      	ldr	r1, [r3, #8]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f000 f993 	bl	8007bec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078d4:	609a      	str	r2, [r3, #8]
    break;
 80078d6:	e04c      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	6859      	ldr	r1, [r3, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	461a      	mov	r2, r3
 80078e6:	f000 f8fd 	bl	8007ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2150      	movs	r1, #80	; 0x50
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 f95c 	bl	8007bae <TIM_ITRx_SetConfig>
    break;
 80078f6:	e03c      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	6859      	ldr	r1, [r3, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	461a      	mov	r2, r3
 8007906:	f000 f91f 	bl	8007b48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2160      	movs	r1, #96	; 0x60
 8007910:	4618      	mov	r0, r3
 8007912:	f000 f94c 	bl	8007bae <TIM_ITRx_SetConfig>
    break;
 8007916:	e02c      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	6859      	ldr	r1, [r3, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	461a      	mov	r2, r3
 8007926:	f000 f8dd 	bl	8007ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2140      	movs	r1, #64	; 0x40
 8007930:	4618      	mov	r0, r3
 8007932:	f000 f93c 	bl	8007bae <TIM_ITRx_SetConfig>
    break;
 8007936:	e01c      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2100      	movs	r1, #0
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f935 	bl	8007bae <TIM_ITRx_SetConfig>
    break;
 8007944:	e015      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2110      	movs	r1, #16
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f92e 	bl	8007bae <TIM_ITRx_SetConfig>
    break;
 8007952:	e00e      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2120      	movs	r1, #32
 800795a:	4618      	mov	r0, r3
 800795c:	f000 f927 	bl	8007bae <TIM_ITRx_SetConfig>
    break;
 8007960:	e007      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2130      	movs	r1, #48	; 0x30
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f920 	bl	8007bae <TIM_ITRx_SetConfig>
    break;
 800796e:	e000      	b.n	8007972 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8007970:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr

0800799e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr

080079b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
	...

080079e8 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a34      	ldr	r2, [pc, #208]	; (8007ad0 <TIM_Base_SetConfig+0xe8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <TIM_Base_SetConfig+0x44>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a33      	ldr	r2, [pc, #204]	; (8007ad4 <TIM_Base_SetConfig+0xec>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00f      	beq.n	8007a2c <TIM_Base_SetConfig+0x44>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a12:	d00b      	beq.n	8007a2c <TIM_Base_SetConfig+0x44>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a30      	ldr	r2, [pc, #192]	; (8007ad8 <TIM_Base_SetConfig+0xf0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d007      	beq.n	8007a2c <TIM_Base_SetConfig+0x44>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a2f      	ldr	r2, [pc, #188]	; (8007adc <TIM_Base_SetConfig+0xf4>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <TIM_Base_SetConfig+0x44>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a2e      	ldr	r2, [pc, #184]	; (8007ae0 <TIM_Base_SetConfig+0xf8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d108      	bne.n	8007a3e <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a23      	ldr	r2, [pc, #140]	; (8007ad0 <TIM_Base_SetConfig+0xe8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <TIM_Base_SetConfig+0x86>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a22      	ldr	r2, [pc, #136]	; (8007ad4 <TIM_Base_SetConfig+0xec>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00f      	beq.n	8007a6e <TIM_Base_SetConfig+0x86>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a54:	d00b      	beq.n	8007a6e <TIM_Base_SetConfig+0x86>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a1f      	ldr	r2, [pc, #124]	; (8007ad8 <TIM_Base_SetConfig+0xf0>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d007      	beq.n	8007a6e <TIM_Base_SetConfig+0x86>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a1e      	ldr	r2, [pc, #120]	; (8007adc <TIM_Base_SetConfig+0xf4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_Base_SetConfig+0x86>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a1d      	ldr	r2, [pc, #116]	; (8007ae0 <TIM_Base_SetConfig+0xf8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d108      	bne.n	8007a80 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a86:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a09      	ldr	r2, [pc, #36]	; (8007ad0 <TIM_Base_SetConfig+0xe8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_Base_SetConfig+0xd0>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <TIM_Base_SetConfig+0xec>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d103      	bne.n	8007ac0 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	615a      	str	r2, [r3, #20]
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr
 8007ad0:	40012c00 	.word	0x40012c00
 8007ad4:	40013400 	.word	0x40013400
 8007ad8:	40000400 	.word	0x40000400
 8007adc:	40000800 	.word	0x40000800
 8007ae0:	40000c00 	.word	0x40000c00

08007ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f023 0201 	bic.w	r2, r3, #1
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f023 030a 	bic.w	r3, r3, #10
 8007b28:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	621a      	str	r2, [r3, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bc80      	pop	{r7}
 8007b46:	4770      	bx	lr

08007b48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	f023 0210 	bic.w	r2, r3, #16
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	031b      	lsls	r3, r3, #12
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	621a      	str	r2, [r3, #32]
}
 8007ba4:	bf00      	nop
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr

08007bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bca:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8007bcc:	887b      	ldrh	r3, [r7, #2]
 8007bce:	f043 0307 	orr.w	r3, r3, #7
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	609a      	str	r2, [r3, #8]
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr

08007bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	021a      	lsls	r2, r3, #8
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	431a      	orrs	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	609a      	str	r2, [r3, #8]
}
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bc80      	pop	{r7}
 8007c2c:	4770      	bx	lr

08007c2e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e032      	b.n	8007cac <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007c64:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6859      	ldr	r1, [r3, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c86:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6899      	ldr	r1, [r3, #8]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	4770      	bx	lr

08007cda <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e03f      	b.n	8007d6c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7fd f81d 	bl	8004d40 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2224      	movs	r2, #36	; 0x24
 8007d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d1c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f9b2 	bl	8008088 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691a      	ldr	r2, [r3, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695a      	ldr	r2, [r3, #20]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d42:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68da      	ldr	r2, [r3, #12]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d52:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2220      	movs	r2, #32
 8007d66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	f040 8083 	bne.w	8007e9c <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_UART_Transmit+0x2e>
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e07b      	b.n	8007e9e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_UART_Transmit+0x40>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e074      	b.n	8007e9e <HAL_UART_Transmit+0x12a>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2221      	movs	r2, #33	; 0x21
 8007dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007dca:	f7fe f8c1 	bl	8005f50 <HAL_GetTick>
 8007dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	88fa      	ldrh	r2, [r7, #6]
 8007dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8007ddc:	e042      	b.n	8007e64 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df4:	d122      	bne.n	8007e3c <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2180      	movs	r1, #128	; 0x80
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f8f6 	bl	8007ff2 <UART_WaitOnFlagUntilTimeout>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e046      	b.n	8007e9e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e22:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	3302      	adds	r3, #2
 8007e30:	60bb      	str	r3, [r7, #8]
 8007e32:	e017      	b.n	8007e64 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	3301      	adds	r3, #1
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	e013      	b.n	8007e64 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2200      	movs	r2, #0
 8007e44:	2180      	movs	r1, #128	; 0x80
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 f8d3 	bl	8007ff2 <UART_WaitOnFlagUntilTimeout>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e023      	b.n	8007e9e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	60ba      	str	r2, [r7, #8]
 8007e5c:	781a      	ldrb	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1b7      	bne.n	8007dde <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2200      	movs	r2, #0
 8007e76:	2140      	movs	r1, #64	; 0x40
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f8ba 	bl	8007ff2 <UART_WaitOnFlagUntilTimeout>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e00a      	b.n	8007e9e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e000      	b.n	8007e9e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007e9c:	2302      	movs	r3, #2
  }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b088      	sub	sp, #32
 8007eaa:	af02      	add	r7, sp, #8
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	603b      	str	r3, [r7, #0]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	f040 8090 	bne.w	8007fe8 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <HAL_UART_Receive+0x2e>
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e088      	b.n	8007fea <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_UART_Receive+0x40>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e081      	b.n	8007fea <HAL_UART_Receive+0x144>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2222      	movs	r2, #34	; 0x22
 8007ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007efc:	f7fe f828 	bl	8005f50 <HAL_GetTick>
 8007f00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	88fa      	ldrh	r2, [r7, #6]
 8007f06:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8007f0e:	e05c      	b.n	8007fca <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f26:	d12b      	bne.n	8007f80 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2120      	movs	r1, #32
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f85d 	bl	8007ff2 <UART_WaitOnFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e053      	b.n	8007fea <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10c      	bne.n	8007f68 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	3302      	adds	r3, #2
 8007f64:	60bb      	str	r3, [r7, #8]
 8007f66:	e030      	b.n	8007fca <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	e024      	b.n	8007fca <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2200      	movs	r2, #0
 8007f88:	2120      	movs	r1, #32
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 f831 	bl	8007ff2 <UART_WaitOnFlagUntilTimeout>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e027      	b.n	8007fea <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d108      	bne.n	8007fb4 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6859      	ldr	r1, [r3, #4]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	60ba      	str	r2, [r7, #8]
 8007fae:	b2ca      	uxtb	r2, r1
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	e00a      	b.n	8007fca <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	1c59      	adds	r1, r3, #1
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d19d      	bne.n	8007f10 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e000      	b.n	8007fea <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007fe8:	2302      	movs	r3, #2
  }
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	603b      	str	r3, [r7, #0]
 8007ffe:	4613      	mov	r3, r2
 8008000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8008002:	e02c      	b.n	800805e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	d028      	beq.n	800805e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <UART_WaitOnFlagUntilTimeout+0x30>
 8008012:	f7fd ff9d 	bl	8005f50 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	429a      	cmp	r2, r3
 8008020:	d21d      	bcs.n	800805e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008030:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695a      	ldr	r2, [r3, #20]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0201 	bic.w	r2, r2, #1
 8008040:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2220      	movs	r2, #32
 8008046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2220      	movs	r2, #32
 800804e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e00f      	b.n	800807e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4013      	ands	r3, r2
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	429a      	cmp	r2, r3
 800806c:	bf0c      	ite	eq
 800806e:	2301      	moveq	r3, #1
 8008070:	2300      	movne	r3, #0
 8008072:	b2db      	uxtb	r3, r3
 8008074:	461a      	mov	r2, r3
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	429a      	cmp	r2, r3
 800807a:	d0c3      	beq.n	8008004 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008088:	b5b0      	push	{r4, r5, r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8008090:	2300      	movs	r3, #0
 8008092:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80080ca:	f023 030c 	bic.w	r3, r3, #12
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	68f9      	ldr	r1, [r7, #12]
 80080d4:	430b      	orrs	r3, r1
 80080d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a6f      	ldr	r2, [pc, #444]	; (80082b0 <UART_SetConfig+0x228>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d16b      	bne.n	80081d0 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80080f8:	f7fe fe44 	bl	8006d84 <HAL_RCC_GetPCLK2Freq>
 80080fc:	4602      	mov	r2, r0
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009a      	lsls	r2, r3, #2
 8008106:	441a      	add	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008112:	4a68      	ldr	r2, [pc, #416]	; (80082b4 <UART_SetConfig+0x22c>)
 8008114:	fba2 2303 	umull	r2, r3, r2, r3
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	011c      	lsls	r4, r3, #4
 800811c:	f7fe fe32 	bl	8006d84 <HAL_RCC_GetPCLK2Freq>
 8008120:	4602      	mov	r2, r0
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009a      	lsls	r2, r3, #2
 800812a:	441a      	add	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	fbb2 f5f3 	udiv	r5, r2, r3
 8008136:	f7fe fe25 	bl	8006d84 <HAL_RCC_GetPCLK2Freq>
 800813a:	4602      	mov	r2, r0
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009a      	lsls	r2, r3, #2
 8008144:	441a      	add	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008150:	4a58      	ldr	r2, [pc, #352]	; (80082b4 <UART_SetConfig+0x22c>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	095b      	lsrs	r3, r3, #5
 8008158:	2264      	movs	r2, #100	; 0x64
 800815a:	fb02 f303 	mul.w	r3, r2, r3
 800815e:	1aeb      	subs	r3, r5, r3
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	3332      	adds	r3, #50	; 0x32
 8008164:	4a53      	ldr	r2, [pc, #332]	; (80082b4 <UART_SetConfig+0x22c>)
 8008166:	fba2 2303 	umull	r2, r3, r2, r3
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008170:	441c      	add	r4, r3
 8008172:	f7fe fe07 	bl	8006d84 <HAL_RCC_GetPCLK2Freq>
 8008176:	4602      	mov	r2, r0
 8008178:	4613      	mov	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	009a      	lsls	r2, r3, #2
 8008180:	441a      	add	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	fbb2 f5f3 	udiv	r5, r2, r3
 800818c:	f7fe fdfa 	bl	8006d84 <HAL_RCC_GetPCLK2Freq>
 8008190:	4602      	mov	r2, r0
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009a      	lsls	r2, r3, #2
 800819a:	441a      	add	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a6:	4a43      	ldr	r2, [pc, #268]	; (80082b4 <UART_SetConfig+0x22c>)
 80081a8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ac:	095b      	lsrs	r3, r3, #5
 80081ae:	2264      	movs	r2, #100	; 0x64
 80081b0:	fb02 f303 	mul.w	r3, r2, r3
 80081b4:	1aeb      	subs	r3, r5, r3
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	3332      	adds	r3, #50	; 0x32
 80081ba:	4a3e      	ldr	r2, [pc, #248]	; (80082b4 <UART_SetConfig+0x22c>)
 80081bc:	fba2 2303 	umull	r2, r3, r2, r3
 80081c0:	095b      	lsrs	r3, r3, #5
 80081c2:	f003 020f 	and.w	r2, r3, #15
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4422      	add	r2, r4
 80081cc:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80081ce:	e06a      	b.n	80082a6 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80081d0:	f7fe fdc4 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 80081d4:	4602      	mov	r2, r0
 80081d6:	4613      	mov	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	009a      	lsls	r2, r3, #2
 80081de:	441a      	add	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ea:	4a32      	ldr	r2, [pc, #200]	; (80082b4 <UART_SetConfig+0x22c>)
 80081ec:	fba2 2303 	umull	r2, r3, r2, r3
 80081f0:	095b      	lsrs	r3, r3, #5
 80081f2:	011c      	lsls	r4, r3, #4
 80081f4:	f7fe fdb2 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 80081f8:	4602      	mov	r2, r0
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009a      	lsls	r2, r3, #2
 8008202:	441a      	add	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	fbb2 f5f3 	udiv	r5, r2, r3
 800820e:	f7fe fda5 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 8008212:	4602      	mov	r2, r0
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009a      	lsls	r2, r3, #2
 800821c:	441a      	add	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	4a22      	ldr	r2, [pc, #136]	; (80082b4 <UART_SetConfig+0x22c>)
 800822a:	fba2 2303 	umull	r2, r3, r2, r3
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	2264      	movs	r2, #100	; 0x64
 8008232:	fb02 f303 	mul.w	r3, r2, r3
 8008236:	1aeb      	subs	r3, r5, r3
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	3332      	adds	r3, #50	; 0x32
 800823c:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <UART_SetConfig+0x22c>)
 800823e:	fba2 2303 	umull	r2, r3, r2, r3
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008248:	441c      	add	r4, r3
 800824a:	f7fe fd87 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 800824e:	4602      	mov	r2, r0
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009a      	lsls	r2, r3, #2
 8008258:	441a      	add	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	fbb2 f5f3 	udiv	r5, r2, r3
 8008264:	f7fe fd7a 	bl	8006d5c <HAL_RCC_GetPCLK1Freq>
 8008268:	4602      	mov	r2, r0
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009a      	lsls	r2, r3, #2
 8008272:	441a      	add	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	fbb2 f3f3 	udiv	r3, r2, r3
 800827e:	4a0d      	ldr	r2, [pc, #52]	; (80082b4 <UART_SetConfig+0x22c>)
 8008280:	fba2 2303 	umull	r2, r3, r2, r3
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	2264      	movs	r2, #100	; 0x64
 8008288:	fb02 f303 	mul.w	r3, r2, r3
 800828c:	1aeb      	subs	r3, r5, r3
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	3332      	adds	r3, #50	; 0x32
 8008292:	4a08      	ldr	r2, [pc, #32]	; (80082b4 <UART_SetConfig+0x22c>)
 8008294:	fba2 2303 	umull	r2, r3, r2, r3
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	f003 020f 	and.w	r2, r3, #15
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4422      	add	r2, r4
 80082a4:	609a      	str	r2, [r3, #8]
}
 80082a6:	bf00      	nop
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bdb0      	pop	{r4, r5, r7, pc}
 80082ae:	bf00      	nop
 80082b0:	40013800 	.word	0x40013800
 80082b4:	51eb851f 	.word	0x51eb851f

080082b8 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	6812      	ldr	r2, [r2, #0]
 80082d0:	f023 0101 	bic.w	r1, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d132      	bne.n	8008348 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082ec:	4b31      	ldr	r3, [pc, #196]	; (80083b4 <FSMC_NORSRAM_Init+0xfc>)
 80082ee:	4013      	ands	r3, r2
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	6851      	ldr	r1, [r2, #4]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	6892      	ldr	r2, [r2, #8]
 80082f8:	4311      	orrs	r1, r2
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	68d2      	ldr	r2, [r2, #12]
 80082fe:	4311      	orrs	r1, r2
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	6912      	ldr	r2, [r2, #16]
 8008304:	4311      	orrs	r1, r2
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	6952      	ldr	r2, [r2, #20]
 800830a:	4311      	orrs	r1, r2
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	6992      	ldr	r2, [r2, #24]
 8008310:	4311      	orrs	r1, r2
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	69d2      	ldr	r2, [r2, #28]
 8008316:	4311      	orrs	r1, r2
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	6a12      	ldr	r2, [r2, #32]
 800831c:	4311      	orrs	r1, r2
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008322:	4311      	orrs	r1, r2
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008328:	4311      	orrs	r1, r2
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800832e:	4311      	orrs	r1, r2
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008334:	430a      	orrs	r2, r1
 8008336:	4313      	orrs	r3, r2
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	6812      	ldr	r2, [r2, #0]
 800833c:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008346:	e02f      	b.n	80083a8 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008352:	4b18      	ldr	r3, [pc, #96]	; (80083b4 <FSMC_NORSRAM_Init+0xfc>)
 8008354:	4013      	ands	r3, r2
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	6851      	ldr	r1, [r2, #4]
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	6892      	ldr	r2, [r2, #8]
 800835e:	4311      	orrs	r1, r2
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	68d2      	ldr	r2, [r2, #12]
 8008364:	4311      	orrs	r1, r2
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	6912      	ldr	r2, [r2, #16]
 800836a:	4311      	orrs	r1, r2
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	6952      	ldr	r2, [r2, #20]
 8008370:	4311      	orrs	r1, r2
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	6992      	ldr	r2, [r2, #24]
 8008376:	4311      	orrs	r1, r2
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	69d2      	ldr	r2, [r2, #28]
 800837c:	4311      	orrs	r1, r2
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	6a12      	ldr	r2, [r2, #32]
 8008382:	4311      	orrs	r1, r2
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008388:	4311      	orrs	r1, r2
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800838e:	4311      	orrs	r1, r2
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008394:	4311      	orrs	r1, r2
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800839a:	4311      	orrs	r1, r2
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	6812      	ldr	r2, [r2, #0]
 80083a0:	4319      	orrs	r1, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bc80      	pop	{r7}
 80083b2:	4770      	bx	lr
 80083b4:	fff70081 	.word	0xfff70081

080083b8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ce:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	011b      	lsls	r3, r3, #4
 80083dc:	431a      	orrs	r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	431a      	orrs	r2, r3
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	431a      	orrs	r2, r3
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	051b      	lsls	r3, r3, #20
 80083f6:	431a      	orrs	r2, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	3b02      	subs	r3, #2
 80083fe:	061b      	lsls	r3, r3, #24
 8008400:	431a      	orrs	r2, r3
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	4313      	orrs	r3, r2
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	3201      	adds	r2, #1
 800840c:	4319      	orrs	r1, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr

08008420 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008434:	d11d      	bne.n	8008472 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008440:	4013      	ands	r3, r2
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	6811      	ldr	r1, [r2, #0]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	6852      	ldr	r2, [r2, #4]
 800844a:	0112      	lsls	r2, r2, #4
 800844c:	4311      	orrs	r1, r2
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	6892      	ldr	r2, [r2, #8]
 8008452:	0212      	lsls	r2, r2, #8
 8008454:	4311      	orrs	r1, r2
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	6992      	ldr	r2, [r2, #24]
 800845a:	4311      	orrs	r1, r2
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	68d2      	ldr	r2, [r2, #12]
 8008460:	0412      	lsls	r2, r2, #16
 8008462:	430a      	orrs	r2, r1
 8008464:	ea43 0102 	orr.w	r1, r3, r2
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008470:	e005      	b.n	800847e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800847a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	cff00000 	.word	0xcff00000

08008490 <__errno>:
 8008490:	4b01      	ldr	r3, [pc, #4]	; (8008498 <__errno+0x8>)
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000048 	.word	0x20000048

0800849c <__libc_init_array>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	2600      	movs	r6, #0
 80084a0:	4d0c      	ldr	r5, [pc, #48]	; (80084d4 <__libc_init_array+0x38>)
 80084a2:	4c0d      	ldr	r4, [pc, #52]	; (80084d8 <__libc_init_array+0x3c>)
 80084a4:	1b64      	subs	r4, r4, r5
 80084a6:	10a4      	asrs	r4, r4, #2
 80084a8:	42a6      	cmp	r6, r4
 80084aa:	d109      	bne.n	80084c0 <__libc_init_array+0x24>
 80084ac:	f008 fd0e 	bl	8010ecc <_init>
 80084b0:	2600      	movs	r6, #0
 80084b2:	4d0a      	ldr	r5, [pc, #40]	; (80084dc <__libc_init_array+0x40>)
 80084b4:	4c0a      	ldr	r4, [pc, #40]	; (80084e0 <__libc_init_array+0x44>)
 80084b6:	1b64      	subs	r4, r4, r5
 80084b8:	10a4      	asrs	r4, r4, #2
 80084ba:	42a6      	cmp	r6, r4
 80084bc:	d105      	bne.n	80084ca <__libc_init_array+0x2e>
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c4:	4798      	blx	r3
 80084c6:	3601      	adds	r6, #1
 80084c8:	e7ee      	b.n	80084a8 <__libc_init_array+0xc>
 80084ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ce:	4798      	blx	r3
 80084d0:	3601      	adds	r6, #1
 80084d2:	e7f2      	b.n	80084ba <__libc_init_array+0x1e>
 80084d4:	08035118 	.word	0x08035118
 80084d8:	08035118 	.word	0x08035118
 80084dc:	08035118 	.word	0x08035118
 80084e0:	08035120 	.word	0x08035120

080084e4 <memset>:
 80084e4:	4603      	mov	r3, r0
 80084e6:	4402      	add	r2, r0
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d100      	bne.n	80084ee <memset+0xa>
 80084ec:	4770      	bx	lr
 80084ee:	f803 1b01 	strb.w	r1, [r3], #1
 80084f2:	e7f9      	b.n	80084e8 <memset+0x4>

080084f4 <sscanf>:
 80084f4:	b40e      	push	{r1, r2, r3}
 80084f6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80084fa:	b530      	push	{r4, r5, lr}
 80084fc:	b09c      	sub	sp, #112	; 0x70
 80084fe:	ac1f      	add	r4, sp, #124	; 0x7c
 8008500:	f854 5b04 	ldr.w	r5, [r4], #4
 8008504:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008508:	9002      	str	r0, [sp, #8]
 800850a:	9006      	str	r0, [sp, #24]
 800850c:	f7f7 fe8c 	bl	8000228 <strlen>
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <sscanf+0x4c>)
 8008512:	9003      	str	r0, [sp, #12]
 8008514:	930a      	str	r3, [sp, #40]	; 0x28
 8008516:	2300      	movs	r3, #0
 8008518:	930e      	str	r3, [sp, #56]	; 0x38
 800851a:	9313      	str	r3, [sp, #76]	; 0x4c
 800851c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008520:	9007      	str	r0, [sp, #28]
 8008522:	4808      	ldr	r0, [pc, #32]	; (8008544 <sscanf+0x50>)
 8008524:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008528:	462a      	mov	r2, r5
 800852a:	4623      	mov	r3, r4
 800852c:	a902      	add	r1, sp, #8
 800852e:	6800      	ldr	r0, [r0, #0]
 8008530:	9401      	str	r4, [sp, #4]
 8008532:	f000 f84f 	bl	80085d4 <__ssvfscanf_r>
 8008536:	b01c      	add	sp, #112	; 0x70
 8008538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800853c:	b003      	add	sp, #12
 800853e:	4770      	bx	lr
 8008540:	0800856b 	.word	0x0800856b
 8008544:	20000048 	.word	0x20000048

08008548 <__sread>:
 8008548:	b510      	push	{r4, lr}
 800854a:	460c      	mov	r4, r1
 800854c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008550:	f001 fcaa 	bl	8009ea8 <_read_r>
 8008554:	2800      	cmp	r0, #0
 8008556:	bfab      	itete	ge
 8008558:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800855a:	89a3      	ldrhlt	r3, [r4, #12]
 800855c:	181b      	addge	r3, r3, r0
 800855e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008562:	bfac      	ite	ge
 8008564:	6523      	strge	r3, [r4, #80]	; 0x50
 8008566:	81a3      	strhlt	r3, [r4, #12]
 8008568:	bd10      	pop	{r4, pc}

0800856a <__seofread>:
 800856a:	2000      	movs	r0, #0
 800856c:	4770      	bx	lr

0800856e <__swrite>:
 800856e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008572:	461f      	mov	r7, r3
 8008574:	898b      	ldrh	r3, [r1, #12]
 8008576:	4605      	mov	r5, r0
 8008578:	05db      	lsls	r3, r3, #23
 800857a:	460c      	mov	r4, r1
 800857c:	4616      	mov	r6, r2
 800857e:	d505      	bpl.n	800858c <__swrite+0x1e>
 8008580:	2302      	movs	r3, #2
 8008582:	2200      	movs	r2, #0
 8008584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008588:	f001 f9f8 	bl	800997c <_lseek_r>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	4632      	mov	r2, r6
 8008590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	4628      	mov	r0, r5
 8008598:	463b      	mov	r3, r7
 800859a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800859e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a2:	f001 b989 	b.w	80098b8 <_write_r>

080085a6 <__sseek>:
 80085a6:	b510      	push	{r4, lr}
 80085a8:	460c      	mov	r4, r1
 80085aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ae:	f001 f9e5 	bl	800997c <_lseek_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	bf15      	itete	ne
 80085b8:	6520      	strne	r0, [r4, #80]	; 0x50
 80085ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085c2:	81a3      	strheq	r3, [r4, #12]
 80085c4:	bf18      	it	ne
 80085c6:	81a3      	strhne	r3, [r4, #12]
 80085c8:	bd10      	pop	{r4, pc}

080085ca <__sclose>:
 80085ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ce:	f001 b995 	b.w	80098fc <_close_r>
	...

080085d4 <__ssvfscanf_r>:
 80085d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80085dc:	461e      	mov	r6, r3
 80085de:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80085e2:	af02      	add	r7, sp, #8
 80085e4:	049d      	lsls	r5, r3, #18
 80085e6:	460c      	mov	r4, r1
 80085e8:	62b8      	str	r0, [r7, #40]	; 0x28
 80085ea:	61ba      	str	r2, [r7, #24]
 80085ec:	d406      	bmi.n	80085fc <__ssvfscanf_r+0x28>
 80085ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085f2:	818b      	strh	r3, [r1, #12]
 80085f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80085f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085fa:	664b      	str	r3, [r1, #100]	; 0x64
 80085fc:	2300      	movs	r3, #0
 80085fe:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
 8008606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008610:	61ba      	str	r2, [r7, #24]
 8008612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 80d4 	beq.w	80087c2 <__ssvfscanf_r+0x1ee>
 800861a:	4a85      	ldr	r2, [pc, #532]	; (8008830 <__ssvfscanf_r+0x25c>)
 800861c:	f813 8002 	ldrb.w	r8, [r3, r2]
 8008620:	f018 0808 	ands.w	r8, r8, #8
 8008624:	d018      	beq.n	8008658 <__ssvfscanf_r+0x84>
 8008626:	6863      	ldr	r3, [r4, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	dd0e      	ble.n	800864a <__ssvfscanf_r+0x76>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	4980      	ldr	r1, [pc, #512]	; (8008830 <__ssvfscanf_r+0x25c>)
 8008630:	781a      	ldrb	r2, [r3, #0]
 8008632:	5c8a      	ldrb	r2, [r1, r2]
 8008634:	0710      	lsls	r0, r2, #28
 8008636:	d5e8      	bpl.n	800860a <__ssvfscanf_r+0x36>
 8008638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800863a:	3301      	adds	r3, #1
 800863c:	3201      	adds	r2, #1
 800863e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008640:	6862      	ldr	r2, [r4, #4]
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	3a01      	subs	r2, #1
 8008646:	6062      	str	r2, [r4, #4]
 8008648:	e7ed      	b.n	8008626 <__ssvfscanf_r+0x52>
 800864a:	4621      	mov	r1, r4
 800864c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864e:	f002 feca 	bl	800b3e6 <__ssrefill_r>
 8008652:	2800      	cmp	r0, #0
 8008654:	d0ea      	beq.n	800862c <__ssvfscanf_r+0x58>
 8008656:	e7d8      	b.n	800860a <__ssvfscanf_r+0x36>
 8008658:	2b25      	cmp	r3, #37	; 0x25
 800865a:	d165      	bne.n	8008728 <__ssvfscanf_r+0x154>
 800865c:	46c1      	mov	r9, r8
 800865e:	220a      	movs	r2, #10
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8008666:	69b9      	ldr	r1, [r7, #24]
 8008668:	781d      	ldrb	r5, [r3, #0]
 800866a:	3101      	adds	r1, #1
 800866c:	61b9      	str	r1, [r7, #24]
 800866e:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 8008672:	2955      	cmp	r1, #85	; 0x55
 8008674:	f200 816c 	bhi.w	8008950 <__ssvfscanf_r+0x37c>
 8008678:	e8df f011 	tbh	[pc, r1, lsl #1]
 800867c:	016a0056 	.word	0x016a0056
 8008680:	016a016a 	.word	0x016a016a
 8008684:	007c016a 	.word	0x007c016a
 8008688:	016a016a 	.word	0x016a016a
 800868c:	016a016a 	.word	0x016a016a
 8008690:	00b9016a 	.word	0x00b9016a
 8008694:	00b900b9 	.word	0x00b900b9
 8008698:	00b900b9 	.word	0x00b900b9
 800869c:	00b900b9 	.word	0x00b900b9
 80086a0:	00b900b9 	.word	0x00b900b9
 80086a4:	016a00b9 	.word	0x016a00b9
 80086a8:	016a016a 	.word	0x016a016a
 80086ac:	016a016a 	.word	0x016a016a
 80086b0:	016a016a 	.word	0x016a016a
 80086b4:	016a00e0 	.word	0x016a00e0
 80086b8:	00c30104 	.word	0x00c30104
 80086bc:	00e000e0 	.word	0x00e000e0
 80086c0:	016a00e0 	.word	0x016a00e0
 80086c4:	016a016a 	.word	0x016a016a
 80086c8:	00a0016a 	.word	0x00a0016a
 80086cc:	016a016a 	.word	0x016a016a
 80086d0:	016a00c7 	.word	0x016a00c7
 80086d4:	016a016a 	.word	0x016a016a
 80086d8:	016a00f6 	.word	0x016a00f6
 80086dc:	016a016a 	.word	0x016a016a
 80086e0:	00d3016a 	.word	0x00d3016a
 80086e4:	016a016a 	.word	0x016a016a
 80086e8:	016a00fa 	.word	0x016a00fa
 80086ec:	016a016a 	.word	0x016a016a
 80086f0:	016a016a 	.word	0x016a016a
 80086f4:	016a00e0 	.word	0x016a00e0
 80086f8:	00c50106 	.word	0x00c50106
 80086fc:	00e000e0 	.word	0x00e000e0
 8008700:	009300e0 	.word	0x009300e0
 8008704:	00a0012e 	.word	0x00a0012e
 8008708:	0085016a 	.word	0x0085016a
 800870c:	010d00ac 	.word	0x010d00ac
 8008710:	010a00c9 	.word	0x010a00c9
 8008714:	016a016a 	.word	0x016a016a
 8008718:	00a800f8 	.word	0x00a800f8
 800871c:	016a00cf 	.word	0x016a00cf
 8008720:	00d3016a 	.word	0x00d3016a
 8008724:	00a8016a 	.word	0x00a8016a
 8008728:	6863      	ldr	r3, [r4, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	dd0f      	ble.n	800874e <__ssvfscanf_r+0x17a>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	7819      	ldrb	r1, [r3, #0]
 8008734:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8008738:	4291      	cmp	r1, r2
 800873a:	d142      	bne.n	80087c2 <__ssvfscanf_r+0x1ee>
 800873c:	6862      	ldr	r2, [r4, #4]
 800873e:	3301      	adds	r3, #1
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	3a01      	subs	r2, #1
 8008746:	6062      	str	r2, [r4, #4]
 8008748:	3301      	adds	r3, #1
 800874a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800874c:	e75d      	b.n	800860a <__ssvfscanf_r+0x36>
 800874e:	4621      	mov	r1, r4
 8008750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008752:	f002 fe48 	bl	800b3e6 <__ssrefill_r>
 8008756:	2800      	cmp	r0, #0
 8008758:	d0e9      	beq.n	800872e <__ssvfscanf_r+0x15a>
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	b113      	cbz	r3, 8008764 <__ssvfscanf_r+0x190>
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	065b      	lsls	r3, r3, #25
 8008762:	d52e      	bpl.n	80087c2 <__ssvfscanf_r+0x1ee>
 8008764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008766:	2b00      	cmp	r3, #0
 8008768:	f040 80f7 	bne.w	800895a <__ssvfscanf_r+0x386>
 800876c:	f04f 33ff 	mov.w	r3, #4294967295
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
 8008772:	e102      	b.n	800897a <__ssvfscanf_r+0x3a6>
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	ea53 0309 	orrs.w	r3, r3, r9
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
 800877c:	d121      	bne.n	80087c2 <__ssvfscanf_r+0x1ee>
 800877e:	f04f 0910 	mov.w	r9, #16
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	e76f      	b.n	8008666 <__ssvfscanf_r+0x92>
 8008786:	f019 0f0f 	tst.w	r9, #15
 800878a:	d11a      	bne.n	80087c2 <__ssvfscanf_r+0x1ee>
 800878c:	7859      	ldrb	r1, [r3, #1]
 800878e:	296c      	cmp	r1, #108	; 0x6c
 8008790:	d104      	bne.n	800879c <__ssvfscanf_r+0x1c8>
 8008792:	3302      	adds	r3, #2
 8008794:	61bb      	str	r3, [r7, #24]
 8008796:	f049 0902 	orr.w	r9, r9, #2
 800879a:	e7f2      	b.n	8008782 <__ssvfscanf_r+0x1ae>
 800879c:	f049 0901 	orr.w	r9, r9, #1
 80087a0:	e7ef      	b.n	8008782 <__ssvfscanf_r+0x1ae>
 80087a2:	f019 0f0f 	tst.w	r9, #15
 80087a6:	d10c      	bne.n	80087c2 <__ssvfscanf_r+0x1ee>
 80087a8:	7859      	ldrb	r1, [r3, #1]
 80087aa:	2968      	cmp	r1, #104	; 0x68
 80087ac:	bf03      	ittte	eq
 80087ae:	3302      	addeq	r3, #2
 80087b0:	61bb      	streq	r3, [r7, #24]
 80087b2:	f049 0908 	orreq.w	r9, r9, #8
 80087b6:	f049 0904 	orrne.w	r9, r9, #4
 80087ba:	e7e2      	b.n	8008782 <__ssvfscanf_r+0x1ae>
 80087bc:	f019 0f0f 	tst.w	r9, #15
 80087c0:	d0e9      	beq.n	8008796 <__ssvfscanf_r+0x1c2>
 80087c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f040 80d3 	bne.w	8008970 <__ssvfscanf_r+0x39c>
 80087ca:	e0d6      	b.n	800897a <__ssvfscanf_r+0x3a6>
 80087cc:	f019 0f0f 	tst.w	r9, #15
 80087d0:	d0d7      	beq.n	8008782 <__ssvfscanf_r+0x1ae>
 80087d2:	e7f6      	b.n	80087c2 <__ssvfscanf_r+0x1ee>
 80087d4:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 80087d8:	d1f3      	bne.n	80087c2 <__ssvfscanf_r+0x1ee>
 80087da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087dc:	b921      	cbnz	r1, 80087e8 <__ssvfscanf_r+0x214>
 80087de:	b082      	sub	sp, #8
 80087e0:	a902      	add	r1, sp, #8
 80087e2:	e9c1 3300 	strd	r3, r3, [r1]
 80087e6:	6379      	str	r1, [r7, #52]	; 0x34
 80087e8:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80087ec:	e7c9      	b.n	8008782 <__ssvfscanf_r+0x1ae>
 80087ee:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 80087f2:	d1e6      	bne.n	80087c2 <__ssvfscanf_r+0x1ee>
 80087f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f6:	fb02 5503 	mla	r5, r2, r3, r5
 80087fa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80087fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008800:	e7bf      	b.n	8008782 <__ssvfscanf_r+0x1ae>
 8008802:	f049 0901 	orr.w	r9, r9, #1
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <__ssvfscanf_r+0x260>)
 8008808:	e008      	b.n	800881c <__ssvfscanf_r+0x248>
 800880a:	f049 0901 	orr.w	r9, r9, #1
 800880e:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <__ssvfscanf_r+0x264>)
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	2308      	movs	r3, #8
 8008814:	2503      	movs	r5, #3
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	e011      	b.n	800883e <__ssvfscanf_r+0x26a>
 800881a:	4b07      	ldr	r3, [pc, #28]	; (8008838 <__ssvfscanf_r+0x264>)
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	230a      	movs	r3, #10
 8008820:	e7f8      	b.n	8008814 <__ssvfscanf_r+0x240>
 8008822:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8008826:	4b04      	ldr	r3, [pc, #16]	; (8008838 <__ssvfscanf_r+0x264>)
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	2310      	movs	r3, #16
 800882c:	e7f2      	b.n	8008814 <__ssvfscanf_r+0x240>
 800882e:	bf00      	nop
 8008830:	08034aed 	.word	0x08034aed
 8008834:	0800b01d 	.word	0x0800b01d
 8008838:	0800b235 	.word	0x0800b235
 800883c:	2504      	movs	r5, #4
 800883e:	6863      	ldr	r3, [r4, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	dd4d      	ble.n	80088e0 <__ssvfscanf_r+0x30c>
 8008844:	f019 0f40 	tst.w	r9, #64	; 0x40
 8008848:	d105      	bne.n	8008856 <__ssvfscanf_r+0x282>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	49a6      	ldr	r1, [pc, #664]	; (8008ae8 <__ssvfscanf_r+0x514>)
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	5c52      	ldrb	r2, [r2, r1]
 8008852:	0711      	lsls	r1, r2, #28
 8008854:	d44b      	bmi.n	80088ee <__ssvfscanf_r+0x31a>
 8008856:	3d01      	subs	r5, #1
 8008858:	2d03      	cmp	r5, #3
 800885a:	d85a      	bhi.n	8008912 <__ssvfscanf_r+0x33e>
 800885c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8008860:	038401cc 	.word	0x038401cc
 8008864:	06060526 	.word	0x06060526
 8008868:	f049 0901 	orr.w	r9, r9, #1
 800886c:	2502      	movs	r5, #2
 800886e:	e7e6      	b.n	800883e <__ssvfscanf_r+0x26a>
 8008870:	69b9      	ldr	r1, [r7, #24]
 8008872:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8008876:	f001 fce9 	bl	800a24c <__sccl>
 800887a:	2501      	movs	r5, #1
 800887c:	61b8      	str	r0, [r7, #24]
 800887e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8008882:	e7dc      	b.n	800883e <__ssvfscanf_r+0x26a>
 8008884:	f049 0901 	orr.w	r9, r9, #1
 8008888:	2500      	movs	r5, #0
 800888a:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 800888e:	e7d6      	b.n	800883e <__ssvfscanf_r+0x26a>
 8008890:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 8008894:	e7c7      	b.n	8008826 <__ssvfscanf_r+0x252>
 8008896:	f019 0f10 	tst.w	r9, #16
 800889a:	f47f aeb6 	bne.w	800860a <__ssvfscanf_r+0x36>
 800889e:	f019 0f08 	tst.w	r9, #8
 80088a2:	f856 3b04 	ldr.w	r3, [r6], #4
 80088a6:	d002      	beq.n	80088ae <__ssvfscanf_r+0x2da>
 80088a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	e6ad      	b.n	800860a <__ssvfscanf_r+0x36>
 80088ae:	f019 0f04 	tst.w	r9, #4
 80088b2:	d002      	beq.n	80088ba <__ssvfscanf_r+0x2e6>
 80088b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	e6a7      	b.n	800860a <__ssvfscanf_r+0x36>
 80088ba:	f019 0f01 	tst.w	r9, #1
 80088be:	d002      	beq.n	80088c6 <__ssvfscanf_r+0x2f2>
 80088c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	e6a1      	b.n	800860a <__ssvfscanf_r+0x36>
 80088c6:	f019 0f02 	tst.w	r9, #2
 80088ca:	d0f9      	beq.n	80088c0 <__ssvfscanf_r+0x2ec>
 80088cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088d0:	17d2      	asrs	r2, r2, #31
 80088d2:	e9c3 1200 	strd	r1, r2, [r3]
 80088d6:	e698      	b.n	800860a <__ssvfscanf_r+0x36>
 80088d8:	4b84      	ldr	r3, [pc, #528]	; (8008aec <__ssvfscanf_r+0x518>)
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	2300      	movs	r3, #0
 80088de:	e799      	b.n	8008814 <__ssvfscanf_r+0x240>
 80088e0:	4621      	mov	r1, r4
 80088e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088e4:	f002 fd7f 	bl	800b3e6 <__ssrefill_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d0ab      	beq.n	8008844 <__ssvfscanf_r+0x270>
 80088ec:	e735      	b.n	800875a <__ssvfscanf_r+0x186>
 80088ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f0:	3201      	adds	r2, #1
 80088f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088f4:	6862      	ldr	r2, [r4, #4]
 80088f6:	3a01      	subs	r2, #1
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	6062      	str	r2, [r4, #4]
 80088fc:	dd02      	ble.n	8008904 <__ssvfscanf_r+0x330>
 80088fe:	3301      	adds	r3, #1
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	e7a2      	b.n	800884a <__ssvfscanf_r+0x276>
 8008904:	4621      	mov	r1, r4
 8008906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008908:	f002 fd6d 	bl	800b3e6 <__ssrefill_r>
 800890c:	2800      	cmp	r0, #0
 800890e:	d09c      	beq.n	800884a <__ssvfscanf_r+0x276>
 8008910:	e723      	b.n	800875a <__ssvfscanf_r+0x186>
 8008912:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8008914:	f009 0b10 	and.w	fp, r9, #16
 8008918:	2d01      	cmp	r5, #1
 800891a:	bf38      	it	cc
 800891c:	2501      	movcc	r5, #1
 800891e:	f019 0801 	ands.w	r8, r9, #1
 8008922:	f000 80f3 	beq.w	8008b0c <__ssvfscanf_r+0x538>
 8008926:	f1bb 0f00 	cmp.w	fp, #0
 800892a:	f040 80b2 	bne.w	8008a92 <__ssvfscanf_r+0x4be>
 800892e:	4633      	mov	r3, r6
 8008930:	f853 6b04 	ldr.w	r6, [r3], #4
 8008934:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008938:	633b      	str	r3, [r7, #48]	; 0x30
 800893a:	f000 80b1 	beq.w	8008aa0 <__ssvfscanf_r+0x4cc>
 800893e:	b13e      	cbz	r6, 8008950 <__ssvfscanf_r+0x37c>
 8008940:	2080      	movs	r0, #128	; 0x80
 8008942:	f001 f82d 	bl	80099a0 <malloc>
 8008946:	4680      	mov	r8, r0
 8008948:	b9e8      	cbnz	r0, 8008986 <__ssvfscanf_r+0x3b2>
 800894a:	f04f 33ff 	mov.w	r3, #4294967295
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
 8008950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008952:	b193      	cbz	r3, 800897a <__ssvfscanf_r+0x3a6>
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	3301      	adds	r3, #1
 8008958:	d10a      	bne.n	8008970 <__ssvfscanf_r+0x39c>
 800895a:	2400      	movs	r4, #0
 800895c:	4626      	mov	r6, r4
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	681d      	ldr	r5, [r3, #0]
 8008962:	88db      	ldrh	r3, [r3, #6]
 8008964:	42a3      	cmp	r3, r4
 8008966:	f300 8798 	bgt.w	800989a <__ssvfscanf_r+0x12c6>
 800896a:	f04f 33ff 	mov.w	r3, #4294967295
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
 8008970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008972:	6818      	ldr	r0, [r3, #0]
 8008974:	b108      	cbz	r0, 800897a <__ssvfscanf_r+0x3a6>
 8008976:	f001 f81b 	bl	80099b0 <free>
 800897a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800897c:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 8008980:	46bd      	mov	sp, r7
 8008982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008988:	6030      	str	r0, [r6, #0]
 800898a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800898e:	889b      	ldrh	r3, [r3, #4]
 8008990:	4599      	cmp	r9, r3
 8008992:	d312      	bcc.n	80089ba <__ssvfscanf_r+0x3e6>
 8008994:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8008998:	4293      	cmp	r3, r2
 800899a:	d8d6      	bhi.n	800894a <__ssvfscanf_r+0x376>
 800899c:	3308      	adds	r3, #8
 800899e:	fa1f fa83 	uxth.w	sl, r3
 80089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	f001 fa8f 	bl	8009ecc <realloc>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0cb      	beq.n	800894a <__ssvfscanf_r+0x376>
 80089b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b4:	6018      	str	r0, [r3, #0]
 80089b6:	f8a3 a004 	strh.w	sl, [r3, #4]
 80089ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089bc:	f109 0201 	add.w	r2, r9, #1
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	46b2      	mov	sl, r6
 80089c4:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 80089c8:	4646      	mov	r6, r8
 80089ca:	f04f 0920 	mov.w	r9, #32
 80089ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089d0:	80ca      	strh	r2, [r1, #6]
 80089d2:	2200      	movs	r2, #0
 80089d4:	613a      	str	r2, [r7, #16]
 80089d6:	f000 ffc3 	bl	8009960 <__locale_mb_cur_max>
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4290      	cmp	r0, r2
 80089de:	f43f aebc 	beq.w	800875a <__ssvfscanf_r+0x186>
 80089e2:	6821      	ldr	r1, [r4, #0]
 80089e4:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 80089e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80089ec:	1c53      	adds	r3, r2, #1
 80089ee:	f80c 0002 	strb.w	r0, [ip, r2]
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	3a01      	subs	r2, #1
 80089f6:	e9c4 1200 	strd	r1, r2, [r4]
 80089fa:	6a3a      	ldr	r2, [r7, #32]
 80089fc:	2a03      	cmp	r2, #3
 80089fe:	d102      	bne.n	8008a06 <__ssvfscanf_r+0x432>
 8008a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a02:	2a04      	cmp	r2, #4
 8008a04:	d007      	beq.n	8008a16 <__ssvfscanf_r+0x442>
 8008a06:	2208      	movs	r2, #8
 8008a08:	2100      	movs	r1, #0
 8008a0a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8008a0e:	623b      	str	r3, [r7, #32]
 8008a10:	f7ff fd68 	bl	80084e4 <memset>
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008a1a:	9200      	str	r2, [sp, #0]
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	f001 fa07 	bl	8009e38 <_mbrtowc_r>
 8008a2a:	1c42      	adds	r2, r0, #1
 8008a2c:	6238      	str	r0, [r7, #32]
 8008a2e:	f43f ae94 	beq.w	800875a <__ssvfscanf_r+0x186>
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d137      	bne.n	8008aa8 <__ssvfscanf_r+0x4d4>
 8008a38:	f1bb 0f00 	cmp.w	fp, #0
 8008a3c:	d101      	bne.n	8008a42 <__ssvfscanf_r+0x46e>
 8008a3e:	f8c6 b000 	str.w	fp, [r6]
 8008a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a44:	441a      	add	r2, r3
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d102      	bne.n	8008a54 <__ssvfscanf_r+0x480>
 8008a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d000      	beq.n	8008a56 <__ssvfscanf_r+0x482>
 8008a54:	3d01      	subs	r5, #1
 8008a56:	f1bb 0f00 	cmp.w	fp, #0
 8008a5a:	d118      	bne.n	8008a8e <__ssvfscanf_r+0x4ba>
 8008a5c:	f1ba 0f00 	cmp.w	sl, #0
 8008a60:	d014      	beq.n	8008a8c <__ssvfscanf_r+0x4b8>
 8008a62:	eba6 0308 	sub.w	r3, r6, r8
 8008a66:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8008a6a:	d80f      	bhi.n	8008a8c <__ssvfscanf_r+0x4b8>
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	f001 fa2a 	bl	8009ecc <realloc>
 8008a78:	4680      	mov	r8, r0
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	f43f af65 	beq.w	800894a <__ssvfscanf_r+0x376>
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f8ca 0000 	str.w	r0, [sl]
 8008a86:	18c6      	adds	r6, r0, r3
 8008a88:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008a8c:	3604      	adds	r6, #4
 8008a8e:	2200      	movs	r2, #0
 8008a90:	e00e      	b.n	8008ab0 <__ssvfscanf_r+0x4dc>
 8008a92:	f04f 0900 	mov.w	r9, #0
 8008a96:	633e      	str	r6, [r7, #48]	; 0x30
 8008a98:	46c8      	mov	r8, r9
 8008a9a:	46ca      	mov	sl, r9
 8008a9c:	464e      	mov	r6, r9
 8008a9e:	e798      	b.n	80089d2 <__ssvfscanf_r+0x3fe>
 8008aa0:	46d9      	mov	r9, fp
 8008aa2:	46d8      	mov	r8, fp
 8008aa4:	46da      	mov	sl, fp
 8008aa6:	e794      	b.n	80089d2 <__ssvfscanf_r+0x3fe>
 8008aa8:	6a3a      	ldr	r2, [r7, #32]
 8008aaa:	3202      	adds	r2, #2
 8008aac:	d1c9      	bne.n	8008a42 <__ssvfscanf_r+0x46e>
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6863      	ldr	r3, [r4, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	dc14      	bgt.n	8008ae0 <__ssvfscanf_r+0x50c>
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aba:	613a      	str	r2, [r7, #16]
 8008abc:	f002 fc93 	bl	800b3e6 <__ssrefill_r>
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	b168      	cbz	r0, 8008ae0 <__ssvfscanf_r+0x50c>
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	f47f ae48 	bne.w	800875a <__ssvfscanf_r+0x186>
 8008aca:	f1ba 0f00 	cmp.w	sl, #0
 8008ace:	d10f      	bne.n	8008af0 <__ssvfscanf_r+0x51c>
 8008ad0:	f1bb 0f00 	cmp.w	fp, #0
 8008ad4:	d102      	bne.n	8008adc <__ssvfscanf_r+0x508>
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	3301      	adds	r3, #1
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
 8008adc:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8008ade:	e594      	b.n	800860a <__ssvfscanf_r+0x36>
 8008ae0:	2d00      	cmp	r5, #0
 8008ae2:	f47f af77 	bne.w	80089d4 <__ssvfscanf_r+0x400>
 8008ae6:	e7f0      	b.n	8008aca <__ssvfscanf_r+0x4f6>
 8008ae8:	08034aed 	.word	0x08034aed
 8008aec:	0800b01d 	.word	0x0800b01d
 8008af0:	eba6 0108 	sub.w	r1, r6, r8
 8008af4:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8008af8:	d9ea      	bls.n	8008ad0 <__ssvfscanf_r+0x4fc>
 8008afa:	f8da 0000 	ldr.w	r0, [sl]
 8008afe:	f001 f9e5 	bl	8009ecc <realloc>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d0e4      	beq.n	8008ad0 <__ssvfscanf_r+0x4fc>
 8008b06:	f8ca 0000 	str.w	r0, [sl]
 8008b0a:	e7e1      	b.n	8008ad0 <__ssvfscanf_r+0x4fc>
 8008b0c:	f1bb 0f00 	cmp.w	fp, #0
 8008b10:	d01a      	beq.n	8008b48 <__ssvfscanf_r+0x574>
 8008b12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b16:	429d      	cmp	r5, r3
 8008b18:	dd10      	ble.n	8008b3c <__ssvfscanf_r+0x568>
 8008b1a:	4498      	add	r8, r3
 8008b1c:	1aed      	subs	r5, r5, r3
 8008b1e:	4413      	add	r3, r2
 8008b20:	4621      	mov	r1, r4
 8008b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	f002 fc5e 	bl	800b3e6 <__ssrefill_r>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d0f1      	beq.n	8008b12 <__ssvfscanf_r+0x53e>
 8008b2e:	f1b8 0f00 	cmp.w	r8, #0
 8008b32:	f43f ae12 	beq.w	800875a <__ssvfscanf_r+0x186>
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	4443      	add	r3, r8
 8008b3a:	e606      	b.n	800874a <__ssvfscanf_r+0x176>
 8008b3c:	1b5b      	subs	r3, r3, r5
 8008b3e:	442a      	add	r2, r5
 8008b40:	44a8      	add	r8, r5
 8008b42:	6063      	str	r3, [r4, #4]
 8008b44:	6022      	str	r2, [r4, #0]
 8008b46:	e7f6      	b.n	8008b36 <__ssvfscanf_r+0x562>
 8008b48:	46b0      	mov	r8, r6
 8008b4a:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8008b4e:	f858 6b04 	ldr.w	r6, [r8], #4
 8008b52:	d031      	beq.n	8008bb8 <__ssvfscanf_r+0x5e4>
 8008b54:	2e00      	cmp	r6, #0
 8008b56:	f43f ae34 	beq.w	80087c2 <__ssvfscanf_r+0x1ee>
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 ff20 	bl	80099a0 <malloc>
 8008b60:	4682      	mov	sl, r0
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f43f adfe 	beq.w	8008764 <__ssvfscanf_r+0x190>
 8008b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6a:	6030      	str	r0, [r6, #0]
 8008b6c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8008b70:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8008b74:	45cb      	cmp	fp, r9
 8008b76:	d315      	bcc.n	8008ba4 <__ssvfscanf_r+0x5d0>
 8008b78:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008b7c:	4599      	cmp	r9, r3
 8008b7e:	f63f aeec 	bhi.w	800895a <__ssvfscanf_r+0x386>
 8008b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b84:	f109 0908 	add.w	r9, r9, #8
 8008b88:	fa1f f989 	uxth.w	r9, r9
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8008b92:	f001 f99b 	bl	8009ecc <realloc>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	f43f aedf 	beq.w	800895a <__ssvfscanf_r+0x386>
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	6018      	str	r0, [r3, #0]
 8008ba0:	f8a3 9004 	strh.w	r9, [r3, #4]
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba6:	46b1      	mov	r9, r6
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bac:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8008bb0:	4656      	mov	r6, sl
 8008bb2:	f10b 0201 	add.w	r2, fp, #1
 8008bb6:	80ca      	strh	r2, [r1, #6]
 8008bb8:	4631      	mov	r1, r6
 8008bba:	462b      	mov	r3, r5
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc0:	9400      	str	r4, [sp, #0]
 8008bc2:	f002 fc2d 	bl	800b420 <_sfread_r>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	f43f adc6 	beq.w	800875a <__ssvfscanf_r+0x186>
 8008bce:	f1b9 0f00 	cmp.w	r9, #0
 8008bd2:	d009      	beq.n	8008be8 <__ssvfscanf_r+0x614>
 8008bd4:	4285      	cmp	r5, r0
 8008bd6:	d907      	bls.n	8008be8 <__ssvfscanf_r+0x614>
 8008bd8:	4601      	mov	r1, r0
 8008bda:	f8d9 0000 	ldr.w	r0, [r9]
 8008bde:	f001 f975 	bl	8009ecc <realloc>
 8008be2:	b108      	cbz	r0, 8008be8 <__ssvfscanf_r+0x614>
 8008be4:	f8c9 0000 	str.w	r0, [r9]
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	4433      	add	r3, r6
 8008bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	4646      	mov	r6, r8
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf6:	e508      	b.n	800860a <__ssvfscanf_r+0x36>
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfa:	f009 0b10 	and.w	fp, r9, #16
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bf08      	it	eq
 8008c02:	f04f 33ff 	moveq.w	r3, #4294967295
 8008c06:	f019 0501 	ands.w	r5, r9, #1
 8008c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c0c:	f000 8103 	beq.w	8008e16 <__ssvfscanf_r+0x842>
 8008c10:	f1bb 0f00 	cmp.w	fp, #0
 8008c14:	f040 80a5 	bne.w	8008d62 <__ssvfscanf_r+0x78e>
 8008c18:	4633      	mov	r3, r6
 8008c1a:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c1e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	f000 80a6 	beq.w	8008d74 <__ssvfscanf_r+0x7a0>
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	f43f ae91 	beq.w	8008950 <__ssvfscanf_r+0x37c>
 8008c2e:	2080      	movs	r0, #128	; 0x80
 8008c30:	f000 feb6 	bl	80099a0 <malloc>
 8008c34:	4680      	mov	r8, r0
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f43f ae87 	beq.w	800894a <__ssvfscanf_r+0x376>
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3e:	6028      	str	r0, [r5, #0]
 8008c40:	88de      	ldrh	r6, [r3, #6]
 8008c42:	889b      	ldrh	r3, [r3, #4]
 8008c44:	429e      	cmp	r6, r3
 8008c46:	d314      	bcc.n	8008c72 <__ssvfscanf_r+0x69e>
 8008c48:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	f63f ae7c 	bhi.w	800894a <__ssvfscanf_r+0x376>
 8008c52:	3308      	adds	r3, #8
 8008c54:	fa1f f983 	uxth.w	r9, r3
 8008c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5a:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	f001 f934 	bl	8009ecc <realloc>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	f43f ae70 	beq.w	800894a <__ssvfscanf_r+0x376>
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	6018      	str	r0, [r3, #0]
 8008c6e:	f8a3 9004 	strh.w	r9, [r3, #4]
 8008c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c74:	613d      	str	r5, [r7, #16]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f04f 0a20 	mov.w	sl, #32
 8008c7c:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8008c80:	4645      	mov	r5, r8
 8008c82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c84:	1c72      	adds	r2, r6, #1
 8008c86:	80ca      	strh	r2, [r1, #6]
 8008c88:	2600      	movs	r6, #0
 8008c8a:	f000 fe69 	bl	8009960 <__locale_mb_cur_max>
 8008c8e:	42b0      	cmp	r0, r6
 8008c90:	f43f ad63 	beq.w	800875a <__ssvfscanf_r+0x186>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8008c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c9e:	f106 0901 	add.w	r9, r6, #1
 8008ca2:	558a      	strb	r2, [r1, r6]
 8008ca4:	6862      	ldr	r2, [r4, #4]
 8008ca6:	3a01      	subs	r2, #1
 8008ca8:	e9c4 3200 	strd	r3, r2, [r4]
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d102      	bne.n	8008cb8 <__ssvfscanf_r+0x6e4>
 8008cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d005      	beq.n	8008cc4 <__ssvfscanf_r+0x6f0>
 8008cb8:	2208      	movs	r2, #8
 8008cba:	2100      	movs	r1, #0
 8008cbc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8008cc0:	f7ff fc10 	bl	80084e4 <memset>
 8008cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	4629      	mov	r1, r5
 8008ccc:	464b      	mov	r3, r9
 8008cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cd0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008cd4:	f001 f8b0 	bl	8009e38 <_mbrtowc_r>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	6238      	str	r0, [r7, #32]
 8008cdc:	1c58      	adds	r0, r3, #1
 8008cde:	f43f ad3c 	beq.w	800875a <__ssvfscanf_r+0x186>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d14b      	bne.n	8008d7e <__ssvfscanf_r+0x7aa>
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	682e      	ldr	r6, [r5, #0]
 8008cea:	1c71      	adds	r1, r6, #1
 8008cec:	d057      	beq.n	8008d9e <__ssvfscanf_r+0x7ca>
 8008cee:	2208      	movs	r2, #8
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8008cf6:	f7ff fbf5 	bl	80084e4 <memset>
 8008cfa:	4b9a      	ldr	r3, [pc, #616]	; (8008f64 <__ssvfscanf_r+0x990>)
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d04:	60bb      	str	r3, [r7, #8]
 8008d06:	68be      	ldr	r6, [r7, #8]
 8008d08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d0c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008d10:	47b0      	blx	r6
 8008d12:	2801      	cmp	r0, #1
 8008d14:	d145      	bne.n	8008da2 <__ssvfscanf_r+0x7ce>
 8008d16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008d1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d1e:	5c9b      	ldrb	r3, [r3, r2]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d149      	bne.n	8008db8 <__ssvfscanf_r+0x7e4>
 8008d24:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 8008d28:	f1b9 0f00 	cmp.w	r9, #0
 8008d2c:	d13b      	bne.n	8008da6 <__ssvfscanf_r+0x7d2>
 8008d2e:	f1bb 0f00 	cmp.w	fp, #0
 8008d32:	d114      	bne.n	8008d5e <__ssvfscanf_r+0x78a>
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f8c5 b000 	str.w	fp, [r5]
 8008d3a:	b16b      	cbz	r3, 8008d58 <__ssvfscanf_r+0x784>
 8008d3c:	eba5 0108 	sub.w	r1, r5, r8
 8008d40:	108b      	asrs	r3, r1, #2
 8008d42:	3301      	adds	r3, #1
 8008d44:	459a      	cmp	sl, r3
 8008d46:	d907      	bls.n	8008d58 <__ssvfscanf_r+0x784>
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3104      	adds	r1, #4
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	f001 f8bd 	bl	8009ecc <realloc>
 8008d52:	b108      	cbz	r0, 8008d58 <__ssvfscanf_r+0x784>
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6018      	str	r0, [r3, #0]
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d5e:	68fe      	ldr	r6, [r7, #12]
 8008d60:	e453      	b.n	800860a <__ssvfscanf_r+0x36>
 8008d62:	f04f 0a00 	mov.w	sl, #0
 8008d66:	60fe      	str	r6, [r7, #12]
 8008d68:	46d0      	mov	r8, sl
 8008d6a:	f8c7 a010 	str.w	sl, [r7, #16]
 8008d6e:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8008d72:	e789      	b.n	8008c88 <__ssvfscanf_r+0x6b4>
 8008d74:	46da      	mov	sl, fp
 8008d76:	46d8      	mov	r8, fp
 8008d78:	f8c7 b010 	str.w	fp, [r7, #16]
 8008d7c:	e784      	b.n	8008c88 <__ssvfscanf_r+0x6b4>
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	3302      	adds	r3, #2
 8008d82:	d1b1      	bne.n	8008ce8 <__ssvfscanf_r+0x714>
 8008d84:	6863      	ldr	r3, [r4, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	dc40      	bgt.n	8008e0c <__ssvfscanf_r+0x838>
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d8e:	f002 fb2a 	bl	800b3e6 <__ssrefill_r>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d03a      	beq.n	8008e0c <__ssvfscanf_r+0x838>
 8008d96:	f1b9 0f00 	cmp.w	r9, #0
 8008d9a:	d0c8      	beq.n	8008d2e <__ssvfscanf_r+0x75a>
 8008d9c:	e4dd      	b.n	800875a <__ssvfscanf_r+0x186>
 8008d9e:	4632      	mov	r2, r6
 8008da0:	e7bb      	b.n	8008d1a <__ssvfscanf_r+0x746>
 8008da2:	2200      	movs	r2, #0
 8008da4:	e7b9      	b.n	8008d1a <__ssvfscanf_r+0x746>
 8008da6:	f109 39ff 	add.w	r9, r9, #4294967295
 8008daa:	4622      	mov	r2, r4
 8008dac:	f816 1009 	ldrb.w	r1, [r6, r9]
 8008db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008db2:	f002 fadb 	bl	800b36c <_sungetc_r>
 8008db6:	e7b7      	b.n	8008d28 <__ssvfscanf_r+0x754>
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	444b      	add	r3, r9
 8008dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d102      	bne.n	8008dca <__ssvfscanf_r+0x7f6>
 8008dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d002      	beq.n	8008dd0 <__ssvfscanf_r+0x7fc>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	633b      	str	r3, [r7, #48]	; 0x30
 8008dd0:	f1bb 0f00 	cmp.w	fp, #0
 8008dd4:	d117      	bne.n	8008e06 <__ssvfscanf_r+0x832>
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3504      	adds	r5, #4
 8008dda:	b1a3      	cbz	r3, 8008e06 <__ssvfscanf_r+0x832>
 8008ddc:	eba5 0608 	sub.w	r6, r5, r8
 8008de0:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 8008de4:	d80d      	bhi.n	8008e02 <__ssvfscanf_r+0x82e>
 8008de6:	4640      	mov	r0, r8
 8008de8:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 8008dec:	f001 f86e 	bl	8009ecc <realloc>
 8008df0:	4680      	mov	r8, r0
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f43f ada9 	beq.w	800894a <__ssvfscanf_r+0x376>
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1985      	adds	r5, r0, r6
 8008dfc:	6018      	str	r0, [r3, #0]
 8008dfe:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8008e02:	46d9      	mov	r9, fp
 8008e04:	e7be      	b.n	8008d84 <__ssvfscanf_r+0x7b0>
 8008e06:	f04f 0900 	mov.w	r9, #0
 8008e0a:	e7bb      	b.n	8008d84 <__ssvfscanf_r+0x7b0>
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d08d      	beq.n	8008d2e <__ssvfscanf_r+0x75a>
 8008e12:	464e      	mov	r6, r9
 8008e14:	e739      	b.n	8008c8a <__ssvfscanf_r+0x6b6>
 8008e16:	f1bb 0f00 	cmp.w	fp, #0
 8008e1a:	d01c      	beq.n	8008e56 <__ssvfscanf_r+0x882>
 8008e1c:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	781a      	ldrb	r2, [r3, #0]
 8008e24:	f818 2002 	ldrb.w	r2, [r8, r2]
 8008e28:	b90a      	cbnz	r2, 8008e2e <__ssvfscanf_r+0x85a>
 8008e2a:	b98d      	cbnz	r5, 8008e50 <__ssvfscanf_r+0x87c>
 8008e2c:	e4c9      	b.n	80087c2 <__ssvfscanf_r+0x1ee>
 8008e2e:	3301      	adds	r3, #1
 8008e30:	6862      	ldr	r2, [r4, #4]
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	3501      	adds	r5, #1
 8008e38:	3a01      	subs	r2, #1
 8008e3a:	42ab      	cmp	r3, r5
 8008e3c:	6062      	str	r2, [r4, #4]
 8008e3e:	d007      	beq.n	8008e50 <__ssvfscanf_r+0x87c>
 8008e40:	2a00      	cmp	r2, #0
 8008e42:	dced      	bgt.n	8008e20 <__ssvfscanf_r+0x84c>
 8008e44:	4621      	mov	r1, r4
 8008e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e48:	f002 facd 	bl	800b3e6 <__ssrefill_r>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d0e7      	beq.n	8008e20 <__ssvfscanf_r+0x84c>
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	442b      	add	r3, r5
 8008e54:	e479      	b.n	800874a <__ssvfscanf_r+0x176>
 8008e56:	46b3      	mov	fp, r6
 8008e58:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8008e5c:	f85b 6b04 	ldr.w	r6, [fp], #4
 8008e60:	d07e      	beq.n	8008f60 <__ssvfscanf_r+0x98c>
 8008e62:	2e00      	cmp	r6, #0
 8008e64:	f43f acad 	beq.w	80087c2 <__ssvfscanf_r+0x1ee>
 8008e68:	2020      	movs	r0, #32
 8008e6a:	f000 fd99 	bl	80099a0 <malloc>
 8008e6e:	4680      	mov	r8, r0
 8008e70:	2800      	cmp	r0, #0
 8008e72:	f43f ac77 	beq.w	8008764 <__ssvfscanf_r+0x190>
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e78:	6030      	str	r0, [r6, #0]
 8008e7a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008e7e:	889d      	ldrh	r5, [r3, #4]
 8008e80:	45a9      	cmp	r9, r5
 8008e82:	d311      	bcc.n	8008ea8 <__ssvfscanf_r+0x8d4>
 8008e84:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008e88:	429d      	cmp	r5, r3
 8008e8a:	f63f ad66 	bhi.w	800895a <__ssvfscanf_r+0x386>
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e90:	3508      	adds	r5, #8
 8008e92:	b2ad      	uxth	r5, r5
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	00a9      	lsls	r1, r5, #2
 8008e98:	f001 f818 	bl	8009ecc <realloc>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	f43f ad5c 	beq.w	800895a <__ssvfscanf_r+0x386>
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea4:	6018      	str	r0, [r3, #0]
 8008ea6:	809d      	strh	r5, [r3, #4]
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eaa:	f109 0201 	add.w	r2, r9, #1
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	46b2      	mov	sl, r6
 8008eb2:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8008eb6:	4646      	mov	r6, r8
 8008eb8:	f04f 0920 	mov.w	r9, #32
 8008ebc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ebe:	80ca      	strh	r2, [r1, #6]
 8008ec0:	4635      	mov	r5, r6
 8008ec2:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	781a      	ldrb	r2, [r3, #0]
 8008eca:	f818 2002 	ldrb.w	r2, [r8, r2]
 8008ece:	b362      	cbz	r2, 8008f2a <__ssvfscanf_r+0x956>
 8008ed0:	6862      	ldr	r2, [r4, #4]
 8008ed2:	3a01      	subs	r2, #1
 8008ed4:	6062      	str	r2, [r4, #4]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f806 3b01 	strb.w	r3, [r6], #1
 8008ee0:	f1ba 0f00 	cmp.w	sl, #0
 8008ee4:	d011      	beq.n	8008f0a <__ssvfscanf_r+0x936>
 8008ee6:	1b73      	subs	r3, r6, r5
 8008ee8:	454b      	cmp	r3, r9
 8008eea:	d30e      	bcc.n	8008f0a <__ssvfscanf_r+0x936>
 8008eec:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	613b      	str	r3, [r7, #16]
 8008ef6:	f000 ffe9 	bl	8009ecc <realloc>
 8008efa:	4605      	mov	r5, r0
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f43f ac31 	beq.w	8008764 <__ssvfscanf_r+0x190>
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f8ca 0000 	str.w	r0, [sl]
 8008f08:	18c6      	adds	r6, r0, r3
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f10:	d00b      	beq.n	8008f2a <__ssvfscanf_r+0x956>
 8008f12:	6863      	ldr	r3, [r4, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dcd6      	bgt.n	8008ec6 <__ssvfscanf_r+0x8f2>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f1c:	f002 fa63 	bl	800b3e6 <__ssrefill_r>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d0d0      	beq.n	8008ec6 <__ssvfscanf_r+0x8f2>
 8008f24:	42ae      	cmp	r6, r5
 8008f26:	f43f ac18 	beq.w	800875a <__ssvfscanf_r+0x186>
 8008f2a:	1b75      	subs	r5, r6, r5
 8008f2c:	f43f ac49 	beq.w	80087c2 <__ssvfscanf_r+0x1ee>
 8008f30:	2300      	movs	r3, #0
 8008f32:	7033      	strb	r3, [r6, #0]
 8008f34:	f1ba 0f00 	cmp.w	sl, #0
 8008f38:	d009      	beq.n	8008f4e <__ssvfscanf_r+0x97a>
 8008f3a:	1c69      	adds	r1, r5, #1
 8008f3c:	4589      	cmp	r9, r1
 8008f3e:	d906      	bls.n	8008f4e <__ssvfscanf_r+0x97a>
 8008f40:	f8da 0000 	ldr.w	r0, [sl]
 8008f44:	f000 ffc2 	bl	8009ecc <realloc>
 8008f48:	b108      	cbz	r0, 8008f4e <__ssvfscanf_r+0x97a>
 8008f4a:	f8ca 0000 	str.w	r0, [sl]
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	3301      	adds	r3, #1
 8008f52:	627b      	str	r3, [r7, #36]	; 0x24
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	442b      	add	r3, r5
 8008f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f5a:	465e      	mov	r6, fp
 8008f5c:	f7ff bb55 	b.w	800860a <__ssvfscanf_r+0x36>
 8008f60:	46ca      	mov	sl, r9
 8008f62:	e7ad      	b.n	8008ec0 <__ssvfscanf_r+0x8ec>
 8008f64:	2000047c 	.word	0x2000047c
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	f009 0810 	and.w	r8, r9, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bf08      	it	eq
 8008f72:	f04f 33ff 	moveq.w	r3, #4294967295
 8008f76:	f019 0501 	ands.w	r5, r9, #1
 8008f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008f7c:	f000 80f8 	beq.w	8009170 <__ssvfscanf_r+0xb9c>
 8008f80:	f1b8 0f00 	cmp.w	r8, #0
 8008f84:	f040 809f 	bne.w	80090c6 <__ssvfscanf_r+0xaf2>
 8008f88:	4633      	mov	r3, r6
 8008f8a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f8e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008f92:	613b      	str	r3, [r7, #16]
 8008f94:	f000 809f 	beq.w	80090d6 <__ssvfscanf_r+0xb02>
 8008f98:	2e00      	cmp	r6, #0
 8008f9a:	f43f acd9 	beq.w	8008950 <__ssvfscanf_r+0x37c>
 8008f9e:	2080      	movs	r0, #128	; 0x80
 8008fa0:	f000 fcfe 	bl	80099a0 <malloc>
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f43f accf 	beq.w	800894a <__ssvfscanf_r+0x376>
 8008fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fae:	6030      	str	r0, [r6, #0]
 8008fb0:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008fb4:	889b      	ldrh	r3, [r3, #4]
 8008fb6:	4599      	cmp	r9, r3
 8008fb8:	d314      	bcc.n	8008fe4 <__ssvfscanf_r+0xa10>
 8008fba:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	f63f acc3 	bhi.w	800894a <__ssvfscanf_r+0x376>
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	fa1f fa83 	uxth.w	sl, r3
 8008fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fcc:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	f000 ff7b 	bl	8009ecc <realloc>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f43f acb7 	beq.w	800894a <__ssvfscanf_r+0x376>
 8008fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fde:	6018      	str	r0, [r3, #0]
 8008fe0:	f8a3 a004 	strh.w	sl, [r3, #4]
 8008fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe6:	f109 0201 	add.w	r2, r9, #1
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	46b2      	mov	sl, r6
 8008fee:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8008ff2:	462e      	mov	r6, r5
 8008ff4:	f04f 0920 	mov.w	r9, #32
 8008ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ffa:	80ca      	strh	r2, [r1, #6]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	49a8      	ldr	r1, [pc, #672]	; (80092a8 <__ssvfscanf_r+0xcd4>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	5c5b      	ldrb	r3, [r3, r1]
 800900a:	0718      	lsls	r0, r3, #28
 800900c:	d440      	bmi.n	8009090 <__ssvfscanf_r+0xabc>
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	2b00      	cmp	r3, #0
 8009012:	d03d      	beq.n	8009090 <__ssvfscanf_r+0xabc>
 8009014:	60fa      	str	r2, [r7, #12]
 8009016:	f000 fca3 	bl	8009960 <__locale_mb_cur_max>
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4290      	cmp	r0, r2
 800901e:	f43f ab9c 	beq.w	800875a <__ssvfscanf_r+0x186>
 8009022:	6821      	ldr	r1, [r4, #0]
 8009024:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 8009028:	f811 0b01 	ldrb.w	r0, [r1], #1
 800902c:	1c53      	adds	r3, r2, #1
 800902e:	f80c 0002 	strb.w	r0, [ip, r2]
 8009032:	6862      	ldr	r2, [r4, #4]
 8009034:	3a01      	subs	r2, #1
 8009036:	e9c4 1200 	strd	r1, r2, [r4]
 800903a:	6a3a      	ldr	r2, [r7, #32]
 800903c:	2a03      	cmp	r2, #3
 800903e:	d103      	bne.n	8009048 <__ssvfscanf_r+0xa74>
 8009040:	f8db 2000 	ldr.w	r2, [fp]
 8009044:	2a04      	cmp	r2, #4
 8009046:	d006      	beq.n	8009056 <__ssvfscanf_r+0xa82>
 8009048:	2208      	movs	r2, #8
 800904a:	2100      	movs	r1, #0
 800904c:	4658      	mov	r0, fp
 800904e:	623b      	str	r3, [r7, #32]
 8009050:	f7ff fa48 	bl	80084e4 <memset>
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800905a:	4631      	mov	r1, r6
 800905c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905e:	f8cd b000 	str.w	fp, [sp]
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	f000 fee8 	bl	8009e38 <_mbrtowc_r>
 8009068:	1c42      	adds	r2, r0, #1
 800906a:	6238      	str	r0, [r7, #32]
 800906c:	f43f ab75 	beq.w	800875a <__ssvfscanf_r+0x186>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2800      	cmp	r0, #0
 8009074:	d133      	bne.n	80090de <__ssvfscanf_r+0xb0a>
 8009076:	6030      	str	r0, [r6, #0]
 8009078:	6830      	ldr	r0, [r6, #0]
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	f000 fc62 	bl	8009944 <iswspace>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4602      	mov	r2, r0
 8009084:	2800      	cmp	r0, #0
 8009086:	d047      	beq.n	8009118 <__ssvfscanf_r+0xb44>
 8009088:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 800908c:	2b00      	cmp	r3, #0
 800908e:	d139      	bne.n	8009104 <__ssvfscanf_r+0xb30>
 8009090:	f1b8 0f00 	cmp.w	r8, #0
 8009094:	d114      	bne.n	80090c0 <__ssvfscanf_r+0xaec>
 8009096:	f8c6 8000 	str.w	r8, [r6]
 800909a:	f1ba 0f00 	cmp.w	sl, #0
 800909e:	d00c      	beq.n	80090ba <__ssvfscanf_r+0xae6>
 80090a0:	1b71      	subs	r1, r6, r5
 80090a2:	108b      	asrs	r3, r1, #2
 80090a4:	3301      	adds	r3, #1
 80090a6:	4599      	cmp	r9, r3
 80090a8:	d907      	bls.n	80090ba <__ssvfscanf_r+0xae6>
 80090aa:	f8da 0000 	ldr.w	r0, [sl]
 80090ae:	3104      	adds	r1, #4
 80090b0:	f000 ff0c 	bl	8009ecc <realloc>
 80090b4:	b108      	cbz	r0, 80090ba <__ssvfscanf_r+0xae6>
 80090b6:	f8ca 0000 	str.w	r0, [sl]
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	3301      	adds	r3, #1
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
 80090c0:	693e      	ldr	r6, [r7, #16]
 80090c2:	f7ff baa2 	b.w	800860a <__ssvfscanf_r+0x36>
 80090c6:	f04f 0900 	mov.w	r9, #0
 80090ca:	613e      	str	r6, [r7, #16]
 80090cc:	464d      	mov	r5, r9
 80090ce:	46ca      	mov	sl, r9
 80090d0:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 80090d4:	e792      	b.n	8008ffc <__ssvfscanf_r+0xa28>
 80090d6:	46c1      	mov	r9, r8
 80090d8:	4645      	mov	r5, r8
 80090da:	46c2      	mov	sl, r8
 80090dc:	e78e      	b.n	8008ffc <__ssvfscanf_r+0xa28>
 80090de:	6a3a      	ldr	r2, [r7, #32]
 80090e0:	3202      	adds	r2, #2
 80090e2:	d1c9      	bne.n	8009078 <__ssvfscanf_r+0xaa4>
 80090e4:	461a      	mov	r2, r3
 80090e6:	6863      	ldr	r3, [r4, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dc8a      	bgt.n	8009002 <__ssvfscanf_r+0xa2e>
 80090ec:	4621      	mov	r1, r4
 80090ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f0:	60fa      	str	r2, [r7, #12]
 80090f2:	f002 f978 	bl	800b3e6 <__ssrefill_r>
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d082      	beq.n	8009002 <__ssvfscanf_r+0xa2e>
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	f47f ab2c 	bne.w	800875a <__ssvfscanf_r+0x186>
 8009102:	e7c5      	b.n	8009090 <__ssvfscanf_r+0xabc>
 8009104:	3b01      	subs	r3, #1
 8009106:	f81b 1003 	ldrb.w	r1, [fp, r3]
 800910a:	4622      	mov	r2, r4
 800910c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800910e:	633b      	str	r3, [r7, #48]	; 0x30
 8009110:	f002 f92c 	bl	800b36c <_sungetc_r>
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	e7b9      	b.n	800908c <__ssvfscanf_r+0xab8>
 8009118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800911a:	4419      	add	r1, r3
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009120:	2b03      	cmp	r3, #3
 8009122:	d103      	bne.n	800912c <__ssvfscanf_r+0xb58>
 8009124:	f8db 3000 	ldr.w	r3, [fp]
 8009128:	2b04      	cmp	r3, #4
 800912a:	d002      	beq.n	8009132 <__ssvfscanf_r+0xb5e>
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	3b01      	subs	r3, #1
 8009130:	633b      	str	r3, [r7, #48]	; 0x30
 8009132:	f1b8 0f00 	cmp.w	r8, #0
 8009136:	d1d6      	bne.n	80090e6 <__ssvfscanf_r+0xb12>
 8009138:	3604      	adds	r6, #4
 800913a:	f1ba 0f00 	cmp.w	sl, #0
 800913e:	d015      	beq.n	800916c <__ssvfscanf_r+0xb98>
 8009140:	1b73      	subs	r3, r6, r5
 8009142:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8009146:	d80f      	bhi.n	8009168 <__ssvfscanf_r+0xb94>
 8009148:	4628      	mov	r0, r5
 800914a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	f000 febc 	bl	8009ecc <realloc>
 8009154:	4605      	mov	r5, r0
 8009156:	2800      	cmp	r0, #0
 8009158:	f43f abf7 	beq.w	800894a <__ssvfscanf_r+0x376>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8ca 0000 	str.w	r0, [sl]
 8009162:	18c6      	adds	r6, r0, r3
 8009164:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8009168:	4642      	mov	r2, r8
 800916a:	e7bc      	b.n	80090e6 <__ssvfscanf_r+0xb12>
 800916c:	4652      	mov	r2, sl
 800916e:	e7ba      	b.n	80090e6 <__ssvfscanf_r+0xb12>
 8009170:	f1b8 0f00 	cmp.w	r8, #0
 8009174:	d019      	beq.n	80091aa <__ssvfscanf_r+0xbd6>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	494b      	ldr	r1, [pc, #300]	; (80092a8 <__ssvfscanf_r+0xcd4>)
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	5c52      	ldrb	r2, [r2, r1]
 800917e:	0711      	lsls	r1, r2, #28
 8009180:	f53f ae66 	bmi.w	8008e50 <__ssvfscanf_r+0x87c>
 8009184:	3301      	adds	r3, #1
 8009186:	6862      	ldr	r2, [r4, #4]
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	3501      	adds	r5, #1
 800918e:	3a01      	subs	r2, #1
 8009190:	429d      	cmp	r5, r3
 8009192:	6062      	str	r2, [r4, #4]
 8009194:	f43f ae5c 	beq.w	8008e50 <__ssvfscanf_r+0x87c>
 8009198:	2a00      	cmp	r2, #0
 800919a:	dcec      	bgt.n	8009176 <__ssvfscanf_r+0xba2>
 800919c:	4621      	mov	r1, r4
 800919e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a0:	f002 f921 	bl	800b3e6 <__ssrefill_r>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d0e6      	beq.n	8009176 <__ssvfscanf_r+0xba2>
 80091a8:	e652      	b.n	8008e50 <__ssvfscanf_r+0x87c>
 80091aa:	46b3      	mov	fp, r6
 80091ac:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 80091b0:	f85b 6b04 	ldr.w	r6, [fp], #4
 80091b4:	d075      	beq.n	80092a2 <__ssvfscanf_r+0xcce>
 80091b6:	2e00      	cmp	r6, #0
 80091b8:	f43f ab03 	beq.w	80087c2 <__ssvfscanf_r+0x1ee>
 80091bc:	2020      	movs	r0, #32
 80091be:	f000 fbef 	bl	80099a0 <malloc>
 80091c2:	4680      	mov	r8, r0
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f43f aacd 	beq.w	8008764 <__ssvfscanf_r+0x190>
 80091ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091cc:	6030      	str	r0, [r6, #0]
 80091ce:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80091d2:	889d      	ldrh	r5, [r3, #4]
 80091d4:	45a9      	cmp	r9, r5
 80091d6:	d311      	bcc.n	80091fc <__ssvfscanf_r+0xc28>
 80091d8:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80091dc:	429d      	cmp	r5, r3
 80091de:	f63f abbc 	bhi.w	800895a <__ssvfscanf_r+0x386>
 80091e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e4:	3508      	adds	r5, #8
 80091e6:	b2ad      	uxth	r5, r5
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	00a9      	lsls	r1, r5, #2
 80091ec:	f000 fe6e 	bl	8009ecc <realloc>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	f43f abb2 	beq.w	800895a <__ssvfscanf_r+0x386>
 80091f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f8:	6018      	str	r0, [r3, #0]
 80091fa:	809d      	strh	r5, [r3, #4]
 80091fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fe:	f109 0201 	add.w	r2, r9, #1
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2520      	movs	r5, #32
 8009206:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800920a:	46b1      	mov	r9, r6
 800920c:	4646      	mov	r6, r8
 800920e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009210:	80ca      	strh	r2, [r1, #6]
 8009212:	46b0      	mov	r8, r6
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	4924      	ldr	r1, [pc, #144]	; (80092a8 <__ssvfscanf_r+0xcd4>)
 8009218:	781a      	ldrb	r2, [r3, #0]
 800921a:	5c52      	ldrb	r2, [r2, r1]
 800921c:	0712      	lsls	r2, r2, #28
 800921e:	d428      	bmi.n	8009272 <__ssvfscanf_r+0xc9e>
 8009220:	6862      	ldr	r2, [r4, #4]
 8009222:	3a01      	subs	r2, #1
 8009224:	6062      	str	r2, [r4, #4]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	6022      	str	r2, [r4, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f806 3b01 	strb.w	r3, [r6], #1
 8009230:	f1b9 0f00 	cmp.w	r9, #0
 8009234:	d010      	beq.n	8009258 <__ssvfscanf_r+0xc84>
 8009236:	eba6 0a08 	sub.w	sl, r6, r8
 800923a:	45aa      	cmp	sl, r5
 800923c:	d30c      	bcc.n	8009258 <__ssvfscanf_r+0xc84>
 800923e:	006d      	lsls	r5, r5, #1
 8009240:	4640      	mov	r0, r8
 8009242:	4629      	mov	r1, r5
 8009244:	f000 fe42 	bl	8009ecc <realloc>
 8009248:	4680      	mov	r8, r0
 800924a:	2800      	cmp	r0, #0
 800924c:	f43f aa8a 	beq.w	8008764 <__ssvfscanf_r+0x190>
 8009250:	eb00 060a 	add.w	r6, r0, sl
 8009254:	f8c9 0000 	str.w	r0, [r9]
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	3b01      	subs	r3, #1
 800925c:	633b      	str	r3, [r7, #48]	; 0x30
 800925e:	d008      	beq.n	8009272 <__ssvfscanf_r+0xc9e>
 8009260:	6863      	ldr	r3, [r4, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	dcd6      	bgt.n	8009214 <__ssvfscanf_r+0xc40>
 8009266:	4621      	mov	r1, r4
 8009268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926a:	f002 f8bc 	bl	800b3e6 <__ssrefill_r>
 800926e:	2800      	cmp	r0, #0
 8009270:	d0d0      	beq.n	8009214 <__ssvfscanf_r+0xc40>
 8009272:	2300      	movs	r3, #0
 8009274:	7033      	strb	r3, [r6, #0]
 8009276:	eba6 0608 	sub.w	r6, r6, r8
 800927a:	f1b9 0f00 	cmp.w	r9, #0
 800927e:	d009      	beq.n	8009294 <__ssvfscanf_r+0xcc0>
 8009280:	1c71      	adds	r1, r6, #1
 8009282:	428d      	cmp	r5, r1
 8009284:	d906      	bls.n	8009294 <__ssvfscanf_r+0xcc0>
 8009286:	f8d9 0000 	ldr.w	r0, [r9]
 800928a:	f000 fe1f 	bl	8009ecc <realloc>
 800928e:	b108      	cbz	r0, 8009294 <__ssvfscanf_r+0xcc0>
 8009290:	f8c9 0000 	str.w	r0, [r9]
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	4433      	add	r3, r6
 8009298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	3301      	adds	r3, #1
 800929e:	627b      	str	r3, [r7, #36]	; 0x24
 80092a0:	e65b      	b.n	8008f5a <__ssvfscanf_r+0x986>
 80092a2:	46a9      	mov	r9, r5
 80092a4:	e7b5      	b.n	8009212 <__ssvfscanf_r+0xc3e>
 80092a6:	bf00      	nop
 80092a8:	08034aed 	.word	0x08034aed
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	f04f 0a00 	mov.w	sl, #0
 80092b2:	3b01      	subs	r3, #1
 80092b4:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80092b8:	bf85      	ittet	hi
 80092ba:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 80092be:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 80092c0:	f04f 0b00 	movls.w	fp, #0
 80092c4:	eb03 0b00 	addhi.w	fp, r3, r0
 80092c8:	bf88      	it	hi
 80092ca:	f240 135d 	movwhi	r3, #349	; 0x15d
 80092ce:	f449 6558 	orr.w	r5, r9, #3456	; 0xd80
 80092d2:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8009464 <__ssvfscanf_r+0xe90>
 80092d6:	bf88      	it	hi
 80092d8:	633b      	strhi	r3, [r7, #48]	; 0x30
 80092da:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 80092de:	6822      	ldr	r2, [r4, #0]
 80092e0:	7813      	ldrb	r3, [r2, #0]
 80092e2:	2b39      	cmp	r3, #57	; 0x39
 80092e4:	d80f      	bhi.n	8009306 <__ssvfscanf_r+0xd32>
 80092e6:	2b2a      	cmp	r3, #42	; 0x2a
 80092e8:	d91a      	bls.n	8009320 <__ssvfscanf_r+0xd4c>
 80092ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80092ee:	290e      	cmp	r1, #14
 80092f0:	d816      	bhi.n	8009320 <__ssvfscanf_r+0xd4c>
 80092f2:	e8df f001 	tbb	[pc, r1]
 80092f6:	1573      	.short	0x1573
 80092f8:	3e151573 	.word	0x3e151573
 80092fc:	65656565 	.word	0x65656565
 8009300:	6c656565 	.word	0x6c656565
 8009304:	6c          	.byte	0x6c
 8009305:	00          	.byte	0x00
 8009306:	2b66      	cmp	r3, #102	; 0x66
 8009308:	d831      	bhi.n	800936e <__ssvfscanf_r+0xd9a>
 800930a:	2b60      	cmp	r3, #96	; 0x60
 800930c:	d803      	bhi.n	8009316 <__ssvfscanf_r+0xd42>
 800930e:	2b46      	cmp	r3, #70	; 0x46
 8009310:	d804      	bhi.n	800931c <__ssvfscanf_r+0xd48>
 8009312:	2b40      	cmp	r3, #64	; 0x40
 8009314:	d904      	bls.n	8009320 <__ssvfscanf_r+0xd4c>
 8009316:	69f9      	ldr	r1, [r7, #28]
 8009318:	290a      	cmp	r1, #10
 800931a:	e05d      	b.n	80093d8 <__ssvfscanf_r+0xe04>
 800931c:	2b58      	cmp	r3, #88	; 0x58
 800931e:	d062      	beq.n	80093e6 <__ssvfscanf_r+0xe12>
 8009320:	05e8      	lsls	r0, r5, #23
 8009322:	d511      	bpl.n	8009348 <__ssvfscanf_r+0xd74>
 8009324:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009328:	4598      	cmp	r8, r3
 800932a:	d908      	bls.n	800933e <__ssvfscanf_r+0xd6a>
 800932c:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8009330:	4622      	mov	r2, r4
 8009332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009334:	f108 39ff 	add.w	r9, r8, #4294967295
 8009338:	f002 f818 	bl	800b36c <_sungetc_r>
 800933c:	46c8      	mov	r8, r9
 800933e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009342:	4598      	cmp	r8, r3
 8009344:	f43f aa3d 	beq.w	80087c2 <__ssvfscanf_r+0x1ee>
 8009348:	f015 0210 	ands.w	r2, r5, #16
 800934c:	d166      	bne.n	800941c <__ssvfscanf_r+0xe48>
 800934e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009356:	f8d7 c014 	ldr.w	ip, [r7, #20]
 800935a:	f888 2000 	strb.w	r2, [r8]
 800935e:	47e0      	blx	ip
 8009360:	06a9      	lsls	r1, r5, #26
 8009362:	f106 0904 	add.w	r9, r6, #4
 8009366:	d551      	bpl.n	800940c <__ssvfscanf_r+0xe38>
 8009368:	6833      	ldr	r3, [r6, #0]
 800936a:	6018      	str	r0, [r3, #0]
 800936c:	e052      	b.n	8009414 <__ssvfscanf_r+0xe40>
 800936e:	2b78      	cmp	r3, #120	; 0x78
 8009370:	e7d5      	b.n	800931e <__ssvfscanf_r+0xd4a>
 8009372:	0529      	lsls	r1, r5, #20
 8009374:	d509      	bpl.n	800938a <__ssvfscanf_r+0xdb6>
 8009376:	69f9      	ldr	r1, [r7, #28]
 8009378:	b919      	cbnz	r1, 8009382 <__ssvfscanf_r+0xdae>
 800937a:	2108      	movs	r1, #8
 800937c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8009380:	61f9      	str	r1, [r7, #28]
 8009382:	0568      	lsls	r0, r5, #21
 8009384:	d504      	bpl.n	8009390 <__ssvfscanf_r+0xdbc>
 8009386:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
 800938a:	f808 3b01 	strb.w	r3, [r8], #1
 800938e:	e00b      	b.n	80093a8 <__ssvfscanf_r+0xdd4>
 8009390:	f425 7560 	bic.w	r5, r5, #896	; 0x380
 8009394:	f1bb 0f00 	cmp.w	fp, #0
 8009398:	d004      	beq.n	80093a4 <__ssvfscanf_r+0xdd0>
 800939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093a0:	3301      	adds	r3, #1
 80093a2:	633b      	str	r3, [r7, #48]	; 0x30
 80093a4:	f10a 0a01 	add.w	sl, sl, #1
 80093a8:	6863      	ldr	r3, [r4, #4]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	6063      	str	r3, [r4, #4]
 80093b0:	dd25      	ble.n	80093fe <__ssvfscanf_r+0xe2a>
 80093b2:	3201      	adds	r2, #1
 80093b4:	6022      	str	r2, [r4, #0]
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	3b01      	subs	r3, #1
 80093ba:	633b      	str	r3, [r7, #48]	; 0x30
 80093bc:	d18f      	bne.n	80092de <__ssvfscanf_r+0xd0a>
 80093be:	e7af      	b.n	8009320 <__ssvfscanf_r+0xd4c>
 80093c0:	69f9      	ldr	r1, [r7, #28]
 80093c2:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 80093c6:	61f9      	str	r1, [r7, #28]
 80093c8:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
 80093cc:	e7dd      	b.n	800938a <__ssvfscanf_r+0xdb6>
 80093ce:	69f9      	ldr	r1, [r7, #28]
 80093d0:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 80093d4:	61f9      	str	r1, [r7, #28]
 80093d6:	2908      	cmp	r1, #8
 80093d8:	dcf6      	bgt.n	80093c8 <__ssvfscanf_r+0xdf4>
 80093da:	e7a1      	b.n	8009320 <__ssvfscanf_r+0xd4c>
 80093dc:	0629      	lsls	r1, r5, #24
 80093de:	d59f      	bpl.n	8009320 <__ssvfscanf_r+0xd4c>
 80093e0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80093e4:	e7d1      	b.n	800938a <__ssvfscanf_r+0xdb6>
 80093e6:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
 80093ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80093ee:	d197      	bne.n	8009320 <__ssvfscanf_r+0xd4c>
 80093f0:	2110      	movs	r1, #16
 80093f2:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 80093f6:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
 80093fa:	61f9      	str	r1, [r7, #28]
 80093fc:	e7c5      	b.n	800938a <__ssvfscanf_r+0xdb6>
 80093fe:	4621      	mov	r1, r4
 8009400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009402:	f001 fff0 	bl	800b3e6 <__ssrefill_r>
 8009406:	2800      	cmp	r0, #0
 8009408:	d0d5      	beq.n	80093b6 <__ssvfscanf_r+0xde2>
 800940a:	e789      	b.n	8009320 <__ssvfscanf_r+0xd4c>
 800940c:	072a      	lsls	r2, r5, #28
 800940e:	d50e      	bpl.n	800942e <__ssvfscanf_r+0xe5a>
 8009410:	6833      	ldr	r3, [r6, #0]
 8009412:	7018      	strb	r0, [r3, #0]
 8009414:	464e      	mov	r6, r9
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	3301      	adds	r3, #1
 800941a:	627b      	str	r3, [r7, #36]	; 0x24
 800941c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009420:	eba8 0803 	sub.w	r8, r8, r3
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	44c2      	add	sl, r8
 8009428:	4453      	add	r3, sl
 800942a:	f7ff b98e 	b.w	800874a <__ssvfscanf_r+0x176>
 800942e:	076b      	lsls	r3, r5, #29
 8009430:	d502      	bpl.n	8009438 <__ssvfscanf_r+0xe64>
 8009432:	6833      	ldr	r3, [r6, #0]
 8009434:	8018      	strh	r0, [r3, #0]
 8009436:	e7ed      	b.n	8009414 <__ssvfscanf_r+0xe40>
 8009438:	f015 0201 	ands.w	r2, r5, #1
 800943c:	d194      	bne.n	8009368 <__ssvfscanf_r+0xd94>
 800943e:	07ad      	lsls	r5, r5, #30
 8009440:	d592      	bpl.n	8009368 <__ssvfscanf_r+0xd94>
 8009442:	4b09      	ldr	r3, [pc, #36]	; (8009468 <__ssvfscanf_r+0xe94>)
 8009444:	6979      	ldr	r1, [r7, #20]
 8009446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009448:	4299      	cmp	r1, r3
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8009450:	d105      	bne.n	800945e <__ssvfscanf_r+0xe8a>
 8009452:	f001 ff89 	bl	800b368 <_strtoull_r>
 8009456:	6833      	ldr	r3, [r6, #0]
 8009458:	e9c3 0100 	strd	r0, r1, [r3]
 800945c:	e7da      	b.n	8009414 <__ssvfscanf_r+0xe40>
 800945e:	f001 fe75 	bl	800b14c <_strtoll_r>
 8009462:	e7f8      	b.n	8009456 <__ssvfscanf_r+0xe82>
 8009464:	08034aca 	.word	0x08034aca
 8009468:	0800b235 	.word	0x0800b235
 800946c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946e:	f000 fa7d 	bl	800996c <_localeconv_r>
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	f04f 0b00 	mov.w	fp, #0
 8009478:	3b01      	subs	r3, #1
 800947a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800947e:	bf85      	ittet	hi
 8009480:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
 8009484:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8009486:	2300      	movls	r3, #0
 8009488:	185b      	addhi	r3, r3, r1
 800948a:	bf88      	it	hi
 800948c:	f240 115d 	movwhi	r1, #349	; 0x15d
 8009490:	46da      	mov	sl, fp
 8009492:	e9c7 bb02 	strd	fp, fp, [r7, #8]
 8009496:	6802      	ldr	r2, [r0, #0]
 8009498:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 800949c:	bf88      	it	hi
 800949e:	6339      	strhi	r1, [r7, #48]	; 0x30
 80094a0:	f8c7 b010 	str.w	fp, [r7, #16]
 80094a4:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 80094a8:	6821      	ldr	r1, [r4, #0]
 80094aa:	7808      	ldrb	r0, [r1, #0]
 80094ac:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
 80094b0:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 80094b4:	f200 8125 	bhi.w	8009702 <__ssvfscanf_r+0x112e>
 80094b8:	e8df f01c 	tbh	[pc, ip, lsl #1]
 80094bc:	0123008b 	.word	0x0123008b
 80094c0:	0123008b 	.word	0x0123008b
 80094c4:	004f0123 	.word	0x004f0123
 80094c8:	00700070 	.word	0x00700070
 80094cc:	00700070 	.word	0x00700070
 80094d0:	00700070 	.word	0x00700070
 80094d4:	00700070 	.word	0x00700070
 80094d8:	01230070 	.word	0x01230070
 80094dc:	01230123 	.word	0x01230123
 80094e0:	01230123 	.word	0x01230123
 80094e4:	01230123 	.word	0x01230123
 80094e8:	006d00b2 	.word	0x006d00b2
 80094ec:	006d006d 	.word	0x006d006d
 80094f0:	00ea011f 	.word	0x00ea011f
 80094f4:	01230123 	.word	0x01230123
 80094f8:	012300d4 	.word	0x012300d4
 80094fc:	01230123 	.word	0x01230123
 8009500:	00930123 	.word	0x00930123
 8009504:	01020123 	.word	0x01020123
 8009508:	01230123 	.word	0x01230123
 800950c:	00f60123 	.word	0x00f60123
 8009510:	01230123 	.word	0x01230123
 8009514:	00740123 	.word	0x00740123
 8009518:	012300fc 	.word	0x012300fc
 800951c:	01230123 	.word	0x01230123
 8009520:	01230123 	.word	0x01230123
 8009524:	01230123 	.word	0x01230123
 8009528:	006d00b2 	.word	0x006d00b2
 800952c:	006d006d 	.word	0x006d006d
 8009530:	00ea011f 	.word	0x00ea011f
 8009534:	01230123 	.word	0x01230123
 8009538:	012300d4 	.word	0x012300d4
 800953c:	01230123 	.word	0x01230123
 8009540:	00930123 	.word	0x00930123
 8009544:	01020123 	.word	0x01020123
 8009548:	01230123 	.word	0x01230123
 800954c:	00f60123 	.word	0x00f60123
 8009550:	01230123 	.word	0x01230123
 8009554:	00740123 	.word	0x00740123
 8009558:	00fc      	.short	0x00fc
 800955a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800955e:	d01d      	beq.n	800959c <__ssvfscanf_r+0xfc8>
 8009560:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8009564:	f10a 0a01 	add.w	sl, sl, #1
 8009568:	b11b      	cbz	r3, 8009572 <__ssvfscanf_r+0xf9e>
 800956a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800956c:	3b01      	subs	r3, #1
 800956e:	3001      	adds	r0, #1
 8009570:	6338      	str	r0, [r7, #48]	; 0x30
 8009572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009574:	3801      	subs	r0, #1
 8009576:	6338      	str	r0, [r7, #48]	; 0x30
 8009578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800957a:	3001      	adds	r0, #1
 800957c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800957e:	6860      	ldr	r0, [r4, #4]
 8009580:	3801      	subs	r0, #1
 8009582:	2800      	cmp	r0, #0
 8009584:	6060      	str	r0, [r4, #4]
 8009586:	f340 80ce 	ble.w	8009726 <__ssvfscanf_r+0x1152>
 800958a:	3101      	adds	r1, #1
 800958c:	6021      	str	r1, [r4, #0]
 800958e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009590:	2900      	cmp	r1, #0
 8009592:	d189      	bne.n	80094a8 <__ssvfscanf_r+0xed4>
 8009594:	e050      	b.n	8009638 <__ssvfscanf_r+0x1064>
 8009596:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800959a:	d04d      	beq.n	8009638 <__ssvfscanf_r+0x1064>
 800959c:	eb1b 0f08 	cmn.w	fp, r8
 80095a0:	d044      	beq.n	800962c <__ssvfscanf_r+0x1058>
 80095a2:	e049      	b.n	8009638 <__ssvfscanf_r+0x1064>
 80095a4:	f405 6c18 	and.w	ip, r5, #2432	; 0x980
 80095a8:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80095ac:	d144      	bne.n	8009638 <__ssvfscanf_r+0x1064>
 80095ae:	f1ba 0f01 	cmp.w	sl, #1
 80095b2:	d141      	bne.n	8009638 <__ssvfscanf_r+0x1064>
 80095b4:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80095b8:	f809 cb01 	strb.w	ip, [r9], #1
 80095bc:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 80095c0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80095c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095c8:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 80095cc:	f04f 0a00 	mov.w	sl, #0
 80095d0:	e004      	b.n	80095dc <__ssvfscanf_r+0x1008>
 80095d2:	f015 0f80 	tst.w	r5, #128	; 0x80
 80095d6:	d02f      	beq.n	8009638 <__ssvfscanf_r+0x1064>
 80095d8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80095dc:	f809 0b01 	strb.w	r0, [r9], #1
 80095e0:	e7c7      	b.n	8009572 <__ssvfscanf_r+0xf9e>
 80095e2:	f1bb 0f00 	cmp.w	fp, #0
 80095e6:	d10c      	bne.n	8009602 <__ssvfscanf_r+0x102e>
 80095e8:	f1ba 0f00 	cmp.w	sl, #0
 80095ec:	d10d      	bne.n	800960a <__ssvfscanf_r+0x1036>
 80095ee:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 80095f2:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80095f6:	d108      	bne.n	800960a <__ssvfscanf_r+0x1036>
 80095f8:	f04f 0b01 	mov.w	fp, #1
 80095fc:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8009600:	e7ec      	b.n	80095dc <__ssvfscanf_r+0x1008>
 8009602:	f1bb 0f02 	cmp.w	fp, #2
 8009606:	f000 8088 	beq.w	800971a <__ssvfscanf_r+0x1146>
 800960a:	f1b8 0f01 	cmp.w	r8, #1
 800960e:	d002      	beq.n	8009616 <__ssvfscanf_r+0x1042>
 8009610:	f1b8 0f04 	cmp.w	r8, #4
 8009614:	d110      	bne.n	8009638 <__ssvfscanf_r+0x1064>
 8009616:	f108 0801 	add.w	r8, r8, #1
 800961a:	fa5f f888 	uxtb.w	r8, r8
 800961e:	e7dd      	b.n	80095dc <__ssvfscanf_r+0x1008>
 8009620:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8009624:	d005      	beq.n	8009632 <__ssvfscanf_r+0x105e>
 8009626:	eb1b 0f08 	cmn.w	fp, r8
 800962a:	d102      	bne.n	8009632 <__ssvfscanf_r+0x105e>
 800962c:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 8009630:	e7d4      	b.n	80095dc <__ssvfscanf_r+0x1008>
 8009632:	f1bb 0f01 	cmp.w	fp, #1
 8009636:	d073      	beq.n	8009720 <__ssvfscanf_r+0x114c>
 8009638:	f1ba 0f00 	cmp.w	sl, #0
 800963c:	d001      	beq.n	8009642 <__ssvfscanf_r+0x106e>
 800963e:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8009642:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009646:	f1bb 0f01 	cmp.w	fp, #1
 800964a:	d878      	bhi.n	800973e <__ssvfscanf_r+0x116a>
 800964c:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8009650:	45a9      	cmp	r9, r5
 8009652:	f67f a8b6 	bls.w	80087c2 <__ssvfscanf_r+0x1ee>
 8009656:	4622      	mov	r2, r4
 8009658:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800965c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965e:	f001 fe85 	bl	800b36c <_sungetc_r>
 8009662:	e7f5      	b.n	8009650 <__ssvfscanf_r+0x107c>
 8009664:	f1b8 0f00 	cmp.w	r8, #0
 8009668:	d10c      	bne.n	8009684 <__ssvfscanf_r+0x10b0>
 800966a:	f1ba 0f00 	cmp.w	sl, #0
 800966e:	d1e6      	bne.n	800963e <__ssvfscanf_r+0x106a>
 8009670:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 8009674:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8009678:	d1e3      	bne.n	8009642 <__ssvfscanf_r+0x106e>
 800967a:	f04f 0801 	mov.w	r8, #1
 800967e:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8009682:	e7ab      	b.n	80095dc <__ssvfscanf_r+0x1008>
 8009684:	f1b8 0f03 	cmp.w	r8, #3
 8009688:	d0c5      	beq.n	8009616 <__ssvfscanf_r+0x1042>
 800968a:	f1b8 0f05 	cmp.w	r8, #5
 800968e:	e7c1      	b.n	8009614 <__ssvfscanf_r+0x1040>
 8009690:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8009694:	d002      	beq.n	800969c <__ssvfscanf_r+0x10c8>
 8009696:	eb1b 0f08 	cmn.w	fp, r8
 800969a:	d0c7      	beq.n	800962c <__ssvfscanf_r+0x1058>
 800969c:	f1b8 0f02 	cmp.w	r8, #2
 80096a0:	d1ca      	bne.n	8009638 <__ssvfscanf_r+0x1064>
 80096a2:	f04f 0803 	mov.w	r8, #3
 80096a6:	e799      	b.n	80095dc <__ssvfscanf_r+0x1008>
 80096a8:	f1b8 0f06 	cmp.w	r8, #6
 80096ac:	d1c4      	bne.n	8009638 <__ssvfscanf_r+0x1064>
 80096ae:	f04f 0807 	mov.w	r8, #7
 80096b2:	e793      	b.n	80095dc <__ssvfscanf_r+0x1008>
 80096b4:	f1b8 0f07 	cmp.w	r8, #7
 80096b8:	d1be      	bne.n	8009638 <__ssvfscanf_r+0x1064>
 80096ba:	f04f 0808 	mov.w	r8, #8
 80096be:	e78d      	b.n	80095dc <__ssvfscanf_r+0x1008>
 80096c0:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80096c4:	d0b8      	beq.n	8009638 <__ssvfscanf_r+0x1064>
 80096c6:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 80096ca:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80096ce:	d005      	beq.n	80096dc <__ssvfscanf_r+0x1108>
 80096d0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80096d4:	d0b0      	beq.n	8009638 <__ssvfscanf_r+0x1064>
 80096d6:	f1ba 0f00 	cmp.w	sl, #0
 80096da:	d0b2      	beq.n	8009642 <__ssvfscanf_r+0x106e>
 80096dc:	f415 7f00 	tst.w	r5, #512	; 0x200
 80096e0:	bf08      	it	eq
 80096e2:	f8d7 c010 	ldreq.w	ip, [r7, #16]
 80096e6:	f425 6578 	bic.w	r5, r5, #3968	; 0xf80
 80096ea:	bf04      	itt	eq
 80096ec:	ebaa 0c0c 	subeq.w	ip, sl, ip
 80096f0:	e9c7 9c02 	strdeq	r9, ip, [r7, #8]
 80096f4:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 80096f8:	e768      	b.n	80095cc <__ssvfscanf_r+0xff8>
 80096fa:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80096fe:	d0e2      	beq.n	80096c6 <__ssvfscanf_r+0x10f2>
 8009700:	e74c      	b.n	800959c <__ssvfscanf_r+0xfc8>
 8009702:	f892 c000 	ldrb.w	ip, [r2]
 8009706:	4584      	cmp	ip, r0
 8009708:	d196      	bne.n	8009638 <__ssvfscanf_r+0x1064>
 800970a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800970e:	d093      	beq.n	8009638 <__ssvfscanf_r+0x1064>
 8009710:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 8009714:	f8c7 a010 	str.w	sl, [r7, #16]
 8009718:	e760      	b.n	80095dc <__ssvfscanf_r+0x1008>
 800971a:	f04f 0b03 	mov.w	fp, #3
 800971e:	e75d      	b.n	80095dc <__ssvfscanf_r+0x1008>
 8009720:	f04f 0b02 	mov.w	fp, #2
 8009724:	e75a      	b.n	80095dc <__ssvfscanf_r+0x1008>
 8009726:	4621      	mov	r1, r4
 8009728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800972a:	e9c7 2300 	strd	r2, r3, [r7]
 800972e:	f001 fe5a 	bl	800b3e6 <__ssrefill_r>
 8009732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009736:	2800      	cmp	r0, #0
 8009738:	f43f af29 	beq.w	800958e <__ssvfscanf_r+0xfba>
 800973c:	e77c      	b.n	8009638 <__ssvfscanf_r+0x1064>
 800973e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009742:	2b06      	cmp	r3, #6
 8009744:	d827      	bhi.n	8009796 <__ssvfscanf_r+0x11c2>
 8009746:	f1b8 0f02 	cmp.w	r8, #2
 800974a:	d834      	bhi.n	80097b6 <__ssvfscanf_r+0x11e2>
 800974c:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8009750:	45a9      	cmp	r9, r5
 8009752:	f67f a836 	bls.w	80087c2 <__ssvfscanf_r+0x1ee>
 8009756:	4622      	mov	r2, r4
 8009758:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800975c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975e:	f001 fe05 	bl	800b36c <_sungetc_r>
 8009762:	e7f5      	b.n	8009750 <__ssvfscanf_r+0x117c>
 8009764:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009768:	4622      	mov	r2, r4
 800976a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800976c:	633b      	str	r3, [r7, #48]	; 0x30
 800976e:	f001 fdfd 	bl	800b36c <_sungetc_r>
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009778:	fa5f fb8b 	uxtb.w	fp, fp
 800977c:	f1bb 0f02 	cmp.w	fp, #2
 8009780:	d1f0      	bne.n	8009764 <__ssvfscanf_r+0x1190>
 8009782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009784:	f1a8 0803 	sub.w	r8, r8, #3
 8009788:	fa5f f888 	uxtb.w	r8, r8
 800978c:	eba3 0308 	sub.w	r3, r3, r8
 8009790:	eba9 0908 	sub.w	r9, r9, r8
 8009794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009796:	05e9      	lsls	r1, r5, #23
 8009798:	d52d      	bpl.n	80097f6 <__ssvfscanf_r+0x1222>
 800979a:	056a      	lsls	r2, r5, #21
 800979c:	d50e      	bpl.n	80097bc <__ssvfscanf_r+0x11e8>
 800979e:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 80097a2:	45a9      	cmp	r9, r5
 80097a4:	f67f a80d 	bls.w	80087c2 <__ssvfscanf_r+0x1ee>
 80097a8:	4622      	mov	r2, r4
 80097aa:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80097ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097b0:	f001 fddc 	bl	800b36c <_sungetc_r>
 80097b4:	e7f5      	b.n	80097a2 <__ssvfscanf_r+0x11ce>
 80097b6:	46c3      	mov	fp, r8
 80097b8:	464b      	mov	r3, r9
 80097ba:	e7db      	b.n	8009774 <__ssvfscanf_r+0x11a0>
 80097bc:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	2965      	cmp	r1, #101	; 0x65
 80097c4:	f109 38ff 	add.w	r8, r9, #4294967295
 80097c8:	f103 3bff 	add.w	fp, r3, #4294967295
 80097cc:	d00c      	beq.n	80097e8 <__ssvfscanf_r+0x1214>
 80097ce:	2945      	cmp	r1, #69	; 0x45
 80097d0:	d00a      	beq.n	80097e8 <__ssvfscanf_r+0x1214>
 80097d2:	4622      	mov	r2, r4
 80097d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d6:	f001 fdc9 	bl	800b36c <_sungetc_r>
 80097da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097dc:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80097e0:	f1a9 0802 	sub.w	r8, r9, #2
 80097e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80097e8:	46c1      	mov	r9, r8
 80097ea:	4622      	mov	r2, r4
 80097ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ee:	f001 fdbd 	bl	800b36c <_sungetc_r>
 80097f2:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80097f6:	f015 0210 	ands.w	r2, r5, #16
 80097fa:	f47e af06 	bne.w	800860a <__ssvfscanf_r+0x36>
 80097fe:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 8009802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009806:	f889 2000 	strb.w	r2, [r9]
 800980a:	d119      	bne.n	8009840 <__ssvfscanf_r+0x126c>
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	4553      	cmp	r3, sl
 8009810:	eba3 020a 	sub.w	r2, r3, sl
 8009814:	d121      	bne.n	800985a <__ssvfscanf_r+0x1286>
 8009816:	2200      	movs	r2, #0
 8009818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800981a:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800981e:	f001 fb7b 	bl	800af18 <_strtod_r>
 8009822:	07eb      	lsls	r3, r5, #31
 8009824:	4680      	mov	r8, r0
 8009826:	4689      	mov	r9, r1
 8009828:	f106 0a04 	add.w	sl, r6, #4
 800982c:	d520      	bpl.n	8009870 <__ssvfscanf_r+0x129c>
 800982e:	6833      	ldr	r3, [r6, #0]
 8009830:	e9c3 8900 	strd	r8, r9, [r3]
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	4656      	mov	r6, sl
 8009838:	3301      	adds	r3, #1
 800983a:	627b      	str	r3, [r7, #36]	; 0x24
 800983c:	f7fe bee5 	b.w	800860a <__ssvfscanf_r+0x36>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0e7      	beq.n	8009816 <__ssvfscanf_r+0x1242>
 8009846:	68b9      	ldr	r1, [r7, #8]
 8009848:	230a      	movs	r3, #10
 800984a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984c:	3101      	adds	r1, #1
 800984e:	f001 fbe5 	bl	800b01c <_strtol_r>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8009858:	1ac2      	subs	r2, r0, r3
 800985a:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 800985e:	4599      	cmp	r9, r3
 8009860:	bf28      	it	cs
 8009862:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 8009866:	4648      	mov	r0, r9
 8009868:	4911      	ldr	r1, [pc, #68]	; (80098b0 <__ssvfscanf_r+0x12dc>)
 800986a:	f000 fd2b 	bl	800a2c4 <sprintf>
 800986e:	e7d2      	b.n	8009816 <__ssvfscanf_r+0x1242>
 8009870:	07aa      	lsls	r2, r5, #30
 8009872:	6836      	ldr	r6, [r6, #0]
 8009874:	d502      	bpl.n	800987c <__ssvfscanf_r+0x12a8>
 8009876:	e9c6 8900 	strd	r8, r9, [r6]
 800987a:	e7db      	b.n	8009834 <__ssvfscanf_r+0x1260>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	f7f7 f930 	bl	8000ae4 <__aeabi_dcmpun>
 8009884:	b120      	cbz	r0, 8009890 <__ssvfscanf_r+0x12bc>
 8009886:	480b      	ldr	r0, [pc, #44]	; (80098b4 <__ssvfscanf_r+0x12e0>)
 8009888:	f000 fd18 	bl	800a2bc <nanf>
 800988c:	6030      	str	r0, [r6, #0]
 800988e:	e7d1      	b.n	8009834 <__ssvfscanf_r+0x1260>
 8009890:	4640      	mov	r0, r8
 8009892:	4649      	mov	r1, r9
 8009894:	f7f7 f984 	bl	8000ba0 <__aeabi_d2f>
 8009898:	e7f8      	b.n	800988c <__ssvfscanf_r+0x12b8>
 800989a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	f000 f886 	bl	80099b0 <free>
 80098a4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80098a8:	3401      	adds	r4, #1
 80098aa:	601e      	str	r6, [r3, #0]
 80098ac:	f7ff b857 	b.w	800895e <__ssvfscanf_r+0x38a>
 80098b0:	08034ac4 	.word	0x08034ac4
 80098b4:	08034f17 	.word	0x08034f17

080098b8 <_write_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4604      	mov	r4, r0
 80098bc:	4608      	mov	r0, r1
 80098be:	4611      	mov	r1, r2
 80098c0:	2200      	movs	r2, #0
 80098c2:	4d05      	ldr	r5, [pc, #20]	; (80098d8 <_write_r+0x20>)
 80098c4:	602a      	str	r2, [r5, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	f7fb fb88 	bl	8004fdc <_write>
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	d102      	bne.n	80098d6 <_write_r+0x1e>
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	b103      	cbz	r3, 80098d6 <_write_r+0x1e>
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	bd38      	pop	{r3, r4, r5, pc}
 80098d8:	20000bfc 	.word	0x20000bfc

080098dc <register_fini>:
 80098dc:	4b02      	ldr	r3, [pc, #8]	; (80098e8 <register_fini+0xc>)
 80098de:	b113      	cbz	r3, 80098e6 <register_fini+0xa>
 80098e0:	4802      	ldr	r0, [pc, #8]	; (80098ec <register_fini+0x10>)
 80098e2:	f000 b805 	b.w	80098f0 <atexit>
 80098e6:	4770      	bx	lr
 80098e8:	00000000 	.word	0x00000000
 80098ec:	0800991d 	.word	0x0800991d

080098f0 <atexit>:
 80098f0:	2300      	movs	r3, #0
 80098f2:	4601      	mov	r1, r0
 80098f4:	461a      	mov	r2, r3
 80098f6:	4618      	mov	r0, r3
 80098f8:	f002 bff0 	b.w	800c8dc <__register_exitproc>

080098fc <_close_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	2300      	movs	r3, #0
 8009900:	4d05      	ldr	r5, [pc, #20]	; (8009918 <_close_r+0x1c>)
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	602b      	str	r3, [r5, #0]
 8009908:	f7fb fb84 	bl	8005014 <_close>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_close_r+0x1a>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_close_r+0x1a>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	20000bfc 	.word	0x20000bfc

0800991c <__libc_fini_array>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d07      	ldr	r5, [pc, #28]	; (800993c <__libc_fini_array+0x20>)
 8009920:	4c07      	ldr	r4, [pc, #28]	; (8009940 <__libc_fini_array+0x24>)
 8009922:	1b64      	subs	r4, r4, r5
 8009924:	10a4      	asrs	r4, r4, #2
 8009926:	b91c      	cbnz	r4, 8009930 <__libc_fini_array+0x14>
 8009928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800992c:	f007 bad4 	b.w	8010ed8 <_fini>
 8009930:	3c01      	subs	r4, #1
 8009932:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009936:	4798      	blx	r3
 8009938:	e7f5      	b.n	8009926 <__libc_fini_array+0xa>
 800993a:	bf00      	nop
 800993c:	08035120 	.word	0x08035120
 8009940:	08035124 	.word	0x08035124

08009944 <iswspace>:
 8009944:	2100      	movs	r1, #0
 8009946:	f000 b801 	b.w	800994c <iswspace_l>
	...

0800994c <iswspace_l>:
 800994c:	28ff      	cmp	r0, #255	; 0xff
 800994e:	bf9d      	ittte	ls
 8009950:	4b02      	ldrls	r3, [pc, #8]	; (800995c <iswspace_l+0x10>)
 8009952:	5cc0      	ldrbls	r0, [r0, r3]
 8009954:	f000 0008 	andls.w	r0, r0, #8
 8009958:	2000      	movhi	r0, #0
 800995a:	4770      	bx	lr
 800995c:	08034aed 	.word	0x08034aed

08009960 <__locale_mb_cur_max>:
 8009960:	4b01      	ldr	r3, [pc, #4]	; (8009968 <__locale_mb_cur_max+0x8>)
 8009962:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009966:	4770      	bx	lr
 8009968:	2000047c 	.word	0x2000047c

0800996c <_localeconv_r>:
 800996c:	4800      	ldr	r0, [pc, #0]	; (8009970 <_localeconv_r+0x4>)
 800996e:	4770      	bx	lr
 8009970:	2000056c 	.word	0x2000056c

08009974 <__retarget_lock_init_recursive>:
 8009974:	4770      	bx	lr

08009976 <__retarget_lock_close_recursive>:
 8009976:	4770      	bx	lr

08009978 <__retarget_lock_acquire_recursive>:
 8009978:	4770      	bx	lr

0800997a <__retarget_lock_release_recursive>:
 800997a:	4770      	bx	lr

0800997c <_lseek_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4604      	mov	r4, r0
 8009980:	4608      	mov	r0, r1
 8009982:	4611      	mov	r1, r2
 8009984:	2200      	movs	r2, #0
 8009986:	4d05      	ldr	r5, [pc, #20]	; (800999c <_lseek_r+0x20>)
 8009988:	602a      	str	r2, [r5, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	f7fb fb66 	bl	800505c <_lseek>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_lseek_r+0x1e>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_lseek_r+0x1e>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	20000bfc 	.word	0x20000bfc

080099a0 <malloc>:
 80099a0:	4b02      	ldr	r3, [pc, #8]	; (80099ac <malloc+0xc>)
 80099a2:	4601      	mov	r1, r0
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	f000 b80b 	b.w	80099c0 <_malloc_r>
 80099aa:	bf00      	nop
 80099ac:	20000048 	.word	0x20000048

080099b0 <free>:
 80099b0:	4b02      	ldr	r3, [pc, #8]	; (80099bc <free+0xc>)
 80099b2:	4601      	mov	r1, r0
 80099b4:	6818      	ldr	r0, [r3, #0]
 80099b6:	f003 bf85 	b.w	800d8c4 <_free_r>
 80099ba:	bf00      	nop
 80099bc:	20000048 	.word	0x20000048

080099c0 <_malloc_r>:
 80099c0:	f101 030b 	add.w	r3, r1, #11
 80099c4:	2b16      	cmp	r3, #22
 80099c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ca:	4605      	mov	r5, r0
 80099cc:	d906      	bls.n	80099dc <_malloc_r+0x1c>
 80099ce:	f033 0707 	bics.w	r7, r3, #7
 80099d2:	d504      	bpl.n	80099de <_malloc_r+0x1e>
 80099d4:	230c      	movs	r3, #12
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	2400      	movs	r4, #0
 80099da:	e1a3      	b.n	8009d24 <_malloc_r+0x364>
 80099dc:	2710      	movs	r7, #16
 80099de:	42b9      	cmp	r1, r7
 80099e0:	d8f8      	bhi.n	80099d4 <_malloc_r+0x14>
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 fa54 	bl	8009e90 <__malloc_lock>
 80099e8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80099ec:	4eaf      	ldr	r6, [pc, #700]	; (8009cac <_malloc_r+0x2ec>)
 80099ee:	d237      	bcs.n	8009a60 <_malloc_r+0xa0>
 80099f0:	f107 0208 	add.w	r2, r7, #8
 80099f4:	4432      	add	r2, r6
 80099f6:	6854      	ldr	r4, [r2, #4]
 80099f8:	f1a2 0108 	sub.w	r1, r2, #8
 80099fc:	428c      	cmp	r4, r1
 80099fe:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8009a02:	d102      	bne.n	8009a0a <_malloc_r+0x4a>
 8009a04:	68d4      	ldr	r4, [r2, #12]
 8009a06:	42a2      	cmp	r2, r4
 8009a08:	d010      	beq.n	8009a2c <_malloc_r+0x6c>
 8009a0a:	6863      	ldr	r3, [r4, #4]
 8009a0c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009a10:	f023 0303 	bic.w	r3, r3, #3
 8009a14:	60ca      	str	r2, [r1, #12]
 8009a16:	4423      	add	r3, r4
 8009a18:	6091      	str	r1, [r2, #8]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	f042 0201 	orr.w	r2, r2, #1
 8009a20:	605a      	str	r2, [r3, #4]
 8009a22:	4628      	mov	r0, r5
 8009a24:	f000 fa3a 	bl	8009e9c <__malloc_unlock>
 8009a28:	3408      	adds	r4, #8
 8009a2a:	e17b      	b.n	8009d24 <_malloc_r+0x364>
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	6934      	ldr	r4, [r6, #16]
 8009a30:	499f      	ldr	r1, [pc, #636]	; (8009cb0 <_malloc_r+0x2f0>)
 8009a32:	428c      	cmp	r4, r1
 8009a34:	d077      	beq.n	8009b26 <_malloc_r+0x166>
 8009a36:	6862      	ldr	r2, [r4, #4]
 8009a38:	f022 0c03 	bic.w	ip, r2, #3
 8009a3c:	ebac 0007 	sub.w	r0, ip, r7
 8009a40:	280f      	cmp	r0, #15
 8009a42:	dd48      	ble.n	8009ad6 <_malloc_r+0x116>
 8009a44:	19e2      	adds	r2, r4, r7
 8009a46:	f040 0301 	orr.w	r3, r0, #1
 8009a4a:	f047 0701 	orr.w	r7, r7, #1
 8009a4e:	6067      	str	r7, [r4, #4]
 8009a50:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009a54:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009a58:	6053      	str	r3, [r2, #4]
 8009a5a:	f844 000c 	str.w	r0, [r4, ip]
 8009a5e:	e7e0      	b.n	8009a22 <_malloc_r+0x62>
 8009a60:	0a7b      	lsrs	r3, r7, #9
 8009a62:	d02a      	beq.n	8009aba <_malloc_r+0xfa>
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	d812      	bhi.n	8009a8e <_malloc_r+0xce>
 8009a68:	09bb      	lsrs	r3, r7, #6
 8009a6a:	3338      	adds	r3, #56	; 0x38
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8009a72:	6854      	ldr	r4, [r2, #4]
 8009a74:	f1a2 0c08 	sub.w	ip, r2, #8
 8009a78:	4564      	cmp	r4, ip
 8009a7a:	d006      	beq.n	8009a8a <_malloc_r+0xca>
 8009a7c:	6862      	ldr	r2, [r4, #4]
 8009a7e:	f022 0203 	bic.w	r2, r2, #3
 8009a82:	1bd0      	subs	r0, r2, r7
 8009a84:	280f      	cmp	r0, #15
 8009a86:	dd1c      	ble.n	8009ac2 <_malloc_r+0x102>
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	e7cf      	b.n	8009a2e <_malloc_r+0x6e>
 8009a8e:	2b14      	cmp	r3, #20
 8009a90:	d801      	bhi.n	8009a96 <_malloc_r+0xd6>
 8009a92:	335b      	adds	r3, #91	; 0x5b
 8009a94:	e7ea      	b.n	8009a6c <_malloc_r+0xac>
 8009a96:	2b54      	cmp	r3, #84	; 0x54
 8009a98:	d802      	bhi.n	8009aa0 <_malloc_r+0xe0>
 8009a9a:	0b3b      	lsrs	r3, r7, #12
 8009a9c:	336e      	adds	r3, #110	; 0x6e
 8009a9e:	e7e5      	b.n	8009a6c <_malloc_r+0xac>
 8009aa0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009aa4:	d802      	bhi.n	8009aac <_malloc_r+0xec>
 8009aa6:	0bfb      	lsrs	r3, r7, #15
 8009aa8:	3377      	adds	r3, #119	; 0x77
 8009aaa:	e7df      	b.n	8009a6c <_malloc_r+0xac>
 8009aac:	f240 5254 	movw	r2, #1364	; 0x554
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d804      	bhi.n	8009abe <_malloc_r+0xfe>
 8009ab4:	0cbb      	lsrs	r3, r7, #18
 8009ab6:	337c      	adds	r3, #124	; 0x7c
 8009ab8:	e7d8      	b.n	8009a6c <_malloc_r+0xac>
 8009aba:	233f      	movs	r3, #63	; 0x3f
 8009abc:	e7d6      	b.n	8009a6c <_malloc_r+0xac>
 8009abe:	237e      	movs	r3, #126	; 0x7e
 8009ac0:	e7d4      	b.n	8009a6c <_malloc_r+0xac>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	68e1      	ldr	r1, [r4, #12]
 8009ac6:	db04      	blt.n	8009ad2 <_malloc_r+0x112>
 8009ac8:	68a3      	ldr	r3, [r4, #8]
 8009aca:	60d9      	str	r1, [r3, #12]
 8009acc:	608b      	str	r3, [r1, #8]
 8009ace:	18a3      	adds	r3, r4, r2
 8009ad0:	e7a3      	b.n	8009a1a <_malloc_r+0x5a>
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	e7d0      	b.n	8009a78 <_malloc_r+0xb8>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8009adc:	db07      	blt.n	8009aee <_malloc_r+0x12e>
 8009ade:	44a4      	add	ip, r4
 8009ae0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009ae4:	f043 0301 	orr.w	r3, r3, #1
 8009ae8:	f8cc 3004 	str.w	r3, [ip, #4]
 8009aec:	e799      	b.n	8009a22 <_malloc_r+0x62>
 8009aee:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009af2:	6870      	ldr	r0, [r6, #4]
 8009af4:	f080 8094 	bcs.w	8009c20 <_malloc_r+0x260>
 8009af8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009afc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009b00:	f04f 0c01 	mov.w	ip, #1
 8009b04:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009b08:	ea4c 0000 	orr.w	r0, ip, r0
 8009b0c:	3201      	adds	r2, #1
 8009b0e:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8009b12:	6070      	str	r0, [r6, #4]
 8009b14:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009b18:	3808      	subs	r0, #8
 8009b1a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009b1e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8009b22:	f8cc 400c 	str.w	r4, [ip, #12]
 8009b26:	2001      	movs	r0, #1
 8009b28:	109a      	asrs	r2, r3, #2
 8009b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8009b2e:	6870      	ldr	r0, [r6, #4]
 8009b30:	4290      	cmp	r0, r2
 8009b32:	d326      	bcc.n	8009b82 <_malloc_r+0x1c2>
 8009b34:	4210      	tst	r0, r2
 8009b36:	d106      	bne.n	8009b46 <_malloc_r+0x186>
 8009b38:	f023 0303 	bic.w	r3, r3, #3
 8009b3c:	0052      	lsls	r2, r2, #1
 8009b3e:	4210      	tst	r0, r2
 8009b40:	f103 0304 	add.w	r3, r3, #4
 8009b44:	d0fa      	beq.n	8009b3c <_malloc_r+0x17c>
 8009b46:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8009b4a:	46c1      	mov	r9, r8
 8009b4c:	469e      	mov	lr, r3
 8009b4e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009b52:	454c      	cmp	r4, r9
 8009b54:	f040 80b8 	bne.w	8009cc8 <_malloc_r+0x308>
 8009b58:	f10e 0e01 	add.w	lr, lr, #1
 8009b5c:	f01e 0f03 	tst.w	lr, #3
 8009b60:	f109 0908 	add.w	r9, r9, #8
 8009b64:	d1f3      	bne.n	8009b4e <_malloc_r+0x18e>
 8009b66:	0798      	lsls	r0, r3, #30
 8009b68:	f040 80e2 	bne.w	8009d30 <_malloc_r+0x370>
 8009b6c:	6873      	ldr	r3, [r6, #4]
 8009b6e:	ea23 0302 	bic.w	r3, r3, r2
 8009b72:	6073      	str	r3, [r6, #4]
 8009b74:	6870      	ldr	r0, [r6, #4]
 8009b76:	0052      	lsls	r2, r2, #1
 8009b78:	4290      	cmp	r0, r2
 8009b7a:	d302      	bcc.n	8009b82 <_malloc_r+0x1c2>
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	f040 80e3 	bne.w	8009d48 <_malloc_r+0x388>
 8009b82:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8009b86:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009b8a:	f023 0903 	bic.w	r9, r3, #3
 8009b8e:	45b9      	cmp	r9, r7
 8009b90:	d304      	bcc.n	8009b9c <_malloc_r+0x1dc>
 8009b92:	eba9 0207 	sub.w	r2, r9, r7
 8009b96:	2a0f      	cmp	r2, #15
 8009b98:	f300 8141 	bgt.w	8009e1e <_malloc_r+0x45e>
 8009b9c:	4b45      	ldr	r3, [pc, #276]	; (8009cb4 <_malloc_r+0x2f4>)
 8009b9e:	2008      	movs	r0, #8
 8009ba0:	6819      	ldr	r1, [r3, #0]
 8009ba2:	eb0a 0b09 	add.w	fp, sl, r9
 8009ba6:	3110      	adds	r1, #16
 8009ba8:	4439      	add	r1, r7
 8009baa:	9101      	str	r1, [sp, #4]
 8009bac:	f002 fe44 	bl	800c838 <sysconf>
 8009bb0:	4a41      	ldr	r2, [pc, #260]	; (8009cb8 <_malloc_r+0x2f8>)
 8009bb2:	9901      	ldr	r1, [sp, #4]
 8009bb4:	6813      	ldr	r3, [r2, #0]
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	3301      	adds	r3, #1
 8009bba:	bf1f      	itttt	ne
 8009bbc:	f101 31ff 	addne.w	r1, r1, #4294967295
 8009bc0:	1809      	addne	r1, r1, r0
 8009bc2:	4243      	negne	r3, r0
 8009bc4:	4019      	andne	r1, r3
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	9101      	str	r1, [sp, #4]
 8009bca:	f000 fb2f 	bl	800a22c <_sbrk_r>
 8009bce:	1c42      	adds	r2, r0, #1
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	f000 80f7 	beq.w	8009dc4 <_malloc_r+0x404>
 8009bd6:	4583      	cmp	fp, r0
 8009bd8:	9901      	ldr	r1, [sp, #4]
 8009bda:	4a37      	ldr	r2, [pc, #220]	; (8009cb8 <_malloc_r+0x2f8>)
 8009bdc:	d902      	bls.n	8009be4 <_malloc_r+0x224>
 8009bde:	45b2      	cmp	sl, r6
 8009be0:	f040 80f0 	bne.w	8009dc4 <_malloc_r+0x404>
 8009be4:	4b35      	ldr	r3, [pc, #212]	; (8009cbc <_malloc_r+0x2fc>)
 8009be6:	45a3      	cmp	fp, r4
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	f108 3cff 	add.w	ip, r8, #4294967295
 8009bee:	4408      	add	r0, r1
 8009bf0:	6018      	str	r0, [r3, #0]
 8009bf2:	f040 80ab 	bne.w	8009d4c <_malloc_r+0x38c>
 8009bf6:	ea1b 0f0c 	tst.w	fp, ip
 8009bfa:	f040 80a7 	bne.w	8009d4c <_malloc_r+0x38c>
 8009bfe:	68b2      	ldr	r2, [r6, #8]
 8009c00:	4449      	add	r1, r9
 8009c02:	f041 0101 	orr.w	r1, r1, #1
 8009c06:	6051      	str	r1, [r2, #4]
 8009c08:	4a2d      	ldr	r2, [pc, #180]	; (8009cc0 <_malloc_r+0x300>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6811      	ldr	r1, [r2, #0]
 8009c0e:	428b      	cmp	r3, r1
 8009c10:	bf88      	it	hi
 8009c12:	6013      	strhi	r3, [r2, #0]
 8009c14:	4a2b      	ldr	r2, [pc, #172]	; (8009cc4 <_malloc_r+0x304>)
 8009c16:	6811      	ldr	r1, [r2, #0]
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	bf88      	it	hi
 8009c1c:	6013      	strhi	r3, [r2, #0]
 8009c1e:	e0d1      	b.n	8009dc4 <_malloc_r+0x404>
 8009c20:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8009c24:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009c28:	d218      	bcs.n	8009c5c <_malloc_r+0x29c>
 8009c2a:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009c2e:	3238      	adds	r2, #56	; 0x38
 8009c30:	f102 0e01 	add.w	lr, r2, #1
 8009c34:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009c38:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009c3c:	45f0      	cmp	r8, lr
 8009c3e:	d12b      	bne.n	8009c98 <_malloc_r+0x2d8>
 8009c40:	f04f 0c01 	mov.w	ip, #1
 8009c44:	1092      	asrs	r2, r2, #2
 8009c46:	fa0c f202 	lsl.w	r2, ip, r2
 8009c4a:	4310      	orrs	r0, r2
 8009c4c:	6070      	str	r0, [r6, #4]
 8009c4e:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009c52:	f8c8 4008 	str.w	r4, [r8, #8]
 8009c56:	f8ce 400c 	str.w	r4, [lr, #12]
 8009c5a:	e764      	b.n	8009b26 <_malloc_r+0x166>
 8009c5c:	2a14      	cmp	r2, #20
 8009c5e:	d801      	bhi.n	8009c64 <_malloc_r+0x2a4>
 8009c60:	325b      	adds	r2, #91	; 0x5b
 8009c62:	e7e5      	b.n	8009c30 <_malloc_r+0x270>
 8009c64:	2a54      	cmp	r2, #84	; 0x54
 8009c66:	d803      	bhi.n	8009c70 <_malloc_r+0x2b0>
 8009c68:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009c6c:	326e      	adds	r2, #110	; 0x6e
 8009c6e:	e7df      	b.n	8009c30 <_malloc_r+0x270>
 8009c70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009c74:	d803      	bhi.n	8009c7e <_malloc_r+0x2be>
 8009c76:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009c7a:	3277      	adds	r2, #119	; 0x77
 8009c7c:	e7d8      	b.n	8009c30 <_malloc_r+0x270>
 8009c7e:	f240 5e54 	movw	lr, #1364	; 0x554
 8009c82:	4572      	cmp	r2, lr
 8009c84:	bf96      	itet	ls
 8009c86:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009c8a:	227e      	movhi	r2, #126	; 0x7e
 8009c8c:	327c      	addls	r2, #124	; 0x7c
 8009c8e:	e7cf      	b.n	8009c30 <_malloc_r+0x270>
 8009c90:	f8de e008 	ldr.w	lr, [lr, #8]
 8009c94:	45f0      	cmp	r8, lr
 8009c96:	d005      	beq.n	8009ca4 <_malloc_r+0x2e4>
 8009c98:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009c9c:	f022 0203 	bic.w	r2, r2, #3
 8009ca0:	4562      	cmp	r2, ip
 8009ca2:	d8f5      	bhi.n	8009c90 <_malloc_r+0x2d0>
 8009ca4:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009ca8:	e7d1      	b.n	8009c4e <_malloc_r+0x28e>
 8009caa:	bf00      	nop
 8009cac:	200005e8 	.word	0x200005e8
 8009cb0:	200005f0 	.word	0x200005f0
 8009cb4:	20000bf8 	.word	0x20000bf8
 8009cb8:	200009f0 	.word	0x200009f0
 8009cbc:	20000bc8 	.word	0x20000bc8
 8009cc0:	20000bf0 	.word	0x20000bf0
 8009cc4:	20000bf4 	.word	0x20000bf4
 8009cc8:	6860      	ldr	r0, [r4, #4]
 8009cca:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009cce:	f020 0003 	bic.w	r0, r0, #3
 8009cd2:	eba0 0a07 	sub.w	sl, r0, r7
 8009cd6:	f1ba 0f0f 	cmp.w	sl, #15
 8009cda:	dd12      	ble.n	8009d02 <_malloc_r+0x342>
 8009cdc:	68a3      	ldr	r3, [r4, #8]
 8009cde:	19e2      	adds	r2, r4, r7
 8009ce0:	f047 0701 	orr.w	r7, r7, #1
 8009ce4:	6067      	str	r7, [r4, #4]
 8009ce6:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009cea:	f8cc 3008 	str.w	r3, [ip, #8]
 8009cee:	f04a 0301 	orr.w	r3, sl, #1
 8009cf2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009cf6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009cfa:	6053      	str	r3, [r2, #4]
 8009cfc:	f844 a000 	str.w	sl, [r4, r0]
 8009d00:	e68f      	b.n	8009a22 <_malloc_r+0x62>
 8009d02:	f1ba 0f00 	cmp.w	sl, #0
 8009d06:	db11      	blt.n	8009d2c <_malloc_r+0x36c>
 8009d08:	4420      	add	r0, r4
 8009d0a:	6843      	ldr	r3, [r0, #4]
 8009d0c:	f043 0301 	orr.w	r3, r3, #1
 8009d10:	6043      	str	r3, [r0, #4]
 8009d12:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009d16:	4628      	mov	r0, r5
 8009d18:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009d1c:	f8cc 3008 	str.w	r3, [ip, #8]
 8009d20:	f000 f8bc 	bl	8009e9c <__malloc_unlock>
 8009d24:	4620      	mov	r0, r4
 8009d26:	b003      	add	sp, #12
 8009d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2c:	4664      	mov	r4, ip
 8009d2e:	e710      	b.n	8009b52 <_malloc_r+0x192>
 8009d30:	f858 0908 	ldr.w	r0, [r8], #-8
 8009d34:	3b01      	subs	r3, #1
 8009d36:	4540      	cmp	r0, r8
 8009d38:	f43f af15 	beq.w	8009b66 <_malloc_r+0x1a6>
 8009d3c:	e71a      	b.n	8009b74 <_malloc_r+0x1b4>
 8009d3e:	3304      	adds	r3, #4
 8009d40:	0052      	lsls	r2, r2, #1
 8009d42:	4210      	tst	r0, r2
 8009d44:	d0fb      	beq.n	8009d3e <_malloc_r+0x37e>
 8009d46:	e6fe      	b.n	8009b46 <_malloc_r+0x186>
 8009d48:	4673      	mov	r3, lr
 8009d4a:	e7fa      	b.n	8009d42 <_malloc_r+0x382>
 8009d4c:	f8d2 e000 	ldr.w	lr, [r2]
 8009d50:	f1be 3fff 	cmp.w	lr, #4294967295
 8009d54:	bf1b      	ittet	ne
 8009d56:	eba4 0b0b 	subne.w	fp, r4, fp
 8009d5a:	eb0b 0200 	addne.w	r2, fp, r0
 8009d5e:	6014      	streq	r4, [r2, #0]
 8009d60:	601a      	strne	r2, [r3, #0]
 8009d62:	f014 0b07 	ands.w	fp, r4, #7
 8009d66:	bf0e      	itee	eq
 8009d68:	4658      	moveq	r0, fp
 8009d6a:	f1cb 0008 	rsbne	r0, fp, #8
 8009d6e:	1824      	addne	r4, r4, r0
 8009d70:	1862      	adds	r2, r4, r1
 8009d72:	ea02 010c 	and.w	r1, r2, ip
 8009d76:	4480      	add	r8, r0
 8009d78:	eba8 0801 	sub.w	r8, r8, r1
 8009d7c:	ea08 080c 	and.w	r8, r8, ip
 8009d80:	4641      	mov	r1, r8
 8009d82:	4628      	mov	r0, r5
 8009d84:	9201      	str	r2, [sp, #4]
 8009d86:	f000 fa51 	bl	800a22c <_sbrk_r>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	9a01      	ldr	r2, [sp, #4]
 8009d8e:	4b29      	ldr	r3, [pc, #164]	; (8009e34 <_malloc_r+0x474>)
 8009d90:	d107      	bne.n	8009da2 <_malloc_r+0x3e2>
 8009d92:	f1bb 0f00 	cmp.w	fp, #0
 8009d96:	d023      	beq.n	8009de0 <_malloc_r+0x420>
 8009d98:	f04f 0800 	mov.w	r8, #0
 8009d9c:	f1ab 0008 	sub.w	r0, fp, #8
 8009da0:	4410      	add	r0, r2
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	1b00      	subs	r0, r0, r4
 8009da6:	4440      	add	r0, r8
 8009da8:	4442      	add	r2, r8
 8009daa:	f040 0001 	orr.w	r0, r0, #1
 8009dae:	45b2      	cmp	sl, r6
 8009db0:	60b4      	str	r4, [r6, #8]
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	6060      	str	r0, [r4, #4]
 8009db6:	f43f af27 	beq.w	8009c08 <_malloc_r+0x248>
 8009dba:	f1b9 0f0f 	cmp.w	r9, #15
 8009dbe:	d812      	bhi.n	8009de6 <_malloc_r+0x426>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	6063      	str	r3, [r4, #4]
 8009dc4:	68b3      	ldr	r3, [r6, #8]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f023 0303 	bic.w	r3, r3, #3
 8009dcc:	42bb      	cmp	r3, r7
 8009dce:	eba3 0207 	sub.w	r2, r3, r7
 8009dd2:	d301      	bcc.n	8009dd8 <_malloc_r+0x418>
 8009dd4:	2a0f      	cmp	r2, #15
 8009dd6:	dc22      	bgt.n	8009e1e <_malloc_r+0x45e>
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f000 f85f 	bl	8009e9c <__malloc_unlock>
 8009dde:	e5fb      	b.n	80099d8 <_malloc_r+0x18>
 8009de0:	4610      	mov	r0, r2
 8009de2:	46d8      	mov	r8, fp
 8009de4:	e7dd      	b.n	8009da2 <_malloc_r+0x3e2>
 8009de6:	2105      	movs	r1, #5
 8009de8:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009dec:	f1a9 090c 	sub.w	r9, r9, #12
 8009df0:	f029 0907 	bic.w	r9, r9, #7
 8009df4:	f002 0201 	and.w	r2, r2, #1
 8009df8:	ea42 0209 	orr.w	r2, r2, r9
 8009dfc:	f8ca 2004 	str.w	r2, [sl, #4]
 8009e00:	f1b9 0f0f 	cmp.w	r9, #15
 8009e04:	eb0a 0209 	add.w	r2, sl, r9
 8009e08:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8009e0c:	f67f aefc 	bls.w	8009c08 <_malloc_r+0x248>
 8009e10:	4628      	mov	r0, r5
 8009e12:	f10a 0108 	add.w	r1, sl, #8
 8009e16:	f003 fd55 	bl	800d8c4 <_free_r>
 8009e1a:	4b06      	ldr	r3, [pc, #24]	; (8009e34 <_malloc_r+0x474>)
 8009e1c:	e6f4      	b.n	8009c08 <_malloc_r+0x248>
 8009e1e:	68b4      	ldr	r4, [r6, #8]
 8009e20:	f047 0301 	orr.w	r3, r7, #1
 8009e24:	f042 0201 	orr.w	r2, r2, #1
 8009e28:	4427      	add	r7, r4
 8009e2a:	6063      	str	r3, [r4, #4]
 8009e2c:	60b7      	str	r7, [r6, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	e5f7      	b.n	8009a22 <_malloc_r+0x62>
 8009e32:	bf00      	nop
 8009e34:	20000bc8 	.word	0x20000bc8

08009e38 <_mbrtowc_r>:
 8009e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e3a:	9e08      	ldr	r6, [sp, #32]
 8009e3c:	4c09      	ldr	r4, [pc, #36]	; (8009e64 <_mbrtowc_r+0x2c>)
 8009e3e:	4605      	mov	r5, r0
 8009e40:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8009e44:	4614      	mov	r4, r2
 8009e46:	9600      	str	r6, [sp, #0]
 8009e48:	b912      	cbnz	r2, 8009e50 <_mbrtowc_r+0x18>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4a06      	ldr	r2, [pc, #24]	; (8009e68 <_mbrtowc_r+0x30>)
 8009e50:	47b8      	blx	r7
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	bf01      	itttt	eq
 8009e56:	2300      	moveq	r3, #0
 8009e58:	6033      	streq	r3, [r6, #0]
 8009e5a:	238a      	moveq	r3, #138	; 0x8a
 8009e5c:	602b      	streq	r3, [r5, #0]
 8009e5e:	b003      	add	sp, #12
 8009e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e62:	bf00      	nop
 8009e64:	2000047c 	.word	0x2000047c
 8009e68:	08034f17 	.word	0x08034f17

08009e6c <__ascii_mbtowc>:
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	b901      	cbnz	r1, 8009e72 <__ascii_mbtowc+0x6>
 8009e70:	a901      	add	r1, sp, #4
 8009e72:	b142      	cbz	r2, 8009e86 <__ascii_mbtowc+0x1a>
 8009e74:	b14b      	cbz	r3, 8009e8a <__ascii_mbtowc+0x1e>
 8009e76:	7813      	ldrb	r3, [r2, #0]
 8009e78:	600b      	str	r3, [r1, #0]
 8009e7a:	7812      	ldrb	r2, [r2, #0]
 8009e7c:	1e10      	subs	r0, r2, #0
 8009e7e:	bf18      	it	ne
 8009e80:	2001      	movne	r0, #1
 8009e82:	b002      	add	sp, #8
 8009e84:	4770      	bx	lr
 8009e86:	4610      	mov	r0, r2
 8009e88:	e7fb      	b.n	8009e82 <__ascii_mbtowc+0x16>
 8009e8a:	f06f 0001 	mvn.w	r0, #1
 8009e8e:	e7f8      	b.n	8009e82 <__ascii_mbtowc+0x16>

08009e90 <__malloc_lock>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__malloc_lock+0x8>)
 8009e92:	f7ff bd71 	b.w	8009978 <__retarget_lock_acquire_recursive>
 8009e96:	bf00      	nop
 8009e98:	20000bc5 	.word	0x20000bc5

08009e9c <__malloc_unlock>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	; (8009ea4 <__malloc_unlock+0x8>)
 8009e9e:	f7ff bd6c 	b.w	800997a <__retarget_lock_release_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	20000bc5 	.word	0x20000bc5

08009ea8 <_read_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	4d05      	ldr	r5, [pc, #20]	; (8009ec8 <_read_r+0x20>)
 8009eb4:	602a      	str	r2, [r5, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7fb f873 	bl	8004fa2 <_read>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_read_r+0x1e>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_read_r+0x1e>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	20000bfc 	.word	0x20000bfc

08009ecc <realloc>:
 8009ecc:	4b02      	ldr	r3, [pc, #8]	; (8009ed8 <realloc+0xc>)
 8009ece:	460a      	mov	r2, r1
 8009ed0:	4601      	mov	r1, r0
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	f000 b802 	b.w	8009edc <_realloc_r>
 8009ed8:	20000048 	.word	0x20000048

08009edc <_realloc_r>:
 8009edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	4681      	mov	r9, r0
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	b924      	cbnz	r4, 8009ef2 <_realloc_r+0x16>
 8009ee8:	b003      	add	sp, #12
 8009eea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eee:	f7ff bd67 	b.w	80099c0 <_malloc_r>
 8009ef2:	9201      	str	r2, [sp, #4]
 8009ef4:	f7ff ffcc 	bl	8009e90 <__malloc_lock>
 8009ef8:	9901      	ldr	r1, [sp, #4]
 8009efa:	f101 080b 	add.w	r8, r1, #11
 8009efe:	f1b8 0f16 	cmp.w	r8, #22
 8009f02:	d90b      	bls.n	8009f1c <_realloc_r+0x40>
 8009f04:	f038 0807 	bics.w	r8, r8, #7
 8009f08:	d50a      	bpl.n	8009f20 <_realloc_r+0x44>
 8009f0a:	230c      	movs	r3, #12
 8009f0c:	f04f 0b00 	mov.w	fp, #0
 8009f10:	f8c9 3000 	str.w	r3, [r9]
 8009f14:	4658      	mov	r0, fp
 8009f16:	b003      	add	sp, #12
 8009f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1c:	f04f 0810 	mov.w	r8, #16
 8009f20:	4588      	cmp	r8, r1
 8009f22:	d3f2      	bcc.n	8009f0a <_realloc_r+0x2e>
 8009f24:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8009f28:	f1a4 0a08 	sub.w	sl, r4, #8
 8009f2c:	f025 0603 	bic.w	r6, r5, #3
 8009f30:	45b0      	cmp	r8, r6
 8009f32:	f340 8171 	ble.w	800a218 <_realloc_r+0x33c>
 8009f36:	4a9c      	ldr	r2, [pc, #624]	; (800a1a8 <_realloc_r+0x2cc>)
 8009f38:	eb0a 0306 	add.w	r3, sl, r6
 8009f3c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	459c      	cmp	ip, r3
 8009f44:	d005      	beq.n	8009f52 <_realloc_r+0x76>
 8009f46:	f022 0001 	bic.w	r0, r2, #1
 8009f4a:	4418      	add	r0, r3
 8009f4c:	6840      	ldr	r0, [r0, #4]
 8009f4e:	07c7      	lsls	r7, r0, #31
 8009f50:	d427      	bmi.n	8009fa2 <_realloc_r+0xc6>
 8009f52:	f022 0203 	bic.w	r2, r2, #3
 8009f56:	459c      	cmp	ip, r3
 8009f58:	eb06 0702 	add.w	r7, r6, r2
 8009f5c:	d119      	bne.n	8009f92 <_realloc_r+0xb6>
 8009f5e:	f108 0010 	add.w	r0, r8, #16
 8009f62:	42b8      	cmp	r0, r7
 8009f64:	dc1f      	bgt.n	8009fa6 <_realloc_r+0xca>
 8009f66:	4a90      	ldr	r2, [pc, #576]	; (800a1a8 <_realloc_r+0x2cc>)
 8009f68:	eba7 0708 	sub.w	r7, r7, r8
 8009f6c:	eb0a 0308 	add.w	r3, sl, r8
 8009f70:	f047 0701 	orr.w	r7, r7, #1
 8009f74:	6093      	str	r3, [r2, #8]
 8009f76:	605f      	str	r7, [r3, #4]
 8009f78:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009f7c:	4648      	mov	r0, r9
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	ea43 0308 	orr.w	r3, r3, r8
 8009f86:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f8a:	f7ff ff87 	bl	8009e9c <__malloc_unlock>
 8009f8e:	46a3      	mov	fp, r4
 8009f90:	e7c0      	b.n	8009f14 <_realloc_r+0x38>
 8009f92:	45b8      	cmp	r8, r7
 8009f94:	dc07      	bgt.n	8009fa6 <_realloc_r+0xca>
 8009f96:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009f9a:	60da      	str	r2, [r3, #12]
 8009f9c:	6093      	str	r3, [r2, #8]
 8009f9e:	4655      	mov	r5, sl
 8009fa0:	e080      	b.n	800a0a4 <_realloc_r+0x1c8>
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	07e8      	lsls	r0, r5, #31
 8009fa8:	f100 80e8 	bmi.w	800a17c <_realloc_r+0x2a0>
 8009fac:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009fb0:	ebaa 0505 	sub.w	r5, sl, r5
 8009fb4:	6868      	ldr	r0, [r5, #4]
 8009fb6:	f020 0003 	bic.w	r0, r0, #3
 8009fba:	eb00 0b06 	add.w	fp, r0, r6
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 80a7 	beq.w	800a112 <_realloc_r+0x236>
 8009fc4:	459c      	cmp	ip, r3
 8009fc6:	eb02 070b 	add.w	r7, r2, fp
 8009fca:	d14b      	bne.n	800a064 <_realloc_r+0x188>
 8009fcc:	f108 0310 	add.w	r3, r8, #16
 8009fd0:	42bb      	cmp	r3, r7
 8009fd2:	f300 809e 	bgt.w	800a112 <_realloc_r+0x236>
 8009fd6:	46ab      	mov	fp, r5
 8009fd8:	68eb      	ldr	r3, [r5, #12]
 8009fda:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8009fde:	60d3      	str	r3, [r2, #12]
 8009fe0:	609a      	str	r2, [r3, #8]
 8009fe2:	1f32      	subs	r2, r6, #4
 8009fe4:	2a24      	cmp	r2, #36	; 0x24
 8009fe6:	d838      	bhi.n	800a05a <_realloc_r+0x17e>
 8009fe8:	2a13      	cmp	r2, #19
 8009fea:	d934      	bls.n	800a056 <_realloc_r+0x17a>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	2a1b      	cmp	r2, #27
 8009ff0:	60ab      	str	r3, [r5, #8]
 8009ff2:	6863      	ldr	r3, [r4, #4]
 8009ff4:	60eb      	str	r3, [r5, #12]
 8009ff6:	d81b      	bhi.n	800a030 <_realloc_r+0x154>
 8009ff8:	3408      	adds	r4, #8
 8009ffa:	f105 0310 	add.w	r3, r5, #16
 8009ffe:	6822      	ldr	r2, [r4, #0]
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	6862      	ldr	r2, [r4, #4]
 800a004:	605a      	str	r2, [r3, #4]
 800a006:	68a2      	ldr	r2, [r4, #8]
 800a008:	609a      	str	r2, [r3, #8]
 800a00a:	4a67      	ldr	r2, [pc, #412]	; (800a1a8 <_realloc_r+0x2cc>)
 800a00c:	eba7 0708 	sub.w	r7, r7, r8
 800a010:	eb05 0308 	add.w	r3, r5, r8
 800a014:	f047 0701 	orr.w	r7, r7, #1
 800a018:	6093      	str	r3, [r2, #8]
 800a01a:	605f      	str	r7, [r3, #4]
 800a01c:	686b      	ldr	r3, [r5, #4]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	ea43 0308 	orr.w	r3, r3, r8
 800a026:	606b      	str	r3, [r5, #4]
 800a028:	4648      	mov	r0, r9
 800a02a:	f7ff ff37 	bl	8009e9c <__malloc_unlock>
 800a02e:	e771      	b.n	8009f14 <_realloc_r+0x38>
 800a030:	68a3      	ldr	r3, [r4, #8]
 800a032:	2a24      	cmp	r2, #36	; 0x24
 800a034:	612b      	str	r3, [r5, #16]
 800a036:	68e3      	ldr	r3, [r4, #12]
 800a038:	bf18      	it	ne
 800a03a:	3410      	addne	r4, #16
 800a03c:	616b      	str	r3, [r5, #20]
 800a03e:	bf09      	itett	eq
 800a040:	6923      	ldreq	r3, [r4, #16]
 800a042:	f105 0318 	addne.w	r3, r5, #24
 800a046:	61ab      	streq	r3, [r5, #24]
 800a048:	6962      	ldreq	r2, [r4, #20]
 800a04a:	bf02      	ittt	eq
 800a04c:	f105 0320 	addeq.w	r3, r5, #32
 800a050:	61ea      	streq	r2, [r5, #28]
 800a052:	3418      	addeq	r4, #24
 800a054:	e7d3      	b.n	8009ffe <_realloc_r+0x122>
 800a056:	465b      	mov	r3, fp
 800a058:	e7d1      	b.n	8009ffe <_realloc_r+0x122>
 800a05a:	4621      	mov	r1, r4
 800a05c:	4658      	mov	r0, fp
 800a05e:	f004 f893 	bl	800e188 <memmove>
 800a062:	e7d2      	b.n	800a00a <_realloc_r+0x12e>
 800a064:	45b8      	cmp	r8, r7
 800a066:	dc54      	bgt.n	800a112 <_realloc_r+0x236>
 800a068:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a06c:	4628      	mov	r0, r5
 800a06e:	60da      	str	r2, [r3, #12]
 800a070:	6093      	str	r3, [r2, #8]
 800a072:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a076:	68eb      	ldr	r3, [r5, #12]
 800a078:	60d3      	str	r3, [r2, #12]
 800a07a:	609a      	str	r2, [r3, #8]
 800a07c:	1f32      	subs	r2, r6, #4
 800a07e:	2a24      	cmp	r2, #36	; 0x24
 800a080:	d843      	bhi.n	800a10a <_realloc_r+0x22e>
 800a082:	2a13      	cmp	r2, #19
 800a084:	d908      	bls.n	800a098 <_realloc_r+0x1bc>
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	2a1b      	cmp	r2, #27
 800a08a:	60ab      	str	r3, [r5, #8]
 800a08c:	6863      	ldr	r3, [r4, #4]
 800a08e:	60eb      	str	r3, [r5, #12]
 800a090:	d828      	bhi.n	800a0e4 <_realloc_r+0x208>
 800a092:	3408      	adds	r4, #8
 800a094:	f105 0010 	add.w	r0, r5, #16
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	6003      	str	r3, [r0, #0]
 800a09c:	6863      	ldr	r3, [r4, #4]
 800a09e:	6043      	str	r3, [r0, #4]
 800a0a0:	68a3      	ldr	r3, [r4, #8]
 800a0a2:	6083      	str	r3, [r0, #8]
 800a0a4:	686b      	ldr	r3, [r5, #4]
 800a0a6:	eba7 0008 	sub.w	r0, r7, r8
 800a0aa:	280f      	cmp	r0, #15
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	eb05 0207 	add.w	r2, r5, r7
 800a0b4:	f240 80b2 	bls.w	800a21c <_realloc_r+0x340>
 800a0b8:	eb05 0108 	add.w	r1, r5, r8
 800a0bc:	ea48 0303 	orr.w	r3, r8, r3
 800a0c0:	f040 0001 	orr.w	r0, r0, #1
 800a0c4:	606b      	str	r3, [r5, #4]
 800a0c6:	6048      	str	r0, [r1, #4]
 800a0c8:	6853      	ldr	r3, [r2, #4]
 800a0ca:	4648      	mov	r0, r9
 800a0cc:	f043 0301 	orr.w	r3, r3, #1
 800a0d0:	6053      	str	r3, [r2, #4]
 800a0d2:	3108      	adds	r1, #8
 800a0d4:	f003 fbf6 	bl	800d8c4 <_free_r>
 800a0d8:	4648      	mov	r0, r9
 800a0da:	f7ff fedf 	bl	8009e9c <__malloc_unlock>
 800a0de:	f105 0b08 	add.w	fp, r5, #8
 800a0e2:	e717      	b.n	8009f14 <_realloc_r+0x38>
 800a0e4:	68a3      	ldr	r3, [r4, #8]
 800a0e6:	2a24      	cmp	r2, #36	; 0x24
 800a0e8:	612b      	str	r3, [r5, #16]
 800a0ea:	68e3      	ldr	r3, [r4, #12]
 800a0ec:	bf18      	it	ne
 800a0ee:	f105 0018 	addne.w	r0, r5, #24
 800a0f2:	616b      	str	r3, [r5, #20]
 800a0f4:	bf09      	itett	eq
 800a0f6:	6923      	ldreq	r3, [r4, #16]
 800a0f8:	3410      	addne	r4, #16
 800a0fa:	61ab      	streq	r3, [r5, #24]
 800a0fc:	6963      	ldreq	r3, [r4, #20]
 800a0fe:	bf02      	ittt	eq
 800a100:	f105 0020 	addeq.w	r0, r5, #32
 800a104:	61eb      	streq	r3, [r5, #28]
 800a106:	3418      	addeq	r4, #24
 800a108:	e7c6      	b.n	800a098 <_realloc_r+0x1bc>
 800a10a:	4621      	mov	r1, r4
 800a10c:	f004 f83c 	bl	800e188 <memmove>
 800a110:	e7c8      	b.n	800a0a4 <_realloc_r+0x1c8>
 800a112:	45d8      	cmp	r8, fp
 800a114:	dc32      	bgt.n	800a17c <_realloc_r+0x2a0>
 800a116:	4628      	mov	r0, r5
 800a118:	68eb      	ldr	r3, [r5, #12]
 800a11a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a11e:	60d3      	str	r3, [r2, #12]
 800a120:	609a      	str	r2, [r3, #8]
 800a122:	1f32      	subs	r2, r6, #4
 800a124:	2a24      	cmp	r2, #36	; 0x24
 800a126:	d825      	bhi.n	800a174 <_realloc_r+0x298>
 800a128:	2a13      	cmp	r2, #19
 800a12a:	d908      	bls.n	800a13e <_realloc_r+0x262>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	2a1b      	cmp	r2, #27
 800a130:	60ab      	str	r3, [r5, #8]
 800a132:	6863      	ldr	r3, [r4, #4]
 800a134:	60eb      	str	r3, [r5, #12]
 800a136:	d80a      	bhi.n	800a14e <_realloc_r+0x272>
 800a138:	3408      	adds	r4, #8
 800a13a:	f105 0010 	add.w	r0, r5, #16
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	6863      	ldr	r3, [r4, #4]
 800a144:	6043      	str	r3, [r0, #4]
 800a146:	68a3      	ldr	r3, [r4, #8]
 800a148:	6083      	str	r3, [r0, #8]
 800a14a:	465f      	mov	r7, fp
 800a14c:	e7aa      	b.n	800a0a4 <_realloc_r+0x1c8>
 800a14e:	68a3      	ldr	r3, [r4, #8]
 800a150:	2a24      	cmp	r2, #36	; 0x24
 800a152:	612b      	str	r3, [r5, #16]
 800a154:	68e3      	ldr	r3, [r4, #12]
 800a156:	bf18      	it	ne
 800a158:	f105 0018 	addne.w	r0, r5, #24
 800a15c:	616b      	str	r3, [r5, #20]
 800a15e:	bf09      	itett	eq
 800a160:	6923      	ldreq	r3, [r4, #16]
 800a162:	3410      	addne	r4, #16
 800a164:	61ab      	streq	r3, [r5, #24]
 800a166:	6963      	ldreq	r3, [r4, #20]
 800a168:	bf02      	ittt	eq
 800a16a:	f105 0020 	addeq.w	r0, r5, #32
 800a16e:	61eb      	streq	r3, [r5, #28]
 800a170:	3418      	addeq	r4, #24
 800a172:	e7e4      	b.n	800a13e <_realloc_r+0x262>
 800a174:	4621      	mov	r1, r4
 800a176:	f004 f807 	bl	800e188 <memmove>
 800a17a:	e7e6      	b.n	800a14a <_realloc_r+0x26e>
 800a17c:	4648      	mov	r0, r9
 800a17e:	f7ff fc1f 	bl	80099c0 <_malloc_r>
 800a182:	4683      	mov	fp, r0
 800a184:	2800      	cmp	r0, #0
 800a186:	f43f af4f 	beq.w	800a028 <_realloc_r+0x14c>
 800a18a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a18e:	f1a0 0208 	sub.w	r2, r0, #8
 800a192:	f023 0301 	bic.w	r3, r3, #1
 800a196:	4453      	add	r3, sl
 800a198:	4293      	cmp	r3, r2
 800a19a:	d107      	bne.n	800a1ac <_realloc_r+0x2d0>
 800a19c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a1a0:	f027 0703 	bic.w	r7, r7, #3
 800a1a4:	4437      	add	r7, r6
 800a1a6:	e6fa      	b.n	8009f9e <_realloc_r+0xc2>
 800a1a8:	200005e8 	.word	0x200005e8
 800a1ac:	1f32      	subs	r2, r6, #4
 800a1ae:	2a24      	cmp	r2, #36	; 0x24
 800a1b0:	d82e      	bhi.n	800a210 <_realloc_r+0x334>
 800a1b2:	2a13      	cmp	r2, #19
 800a1b4:	d929      	bls.n	800a20a <_realloc_r+0x32e>
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	2a1b      	cmp	r2, #27
 800a1ba:	6003      	str	r3, [r0, #0]
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	6043      	str	r3, [r0, #4]
 800a1c0:	d80e      	bhi.n	800a1e0 <_realloc_r+0x304>
 800a1c2:	f104 0208 	add.w	r2, r4, #8
 800a1c6:	f100 0308 	add.w	r3, r0, #8
 800a1ca:	6811      	ldr	r1, [r2, #0]
 800a1cc:	6019      	str	r1, [r3, #0]
 800a1ce:	6851      	ldr	r1, [r2, #4]
 800a1d0:	6059      	str	r1, [r3, #4]
 800a1d2:	6892      	ldr	r2, [r2, #8]
 800a1d4:	609a      	str	r2, [r3, #8]
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	4648      	mov	r0, r9
 800a1da:	f003 fb73 	bl	800d8c4 <_free_r>
 800a1de:	e723      	b.n	800a028 <_realloc_r+0x14c>
 800a1e0:	68a3      	ldr	r3, [r4, #8]
 800a1e2:	2a24      	cmp	r2, #36	; 0x24
 800a1e4:	6083      	str	r3, [r0, #8]
 800a1e6:	68e3      	ldr	r3, [r4, #12]
 800a1e8:	bf18      	it	ne
 800a1ea:	f104 0210 	addne.w	r2, r4, #16
 800a1ee:	60c3      	str	r3, [r0, #12]
 800a1f0:	bf09      	itett	eq
 800a1f2:	6923      	ldreq	r3, [r4, #16]
 800a1f4:	f100 0310 	addne.w	r3, r0, #16
 800a1f8:	6103      	streq	r3, [r0, #16]
 800a1fa:	6961      	ldreq	r1, [r4, #20]
 800a1fc:	bf02      	ittt	eq
 800a1fe:	f104 0218 	addeq.w	r2, r4, #24
 800a202:	f100 0318 	addeq.w	r3, r0, #24
 800a206:	6141      	streq	r1, [r0, #20]
 800a208:	e7df      	b.n	800a1ca <_realloc_r+0x2ee>
 800a20a:	4603      	mov	r3, r0
 800a20c:	4622      	mov	r2, r4
 800a20e:	e7dc      	b.n	800a1ca <_realloc_r+0x2ee>
 800a210:	4621      	mov	r1, r4
 800a212:	f003 ffb9 	bl	800e188 <memmove>
 800a216:	e7de      	b.n	800a1d6 <_realloc_r+0x2fa>
 800a218:	4637      	mov	r7, r6
 800a21a:	e6c0      	b.n	8009f9e <_realloc_r+0xc2>
 800a21c:	431f      	orrs	r7, r3
 800a21e:	606f      	str	r7, [r5, #4]
 800a220:	6853      	ldr	r3, [r2, #4]
 800a222:	f043 0301 	orr.w	r3, r3, #1
 800a226:	6053      	str	r3, [r2, #4]
 800a228:	e756      	b.n	800a0d8 <_realloc_r+0x1fc>
 800a22a:	bf00      	nop

0800a22c <_sbrk_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	2300      	movs	r3, #0
 800a230:	4d05      	ldr	r5, [pc, #20]	; (800a248 <_sbrk_r+0x1c>)
 800a232:	4604      	mov	r4, r0
 800a234:	4608      	mov	r0, r1
 800a236:	602b      	str	r3, [r5, #0]
 800a238:	f7fa ff1c 	bl	8005074 <_sbrk>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d102      	bne.n	800a246 <_sbrk_r+0x1a>
 800a240:	682b      	ldr	r3, [r5, #0]
 800a242:	b103      	cbz	r3, 800a246 <_sbrk_r+0x1a>
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	bd38      	pop	{r3, r4, r5, pc}
 800a248:	20000bfc 	.word	0x20000bfc

0800a24c <__sccl>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	780b      	ldrb	r3, [r1, #0]
 800a250:	4604      	mov	r4, r0
 800a252:	2b5e      	cmp	r3, #94	; 0x5e
 800a254:	bf13      	iteet	ne
 800a256:	2200      	movne	r2, #0
 800a258:	2201      	moveq	r2, #1
 800a25a:	784b      	ldrbeq	r3, [r1, #1]
 800a25c:	1c48      	addne	r0, r1, #1
 800a25e:	bf08      	it	eq
 800a260:	1c88      	addeq	r0, r1, #2
 800a262:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a266:	1e61      	subs	r1, r4, #1
 800a268:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a26c:	42a9      	cmp	r1, r5
 800a26e:	d1fb      	bne.n	800a268 <__sccl+0x1c>
 800a270:	b90b      	cbnz	r3, 800a276 <__sccl+0x2a>
 800a272:	3801      	subs	r0, #1
 800a274:	bd70      	pop	{r4, r5, r6, pc}
 800a276:	f082 0201 	eor.w	r2, r2, #1
 800a27a:	4605      	mov	r5, r0
 800a27c:	54e2      	strb	r2, [r4, r3]
 800a27e:	4628      	mov	r0, r5
 800a280:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a284:	292d      	cmp	r1, #45	; 0x2d
 800a286:	d006      	beq.n	800a296 <__sccl+0x4a>
 800a288:	295d      	cmp	r1, #93	; 0x5d
 800a28a:	d0f3      	beq.n	800a274 <__sccl+0x28>
 800a28c:	b909      	cbnz	r1, 800a292 <__sccl+0x46>
 800a28e:	4628      	mov	r0, r5
 800a290:	e7f0      	b.n	800a274 <__sccl+0x28>
 800a292:	460b      	mov	r3, r1
 800a294:	e7f1      	b.n	800a27a <__sccl+0x2e>
 800a296:	786e      	ldrb	r6, [r5, #1]
 800a298:	2e5d      	cmp	r6, #93	; 0x5d
 800a29a:	d0fa      	beq.n	800a292 <__sccl+0x46>
 800a29c:	42b3      	cmp	r3, r6
 800a29e:	dcf8      	bgt.n	800a292 <__sccl+0x46>
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	3502      	adds	r5, #2
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	428e      	cmp	r6, r1
 800a2a8:	5462      	strb	r2, [r4, r1]
 800a2aa:	dcfb      	bgt.n	800a2a4 <__sccl+0x58>
 800a2ac:	1af1      	subs	r1, r6, r3
 800a2ae:	3901      	subs	r1, #1
 800a2b0:	42b3      	cmp	r3, r6
 800a2b2:	bfa8      	it	ge
 800a2b4:	2100      	movge	r1, #0
 800a2b6:	1c58      	adds	r0, r3, #1
 800a2b8:	1843      	adds	r3, r0, r1
 800a2ba:	e7e0      	b.n	800a27e <__sccl+0x32>

0800a2bc <nanf>:
 800a2bc:	4800      	ldr	r0, [pc, #0]	; (800a2c0 <nanf+0x4>)
 800a2be:	4770      	bx	lr
 800a2c0:	7fc00000 	.word	0x7fc00000

0800a2c4 <sprintf>:
 800a2c4:	b40e      	push	{r1, r2, r3}
 800a2c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2ca:	b500      	push	{lr}
 800a2cc:	b09c      	sub	sp, #112	; 0x70
 800a2ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a2d0:	9002      	str	r0, [sp, #8]
 800a2d2:	9006      	str	r0, [sp, #24]
 800a2d4:	9107      	str	r1, [sp, #28]
 800a2d6:	9104      	str	r1, [sp, #16]
 800a2d8:	4808      	ldr	r0, [pc, #32]	; (800a2fc <sprintf+0x38>)
 800a2da:	4909      	ldr	r1, [pc, #36]	; (800a300 <sprintf+0x3c>)
 800a2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e0:	9105      	str	r1, [sp, #20]
 800a2e2:	6800      	ldr	r0, [r0, #0]
 800a2e4:	a902      	add	r1, sp, #8
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	f001 f8d2 	bl	800b490 <_svfprintf_r>
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	9b02      	ldr	r3, [sp, #8]
 800a2f0:	701a      	strb	r2, [r3, #0]
 800a2f2:	b01c      	add	sp, #112	; 0x70
 800a2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2f8:	b003      	add	sp, #12
 800a2fa:	4770      	bx	lr
 800a2fc:	20000048 	.word	0x20000048
 800a300:	ffff0208 	.word	0xffff0208

0800a304 <sulp>:
 800a304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a308:	460f      	mov	r7, r1
 800a30a:	4690      	mov	r8, r2
 800a30c:	f004 fa78 	bl	800e800 <__ulp>
 800a310:	4604      	mov	r4, r0
 800a312:	460d      	mov	r5, r1
 800a314:	f1b8 0f00 	cmp.w	r8, #0
 800a318:	d011      	beq.n	800a33e <sulp+0x3a>
 800a31a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a31e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a322:	2b00      	cmp	r3, #0
 800a324:	dd0b      	ble.n	800a33e <sulp+0x3a>
 800a326:	2400      	movs	r4, #0
 800a328:	051b      	lsls	r3, r3, #20
 800a32a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a32e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a332:	4622      	mov	r2, r4
 800a334:	462b      	mov	r3, r5
 800a336:	f7f6 f93b 	bl	80005b0 <__aeabi_dmul>
 800a33a:	4604      	mov	r4, r0
 800a33c:	460d      	mov	r5, r1
 800a33e:	4620      	mov	r0, r4
 800a340:	4629      	mov	r1, r5
 800a342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a348 <_strtod_l>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	469b      	mov	fp, r3
 800a34e:	2300      	movs	r3, #0
 800a350:	b09f      	sub	sp, #124	; 0x7c
 800a352:	931a      	str	r3, [sp, #104]	; 0x68
 800a354:	4b9e      	ldr	r3, [pc, #632]	; (800a5d0 <_strtod_l+0x288>)
 800a356:	4682      	mov	sl, r0
 800a358:	681f      	ldr	r7, [r3, #0]
 800a35a:	460e      	mov	r6, r1
 800a35c:	4638      	mov	r0, r7
 800a35e:	9215      	str	r2, [sp, #84]	; 0x54
 800a360:	f7f5 ff62 	bl	8000228 <strlen>
 800a364:	f04f 0800 	mov.w	r8, #0
 800a368:	4604      	mov	r4, r0
 800a36a:	f04f 0900 	mov.w	r9, #0
 800a36e:	9619      	str	r6, [sp, #100]	; 0x64
 800a370:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a372:	781a      	ldrb	r2, [r3, #0]
 800a374:	2a2b      	cmp	r2, #43	; 0x2b
 800a376:	d04c      	beq.n	800a412 <_strtod_l+0xca>
 800a378:	d83a      	bhi.n	800a3f0 <_strtod_l+0xa8>
 800a37a:	2a0d      	cmp	r2, #13
 800a37c:	d833      	bhi.n	800a3e6 <_strtod_l+0x9e>
 800a37e:	2a08      	cmp	r2, #8
 800a380:	d833      	bhi.n	800a3ea <_strtod_l+0xa2>
 800a382:	2a00      	cmp	r2, #0
 800a384:	d03d      	beq.n	800a402 <_strtod_l+0xba>
 800a386:	2300      	movs	r3, #0
 800a388:	930a      	str	r3, [sp, #40]	; 0x28
 800a38a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a38c:	782b      	ldrb	r3, [r5, #0]
 800a38e:	2b30      	cmp	r3, #48	; 0x30
 800a390:	f040 80aa 	bne.w	800a4e8 <_strtod_l+0x1a0>
 800a394:	786b      	ldrb	r3, [r5, #1]
 800a396:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a39a:	2b58      	cmp	r3, #88	; 0x58
 800a39c:	d166      	bne.n	800a46c <_strtod_l+0x124>
 800a39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	ab1a      	add	r3, sp, #104	; 0x68
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	4a8a      	ldr	r2, [pc, #552]	; (800a5d4 <_strtod_l+0x28c>)
 800a3aa:	f8cd b008 	str.w	fp, [sp, #8]
 800a3ae:	ab1b      	add	r3, sp, #108	; 0x6c
 800a3b0:	a919      	add	r1, sp, #100	; 0x64
 800a3b2:	f003 fbcf 	bl	800db54 <__gethex>
 800a3b6:	f010 0607 	ands.w	r6, r0, #7
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	d005      	beq.n	800a3ca <_strtod_l+0x82>
 800a3be:	2e06      	cmp	r6, #6
 800a3c0:	d129      	bne.n	800a416 <_strtod_l+0xce>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	9519      	str	r5, [sp, #100]	; 0x64
 800a3c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a3ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 858a 	bne.w	800aee6 <_strtod_l+0xb9e>
 800a3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d4:	b1d3      	cbz	r3, 800a40c <_strtod_l+0xc4>
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a3dc:	4610      	mov	r0, r2
 800a3de:	4619      	mov	r1, r3
 800a3e0:	b01f      	add	sp, #124	; 0x7c
 800a3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e6:	2a20      	cmp	r2, #32
 800a3e8:	d1cd      	bne.n	800a386 <_strtod_l+0x3e>
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	9319      	str	r3, [sp, #100]	; 0x64
 800a3ee:	e7bf      	b.n	800a370 <_strtod_l+0x28>
 800a3f0:	2a2d      	cmp	r2, #45	; 0x2d
 800a3f2:	d1c8      	bne.n	800a386 <_strtod_l+0x3e>
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	920a      	str	r2, [sp, #40]	; 0x28
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	9219      	str	r2, [sp, #100]	; 0x64
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1c3      	bne.n	800a38a <_strtod_l+0x42>
 800a402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a404:	9619      	str	r6, [sp, #100]	; 0x64
 800a406:	2b00      	cmp	r3, #0
 800a408:	f040 856b 	bne.w	800aee2 <_strtod_l+0xb9a>
 800a40c:	4642      	mov	r2, r8
 800a40e:	464b      	mov	r3, r9
 800a410:	e7e4      	b.n	800a3dc <_strtod_l+0x94>
 800a412:	2200      	movs	r2, #0
 800a414:	e7ef      	b.n	800a3f6 <_strtod_l+0xae>
 800a416:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a418:	b13a      	cbz	r2, 800a42a <_strtod_l+0xe2>
 800a41a:	2135      	movs	r1, #53	; 0x35
 800a41c:	a81c      	add	r0, sp, #112	; 0x70
 800a41e:	f004 faf3 	bl	800ea08 <__copybits>
 800a422:	4650      	mov	r0, sl
 800a424:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a426:	f003 feee 	bl	800e206 <_Bfree>
 800a42a:	3e01      	subs	r6, #1
 800a42c:	2e04      	cmp	r6, #4
 800a42e:	d806      	bhi.n	800a43e <_strtod_l+0xf6>
 800a430:	e8df f006 	tbb	[pc, r6]
 800a434:	1714030a 	.word	0x1714030a
 800a438:	0a          	.byte	0x0a
 800a439:	00          	.byte	0x00
 800a43a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a43e:	0721      	lsls	r1, r4, #28
 800a440:	d5c3      	bpl.n	800a3ca <_strtod_l+0x82>
 800a442:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a446:	e7c0      	b.n	800a3ca <_strtod_l+0x82>
 800a448:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a44a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a44e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a452:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a456:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a45a:	e7f0      	b.n	800a43e <_strtod_l+0xf6>
 800a45c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a5d8 <_strtod_l+0x290>
 800a460:	e7ed      	b.n	800a43e <_strtod_l+0xf6>
 800a462:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a466:	f04f 38ff 	mov.w	r8, #4294967295
 800a46a:	e7e8      	b.n	800a43e <_strtod_l+0xf6>
 800a46c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	9219      	str	r2, [sp, #100]	; 0x64
 800a472:	785b      	ldrb	r3, [r3, #1]
 800a474:	2b30      	cmp	r3, #48	; 0x30
 800a476:	d0f9      	beq.n	800a46c <_strtod_l+0x124>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d0a6      	beq.n	800a3ca <_strtod_l+0x82>
 800a47c:	2301      	movs	r3, #1
 800a47e:	9307      	str	r3, [sp, #28]
 800a480:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a482:	220a      	movs	r2, #10
 800a484:	9308      	str	r3, [sp, #32]
 800a486:	2300      	movs	r3, #0
 800a488:	469b      	mov	fp, r3
 800a48a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a48e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a490:	7805      	ldrb	r5, [r0, #0]
 800a492:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a496:	b2d9      	uxtb	r1, r3
 800a498:	2909      	cmp	r1, #9
 800a49a:	d927      	bls.n	800a4ec <_strtod_l+0x1a4>
 800a49c:	4622      	mov	r2, r4
 800a49e:	4639      	mov	r1, r7
 800a4a0:	f004 fb30 	bl	800eb04 <strncmp>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d033      	beq.n	800a510 <_strtod_l+0x1c8>
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	465c      	mov	r4, fp
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	9004      	str	r0, [sp, #16]
 800a4b2:	2a65      	cmp	r2, #101	; 0x65
 800a4b4:	d001      	beq.n	800a4ba <_strtod_l+0x172>
 800a4b6:	2a45      	cmp	r2, #69	; 0x45
 800a4b8:	d114      	bne.n	800a4e4 <_strtod_l+0x19c>
 800a4ba:	b91c      	cbnz	r4, 800a4c4 <_strtod_l+0x17c>
 800a4bc:	9a07      	ldr	r2, [sp, #28]
 800a4be:	4302      	orrs	r2, r0
 800a4c0:	d09f      	beq.n	800a402 <_strtod_l+0xba>
 800a4c2:	2400      	movs	r4, #0
 800a4c4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a4c6:	1c72      	adds	r2, r6, #1
 800a4c8:	9219      	str	r2, [sp, #100]	; 0x64
 800a4ca:	7872      	ldrb	r2, [r6, #1]
 800a4cc:	2a2b      	cmp	r2, #43	; 0x2b
 800a4ce:	d079      	beq.n	800a5c4 <_strtod_l+0x27c>
 800a4d0:	2a2d      	cmp	r2, #45	; 0x2d
 800a4d2:	f000 8083 	beq.w	800a5dc <_strtod_l+0x294>
 800a4d6:	2700      	movs	r7, #0
 800a4d8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a4dc:	2909      	cmp	r1, #9
 800a4de:	f240 8083 	bls.w	800a5e8 <_strtod_l+0x2a0>
 800a4e2:	9619      	str	r6, [sp, #100]	; 0x64
 800a4e4:	2500      	movs	r5, #0
 800a4e6:	e09f      	b.n	800a628 <_strtod_l+0x2e0>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	e7c8      	b.n	800a47e <_strtod_l+0x136>
 800a4ec:	f1bb 0f08 	cmp.w	fp, #8
 800a4f0:	bfd5      	itete	le
 800a4f2:	9906      	ldrle	r1, [sp, #24]
 800a4f4:	9905      	ldrgt	r1, [sp, #20]
 800a4f6:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4fa:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a4fe:	f100 0001 	add.w	r0, r0, #1
 800a502:	bfd4      	ite	le
 800a504:	9306      	strle	r3, [sp, #24]
 800a506:	9305      	strgt	r3, [sp, #20]
 800a508:	f10b 0b01 	add.w	fp, fp, #1
 800a50c:	9019      	str	r0, [sp, #100]	; 0x64
 800a50e:	e7be      	b.n	800a48e <_strtod_l+0x146>
 800a510:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a512:	191a      	adds	r2, r3, r4
 800a514:	9219      	str	r2, [sp, #100]	; 0x64
 800a516:	5d1a      	ldrb	r2, [r3, r4]
 800a518:	f1bb 0f00 	cmp.w	fp, #0
 800a51c:	d036      	beq.n	800a58c <_strtod_l+0x244>
 800a51e:	465c      	mov	r4, fp
 800a520:	9004      	str	r0, [sp, #16]
 800a522:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a526:	2b09      	cmp	r3, #9
 800a528:	d912      	bls.n	800a550 <_strtod_l+0x208>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e7c1      	b.n	800a4b2 <_strtod_l+0x16a>
 800a52e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a530:	3001      	adds	r0, #1
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	9219      	str	r2, [sp, #100]	; 0x64
 800a536:	785a      	ldrb	r2, [r3, #1]
 800a538:	2a30      	cmp	r2, #48	; 0x30
 800a53a:	d0f8      	beq.n	800a52e <_strtod_l+0x1e6>
 800a53c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a540:	2b08      	cmp	r3, #8
 800a542:	f200 84d5 	bhi.w	800aef0 <_strtod_l+0xba8>
 800a546:	9004      	str	r0, [sp, #16]
 800a548:	2000      	movs	r0, #0
 800a54a:	4604      	mov	r4, r0
 800a54c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a54e:	9308      	str	r3, [sp, #32]
 800a550:	3a30      	subs	r2, #48	; 0x30
 800a552:	f100 0301 	add.w	r3, r0, #1
 800a556:	d013      	beq.n	800a580 <_strtod_l+0x238>
 800a558:	9904      	ldr	r1, [sp, #16]
 800a55a:	1905      	adds	r5, r0, r4
 800a55c:	4419      	add	r1, r3
 800a55e:	9104      	str	r1, [sp, #16]
 800a560:	4623      	mov	r3, r4
 800a562:	210a      	movs	r1, #10
 800a564:	42ab      	cmp	r3, r5
 800a566:	d113      	bne.n	800a590 <_strtod_l+0x248>
 800a568:	1823      	adds	r3, r4, r0
 800a56a:	2b08      	cmp	r3, #8
 800a56c:	f104 0401 	add.w	r4, r4, #1
 800a570:	4404      	add	r4, r0
 800a572:	dc1b      	bgt.n	800a5ac <_strtod_l+0x264>
 800a574:	230a      	movs	r3, #10
 800a576:	9906      	ldr	r1, [sp, #24]
 800a578:	fb03 2301 	mla	r3, r3, r1, r2
 800a57c:	9306      	str	r3, [sp, #24]
 800a57e:	2300      	movs	r3, #0
 800a580:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a582:	4618      	mov	r0, r3
 800a584:	1c51      	adds	r1, r2, #1
 800a586:	9119      	str	r1, [sp, #100]	; 0x64
 800a588:	7852      	ldrb	r2, [r2, #1]
 800a58a:	e7ca      	b.n	800a522 <_strtod_l+0x1da>
 800a58c:	4658      	mov	r0, fp
 800a58e:	e7d3      	b.n	800a538 <_strtod_l+0x1f0>
 800a590:	2b08      	cmp	r3, #8
 800a592:	dc04      	bgt.n	800a59e <_strtod_l+0x256>
 800a594:	9f06      	ldr	r7, [sp, #24]
 800a596:	434f      	muls	r7, r1
 800a598:	9706      	str	r7, [sp, #24]
 800a59a:	3301      	adds	r3, #1
 800a59c:	e7e2      	b.n	800a564 <_strtod_l+0x21c>
 800a59e:	1c5f      	adds	r7, r3, #1
 800a5a0:	2f10      	cmp	r7, #16
 800a5a2:	bfde      	ittt	le
 800a5a4:	9f05      	ldrle	r7, [sp, #20]
 800a5a6:	434f      	mulle	r7, r1
 800a5a8:	9705      	strle	r7, [sp, #20]
 800a5aa:	e7f6      	b.n	800a59a <_strtod_l+0x252>
 800a5ac:	2c10      	cmp	r4, #16
 800a5ae:	bfdf      	itttt	le
 800a5b0:	230a      	movle	r3, #10
 800a5b2:	9905      	ldrle	r1, [sp, #20]
 800a5b4:	fb03 2301 	mlale	r3, r3, r1, r2
 800a5b8:	9305      	strle	r3, [sp, #20]
 800a5ba:	e7e0      	b.n	800a57e <_strtod_l+0x236>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e77b      	b.n	800a4bc <_strtod_l+0x174>
 800a5c4:	2700      	movs	r7, #0
 800a5c6:	1cb2      	adds	r2, r6, #2
 800a5c8:	9219      	str	r2, [sp, #100]	; 0x64
 800a5ca:	78b2      	ldrb	r2, [r6, #2]
 800a5cc:	e784      	b.n	800a4d8 <_strtod_l+0x190>
 800a5ce:	bf00      	nop
 800a5d0:	08034d78 	.word	0x08034d78
 800a5d4:	08034bf8 	.word	0x08034bf8
 800a5d8:	7ff00000 	.word	0x7ff00000
 800a5dc:	2701      	movs	r7, #1
 800a5de:	e7f2      	b.n	800a5c6 <_strtod_l+0x27e>
 800a5e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5e2:	1c51      	adds	r1, r2, #1
 800a5e4:	9119      	str	r1, [sp, #100]	; 0x64
 800a5e6:	7852      	ldrb	r2, [r2, #1]
 800a5e8:	2a30      	cmp	r2, #48	; 0x30
 800a5ea:	d0f9      	beq.n	800a5e0 <_strtod_l+0x298>
 800a5ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a5f0:	2908      	cmp	r1, #8
 800a5f2:	f63f af77 	bhi.w	800a4e4 <_strtod_l+0x19c>
 800a5f6:	f04f 0e0a 	mov.w	lr, #10
 800a5fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a5fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a600:	9209      	str	r2, [sp, #36]	; 0x24
 800a602:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a604:	1c51      	adds	r1, r2, #1
 800a606:	9119      	str	r1, [sp, #100]	; 0x64
 800a608:	7852      	ldrb	r2, [r2, #1]
 800a60a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a60e:	2d09      	cmp	r5, #9
 800a610:	d935      	bls.n	800a67e <_strtod_l+0x336>
 800a612:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a614:	1b49      	subs	r1, r1, r5
 800a616:	2908      	cmp	r1, #8
 800a618:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a61c:	dc02      	bgt.n	800a624 <_strtod_l+0x2dc>
 800a61e:	4565      	cmp	r5, ip
 800a620:	bfa8      	it	ge
 800a622:	4665      	movge	r5, ip
 800a624:	b107      	cbz	r7, 800a628 <_strtod_l+0x2e0>
 800a626:	426d      	negs	r5, r5
 800a628:	2c00      	cmp	r4, #0
 800a62a:	d14c      	bne.n	800a6c6 <_strtod_l+0x37e>
 800a62c:	9907      	ldr	r1, [sp, #28]
 800a62e:	4301      	orrs	r1, r0
 800a630:	f47f aecb 	bne.w	800a3ca <_strtod_l+0x82>
 800a634:	2b00      	cmp	r3, #0
 800a636:	f47f aee4 	bne.w	800a402 <_strtod_l+0xba>
 800a63a:	2a69      	cmp	r2, #105	; 0x69
 800a63c:	d026      	beq.n	800a68c <_strtod_l+0x344>
 800a63e:	dc23      	bgt.n	800a688 <_strtod_l+0x340>
 800a640:	2a49      	cmp	r2, #73	; 0x49
 800a642:	d023      	beq.n	800a68c <_strtod_l+0x344>
 800a644:	2a4e      	cmp	r2, #78	; 0x4e
 800a646:	f47f aedc 	bne.w	800a402 <_strtod_l+0xba>
 800a64a:	499d      	ldr	r1, [pc, #628]	; (800a8c0 <_strtod_l+0x578>)
 800a64c:	a819      	add	r0, sp, #100	; 0x64
 800a64e:	f003 fccf 	bl	800dff0 <__match>
 800a652:	2800      	cmp	r0, #0
 800a654:	f43f aed5 	beq.w	800a402 <_strtod_l+0xba>
 800a658:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	2b28      	cmp	r3, #40	; 0x28
 800a65e:	d12c      	bne.n	800a6ba <_strtod_l+0x372>
 800a660:	4998      	ldr	r1, [pc, #608]	; (800a8c4 <_strtod_l+0x57c>)
 800a662:	aa1c      	add	r2, sp, #112	; 0x70
 800a664:	a819      	add	r0, sp, #100	; 0x64
 800a666:	f003 fcd7 	bl	800e018 <__hexnan>
 800a66a:	2805      	cmp	r0, #5
 800a66c:	d125      	bne.n	800a6ba <_strtod_l+0x372>
 800a66e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a670:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a674:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a678:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a67c:	e6a5      	b.n	800a3ca <_strtod_l+0x82>
 800a67e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800a682:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a686:	e7bc      	b.n	800a602 <_strtod_l+0x2ba>
 800a688:	2a6e      	cmp	r2, #110	; 0x6e
 800a68a:	e7dc      	b.n	800a646 <_strtod_l+0x2fe>
 800a68c:	498e      	ldr	r1, [pc, #568]	; (800a8c8 <_strtod_l+0x580>)
 800a68e:	a819      	add	r0, sp, #100	; 0x64
 800a690:	f003 fcae 	bl	800dff0 <__match>
 800a694:	2800      	cmp	r0, #0
 800a696:	f43f aeb4 	beq.w	800a402 <_strtod_l+0xba>
 800a69a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a69c:	498b      	ldr	r1, [pc, #556]	; (800a8cc <_strtod_l+0x584>)
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	a819      	add	r0, sp, #100	; 0x64
 800a6a2:	9319      	str	r3, [sp, #100]	; 0x64
 800a6a4:	f003 fca4 	bl	800dff0 <__match>
 800a6a8:	b910      	cbnz	r0, 800a6b0 <_strtod_l+0x368>
 800a6aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	9319      	str	r3, [sp, #100]	; 0x64
 800a6b0:	f04f 0800 	mov.w	r8, #0
 800a6b4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a8d0 <_strtod_l+0x588>
 800a6b8:	e687      	b.n	800a3ca <_strtod_l+0x82>
 800a6ba:	4886      	ldr	r0, [pc, #536]	; (800a8d4 <_strtod_l+0x58c>)
 800a6bc:	f004 fa1c 	bl	800eaf8 <nan>
 800a6c0:	4680      	mov	r8, r0
 800a6c2:	4689      	mov	r9, r1
 800a6c4:	e681      	b.n	800a3ca <_strtod_l+0x82>
 800a6c6:	9b04      	ldr	r3, [sp, #16]
 800a6c8:	f1bb 0f00 	cmp.w	fp, #0
 800a6cc:	bf08      	it	eq
 800a6ce:	46a3      	moveq	fp, r4
 800a6d0:	1aeb      	subs	r3, r5, r3
 800a6d2:	2c10      	cmp	r4, #16
 800a6d4:	9806      	ldr	r0, [sp, #24]
 800a6d6:	4626      	mov	r6, r4
 800a6d8:	9307      	str	r3, [sp, #28]
 800a6da:	bfa8      	it	ge
 800a6dc:	2610      	movge	r6, #16
 800a6de:	f7f5 feed 	bl	80004bc <__aeabi_ui2d>
 800a6e2:	2c09      	cmp	r4, #9
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4689      	mov	r9, r1
 800a6e8:	dd13      	ble.n	800a712 <_strtod_l+0x3ca>
 800a6ea:	4b7b      	ldr	r3, [pc, #492]	; (800a8d8 <_strtod_l+0x590>)
 800a6ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6f4:	f7f5 ff5c 	bl	80005b0 <__aeabi_dmul>
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	9805      	ldr	r0, [sp, #20]
 800a6fc:	4689      	mov	r9, r1
 800a6fe:	f7f5 fedd 	bl	80004bc <__aeabi_ui2d>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	4640      	mov	r0, r8
 800a708:	4649      	mov	r1, r9
 800a70a:	f7f5 fd9b 	bl	8000244 <__adddf3>
 800a70e:	4680      	mov	r8, r0
 800a710:	4689      	mov	r9, r1
 800a712:	2c0f      	cmp	r4, #15
 800a714:	dc36      	bgt.n	800a784 <_strtod_l+0x43c>
 800a716:	9b07      	ldr	r3, [sp, #28]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f43f ae56 	beq.w	800a3ca <_strtod_l+0x82>
 800a71e:	dd22      	ble.n	800a766 <_strtod_l+0x41e>
 800a720:	2b16      	cmp	r3, #22
 800a722:	dc09      	bgt.n	800a738 <_strtod_l+0x3f0>
 800a724:	496c      	ldr	r1, [pc, #432]	; (800a8d8 <_strtod_l+0x590>)
 800a726:	4642      	mov	r2, r8
 800a728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a72c:	464b      	mov	r3, r9
 800a72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a732:	f7f5 ff3d 	bl	80005b0 <__aeabi_dmul>
 800a736:	e7c3      	b.n	800a6c0 <_strtod_l+0x378>
 800a738:	9a07      	ldr	r2, [sp, #28]
 800a73a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a73e:	4293      	cmp	r3, r2
 800a740:	db20      	blt.n	800a784 <_strtod_l+0x43c>
 800a742:	4d65      	ldr	r5, [pc, #404]	; (800a8d8 <_strtod_l+0x590>)
 800a744:	f1c4 040f 	rsb	r4, r4, #15
 800a748:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a74c:	4642      	mov	r2, r8
 800a74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a752:	464b      	mov	r3, r9
 800a754:	f7f5 ff2c 	bl	80005b0 <__aeabi_dmul>
 800a758:	9b07      	ldr	r3, [sp, #28]
 800a75a:	1b1c      	subs	r4, r3, r4
 800a75c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a760:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a764:	e7e5      	b.n	800a732 <_strtod_l+0x3ea>
 800a766:	9b07      	ldr	r3, [sp, #28]
 800a768:	3316      	adds	r3, #22
 800a76a:	db0b      	blt.n	800a784 <_strtod_l+0x43c>
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	4640      	mov	r0, r8
 800a770:	1b5d      	subs	r5, r3, r5
 800a772:	4b59      	ldr	r3, [pc, #356]	; (800a8d8 <_strtod_l+0x590>)
 800a774:	4649      	mov	r1, r9
 800a776:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a77a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a77e:	f7f6 f841 	bl	8000804 <__aeabi_ddiv>
 800a782:	e79d      	b.n	800a6c0 <_strtod_l+0x378>
 800a784:	9b07      	ldr	r3, [sp, #28]
 800a786:	1ba6      	subs	r6, r4, r6
 800a788:	441e      	add	r6, r3
 800a78a:	2e00      	cmp	r6, #0
 800a78c:	dd74      	ble.n	800a878 <_strtod_l+0x530>
 800a78e:	f016 030f 	ands.w	r3, r6, #15
 800a792:	d00a      	beq.n	800a7aa <_strtod_l+0x462>
 800a794:	4950      	ldr	r1, [pc, #320]	; (800a8d8 <_strtod_l+0x590>)
 800a796:	4642      	mov	r2, r8
 800a798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a79c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	f7f5 ff05 	bl	80005b0 <__aeabi_dmul>
 800a7a6:	4680      	mov	r8, r0
 800a7a8:	4689      	mov	r9, r1
 800a7aa:	f036 060f 	bics.w	r6, r6, #15
 800a7ae:	d052      	beq.n	800a856 <_strtod_l+0x50e>
 800a7b0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a7b4:	dd27      	ble.n	800a806 <_strtod_l+0x4be>
 800a7b6:	f04f 0b00 	mov.w	fp, #0
 800a7ba:	f8cd b010 	str.w	fp, [sp, #16]
 800a7be:	f8cd b020 	str.w	fp, [sp, #32]
 800a7c2:	f8cd b018 	str.w	fp, [sp, #24]
 800a7c6:	2322      	movs	r3, #34	; 0x22
 800a7c8:	f04f 0800 	mov.w	r8, #0
 800a7cc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a8d0 <_strtod_l+0x588>
 800a7d0:	f8ca 3000 	str.w	r3, [sl]
 800a7d4:	9b08      	ldr	r3, [sp, #32]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f43f adf7 	beq.w	800a3ca <_strtod_l+0x82>
 800a7dc:	4650      	mov	r0, sl
 800a7de:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a7e0:	f003 fd11 	bl	800e206 <_Bfree>
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	9906      	ldr	r1, [sp, #24]
 800a7e8:	f003 fd0d 	bl	800e206 <_Bfree>
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	9904      	ldr	r1, [sp, #16]
 800a7f0:	f003 fd09 	bl	800e206 <_Bfree>
 800a7f4:	4650      	mov	r0, sl
 800a7f6:	9908      	ldr	r1, [sp, #32]
 800a7f8:	f003 fd05 	bl	800e206 <_Bfree>
 800a7fc:	4659      	mov	r1, fp
 800a7fe:	4650      	mov	r0, sl
 800a800:	f003 fd01 	bl	800e206 <_Bfree>
 800a804:	e5e1      	b.n	800a3ca <_strtod_l+0x82>
 800a806:	4b35      	ldr	r3, [pc, #212]	; (800a8dc <_strtod_l+0x594>)
 800a808:	4640      	mov	r0, r8
 800a80a:	9305      	str	r3, [sp, #20]
 800a80c:	2300      	movs	r3, #0
 800a80e:	4649      	mov	r1, r9
 800a810:	461f      	mov	r7, r3
 800a812:	1136      	asrs	r6, r6, #4
 800a814:	2e01      	cmp	r6, #1
 800a816:	dc21      	bgt.n	800a85c <_strtod_l+0x514>
 800a818:	b10b      	cbz	r3, 800a81e <_strtod_l+0x4d6>
 800a81a:	4680      	mov	r8, r0
 800a81c:	4689      	mov	r9, r1
 800a81e:	4b2f      	ldr	r3, [pc, #188]	; (800a8dc <_strtod_l+0x594>)
 800a820:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a824:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a828:	4642      	mov	r2, r8
 800a82a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a82e:	464b      	mov	r3, r9
 800a830:	f7f5 febe 	bl	80005b0 <__aeabi_dmul>
 800a834:	4b26      	ldr	r3, [pc, #152]	; (800a8d0 <_strtod_l+0x588>)
 800a836:	460a      	mov	r2, r1
 800a838:	400b      	ands	r3, r1
 800a83a:	4929      	ldr	r1, [pc, #164]	; (800a8e0 <_strtod_l+0x598>)
 800a83c:	4680      	mov	r8, r0
 800a83e:	428b      	cmp	r3, r1
 800a840:	d8b9      	bhi.n	800a7b6 <_strtod_l+0x46e>
 800a842:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a846:	428b      	cmp	r3, r1
 800a848:	bf86      	itte	hi
 800a84a:	f04f 38ff 	movhi.w	r8, #4294967295
 800a84e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a8e4 <_strtod_l+0x59c>
 800a852:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a856:	2300      	movs	r3, #0
 800a858:	9305      	str	r3, [sp, #20]
 800a85a:	e07f      	b.n	800a95c <_strtod_l+0x614>
 800a85c:	07f2      	lsls	r2, r6, #31
 800a85e:	d505      	bpl.n	800a86c <_strtod_l+0x524>
 800a860:	9b05      	ldr	r3, [sp, #20]
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fea3 	bl	80005b0 <__aeabi_dmul>
 800a86a:	2301      	movs	r3, #1
 800a86c:	9a05      	ldr	r2, [sp, #20]
 800a86e:	3701      	adds	r7, #1
 800a870:	3208      	adds	r2, #8
 800a872:	1076      	asrs	r6, r6, #1
 800a874:	9205      	str	r2, [sp, #20]
 800a876:	e7cd      	b.n	800a814 <_strtod_l+0x4cc>
 800a878:	d0ed      	beq.n	800a856 <_strtod_l+0x50e>
 800a87a:	4276      	negs	r6, r6
 800a87c:	f016 020f 	ands.w	r2, r6, #15
 800a880:	d00a      	beq.n	800a898 <_strtod_l+0x550>
 800a882:	4b15      	ldr	r3, [pc, #84]	; (800a8d8 <_strtod_l+0x590>)
 800a884:	4640      	mov	r0, r8
 800a886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a88a:	4649      	mov	r1, r9
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	f7f5 ffb8 	bl	8000804 <__aeabi_ddiv>
 800a894:	4680      	mov	r8, r0
 800a896:	4689      	mov	r9, r1
 800a898:	1136      	asrs	r6, r6, #4
 800a89a:	d0dc      	beq.n	800a856 <_strtod_l+0x50e>
 800a89c:	2e1f      	cmp	r6, #31
 800a89e:	dd23      	ble.n	800a8e8 <_strtod_l+0x5a0>
 800a8a0:	f04f 0b00 	mov.w	fp, #0
 800a8a4:	f8cd b010 	str.w	fp, [sp, #16]
 800a8a8:	f8cd b020 	str.w	fp, [sp, #32]
 800a8ac:	f8cd b018 	str.w	fp, [sp, #24]
 800a8b0:	2322      	movs	r3, #34	; 0x22
 800a8b2:	f04f 0800 	mov.w	r8, #0
 800a8b6:	f04f 0900 	mov.w	r9, #0
 800a8ba:	f8ca 3000 	str.w	r3, [sl]
 800a8be:	e789      	b.n	800a7d4 <_strtod_l+0x48c>
 800a8c0:	08034c55 	.word	0x08034c55
 800a8c4:	08034c0c 	.word	0x08034c0c
 800a8c8:	08034c4d 	.word	0x08034c4d
 800a8cc:	08034ca3 	.word	0x08034ca3
 800a8d0:	7ff00000 	.word	0x7ff00000
 800a8d4:	08034f17 	.word	0x08034f17
 800a8d8:	08034e08 	.word	0x08034e08
 800a8dc:	08034de0 	.word	0x08034de0
 800a8e0:	7ca00000 	.word	0x7ca00000
 800a8e4:	7fefffff 	.word	0x7fefffff
 800a8e8:	f016 0310 	ands.w	r3, r6, #16
 800a8ec:	bf18      	it	ne
 800a8ee:	236a      	movne	r3, #106	; 0x6a
 800a8f0:	4640      	mov	r0, r8
 800a8f2:	9305      	str	r3, [sp, #20]
 800a8f4:	4649      	mov	r1, r9
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4fb0      	ldr	r7, [pc, #704]	; (800abbc <_strtod_l+0x874>)
 800a8fa:	07f2      	lsls	r2, r6, #31
 800a8fc:	d504      	bpl.n	800a908 <_strtod_l+0x5c0>
 800a8fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a902:	f7f5 fe55 	bl	80005b0 <__aeabi_dmul>
 800a906:	2301      	movs	r3, #1
 800a908:	1076      	asrs	r6, r6, #1
 800a90a:	f107 0708 	add.w	r7, r7, #8
 800a90e:	d1f4      	bne.n	800a8fa <_strtod_l+0x5b2>
 800a910:	b10b      	cbz	r3, 800a916 <_strtod_l+0x5ce>
 800a912:	4680      	mov	r8, r0
 800a914:	4689      	mov	r9, r1
 800a916:	9b05      	ldr	r3, [sp, #20]
 800a918:	b1c3      	cbz	r3, 800a94c <_strtod_l+0x604>
 800a91a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a91e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a922:	2b00      	cmp	r3, #0
 800a924:	4649      	mov	r1, r9
 800a926:	dd11      	ble.n	800a94c <_strtod_l+0x604>
 800a928:	2b1f      	cmp	r3, #31
 800a92a:	f340 8127 	ble.w	800ab7c <_strtod_l+0x834>
 800a92e:	2b34      	cmp	r3, #52	; 0x34
 800a930:	bfd8      	it	le
 800a932:	f04f 33ff 	movle.w	r3, #4294967295
 800a936:	f04f 0800 	mov.w	r8, #0
 800a93a:	bfcf      	iteee	gt
 800a93c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a940:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a944:	fa03 f202 	lslle.w	r2, r3, r2
 800a948:	ea02 0901 	andle.w	r9, r2, r1
 800a94c:	2200      	movs	r2, #0
 800a94e:	2300      	movs	r3, #0
 800a950:	4640      	mov	r0, r8
 800a952:	4649      	mov	r1, r9
 800a954:	f7f6 f894 	bl	8000a80 <__aeabi_dcmpeq>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d1a1      	bne.n	800a8a0 <_strtod_l+0x558>
 800a95c:	9b06      	ldr	r3, [sp, #24]
 800a95e:	465a      	mov	r2, fp
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	4650      	mov	r0, sl
 800a964:	4623      	mov	r3, r4
 800a966:	9908      	ldr	r1, [sp, #32]
 800a968:	f003 fc9c 	bl	800e2a4 <__s2b>
 800a96c:	9008      	str	r0, [sp, #32]
 800a96e:	2800      	cmp	r0, #0
 800a970:	f43f af21 	beq.w	800a7b6 <_strtod_l+0x46e>
 800a974:	9b04      	ldr	r3, [sp, #16]
 800a976:	f04f 0b00 	mov.w	fp, #0
 800a97a:	1b5d      	subs	r5, r3, r5
 800a97c:	9b07      	ldr	r3, [sp, #28]
 800a97e:	f8cd b010 	str.w	fp, [sp, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	bfb4      	ite	lt
 800a986:	462b      	movlt	r3, r5
 800a988:	2300      	movge	r3, #0
 800a98a:	930e      	str	r3, [sp, #56]	; 0x38
 800a98c:	9b07      	ldr	r3, [sp, #28]
 800a98e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a992:	9314      	str	r3, [sp, #80]	; 0x50
 800a994:	9b08      	ldr	r3, [sp, #32]
 800a996:	4650      	mov	r0, sl
 800a998:	6859      	ldr	r1, [r3, #4]
 800a99a:	f003 fc0f 	bl	800e1bc <_Balloc>
 800a99e:	9006      	str	r0, [sp, #24]
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	f43f af10 	beq.w	800a7c6 <_strtod_l+0x47e>
 800a9a6:	9b08      	ldr	r3, [sp, #32]
 800a9a8:	300c      	adds	r0, #12
 800a9aa:	691a      	ldr	r2, [r3, #16]
 800a9ac:	f103 010c 	add.w	r1, r3, #12
 800a9b0:	3202      	adds	r2, #2
 800a9b2:	0092      	lsls	r2, r2, #2
 800a9b4:	f003 fbda 	bl	800e16c <memcpy>
 800a9b8:	ab1c      	add	r3, sp, #112	; 0x70
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	ab1b      	add	r3, sp, #108	; 0x6c
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	4650      	mov	r0, sl
 800a9c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a9ca:	f003 ff93 	bl	800e8f4 <__d2b>
 800a9ce:	901a      	str	r0, [sp, #104]	; 0x68
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	f43f aef8 	beq.w	800a7c6 <_strtod_l+0x47e>
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	4650      	mov	r0, sl
 800a9da:	f003 fcfb 	bl	800e3d4 <__i2b>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	9004      	str	r0, [sp, #16]
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	f43f aeef 	beq.w	800a7c6 <_strtod_l+0x47e>
 800a9e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a9ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a9ec:	2d00      	cmp	r5, #0
 800a9ee:	bfab      	itete	ge
 800a9f0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a9f2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a9f4:	18ee      	addge	r6, r5, r3
 800a9f6:	1b5c      	sublt	r4, r3, r5
 800a9f8:	9b05      	ldr	r3, [sp, #20]
 800a9fa:	bfa8      	it	ge
 800a9fc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a9fe:	eba5 0503 	sub.w	r5, r5, r3
 800aa02:	4415      	add	r5, r2
 800aa04:	4b6e      	ldr	r3, [pc, #440]	; (800abc0 <_strtod_l+0x878>)
 800aa06:	f105 35ff 	add.w	r5, r5, #4294967295
 800aa0a:	bfb8      	it	lt
 800aa0c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800aa0e:	429d      	cmp	r5, r3
 800aa10:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aa14:	f280 80c4 	bge.w	800aba0 <_strtod_l+0x858>
 800aa18:	1b5b      	subs	r3, r3, r5
 800aa1a:	2b1f      	cmp	r3, #31
 800aa1c:	f04f 0701 	mov.w	r7, #1
 800aa20:	eba2 0203 	sub.w	r2, r2, r3
 800aa24:	f300 80b1 	bgt.w	800ab8a <_strtod_l+0x842>
 800aa28:	2500      	movs	r5, #0
 800aa2a:	fa07 f303 	lsl.w	r3, r7, r3
 800aa2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa30:	18b7      	adds	r7, r6, r2
 800aa32:	9b05      	ldr	r3, [sp, #20]
 800aa34:	42be      	cmp	r6, r7
 800aa36:	4414      	add	r4, r2
 800aa38:	441c      	add	r4, r3
 800aa3a:	4633      	mov	r3, r6
 800aa3c:	bfa8      	it	ge
 800aa3e:	463b      	movge	r3, r7
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	bfa8      	it	ge
 800aa44:	4623      	movge	r3, r4
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bfc2      	ittt	gt
 800aa4a:	1aff      	subgt	r7, r7, r3
 800aa4c:	1ae4      	subgt	r4, r4, r3
 800aa4e:	1af6      	subgt	r6, r6, r3
 800aa50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dd17      	ble.n	800aa86 <_strtod_l+0x73e>
 800aa56:	461a      	mov	r2, r3
 800aa58:	4650      	mov	r0, sl
 800aa5a:	9904      	ldr	r1, [sp, #16]
 800aa5c:	f003 fd78 	bl	800e550 <__pow5mult>
 800aa60:	9004      	str	r0, [sp, #16]
 800aa62:	2800      	cmp	r0, #0
 800aa64:	f43f aeaf 	beq.w	800a7c6 <_strtod_l+0x47e>
 800aa68:	4601      	mov	r1, r0
 800aa6a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aa6c:	4650      	mov	r0, sl
 800aa6e:	f003 fcc7 	bl	800e400 <__multiply>
 800aa72:	9009      	str	r0, [sp, #36]	; 0x24
 800aa74:	2800      	cmp	r0, #0
 800aa76:	f43f aea6 	beq.w	800a7c6 <_strtod_l+0x47e>
 800aa7a:	4650      	mov	r0, sl
 800aa7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aa7e:	f003 fbc2 	bl	800e206 <_Bfree>
 800aa82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa84:	931a      	str	r3, [sp, #104]	; 0x68
 800aa86:	2f00      	cmp	r7, #0
 800aa88:	f300 808e 	bgt.w	800aba8 <_strtod_l+0x860>
 800aa8c:	9b07      	ldr	r3, [sp, #28]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	dd08      	ble.n	800aaa4 <_strtod_l+0x75c>
 800aa92:	4650      	mov	r0, sl
 800aa94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa96:	9906      	ldr	r1, [sp, #24]
 800aa98:	f003 fd5a 	bl	800e550 <__pow5mult>
 800aa9c:	9006      	str	r0, [sp, #24]
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f43f ae91 	beq.w	800a7c6 <_strtod_l+0x47e>
 800aaa4:	2c00      	cmp	r4, #0
 800aaa6:	dd08      	ble.n	800aaba <_strtod_l+0x772>
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	4650      	mov	r0, sl
 800aaac:	9906      	ldr	r1, [sp, #24]
 800aaae:	f003 fd8f 	bl	800e5d0 <__lshift>
 800aab2:	9006      	str	r0, [sp, #24]
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f43f ae86 	beq.w	800a7c6 <_strtod_l+0x47e>
 800aaba:	2e00      	cmp	r6, #0
 800aabc:	dd08      	ble.n	800aad0 <_strtod_l+0x788>
 800aabe:	4632      	mov	r2, r6
 800aac0:	4650      	mov	r0, sl
 800aac2:	9904      	ldr	r1, [sp, #16]
 800aac4:	f003 fd84 	bl	800e5d0 <__lshift>
 800aac8:	9004      	str	r0, [sp, #16]
 800aaca:	2800      	cmp	r0, #0
 800aacc:	f43f ae7b 	beq.w	800a7c6 <_strtod_l+0x47e>
 800aad0:	4650      	mov	r0, sl
 800aad2:	9a06      	ldr	r2, [sp, #24]
 800aad4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aad6:	f003 fe07 	bl	800e6e8 <__mdiff>
 800aada:	4683      	mov	fp, r0
 800aadc:	2800      	cmp	r0, #0
 800aade:	f43f ae72 	beq.w	800a7c6 <_strtod_l+0x47e>
 800aae2:	2400      	movs	r4, #0
 800aae4:	68c3      	ldr	r3, [r0, #12]
 800aae6:	9904      	ldr	r1, [sp, #16]
 800aae8:	60c4      	str	r4, [r0, #12]
 800aaea:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaec:	f003 fde0 	bl	800e6b0 <__mcmp>
 800aaf0:	42a0      	cmp	r0, r4
 800aaf2:	da6b      	bge.n	800abcc <_strtod_l+0x884>
 800aaf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaf6:	ea53 0308 	orrs.w	r3, r3, r8
 800aafa:	f040 8091 	bne.w	800ac20 <_strtod_l+0x8d8>
 800aafe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f040 808c 	bne.w	800ac20 <_strtod_l+0x8d8>
 800ab08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab0c:	0d1b      	lsrs	r3, r3, #20
 800ab0e:	051b      	lsls	r3, r3, #20
 800ab10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ab14:	f240 8084 	bls.w	800ac20 <_strtod_l+0x8d8>
 800ab18:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ab1c:	b91b      	cbnz	r3, 800ab26 <_strtod_l+0x7de>
 800ab1e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	dd7c      	ble.n	800ac20 <_strtod_l+0x8d8>
 800ab26:	4659      	mov	r1, fp
 800ab28:	2201      	movs	r2, #1
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	f003 fd50 	bl	800e5d0 <__lshift>
 800ab30:	9904      	ldr	r1, [sp, #16]
 800ab32:	4683      	mov	fp, r0
 800ab34:	f003 fdbc 	bl	800e6b0 <__mcmp>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	dd71      	ble.n	800ac20 <_strtod_l+0x8d8>
 800ab3c:	9905      	ldr	r1, [sp, #20]
 800ab3e:	464b      	mov	r3, r9
 800ab40:	4a20      	ldr	r2, [pc, #128]	; (800abc4 <_strtod_l+0x87c>)
 800ab42:	2900      	cmp	r1, #0
 800ab44:	f000 808c 	beq.w	800ac60 <_strtod_l+0x918>
 800ab48:	ea02 0109 	and.w	r1, r2, r9
 800ab4c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ab50:	f300 8086 	bgt.w	800ac60 <_strtod_l+0x918>
 800ab54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ab58:	f77f aeaa 	ble.w	800a8b0 <_strtod_l+0x568>
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	4649      	mov	r1, r9
 800ab60:	4b19      	ldr	r3, [pc, #100]	; (800abc8 <_strtod_l+0x880>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	f7f5 fd24 	bl	80005b0 <__aeabi_dmul>
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4303      	orrs	r3, r0
 800ab6c:	bf08      	it	eq
 800ab6e:	2322      	moveq	r3, #34	; 0x22
 800ab70:	4680      	mov	r8, r0
 800ab72:	4689      	mov	r9, r1
 800ab74:	bf08      	it	eq
 800ab76:	f8ca 3000 	streq.w	r3, [sl]
 800ab7a:	e62f      	b.n	800a7dc <_strtod_l+0x494>
 800ab7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab80:	fa02 f303 	lsl.w	r3, r2, r3
 800ab84:	ea03 0808 	and.w	r8, r3, r8
 800ab88:	e6e0      	b.n	800a94c <_strtod_l+0x604>
 800ab8a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ab8e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ab92:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ab96:	35e2      	adds	r5, #226	; 0xe2
 800ab98:	fa07 f505 	lsl.w	r5, r7, r5
 800ab9c:	970f      	str	r7, [sp, #60]	; 0x3c
 800ab9e:	e747      	b.n	800aa30 <_strtod_l+0x6e8>
 800aba0:	2301      	movs	r3, #1
 800aba2:	2500      	movs	r5, #0
 800aba4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aba6:	e743      	b.n	800aa30 <_strtod_l+0x6e8>
 800aba8:	463a      	mov	r2, r7
 800abaa:	4650      	mov	r0, sl
 800abac:	991a      	ldr	r1, [sp, #104]	; 0x68
 800abae:	f003 fd0f 	bl	800e5d0 <__lshift>
 800abb2:	901a      	str	r0, [sp, #104]	; 0x68
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f47f af69 	bne.w	800aa8c <_strtod_l+0x744>
 800abba:	e604      	b.n	800a7c6 <_strtod_l+0x47e>
 800abbc:	08034c20 	.word	0x08034c20
 800abc0:	fffffc02 	.word	0xfffffc02
 800abc4:	7ff00000 	.word	0x7ff00000
 800abc8:	39500000 	.word	0x39500000
 800abcc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800abd0:	d165      	bne.n	800ac9e <_strtod_l+0x956>
 800abd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abd8:	b35a      	cbz	r2, 800ac32 <_strtod_l+0x8ea>
 800abda:	4a99      	ldr	r2, [pc, #612]	; (800ae40 <_strtod_l+0xaf8>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d12b      	bne.n	800ac38 <_strtod_l+0x8f0>
 800abe0:	9b05      	ldr	r3, [sp, #20]
 800abe2:	4641      	mov	r1, r8
 800abe4:	b303      	cbz	r3, 800ac28 <_strtod_l+0x8e0>
 800abe6:	464a      	mov	r2, r9
 800abe8:	4b96      	ldr	r3, [pc, #600]	; (800ae44 <_strtod_l+0xafc>)
 800abea:	4013      	ands	r3, r2
 800abec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800abf0:	f04f 32ff 	mov.w	r2, #4294967295
 800abf4:	d81b      	bhi.n	800ac2e <_strtod_l+0x8e6>
 800abf6:	0d1b      	lsrs	r3, r3, #20
 800abf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ac00:	4299      	cmp	r1, r3
 800ac02:	d119      	bne.n	800ac38 <_strtod_l+0x8f0>
 800ac04:	4b90      	ldr	r3, [pc, #576]	; (800ae48 <_strtod_l+0xb00>)
 800ac06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d102      	bne.n	800ac12 <_strtod_l+0x8ca>
 800ac0c:	3101      	adds	r1, #1
 800ac0e:	f43f adda 	beq.w	800a7c6 <_strtod_l+0x47e>
 800ac12:	f04f 0800 	mov.w	r8, #0
 800ac16:	4b8b      	ldr	r3, [pc, #556]	; (800ae44 <_strtod_l+0xafc>)
 800ac18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac1a:	401a      	ands	r2, r3
 800ac1c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d19a      	bne.n	800ab5c <_strtod_l+0x814>
 800ac26:	e5d9      	b.n	800a7dc <_strtod_l+0x494>
 800ac28:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2c:	e7e8      	b.n	800ac00 <_strtod_l+0x8b8>
 800ac2e:	4613      	mov	r3, r2
 800ac30:	e7e6      	b.n	800ac00 <_strtod_l+0x8b8>
 800ac32:	ea53 0308 	orrs.w	r3, r3, r8
 800ac36:	d081      	beq.n	800ab3c <_strtod_l+0x7f4>
 800ac38:	b1e5      	cbz	r5, 800ac74 <_strtod_l+0x92c>
 800ac3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3c:	421d      	tst	r5, r3
 800ac3e:	d0ef      	beq.n	800ac20 <_strtod_l+0x8d8>
 800ac40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac42:	4640      	mov	r0, r8
 800ac44:	4649      	mov	r1, r9
 800ac46:	9a05      	ldr	r2, [sp, #20]
 800ac48:	b1c3      	cbz	r3, 800ac7c <_strtod_l+0x934>
 800ac4a:	f7ff fb5b 	bl	800a304 <sulp>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac56:	f7f5 faf5 	bl	8000244 <__adddf3>
 800ac5a:	4680      	mov	r8, r0
 800ac5c:	4689      	mov	r9, r1
 800ac5e:	e7df      	b.n	800ac20 <_strtod_l+0x8d8>
 800ac60:	4013      	ands	r3, r2
 800ac62:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac66:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ac6a:	f04f 38ff 	mov.w	r8, #4294967295
 800ac6e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ac72:	e7d5      	b.n	800ac20 <_strtod_l+0x8d8>
 800ac74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac76:	ea13 0f08 	tst.w	r3, r8
 800ac7a:	e7e0      	b.n	800ac3e <_strtod_l+0x8f6>
 800ac7c:	f7ff fb42 	bl	800a304 <sulp>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac88:	f7f5 fada 	bl	8000240 <__aeabi_dsub>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2300      	movs	r3, #0
 800ac90:	4680      	mov	r8, r0
 800ac92:	4689      	mov	r9, r1
 800ac94:	f7f5 fef4 	bl	8000a80 <__aeabi_dcmpeq>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d0c1      	beq.n	800ac20 <_strtod_l+0x8d8>
 800ac9c:	e608      	b.n	800a8b0 <_strtod_l+0x568>
 800ac9e:	4658      	mov	r0, fp
 800aca0:	9904      	ldr	r1, [sp, #16]
 800aca2:	f003 fe83 	bl	800e9ac <__ratio>
 800aca6:	2200      	movs	r2, #0
 800aca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acac:	4606      	mov	r6, r0
 800acae:	460f      	mov	r7, r1
 800acb0:	f7f5 fefa 	bl	8000aa8 <__aeabi_dcmple>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d070      	beq.n	800ad9a <_strtod_l+0xa52>
 800acb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d042      	beq.n	800ad44 <_strtod_l+0x9fc>
 800acbe:	2600      	movs	r6, #0
 800acc0:	4f62      	ldr	r7, [pc, #392]	; (800ae4c <_strtod_l+0xb04>)
 800acc2:	4d62      	ldr	r5, [pc, #392]	; (800ae4c <_strtod_l+0xb04>)
 800acc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acca:	0d1b      	lsrs	r3, r3, #20
 800accc:	051b      	lsls	r3, r3, #20
 800acce:	930f      	str	r3, [sp, #60]	; 0x3c
 800acd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acd2:	4b5f      	ldr	r3, [pc, #380]	; (800ae50 <_strtod_l+0xb08>)
 800acd4:	429a      	cmp	r2, r3
 800acd6:	f040 80c3 	bne.w	800ae60 <_strtod_l+0xb18>
 800acda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acdc:	4640      	mov	r0, r8
 800acde:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800ace2:	4649      	mov	r1, r9
 800ace4:	f003 fd8c 	bl	800e800 <__ulp>
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	4630      	mov	r0, r6
 800acee:	4639      	mov	r1, r7
 800acf0:	f7f5 fc5e 	bl	80005b0 <__aeabi_dmul>
 800acf4:	4642      	mov	r2, r8
 800acf6:	464b      	mov	r3, r9
 800acf8:	f7f5 faa4 	bl	8000244 <__adddf3>
 800acfc:	460b      	mov	r3, r1
 800acfe:	4951      	ldr	r1, [pc, #324]	; (800ae44 <_strtod_l+0xafc>)
 800ad00:	4a54      	ldr	r2, [pc, #336]	; (800ae54 <_strtod_l+0xb0c>)
 800ad02:	4019      	ands	r1, r3
 800ad04:	4291      	cmp	r1, r2
 800ad06:	4680      	mov	r8, r0
 800ad08:	d95d      	bls.n	800adc6 <_strtod_l+0xa7e>
 800ad0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad0c:	4b4e      	ldr	r3, [pc, #312]	; (800ae48 <_strtod_l+0xb00>)
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d103      	bne.n	800ad1a <_strtod_l+0x9d2>
 800ad12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad14:	3301      	adds	r3, #1
 800ad16:	f43f ad56 	beq.w	800a7c6 <_strtod_l+0x47e>
 800ad1a:	f04f 38ff 	mov.w	r8, #4294967295
 800ad1e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800ae48 <_strtod_l+0xb00>
 800ad22:	4650      	mov	r0, sl
 800ad24:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad26:	f003 fa6e 	bl	800e206 <_Bfree>
 800ad2a:	4650      	mov	r0, sl
 800ad2c:	9906      	ldr	r1, [sp, #24]
 800ad2e:	f003 fa6a 	bl	800e206 <_Bfree>
 800ad32:	4650      	mov	r0, sl
 800ad34:	9904      	ldr	r1, [sp, #16]
 800ad36:	f003 fa66 	bl	800e206 <_Bfree>
 800ad3a:	4659      	mov	r1, fp
 800ad3c:	4650      	mov	r0, sl
 800ad3e:	f003 fa62 	bl	800e206 <_Bfree>
 800ad42:	e627      	b.n	800a994 <_strtod_l+0x64c>
 800ad44:	f1b8 0f00 	cmp.w	r8, #0
 800ad48:	d119      	bne.n	800ad7e <_strtod_l+0xa36>
 800ad4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad50:	b9e3      	cbnz	r3, 800ad8c <_strtod_l+0xa44>
 800ad52:	2200      	movs	r2, #0
 800ad54:	4630      	mov	r0, r6
 800ad56:	4639      	mov	r1, r7
 800ad58:	4b3c      	ldr	r3, [pc, #240]	; (800ae4c <_strtod_l+0xb04>)
 800ad5a:	f7f5 fe9b 	bl	8000a94 <__aeabi_dcmplt>
 800ad5e:	b9c8      	cbnz	r0, 800ad94 <_strtod_l+0xa4c>
 800ad60:	2200      	movs	r2, #0
 800ad62:	4630      	mov	r0, r6
 800ad64:	4639      	mov	r1, r7
 800ad66:	4b3c      	ldr	r3, [pc, #240]	; (800ae58 <_strtod_l+0xb10>)
 800ad68:	f7f5 fc22 	bl	80005b0 <__aeabi_dmul>
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	460d      	mov	r5, r1
 800ad70:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ad74:	9416      	str	r4, [sp, #88]	; 0x58
 800ad76:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad78:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800ad7c:	e7a2      	b.n	800acc4 <_strtod_l+0x97c>
 800ad7e:	f1b8 0f01 	cmp.w	r8, #1
 800ad82:	d103      	bne.n	800ad8c <_strtod_l+0xa44>
 800ad84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f43f ad92 	beq.w	800a8b0 <_strtod_l+0x568>
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	2400      	movs	r4, #0
 800ad90:	4f32      	ldr	r7, [pc, #200]	; (800ae5c <_strtod_l+0xb14>)
 800ad92:	e796      	b.n	800acc2 <_strtod_l+0x97a>
 800ad94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ad96:	4d30      	ldr	r5, [pc, #192]	; (800ae58 <_strtod_l+0xb10>)
 800ad98:	e7ea      	b.n	800ad70 <_strtod_l+0xa28>
 800ad9a:	4b2f      	ldr	r3, [pc, #188]	; (800ae58 <_strtod_l+0xb10>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4630      	mov	r0, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	f7f5 fc05 	bl	80005b0 <__aeabi_dmul>
 800ada6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada8:	4604      	mov	r4, r0
 800adaa:	460d      	mov	r5, r1
 800adac:	b933      	cbnz	r3, 800adbc <_strtod_l+0xa74>
 800adae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adb2:	9010      	str	r0, [sp, #64]	; 0x40
 800adb4:	9311      	str	r3, [sp, #68]	; 0x44
 800adb6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800adba:	e783      	b.n	800acc4 <_strtod_l+0x97c>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800adc4:	e7f7      	b.n	800adb6 <_strtod_l+0xa6e>
 800adc6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800adca:	9b05      	ldr	r3, [sp, #20]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1a8      	bne.n	800ad22 <_strtod_l+0x9da>
 800add0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800add4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800add6:	0d1b      	lsrs	r3, r3, #20
 800add8:	051b      	lsls	r3, r3, #20
 800adda:	429a      	cmp	r2, r3
 800addc:	d1a1      	bne.n	800ad22 <_strtod_l+0x9da>
 800adde:	4620      	mov	r0, r4
 800ade0:	4629      	mov	r1, r5
 800ade2:	f7f5 ff45 	bl	8000c70 <__aeabi_d2lz>
 800ade6:	f7f5 fbb5 	bl	8000554 <__aeabi_l2d>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4620      	mov	r0, r4
 800adf0:	4629      	mov	r1, r5
 800adf2:	f7f5 fa25 	bl	8000240 <__aeabi_dsub>
 800adf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adfc:	ea43 0308 	orr.w	r3, r3, r8
 800ae00:	4313      	orrs	r3, r2
 800ae02:	4604      	mov	r4, r0
 800ae04:	460d      	mov	r5, r1
 800ae06:	d066      	beq.n	800aed6 <_strtod_l+0xb8e>
 800ae08:	a309      	add	r3, pc, #36	; (adr r3, 800ae30 <_strtod_l+0xae8>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	f7f5 fe41 	bl	8000a94 <__aeabi_dcmplt>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	f47f ace2 	bne.w	800a7dc <_strtod_l+0x494>
 800ae18:	a307      	add	r3, pc, #28	; (adr r3, 800ae38 <_strtod_l+0xaf0>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	f7f5 fe55 	bl	8000ad0 <__aeabi_dcmpgt>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f43f af7b 	beq.w	800ad22 <_strtod_l+0x9da>
 800ae2c:	e4d6      	b.n	800a7dc <_strtod_l+0x494>
 800ae2e:	bf00      	nop
 800ae30:	94a03595 	.word	0x94a03595
 800ae34:	3fdfffff 	.word	0x3fdfffff
 800ae38:	35afe535 	.word	0x35afe535
 800ae3c:	3fe00000 	.word	0x3fe00000
 800ae40:	000fffff 	.word	0x000fffff
 800ae44:	7ff00000 	.word	0x7ff00000
 800ae48:	7fefffff 	.word	0x7fefffff
 800ae4c:	3ff00000 	.word	0x3ff00000
 800ae50:	7fe00000 	.word	0x7fe00000
 800ae54:	7c9fffff 	.word	0x7c9fffff
 800ae58:	3fe00000 	.word	0x3fe00000
 800ae5c:	bff00000 	.word	0xbff00000
 800ae60:	9b05      	ldr	r3, [sp, #20]
 800ae62:	b313      	cbz	r3, 800aeaa <_strtod_l+0xb62>
 800ae64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae6a:	d81e      	bhi.n	800aeaa <_strtod_l+0xb62>
 800ae6c:	a326      	add	r3, pc, #152	; (adr r3, 800af08 <_strtod_l+0xbc0>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	4620      	mov	r0, r4
 800ae74:	4629      	mov	r1, r5
 800ae76:	f7f5 fe17 	bl	8000aa8 <__aeabi_dcmple>
 800ae7a:	b190      	cbz	r0, 800aea2 <_strtod_l+0xb5a>
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f7f5 fe6e 	bl	8000b60 <__aeabi_d2uiz>
 800ae84:	2801      	cmp	r0, #1
 800ae86:	bf38      	it	cc
 800ae88:	2001      	movcc	r0, #1
 800ae8a:	f7f5 fb17 	bl	80004bc <__aeabi_ui2d>
 800ae8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae90:	4604      	mov	r4, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	b9d3      	cbnz	r3, 800aecc <_strtod_l+0xb84>
 800ae96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae9a:	9012      	str	r0, [sp, #72]	; 0x48
 800ae9c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800aea2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aea4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800aea8:	1a9f      	subs	r7, r3, r2
 800aeaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aeae:	f003 fca7 	bl	800e800 <__ulp>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	f7f5 fb79 	bl	80005b0 <__aeabi_dmul>
 800aebe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aec2:	f7f5 f9bf 	bl	8000244 <__adddf3>
 800aec6:	4680      	mov	r8, r0
 800aec8:	4689      	mov	r9, r1
 800aeca:	e77e      	b.n	800adca <_strtod_l+0xa82>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800aed4:	e7e3      	b.n	800ae9e <_strtod_l+0xb56>
 800aed6:	a30e      	add	r3, pc, #56	; (adr r3, 800af10 <_strtod_l+0xbc8>)
 800aed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aedc:	f7f5 fdda 	bl	8000a94 <__aeabi_dcmplt>
 800aee0:	e7a1      	b.n	800ae26 <_strtod_l+0xade>
 800aee2:	2300      	movs	r3, #0
 800aee4:	930a      	str	r3, [sp, #40]	; 0x28
 800aee6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aee8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	f7ff ba71 	b.w	800a3d2 <_strtod_l+0x8a>
 800aef0:	2a65      	cmp	r2, #101	; 0x65
 800aef2:	f43f ab63 	beq.w	800a5bc <_strtod_l+0x274>
 800aef6:	2a45      	cmp	r2, #69	; 0x45
 800aef8:	f43f ab60 	beq.w	800a5bc <_strtod_l+0x274>
 800aefc:	2301      	movs	r3, #1
 800aefe:	f7ff bb95 	b.w	800a62c <_strtod_l+0x2e4>
 800af02:	bf00      	nop
 800af04:	f3af 8000 	nop.w
 800af08:	ffc00000 	.word	0xffc00000
 800af0c:	41dfffff 	.word	0x41dfffff
 800af10:	94a03595 	.word	0x94a03595
 800af14:	3fcfffff 	.word	0x3fcfffff

0800af18 <_strtod_r>:
 800af18:	4b01      	ldr	r3, [pc, #4]	; (800af20 <_strtod_r+0x8>)
 800af1a:	f7ff ba15 	b.w	800a348 <_strtod_l>
 800af1e:	bf00      	nop
 800af20:	2000047c 	.word	0x2000047c

0800af24 <_strtol_l.constprop.0>:
 800af24:	2b01      	cmp	r3, #1
 800af26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af2a:	4680      	mov	r8, r0
 800af2c:	d001      	beq.n	800af32 <_strtol_l.constprop.0+0xe>
 800af2e:	2b24      	cmp	r3, #36	; 0x24
 800af30:	d906      	bls.n	800af40 <_strtol_l.constprop.0+0x1c>
 800af32:	f7fd faad 	bl	8008490 <__errno>
 800af36:	2316      	movs	r3, #22
 800af38:	6003      	str	r3, [r0, #0]
 800af3a:	2000      	movs	r0, #0
 800af3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af40:	460d      	mov	r5, r1
 800af42:	4f35      	ldr	r7, [pc, #212]	; (800b018 <_strtol_l.constprop.0+0xf4>)
 800af44:	4628      	mov	r0, r5
 800af46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af4a:	5de6      	ldrb	r6, [r4, r7]
 800af4c:	f016 0608 	ands.w	r6, r6, #8
 800af50:	d1f8      	bne.n	800af44 <_strtol_l.constprop.0+0x20>
 800af52:	2c2d      	cmp	r4, #45	; 0x2d
 800af54:	d12f      	bne.n	800afb6 <_strtol_l.constprop.0+0x92>
 800af56:	2601      	movs	r6, #1
 800af58:	782c      	ldrb	r4, [r5, #0]
 800af5a:	1c85      	adds	r5, r0, #2
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d057      	beq.n	800b010 <_strtol_l.constprop.0+0xec>
 800af60:	2b10      	cmp	r3, #16
 800af62:	d109      	bne.n	800af78 <_strtol_l.constprop.0+0x54>
 800af64:	2c30      	cmp	r4, #48	; 0x30
 800af66:	d107      	bne.n	800af78 <_strtol_l.constprop.0+0x54>
 800af68:	7828      	ldrb	r0, [r5, #0]
 800af6a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800af6e:	2858      	cmp	r0, #88	; 0x58
 800af70:	d149      	bne.n	800b006 <_strtol_l.constprop.0+0xe2>
 800af72:	2310      	movs	r3, #16
 800af74:	786c      	ldrb	r4, [r5, #1]
 800af76:	3502      	adds	r5, #2
 800af78:	2700      	movs	r7, #0
 800af7a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800af7e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800af82:	fbbe f9f3 	udiv	r9, lr, r3
 800af86:	4638      	mov	r0, r7
 800af88:	fb03 ea19 	mls	sl, r3, r9, lr
 800af8c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800af90:	f1bc 0f09 	cmp.w	ip, #9
 800af94:	d814      	bhi.n	800afc0 <_strtol_l.constprop.0+0x9c>
 800af96:	4664      	mov	r4, ip
 800af98:	42a3      	cmp	r3, r4
 800af9a:	dd22      	ble.n	800afe2 <_strtol_l.constprop.0+0xbe>
 800af9c:	2f00      	cmp	r7, #0
 800af9e:	db1d      	blt.n	800afdc <_strtol_l.constprop.0+0xb8>
 800afa0:	4581      	cmp	r9, r0
 800afa2:	d31b      	bcc.n	800afdc <_strtol_l.constprop.0+0xb8>
 800afa4:	d101      	bne.n	800afaa <_strtol_l.constprop.0+0x86>
 800afa6:	45a2      	cmp	sl, r4
 800afa8:	db18      	blt.n	800afdc <_strtol_l.constprop.0+0xb8>
 800afaa:	2701      	movs	r7, #1
 800afac:	fb00 4003 	mla	r0, r0, r3, r4
 800afb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afb4:	e7ea      	b.n	800af8c <_strtol_l.constprop.0+0x68>
 800afb6:	2c2b      	cmp	r4, #43	; 0x2b
 800afb8:	bf04      	itt	eq
 800afba:	782c      	ldrbeq	r4, [r5, #0]
 800afbc:	1c85      	addeq	r5, r0, #2
 800afbe:	e7cd      	b.n	800af5c <_strtol_l.constprop.0+0x38>
 800afc0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800afc4:	f1bc 0f19 	cmp.w	ip, #25
 800afc8:	d801      	bhi.n	800afce <_strtol_l.constprop.0+0xaa>
 800afca:	3c37      	subs	r4, #55	; 0x37
 800afcc:	e7e4      	b.n	800af98 <_strtol_l.constprop.0+0x74>
 800afce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800afd2:	f1bc 0f19 	cmp.w	ip, #25
 800afd6:	d804      	bhi.n	800afe2 <_strtol_l.constprop.0+0xbe>
 800afd8:	3c57      	subs	r4, #87	; 0x57
 800afda:	e7dd      	b.n	800af98 <_strtol_l.constprop.0+0x74>
 800afdc:	f04f 37ff 	mov.w	r7, #4294967295
 800afe0:	e7e6      	b.n	800afb0 <_strtol_l.constprop.0+0x8c>
 800afe2:	2f00      	cmp	r7, #0
 800afe4:	da07      	bge.n	800aff6 <_strtol_l.constprop.0+0xd2>
 800afe6:	2322      	movs	r3, #34	; 0x22
 800afe8:	4670      	mov	r0, lr
 800afea:	f8c8 3000 	str.w	r3, [r8]
 800afee:	2a00      	cmp	r2, #0
 800aff0:	d0a4      	beq.n	800af3c <_strtol_l.constprop.0+0x18>
 800aff2:	1e69      	subs	r1, r5, #1
 800aff4:	e005      	b.n	800b002 <_strtol_l.constprop.0+0xde>
 800aff6:	b106      	cbz	r6, 800affa <_strtol_l.constprop.0+0xd6>
 800aff8:	4240      	negs	r0, r0
 800affa:	2a00      	cmp	r2, #0
 800affc:	d09e      	beq.n	800af3c <_strtol_l.constprop.0+0x18>
 800affe:	2f00      	cmp	r7, #0
 800b000:	d1f7      	bne.n	800aff2 <_strtol_l.constprop.0+0xce>
 800b002:	6011      	str	r1, [r2, #0]
 800b004:	e79a      	b.n	800af3c <_strtol_l.constprop.0+0x18>
 800b006:	2430      	movs	r4, #48	; 0x30
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1b5      	bne.n	800af78 <_strtol_l.constprop.0+0x54>
 800b00c:	2308      	movs	r3, #8
 800b00e:	e7b3      	b.n	800af78 <_strtol_l.constprop.0+0x54>
 800b010:	2c30      	cmp	r4, #48	; 0x30
 800b012:	d0a9      	beq.n	800af68 <_strtol_l.constprop.0+0x44>
 800b014:	230a      	movs	r3, #10
 800b016:	e7af      	b.n	800af78 <_strtol_l.constprop.0+0x54>
 800b018:	08034aed 	.word	0x08034aed

0800b01c <_strtol_r>:
 800b01c:	f7ff bf82 	b.w	800af24 <_strtol_l.constprop.0>

0800b020 <_strtoll_l.constprop.0>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	4688      	mov	r8, r1
 800b026:	461e      	mov	r6, r3
 800b028:	460d      	mov	r5, r1
 800b02a:	b085      	sub	sp, #20
 800b02c:	9201      	str	r2, [sp, #4]
 800b02e:	4a46      	ldr	r2, [pc, #280]	; (800b148 <_strtoll_l.constprop.0+0x128>)
 800b030:	9003      	str	r0, [sp, #12]
 800b032:	462b      	mov	r3, r5
 800b034:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b038:	5ca7      	ldrb	r7, [r4, r2]
 800b03a:	f017 0708 	ands.w	r7, r7, #8
 800b03e:	d1f8      	bne.n	800b032 <_strtoll_l.constprop.0+0x12>
 800b040:	2c2d      	cmp	r4, #45	; 0x2d
 800b042:	d147      	bne.n	800b0d4 <_strtoll_l.constprop.0+0xb4>
 800b044:	2701      	movs	r7, #1
 800b046:	782c      	ldrb	r4, [r5, #0]
 800b048:	1c9d      	adds	r5, r3, #2
 800b04a:	2e00      	cmp	r6, #0
 800b04c:	d077      	beq.n	800b13e <_strtoll_l.constprop.0+0x11e>
 800b04e:	2e10      	cmp	r6, #16
 800b050:	d109      	bne.n	800b066 <_strtoll_l.constprop.0+0x46>
 800b052:	2c30      	cmp	r4, #48	; 0x30
 800b054:	d107      	bne.n	800b066 <_strtoll_l.constprop.0+0x46>
 800b056:	782b      	ldrb	r3, [r5, #0]
 800b058:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b05c:	2b58      	cmp	r3, #88	; 0x58
 800b05e:	d169      	bne.n	800b134 <_strtoll_l.constprop.0+0x114>
 800b060:	2610      	movs	r6, #16
 800b062:	786c      	ldrb	r4, [r5, #1]
 800b064:	3502      	adds	r5, #2
 800b066:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800b06a:	f107 3bff 	add.w	fp, r7, #4294967295
 800b06e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b072:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b076:	4632      	mov	r2, r6
 800b078:	464b      	mov	r3, r9
 800b07a:	4658      	mov	r0, fp
 800b07c:	4651      	mov	r1, sl
 800b07e:	f7f5 fddf 	bl	8000c40 <__aeabi_uldivmod>
 800b082:	2300      	movs	r3, #0
 800b084:	468c      	mov	ip, r1
 800b086:	9202      	str	r2, [sp, #8]
 800b088:	4619      	mov	r1, r3
 800b08a:	4602      	mov	r2, r0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b092:	f1be 0f09 	cmp.w	lr, #9
 800b096:	d822      	bhi.n	800b0de <_strtoll_l.constprop.0+0xbe>
 800b098:	4674      	mov	r4, lr
 800b09a:	42a6      	cmp	r6, r4
 800b09c:	dd30      	ble.n	800b100 <_strtoll_l.constprop.0+0xe0>
 800b09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a2:	d014      	beq.n	800b0ce <_strtoll_l.constprop.0+0xae>
 800b0a4:	4282      	cmp	r2, r0
 800b0a6:	eb7c 0301 	sbcs.w	r3, ip, r1
 800b0aa:	d326      	bcc.n	800b0fa <_strtoll_l.constprop.0+0xda>
 800b0ac:	458c      	cmp	ip, r1
 800b0ae:	bf08      	it	eq
 800b0b0:	4282      	cmpeq	r2, r0
 800b0b2:	d102      	bne.n	800b0ba <_strtoll_l.constprop.0+0x9a>
 800b0b4:	9b02      	ldr	r3, [sp, #8]
 800b0b6:	42a3      	cmp	r3, r4
 800b0b8:	db1f      	blt.n	800b0fa <_strtoll_l.constprop.0+0xda>
 800b0ba:	4371      	muls	r1, r6
 800b0bc:	fb00 1109 	mla	r1, r0, r9, r1
 800b0c0:	fba6 0300 	umull	r0, r3, r6, r0
 800b0c4:	4419      	add	r1, r3
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	1820      	adds	r0, r4, r0
 800b0ca:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b0ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0d2:	e7dc      	b.n	800b08e <_strtoll_l.constprop.0+0x6e>
 800b0d4:	2c2b      	cmp	r4, #43	; 0x2b
 800b0d6:	bf04      	itt	eq
 800b0d8:	782c      	ldrbeq	r4, [r5, #0]
 800b0da:	1c9d      	addeq	r5, r3, #2
 800b0dc:	e7b5      	b.n	800b04a <_strtoll_l.constprop.0+0x2a>
 800b0de:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b0e2:	f1be 0f19 	cmp.w	lr, #25
 800b0e6:	d801      	bhi.n	800b0ec <_strtoll_l.constprop.0+0xcc>
 800b0e8:	3c37      	subs	r4, #55	; 0x37
 800b0ea:	e7d6      	b.n	800b09a <_strtoll_l.constprop.0+0x7a>
 800b0ec:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b0f0:	f1be 0f19 	cmp.w	lr, #25
 800b0f4:	d804      	bhi.n	800b100 <_strtoll_l.constprop.0+0xe0>
 800b0f6:	3c57      	subs	r4, #87	; 0x57
 800b0f8:	e7cf      	b.n	800b09a <_strtoll_l.constprop.0+0x7a>
 800b0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0fe:	e7e6      	b.n	800b0ce <_strtoll_l.constprop.0+0xae>
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	d109      	bne.n	800b118 <_strtoll_l.constprop.0+0xf8>
 800b104:	2322      	movs	r3, #34	; 0x22
 800b106:	9a03      	ldr	r2, [sp, #12]
 800b108:	4658      	mov	r0, fp
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	9b01      	ldr	r3, [sp, #4]
 800b10e:	4651      	mov	r1, sl
 800b110:	b953      	cbnz	r3, 800b128 <_strtoll_l.constprop.0+0x108>
 800b112:	b005      	add	sp, #20
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	b117      	cbz	r7, 800b120 <_strtoll_l.constprop.0+0x100>
 800b11a:	4240      	negs	r0, r0
 800b11c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b120:	9a01      	ldr	r2, [sp, #4]
 800b122:	2a00      	cmp	r2, #0
 800b124:	d0f5      	beq.n	800b112 <_strtoll_l.constprop.0+0xf2>
 800b126:	b10b      	cbz	r3, 800b12c <_strtoll_l.constprop.0+0x10c>
 800b128:	f105 38ff 	add.w	r8, r5, #4294967295
 800b12c:	9b01      	ldr	r3, [sp, #4]
 800b12e:	f8c3 8000 	str.w	r8, [r3]
 800b132:	e7ee      	b.n	800b112 <_strtoll_l.constprop.0+0xf2>
 800b134:	2430      	movs	r4, #48	; 0x30
 800b136:	2e00      	cmp	r6, #0
 800b138:	d195      	bne.n	800b066 <_strtoll_l.constprop.0+0x46>
 800b13a:	2608      	movs	r6, #8
 800b13c:	e793      	b.n	800b066 <_strtoll_l.constprop.0+0x46>
 800b13e:	2c30      	cmp	r4, #48	; 0x30
 800b140:	d089      	beq.n	800b056 <_strtoll_l.constprop.0+0x36>
 800b142:	260a      	movs	r6, #10
 800b144:	e78f      	b.n	800b066 <_strtoll_l.constprop.0+0x46>
 800b146:	bf00      	nop
 800b148:	08034aed 	.word	0x08034aed

0800b14c <_strtoll_r>:
 800b14c:	f7ff bf68 	b.w	800b020 <_strtoll_l.constprop.0>

0800b150 <_strtoul_l.constprop.0>:
 800b150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b154:	4686      	mov	lr, r0
 800b156:	460d      	mov	r5, r1
 800b158:	4f35      	ldr	r7, [pc, #212]	; (800b230 <_strtoul_l.constprop.0+0xe0>)
 800b15a:	4628      	mov	r0, r5
 800b15c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b160:	5de6      	ldrb	r6, [r4, r7]
 800b162:	f016 0608 	ands.w	r6, r6, #8
 800b166:	d1f8      	bne.n	800b15a <_strtoul_l.constprop.0+0xa>
 800b168:	2c2d      	cmp	r4, #45	; 0x2d
 800b16a:	d12f      	bne.n	800b1cc <_strtoul_l.constprop.0+0x7c>
 800b16c:	2601      	movs	r6, #1
 800b16e:	782c      	ldrb	r4, [r5, #0]
 800b170:	1c85      	adds	r5, r0, #2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d057      	beq.n	800b226 <_strtoul_l.constprop.0+0xd6>
 800b176:	2b10      	cmp	r3, #16
 800b178:	d109      	bne.n	800b18e <_strtoul_l.constprop.0+0x3e>
 800b17a:	2c30      	cmp	r4, #48	; 0x30
 800b17c:	d107      	bne.n	800b18e <_strtoul_l.constprop.0+0x3e>
 800b17e:	7828      	ldrb	r0, [r5, #0]
 800b180:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b184:	2858      	cmp	r0, #88	; 0x58
 800b186:	d149      	bne.n	800b21c <_strtoul_l.constprop.0+0xcc>
 800b188:	2310      	movs	r3, #16
 800b18a:	786c      	ldrb	r4, [r5, #1]
 800b18c:	3502      	adds	r5, #2
 800b18e:	f04f 38ff 	mov.w	r8, #4294967295
 800b192:	fbb8 f8f3 	udiv	r8, r8, r3
 800b196:	2700      	movs	r7, #0
 800b198:	fb03 f908 	mul.w	r9, r3, r8
 800b19c:	4638      	mov	r0, r7
 800b19e:	ea6f 0909 	mvn.w	r9, r9
 800b1a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b1a6:	f1bc 0f09 	cmp.w	ip, #9
 800b1aa:	d814      	bhi.n	800b1d6 <_strtoul_l.constprop.0+0x86>
 800b1ac:	4664      	mov	r4, ip
 800b1ae:	42a3      	cmp	r3, r4
 800b1b0:	dd22      	ble.n	800b1f8 <_strtoul_l.constprop.0+0xa8>
 800b1b2:	2f00      	cmp	r7, #0
 800b1b4:	db1d      	blt.n	800b1f2 <_strtoul_l.constprop.0+0xa2>
 800b1b6:	4580      	cmp	r8, r0
 800b1b8:	d31b      	bcc.n	800b1f2 <_strtoul_l.constprop.0+0xa2>
 800b1ba:	d101      	bne.n	800b1c0 <_strtoul_l.constprop.0+0x70>
 800b1bc:	45a1      	cmp	r9, r4
 800b1be:	db18      	blt.n	800b1f2 <_strtoul_l.constprop.0+0xa2>
 800b1c0:	2701      	movs	r7, #1
 800b1c2:	fb00 4003 	mla	r0, r0, r3, r4
 800b1c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1ca:	e7ea      	b.n	800b1a2 <_strtoul_l.constprop.0+0x52>
 800b1cc:	2c2b      	cmp	r4, #43	; 0x2b
 800b1ce:	bf04      	itt	eq
 800b1d0:	782c      	ldrbeq	r4, [r5, #0]
 800b1d2:	1c85      	addeq	r5, r0, #2
 800b1d4:	e7cd      	b.n	800b172 <_strtoul_l.constprop.0+0x22>
 800b1d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b1da:	f1bc 0f19 	cmp.w	ip, #25
 800b1de:	d801      	bhi.n	800b1e4 <_strtoul_l.constprop.0+0x94>
 800b1e0:	3c37      	subs	r4, #55	; 0x37
 800b1e2:	e7e4      	b.n	800b1ae <_strtoul_l.constprop.0+0x5e>
 800b1e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b1e8:	f1bc 0f19 	cmp.w	ip, #25
 800b1ec:	d804      	bhi.n	800b1f8 <_strtoul_l.constprop.0+0xa8>
 800b1ee:	3c57      	subs	r4, #87	; 0x57
 800b1f0:	e7dd      	b.n	800b1ae <_strtoul_l.constprop.0+0x5e>
 800b1f2:	f04f 37ff 	mov.w	r7, #4294967295
 800b1f6:	e7e6      	b.n	800b1c6 <_strtoul_l.constprop.0+0x76>
 800b1f8:	2f00      	cmp	r7, #0
 800b1fa:	da07      	bge.n	800b20c <_strtoul_l.constprop.0+0xbc>
 800b1fc:	2322      	movs	r3, #34	; 0x22
 800b1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b202:	f8ce 3000 	str.w	r3, [lr]
 800b206:	b932      	cbnz	r2, 800b216 <_strtoul_l.constprop.0+0xc6>
 800b208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b20c:	b106      	cbz	r6, 800b210 <_strtoul_l.constprop.0+0xc0>
 800b20e:	4240      	negs	r0, r0
 800b210:	2a00      	cmp	r2, #0
 800b212:	d0f9      	beq.n	800b208 <_strtoul_l.constprop.0+0xb8>
 800b214:	b107      	cbz	r7, 800b218 <_strtoul_l.constprop.0+0xc8>
 800b216:	1e69      	subs	r1, r5, #1
 800b218:	6011      	str	r1, [r2, #0]
 800b21a:	e7f5      	b.n	800b208 <_strtoul_l.constprop.0+0xb8>
 800b21c:	2430      	movs	r4, #48	; 0x30
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1b5      	bne.n	800b18e <_strtoul_l.constprop.0+0x3e>
 800b222:	2308      	movs	r3, #8
 800b224:	e7b3      	b.n	800b18e <_strtoul_l.constprop.0+0x3e>
 800b226:	2c30      	cmp	r4, #48	; 0x30
 800b228:	d0a9      	beq.n	800b17e <_strtoul_l.constprop.0+0x2e>
 800b22a:	230a      	movs	r3, #10
 800b22c:	e7af      	b.n	800b18e <_strtoul_l.constprop.0+0x3e>
 800b22e:	bf00      	nop
 800b230:	08034aed 	.word	0x08034aed

0800b234 <_strtoul_r>:
 800b234:	f7ff bf8c 	b.w	800b150 <_strtoul_l.constprop.0>

0800b238 <_strtoull_l.constprop.0>:
 800b238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	4689      	mov	r9, r1
 800b23e:	461d      	mov	r5, r3
 800b240:	460e      	mov	r6, r1
 800b242:	4692      	mov	sl, r2
 800b244:	4a47      	ldr	r2, [pc, #284]	; (800b364 <_strtoull_l.constprop.0+0x12c>)
 800b246:	9001      	str	r0, [sp, #4]
 800b248:	4633      	mov	r3, r6
 800b24a:	f816 4b01 	ldrb.w	r4, [r6], #1
 800b24e:	5ca7      	ldrb	r7, [r4, r2]
 800b250:	f017 0708 	ands.w	r7, r7, #8
 800b254:	d1f8      	bne.n	800b248 <_strtoull_l.constprop.0+0x10>
 800b256:	2c2d      	cmp	r4, #45	; 0x2d
 800b258:	d14a      	bne.n	800b2f0 <_strtoull_l.constprop.0+0xb8>
 800b25a:	2701      	movs	r7, #1
 800b25c:	7834      	ldrb	r4, [r6, #0]
 800b25e:	1c9e      	adds	r6, r3, #2
 800b260:	2d00      	cmp	r5, #0
 800b262:	d07b      	beq.n	800b35c <_strtoull_l.constprop.0+0x124>
 800b264:	2d10      	cmp	r5, #16
 800b266:	d109      	bne.n	800b27c <_strtoull_l.constprop.0+0x44>
 800b268:	2c30      	cmp	r4, #48	; 0x30
 800b26a:	d107      	bne.n	800b27c <_strtoull_l.constprop.0+0x44>
 800b26c:	7833      	ldrb	r3, [r6, #0]
 800b26e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b272:	2b58      	cmp	r3, #88	; 0x58
 800b274:	d16d      	bne.n	800b352 <_strtoull_l.constprop.0+0x11a>
 800b276:	2510      	movs	r5, #16
 800b278:	7874      	ldrb	r4, [r6, #1]
 800b27a:	3602      	adds	r6, #2
 800b27c:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800b280:	462a      	mov	r2, r5
 800b282:	465b      	mov	r3, fp
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	f04f 31ff 	mov.w	r1, #4294967295
 800b28c:	f7f5 fcd8 	bl	8000c40 <__aeabi_uldivmod>
 800b290:	462a      	mov	r2, r5
 800b292:	9000      	str	r0, [sp, #0]
 800b294:	4688      	mov	r8, r1
 800b296:	465b      	mov	r3, fp
 800b298:	f04f 30ff 	mov.w	r0, #4294967295
 800b29c:	f04f 31ff 	mov.w	r1, #4294967295
 800b2a0:	f7f5 fcce 	bl	8000c40 <__aeabi_uldivmod>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b2ae:	f1bc 0f09 	cmp.w	ip, #9
 800b2b2:	d822      	bhi.n	800b2fa <_strtoull_l.constprop.0+0xc2>
 800b2b4:	4664      	mov	r4, ip
 800b2b6:	42a5      	cmp	r5, r4
 800b2b8:	dd30      	ble.n	800b31c <_strtoull_l.constprop.0+0xe4>
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	db2b      	blt.n	800b316 <_strtoull_l.constprop.0+0xde>
 800b2be:	9b00      	ldr	r3, [sp, #0]
 800b2c0:	4283      	cmp	r3, r0
 800b2c2:	eb78 0301 	sbcs.w	r3, r8, r1
 800b2c6:	d326      	bcc.n	800b316 <_strtoull_l.constprop.0+0xde>
 800b2c8:	9b00      	ldr	r3, [sp, #0]
 800b2ca:	4588      	cmp	r8, r1
 800b2cc:	bf08      	it	eq
 800b2ce:	4283      	cmpeq	r3, r0
 800b2d0:	d101      	bne.n	800b2d6 <_strtoull_l.constprop.0+0x9e>
 800b2d2:	42a2      	cmp	r2, r4
 800b2d4:	db1f      	blt.n	800b316 <_strtoull_l.constprop.0+0xde>
 800b2d6:	4369      	muls	r1, r5
 800b2d8:	fb00 110b 	mla	r1, r0, fp, r1
 800b2dc:	fba5 0300 	umull	r0, r3, r5, r0
 800b2e0:	4419      	add	r1, r3
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	1820      	adds	r0, r4, r0
 800b2e6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b2ea:	f816 4b01 	ldrb.w	r4, [r6], #1
 800b2ee:	e7dc      	b.n	800b2aa <_strtoull_l.constprop.0+0x72>
 800b2f0:	2c2b      	cmp	r4, #43	; 0x2b
 800b2f2:	bf04      	itt	eq
 800b2f4:	7834      	ldrbeq	r4, [r6, #0]
 800b2f6:	1c9e      	addeq	r6, r3, #2
 800b2f8:	e7b2      	b.n	800b260 <_strtoull_l.constprop.0+0x28>
 800b2fa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b2fe:	f1bc 0f19 	cmp.w	ip, #25
 800b302:	d801      	bhi.n	800b308 <_strtoull_l.constprop.0+0xd0>
 800b304:	3c37      	subs	r4, #55	; 0x37
 800b306:	e7d6      	b.n	800b2b6 <_strtoull_l.constprop.0+0x7e>
 800b308:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b30c:	f1bc 0f19 	cmp.w	ip, #25
 800b310:	d804      	bhi.n	800b31c <_strtoull_l.constprop.0+0xe4>
 800b312:	3c57      	subs	r4, #87	; 0x57
 800b314:	e7cf      	b.n	800b2b6 <_strtoull_l.constprop.0+0x7e>
 800b316:	f04f 33ff 	mov.w	r3, #4294967295
 800b31a:	e7e6      	b.n	800b2ea <_strtoull_l.constprop.0+0xb2>
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	da0b      	bge.n	800b338 <_strtoull_l.constprop.0+0x100>
 800b320:	2322      	movs	r3, #34	; 0x22
 800b322:	f04f 30ff 	mov.w	r0, #4294967295
 800b326:	9a01      	ldr	r2, [sp, #4]
 800b328:	4601      	mov	r1, r0
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	f1ba 0f00 	cmp.w	sl, #0
 800b330:	d10a      	bne.n	800b348 <_strtoull_l.constprop.0+0x110>
 800b332:	b003      	add	sp, #12
 800b334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b338:	b117      	cbz	r7, 800b340 <_strtoull_l.constprop.0+0x108>
 800b33a:	4240      	negs	r0, r0
 800b33c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b340:	f1ba 0f00 	cmp.w	sl, #0
 800b344:	d0f5      	beq.n	800b332 <_strtoull_l.constprop.0+0xfa>
 800b346:	b10b      	cbz	r3, 800b34c <_strtoull_l.constprop.0+0x114>
 800b348:	f106 39ff 	add.w	r9, r6, #4294967295
 800b34c:	f8ca 9000 	str.w	r9, [sl]
 800b350:	e7ef      	b.n	800b332 <_strtoull_l.constprop.0+0xfa>
 800b352:	2430      	movs	r4, #48	; 0x30
 800b354:	2d00      	cmp	r5, #0
 800b356:	d191      	bne.n	800b27c <_strtoull_l.constprop.0+0x44>
 800b358:	2508      	movs	r5, #8
 800b35a:	e78f      	b.n	800b27c <_strtoull_l.constprop.0+0x44>
 800b35c:	2c30      	cmp	r4, #48	; 0x30
 800b35e:	d085      	beq.n	800b26c <_strtoull_l.constprop.0+0x34>
 800b360:	250a      	movs	r5, #10
 800b362:	e78b      	b.n	800b27c <_strtoull_l.constprop.0+0x44>
 800b364:	08034aed 	.word	0x08034aed

0800b368 <_strtoull_r>:
 800b368:	f7ff bf66 	b.w	800b238 <_strtoull_l.constprop.0>

0800b36c <_sungetc_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	1c4b      	adds	r3, r1, #1
 800b370:	4614      	mov	r4, r2
 800b372:	d103      	bne.n	800b37c <_sungetc_r+0x10>
 800b374:	f04f 35ff 	mov.w	r5, #4294967295
 800b378:	4628      	mov	r0, r5
 800b37a:	bd38      	pop	{r3, r4, r5, pc}
 800b37c:	8993      	ldrh	r3, [r2, #12]
 800b37e:	b2cd      	uxtb	r5, r1
 800b380:	f023 0320 	bic.w	r3, r3, #32
 800b384:	8193      	strh	r3, [r2, #12]
 800b386:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b388:	6852      	ldr	r2, [r2, #4]
 800b38a:	b18b      	cbz	r3, 800b3b0 <_sungetc_r+0x44>
 800b38c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b38e:	4293      	cmp	r3, r2
 800b390:	dd08      	ble.n	800b3a4 <_sungetc_r+0x38>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	1e5a      	subs	r2, r3, #1
 800b396:	6022      	str	r2, [r4, #0]
 800b398:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b39c:	6863      	ldr	r3, [r4, #4]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	6063      	str	r3, [r4, #4]
 800b3a2:	e7e9      	b.n	800b378 <_sungetc_r+0xc>
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	f001 fa54 	bl	800c852 <__submore>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d0f1      	beq.n	800b392 <_sungetc_r+0x26>
 800b3ae:	e7e1      	b.n	800b374 <_sungetc_r+0x8>
 800b3b0:	6921      	ldr	r1, [r4, #16]
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	b151      	cbz	r1, 800b3cc <_sungetc_r+0x60>
 800b3b6:	4299      	cmp	r1, r3
 800b3b8:	d208      	bcs.n	800b3cc <_sungetc_r+0x60>
 800b3ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b3be:	42a9      	cmp	r1, r5
 800b3c0:	d104      	bne.n	800b3cc <_sungetc_r+0x60>
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	3201      	adds	r2, #1
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	6062      	str	r2, [r4, #4]
 800b3ca:	e7d5      	b.n	800b378 <_sungetc_r+0xc>
 800b3cc:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800b3d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b3d4:	6323      	str	r3, [r4, #48]	; 0x30
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	6363      	str	r3, [r4, #52]	; 0x34
 800b3da:	4623      	mov	r3, r4
 800b3dc:	f803 5f42 	strb.w	r5, [r3, #66]!
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e7dc      	b.n	800b3a0 <_sungetc_r+0x34>

0800b3e6 <__ssrefill_r>:
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800b3ec:	b169      	cbz	r1, 800b40a <__ssrefill_r+0x24>
 800b3ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b3f2:	4299      	cmp	r1, r3
 800b3f4:	d001      	beq.n	800b3fa <__ssrefill_r+0x14>
 800b3f6:	f002 fa65 	bl	800d8c4 <_free_r>
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b3fe:	6320      	str	r0, [r4, #48]	; 0x30
 800b400:	6063      	str	r3, [r4, #4]
 800b402:	b113      	cbz	r3, 800b40a <__ssrefill_r+0x24>
 800b404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	f04f 30ff 	mov.w	r0, #4294967295
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	2300      	movs	r3, #0
 800b414:	6063      	str	r3, [r4, #4]
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	f043 0320 	orr.w	r3, r3, #32
 800b41c:	81a3      	strh	r3, [r4, #12]
 800b41e:	e7f3      	b.n	800b408 <__ssrefill_r+0x22>

0800b420 <_sfread_r>:
 800b420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	461f      	mov	r7, r3
 800b426:	4613      	mov	r3, r2
 800b428:	437b      	muls	r3, r7
 800b42a:	4682      	mov	sl, r0
 800b42c:	4688      	mov	r8, r1
 800b42e:	4691      	mov	r9, r2
 800b430:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b432:	d027      	beq.n	800b484 <_sfread_r+0x64>
 800b434:	461e      	mov	r6, r3
 800b436:	e9d4 1500 	ldrd	r1, r5, [r4]
 800b43a:	42b5      	cmp	r5, r6
 800b43c:	d30b      	bcc.n	800b456 <_sfread_r+0x36>
 800b43e:	4632      	mov	r2, r6
 800b440:	4640      	mov	r0, r8
 800b442:	f002 fe93 	bl	800e16c <memcpy>
 800b446:	6862      	ldr	r2, [r4, #4]
 800b448:	6821      	ldr	r1, [r4, #0]
 800b44a:	1b92      	subs	r2, r2, r6
 800b44c:	4431      	add	r1, r6
 800b44e:	463b      	mov	r3, r7
 800b450:	6062      	str	r2, [r4, #4]
 800b452:	6021      	str	r1, [r4, #0]
 800b454:	e016      	b.n	800b484 <_sfread_r+0x64>
 800b456:	462a      	mov	r2, r5
 800b458:	4640      	mov	r0, r8
 800b45a:	9301      	str	r3, [sp, #4]
 800b45c:	f002 fe86 	bl	800e16c <memcpy>
 800b460:	2300      	movs	r3, #0
 800b462:	6822      	ldr	r2, [r4, #0]
 800b464:	6063      	str	r3, [r4, #4]
 800b466:	442a      	add	r2, r5
 800b468:	4621      	mov	r1, r4
 800b46a:	4650      	mov	r0, sl
 800b46c:	6022      	str	r2, [r4, #0]
 800b46e:	f7ff ffba 	bl	800b3e6 <__ssrefill_r>
 800b472:	44a8      	add	r8, r5
 800b474:	9b01      	ldr	r3, [sp, #4]
 800b476:	eba6 0b05 	sub.w	fp, r6, r5
 800b47a:	b138      	cbz	r0, 800b48c <_sfread_r+0x6c>
 800b47c:	18e9      	adds	r1, r5, r3
 800b47e:	1b89      	subs	r1, r1, r6
 800b480:	fbb1 f3f9 	udiv	r3, r1, r9
 800b484:	4618      	mov	r0, r3
 800b486:	b003      	add	sp, #12
 800b488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48c:	465e      	mov	r6, fp
 800b48e:	e7d2      	b.n	800b436 <_sfread_r+0x16>

0800b490 <_svfprintf_r>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	b0d3      	sub	sp, #332	; 0x14c
 800b496:	468b      	mov	fp, r1
 800b498:	4692      	mov	sl, r2
 800b49a:	461e      	mov	r6, r3
 800b49c:	4681      	mov	r9, r0
 800b49e:	f7fe fa65 	bl	800996c <_localeconv_r>
 800b4a2:	6803      	ldr	r3, [r0, #0]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b4a8:	f7f4 febe 	bl	8000228 <strlen>
 800b4ac:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b4b0:	9012      	str	r0, [sp, #72]	; 0x48
 800b4b2:	0618      	lsls	r0, r3, #24
 800b4b4:	d518      	bpl.n	800b4e8 <_svfprintf_r+0x58>
 800b4b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b4ba:	b9ab      	cbnz	r3, 800b4e8 <_svfprintf_r+0x58>
 800b4bc:	2140      	movs	r1, #64	; 0x40
 800b4be:	4648      	mov	r0, r9
 800b4c0:	f7fe fa7e 	bl	80099c0 <_malloc_r>
 800b4c4:	f8cb 0000 	str.w	r0, [fp]
 800b4c8:	f8cb 0010 	str.w	r0, [fp, #16]
 800b4cc:	b948      	cbnz	r0, 800b4e2 <_svfprintf_r+0x52>
 800b4ce:	230c      	movs	r3, #12
 800b4d0:	f8c9 3000 	str.w	r3, [r9]
 800b4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b4dc:	b053      	add	sp, #332	; 0x14c
 800b4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e2:	2340      	movs	r3, #64	; 0x40
 800b4e4:	f8cb 3014 	str.w	r3, [fp, #20]
 800b4e8:	2500      	movs	r5, #0
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 800b4f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b4f6:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 800b4fa:	ac29      	add	r4, sp, #164	; 0xa4
 800b4fc:	9426      	str	r4, [sp, #152]	; 0x98
 800b4fe:	9509      	str	r5, [sp, #36]	; 0x24
 800b500:	950d      	str	r5, [sp, #52]	; 0x34
 800b502:	9515      	str	r5, [sp, #84]	; 0x54
 800b504:	9518      	str	r5, [sp, #96]	; 0x60
 800b506:	950f      	str	r5, [sp, #60]	; 0x3c
 800b508:	4653      	mov	r3, sl
 800b50a:	461d      	mov	r5, r3
 800b50c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b510:	b10a      	cbz	r2, 800b516 <_svfprintf_r+0x86>
 800b512:	2a25      	cmp	r2, #37	; 0x25
 800b514:	d1f9      	bne.n	800b50a <_svfprintf_r+0x7a>
 800b516:	ebb5 070a 	subs.w	r7, r5, sl
 800b51a:	d00d      	beq.n	800b538 <_svfprintf_r+0xa8>
 800b51c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b51e:	e9c4 a700 	strd	sl, r7, [r4]
 800b522:	443b      	add	r3, r7
 800b524:	9328      	str	r3, [sp, #160]	; 0xa0
 800b526:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b528:	3301      	adds	r3, #1
 800b52a:	2b07      	cmp	r3, #7
 800b52c:	9327      	str	r3, [sp, #156]	; 0x9c
 800b52e:	dc79      	bgt.n	800b624 <_svfprintf_r+0x194>
 800b530:	3408      	adds	r4, #8
 800b532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b534:	443b      	add	r3, r7
 800b536:	930f      	str	r3, [sp, #60]	; 0x3c
 800b538:	782b      	ldrb	r3, [r5, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f001 813a 	beq.w	800c7b4 <_svfprintf_r+0x1324>
 800b540:	2300      	movs	r3, #0
 800b542:	f04f 32ff 	mov.w	r2, #4294967295
 800b546:	4698      	mov	r8, r3
 800b548:	9207      	str	r2, [sp, #28]
 800b54a:	270a      	movs	r7, #10
 800b54c:	222b      	movs	r2, #43	; 0x2b
 800b54e:	3501      	adds	r5, #1
 800b550:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800b554:	9313      	str	r3, [sp, #76]	; 0x4c
 800b556:	462b      	mov	r3, r5
 800b558:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b55c:	910a      	str	r1, [sp, #40]	; 0x28
 800b55e:	930e      	str	r3, [sp, #56]	; 0x38
 800b560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b562:	3b20      	subs	r3, #32
 800b564:	2b5a      	cmp	r3, #90	; 0x5a
 800b566:	f200 85ac 	bhi.w	800c0c2 <_svfprintf_r+0xc32>
 800b56a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b56e:	007e      	.short	0x007e
 800b570:	05aa05aa 	.word	0x05aa05aa
 800b574:	05aa0086 	.word	0x05aa0086
 800b578:	05aa05aa 	.word	0x05aa05aa
 800b57c:	05aa0065 	.word	0x05aa0065
 800b580:	008905aa 	.word	0x008905aa
 800b584:	05aa0093 	.word	0x05aa0093
 800b588:	00960090 	.word	0x00960090
 800b58c:	00b305aa 	.word	0x00b305aa
 800b590:	00b600b6 	.word	0x00b600b6
 800b594:	00b600b6 	.word	0x00b600b6
 800b598:	00b600b6 	.word	0x00b600b6
 800b59c:	00b600b6 	.word	0x00b600b6
 800b5a0:	05aa00b6 	.word	0x05aa00b6
 800b5a4:	05aa05aa 	.word	0x05aa05aa
 800b5a8:	05aa05aa 	.word	0x05aa05aa
 800b5ac:	05aa05aa 	.word	0x05aa05aa
 800b5b0:	05aa0125 	.word	0x05aa0125
 800b5b4:	00f600e3 	.word	0x00f600e3
 800b5b8:	01250125 	.word	0x01250125
 800b5bc:	05aa0125 	.word	0x05aa0125
 800b5c0:	05aa05aa 	.word	0x05aa05aa
 800b5c4:	00c605aa 	.word	0x00c605aa
 800b5c8:	05aa05aa 	.word	0x05aa05aa
 800b5cc:	05aa0482 	.word	0x05aa0482
 800b5d0:	05aa05aa 	.word	0x05aa05aa
 800b5d4:	05aa04cd 	.word	0x05aa04cd
 800b5d8:	05aa04ee 	.word	0x05aa04ee
 800b5dc:	051005aa 	.word	0x051005aa
 800b5e0:	05aa05aa 	.word	0x05aa05aa
 800b5e4:	05aa05aa 	.word	0x05aa05aa
 800b5e8:	05aa05aa 	.word	0x05aa05aa
 800b5ec:	05aa05aa 	.word	0x05aa05aa
 800b5f0:	05aa0125 	.word	0x05aa0125
 800b5f4:	00f800e3 	.word	0x00f800e3
 800b5f8:	01250125 	.word	0x01250125
 800b5fc:	00c90125 	.word	0x00c90125
 800b600:	00dd00f8 	.word	0x00dd00f8
 800b604:	00d605aa 	.word	0x00d605aa
 800b608:	045d05aa 	.word	0x045d05aa
 800b60c:	04bb0484 	.word	0x04bb0484
 800b610:	05aa00dd 	.word	0x05aa00dd
 800b614:	007c04cd 	.word	0x007c04cd
 800b618:	05aa04f0 	.word	0x05aa04f0
 800b61c:	052f05aa 	.word	0x052f05aa
 800b620:	007c05aa 	.word	0x007c05aa
 800b624:	4659      	mov	r1, fp
 800b626:	4648      	mov	r0, r9
 800b628:	aa26      	add	r2, sp, #152	; 0x98
 800b62a:	f003 fa92 	bl	800eb52 <__ssprint_r>
 800b62e:	2800      	cmp	r0, #0
 800b630:	f040 812f 	bne.w	800b892 <_svfprintf_r+0x402>
 800b634:	ac29      	add	r4, sp, #164	; 0xa4
 800b636:	e77c      	b.n	800b532 <_svfprintf_r+0xa2>
 800b638:	4648      	mov	r0, r9
 800b63a:	f7fe f997 	bl	800996c <_localeconv_r>
 800b63e:	6843      	ldr	r3, [r0, #4]
 800b640:	4618      	mov	r0, r3
 800b642:	9318      	str	r3, [sp, #96]	; 0x60
 800b644:	f7f4 fdf0 	bl	8000228 <strlen>
 800b648:	9015      	str	r0, [sp, #84]	; 0x54
 800b64a:	4648      	mov	r0, r9
 800b64c:	f7fe f98e 	bl	800996c <_localeconv_r>
 800b650:	6883      	ldr	r3, [r0, #8]
 800b652:	222b      	movs	r2, #43	; 0x2b
 800b654:	930d      	str	r3, [sp, #52]	; 0x34
 800b656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b658:	b12b      	cbz	r3, 800b666 <_svfprintf_r+0x1d6>
 800b65a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b65c:	b11b      	cbz	r3, 800b666 <_svfprintf_r+0x1d6>
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	b10b      	cbz	r3, 800b666 <_svfprintf_r+0x1d6>
 800b662:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 800b666:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b668:	e775      	b.n	800b556 <_svfprintf_r+0xc6>
 800b66a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1f9      	bne.n	800b666 <_svfprintf_r+0x1d6>
 800b672:	2320      	movs	r3, #32
 800b674:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800b678:	e7f5      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b67a:	f048 0801 	orr.w	r8, r8, #1
 800b67e:	e7f2      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b680:	f856 3b04 	ldr.w	r3, [r6], #4
 800b684:	2b00      	cmp	r3, #0
 800b686:	9313      	str	r3, [sp, #76]	; 0x4c
 800b688:	daed      	bge.n	800b666 <_svfprintf_r+0x1d6>
 800b68a:	425b      	negs	r3, r3
 800b68c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b68e:	f048 0804 	orr.w	r8, r8, #4
 800b692:	e7e8      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b694:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800b698:	e7e5      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b69a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b69c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b6a4:	d113      	bne.n	800b6ce <_svfprintf_r+0x23e>
 800b6a6:	f856 0b04 	ldr.w	r0, [r6], #4
 800b6aa:	950e      	str	r5, [sp, #56]	; 0x38
 800b6ac:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	e7d8      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b6b4:	9907      	ldr	r1, [sp, #28]
 800b6b6:	fb07 3301 	mla	r3, r7, r1, r3
 800b6ba:	9307      	str	r3, [sp, #28]
 800b6bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6c0:	930a      	str	r3, [sp, #40]	; 0x28
 800b6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c4:	3b30      	subs	r3, #48	; 0x30
 800b6c6:	2b09      	cmp	r3, #9
 800b6c8:	d9f4      	bls.n	800b6b4 <_svfprintf_r+0x224>
 800b6ca:	950e      	str	r5, [sp, #56]	; 0x38
 800b6cc:	e748      	b.n	800b560 <_svfprintf_r+0xd0>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	9307      	str	r3, [sp, #28]
 800b6d2:	e7f6      	b.n	800b6c2 <_svfprintf_r+0x232>
 800b6d4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 800b6d8:	e7c5      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b6de:	9313      	str	r3, [sp, #76]	; 0x4c
 800b6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b6e4:	3b30      	subs	r3, #48	; 0x30
 800b6e6:	fb07 3301 	mla	r3, r7, r1, r3
 800b6ea:	9313      	str	r3, [sp, #76]	; 0x4c
 800b6ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6f0:	930a      	str	r3, [sp, #40]	; 0x28
 800b6f2:	3b30      	subs	r3, #48	; 0x30
 800b6f4:	2b09      	cmp	r3, #9
 800b6f6:	d9f3      	bls.n	800b6e0 <_svfprintf_r+0x250>
 800b6f8:	e7e7      	b.n	800b6ca <_svfprintf_r+0x23a>
 800b6fa:	f048 0808 	orr.w	r8, r8, #8
 800b6fe:	e7b2      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b68      	cmp	r3, #104	; 0x68
 800b706:	bf01      	itttt	eq
 800b708:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 800b70a:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800b70e:	3301      	addeq	r3, #1
 800b710:	930e      	streq	r3, [sp, #56]	; 0x38
 800b712:	bf18      	it	ne
 800b714:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 800b718:	e7a5      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b71a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2b6c      	cmp	r3, #108	; 0x6c
 800b720:	d105      	bne.n	800b72e <_svfprintf_r+0x29e>
 800b722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b724:	3301      	adds	r3, #1
 800b726:	930e      	str	r3, [sp, #56]	; 0x38
 800b728:	f048 0820 	orr.w	r8, r8, #32
 800b72c:	e79b      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b72e:	f048 0810 	orr.w	r8, r8, #16
 800b732:	e798      	b.n	800b666 <_svfprintf_r+0x1d6>
 800b734:	4632      	mov	r2, r6
 800b736:	2000      	movs	r0, #0
 800b738:	f852 3b04 	ldr.w	r3, [r2], #4
 800b73c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800b740:	920b      	str	r2, [sp, #44]	; 0x2c
 800b742:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800b746:	2301      	movs	r3, #1
 800b748:	4607      	mov	r7, r0
 800b74a:	4606      	mov	r6, r0
 800b74c:	4605      	mov	r5, r0
 800b74e:	9008      	str	r0, [sp, #32]
 800b750:	9307      	str	r3, [sp, #28]
 800b752:	900c      	str	r0, [sp, #48]	; 0x30
 800b754:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 800b758:	e1b0      	b.n	800babc <_svfprintf_r+0x62c>
 800b75a:	f048 0810 	orr.w	r8, r8, #16
 800b75e:	f018 0f20 	tst.w	r8, #32
 800b762:	d011      	beq.n	800b788 <_svfprintf_r+0x2f8>
 800b764:	1df3      	adds	r3, r6, #7
 800b766:	f023 0307 	bic.w	r3, r3, #7
 800b76a:	461a      	mov	r2, r3
 800b76c:	f852 6b08 	ldr.w	r6, [r2], #8
 800b770:	685f      	ldr	r7, [r3, #4]
 800b772:	920b      	str	r2, [sp, #44]	; 0x2c
 800b774:	2f00      	cmp	r7, #0
 800b776:	da05      	bge.n	800b784 <_svfprintf_r+0x2f4>
 800b778:	232d      	movs	r3, #45	; 0x2d
 800b77a:	4276      	negs	r6, r6
 800b77c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800b780:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800b784:	2301      	movs	r3, #1
 800b786:	e387      	b.n	800be98 <_svfprintf_r+0xa08>
 800b788:	4633      	mov	r3, r6
 800b78a:	f853 7b04 	ldr.w	r7, [r3], #4
 800b78e:	f018 0f10 	tst.w	r8, #16
 800b792:	930b      	str	r3, [sp, #44]	; 0x2c
 800b794:	d002      	beq.n	800b79c <_svfprintf_r+0x30c>
 800b796:	463e      	mov	r6, r7
 800b798:	17ff      	asrs	r7, r7, #31
 800b79a:	e7eb      	b.n	800b774 <_svfprintf_r+0x2e4>
 800b79c:	f018 0f40 	tst.w	r8, #64	; 0x40
 800b7a0:	d003      	beq.n	800b7aa <_svfprintf_r+0x31a>
 800b7a2:	b23e      	sxth	r6, r7
 800b7a4:	f347 37c0 	sbfx	r7, r7, #15, #1
 800b7a8:	e7e4      	b.n	800b774 <_svfprintf_r+0x2e4>
 800b7aa:	f418 7f00 	tst.w	r8, #512	; 0x200
 800b7ae:	d0f2      	beq.n	800b796 <_svfprintf_r+0x306>
 800b7b0:	b27e      	sxtb	r6, r7
 800b7b2:	f347 17c0 	sbfx	r7, r7, #7, #1
 800b7b6:	e7dd      	b.n	800b774 <_svfprintf_r+0x2e4>
 800b7b8:	3607      	adds	r6, #7
 800b7ba:	f026 0307 	bic.w	r3, r6, #7
 800b7be:	4619      	mov	r1, r3
 800b7c0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b7c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b7c8:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 800b7cc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800b7d0:	910b      	str	r1, [sp, #44]	; 0x2c
 800b7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4b3a      	ldr	r3, [pc, #232]	; (800b8c4 <_svfprintf_r+0x434>)
 800b7dc:	f7f5 f982 	bl	8000ae4 <__aeabi_dcmpun>
 800b7e0:	bb18      	cbnz	r0, 800b82a <_svfprintf_r+0x39a>
 800b7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4b36      	ldr	r3, [pc, #216]	; (800b8c4 <_svfprintf_r+0x434>)
 800b7ec:	f7f5 f95c 	bl	8000aa8 <__aeabi_dcmple>
 800b7f0:	b9d8      	cbnz	r0, 800b82a <_svfprintf_r+0x39a>
 800b7f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f7f5 f94b 	bl	8000a94 <__aeabi_dcmplt>
 800b7fe:	b110      	cbz	r0, 800b806 <_svfprintf_r+0x376>
 800b800:	232d      	movs	r3, #45	; 0x2d
 800b802:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800b806:	4a30      	ldr	r2, [pc, #192]	; (800b8c8 <_svfprintf_r+0x438>)
 800b808:	4830      	ldr	r0, [pc, #192]	; (800b8cc <_svfprintf_r+0x43c>)
 800b80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b80c:	2100      	movs	r1, #0
 800b80e:	2b47      	cmp	r3, #71	; 0x47
 800b810:	bfd4      	ite	le
 800b812:	4692      	movle	sl, r2
 800b814:	4682      	movgt	sl, r0
 800b816:	2303      	movs	r3, #3
 800b818:	e9cd 3107 	strd	r3, r1, [sp, #28]
 800b81c:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 800b820:	2700      	movs	r7, #0
 800b822:	463e      	mov	r6, r7
 800b824:	463b      	mov	r3, r7
 800b826:	f000 bfff 	b.w	800c828 <_svfprintf_r+0x1398>
 800b82a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b82e:	4610      	mov	r0, r2
 800b830:	4619      	mov	r1, r3
 800b832:	f7f5 f957 	bl	8000ae4 <__aeabi_dcmpun>
 800b836:	b148      	cbz	r0, 800b84c <_svfprintf_r+0x3bc>
 800b838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b83a:	4a25      	ldr	r2, [pc, #148]	; (800b8d0 <_svfprintf_r+0x440>)
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	bfb8      	it	lt
 800b840:	232d      	movlt	r3, #45	; 0x2d
 800b842:	4824      	ldr	r0, [pc, #144]	; (800b8d4 <_svfprintf_r+0x444>)
 800b844:	bfb8      	it	lt
 800b846:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800b84a:	e7de      	b.n	800b80a <_svfprintf_r+0x37a>
 800b84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b84e:	f023 0320 	bic.w	r3, r3, #32
 800b852:	2b41      	cmp	r3, #65	; 0x41
 800b854:	930c      	str	r3, [sp, #48]	; 0x30
 800b856:	d125      	bne.n	800b8a4 <_svfprintf_r+0x414>
 800b858:	2330      	movs	r3, #48	; 0x30
 800b85a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800b85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b860:	f048 0802 	orr.w	r8, r8, #2
 800b864:	2b61      	cmp	r3, #97	; 0x61
 800b866:	bf0c      	ite	eq
 800b868:	2378      	moveq	r3, #120	; 0x78
 800b86a:	2358      	movne	r3, #88	; 0x58
 800b86c:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800b870:	9b07      	ldr	r3, [sp, #28]
 800b872:	2b63      	cmp	r3, #99	; 0x63
 800b874:	dd30      	ble.n	800b8d8 <_svfprintf_r+0x448>
 800b876:	4648      	mov	r0, r9
 800b878:	1c59      	adds	r1, r3, #1
 800b87a:	f7fe f8a1 	bl	80099c0 <_malloc_r>
 800b87e:	4682      	mov	sl, r0
 800b880:	2800      	cmp	r0, #0
 800b882:	f040 81f7 	bne.w	800bc74 <_svfprintf_r+0x7e4>
 800b886:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b88a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b88e:	f8ab 300c 	strh.w	r3, [fp, #12]
 800b892:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b896:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b89a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b89c:	bf18      	it	ne
 800b89e:	f04f 33ff 	movne.w	r3, #4294967295
 800b8a2:	e619      	b.n	800b4d8 <_svfprintf_r+0x48>
 800b8a4:	9b07      	ldr	r3, [sp, #28]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	f000 81e6 	beq.w	800bc78 <_svfprintf_r+0x7e8>
 800b8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8ae:	2b47      	cmp	r3, #71	; 0x47
 800b8b0:	f040 81e5 	bne.w	800bc7e <_svfprintf_r+0x7ee>
 800b8b4:	9b07      	ldr	r3, [sp, #28]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f040 81e1 	bne.w	800bc7e <_svfprintf_r+0x7ee>
 800b8bc:	9308      	str	r3, [sp, #32]
 800b8be:	2301      	movs	r3, #1
 800b8c0:	9307      	str	r3, [sp, #28]
 800b8c2:	e00c      	b.n	800b8de <_svfprintf_r+0x44e>
 800b8c4:	7fefffff 	.word	0x7fefffff
 800b8c8:	08034c48 	.word	0x08034c48
 800b8cc:	08034c4c 	.word	0x08034c4c
 800b8d0:	08034c50 	.word	0x08034c50
 800b8d4:	08034c54 	.word	0x08034c54
 800b8d8:	9008      	str	r0, [sp, #32]
 800b8da:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 800b8de:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 800b8e2:	9314      	str	r3, [sp, #80]	; 0x50
 800b8e4:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 800b8e8:	1e1d      	subs	r5, r3, #0
 800b8ea:	bfae      	itee	ge
 800b8ec:	2300      	movge	r3, #0
 800b8ee:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 800b8f2:	232d      	movlt	r3, #45	; 0x2d
 800b8f4:	931c      	str	r3, [sp, #112]	; 0x70
 800b8f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8f8:	2b41      	cmp	r3, #65	; 0x41
 800b8fa:	f040 81d8 	bne.w	800bcae <_svfprintf_r+0x81e>
 800b8fe:	4638      	mov	r0, r7
 800b900:	aa20      	add	r2, sp, #128	; 0x80
 800b902:	4629      	mov	r1, r5
 800b904:	f003 f8c4 	bl	800ea90 <frexp>
 800b908:	2200      	movs	r2, #0
 800b90a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b90e:	f7f4 fe4f 	bl	80005b0 <__aeabi_dmul>
 800b912:	2200      	movs	r2, #0
 800b914:	2300      	movs	r3, #0
 800b916:	4606      	mov	r6, r0
 800b918:	460f      	mov	r7, r1
 800b91a:	f7f5 f8b1 	bl	8000a80 <__aeabi_dcmpeq>
 800b91e:	b108      	cbz	r0, 800b924 <_svfprintf_r+0x494>
 800b920:	2301      	movs	r3, #1
 800b922:	9320      	str	r3, [sp, #128]	; 0x80
 800b924:	4bad      	ldr	r3, [pc, #692]	; (800bbdc <_svfprintf_r+0x74c>)
 800b926:	4aae      	ldr	r2, [pc, #696]	; (800bbe0 <_svfprintf_r+0x750>)
 800b928:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b92a:	4655      	mov	r5, sl
 800b92c:	2961      	cmp	r1, #97	; 0x61
 800b92e:	bf18      	it	ne
 800b930:	461a      	movne	r2, r3
 800b932:	9b07      	ldr	r3, [sp, #28]
 800b934:	921b      	str	r2, [sp, #108]	; 0x6c
 800b936:	3b01      	subs	r3, #1
 800b938:	9309      	str	r3, [sp, #36]	; 0x24
 800b93a:	2200      	movs	r2, #0
 800b93c:	4ba9      	ldr	r3, [pc, #676]	; (800bbe4 <_svfprintf_r+0x754>)
 800b93e:	4630      	mov	r0, r6
 800b940:	4639      	mov	r1, r7
 800b942:	f7f4 fe35 	bl	80005b0 <__aeabi_dmul>
 800b946:	460f      	mov	r7, r1
 800b948:	4606      	mov	r6, r0
 800b94a:	f7f5 f8e1 	bl	8000b10 <__aeabi_d2iz>
 800b94e:	901d      	str	r0, [sp, #116]	; 0x74
 800b950:	f7f4 fdc4 	bl	80004dc <__aeabi_i2d>
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	4630      	mov	r0, r6
 800b95a:	4639      	mov	r1, r7
 800b95c:	f7f4 fc70 	bl	8000240 <__aeabi_dsub>
 800b960:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b964:	4606      	mov	r6, r0
 800b966:	5c9b      	ldrb	r3, [r3, r2]
 800b968:	460f      	mov	r7, r1
 800b96a:	f805 3b01 	strb.w	r3, [r5], #1
 800b96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	9316      	str	r3, [sp, #88]	; 0x58
 800b974:	d007      	beq.n	800b986 <_svfprintf_r+0x4f6>
 800b976:	3b01      	subs	r3, #1
 800b978:	9309      	str	r3, [sp, #36]	; 0x24
 800b97a:	2200      	movs	r2, #0
 800b97c:	2300      	movs	r3, #0
 800b97e:	f7f5 f87f 	bl	8000a80 <__aeabi_dcmpeq>
 800b982:	2800      	cmp	r0, #0
 800b984:	d0d9      	beq.n	800b93a <_svfprintf_r+0x4aa>
 800b986:	2200      	movs	r2, #0
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	4b96      	ldr	r3, [pc, #600]	; (800bbe8 <_svfprintf_r+0x758>)
 800b98e:	f7f5 f89f 	bl	8000ad0 <__aeabi_dcmpgt>
 800b992:	b960      	cbnz	r0, 800b9ae <_svfprintf_r+0x51e>
 800b994:	2200      	movs	r2, #0
 800b996:	4630      	mov	r0, r6
 800b998:	4639      	mov	r1, r7
 800b99a:	4b93      	ldr	r3, [pc, #588]	; (800bbe8 <_svfprintf_r+0x758>)
 800b99c:	f7f5 f870 	bl	8000a80 <__aeabi_dcmpeq>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	f000 817f 	beq.w	800bca4 <_svfprintf_r+0x814>
 800b9a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9a8:	07db      	lsls	r3, r3, #31
 800b9aa:	f140 817b 	bpl.w	800bca4 <_svfprintf_r+0x814>
 800b9ae:	2030      	movs	r0, #48	; 0x30
 800b9b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9b2:	9524      	str	r5, [sp, #144]	; 0x90
 800b9b4:	7bd9      	ldrb	r1, [r3, #15]
 800b9b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b9b8:	1e53      	subs	r3, r2, #1
 800b9ba:	9324      	str	r3, [sp, #144]	; 0x90
 800b9bc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800b9c0:	428b      	cmp	r3, r1
 800b9c2:	f000 815e 	beq.w	800bc82 <_svfprintf_r+0x7f2>
 800b9c6:	2b39      	cmp	r3, #57	; 0x39
 800b9c8:	bf0b      	itete	eq
 800b9ca:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 800b9cc:	3301      	addne	r3, #1
 800b9ce:	7a9b      	ldrbeq	r3, [r3, #10]
 800b9d0:	b2db      	uxtbne	r3, r3
 800b9d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b9d6:	eba5 030a 	sub.w	r3, r5, sl
 800b9da:	9309      	str	r3, [sp, #36]	; 0x24
 800b9dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9de:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b9e0:	2b47      	cmp	r3, #71	; 0x47
 800b9e2:	f040 81b1 	bne.w	800bd48 <_svfprintf_r+0x8b8>
 800b9e6:	1cef      	adds	r7, r5, #3
 800b9e8:	db03      	blt.n	800b9f2 <_svfprintf_r+0x562>
 800b9ea:	9b07      	ldr	r3, [sp, #28]
 800b9ec:	42ab      	cmp	r3, r5
 800b9ee:	f280 81d6 	bge.w	800bd9e <_svfprintf_r+0x90e>
 800b9f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9f4:	3b02      	subs	r3, #2
 800b9f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b9f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b9fa:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800b9fe:	f021 0120 	bic.w	r1, r1, #32
 800ba02:	2941      	cmp	r1, #65	; 0x41
 800ba04:	bf08      	it	eq
 800ba06:	320f      	addeq	r2, #15
 800ba08:	f105 33ff 	add.w	r3, r5, #4294967295
 800ba0c:	bf06      	itte	eq
 800ba0e:	b2d2      	uxtbeq	r2, r2
 800ba10:	2101      	moveq	r1, #1
 800ba12:	2100      	movne	r1, #0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800ba1a:	bfb4      	ite	lt
 800ba1c:	222d      	movlt	r2, #45	; 0x2d
 800ba1e:	222b      	movge	r2, #43	; 0x2b
 800ba20:	9320      	str	r3, [sp, #128]	; 0x80
 800ba22:	bfb8      	it	lt
 800ba24:	f1c5 0301 	rsblt	r3, r5, #1
 800ba28:	2b09      	cmp	r3, #9
 800ba2a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800ba2e:	f340 81a4 	ble.w	800bd7a <_svfprintf_r+0x8ea>
 800ba32:	260a      	movs	r6, #10
 800ba34:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800ba38:	fb93 f5f6 	sdiv	r5, r3, r6
 800ba3c:	4611      	mov	r1, r2
 800ba3e:	fb06 3015 	mls	r0, r6, r5, r3
 800ba42:	3030      	adds	r0, #48	; 0x30
 800ba44:	f801 0c01 	strb.w	r0, [r1, #-1]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	2863      	cmp	r0, #99	; 0x63
 800ba4c:	462b      	mov	r3, r5
 800ba4e:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba52:	dcf1      	bgt.n	800ba38 <_svfprintf_r+0x5a8>
 800ba54:	3330      	adds	r3, #48	; 0x30
 800ba56:	1e88      	subs	r0, r1, #2
 800ba58:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800ba62:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 800ba66:	42ab      	cmp	r3, r5
 800ba68:	f0c0 8182 	bcc.w	800bd70 <_svfprintf_r+0x8e0>
 800ba6c:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 800ba70:	1a52      	subs	r2, r2, r1
 800ba72:	42a8      	cmp	r0, r5
 800ba74:	bf88      	it	hi
 800ba76:	2200      	movhi	r2, #0
 800ba78:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800ba7c:	441a      	add	r2, r3
 800ba7e:	ab22      	add	r3, sp, #136	; 0x88
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba84:	9319      	str	r3, [sp, #100]	; 0x64
 800ba86:	2a01      	cmp	r2, #1
 800ba88:	4413      	add	r3, r2
 800ba8a:	9307      	str	r3, [sp, #28]
 800ba8c:	dc02      	bgt.n	800ba94 <_svfprintf_r+0x604>
 800ba8e:	f018 0f01 	tst.w	r8, #1
 800ba92:	d003      	beq.n	800ba9c <_svfprintf_r+0x60c>
 800ba94:	9b07      	ldr	r3, [sp, #28]
 800ba96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba98:	4413      	add	r3, r2
 800ba9a:	9307      	str	r3, [sp, #28]
 800ba9c:	2600      	movs	r6, #0
 800ba9e:	4635      	mov	r5, r6
 800baa0:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 800baa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baa8:	9314      	str	r3, [sp, #80]	; 0x50
 800baaa:	960c      	str	r6, [sp, #48]	; 0x30
 800baac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800baae:	b113      	cbz	r3, 800bab6 <_svfprintf_r+0x626>
 800bab0:	232d      	movs	r3, #45	; 0x2d
 800bab2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800bab6:	2700      	movs	r7, #0
 800bab8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800babc:	9b07      	ldr	r3, [sp, #28]
 800babe:	42bb      	cmp	r3, r7
 800bac0:	bfb8      	it	lt
 800bac2:	463b      	movlt	r3, r7
 800bac4:	9314      	str	r3, [sp, #80]	; 0x50
 800bac6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800baca:	b113      	cbz	r3, 800bad2 <_svfprintf_r+0x642>
 800bacc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bace:	3301      	adds	r3, #1
 800bad0:	9314      	str	r3, [sp, #80]	; 0x50
 800bad2:	f018 0302 	ands.w	r3, r8, #2
 800bad6:	931b      	str	r3, [sp, #108]	; 0x6c
 800bad8:	bf1e      	ittt	ne
 800bada:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 800badc:	3302      	addne	r3, #2
 800bade:	9314      	strne	r3, [sp, #80]	; 0x50
 800bae0:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 800bae4:	931c      	str	r3, [sp, #112]	; 0x70
 800bae6:	d121      	bne.n	800bb2c <_svfprintf_r+0x69c>
 800bae8:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800baec:	1a9b      	subs	r3, r3, r2
 800baee:	2b00      	cmp	r3, #0
 800baf0:	9316      	str	r3, [sp, #88]	; 0x58
 800baf2:	dd1b      	ble.n	800bb2c <_svfprintf_r+0x69c>
 800baf4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800baf8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bafa:	3201      	adds	r2, #1
 800bafc:	2810      	cmp	r0, #16
 800bafe:	483b      	ldr	r0, [pc, #236]	; (800bbec <_svfprintf_r+0x75c>)
 800bb00:	f104 0108 	add.w	r1, r4, #8
 800bb04:	6020      	str	r0, [r4, #0]
 800bb06:	f300 82eb 	bgt.w	800c0e0 <_svfprintf_r+0xc50>
 800bb0a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bb0c:	2a07      	cmp	r2, #7
 800bb0e:	4403      	add	r3, r0
 800bb10:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800bb14:	6060      	str	r0, [r4, #4]
 800bb16:	f340 82f8 	ble.w	800c10a <_svfprintf_r+0xc7a>
 800bb1a:	4659      	mov	r1, fp
 800bb1c:	4648      	mov	r0, r9
 800bb1e:	aa26      	add	r2, sp, #152	; 0x98
 800bb20:	f003 f817 	bl	800eb52 <__ssprint_r>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	f040 8623 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800bb2a:	ac29      	add	r4, sp, #164	; 0xa4
 800bb2c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800bb30:	b173      	cbz	r3, 800bb50 <_svfprintf_r+0x6c0>
 800bb32:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800bb36:	6023      	str	r3, [r4, #0]
 800bb38:	2301      	movs	r3, #1
 800bb3a:	6063      	str	r3, [r4, #4]
 800bb3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bb3e:	3301      	adds	r3, #1
 800bb40:	9328      	str	r3, [sp, #160]	; 0xa0
 800bb42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800bb44:	3301      	adds	r3, #1
 800bb46:	2b07      	cmp	r3, #7
 800bb48:	9327      	str	r3, [sp, #156]	; 0x9c
 800bb4a:	f300 82e0 	bgt.w	800c10e <_svfprintf_r+0xc7e>
 800bb4e:	3408      	adds	r4, #8
 800bb50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb52:	b16b      	cbz	r3, 800bb70 <_svfprintf_r+0x6e0>
 800bb54:	ab1f      	add	r3, sp, #124	; 0x7c
 800bb56:	6023      	str	r3, [r4, #0]
 800bb58:	2302      	movs	r3, #2
 800bb5a:	6063      	str	r3, [r4, #4]
 800bb5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bb5e:	3302      	adds	r3, #2
 800bb60:	9328      	str	r3, [sp, #160]	; 0xa0
 800bb62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800bb64:	3301      	adds	r3, #1
 800bb66:	2b07      	cmp	r3, #7
 800bb68:	9327      	str	r3, [sp, #156]	; 0x9c
 800bb6a:	f300 82da 	bgt.w	800c122 <_svfprintf_r+0xc92>
 800bb6e:	3408      	adds	r4, #8
 800bb70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bb72:	2b80      	cmp	r3, #128	; 0x80
 800bb74:	d121      	bne.n	800bbba <_svfprintf_r+0x72a>
 800bb76:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800bb7a:	1a9b      	subs	r3, r3, r2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	9316      	str	r3, [sp, #88]	; 0x58
 800bb80:	dd1b      	ble.n	800bbba <_svfprintf_r+0x72a>
 800bb82:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800bb86:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bb88:	3201      	adds	r2, #1
 800bb8a:	2810      	cmp	r0, #16
 800bb8c:	4818      	ldr	r0, [pc, #96]	; (800bbf0 <_svfprintf_r+0x760>)
 800bb8e:	f104 0108 	add.w	r1, r4, #8
 800bb92:	6020      	str	r0, [r4, #0]
 800bb94:	f300 82cf 	bgt.w	800c136 <_svfprintf_r+0xca6>
 800bb98:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bb9a:	2a07      	cmp	r2, #7
 800bb9c:	4403      	add	r3, r0
 800bb9e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800bba2:	6060      	str	r0, [r4, #4]
 800bba4:	f340 82dc 	ble.w	800c160 <_svfprintf_r+0xcd0>
 800bba8:	4659      	mov	r1, fp
 800bbaa:	4648      	mov	r0, r9
 800bbac:	aa26      	add	r2, sp, #152	; 0x98
 800bbae:	f002 ffd0 	bl	800eb52 <__ssprint_r>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	f040 85dc 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800bbb8:	ac29      	add	r4, sp, #164	; 0xa4
 800bbba:	9b07      	ldr	r3, [sp, #28]
 800bbbc:	1aff      	subs	r7, r7, r3
 800bbbe:	2f00      	cmp	r7, #0
 800bbc0:	dd28      	ble.n	800bc14 <_svfprintf_r+0x784>
 800bbc2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800bbc6:	480a      	ldr	r0, [pc, #40]	; (800bbf0 <_svfprintf_r+0x760>)
 800bbc8:	2f10      	cmp	r7, #16
 800bbca:	f103 0301 	add.w	r3, r3, #1
 800bbce:	f104 0108 	add.w	r1, r4, #8
 800bbd2:	6020      	str	r0, [r4, #0]
 800bbd4:	f300 82c6 	bgt.w	800c164 <_svfprintf_r+0xcd4>
 800bbd8:	e00c      	b.n	800bbf4 <_svfprintf_r+0x764>
 800bbda:	bf00      	nop
 800bbdc:	08034c69 	.word	0x08034c69
 800bbe0:	08034c58 	.word	0x08034c58
 800bbe4:	40300000 	.word	0x40300000
 800bbe8:	3fe00000 	.word	0x3fe00000
 800bbec:	08034c7c 	.word	0x08034c7c
 800bbf0:	08034c8c 	.word	0x08034c8c
 800bbf4:	6067      	str	r7, [r4, #4]
 800bbf6:	2b07      	cmp	r3, #7
 800bbf8:	4417      	add	r7, r2
 800bbfa:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800bbfe:	f340 82c4 	ble.w	800c18a <_svfprintf_r+0xcfa>
 800bc02:	4659      	mov	r1, fp
 800bc04:	4648      	mov	r0, r9
 800bc06:	aa26      	add	r2, sp, #152	; 0x98
 800bc08:	f002 ffa3 	bl	800eb52 <__ssprint_r>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	f040 85af 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800bc12:	ac29      	add	r4, sp, #164	; 0xa4
 800bc14:	f418 7f80 	tst.w	r8, #256	; 0x100
 800bc18:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800bc1a:	f040 82bd 	bne.w	800c198 <_svfprintf_r+0xd08>
 800bc1e:	9b07      	ldr	r3, [sp, #28]
 800bc20:	f8c4 a000 	str.w	sl, [r4]
 800bc24:	441f      	add	r7, r3
 800bc26:	6063      	str	r3, [r4, #4]
 800bc28:	9728      	str	r7, [sp, #160]	; 0xa0
 800bc2a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	2b07      	cmp	r3, #7
 800bc30:	9327      	str	r3, [sp, #156]	; 0x9c
 800bc32:	f300 82f6 	bgt.w	800c222 <_svfprintf_r+0xd92>
 800bc36:	3408      	adds	r4, #8
 800bc38:	f018 0f04 	tst.w	r8, #4
 800bc3c:	f040 857a 	bne.w	800c734 <_svfprintf_r+0x12a4>
 800bc40:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 800bc44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc46:	428a      	cmp	r2, r1
 800bc48:	bfac      	ite	ge
 800bc4a:	189b      	addge	r3, r3, r2
 800bc4c:	185b      	addlt	r3, r3, r1
 800bc4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bc52:	b13b      	cbz	r3, 800bc64 <_svfprintf_r+0x7d4>
 800bc54:	4659      	mov	r1, fp
 800bc56:	4648      	mov	r0, r9
 800bc58:	aa26      	add	r2, sp, #152	; 0x98
 800bc5a:	f002 ff7a 	bl	800eb52 <__ssprint_r>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f040 8586 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800bc64:	2300      	movs	r3, #0
 800bc66:	9327      	str	r3, [sp, #156]	; 0x9c
 800bc68:	9b08      	ldr	r3, [sp, #32]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f040 859c 	bne.w	800c7a8 <_svfprintf_r+0x1318>
 800bc70:	ac29      	add	r4, sp, #164	; 0xa4
 800bc72:	e0e4      	b.n	800be3e <_svfprintf_r+0x9ae>
 800bc74:	9008      	str	r0, [sp, #32]
 800bc76:	e632      	b.n	800b8de <_svfprintf_r+0x44e>
 800bc78:	2306      	movs	r3, #6
 800bc7a:	9008      	str	r0, [sp, #32]
 800bc7c:	e620      	b.n	800b8c0 <_svfprintf_r+0x430>
 800bc7e:	9008      	str	r0, [sp, #32]
 800bc80:	e62d      	b.n	800b8de <_svfprintf_r+0x44e>
 800bc82:	f802 0c01 	strb.w	r0, [r2, #-1]
 800bc86:	e696      	b.n	800b9b6 <_svfprintf_r+0x526>
 800bc88:	f803 0b01 	strb.w	r0, [r3], #1
 800bc8c:	1aca      	subs	r2, r1, r3
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	dafa      	bge.n	800bc88 <_svfprintf_r+0x7f8>
 800bc92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bc96:	3201      	adds	r2, #1
 800bc98:	f103 0301 	add.w	r3, r3, #1
 800bc9c:	bfb8      	it	lt
 800bc9e:	2300      	movlt	r3, #0
 800bca0:	441d      	add	r5, r3
 800bca2:	e698      	b.n	800b9d6 <_svfprintf_r+0x546>
 800bca4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bca6:	462b      	mov	r3, r5
 800bca8:	2030      	movs	r0, #48	; 0x30
 800bcaa:	18a9      	adds	r1, r5, r2
 800bcac:	e7ee      	b.n	800bc8c <_svfprintf_r+0x7fc>
 800bcae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcb0:	2b46      	cmp	r3, #70	; 0x46
 800bcb2:	d005      	beq.n	800bcc0 <_svfprintf_r+0x830>
 800bcb4:	2b45      	cmp	r3, #69	; 0x45
 800bcb6:	d11b      	bne.n	800bcf0 <_svfprintf_r+0x860>
 800bcb8:	9b07      	ldr	r3, [sp, #28]
 800bcba:	1c5e      	adds	r6, r3, #1
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	e001      	b.n	800bcc4 <_svfprintf_r+0x834>
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	9e07      	ldr	r6, [sp, #28]
 800bcc4:	aa24      	add	r2, sp, #144	; 0x90
 800bcc6:	9204      	str	r2, [sp, #16]
 800bcc8:	aa21      	add	r2, sp, #132	; 0x84
 800bcca:	9203      	str	r2, [sp, #12]
 800bccc:	aa20      	add	r2, sp, #128	; 0x80
 800bcce:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	463a      	mov	r2, r7
 800bcd6:	462b      	mov	r3, r5
 800bcd8:	4648      	mov	r0, r9
 800bcda:	f000 fecd 	bl	800ca78 <_dtoa_r>
 800bcde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bce0:	4682      	mov	sl, r0
 800bce2:	2b47      	cmp	r3, #71	; 0x47
 800bce4:	d106      	bne.n	800bcf4 <_svfprintf_r+0x864>
 800bce6:	f018 0f01 	tst.w	r8, #1
 800bcea:	d103      	bne.n	800bcf4 <_svfprintf_r+0x864>
 800bcec:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800bcee:	e672      	b.n	800b9d6 <_svfprintf_r+0x546>
 800bcf0:	9e07      	ldr	r6, [sp, #28]
 800bcf2:	e7e3      	b.n	800bcbc <_svfprintf_r+0x82c>
 800bcf4:	eb0a 0306 	add.w	r3, sl, r6
 800bcf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcfc:	2b46      	cmp	r3, #70	; 0x46
 800bcfe:	d111      	bne.n	800bd24 <_svfprintf_r+0x894>
 800bd00:	f89a 3000 	ldrb.w	r3, [sl]
 800bd04:	2b30      	cmp	r3, #48	; 0x30
 800bd06:	d109      	bne.n	800bd1c <_svfprintf_r+0x88c>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7f4 feb6 	bl	8000a80 <__aeabi_dcmpeq>
 800bd14:	b910      	cbnz	r0, 800bd1c <_svfprintf_r+0x88c>
 800bd16:	f1c6 0601 	rsb	r6, r6, #1
 800bd1a:	9620      	str	r6, [sp, #128]	; 0x80
 800bd1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bd20:	441a      	add	r2, r3
 800bd22:	9209      	str	r2, [sp, #36]	; 0x24
 800bd24:	2200      	movs	r2, #0
 800bd26:	2300      	movs	r3, #0
 800bd28:	4638      	mov	r0, r7
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 fea8 	bl	8000a80 <__aeabi_dcmpeq>
 800bd30:	b108      	cbz	r0, 800bd36 <_svfprintf_r+0x8a6>
 800bd32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd34:	9324      	str	r3, [sp, #144]	; 0x90
 800bd36:	2230      	movs	r2, #48	; 0x30
 800bd38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd3c:	4299      	cmp	r1, r3
 800bd3e:	d9d5      	bls.n	800bcec <_svfprintf_r+0x85c>
 800bd40:	1c59      	adds	r1, r3, #1
 800bd42:	9124      	str	r1, [sp, #144]	; 0x90
 800bd44:	701a      	strb	r2, [r3, #0]
 800bd46:	e7f7      	b.n	800bd38 <_svfprintf_r+0x8a8>
 800bd48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd4a:	2b46      	cmp	r3, #70	; 0x46
 800bd4c:	f47f ae54 	bne.w	800b9f8 <_svfprintf_r+0x568>
 800bd50:	9a07      	ldr	r2, [sp, #28]
 800bd52:	f008 0301 	and.w	r3, r8, #1
 800bd56:	2d00      	cmp	r5, #0
 800bd58:	ea43 0302 	orr.w	r3, r3, r2
 800bd5c:	dd1a      	ble.n	800bd94 <_svfprintf_r+0x904>
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d034      	beq.n	800bdcc <_svfprintf_r+0x93c>
 800bd62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd64:	18eb      	adds	r3, r5, r3
 800bd66:	441a      	add	r2, r3
 800bd68:	9207      	str	r2, [sp, #28]
 800bd6a:	2366      	movs	r3, #102	; 0x66
 800bd6c:	930a      	str	r3, [sp, #40]	; 0x28
 800bd6e:	e033      	b.n	800bdd8 <_svfprintf_r+0x948>
 800bd70:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bd74:	f802 6b01 	strb.w	r6, [r2], #1
 800bd78:	e675      	b.n	800ba66 <_svfprintf_r+0x5d6>
 800bd7a:	b941      	cbnz	r1, 800bd8e <_svfprintf_r+0x8fe>
 800bd7c:	2230      	movs	r2, #48	; 0x30
 800bd7e:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800bd82:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 800bd86:	3330      	adds	r3, #48	; 0x30
 800bd88:	f802 3b01 	strb.w	r3, [r2], #1
 800bd8c:	e677      	b.n	800ba7e <_svfprintf_r+0x5ee>
 800bd8e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800bd92:	e7f8      	b.n	800bd86 <_svfprintf_r+0x8f6>
 800bd94:	b1e3      	cbz	r3, 800bdd0 <_svfprintf_r+0x940>
 800bd96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd98:	9a07      	ldr	r2, [sp, #28]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	e7e3      	b.n	800bd66 <_svfprintf_r+0x8d6>
 800bd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda0:	429d      	cmp	r5, r3
 800bda2:	db07      	blt.n	800bdb4 <_svfprintf_r+0x924>
 800bda4:	f018 0f01 	tst.w	r8, #1
 800bda8:	d02b      	beq.n	800be02 <_svfprintf_r+0x972>
 800bdaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdac:	18eb      	adds	r3, r5, r3
 800bdae:	9307      	str	r3, [sp, #28]
 800bdb0:	2367      	movs	r3, #103	; 0x67
 800bdb2:	e7db      	b.n	800bd6c <_svfprintf_r+0x8dc>
 800bdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdb8:	2d00      	cmp	r5, #0
 800bdba:	4413      	add	r3, r2
 800bdbc:	9307      	str	r3, [sp, #28]
 800bdbe:	dcf7      	bgt.n	800bdb0 <_svfprintf_r+0x920>
 800bdc0:	9a07      	ldr	r2, [sp, #28]
 800bdc2:	f1c5 0301 	rsb	r3, r5, #1
 800bdc6:	441a      	add	r2, r3
 800bdc8:	9207      	str	r2, [sp, #28]
 800bdca:	e7f1      	b.n	800bdb0 <_svfprintf_r+0x920>
 800bdcc:	9507      	str	r5, [sp, #28]
 800bdce:	e7cc      	b.n	800bd6a <_svfprintf_r+0x8da>
 800bdd0:	2366      	movs	r3, #102	; 0x66
 800bdd2:	930a      	str	r3, [sp, #40]	; 0x28
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	9307      	str	r3, [sp, #28]
 800bdd8:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 800bddc:	930c      	str	r3, [sp, #48]	; 0x30
 800bdde:	d021      	beq.n	800be24 <_svfprintf_r+0x994>
 800bde0:	2600      	movs	r6, #0
 800bde2:	2d00      	cmp	r5, #0
 800bde4:	960c      	str	r6, [sp, #48]	; 0x30
 800bde6:	f77f ae61 	ble.w	800baac <_svfprintf_r+0x61c>
 800bdea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2bff      	cmp	r3, #255	; 0xff
 800bdf0:	d109      	bne.n	800be06 <_svfprintf_r+0x976>
 800bdf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdf4:	9a07      	ldr	r2, [sp, #28]
 800bdf6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bdf8:	4433      	add	r3, r6
 800bdfa:	fb01 2303 	mla	r3, r1, r3, r2
 800bdfe:	9307      	str	r3, [sp, #28]
 800be00:	e654      	b.n	800baac <_svfprintf_r+0x61c>
 800be02:	9507      	str	r5, [sp, #28]
 800be04:	e7d4      	b.n	800bdb0 <_svfprintf_r+0x920>
 800be06:	42ab      	cmp	r3, r5
 800be08:	daf3      	bge.n	800bdf2 <_svfprintf_r+0x962>
 800be0a:	1aed      	subs	r5, r5, r3
 800be0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be0e:	785b      	ldrb	r3, [r3, #1]
 800be10:	b133      	cbz	r3, 800be20 <_svfprintf_r+0x990>
 800be12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be14:	3301      	adds	r3, #1
 800be16:	930c      	str	r3, [sp, #48]	; 0x30
 800be18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be1a:	3301      	adds	r3, #1
 800be1c:	930d      	str	r3, [sp, #52]	; 0x34
 800be1e:	e7e4      	b.n	800bdea <_svfprintf_r+0x95a>
 800be20:	3601      	adds	r6, #1
 800be22:	e7e2      	b.n	800bdea <_svfprintf_r+0x95a>
 800be24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800be26:	e641      	b.n	800baac <_svfprintf_r+0x61c>
 800be28:	1d33      	adds	r3, r6, #4
 800be2a:	f018 0f20 	tst.w	r8, #32
 800be2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800be30:	d00a      	beq.n	800be48 <_svfprintf_r+0x9b8>
 800be32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be34:	6833      	ldr	r3, [r6, #0]
 800be36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800be38:	17d2      	asrs	r2, r2, #31
 800be3a:	e9c3 1200 	strd	r1, r2, [r3]
 800be3e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800be40:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800be44:	f7ff bb60 	b.w	800b508 <_svfprintf_r+0x78>
 800be48:	f018 0f10 	tst.w	r8, #16
 800be4c:	d003      	beq.n	800be56 <_svfprintf_r+0x9c6>
 800be4e:	6833      	ldr	r3, [r6, #0]
 800be50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	e7f3      	b.n	800be3e <_svfprintf_r+0x9ae>
 800be56:	f018 0f40 	tst.w	r8, #64	; 0x40
 800be5a:	d003      	beq.n	800be64 <_svfprintf_r+0x9d4>
 800be5c:	6833      	ldr	r3, [r6, #0]
 800be5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be60:	801a      	strh	r2, [r3, #0]
 800be62:	e7ec      	b.n	800be3e <_svfprintf_r+0x9ae>
 800be64:	f418 7f00 	tst.w	r8, #512	; 0x200
 800be68:	d0f1      	beq.n	800be4e <_svfprintf_r+0x9be>
 800be6a:	6833      	ldr	r3, [r6, #0]
 800be6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be6e:	701a      	strb	r2, [r3, #0]
 800be70:	e7e5      	b.n	800be3e <_svfprintf_r+0x9ae>
 800be72:	f048 0810 	orr.w	r8, r8, #16
 800be76:	f018 0320 	ands.w	r3, r8, #32
 800be7a:	d020      	beq.n	800bebe <_svfprintf_r+0xa2e>
 800be7c:	1df3      	adds	r3, r6, #7
 800be7e:	f023 0307 	bic.w	r3, r3, #7
 800be82:	461a      	mov	r2, r3
 800be84:	f852 6b08 	ldr.w	r6, [r2], #8
 800be88:	685f      	ldr	r7, [r3, #4]
 800be8a:	920b      	str	r2, [sp, #44]	; 0x2c
 800be8c:	2300      	movs	r3, #0
 800be8e:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800be92:	2200      	movs	r2, #0
 800be94:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800be98:	9a07      	ldr	r2, [sp, #28]
 800be9a:	3201      	adds	r2, #1
 800be9c:	f000 8495 	beq.w	800c7ca <_svfprintf_r+0x133a>
 800bea0:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 800bea4:	9208      	str	r2, [sp, #32]
 800bea6:	ea56 0207 	orrs.w	r2, r6, r7
 800beaa:	f040 8494 	bne.w	800c7d6 <_svfprintf_r+0x1346>
 800beae:	9a07      	ldr	r2, [sp, #28]
 800beb0:	2a00      	cmp	r2, #0
 800beb2:	f000 80fb 	beq.w	800c0ac <_svfprintf_r+0xc1c>
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	f040 8490 	bne.w	800c7dc <_svfprintf_r+0x134c>
 800bebc:	e09f      	b.n	800bffe <_svfprintf_r+0xb6e>
 800bebe:	4632      	mov	r2, r6
 800bec0:	f852 6b04 	ldr.w	r6, [r2], #4
 800bec4:	f018 0710 	ands.w	r7, r8, #16
 800bec8:	920b      	str	r2, [sp, #44]	; 0x2c
 800beca:	d001      	beq.n	800bed0 <_svfprintf_r+0xa40>
 800becc:	461f      	mov	r7, r3
 800bece:	e7dd      	b.n	800be8c <_svfprintf_r+0x9fc>
 800bed0:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800bed4:	d001      	beq.n	800beda <_svfprintf_r+0xa4a>
 800bed6:	b2b6      	uxth	r6, r6
 800bed8:	e7d8      	b.n	800be8c <_svfprintf_r+0x9fc>
 800beda:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800bede:	d0d5      	beq.n	800be8c <_svfprintf_r+0x9fc>
 800bee0:	b2f6      	uxtb	r6, r6
 800bee2:	e7f3      	b.n	800becc <_svfprintf_r+0xa3c>
 800bee4:	4633      	mov	r3, r6
 800bee6:	f853 6b04 	ldr.w	r6, [r3], #4
 800beea:	2278      	movs	r2, #120	; 0x78
 800beec:	930b      	str	r3, [sp, #44]	; 0x2c
 800beee:	2330      	movs	r3, #48	; 0x30
 800bef0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800bef4:	4ba6      	ldr	r3, [pc, #664]	; (800c190 <_svfprintf_r+0xd00>)
 800bef6:	2700      	movs	r7, #0
 800bef8:	931a      	str	r3, [sp, #104]	; 0x68
 800befa:	f048 0802 	orr.w	r8, r8, #2
 800befe:	2302      	movs	r3, #2
 800bf00:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800bf04:	920a      	str	r2, [sp, #40]	; 0x28
 800bf06:	e7c4      	b.n	800be92 <_svfprintf_r+0xa02>
 800bf08:	4633      	mov	r3, r6
 800bf0a:	2500      	movs	r5, #0
 800bf0c:	f853 ab04 	ldr.w	sl, [r3], #4
 800bf10:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 800bf14:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf16:	9b07      	ldr	r3, [sp, #28]
 800bf18:	1c58      	adds	r0, r3, #1
 800bf1a:	d010      	beq.n	800bf3e <_svfprintf_r+0xaae>
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	4629      	mov	r1, r5
 800bf20:	4650      	mov	r0, sl
 800bf22:	f002 f915 	bl	800e150 <memchr>
 800bf26:	9008      	str	r0, [sp, #32]
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	f000 80d6 	beq.w	800c0da <_svfprintf_r+0xc4a>
 800bf2e:	eba0 030a 	sub.w	r3, r0, sl
 800bf32:	462f      	mov	r7, r5
 800bf34:	462e      	mov	r6, r5
 800bf36:	e9cd 3507 	strd	r3, r5, [sp, #28]
 800bf3a:	950c      	str	r5, [sp, #48]	; 0x30
 800bf3c:	e5be      	b.n	800babc <_svfprintf_r+0x62c>
 800bf3e:	4650      	mov	r0, sl
 800bf40:	f7f4 f972 	bl	8000228 <strlen>
 800bf44:	e9cd 0507 	strd	r0, r5, [sp, #28]
 800bf48:	e46a      	b.n	800b820 <_svfprintf_r+0x390>
 800bf4a:	f048 0810 	orr.w	r8, r8, #16
 800bf4e:	f018 0320 	ands.w	r3, r8, #32
 800bf52:	d009      	beq.n	800bf68 <_svfprintf_r+0xad8>
 800bf54:	1df3      	adds	r3, r6, #7
 800bf56:	f023 0307 	bic.w	r3, r3, #7
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	f852 6b08 	ldr.w	r6, [r2], #8
 800bf60:	685f      	ldr	r7, [r3, #4]
 800bf62:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf64:	2301      	movs	r3, #1
 800bf66:	e794      	b.n	800be92 <_svfprintf_r+0xa02>
 800bf68:	4632      	mov	r2, r6
 800bf6a:	f852 6b04 	ldr.w	r6, [r2], #4
 800bf6e:	f018 0710 	ands.w	r7, r8, #16
 800bf72:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf74:	d001      	beq.n	800bf7a <_svfprintf_r+0xaea>
 800bf76:	461f      	mov	r7, r3
 800bf78:	e7f4      	b.n	800bf64 <_svfprintf_r+0xad4>
 800bf7a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800bf7e:	d001      	beq.n	800bf84 <_svfprintf_r+0xaf4>
 800bf80:	b2b6      	uxth	r6, r6
 800bf82:	e7ef      	b.n	800bf64 <_svfprintf_r+0xad4>
 800bf84:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800bf88:	d0ec      	beq.n	800bf64 <_svfprintf_r+0xad4>
 800bf8a:	b2f6      	uxtb	r6, r6
 800bf8c:	e7f3      	b.n	800bf76 <_svfprintf_r+0xae6>
 800bf8e:	4b81      	ldr	r3, [pc, #516]	; (800c194 <_svfprintf_r+0xd04>)
 800bf90:	931a      	str	r3, [sp, #104]	; 0x68
 800bf92:	f018 0320 	ands.w	r3, r8, #32
 800bf96:	d01b      	beq.n	800bfd0 <_svfprintf_r+0xb40>
 800bf98:	1df3      	adds	r3, r6, #7
 800bf9a:	f023 0307 	bic.w	r3, r3, #7
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	f852 6b08 	ldr.w	r6, [r2], #8
 800bfa4:	685f      	ldr	r7, [r3, #4]
 800bfa6:	920b      	str	r2, [sp, #44]	; 0x2c
 800bfa8:	f018 0f01 	tst.w	r8, #1
 800bfac:	d00a      	beq.n	800bfc4 <_svfprintf_r+0xb34>
 800bfae:	ea56 0307 	orrs.w	r3, r6, r7
 800bfb2:	d007      	beq.n	800bfc4 <_svfprintf_r+0xb34>
 800bfb4:	2330      	movs	r3, #48	; 0x30
 800bfb6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800bfba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfbc:	f048 0802 	orr.w	r8, r8, #2
 800bfc0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800bfca:	e762      	b.n	800be92 <_svfprintf_r+0xa02>
 800bfcc:	4b70      	ldr	r3, [pc, #448]	; (800c190 <_svfprintf_r+0xd00>)
 800bfce:	e7df      	b.n	800bf90 <_svfprintf_r+0xb00>
 800bfd0:	4632      	mov	r2, r6
 800bfd2:	f852 6b04 	ldr.w	r6, [r2], #4
 800bfd6:	f018 0710 	ands.w	r7, r8, #16
 800bfda:	920b      	str	r2, [sp, #44]	; 0x2c
 800bfdc:	d001      	beq.n	800bfe2 <_svfprintf_r+0xb52>
 800bfde:	461f      	mov	r7, r3
 800bfe0:	e7e2      	b.n	800bfa8 <_svfprintf_r+0xb18>
 800bfe2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800bfe6:	d001      	beq.n	800bfec <_svfprintf_r+0xb5c>
 800bfe8:	b2b6      	uxth	r6, r6
 800bfea:	e7dd      	b.n	800bfa8 <_svfprintf_r+0xb18>
 800bfec:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800bff0:	d0da      	beq.n	800bfa8 <_svfprintf_r+0xb18>
 800bff2:	b2f6      	uxtb	r6, r6
 800bff4:	e7f3      	b.n	800bfde <_svfprintf_r+0xb4e>
 800bff6:	2e0a      	cmp	r6, #10
 800bff8:	f177 0300 	sbcs.w	r3, r7, #0
 800bffc:	d206      	bcs.n	800c00c <_svfprintf_r+0xb7c>
 800bffe:	3630      	adds	r6, #48	; 0x30
 800c000:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 800c004:	f20d 1a47 	addw	sl, sp, #327	; 0x147
 800c008:	f000 bc04 	b.w	800c814 <_svfprintf_r+0x1384>
 800c00c:	2300      	movs	r3, #0
 800c00e:	9309      	str	r3, [sp, #36]	; 0x24
 800c010:	9b08      	ldr	r3, [sp, #32]
 800c012:	ad52      	add	r5, sp, #328	; 0x148
 800c014:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 800c018:	220a      	movs	r2, #10
 800c01a:	2300      	movs	r3, #0
 800c01c:	4630      	mov	r0, r6
 800c01e:	4639      	mov	r1, r7
 800c020:	f7f4 fe0e 	bl	8000c40 <__aeabi_uldivmod>
 800c024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c026:	3230      	adds	r2, #48	; 0x30
 800c028:	3301      	adds	r3, #1
 800c02a:	f105 3aff 	add.w	sl, r5, #4294967295
 800c02e:	f805 2c01 	strb.w	r2, [r5, #-1]
 800c032:	9309      	str	r3, [sp, #36]	; 0x24
 800c034:	f1b8 0f00 	cmp.w	r8, #0
 800c038:	d019      	beq.n	800c06e <_svfprintf_r+0xbde>
 800c03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d114      	bne.n	800c06e <_svfprintf_r+0xbde>
 800c044:	2aff      	cmp	r2, #255	; 0xff
 800c046:	d012      	beq.n	800c06e <_svfprintf_r+0xbde>
 800c048:	2e0a      	cmp	r6, #10
 800c04a:	f177 0300 	sbcs.w	r3, r7, #0
 800c04e:	d30e      	bcc.n	800c06e <_svfprintf_r+0xbde>
 800c050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c052:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c054:	ebaa 0a03 	sub.w	sl, sl, r3
 800c058:	461a      	mov	r2, r3
 800c05a:	4650      	mov	r0, sl
 800c05c:	f002 fd66 	bl	800eb2c <strncpy>
 800c060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c062:	785d      	ldrb	r5, [r3, #1]
 800c064:	b195      	cbz	r5, 800c08c <_svfprintf_r+0xbfc>
 800c066:	3301      	adds	r3, #1
 800c068:	930d      	str	r3, [sp, #52]	; 0x34
 800c06a:	2300      	movs	r3, #0
 800c06c:	9309      	str	r3, [sp, #36]	; 0x24
 800c06e:	2300      	movs	r3, #0
 800c070:	220a      	movs	r2, #10
 800c072:	4630      	mov	r0, r6
 800c074:	4639      	mov	r1, r7
 800c076:	f7f4 fde3 	bl	8000c40 <__aeabi_uldivmod>
 800c07a:	2e0a      	cmp	r6, #10
 800c07c:	f177 0300 	sbcs.w	r3, r7, #0
 800c080:	f0c0 83c8 	bcc.w	800c814 <_svfprintf_r+0x1384>
 800c084:	4606      	mov	r6, r0
 800c086:	460f      	mov	r7, r1
 800c088:	4655      	mov	r5, sl
 800c08a:	e7c5      	b.n	800c018 <_svfprintf_r+0xb88>
 800c08c:	9509      	str	r5, [sp, #36]	; 0x24
 800c08e:	e7ee      	b.n	800c06e <_svfprintf_r+0xbde>
 800c090:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c092:	f006 030f 	and.w	r3, r6, #15
 800c096:	5cd3      	ldrb	r3, [r2, r3]
 800c098:	0936      	lsrs	r6, r6, #4
 800c09a:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800c09e:	093f      	lsrs	r7, r7, #4
 800c0a0:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800c0a4:	ea56 0307 	orrs.w	r3, r6, r7
 800c0a8:	d1f2      	bne.n	800c090 <_svfprintf_r+0xc00>
 800c0aa:	e3b3      	b.n	800c814 <_svfprintf_r+0x1384>
 800c0ac:	b933      	cbnz	r3, 800c0bc <_svfprintf_r+0xc2c>
 800c0ae:	f018 0f01 	tst.w	r8, #1
 800c0b2:	d003      	beq.n	800c0bc <_svfprintf_r+0xc2c>
 800c0b4:	2330      	movs	r3, #48	; 0x30
 800c0b6:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 800c0ba:	e7a3      	b.n	800c004 <_svfprintf_r+0xb74>
 800c0bc:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800c0c0:	e3a8      	b.n	800c814 <_svfprintf_r+0x1384>
 800c0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 8375 	beq.w	800c7b4 <_svfprintf_r+0x1324>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800c0d0:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800c0d4:	960b      	str	r6, [sp, #44]	; 0x2c
 800c0d6:	f7ff bb36 	b.w	800b746 <_svfprintf_r+0x2b6>
 800c0da:	9f08      	ldr	r7, [sp, #32]
 800c0dc:	f7ff bba1 	b.w	800b822 <_svfprintf_r+0x392>
 800c0e0:	2010      	movs	r0, #16
 800c0e2:	2a07      	cmp	r2, #7
 800c0e4:	4403      	add	r3, r0
 800c0e6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800c0ea:	6060      	str	r0, [r4, #4]
 800c0ec:	dd08      	ble.n	800c100 <_svfprintf_r+0xc70>
 800c0ee:	4659      	mov	r1, fp
 800c0f0:	4648      	mov	r0, r9
 800c0f2:	aa26      	add	r2, sp, #152	; 0x98
 800c0f4:	f002 fd2d 	bl	800eb52 <__ssprint_r>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	f040 8339 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c0fe:	a929      	add	r1, sp, #164	; 0xa4
 800c100:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c102:	460c      	mov	r4, r1
 800c104:	3b10      	subs	r3, #16
 800c106:	9316      	str	r3, [sp, #88]	; 0x58
 800c108:	e4f4      	b.n	800baf4 <_svfprintf_r+0x664>
 800c10a:	460c      	mov	r4, r1
 800c10c:	e50e      	b.n	800bb2c <_svfprintf_r+0x69c>
 800c10e:	4659      	mov	r1, fp
 800c110:	4648      	mov	r0, r9
 800c112:	aa26      	add	r2, sp, #152	; 0x98
 800c114:	f002 fd1d 	bl	800eb52 <__ssprint_r>
 800c118:	2800      	cmp	r0, #0
 800c11a:	f040 8329 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c11e:	ac29      	add	r4, sp, #164	; 0xa4
 800c120:	e516      	b.n	800bb50 <_svfprintf_r+0x6c0>
 800c122:	4659      	mov	r1, fp
 800c124:	4648      	mov	r0, r9
 800c126:	aa26      	add	r2, sp, #152	; 0x98
 800c128:	f002 fd13 	bl	800eb52 <__ssprint_r>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	f040 831f 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c132:	ac29      	add	r4, sp, #164	; 0xa4
 800c134:	e51c      	b.n	800bb70 <_svfprintf_r+0x6e0>
 800c136:	2010      	movs	r0, #16
 800c138:	2a07      	cmp	r2, #7
 800c13a:	4403      	add	r3, r0
 800c13c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800c140:	6060      	str	r0, [r4, #4]
 800c142:	dd08      	ble.n	800c156 <_svfprintf_r+0xcc6>
 800c144:	4659      	mov	r1, fp
 800c146:	4648      	mov	r0, r9
 800c148:	aa26      	add	r2, sp, #152	; 0x98
 800c14a:	f002 fd02 	bl	800eb52 <__ssprint_r>
 800c14e:	2800      	cmp	r0, #0
 800c150:	f040 830e 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c154:	a929      	add	r1, sp, #164	; 0xa4
 800c156:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c158:	460c      	mov	r4, r1
 800c15a:	3b10      	subs	r3, #16
 800c15c:	9316      	str	r3, [sp, #88]	; 0x58
 800c15e:	e510      	b.n	800bb82 <_svfprintf_r+0x6f2>
 800c160:	460c      	mov	r4, r1
 800c162:	e52a      	b.n	800bbba <_svfprintf_r+0x72a>
 800c164:	2010      	movs	r0, #16
 800c166:	2b07      	cmp	r3, #7
 800c168:	4402      	add	r2, r0
 800c16a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800c16e:	6060      	str	r0, [r4, #4]
 800c170:	dd08      	ble.n	800c184 <_svfprintf_r+0xcf4>
 800c172:	4659      	mov	r1, fp
 800c174:	4648      	mov	r0, r9
 800c176:	aa26      	add	r2, sp, #152	; 0x98
 800c178:	f002 fceb 	bl	800eb52 <__ssprint_r>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	f040 82f7 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c182:	a929      	add	r1, sp, #164	; 0xa4
 800c184:	460c      	mov	r4, r1
 800c186:	3f10      	subs	r7, #16
 800c188:	e51b      	b.n	800bbc2 <_svfprintf_r+0x732>
 800c18a:	460c      	mov	r4, r1
 800c18c:	e542      	b.n	800bc14 <_svfprintf_r+0x784>
 800c18e:	bf00      	nop
 800c190:	08034c58 	.word	0x08034c58
 800c194:	08034c69 	.word	0x08034c69
 800c198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c19a:	2b65      	cmp	r3, #101	; 0x65
 800c19c:	f340 8230 	ble.w	800c600 <_svfprintf_r+0x1170>
 800c1a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f7f4 fc6a 	bl	8000a80 <__aeabi_dcmpeq>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d068      	beq.n	800c282 <_svfprintf_r+0xdf2>
 800c1b0:	4b6d      	ldr	r3, [pc, #436]	; (800c368 <_svfprintf_r+0xed8>)
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	441f      	add	r7, r3
 800c1b8:	6063      	str	r3, [r4, #4]
 800c1ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c1bc:	9728      	str	r7, [sp, #160]	; 0xa0
 800c1be:	3301      	adds	r3, #1
 800c1c0:	2b07      	cmp	r3, #7
 800c1c2:	9327      	str	r3, [sp, #156]	; 0x9c
 800c1c4:	dc37      	bgt.n	800c236 <_svfprintf_r+0xda6>
 800c1c6:	3408      	adds	r4, #8
 800c1c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c1ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	db03      	blt.n	800c1d8 <_svfprintf_r+0xd48>
 800c1d0:	f018 0f01 	tst.w	r8, #1
 800c1d4:	f43f ad30 	beq.w	800bc38 <_svfprintf_r+0x7a8>
 800c1d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1e0:	6063      	str	r3, [r4, #4]
 800c1e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c1e4:	4413      	add	r3, r2
 800c1e6:	9328      	str	r3, [sp, #160]	; 0xa0
 800c1e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	2b07      	cmp	r3, #7
 800c1ee:	9327      	str	r3, [sp, #156]	; 0x9c
 800c1f0:	dc2b      	bgt.n	800c24a <_svfprintf_r+0xdba>
 800c1f2:	3408      	adds	r4, #8
 800c1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f6:	1e5d      	subs	r5, r3, #1
 800c1f8:	2d00      	cmp	r5, #0
 800c1fa:	f77f ad1d 	ble.w	800bc38 <_svfprintf_r+0x7a8>
 800c1fe:	2710      	movs	r7, #16
 800c200:	4e5a      	ldr	r6, [pc, #360]	; (800c36c <_svfprintf_r+0xedc>)
 800c202:	2d10      	cmp	r5, #16
 800c204:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800c208:	f104 0108 	add.w	r1, r4, #8
 800c20c:	f103 0301 	add.w	r3, r3, #1
 800c210:	6026      	str	r6, [r4, #0]
 800c212:	dc24      	bgt.n	800c25e <_svfprintf_r+0xdce>
 800c214:	6065      	str	r5, [r4, #4]
 800c216:	2b07      	cmp	r3, #7
 800c218:	4415      	add	r5, r2
 800c21a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800c21e:	f340 8286 	ble.w	800c72e <_svfprintf_r+0x129e>
 800c222:	4659      	mov	r1, fp
 800c224:	4648      	mov	r0, r9
 800c226:	aa26      	add	r2, sp, #152	; 0x98
 800c228:	f002 fc93 	bl	800eb52 <__ssprint_r>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f040 829f 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c232:	ac29      	add	r4, sp, #164	; 0xa4
 800c234:	e500      	b.n	800bc38 <_svfprintf_r+0x7a8>
 800c236:	4659      	mov	r1, fp
 800c238:	4648      	mov	r0, r9
 800c23a:	aa26      	add	r2, sp, #152	; 0x98
 800c23c:	f002 fc89 	bl	800eb52 <__ssprint_r>
 800c240:	2800      	cmp	r0, #0
 800c242:	f040 8295 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c246:	ac29      	add	r4, sp, #164	; 0xa4
 800c248:	e7be      	b.n	800c1c8 <_svfprintf_r+0xd38>
 800c24a:	4659      	mov	r1, fp
 800c24c:	4648      	mov	r0, r9
 800c24e:	aa26      	add	r2, sp, #152	; 0x98
 800c250:	f002 fc7f 	bl	800eb52 <__ssprint_r>
 800c254:	2800      	cmp	r0, #0
 800c256:	f040 828b 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c25a:	ac29      	add	r4, sp, #164	; 0xa4
 800c25c:	e7ca      	b.n	800c1f4 <_svfprintf_r+0xd64>
 800c25e:	3210      	adds	r2, #16
 800c260:	2b07      	cmp	r3, #7
 800c262:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800c266:	6067      	str	r7, [r4, #4]
 800c268:	dd08      	ble.n	800c27c <_svfprintf_r+0xdec>
 800c26a:	4659      	mov	r1, fp
 800c26c:	4648      	mov	r0, r9
 800c26e:	aa26      	add	r2, sp, #152	; 0x98
 800c270:	f002 fc6f 	bl	800eb52 <__ssprint_r>
 800c274:	2800      	cmp	r0, #0
 800c276:	f040 827b 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c27a:	a929      	add	r1, sp, #164	; 0xa4
 800c27c:	460c      	mov	r4, r1
 800c27e:	3d10      	subs	r5, #16
 800c280:	e7bf      	b.n	800c202 <_svfprintf_r+0xd72>
 800c282:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c284:	2b00      	cmp	r3, #0
 800c286:	dc73      	bgt.n	800c370 <_svfprintf_r+0xee0>
 800c288:	4b37      	ldr	r3, [pc, #220]	; (800c368 <_svfprintf_r+0xed8>)
 800c28a:	6023      	str	r3, [r4, #0]
 800c28c:	2301      	movs	r3, #1
 800c28e:	441f      	add	r7, r3
 800c290:	6063      	str	r3, [r4, #4]
 800c292:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c294:	9728      	str	r7, [sp, #160]	; 0xa0
 800c296:	3301      	adds	r3, #1
 800c298:	2b07      	cmp	r3, #7
 800c29a:	9327      	str	r3, [sp, #156]	; 0x9c
 800c29c:	dc3d      	bgt.n	800c31a <_svfprintf_r+0xe8a>
 800c29e:	3408      	adds	r4, #8
 800c2a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c2a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c2a6:	430a      	orrs	r2, r1
 800c2a8:	f008 0101 	and.w	r1, r8, #1
 800c2ac:	430a      	orrs	r2, r1
 800c2ae:	f43f acc3 	beq.w	800bc38 <_svfprintf_r+0x7a8>
 800c2b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2b4:	6022      	str	r2, [r4, #0]
 800c2b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2b8:	4413      	add	r3, r2
 800c2ba:	9328      	str	r3, [sp, #160]	; 0xa0
 800c2bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c2be:	6062      	str	r2, [r4, #4]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	2b07      	cmp	r3, #7
 800c2c4:	9327      	str	r3, [sp, #156]	; 0x9c
 800c2c6:	dc32      	bgt.n	800c32e <_svfprintf_r+0xe9e>
 800c2c8:	3408      	adds	r4, #8
 800c2ca:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800c2cc:	2d00      	cmp	r5, #0
 800c2ce:	da1b      	bge.n	800c308 <_svfprintf_r+0xe78>
 800c2d0:	4623      	mov	r3, r4
 800c2d2:	2710      	movs	r7, #16
 800c2d4:	4e25      	ldr	r6, [pc, #148]	; (800c36c <_svfprintf_r+0xedc>)
 800c2d6:	426d      	negs	r5, r5
 800c2d8:	2d10      	cmp	r5, #16
 800c2da:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800c2de:	f104 0408 	add.w	r4, r4, #8
 800c2e2:	f102 0201 	add.w	r2, r2, #1
 800c2e6:	601e      	str	r6, [r3, #0]
 800c2e8:	dc2b      	bgt.n	800c342 <_svfprintf_r+0xeb2>
 800c2ea:	605d      	str	r5, [r3, #4]
 800c2ec:	2a07      	cmp	r2, #7
 800c2ee:	440d      	add	r5, r1
 800c2f0:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800c2f4:	dd08      	ble.n	800c308 <_svfprintf_r+0xe78>
 800c2f6:	4659      	mov	r1, fp
 800c2f8:	4648      	mov	r0, r9
 800c2fa:	aa26      	add	r2, sp, #152	; 0x98
 800c2fc:	f002 fc29 	bl	800eb52 <__ssprint_r>
 800c300:	2800      	cmp	r0, #0
 800c302:	f040 8235 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c306:	ac29      	add	r4, sp, #164	; 0xa4
 800c308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c30a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c30c:	6063      	str	r3, [r4, #4]
 800c30e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c310:	f8c4 a000 	str.w	sl, [r4]
 800c314:	4413      	add	r3, r2
 800c316:	9328      	str	r3, [sp, #160]	; 0xa0
 800c318:	e487      	b.n	800bc2a <_svfprintf_r+0x79a>
 800c31a:	4659      	mov	r1, fp
 800c31c:	4648      	mov	r0, r9
 800c31e:	aa26      	add	r2, sp, #152	; 0x98
 800c320:	f002 fc17 	bl	800eb52 <__ssprint_r>
 800c324:	2800      	cmp	r0, #0
 800c326:	f040 8223 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c32a:	ac29      	add	r4, sp, #164	; 0xa4
 800c32c:	e7b8      	b.n	800c2a0 <_svfprintf_r+0xe10>
 800c32e:	4659      	mov	r1, fp
 800c330:	4648      	mov	r0, r9
 800c332:	aa26      	add	r2, sp, #152	; 0x98
 800c334:	f002 fc0d 	bl	800eb52 <__ssprint_r>
 800c338:	2800      	cmp	r0, #0
 800c33a:	f040 8219 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c33e:	ac29      	add	r4, sp, #164	; 0xa4
 800c340:	e7c3      	b.n	800c2ca <_svfprintf_r+0xe3a>
 800c342:	3110      	adds	r1, #16
 800c344:	2a07      	cmp	r2, #7
 800c346:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800c34a:	605f      	str	r7, [r3, #4]
 800c34c:	dd08      	ble.n	800c360 <_svfprintf_r+0xed0>
 800c34e:	4659      	mov	r1, fp
 800c350:	4648      	mov	r0, r9
 800c352:	aa26      	add	r2, sp, #152	; 0x98
 800c354:	f002 fbfd 	bl	800eb52 <__ssprint_r>
 800c358:	2800      	cmp	r0, #0
 800c35a:	f040 8209 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c35e:	ac29      	add	r4, sp, #164	; 0xa4
 800c360:	4623      	mov	r3, r4
 800c362:	3d10      	subs	r5, #16
 800c364:	e7b8      	b.n	800c2d8 <_svfprintf_r+0xe48>
 800c366:	bf00      	nop
 800c368:	08034c7a 	.word	0x08034c7a
 800c36c:	08034c8c 	.word	0x08034c8c
 800c370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c372:	42ab      	cmp	r3, r5
 800c374:	bfa8      	it	ge
 800c376:	462b      	movge	r3, r5
 800c378:	2b00      	cmp	r3, #0
 800c37a:	9307      	str	r3, [sp, #28]
 800c37c:	dd0a      	ble.n	800c394 <_svfprintf_r+0xf04>
 800c37e:	441f      	add	r7, r3
 800c380:	e9c4 a300 	strd	sl, r3, [r4]
 800c384:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c386:	9728      	str	r7, [sp, #160]	; 0xa0
 800c388:	3301      	adds	r3, #1
 800c38a:	2b07      	cmp	r3, #7
 800c38c:	9327      	str	r3, [sp, #156]	; 0x9c
 800c38e:	f300 8085 	bgt.w	800c49c <_svfprintf_r+0x100c>
 800c392:	3408      	adds	r4, #8
 800c394:	9b07      	ldr	r3, [sp, #28]
 800c396:	2b00      	cmp	r3, #0
 800c398:	bfb4      	ite	lt
 800c39a:	462f      	movlt	r7, r5
 800c39c:	1aef      	subge	r7, r5, r3
 800c39e:	2f00      	cmp	r7, #0
 800c3a0:	dd19      	ble.n	800c3d6 <_svfprintf_r+0xf46>
 800c3a2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800c3a6:	4895      	ldr	r0, [pc, #596]	; (800c5fc <_svfprintf_r+0x116c>)
 800c3a8:	2f10      	cmp	r7, #16
 800c3aa:	f103 0301 	add.w	r3, r3, #1
 800c3ae:	f104 0108 	add.w	r1, r4, #8
 800c3b2:	6020      	str	r0, [r4, #0]
 800c3b4:	dc7c      	bgt.n	800c4b0 <_svfprintf_r+0x1020>
 800c3b6:	6067      	str	r7, [r4, #4]
 800c3b8:	2b07      	cmp	r3, #7
 800c3ba:	4417      	add	r7, r2
 800c3bc:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800c3c0:	f340 8089 	ble.w	800c4d6 <_svfprintf_r+0x1046>
 800c3c4:	4659      	mov	r1, fp
 800c3c6:	4648      	mov	r0, r9
 800c3c8:	aa26      	add	r2, sp, #152	; 0x98
 800c3ca:	f002 fbc2 	bl	800eb52 <__ssprint_r>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f040 81ce 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c3d4:	ac29      	add	r4, sp, #164	; 0xa4
 800c3d6:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800c3da:	4455      	add	r5, sl
 800c3dc:	d009      	beq.n	800c3f2 <_svfprintf_r+0xf62>
 800c3de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d17a      	bne.n	800c4da <_svfprintf_r+0x104a>
 800c3e4:	2e00      	cmp	r6, #0
 800c3e6:	d17a      	bne.n	800c4de <_svfprintf_r+0x104e>
 800c3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ea:	4453      	add	r3, sl
 800c3ec:	429d      	cmp	r5, r3
 800c3ee:	bf28      	it	cs
 800c3f0:	461d      	movcs	r5, r3
 800c3f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c3f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	db02      	blt.n	800c400 <_svfprintf_r+0xf70>
 800c3fa:	f018 0f01 	tst.w	r8, #1
 800c3fe:	d00e      	beq.n	800c41e <_svfprintf_r+0xf8e>
 800c400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c402:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c408:	6063      	str	r3, [r4, #4]
 800c40a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c40c:	4413      	add	r3, r2
 800c40e:	9328      	str	r3, [sp, #160]	; 0xa0
 800c410:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c412:	3301      	adds	r3, #1
 800c414:	2b07      	cmp	r3, #7
 800c416:	9327      	str	r3, [sp, #156]	; 0x9c
 800c418:	f300 80db 	bgt.w	800c5d2 <_svfprintf_r+0x1142>
 800c41c:	3408      	adds	r4, #8
 800c41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c420:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c422:	eb0a 0203 	add.w	r2, sl, r3
 800c426:	1b9e      	subs	r6, r3, r6
 800c428:	1b52      	subs	r2, r2, r5
 800c42a:	4296      	cmp	r6, r2
 800c42c:	bfa8      	it	ge
 800c42e:	4616      	movge	r6, r2
 800c430:	2e00      	cmp	r6, #0
 800c432:	dd0b      	ble.n	800c44c <_svfprintf_r+0xfbc>
 800c434:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c436:	e9c4 5600 	strd	r5, r6, [r4]
 800c43a:	4433      	add	r3, r6
 800c43c:	9328      	str	r3, [sp, #160]	; 0xa0
 800c43e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c440:	3301      	adds	r3, #1
 800c442:	2b07      	cmp	r3, #7
 800c444:	9327      	str	r3, [sp, #156]	; 0x9c
 800c446:	f300 80ce 	bgt.w	800c5e6 <_svfprintf_r+0x1156>
 800c44a:	3408      	adds	r4, #8
 800c44c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800c44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c450:	2e00      	cmp	r6, #0
 800c452:	eba3 0505 	sub.w	r5, r3, r5
 800c456:	bfa8      	it	ge
 800c458:	1bad      	subge	r5, r5, r6
 800c45a:	2d00      	cmp	r5, #0
 800c45c:	f77f abec 	ble.w	800bc38 <_svfprintf_r+0x7a8>
 800c460:	2710      	movs	r7, #16
 800c462:	4e66      	ldr	r6, [pc, #408]	; (800c5fc <_svfprintf_r+0x116c>)
 800c464:	2d10      	cmp	r5, #16
 800c466:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800c46a:	f104 0108 	add.w	r1, r4, #8
 800c46e:	f103 0301 	add.w	r3, r3, #1
 800c472:	6026      	str	r6, [r4, #0]
 800c474:	f77f aece 	ble.w	800c214 <_svfprintf_r+0xd84>
 800c478:	3210      	adds	r2, #16
 800c47a:	2b07      	cmp	r3, #7
 800c47c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800c480:	6067      	str	r7, [r4, #4]
 800c482:	dd08      	ble.n	800c496 <_svfprintf_r+0x1006>
 800c484:	4659      	mov	r1, fp
 800c486:	4648      	mov	r0, r9
 800c488:	aa26      	add	r2, sp, #152	; 0x98
 800c48a:	f002 fb62 	bl	800eb52 <__ssprint_r>
 800c48e:	2800      	cmp	r0, #0
 800c490:	f040 816e 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c494:	a929      	add	r1, sp, #164	; 0xa4
 800c496:	460c      	mov	r4, r1
 800c498:	3d10      	subs	r5, #16
 800c49a:	e7e3      	b.n	800c464 <_svfprintf_r+0xfd4>
 800c49c:	4659      	mov	r1, fp
 800c49e:	4648      	mov	r0, r9
 800c4a0:	aa26      	add	r2, sp, #152	; 0x98
 800c4a2:	f002 fb56 	bl	800eb52 <__ssprint_r>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	f040 8162 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c4ac:	ac29      	add	r4, sp, #164	; 0xa4
 800c4ae:	e771      	b.n	800c394 <_svfprintf_r+0xf04>
 800c4b0:	2010      	movs	r0, #16
 800c4b2:	2b07      	cmp	r3, #7
 800c4b4:	4402      	add	r2, r0
 800c4b6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800c4ba:	6060      	str	r0, [r4, #4]
 800c4bc:	dd08      	ble.n	800c4d0 <_svfprintf_r+0x1040>
 800c4be:	4659      	mov	r1, fp
 800c4c0:	4648      	mov	r0, r9
 800c4c2:	aa26      	add	r2, sp, #152	; 0x98
 800c4c4:	f002 fb45 	bl	800eb52 <__ssprint_r>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	f040 8151 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c4ce:	a929      	add	r1, sp, #164	; 0xa4
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	3f10      	subs	r7, #16
 800c4d4:	e765      	b.n	800c3a2 <_svfprintf_r+0xf12>
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	e77d      	b.n	800c3d6 <_svfprintf_r+0xf46>
 800c4da:	2e00      	cmp	r6, #0
 800c4dc:	d049      	beq.n	800c572 <_svfprintf_r+0x10e2>
 800c4de:	3e01      	subs	r6, #1
 800c4e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c4e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4e8:	6063      	str	r3, [r4, #4]
 800c4ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c4ec:	4413      	add	r3, r2
 800c4ee:	9328      	str	r3, [sp, #160]	; 0xa0
 800c4f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	2b07      	cmp	r3, #7
 800c4f6:	9327      	str	r3, [sp, #156]	; 0x9c
 800c4f8:	dc42      	bgt.n	800c580 <_svfprintf_r+0x10f0>
 800c4fa:	3408      	adds	r4, #8
 800c4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c500:	4453      	add	r3, sl
 800c502:	7812      	ldrb	r2, [r2, #0]
 800c504:	1b5b      	subs	r3, r3, r5
 800c506:	429a      	cmp	r2, r3
 800c508:	bfa8      	it	ge
 800c50a:	461a      	movge	r2, r3
 800c50c:	2a00      	cmp	r2, #0
 800c50e:	9207      	str	r2, [sp, #28]
 800c510:	dd0a      	ble.n	800c528 <_svfprintf_r+0x1098>
 800c512:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c514:	e9c4 5200 	strd	r5, r2, [r4]
 800c518:	4413      	add	r3, r2
 800c51a:	9328      	str	r3, [sp, #160]	; 0xa0
 800c51c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c51e:	3301      	adds	r3, #1
 800c520:	2b07      	cmp	r3, #7
 800c522:	9327      	str	r3, [sp, #156]	; 0x9c
 800c524:	dc36      	bgt.n	800c594 <_svfprintf_r+0x1104>
 800c526:	3408      	adds	r4, #8
 800c528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c52a:	781f      	ldrb	r7, [r3, #0]
 800c52c:	9b07      	ldr	r3, [sp, #28]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bfa8      	it	ge
 800c532:	1aff      	subge	r7, r7, r3
 800c534:	2f00      	cmp	r7, #0
 800c536:	dd18      	ble.n	800c56a <_svfprintf_r+0x10da>
 800c538:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800c53c:	482f      	ldr	r0, [pc, #188]	; (800c5fc <_svfprintf_r+0x116c>)
 800c53e:	2f10      	cmp	r7, #16
 800c540:	f103 0301 	add.w	r3, r3, #1
 800c544:	f104 0108 	add.w	r1, r4, #8
 800c548:	6020      	str	r0, [r4, #0]
 800c54a:	dc2d      	bgt.n	800c5a8 <_svfprintf_r+0x1118>
 800c54c:	443a      	add	r2, r7
 800c54e:	2b07      	cmp	r3, #7
 800c550:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800c554:	6067      	str	r7, [r4, #4]
 800c556:	dd3a      	ble.n	800c5ce <_svfprintf_r+0x113e>
 800c558:	4659      	mov	r1, fp
 800c55a:	4648      	mov	r0, r9
 800c55c:	aa26      	add	r2, sp, #152	; 0x98
 800c55e:	f002 faf8 	bl	800eb52 <__ssprint_r>
 800c562:	2800      	cmp	r0, #0
 800c564:	f040 8104 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c568:	ac29      	add	r4, sp, #164	; 0xa4
 800c56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	441d      	add	r5, r3
 800c570:	e735      	b.n	800c3de <_svfprintf_r+0xf4e>
 800c572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c574:	3b01      	subs	r3, #1
 800c576:	930d      	str	r3, [sp, #52]	; 0x34
 800c578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c57a:	3b01      	subs	r3, #1
 800c57c:	930c      	str	r3, [sp, #48]	; 0x30
 800c57e:	e7af      	b.n	800c4e0 <_svfprintf_r+0x1050>
 800c580:	4659      	mov	r1, fp
 800c582:	4648      	mov	r0, r9
 800c584:	aa26      	add	r2, sp, #152	; 0x98
 800c586:	f002 fae4 	bl	800eb52 <__ssprint_r>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	f040 80f0 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c590:	ac29      	add	r4, sp, #164	; 0xa4
 800c592:	e7b3      	b.n	800c4fc <_svfprintf_r+0x106c>
 800c594:	4659      	mov	r1, fp
 800c596:	4648      	mov	r0, r9
 800c598:	aa26      	add	r2, sp, #152	; 0x98
 800c59a:	f002 fada 	bl	800eb52 <__ssprint_r>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f040 80e6 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c5a4:	ac29      	add	r4, sp, #164	; 0xa4
 800c5a6:	e7bf      	b.n	800c528 <_svfprintf_r+0x1098>
 800c5a8:	2010      	movs	r0, #16
 800c5aa:	2b07      	cmp	r3, #7
 800c5ac:	4402      	add	r2, r0
 800c5ae:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800c5b2:	6060      	str	r0, [r4, #4]
 800c5b4:	dd08      	ble.n	800c5c8 <_svfprintf_r+0x1138>
 800c5b6:	4659      	mov	r1, fp
 800c5b8:	4648      	mov	r0, r9
 800c5ba:	aa26      	add	r2, sp, #152	; 0x98
 800c5bc:	f002 fac9 	bl	800eb52 <__ssprint_r>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	f040 80d5 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c5c6:	a929      	add	r1, sp, #164	; 0xa4
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	3f10      	subs	r7, #16
 800c5cc:	e7b4      	b.n	800c538 <_svfprintf_r+0x10a8>
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	e7cb      	b.n	800c56a <_svfprintf_r+0x10da>
 800c5d2:	4659      	mov	r1, fp
 800c5d4:	4648      	mov	r0, r9
 800c5d6:	aa26      	add	r2, sp, #152	; 0x98
 800c5d8:	f002 fabb 	bl	800eb52 <__ssprint_r>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	f040 80c7 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c5e2:	ac29      	add	r4, sp, #164	; 0xa4
 800c5e4:	e71b      	b.n	800c41e <_svfprintf_r+0xf8e>
 800c5e6:	4659      	mov	r1, fp
 800c5e8:	4648      	mov	r0, r9
 800c5ea:	aa26      	add	r2, sp, #152	; 0x98
 800c5ec:	f002 fab1 	bl	800eb52 <__ssprint_r>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f040 80bd 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c5f6:	ac29      	add	r4, sp, #164	; 0xa4
 800c5f8:	e728      	b.n	800c44c <_svfprintf_r+0xfbc>
 800c5fa:	bf00      	nop
 800c5fc:	08034c8c 	.word	0x08034c8c
 800c600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c602:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c604:	2a01      	cmp	r2, #1
 800c606:	f107 0701 	add.w	r7, r7, #1
 800c60a:	f103 0301 	add.w	r3, r3, #1
 800c60e:	f104 0508 	add.w	r5, r4, #8
 800c612:	dc02      	bgt.n	800c61a <_svfprintf_r+0x118a>
 800c614:	f018 0f01 	tst.w	r8, #1
 800c618:	d07e      	beq.n	800c718 <_svfprintf_r+0x1288>
 800c61a:	2201      	movs	r2, #1
 800c61c:	2b07      	cmp	r3, #7
 800c61e:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800c622:	f8c4 a000 	str.w	sl, [r4]
 800c626:	6062      	str	r2, [r4, #4]
 800c628:	dd08      	ble.n	800c63c <_svfprintf_r+0x11ac>
 800c62a:	4659      	mov	r1, fp
 800c62c:	4648      	mov	r0, r9
 800c62e:	aa26      	add	r2, sp, #152	; 0x98
 800c630:	f002 fa8f 	bl	800eb52 <__ssprint_r>
 800c634:	2800      	cmp	r0, #0
 800c636:	f040 809b 	bne.w	800c770 <_svfprintf_r+0x12e0>
 800c63a:	ad29      	add	r5, sp, #164	; 0xa4
 800c63c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c63e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c640:	602b      	str	r3, [r5, #0]
 800c642:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c644:	606b      	str	r3, [r5, #4]
 800c646:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c648:	4413      	add	r3, r2
 800c64a:	9328      	str	r3, [sp, #160]	; 0xa0
 800c64c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c64e:	3301      	adds	r3, #1
 800c650:	2b07      	cmp	r3, #7
 800c652:	9327      	str	r3, [sp, #156]	; 0x9c
 800c654:	dc32      	bgt.n	800c6bc <_svfprintf_r+0x122c>
 800c656:	3508      	adds	r5, #8
 800c658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c65a:	2200      	movs	r2, #0
 800c65c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c660:	1e5c      	subs	r4, r3, #1
 800c662:	2300      	movs	r3, #0
 800c664:	f7f4 fa0c 	bl	8000a80 <__aeabi_dcmpeq>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d130      	bne.n	800c6ce <_svfprintf_r+0x123e>
 800c66c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c66e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c672:	3101      	adds	r1, #1
 800c674:	3b01      	subs	r3, #1
 800c676:	f10a 0001 	add.w	r0, sl, #1
 800c67a:	4413      	add	r3, r2
 800c67c:	2907      	cmp	r1, #7
 800c67e:	e9c5 0400 	strd	r0, r4, [r5]
 800c682:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 800c686:	dd50      	ble.n	800c72a <_svfprintf_r+0x129a>
 800c688:	4659      	mov	r1, fp
 800c68a:	4648      	mov	r0, r9
 800c68c:	aa26      	add	r2, sp, #152	; 0x98
 800c68e:	f002 fa60 	bl	800eb52 <__ssprint_r>
 800c692:	2800      	cmp	r0, #0
 800c694:	d16c      	bne.n	800c770 <_svfprintf_r+0x12e0>
 800c696:	ad29      	add	r5, sp, #164	; 0xa4
 800c698:	ab22      	add	r3, sp, #136	; 0x88
 800c69a:	602b      	str	r3, [r5, #0]
 800c69c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c69e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c6a0:	606b      	str	r3, [r5, #4]
 800c6a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c6a4:	4413      	add	r3, r2
 800c6a6:	9328      	str	r3, [sp, #160]	; 0xa0
 800c6a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	2b07      	cmp	r3, #7
 800c6ae:	9327      	str	r3, [sp, #156]	; 0x9c
 800c6b0:	f73f adb7 	bgt.w	800c222 <_svfprintf_r+0xd92>
 800c6b4:	f105 0408 	add.w	r4, r5, #8
 800c6b8:	f7ff babe 	b.w	800bc38 <_svfprintf_r+0x7a8>
 800c6bc:	4659      	mov	r1, fp
 800c6be:	4648      	mov	r0, r9
 800c6c0:	aa26      	add	r2, sp, #152	; 0x98
 800c6c2:	f002 fa46 	bl	800eb52 <__ssprint_r>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d152      	bne.n	800c770 <_svfprintf_r+0x12e0>
 800c6ca:	ad29      	add	r5, sp, #164	; 0xa4
 800c6cc:	e7c4      	b.n	800c658 <_svfprintf_r+0x11c8>
 800c6ce:	2c00      	cmp	r4, #0
 800c6d0:	dde2      	ble.n	800c698 <_svfprintf_r+0x1208>
 800c6d2:	2710      	movs	r7, #16
 800c6d4:	4e56      	ldr	r6, [pc, #344]	; (800c830 <_svfprintf_r+0x13a0>)
 800c6d6:	2c10      	cmp	r4, #16
 800c6d8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800c6dc:	f105 0108 	add.w	r1, r5, #8
 800c6e0:	f103 0301 	add.w	r3, r3, #1
 800c6e4:	602e      	str	r6, [r5, #0]
 800c6e6:	dc07      	bgt.n	800c6f8 <_svfprintf_r+0x1268>
 800c6e8:	606c      	str	r4, [r5, #4]
 800c6ea:	2b07      	cmp	r3, #7
 800c6ec:	4414      	add	r4, r2
 800c6ee:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800c6f2:	dcc9      	bgt.n	800c688 <_svfprintf_r+0x11f8>
 800c6f4:	460d      	mov	r5, r1
 800c6f6:	e7cf      	b.n	800c698 <_svfprintf_r+0x1208>
 800c6f8:	3210      	adds	r2, #16
 800c6fa:	2b07      	cmp	r3, #7
 800c6fc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800c700:	606f      	str	r7, [r5, #4]
 800c702:	dd06      	ble.n	800c712 <_svfprintf_r+0x1282>
 800c704:	4659      	mov	r1, fp
 800c706:	4648      	mov	r0, r9
 800c708:	aa26      	add	r2, sp, #152	; 0x98
 800c70a:	f002 fa22 	bl	800eb52 <__ssprint_r>
 800c70e:	bb78      	cbnz	r0, 800c770 <_svfprintf_r+0x12e0>
 800c710:	a929      	add	r1, sp, #164	; 0xa4
 800c712:	460d      	mov	r5, r1
 800c714:	3c10      	subs	r4, #16
 800c716:	e7de      	b.n	800c6d6 <_svfprintf_r+0x1246>
 800c718:	2201      	movs	r2, #1
 800c71a:	2b07      	cmp	r3, #7
 800c71c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800c720:	f8c4 a000 	str.w	sl, [r4]
 800c724:	6062      	str	r2, [r4, #4]
 800c726:	ddb7      	ble.n	800c698 <_svfprintf_r+0x1208>
 800c728:	e7ae      	b.n	800c688 <_svfprintf_r+0x11f8>
 800c72a:	3508      	adds	r5, #8
 800c72c:	e7b4      	b.n	800c698 <_svfprintf_r+0x1208>
 800c72e:	460c      	mov	r4, r1
 800c730:	f7ff ba82 	b.w	800bc38 <_svfprintf_r+0x7a8>
 800c734:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800c738:	1a9d      	subs	r5, r3, r2
 800c73a:	2d00      	cmp	r5, #0
 800c73c:	f77f aa80 	ble.w	800bc40 <_svfprintf_r+0x7b0>
 800c740:	2710      	movs	r7, #16
 800c742:	4e3c      	ldr	r6, [pc, #240]	; (800c834 <_svfprintf_r+0x13a4>)
 800c744:	2d10      	cmp	r5, #16
 800c746:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800c74a:	6026      	str	r6, [r4, #0]
 800c74c:	f103 0301 	add.w	r3, r3, #1
 800c750:	dc18      	bgt.n	800c784 <_svfprintf_r+0x12f4>
 800c752:	6065      	str	r5, [r4, #4]
 800c754:	2b07      	cmp	r3, #7
 800c756:	4415      	add	r5, r2
 800c758:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800c75c:	f77f aa70 	ble.w	800bc40 <_svfprintf_r+0x7b0>
 800c760:	4659      	mov	r1, fp
 800c762:	4648      	mov	r0, r9
 800c764:	aa26      	add	r2, sp, #152	; 0x98
 800c766:	f002 f9f4 	bl	800eb52 <__ssprint_r>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	f43f aa68 	beq.w	800bc40 <_svfprintf_r+0x7b0>
 800c770:	9b08      	ldr	r3, [sp, #32]
 800c772:	2b00      	cmp	r3, #0
 800c774:	f43f a88d 	beq.w	800b892 <_svfprintf_r+0x402>
 800c778:	4619      	mov	r1, r3
 800c77a:	4648      	mov	r0, r9
 800c77c:	f001 f8a2 	bl	800d8c4 <_free_r>
 800c780:	f7ff b887 	b.w	800b892 <_svfprintf_r+0x402>
 800c784:	3210      	adds	r2, #16
 800c786:	2b07      	cmp	r3, #7
 800c788:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800c78c:	6067      	str	r7, [r4, #4]
 800c78e:	dc02      	bgt.n	800c796 <_svfprintf_r+0x1306>
 800c790:	3408      	adds	r4, #8
 800c792:	3d10      	subs	r5, #16
 800c794:	e7d6      	b.n	800c744 <_svfprintf_r+0x12b4>
 800c796:	4659      	mov	r1, fp
 800c798:	4648      	mov	r0, r9
 800c79a:	aa26      	add	r2, sp, #152	; 0x98
 800c79c:	f002 f9d9 	bl	800eb52 <__ssprint_r>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d1e5      	bne.n	800c770 <_svfprintf_r+0x12e0>
 800c7a4:	ac29      	add	r4, sp, #164	; 0xa4
 800c7a6:	e7f4      	b.n	800c792 <_svfprintf_r+0x1302>
 800c7a8:	4648      	mov	r0, r9
 800c7aa:	9908      	ldr	r1, [sp, #32]
 800c7ac:	f001 f88a 	bl	800d8c4 <_free_r>
 800c7b0:	f7ff ba5e 	b.w	800bc70 <_svfprintf_r+0x7e0>
 800c7b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f43f a86b 	beq.w	800b892 <_svfprintf_r+0x402>
 800c7bc:	4659      	mov	r1, fp
 800c7be:	4648      	mov	r0, r9
 800c7c0:	aa26      	add	r2, sp, #152	; 0x98
 800c7c2:	f002 f9c6 	bl	800eb52 <__ssprint_r>
 800c7c6:	f7ff b864 	b.w	800b892 <_svfprintf_r+0x402>
 800c7ca:	ea56 0207 	orrs.w	r2, r6, r7
 800c7ce:	f8cd 8020 	str.w	r8, [sp, #32]
 800c7d2:	f43f ab70 	beq.w	800beb6 <_svfprintf_r+0xa26>
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	f43f ac0d 	beq.w	800bff6 <_svfprintf_r+0xb66>
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800c7e2:	f43f ac55 	beq.w	800c090 <_svfprintf_r+0xc00>
 800c7e6:	f006 0307 	and.w	r3, r6, #7
 800c7ea:	08f6      	lsrs	r6, r6, #3
 800c7ec:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800c7f0:	08ff      	lsrs	r7, r7, #3
 800c7f2:	3330      	adds	r3, #48	; 0x30
 800c7f4:	ea56 0107 	orrs.w	r1, r6, r7
 800c7f8:	4652      	mov	r2, sl
 800c7fa:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800c7fe:	d1f2      	bne.n	800c7e6 <_svfprintf_r+0x1356>
 800c800:	9908      	ldr	r1, [sp, #32]
 800c802:	07c9      	lsls	r1, r1, #31
 800c804:	d506      	bpl.n	800c814 <_svfprintf_r+0x1384>
 800c806:	2b30      	cmp	r3, #48	; 0x30
 800c808:	d004      	beq.n	800c814 <_svfprintf_r+0x1384>
 800c80a:	2330      	movs	r3, #48	; 0x30
 800c80c:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800c810:	f1a2 0a02 	sub.w	sl, r2, #2
 800c814:	ab52      	add	r3, sp, #328	; 0x148
 800c816:	eba3 030a 	sub.w	r3, r3, sl
 800c81a:	9f07      	ldr	r7, [sp, #28]
 800c81c:	9307      	str	r3, [sp, #28]
 800c81e:	2300      	movs	r3, #0
 800c820:	461e      	mov	r6, r3
 800c822:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c826:	9308      	str	r3, [sp, #32]
 800c828:	461d      	mov	r5, r3
 800c82a:	930c      	str	r3, [sp, #48]	; 0x30
 800c82c:	f7ff b946 	b.w	800babc <_svfprintf_r+0x62c>
 800c830:	08034c8c 	.word	0x08034c8c
 800c834:	08034c7c 	.word	0x08034c7c

0800c838 <sysconf>:
 800c838:	2808      	cmp	r0, #8
 800c83a:	b508      	push	{r3, lr}
 800c83c:	d006      	beq.n	800c84c <sysconf+0x14>
 800c83e:	f7fb fe27 	bl	8008490 <__errno>
 800c842:	2316      	movs	r3, #22
 800c844:	6003      	str	r3, [r0, #0]
 800c846:	f04f 30ff 	mov.w	r0, #4294967295
 800c84a:	bd08      	pop	{r3, pc}
 800c84c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c850:	e7fb      	b.n	800c84a <sysconf+0x12>

0800c852 <__submore>:
 800c852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c856:	460c      	mov	r4, r1
 800c858:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800c85a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c85e:	4299      	cmp	r1, r3
 800c860:	d11b      	bne.n	800c89a <__submore+0x48>
 800c862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c866:	f7fd f8ab 	bl	80099c0 <_malloc_r>
 800c86a:	b918      	cbnz	r0, 800c874 <__submore+0x22>
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c878:	6363      	str	r3, [r4, #52]	; 0x34
 800c87a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c87e:	6320      	str	r0, [r4, #48]	; 0x30
 800c880:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c884:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c888:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c88c:	7043      	strb	r3, [r0, #1]
 800c88e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c892:	7003      	strb	r3, [r0, #0]
 800c894:	6020      	str	r0, [r4, #0]
 800c896:	2000      	movs	r0, #0
 800c898:	e7ea      	b.n	800c870 <__submore+0x1e>
 800c89a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800c89c:	0077      	lsls	r7, r6, #1
 800c89e:	463a      	mov	r2, r7
 800c8a0:	f7fd fb1c 	bl	8009edc <_realloc_r>
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d0e0      	beq.n	800c86c <__submore+0x1a>
 800c8aa:	eb00 0806 	add.w	r8, r0, r6
 800c8ae:	4601      	mov	r1, r0
 800c8b0:	4632      	mov	r2, r6
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	f001 fc5a 	bl	800e16c <memcpy>
 800c8b8:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800c8bc:	f8c4 8000 	str.w	r8, [r4]
 800c8c0:	e7e9      	b.n	800c896 <__submore+0x44>

0800c8c2 <__ascii_wctomb>:
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	b141      	cbz	r1, 800c8da <__ascii_wctomb+0x18>
 800c8c8:	2aff      	cmp	r2, #255	; 0xff
 800c8ca:	d904      	bls.n	800c8d6 <__ascii_wctomb+0x14>
 800c8cc:	228a      	movs	r2, #138	; 0x8a
 800c8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	4770      	bx	lr
 800c8d6:	2001      	movs	r0, #1
 800c8d8:	700a      	strb	r2, [r1, #0]
 800c8da:	4770      	bx	lr

0800c8dc <__register_exitproc>:
 800c8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c958 <__register_exitproc+0x7c>
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	f8da 0000 	ldr.w	r0, [sl]
 800c8ea:	4698      	mov	r8, r3
 800c8ec:	460f      	mov	r7, r1
 800c8ee:	4691      	mov	r9, r2
 800c8f0:	f7fd f842 	bl	8009978 <__retarget_lock_acquire_recursive>
 800c8f4:	4b19      	ldr	r3, [pc, #100]	; (800c95c <__register_exitproc+0x80>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800c8fc:	b91c      	cbnz	r4, 800c906 <__register_exitproc+0x2a>
 800c8fe:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800c902:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800c906:	6865      	ldr	r5, [r4, #4]
 800c908:	f8da 0000 	ldr.w	r0, [sl]
 800c90c:	2d1f      	cmp	r5, #31
 800c90e:	dd05      	ble.n	800c91c <__register_exitproc+0x40>
 800c910:	f7fd f833 	bl	800997a <__retarget_lock_release_recursive>
 800c914:	f04f 30ff 	mov.w	r0, #4294967295
 800c918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c91c:	b19e      	cbz	r6, 800c946 <__register_exitproc+0x6a>
 800c91e:	2201      	movs	r2, #1
 800c920:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800c924:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800c928:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800c92c:	40aa      	lsls	r2, r5
 800c92e:	4313      	orrs	r3, r2
 800c930:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800c934:	2e02      	cmp	r6, #2
 800c936:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800c93a:	bf02      	ittt	eq
 800c93c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800c940:	4313      	orreq	r3, r2
 800c942:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800c946:	1c6b      	adds	r3, r5, #1
 800c948:	3502      	adds	r5, #2
 800c94a:	6063      	str	r3, [r4, #4]
 800c94c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800c950:	f7fd f813 	bl	800997a <__retarget_lock_release_recursive>
 800c954:	2000      	movs	r0, #0
 800c956:	e7df      	b.n	800c918 <__register_exitproc+0x3c>
 800c958:	20000478 	.word	0x20000478
 800c95c:	08034ac0 	.word	0x08034ac0

0800c960 <quorem>:
 800c960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	6903      	ldr	r3, [r0, #16]
 800c966:	690c      	ldr	r4, [r1, #16]
 800c968:	4607      	mov	r7, r0
 800c96a:	42a3      	cmp	r3, r4
 800c96c:	f2c0 8082 	blt.w	800ca74 <quorem+0x114>
 800c970:	3c01      	subs	r4, #1
 800c972:	f100 0514 	add.w	r5, r0, #20
 800c976:	f101 0814 	add.w	r8, r1, #20
 800c97a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c984:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c988:	3301      	adds	r3, #1
 800c98a:	429a      	cmp	r2, r3
 800c98c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c998:	d331      	bcc.n	800c9fe <quorem+0x9e>
 800c99a:	f04f 0e00 	mov.w	lr, #0
 800c99e:	4640      	mov	r0, r8
 800c9a0:	46ac      	mov	ip, r5
 800c9a2:	46f2      	mov	sl, lr
 800c9a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9a8:	b293      	uxth	r3, r2
 800c9aa:	fb06 e303 	mla	r3, r6, r3, lr
 800c9ae:	0c12      	lsrs	r2, r2, #16
 800c9b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	fb06 e202 	mla	r2, r6, r2, lr
 800c9ba:	ebaa 0303 	sub.w	r3, sl, r3
 800c9be:	f8dc a000 	ldr.w	sl, [ip]
 800c9c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9c6:	fa1f fa8a 	uxth.w	sl, sl
 800c9ca:	4453      	add	r3, sl
 800c9cc:	f8dc a000 	ldr.w	sl, [ip]
 800c9d0:	b292      	uxth	r2, r2
 800c9d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c9d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9e0:	4581      	cmp	r9, r0
 800c9e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c9e6:	f84c 3b04 	str.w	r3, [ip], #4
 800c9ea:	d2db      	bcs.n	800c9a4 <quorem+0x44>
 800c9ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800c9f0:	b92b      	cbnz	r3, 800c9fe <quorem+0x9e>
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	3b04      	subs	r3, #4
 800c9f6:	429d      	cmp	r5, r3
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	d32f      	bcc.n	800ca5c <quorem+0xfc>
 800c9fc:	613c      	str	r4, [r7, #16]
 800c9fe:	4638      	mov	r0, r7
 800ca00:	f001 fe56 	bl	800e6b0 <__mcmp>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	db25      	blt.n	800ca54 <quorem+0xf4>
 800ca08:	4628      	mov	r0, r5
 800ca0a:	f04f 0c00 	mov.w	ip, #0
 800ca0e:	3601      	adds	r6, #1
 800ca10:	f858 1b04 	ldr.w	r1, [r8], #4
 800ca14:	f8d0 e000 	ldr.w	lr, [r0]
 800ca18:	b28b      	uxth	r3, r1
 800ca1a:	ebac 0303 	sub.w	r3, ip, r3
 800ca1e:	fa1f f28e 	uxth.w	r2, lr
 800ca22:	4413      	add	r3, r2
 800ca24:	0c0a      	lsrs	r2, r1, #16
 800ca26:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca34:	45c1      	cmp	r9, r8
 800ca36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca3a:	f840 3b04 	str.w	r3, [r0], #4
 800ca3e:	d2e7      	bcs.n	800ca10 <quorem+0xb0>
 800ca40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca48:	b922      	cbnz	r2, 800ca54 <quorem+0xf4>
 800ca4a:	3b04      	subs	r3, #4
 800ca4c:	429d      	cmp	r5, r3
 800ca4e:	461a      	mov	r2, r3
 800ca50:	d30a      	bcc.n	800ca68 <quorem+0x108>
 800ca52:	613c      	str	r4, [r7, #16]
 800ca54:	4630      	mov	r0, r6
 800ca56:	b003      	add	sp, #12
 800ca58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5c:	6812      	ldr	r2, [r2, #0]
 800ca5e:	3b04      	subs	r3, #4
 800ca60:	2a00      	cmp	r2, #0
 800ca62:	d1cb      	bne.n	800c9fc <quorem+0x9c>
 800ca64:	3c01      	subs	r4, #1
 800ca66:	e7c6      	b.n	800c9f6 <quorem+0x96>
 800ca68:	6812      	ldr	r2, [r2, #0]
 800ca6a:	3b04      	subs	r3, #4
 800ca6c:	2a00      	cmp	r2, #0
 800ca6e:	d1f0      	bne.n	800ca52 <quorem+0xf2>
 800ca70:	3c01      	subs	r4, #1
 800ca72:	e7eb      	b.n	800ca4c <quorem+0xec>
 800ca74:	2000      	movs	r0, #0
 800ca76:	e7ee      	b.n	800ca56 <quorem+0xf6>

0800ca78 <_dtoa_r>:
 800ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800ca7e:	b097      	sub	sp, #92	; 0x5c
 800ca80:	4681      	mov	r9, r0
 800ca82:	4614      	mov	r4, r2
 800ca84:	461d      	mov	r5, r3
 800ca86:	4692      	mov	sl, r2
 800ca88:	469b      	mov	fp, r3
 800ca8a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800ca8c:	b149      	cbz	r1, 800caa2 <_dtoa_r+0x2a>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca92:	4093      	lsls	r3, r2
 800ca94:	608b      	str	r3, [r1, #8]
 800ca96:	604a      	str	r2, [r1, #4]
 800ca98:	f001 fbb5 	bl	800e206 <_Bfree>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800caa2:	1e2b      	subs	r3, r5, #0
 800caa4:	bfad      	iteet	ge
 800caa6:	2300      	movge	r3, #0
 800caa8:	2201      	movlt	r2, #1
 800caaa:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800caae:	6033      	strge	r3, [r6, #0]
 800cab0:	4b9f      	ldr	r3, [pc, #636]	; (800cd30 <_dtoa_r+0x2b8>)
 800cab2:	bfb8      	it	lt
 800cab4:	6032      	strlt	r2, [r6, #0]
 800cab6:	ea33 030b 	bics.w	r3, r3, fp
 800caba:	d119      	bne.n	800caf0 <_dtoa_r+0x78>
 800cabc:	f242 730f 	movw	r3, #9999	; 0x270f
 800cac0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cac2:	6013      	str	r3, [r2, #0]
 800cac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cac8:	4323      	orrs	r3, r4
 800caca:	f000 8574 	beq.w	800d5b6 <_dtoa_r+0xb3e>
 800cace:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cad0:	b90b      	cbnz	r3, 800cad6 <_dtoa_r+0x5e>
 800cad2:	4b98      	ldr	r3, [pc, #608]	; (800cd34 <_dtoa_r+0x2bc>)
 800cad4:	e020      	b.n	800cb18 <_dtoa_r+0xa0>
 800cad6:	4b97      	ldr	r3, [pc, #604]	; (800cd34 <_dtoa_r+0x2bc>)
 800cad8:	9304      	str	r3, [sp, #16]
 800cada:	3303      	adds	r3, #3
 800cadc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	9804      	ldr	r0, [sp, #16]
 800cae2:	b017      	add	sp, #92	; 0x5c
 800cae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae8:	4b93      	ldr	r3, [pc, #588]	; (800cd38 <_dtoa_r+0x2c0>)
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	3308      	adds	r3, #8
 800caee:	e7f5      	b.n	800cadc <_dtoa_r+0x64>
 800caf0:	2200      	movs	r2, #0
 800caf2:	2300      	movs	r3, #0
 800caf4:	4650      	mov	r0, sl
 800caf6:	4659      	mov	r1, fp
 800caf8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800cafc:	f7f3 ffc0 	bl	8000a80 <__aeabi_dcmpeq>
 800cb00:	4607      	mov	r7, r0
 800cb02:	b158      	cbz	r0, 800cb1c <_dtoa_r+0xa4>
 800cb04:	2301      	movs	r3, #1
 800cb06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f000 854f 	beq.w	800d5b0 <_dtoa_r+0xb38>
 800cb12:	488a      	ldr	r0, [pc, #552]	; (800cd3c <_dtoa_r+0x2c4>)
 800cb14:	6018      	str	r0, [r3, #0]
 800cb16:	1e43      	subs	r3, r0, #1
 800cb18:	9304      	str	r3, [sp, #16]
 800cb1a:	e7e1      	b.n	800cae0 <_dtoa_r+0x68>
 800cb1c:	ab14      	add	r3, sp, #80	; 0x50
 800cb1e:	9301      	str	r3, [sp, #4]
 800cb20:	ab15      	add	r3, sp, #84	; 0x54
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	4648      	mov	r0, r9
 800cb26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cb2a:	f001 fee3 	bl	800e8f4 <__d2b>
 800cb2e:	f3cb 560a 	ubfx	r6, fp, #20, #11
 800cb32:	9003      	str	r0, [sp, #12]
 800cb34:	2e00      	cmp	r6, #0
 800cb36:	d07c      	beq.n	800cc32 <_dtoa_r+0x1ba>
 800cb38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb3e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800cb42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cb4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cb4e:	9713      	str	r7, [sp, #76]	; 0x4c
 800cb50:	2200      	movs	r2, #0
 800cb52:	4b7b      	ldr	r3, [pc, #492]	; (800cd40 <_dtoa_r+0x2c8>)
 800cb54:	f7f3 fb74 	bl	8000240 <__aeabi_dsub>
 800cb58:	a36f      	add	r3, pc, #444	; (adr r3, 800cd18 <_dtoa_r+0x2a0>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	f7f3 fd27 	bl	80005b0 <__aeabi_dmul>
 800cb62:	a36f      	add	r3, pc, #444	; (adr r3, 800cd20 <_dtoa_r+0x2a8>)
 800cb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb68:	f7f3 fb6c 	bl	8000244 <__adddf3>
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	4630      	mov	r0, r6
 800cb70:	460d      	mov	r5, r1
 800cb72:	f7f3 fcb3 	bl	80004dc <__aeabi_i2d>
 800cb76:	a36c      	add	r3, pc, #432	; (adr r3, 800cd28 <_dtoa_r+0x2b0>)
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	f7f3 fd18 	bl	80005b0 <__aeabi_dmul>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	4620      	mov	r0, r4
 800cb86:	4629      	mov	r1, r5
 800cb88:	f7f3 fb5c 	bl	8000244 <__adddf3>
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	460d      	mov	r5, r1
 800cb90:	f7f3 ffbe 	bl	8000b10 <__aeabi_d2iz>
 800cb94:	2200      	movs	r2, #0
 800cb96:	4680      	mov	r8, r0
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	f7f3 ff79 	bl	8000a94 <__aeabi_dcmplt>
 800cba2:	b148      	cbz	r0, 800cbb8 <_dtoa_r+0x140>
 800cba4:	4640      	mov	r0, r8
 800cba6:	f7f3 fc99 	bl	80004dc <__aeabi_i2d>
 800cbaa:	4622      	mov	r2, r4
 800cbac:	462b      	mov	r3, r5
 800cbae:	f7f3 ff67 	bl	8000a80 <__aeabi_dcmpeq>
 800cbb2:	b908      	cbnz	r0, 800cbb8 <_dtoa_r+0x140>
 800cbb4:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbb8:	f1b8 0f16 	cmp.w	r8, #22
 800cbbc:	d856      	bhi.n	800cc6c <_dtoa_r+0x1f4>
 800cbbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cbc2:	4b60      	ldr	r3, [pc, #384]	; (800cd44 <_dtoa_r+0x2cc>)
 800cbc4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbcc:	f7f3 ff62 	bl	8000a94 <__aeabi_dcmplt>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d04d      	beq.n	800cc70 <_dtoa_r+0x1f8>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbda:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbde:	1b9e      	subs	r6, r3, r6
 800cbe0:	1e73      	subs	r3, r6, #1
 800cbe2:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe4:	bf49      	itett	mi
 800cbe6:	f1c6 0301 	rsbmi	r3, r6, #1
 800cbea:	2300      	movpl	r3, #0
 800cbec:	9306      	strmi	r3, [sp, #24]
 800cbee:	2300      	movmi	r3, #0
 800cbf0:	bf54      	ite	pl
 800cbf2:	9306      	strpl	r3, [sp, #24]
 800cbf4:	9309      	strmi	r3, [sp, #36]	; 0x24
 800cbf6:	f1b8 0f00 	cmp.w	r8, #0
 800cbfa:	db3b      	blt.n	800cc74 <_dtoa_r+0x1fc>
 800cbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbfe:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cc02:	4443      	add	r3, r8
 800cc04:	9309      	str	r3, [sp, #36]	; 0x24
 800cc06:	2300      	movs	r3, #0
 800cc08:	930a      	str	r3, [sp, #40]	; 0x28
 800cc0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cc0c:	2b09      	cmp	r3, #9
 800cc0e:	d86b      	bhi.n	800cce8 <_dtoa_r+0x270>
 800cc10:	2b05      	cmp	r3, #5
 800cc12:	bfc4      	itt	gt
 800cc14:	3b04      	subgt	r3, #4
 800cc16:	9320      	strgt	r3, [sp, #128]	; 0x80
 800cc18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cc1a:	bfc8      	it	gt
 800cc1c:	2400      	movgt	r4, #0
 800cc1e:	f1a3 0302 	sub.w	r3, r3, #2
 800cc22:	bfd8      	it	le
 800cc24:	2401      	movle	r4, #1
 800cc26:	2b03      	cmp	r3, #3
 800cc28:	d869      	bhi.n	800ccfe <_dtoa_r+0x286>
 800cc2a:	e8df f003 	tbb	[pc, r3]
 800cc2e:	3a2d      	.short	0x3a2d
 800cc30:	5b38      	.short	0x5b38
 800cc32:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 800cc36:	441e      	add	r6, r3
 800cc38:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800cc3c:	2b20      	cmp	r3, #32
 800cc3e:	bfc3      	ittte	gt
 800cc40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc44:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
 800cc48:	fa0b f303 	lslgt.w	r3, fp, r3
 800cc4c:	f1c3 0320 	rsble	r3, r3, #32
 800cc50:	bfc6      	itte	gt
 800cc52:	fa24 f000 	lsrgt.w	r0, r4, r0
 800cc56:	4318      	orrgt	r0, r3
 800cc58:	fa04 f003 	lslle.w	r0, r4, r3
 800cc5c:	f7f3 fc2e 	bl	80004bc <__aeabi_ui2d>
 800cc60:	2301      	movs	r3, #1
 800cc62:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cc66:	3e01      	subs	r6, #1
 800cc68:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc6a:	e771      	b.n	800cb50 <_dtoa_r+0xd8>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e7b4      	b.n	800cbda <_dtoa_r+0x162>
 800cc70:	900f      	str	r0, [sp, #60]	; 0x3c
 800cc72:	e7b3      	b.n	800cbdc <_dtoa_r+0x164>
 800cc74:	9b06      	ldr	r3, [sp, #24]
 800cc76:	eba3 0308 	sub.w	r3, r3, r8
 800cc7a:	9306      	str	r3, [sp, #24]
 800cc7c:	f1c8 0300 	rsb	r3, r8, #0
 800cc80:	930a      	str	r3, [sp, #40]	; 0x28
 800cc82:	2300      	movs	r3, #0
 800cc84:	930e      	str	r3, [sp, #56]	; 0x38
 800cc86:	e7c0      	b.n	800cc0a <_dtoa_r+0x192>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	dc38      	bgt.n	800cd04 <_dtoa_r+0x28c>
 800cc92:	2301      	movs	r3, #1
 800cc94:	461a      	mov	r2, r3
 800cc96:	9308      	str	r3, [sp, #32]
 800cc98:	9305      	str	r3, [sp, #20]
 800cc9a:	9221      	str	r2, [sp, #132]	; 0x84
 800cc9c:	e00b      	b.n	800ccb6 <_dtoa_r+0x23e>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e7f3      	b.n	800cc8a <_dtoa_r+0x212>
 800cca2:	2300      	movs	r3, #0
 800cca4:	930b      	str	r3, [sp, #44]	; 0x2c
 800cca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cca8:	4443      	add	r3, r8
 800ccaa:	9308      	str	r3, [sp, #32]
 800ccac:	3301      	adds	r3, #1
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	9305      	str	r3, [sp, #20]
 800ccb2:	bfb8      	it	lt
 800ccb4:	2301      	movlt	r3, #1
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 800ccbc:	2204      	movs	r2, #4
 800ccbe:	f102 0014 	add.w	r0, r2, #20
 800ccc2:	4298      	cmp	r0, r3
 800ccc4:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 800ccc8:	d920      	bls.n	800cd0c <_dtoa_r+0x294>
 800ccca:	4648      	mov	r0, r9
 800cccc:	f001 fa76 	bl	800e1bc <_Balloc>
 800ccd0:	9004      	str	r0, [sp, #16]
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d13c      	bne.n	800cd50 <_dtoa_r+0x2d8>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ccdc:	4b1a      	ldr	r3, [pc, #104]	; (800cd48 <_dtoa_r+0x2d0>)
 800ccde:	481b      	ldr	r0, [pc, #108]	; (800cd4c <_dtoa_r+0x2d4>)
 800cce0:	f001 ffb2 	bl	800ec48 <__assert_func>
 800cce4:	2301      	movs	r3, #1
 800cce6:	e7dd      	b.n	800cca4 <_dtoa_r+0x22c>
 800cce8:	2401      	movs	r4, #1
 800ccea:	2300      	movs	r3, #0
 800ccec:	940b      	str	r4, [sp, #44]	; 0x2c
 800ccee:	9320      	str	r3, [sp, #128]	; 0x80
 800ccf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	9308      	str	r3, [sp, #32]
 800ccf8:	9305      	str	r3, [sp, #20]
 800ccfa:	2312      	movs	r3, #18
 800ccfc:	e7cd      	b.n	800cc9a <_dtoa_r+0x222>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd02:	e7f5      	b.n	800ccf0 <_dtoa_r+0x278>
 800cd04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd06:	9308      	str	r3, [sp, #32]
 800cd08:	9305      	str	r3, [sp, #20]
 800cd0a:	e7d4      	b.n	800ccb6 <_dtoa_r+0x23e>
 800cd0c:	3101      	adds	r1, #1
 800cd0e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800cd12:	0052      	lsls	r2, r2, #1
 800cd14:	e7d3      	b.n	800ccbe <_dtoa_r+0x246>
 800cd16:	bf00      	nop
 800cd18:	636f4361 	.word	0x636f4361
 800cd1c:	3fd287a7 	.word	0x3fd287a7
 800cd20:	8b60c8b3 	.word	0x8b60c8b3
 800cd24:	3fc68a28 	.word	0x3fc68a28
 800cd28:	509f79fb 	.word	0x509f79fb
 800cd2c:	3fd34413 	.word	0x3fd34413
 800cd30:	7ff00000 	.word	0x7ff00000
 800cd34:	08034c9c 	.word	0x08034c9c
 800cd38:	08034ca0 	.word	0x08034ca0
 800cd3c:	08034c7b 	.word	0x08034c7b
 800cd40:	3ff80000 	.word	0x3ff80000
 800cd44:	08034e08 	.word	0x08034e08
 800cd48:	08034ca9 	.word	0x08034ca9
 800cd4c:	08034cba 	.word	0x08034cba
 800cd50:	9b04      	ldr	r3, [sp, #16]
 800cd52:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800cd56:	9b05      	ldr	r3, [sp, #20]
 800cd58:	2b0e      	cmp	r3, #14
 800cd5a:	f200 80a1 	bhi.w	800cea0 <_dtoa_r+0x428>
 800cd5e:	2c00      	cmp	r4, #0
 800cd60:	f000 809e 	beq.w	800cea0 <_dtoa_r+0x428>
 800cd64:	f1b8 0f00 	cmp.w	r8, #0
 800cd68:	dd34      	ble.n	800cdd4 <_dtoa_r+0x35c>
 800cd6a:	4a96      	ldr	r2, [pc, #600]	; (800cfc4 <_dtoa_r+0x54c>)
 800cd6c:	f008 030f 	and.w	r3, r8, #15
 800cd70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd74:	f418 7f80 	tst.w	r8, #256	; 0x100
 800cd78:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cd7c:	ea4f 1528 	mov.w	r5, r8, asr #4
 800cd80:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cd84:	d016      	beq.n	800cdb4 <_dtoa_r+0x33c>
 800cd86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd8a:	4b8f      	ldr	r3, [pc, #572]	; (800cfc8 <_dtoa_r+0x550>)
 800cd8c:	2603      	movs	r6, #3
 800cd8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd92:	f7f3 fd37 	bl	8000804 <__aeabi_ddiv>
 800cd96:	4682      	mov	sl, r0
 800cd98:	468b      	mov	fp, r1
 800cd9a:	f005 050f 	and.w	r5, r5, #15
 800cd9e:	4c8a      	ldr	r4, [pc, #552]	; (800cfc8 <_dtoa_r+0x550>)
 800cda0:	b955      	cbnz	r5, 800cdb8 <_dtoa_r+0x340>
 800cda2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cda6:	4650      	mov	r0, sl
 800cda8:	4659      	mov	r1, fp
 800cdaa:	f7f3 fd2b 	bl	8000804 <__aeabi_ddiv>
 800cdae:	4682      	mov	sl, r0
 800cdb0:	468b      	mov	fp, r1
 800cdb2:	e028      	b.n	800ce06 <_dtoa_r+0x38e>
 800cdb4:	2602      	movs	r6, #2
 800cdb6:	e7f2      	b.n	800cd9e <_dtoa_r+0x326>
 800cdb8:	07e9      	lsls	r1, r5, #31
 800cdba:	d508      	bpl.n	800cdce <_dtoa_r+0x356>
 800cdbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cdc0:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cdc4:	f7f3 fbf4 	bl	80005b0 <__aeabi_dmul>
 800cdc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cdcc:	3601      	adds	r6, #1
 800cdce:	106d      	asrs	r5, r5, #1
 800cdd0:	3408      	adds	r4, #8
 800cdd2:	e7e5      	b.n	800cda0 <_dtoa_r+0x328>
 800cdd4:	f000 809e 	beq.w	800cf14 <_dtoa_r+0x49c>
 800cdd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cddc:	f1c8 0400 	rsb	r4, r8, #0
 800cde0:	4b78      	ldr	r3, [pc, #480]	; (800cfc4 <_dtoa_r+0x54c>)
 800cde2:	f004 020f 	and.w	r2, r4, #15
 800cde6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f7f3 fbdf 	bl	80005b0 <__aeabi_dmul>
 800cdf2:	2602      	movs	r6, #2
 800cdf4:	4682      	mov	sl, r0
 800cdf6:	468b      	mov	fp, r1
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	4d73      	ldr	r5, [pc, #460]	; (800cfc8 <_dtoa_r+0x550>)
 800cdfc:	1124      	asrs	r4, r4, #4
 800cdfe:	2c00      	cmp	r4, #0
 800ce00:	d17d      	bne.n	800cefe <_dtoa_r+0x486>
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1d3      	bne.n	800cdae <_dtoa_r+0x336>
 800ce06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 8085 	beq.w	800cf18 <_dtoa_r+0x4a0>
 800ce0e:	2200      	movs	r2, #0
 800ce10:	4650      	mov	r0, sl
 800ce12:	4659      	mov	r1, fp
 800ce14:	4b6d      	ldr	r3, [pc, #436]	; (800cfcc <_dtoa_r+0x554>)
 800ce16:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 800ce1a:	f7f3 fe3b 	bl	8000a94 <__aeabi_dcmplt>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d07a      	beq.n	800cf18 <_dtoa_r+0x4a0>
 800ce22:	9b05      	ldr	r3, [sp, #20]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d077      	beq.n	800cf18 <_dtoa_r+0x4a0>
 800ce28:	9b08      	ldr	r3, [sp, #32]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	dd36      	ble.n	800ce9c <_dtoa_r+0x424>
 800ce2e:	4650      	mov	r0, sl
 800ce30:	4659      	mov	r1, fp
 800ce32:	2200      	movs	r2, #0
 800ce34:	4b66      	ldr	r3, [pc, #408]	; (800cfd0 <_dtoa_r+0x558>)
 800ce36:	f7f3 fbbb 	bl	80005b0 <__aeabi_dmul>
 800ce3a:	4682      	mov	sl, r0
 800ce3c:	468b      	mov	fp, r1
 800ce3e:	9c08      	ldr	r4, [sp, #32]
 800ce40:	f108 35ff 	add.w	r5, r8, #4294967295
 800ce44:	3601      	adds	r6, #1
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7f3 fb48 	bl	80004dc <__aeabi_i2d>
 800ce4c:	4652      	mov	r2, sl
 800ce4e:	465b      	mov	r3, fp
 800ce50:	f7f3 fbae 	bl	80005b0 <__aeabi_dmul>
 800ce54:	2200      	movs	r2, #0
 800ce56:	4b5f      	ldr	r3, [pc, #380]	; (800cfd4 <_dtoa_r+0x55c>)
 800ce58:	f7f3 f9f4 	bl	8000244 <__adddf3>
 800ce5c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ce60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ce64:	9611      	str	r6, [sp, #68]	; 0x44
 800ce66:	2c00      	cmp	r4, #0
 800ce68:	d159      	bne.n	800cf1e <_dtoa_r+0x4a6>
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	4650      	mov	r0, sl
 800ce6e:	4659      	mov	r1, fp
 800ce70:	4b59      	ldr	r3, [pc, #356]	; (800cfd8 <_dtoa_r+0x560>)
 800ce72:	f7f3 f9e5 	bl	8000240 <__aeabi_dsub>
 800ce76:	4633      	mov	r3, r6
 800ce78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce7a:	4682      	mov	sl, r0
 800ce7c:	468b      	mov	fp, r1
 800ce7e:	f7f3 fe27 	bl	8000ad0 <__aeabi_dcmpgt>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	f040 828b 	bne.w	800d39e <_dtoa_r+0x926>
 800ce88:	4650      	mov	r0, sl
 800ce8a:	4659      	mov	r1, fp
 800ce8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ce92:	f7f3 fdff 	bl	8000a94 <__aeabi_dcmplt>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f040 827f 	bne.w	800d39a <_dtoa_r+0x922>
 800ce9c:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 800cea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f2c0 814d 	blt.w	800d142 <_dtoa_r+0x6ca>
 800cea8:	f1b8 0f0e 	cmp.w	r8, #14
 800ceac:	f300 8149 	bgt.w	800d142 <_dtoa_r+0x6ca>
 800ceb0:	4b44      	ldr	r3, [pc, #272]	; (800cfc4 <_dtoa_r+0x54c>)
 800ceb2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ceb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ceba:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f280 80d6 	bge.w	800d072 <_dtoa_r+0x5fa>
 800cec6:	9b05      	ldr	r3, [sp, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f300 80d2 	bgt.w	800d072 <_dtoa_r+0x5fa>
 800cece:	f040 8263 	bne.w	800d398 <_dtoa_r+0x920>
 800ced2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ced6:	2200      	movs	r2, #0
 800ced8:	4b3f      	ldr	r3, [pc, #252]	; (800cfd8 <_dtoa_r+0x560>)
 800ceda:	f7f3 fb69 	bl	80005b0 <__aeabi_dmul>
 800cede:	4652      	mov	r2, sl
 800cee0:	465b      	mov	r3, fp
 800cee2:	f7f3 fdeb 	bl	8000abc <__aeabi_dcmpge>
 800cee6:	9c05      	ldr	r4, [sp, #20]
 800cee8:	4625      	mov	r5, r4
 800ceea:	2800      	cmp	r0, #0
 800ceec:	f040 823c 	bne.w	800d368 <_dtoa_r+0x8f0>
 800cef0:	2331      	movs	r3, #49	; 0x31
 800cef2:	9e04      	ldr	r6, [sp, #16]
 800cef4:	f108 0801 	add.w	r8, r8, #1
 800cef8:	f806 3b01 	strb.w	r3, [r6], #1
 800cefc:	e238      	b.n	800d370 <_dtoa_r+0x8f8>
 800cefe:	07e2      	lsls	r2, r4, #31
 800cf00:	d505      	bpl.n	800cf0e <_dtoa_r+0x496>
 800cf02:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf06:	f7f3 fb53 	bl	80005b0 <__aeabi_dmul>
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	3601      	adds	r6, #1
 800cf0e:	1064      	asrs	r4, r4, #1
 800cf10:	3508      	adds	r5, #8
 800cf12:	e774      	b.n	800cdfe <_dtoa_r+0x386>
 800cf14:	2602      	movs	r6, #2
 800cf16:	e776      	b.n	800ce06 <_dtoa_r+0x38e>
 800cf18:	4645      	mov	r5, r8
 800cf1a:	9c05      	ldr	r4, [sp, #20]
 800cf1c:	e793      	b.n	800ce46 <_dtoa_r+0x3ce>
 800cf1e:	9904      	ldr	r1, [sp, #16]
 800cf20:	4b28      	ldr	r3, [pc, #160]	; (800cfc4 <_dtoa_r+0x54c>)
 800cf22:	4421      	add	r1, r4
 800cf24:	9112      	str	r1, [sp, #72]	; 0x48
 800cf26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf2c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cf30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf34:	2900      	cmp	r1, #0
 800cf36:	d053      	beq.n	800cfe0 <_dtoa_r+0x568>
 800cf38:	2000      	movs	r0, #0
 800cf3a:	4928      	ldr	r1, [pc, #160]	; (800cfdc <_dtoa_r+0x564>)
 800cf3c:	f7f3 fc62 	bl	8000804 <__aeabi_ddiv>
 800cf40:	4632      	mov	r2, r6
 800cf42:	463b      	mov	r3, r7
 800cf44:	f7f3 f97c 	bl	8000240 <__aeabi_dsub>
 800cf48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cf4c:	9e04      	ldr	r6, [sp, #16]
 800cf4e:	4659      	mov	r1, fp
 800cf50:	4650      	mov	r0, sl
 800cf52:	f7f3 fddd 	bl	8000b10 <__aeabi_d2iz>
 800cf56:	4604      	mov	r4, r0
 800cf58:	f7f3 fac0 	bl	80004dc <__aeabi_i2d>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	4650      	mov	r0, sl
 800cf62:	4659      	mov	r1, fp
 800cf64:	f7f3 f96c 	bl	8000240 <__aeabi_dsub>
 800cf68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cf6c:	3430      	adds	r4, #48	; 0x30
 800cf6e:	f806 4b01 	strb.w	r4, [r6], #1
 800cf72:	4682      	mov	sl, r0
 800cf74:	468b      	mov	fp, r1
 800cf76:	f7f3 fd8d 	bl	8000a94 <__aeabi_dcmplt>
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d171      	bne.n	800d062 <_dtoa_r+0x5ea>
 800cf7e:	4652      	mov	r2, sl
 800cf80:	465b      	mov	r3, fp
 800cf82:	2000      	movs	r0, #0
 800cf84:	4911      	ldr	r1, [pc, #68]	; (800cfcc <_dtoa_r+0x554>)
 800cf86:	f7f3 f95b 	bl	8000240 <__aeabi_dsub>
 800cf8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cf8e:	f7f3 fd81 	bl	8000a94 <__aeabi_dcmplt>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	f040 80b7 	bne.w	800d106 <_dtoa_r+0x68e>
 800cf98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf9a:	429e      	cmp	r6, r3
 800cf9c:	f43f af7e 	beq.w	800ce9c <_dtoa_r+0x424>
 800cfa0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <_dtoa_r+0x558>)
 800cfa8:	f7f3 fb02 	bl	80005b0 <__aeabi_dmul>
 800cfac:	2200      	movs	r2, #0
 800cfae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cfb2:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <_dtoa_r+0x558>)
 800cfb4:	4650      	mov	r0, sl
 800cfb6:	4659      	mov	r1, fp
 800cfb8:	f7f3 fafa 	bl	80005b0 <__aeabi_dmul>
 800cfbc:	4682      	mov	sl, r0
 800cfbe:	468b      	mov	fp, r1
 800cfc0:	e7c5      	b.n	800cf4e <_dtoa_r+0x4d6>
 800cfc2:	bf00      	nop
 800cfc4:	08034e08 	.word	0x08034e08
 800cfc8:	08034de0 	.word	0x08034de0
 800cfcc:	3ff00000 	.word	0x3ff00000
 800cfd0:	40240000 	.word	0x40240000
 800cfd4:	401c0000 	.word	0x401c0000
 800cfd8:	40140000 	.word	0x40140000
 800cfdc:	3fe00000 	.word	0x3fe00000
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	f7f3 fae4 	bl	80005b0 <__aeabi_dmul>
 800cfe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cfec:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800cfee:	9e04      	ldr	r6, [sp, #16]
 800cff0:	4659      	mov	r1, fp
 800cff2:	4650      	mov	r0, sl
 800cff4:	f7f3 fd8c 	bl	8000b10 <__aeabi_d2iz>
 800cff8:	4604      	mov	r4, r0
 800cffa:	f7f3 fa6f 	bl	80004dc <__aeabi_i2d>
 800cffe:	4602      	mov	r2, r0
 800d000:	460b      	mov	r3, r1
 800d002:	4650      	mov	r0, sl
 800d004:	4659      	mov	r1, fp
 800d006:	f7f3 f91b 	bl	8000240 <__aeabi_dsub>
 800d00a:	3430      	adds	r4, #48	; 0x30
 800d00c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d00e:	f806 4b01 	strb.w	r4, [r6], #1
 800d012:	429e      	cmp	r6, r3
 800d014:	4682      	mov	sl, r0
 800d016:	468b      	mov	fp, r1
 800d018:	f04f 0200 	mov.w	r2, #0
 800d01c:	d123      	bne.n	800d066 <_dtoa_r+0x5ee>
 800d01e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d022:	4baf      	ldr	r3, [pc, #700]	; (800d2e0 <_dtoa_r+0x868>)
 800d024:	f7f3 f90e 	bl	8000244 <__adddf3>
 800d028:	4602      	mov	r2, r0
 800d02a:	460b      	mov	r3, r1
 800d02c:	4650      	mov	r0, sl
 800d02e:	4659      	mov	r1, fp
 800d030:	f7f3 fd4e 	bl	8000ad0 <__aeabi_dcmpgt>
 800d034:	2800      	cmp	r0, #0
 800d036:	d166      	bne.n	800d106 <_dtoa_r+0x68e>
 800d038:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d03c:	2000      	movs	r0, #0
 800d03e:	49a8      	ldr	r1, [pc, #672]	; (800d2e0 <_dtoa_r+0x868>)
 800d040:	f7f3 f8fe 	bl	8000240 <__aeabi_dsub>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4650      	mov	r0, sl
 800d04a:	4659      	mov	r1, fp
 800d04c:	f7f3 fd22 	bl	8000a94 <__aeabi_dcmplt>
 800d050:	2800      	cmp	r0, #0
 800d052:	f43f af23 	beq.w	800ce9c <_dtoa_r+0x424>
 800d056:	463e      	mov	r6, r7
 800d058:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d05c:	3f01      	subs	r7, #1
 800d05e:	2b30      	cmp	r3, #48	; 0x30
 800d060:	d0f9      	beq.n	800d056 <_dtoa_r+0x5de>
 800d062:	46a8      	mov	r8, r5
 800d064:	e03e      	b.n	800d0e4 <_dtoa_r+0x66c>
 800d066:	4b9f      	ldr	r3, [pc, #636]	; (800d2e4 <_dtoa_r+0x86c>)
 800d068:	f7f3 faa2 	bl	80005b0 <__aeabi_dmul>
 800d06c:	4682      	mov	sl, r0
 800d06e:	468b      	mov	fp, r1
 800d070:	e7be      	b.n	800cff0 <_dtoa_r+0x578>
 800d072:	4654      	mov	r4, sl
 800d074:	f04f 0a00 	mov.w	sl, #0
 800d078:	465d      	mov	r5, fp
 800d07a:	9e04      	ldr	r6, [sp, #16]
 800d07c:	f8df b264 	ldr.w	fp, [pc, #612]	; 800d2e4 <_dtoa_r+0x86c>
 800d080:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d084:	4620      	mov	r0, r4
 800d086:	4629      	mov	r1, r5
 800d088:	f7f3 fbbc 	bl	8000804 <__aeabi_ddiv>
 800d08c:	f7f3 fd40 	bl	8000b10 <__aeabi_d2iz>
 800d090:	4607      	mov	r7, r0
 800d092:	f7f3 fa23 	bl	80004dc <__aeabi_i2d>
 800d096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d09a:	f7f3 fa89 	bl	80005b0 <__aeabi_dmul>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	4629      	mov	r1, r5
 800d0a6:	f7f3 f8cb 	bl	8000240 <__aeabi_dsub>
 800d0aa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d0ae:	f806 4b01 	strb.w	r4, [r6], #1
 800d0b2:	9c04      	ldr	r4, [sp, #16]
 800d0b4:	9d05      	ldr	r5, [sp, #20]
 800d0b6:	1b34      	subs	r4, r6, r4
 800d0b8:	42a5      	cmp	r5, r4
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	460b      	mov	r3, r1
 800d0be:	d133      	bne.n	800d128 <_dtoa_r+0x6b0>
 800d0c0:	f7f3 f8c0 	bl	8000244 <__adddf3>
 800d0c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	460d      	mov	r5, r1
 800d0cc:	f7f3 fd00 	bl	8000ad0 <__aeabi_dcmpgt>
 800d0d0:	b9c0      	cbnz	r0, 800d104 <_dtoa_r+0x68c>
 800d0d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	4629      	mov	r1, r5
 800d0da:	f7f3 fcd1 	bl	8000a80 <__aeabi_dcmpeq>
 800d0de:	b108      	cbz	r0, 800d0e4 <_dtoa_r+0x66c>
 800d0e0:	07fb      	lsls	r3, r7, #31
 800d0e2:	d40f      	bmi.n	800d104 <_dtoa_r+0x68c>
 800d0e4:	4648      	mov	r0, r9
 800d0e6:	9903      	ldr	r1, [sp, #12]
 800d0e8:	f001 f88d 	bl	800e206 <_Bfree>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	7033      	strb	r3, [r6, #0]
 800d0f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d0f2:	f108 0001 	add.w	r0, r8, #1
 800d0f6:	6018      	str	r0, [r3, #0]
 800d0f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f43f acf0 	beq.w	800cae0 <_dtoa_r+0x68>
 800d100:	601e      	str	r6, [r3, #0]
 800d102:	e4ed      	b.n	800cae0 <_dtoa_r+0x68>
 800d104:	4645      	mov	r5, r8
 800d106:	4633      	mov	r3, r6
 800d108:	461e      	mov	r6, r3
 800d10a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d10e:	2a39      	cmp	r2, #57	; 0x39
 800d110:	d106      	bne.n	800d120 <_dtoa_r+0x6a8>
 800d112:	9a04      	ldr	r2, [sp, #16]
 800d114:	429a      	cmp	r2, r3
 800d116:	d1f7      	bne.n	800d108 <_dtoa_r+0x690>
 800d118:	2230      	movs	r2, #48	; 0x30
 800d11a:	9904      	ldr	r1, [sp, #16]
 800d11c:	3501      	adds	r5, #1
 800d11e:	700a      	strb	r2, [r1, #0]
 800d120:	781a      	ldrb	r2, [r3, #0]
 800d122:	3201      	adds	r2, #1
 800d124:	701a      	strb	r2, [r3, #0]
 800d126:	e79c      	b.n	800d062 <_dtoa_r+0x5ea>
 800d128:	4652      	mov	r2, sl
 800d12a:	465b      	mov	r3, fp
 800d12c:	f7f3 fa40 	bl	80005b0 <__aeabi_dmul>
 800d130:	2200      	movs	r2, #0
 800d132:	2300      	movs	r3, #0
 800d134:	4604      	mov	r4, r0
 800d136:	460d      	mov	r5, r1
 800d138:	f7f3 fca2 	bl	8000a80 <__aeabi_dcmpeq>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d09f      	beq.n	800d080 <_dtoa_r+0x608>
 800d140:	e7d0      	b.n	800d0e4 <_dtoa_r+0x66c>
 800d142:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d144:	2a00      	cmp	r2, #0
 800d146:	f000 80cf 	beq.w	800d2e8 <_dtoa_r+0x870>
 800d14a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d14c:	2a01      	cmp	r2, #1
 800d14e:	f300 80ad 	bgt.w	800d2ac <_dtoa_r+0x834>
 800d152:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d154:	2a00      	cmp	r2, #0
 800d156:	f000 80a5 	beq.w	800d2a4 <_dtoa_r+0x82c>
 800d15a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d15e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d160:	9e06      	ldr	r6, [sp, #24]
 800d162:	9a06      	ldr	r2, [sp, #24]
 800d164:	2101      	movs	r1, #1
 800d166:	441a      	add	r2, r3
 800d168:	9206      	str	r2, [sp, #24]
 800d16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d16c:	4648      	mov	r0, r9
 800d16e:	441a      	add	r2, r3
 800d170:	9209      	str	r2, [sp, #36]	; 0x24
 800d172:	f001 f92f 	bl	800e3d4 <__i2b>
 800d176:	4605      	mov	r5, r0
 800d178:	2e00      	cmp	r6, #0
 800d17a:	dd0c      	ble.n	800d196 <_dtoa_r+0x71e>
 800d17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d17e:	2b00      	cmp	r3, #0
 800d180:	dd09      	ble.n	800d196 <_dtoa_r+0x71e>
 800d182:	42b3      	cmp	r3, r6
 800d184:	bfa8      	it	ge
 800d186:	4633      	movge	r3, r6
 800d188:	9a06      	ldr	r2, [sp, #24]
 800d18a:	1af6      	subs	r6, r6, r3
 800d18c:	1ad2      	subs	r2, r2, r3
 800d18e:	9206      	str	r2, [sp, #24]
 800d190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	9309      	str	r3, [sp, #36]	; 0x24
 800d196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d198:	b1f3      	cbz	r3, 800d1d8 <_dtoa_r+0x760>
 800d19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 80a7 	beq.w	800d2f0 <_dtoa_r+0x878>
 800d1a2:	2c00      	cmp	r4, #0
 800d1a4:	dd10      	ble.n	800d1c8 <_dtoa_r+0x750>
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	4648      	mov	r0, r9
 800d1ac:	f001 f9d0 	bl	800e550 <__pow5mult>
 800d1b0:	9a03      	ldr	r2, [sp, #12]
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	4648      	mov	r0, r9
 800d1b8:	f001 f922 	bl	800e400 <__multiply>
 800d1bc:	4607      	mov	r7, r0
 800d1be:	9903      	ldr	r1, [sp, #12]
 800d1c0:	4648      	mov	r0, r9
 800d1c2:	f001 f820 	bl	800e206 <_Bfree>
 800d1c6:	9703      	str	r7, [sp, #12]
 800d1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1ca:	1b1a      	subs	r2, r3, r4
 800d1cc:	d004      	beq.n	800d1d8 <_dtoa_r+0x760>
 800d1ce:	4648      	mov	r0, r9
 800d1d0:	9903      	ldr	r1, [sp, #12]
 800d1d2:	f001 f9bd 	bl	800e550 <__pow5mult>
 800d1d6:	9003      	str	r0, [sp, #12]
 800d1d8:	2101      	movs	r1, #1
 800d1da:	4648      	mov	r0, r9
 800d1dc:	f001 f8fa 	bl	800e3d4 <__i2b>
 800d1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f340 8085 	ble.w	800d2f4 <_dtoa_r+0x87c>
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	4601      	mov	r1, r0
 800d1ee:	4648      	mov	r0, r9
 800d1f0:	f001 f9ae 	bl	800e550 <__pow5mult>
 800d1f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d1f6:	4604      	mov	r4, r0
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	dd7e      	ble.n	800d2fa <_dtoa_r+0x882>
 800d1fc:	2700      	movs	r7, #0
 800d1fe:	6923      	ldr	r3, [r4, #16]
 800d200:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d204:	6918      	ldr	r0, [r3, #16]
 800d206:	f001 f897 	bl	800e338 <__hi0bits>
 800d20a:	f1c0 0020 	rsb	r0, r0, #32
 800d20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d210:	4418      	add	r0, r3
 800d212:	f010 001f 	ands.w	r0, r0, #31
 800d216:	f000 808e 	beq.w	800d336 <_dtoa_r+0x8be>
 800d21a:	f1c0 0320 	rsb	r3, r0, #32
 800d21e:	2b04      	cmp	r3, #4
 800d220:	f340 8087 	ble.w	800d332 <_dtoa_r+0x8ba>
 800d224:	f1c0 001c 	rsb	r0, r0, #28
 800d228:	9b06      	ldr	r3, [sp, #24]
 800d22a:	4406      	add	r6, r0
 800d22c:	4403      	add	r3, r0
 800d22e:	9306      	str	r3, [sp, #24]
 800d230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d232:	4403      	add	r3, r0
 800d234:	9309      	str	r3, [sp, #36]	; 0x24
 800d236:	9b06      	ldr	r3, [sp, #24]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	dd05      	ble.n	800d248 <_dtoa_r+0x7d0>
 800d23c:	461a      	mov	r2, r3
 800d23e:	4648      	mov	r0, r9
 800d240:	9903      	ldr	r1, [sp, #12]
 800d242:	f001 f9c5 	bl	800e5d0 <__lshift>
 800d246:	9003      	str	r0, [sp, #12]
 800d248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	dd05      	ble.n	800d25a <_dtoa_r+0x7e2>
 800d24e:	4621      	mov	r1, r4
 800d250:	461a      	mov	r2, r3
 800d252:	4648      	mov	r0, r9
 800d254:	f001 f9bc 	bl	800e5d0 <__lshift>
 800d258:	4604      	mov	r4, r0
 800d25a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d06c      	beq.n	800d33a <_dtoa_r+0x8c2>
 800d260:	4621      	mov	r1, r4
 800d262:	9803      	ldr	r0, [sp, #12]
 800d264:	f001 fa24 	bl	800e6b0 <__mcmp>
 800d268:	2800      	cmp	r0, #0
 800d26a:	da66      	bge.n	800d33a <_dtoa_r+0x8c2>
 800d26c:	2300      	movs	r3, #0
 800d26e:	220a      	movs	r2, #10
 800d270:	4648      	mov	r0, r9
 800d272:	9903      	ldr	r1, [sp, #12]
 800d274:	f000 ffd0 	bl	800e218 <__multadd>
 800d278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d27a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d27e:	9003      	str	r0, [sp, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 819f 	beq.w	800d5c4 <_dtoa_r+0xb4c>
 800d286:	2300      	movs	r3, #0
 800d288:	4629      	mov	r1, r5
 800d28a:	220a      	movs	r2, #10
 800d28c:	4648      	mov	r0, r9
 800d28e:	f000 ffc3 	bl	800e218 <__multadd>
 800d292:	9b08      	ldr	r3, [sp, #32]
 800d294:	4605      	mov	r5, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	f300 808a 	bgt.w	800d3b0 <_dtoa_r+0x938>
 800d29c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	dc53      	bgt.n	800d34a <_dtoa_r+0x8d2>
 800d2a2:	e085      	b.n	800d3b0 <_dtoa_r+0x938>
 800d2a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d2aa:	e758      	b.n	800d15e <_dtoa_r+0x6e6>
 800d2ac:	9b05      	ldr	r3, [sp, #20]
 800d2ae:	1e5c      	subs	r4, r3, #1
 800d2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2b2:	42a3      	cmp	r3, r4
 800d2b4:	bfb7      	itett	lt
 800d2b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d2b8:	1b1c      	subge	r4, r3, r4
 800d2ba:	1ae2      	sublt	r2, r4, r3
 800d2bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d2be:	bfbe      	ittt	lt
 800d2c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d2c2:	189b      	addlt	r3, r3, r2
 800d2c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d2c6:	9b05      	ldr	r3, [sp, #20]
 800d2c8:	bfb8      	it	lt
 800d2ca:	2400      	movlt	r4, #0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	bfb7      	itett	lt
 800d2d0:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 800d2d4:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 800d2d8:	1a9e      	sublt	r6, r3, r2
 800d2da:	2300      	movlt	r3, #0
 800d2dc:	e741      	b.n	800d162 <_dtoa_r+0x6ea>
 800d2de:	bf00      	nop
 800d2e0:	3fe00000 	.word	0x3fe00000
 800d2e4:	40240000 	.word	0x40240000
 800d2e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d2ea:	9e06      	ldr	r6, [sp, #24]
 800d2ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d2ee:	e743      	b.n	800d178 <_dtoa_r+0x700>
 800d2f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2f2:	e76c      	b.n	800d1ce <_dtoa_r+0x756>
 800d2f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	dc17      	bgt.n	800d32a <_dtoa_r+0x8b2>
 800d2fa:	f1ba 0f00 	cmp.w	sl, #0
 800d2fe:	d114      	bne.n	800d32a <_dtoa_r+0x8b2>
 800d300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d304:	b99b      	cbnz	r3, 800d32e <_dtoa_r+0x8b6>
 800d306:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d30a:	0d3f      	lsrs	r7, r7, #20
 800d30c:	053f      	lsls	r7, r7, #20
 800d30e:	b137      	cbz	r7, 800d31e <_dtoa_r+0x8a6>
 800d310:	2701      	movs	r7, #1
 800d312:	9b06      	ldr	r3, [sp, #24]
 800d314:	3301      	adds	r3, #1
 800d316:	9306      	str	r3, [sp, #24]
 800d318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d31a:	3301      	adds	r3, #1
 800d31c:	9309      	str	r3, [sp, #36]	; 0x24
 800d31e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d320:	2b00      	cmp	r3, #0
 800d322:	f47f af6c 	bne.w	800d1fe <_dtoa_r+0x786>
 800d326:	2001      	movs	r0, #1
 800d328:	e771      	b.n	800d20e <_dtoa_r+0x796>
 800d32a:	2700      	movs	r7, #0
 800d32c:	e7f7      	b.n	800d31e <_dtoa_r+0x8a6>
 800d32e:	4657      	mov	r7, sl
 800d330:	e7f5      	b.n	800d31e <_dtoa_r+0x8a6>
 800d332:	d080      	beq.n	800d236 <_dtoa_r+0x7be>
 800d334:	4618      	mov	r0, r3
 800d336:	301c      	adds	r0, #28
 800d338:	e776      	b.n	800d228 <_dtoa_r+0x7b0>
 800d33a:	9b05      	ldr	r3, [sp, #20]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dc31      	bgt.n	800d3a4 <_dtoa_r+0x92c>
 800d340:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d342:	2b02      	cmp	r3, #2
 800d344:	dd2e      	ble.n	800d3a4 <_dtoa_r+0x92c>
 800d346:	9b05      	ldr	r3, [sp, #20]
 800d348:	9308      	str	r3, [sp, #32]
 800d34a:	9b08      	ldr	r3, [sp, #32]
 800d34c:	b963      	cbnz	r3, 800d368 <_dtoa_r+0x8f0>
 800d34e:	4621      	mov	r1, r4
 800d350:	2205      	movs	r2, #5
 800d352:	4648      	mov	r0, r9
 800d354:	f000 ff60 	bl	800e218 <__multadd>
 800d358:	4601      	mov	r1, r0
 800d35a:	4604      	mov	r4, r0
 800d35c:	9803      	ldr	r0, [sp, #12]
 800d35e:	f001 f9a7 	bl	800e6b0 <__mcmp>
 800d362:	2800      	cmp	r0, #0
 800d364:	f73f adc4 	bgt.w	800cef0 <_dtoa_r+0x478>
 800d368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d36a:	9e04      	ldr	r6, [sp, #16]
 800d36c:	ea6f 0803 	mvn.w	r8, r3
 800d370:	2700      	movs	r7, #0
 800d372:	4621      	mov	r1, r4
 800d374:	4648      	mov	r0, r9
 800d376:	f000 ff46 	bl	800e206 <_Bfree>
 800d37a:	2d00      	cmp	r5, #0
 800d37c:	f43f aeb2 	beq.w	800d0e4 <_dtoa_r+0x66c>
 800d380:	b12f      	cbz	r7, 800d38e <_dtoa_r+0x916>
 800d382:	42af      	cmp	r7, r5
 800d384:	d003      	beq.n	800d38e <_dtoa_r+0x916>
 800d386:	4639      	mov	r1, r7
 800d388:	4648      	mov	r0, r9
 800d38a:	f000 ff3c 	bl	800e206 <_Bfree>
 800d38e:	4629      	mov	r1, r5
 800d390:	4648      	mov	r0, r9
 800d392:	f000 ff38 	bl	800e206 <_Bfree>
 800d396:	e6a5      	b.n	800d0e4 <_dtoa_r+0x66c>
 800d398:	2400      	movs	r4, #0
 800d39a:	4625      	mov	r5, r4
 800d39c:	e7e4      	b.n	800d368 <_dtoa_r+0x8f0>
 800d39e:	46a8      	mov	r8, r5
 800d3a0:	4625      	mov	r5, r4
 800d3a2:	e5a5      	b.n	800cef0 <_dtoa_r+0x478>
 800d3a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f000 80c4 	beq.w	800d534 <_dtoa_r+0xabc>
 800d3ac:	9b05      	ldr	r3, [sp, #20]
 800d3ae:	9308      	str	r3, [sp, #32]
 800d3b0:	2e00      	cmp	r6, #0
 800d3b2:	dd05      	ble.n	800d3c0 <_dtoa_r+0x948>
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	4648      	mov	r0, r9
 800d3ba:	f001 f909 	bl	800e5d0 <__lshift>
 800d3be:	4605      	mov	r5, r0
 800d3c0:	2f00      	cmp	r7, #0
 800d3c2:	d058      	beq.n	800d476 <_dtoa_r+0x9fe>
 800d3c4:	4648      	mov	r0, r9
 800d3c6:	6869      	ldr	r1, [r5, #4]
 800d3c8:	f000 fef8 	bl	800e1bc <_Balloc>
 800d3cc:	4606      	mov	r6, r0
 800d3ce:	b920      	cbnz	r0, 800d3da <_dtoa_r+0x962>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d3d6:	4b7f      	ldr	r3, [pc, #508]	; (800d5d4 <_dtoa_r+0xb5c>)
 800d3d8:	e481      	b.n	800ccde <_dtoa_r+0x266>
 800d3da:	692a      	ldr	r2, [r5, #16]
 800d3dc:	f105 010c 	add.w	r1, r5, #12
 800d3e0:	3202      	adds	r2, #2
 800d3e2:	0092      	lsls	r2, r2, #2
 800d3e4:	300c      	adds	r0, #12
 800d3e6:	f000 fec1 	bl	800e16c <memcpy>
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	4631      	mov	r1, r6
 800d3ee:	4648      	mov	r0, r9
 800d3f0:	f001 f8ee 	bl	800e5d0 <__lshift>
 800d3f4:	462f      	mov	r7, r5
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	9b04      	ldr	r3, [sp, #16]
 800d3fa:	9a04      	ldr	r2, [sp, #16]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	9305      	str	r3, [sp, #20]
 800d400:	9b08      	ldr	r3, [sp, #32]
 800d402:	4413      	add	r3, r2
 800d404:	930a      	str	r3, [sp, #40]	; 0x28
 800d406:	f00a 0301 	and.w	r3, sl, #1
 800d40a:	9309      	str	r3, [sp, #36]	; 0x24
 800d40c:	9b05      	ldr	r3, [sp, #20]
 800d40e:	4621      	mov	r1, r4
 800d410:	9803      	ldr	r0, [sp, #12]
 800d412:	f103 3bff 	add.w	fp, r3, #4294967295
 800d416:	f7ff faa3 	bl	800c960 <quorem>
 800d41a:	4639      	mov	r1, r7
 800d41c:	9006      	str	r0, [sp, #24]
 800d41e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d422:	9803      	ldr	r0, [sp, #12]
 800d424:	f001 f944 	bl	800e6b0 <__mcmp>
 800d428:	462a      	mov	r2, r5
 800d42a:	9008      	str	r0, [sp, #32]
 800d42c:	4621      	mov	r1, r4
 800d42e:	4648      	mov	r0, r9
 800d430:	f001 f95a 	bl	800e6e8 <__mdiff>
 800d434:	68c2      	ldr	r2, [r0, #12]
 800d436:	4606      	mov	r6, r0
 800d438:	b9fa      	cbnz	r2, 800d47a <_dtoa_r+0xa02>
 800d43a:	4601      	mov	r1, r0
 800d43c:	9803      	ldr	r0, [sp, #12]
 800d43e:	f001 f937 	bl	800e6b0 <__mcmp>
 800d442:	4602      	mov	r2, r0
 800d444:	4631      	mov	r1, r6
 800d446:	4648      	mov	r0, r9
 800d448:	920b      	str	r2, [sp, #44]	; 0x2c
 800d44a:	f000 fedc 	bl	800e206 <_Bfree>
 800d44e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d452:	9e05      	ldr	r6, [sp, #20]
 800d454:	ea43 0102 	orr.w	r1, r3, r2
 800d458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d45a:	430b      	orrs	r3, r1
 800d45c:	d10f      	bne.n	800d47e <_dtoa_r+0xa06>
 800d45e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d462:	d028      	beq.n	800d4b6 <_dtoa_r+0xa3e>
 800d464:	9b08      	ldr	r3, [sp, #32]
 800d466:	2b00      	cmp	r3, #0
 800d468:	dd02      	ble.n	800d470 <_dtoa_r+0x9f8>
 800d46a:	9b06      	ldr	r3, [sp, #24]
 800d46c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d470:	f88b a000 	strb.w	sl, [fp]
 800d474:	e77d      	b.n	800d372 <_dtoa_r+0x8fa>
 800d476:	4628      	mov	r0, r5
 800d478:	e7bc      	b.n	800d3f4 <_dtoa_r+0x97c>
 800d47a:	2201      	movs	r2, #1
 800d47c:	e7e2      	b.n	800d444 <_dtoa_r+0x9cc>
 800d47e:	9b08      	ldr	r3, [sp, #32]
 800d480:	2b00      	cmp	r3, #0
 800d482:	db04      	blt.n	800d48e <_dtoa_r+0xa16>
 800d484:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d486:	430b      	orrs	r3, r1
 800d488:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d48a:	430b      	orrs	r3, r1
 800d48c:	d120      	bne.n	800d4d0 <_dtoa_r+0xa58>
 800d48e:	2a00      	cmp	r2, #0
 800d490:	ddee      	ble.n	800d470 <_dtoa_r+0x9f8>
 800d492:	2201      	movs	r2, #1
 800d494:	9903      	ldr	r1, [sp, #12]
 800d496:	4648      	mov	r0, r9
 800d498:	f001 f89a 	bl	800e5d0 <__lshift>
 800d49c:	4621      	mov	r1, r4
 800d49e:	9003      	str	r0, [sp, #12]
 800d4a0:	f001 f906 	bl	800e6b0 <__mcmp>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	dc03      	bgt.n	800d4b0 <_dtoa_r+0xa38>
 800d4a8:	d1e2      	bne.n	800d470 <_dtoa_r+0x9f8>
 800d4aa:	f01a 0f01 	tst.w	sl, #1
 800d4ae:	d0df      	beq.n	800d470 <_dtoa_r+0x9f8>
 800d4b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d4b4:	d1d9      	bne.n	800d46a <_dtoa_r+0x9f2>
 800d4b6:	2339      	movs	r3, #57	; 0x39
 800d4b8:	f88b 3000 	strb.w	r3, [fp]
 800d4bc:	4633      	mov	r3, r6
 800d4be:	461e      	mov	r6, r3
 800d4c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	2a39      	cmp	r2, #57	; 0x39
 800d4c8:	d06a      	beq.n	800d5a0 <_dtoa_r+0xb28>
 800d4ca:	3201      	adds	r2, #1
 800d4cc:	701a      	strb	r2, [r3, #0]
 800d4ce:	e750      	b.n	800d372 <_dtoa_r+0x8fa>
 800d4d0:	2a00      	cmp	r2, #0
 800d4d2:	dd07      	ble.n	800d4e4 <_dtoa_r+0xa6c>
 800d4d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d4d8:	d0ed      	beq.n	800d4b6 <_dtoa_r+0xa3e>
 800d4da:	f10a 0301 	add.w	r3, sl, #1
 800d4de:	f88b 3000 	strb.w	r3, [fp]
 800d4e2:	e746      	b.n	800d372 <_dtoa_r+0x8fa>
 800d4e4:	9b05      	ldr	r3, [sp, #20]
 800d4e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4e8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d041      	beq.n	800d574 <_dtoa_r+0xafc>
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	220a      	movs	r2, #10
 800d4f4:	9903      	ldr	r1, [sp, #12]
 800d4f6:	4648      	mov	r0, r9
 800d4f8:	f000 fe8e 	bl	800e218 <__multadd>
 800d4fc:	42af      	cmp	r7, r5
 800d4fe:	9003      	str	r0, [sp, #12]
 800d500:	f04f 0300 	mov.w	r3, #0
 800d504:	f04f 020a 	mov.w	r2, #10
 800d508:	4639      	mov	r1, r7
 800d50a:	4648      	mov	r0, r9
 800d50c:	d107      	bne.n	800d51e <_dtoa_r+0xaa6>
 800d50e:	f000 fe83 	bl	800e218 <__multadd>
 800d512:	4607      	mov	r7, r0
 800d514:	4605      	mov	r5, r0
 800d516:	9b05      	ldr	r3, [sp, #20]
 800d518:	3301      	adds	r3, #1
 800d51a:	9305      	str	r3, [sp, #20]
 800d51c:	e776      	b.n	800d40c <_dtoa_r+0x994>
 800d51e:	f000 fe7b 	bl	800e218 <__multadd>
 800d522:	4629      	mov	r1, r5
 800d524:	4607      	mov	r7, r0
 800d526:	2300      	movs	r3, #0
 800d528:	220a      	movs	r2, #10
 800d52a:	4648      	mov	r0, r9
 800d52c:	f000 fe74 	bl	800e218 <__multadd>
 800d530:	4605      	mov	r5, r0
 800d532:	e7f0      	b.n	800d516 <_dtoa_r+0xa9e>
 800d534:	9b05      	ldr	r3, [sp, #20]
 800d536:	9308      	str	r3, [sp, #32]
 800d538:	9e04      	ldr	r6, [sp, #16]
 800d53a:	4621      	mov	r1, r4
 800d53c:	9803      	ldr	r0, [sp, #12]
 800d53e:	f7ff fa0f 	bl	800c960 <quorem>
 800d542:	9b04      	ldr	r3, [sp, #16]
 800d544:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d548:	f806 ab01 	strb.w	sl, [r6], #1
 800d54c:	1af2      	subs	r2, r6, r3
 800d54e:	9b08      	ldr	r3, [sp, #32]
 800d550:	4293      	cmp	r3, r2
 800d552:	dd07      	ble.n	800d564 <_dtoa_r+0xaec>
 800d554:	2300      	movs	r3, #0
 800d556:	220a      	movs	r2, #10
 800d558:	4648      	mov	r0, r9
 800d55a:	9903      	ldr	r1, [sp, #12]
 800d55c:	f000 fe5c 	bl	800e218 <__multadd>
 800d560:	9003      	str	r0, [sp, #12]
 800d562:	e7ea      	b.n	800d53a <_dtoa_r+0xac2>
 800d564:	9b08      	ldr	r3, [sp, #32]
 800d566:	2700      	movs	r7, #0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	bfcc      	ite	gt
 800d56c:	461e      	movgt	r6, r3
 800d56e:	2601      	movle	r6, #1
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	441e      	add	r6, r3
 800d574:	2201      	movs	r2, #1
 800d576:	9903      	ldr	r1, [sp, #12]
 800d578:	4648      	mov	r0, r9
 800d57a:	f001 f829 	bl	800e5d0 <__lshift>
 800d57e:	4621      	mov	r1, r4
 800d580:	9003      	str	r0, [sp, #12]
 800d582:	f001 f895 	bl	800e6b0 <__mcmp>
 800d586:	2800      	cmp	r0, #0
 800d588:	dc98      	bgt.n	800d4bc <_dtoa_r+0xa44>
 800d58a:	d102      	bne.n	800d592 <_dtoa_r+0xb1a>
 800d58c:	f01a 0f01 	tst.w	sl, #1
 800d590:	d194      	bne.n	800d4bc <_dtoa_r+0xa44>
 800d592:	4633      	mov	r3, r6
 800d594:	461e      	mov	r6, r3
 800d596:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d59a:	2a30      	cmp	r2, #48	; 0x30
 800d59c:	d0fa      	beq.n	800d594 <_dtoa_r+0xb1c>
 800d59e:	e6e8      	b.n	800d372 <_dtoa_r+0x8fa>
 800d5a0:	9a04      	ldr	r2, [sp, #16]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d18b      	bne.n	800d4be <_dtoa_r+0xa46>
 800d5a6:	2331      	movs	r3, #49	; 0x31
 800d5a8:	f108 0801 	add.w	r8, r8, #1
 800d5ac:	7013      	strb	r3, [r2, #0]
 800d5ae:	e6e0      	b.n	800d372 <_dtoa_r+0x8fa>
 800d5b0:	4b09      	ldr	r3, [pc, #36]	; (800d5d8 <_dtoa_r+0xb60>)
 800d5b2:	f7ff bab1 	b.w	800cb18 <_dtoa_r+0xa0>
 800d5b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f47f aa95 	bne.w	800cae8 <_dtoa_r+0x70>
 800d5be:	4b07      	ldr	r3, [pc, #28]	; (800d5dc <_dtoa_r+0xb64>)
 800d5c0:	f7ff baaa 	b.w	800cb18 <_dtoa_r+0xa0>
 800d5c4:	9b08      	ldr	r3, [sp, #32]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	dcb6      	bgt.n	800d538 <_dtoa_r+0xac0>
 800d5ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	f73f aebc 	bgt.w	800d34a <_dtoa_r+0x8d2>
 800d5d2:	e7b1      	b.n	800d538 <_dtoa_r+0xac0>
 800d5d4:	08034ca9 	.word	0x08034ca9
 800d5d8:	08034c7a 	.word	0x08034c7a
 800d5dc:	08034ca0 	.word	0x08034ca0

0800d5e0 <__sflush_r>:
 800d5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e2:	898b      	ldrh	r3, [r1, #12]
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	0718      	lsls	r0, r3, #28
 800d5e8:	460c      	mov	r4, r1
 800d5ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5ee:	d45e      	bmi.n	800d6ae <__sflush_r+0xce>
 800d5f0:	684b      	ldr	r3, [r1, #4]
 800d5f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	818a      	strh	r2, [r1, #12]
 800d5fa:	dc04      	bgt.n	800d606 <__sflush_r+0x26>
 800d5fc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	dc01      	bgt.n	800d606 <__sflush_r+0x26>
 800d602:	2000      	movs	r0, #0
 800d604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d608:	2e00      	cmp	r6, #0
 800d60a:	d0fa      	beq.n	800d602 <__sflush_r+0x22>
 800d60c:	2300      	movs	r3, #0
 800d60e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d612:	682f      	ldr	r7, [r5, #0]
 800d614:	602b      	str	r3, [r5, #0]
 800d616:	d036      	beq.n	800d686 <__sflush_r+0xa6>
 800d618:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d61a:	89a3      	ldrh	r3, [r4, #12]
 800d61c:	075a      	lsls	r2, r3, #29
 800d61e:	d505      	bpl.n	800d62c <__sflush_r+0x4c>
 800d620:	6863      	ldr	r3, [r4, #4]
 800d622:	1ac0      	subs	r0, r0, r3
 800d624:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d626:	b10b      	cbz	r3, 800d62c <__sflush_r+0x4c>
 800d628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d62a:	1ac0      	subs	r0, r0, r3
 800d62c:	2300      	movs	r3, #0
 800d62e:	4602      	mov	r2, r0
 800d630:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d632:	4628      	mov	r0, r5
 800d634:	69e1      	ldr	r1, [r4, #28]
 800d636:	47b0      	blx	r6
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	89a3      	ldrh	r3, [r4, #12]
 800d63c:	d106      	bne.n	800d64c <__sflush_r+0x6c>
 800d63e:	6829      	ldr	r1, [r5, #0]
 800d640:	291d      	cmp	r1, #29
 800d642:	d830      	bhi.n	800d6a6 <__sflush_r+0xc6>
 800d644:	4a2a      	ldr	r2, [pc, #168]	; (800d6f0 <__sflush_r+0x110>)
 800d646:	40ca      	lsrs	r2, r1
 800d648:	07d6      	lsls	r6, r2, #31
 800d64a:	d52c      	bpl.n	800d6a6 <__sflush_r+0xc6>
 800d64c:	2200      	movs	r2, #0
 800d64e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d652:	b21b      	sxth	r3, r3
 800d654:	6062      	str	r2, [r4, #4]
 800d656:	6922      	ldr	r2, [r4, #16]
 800d658:	04d9      	lsls	r1, r3, #19
 800d65a:	81a3      	strh	r3, [r4, #12]
 800d65c:	6022      	str	r2, [r4, #0]
 800d65e:	d504      	bpl.n	800d66a <__sflush_r+0x8a>
 800d660:	1c42      	adds	r2, r0, #1
 800d662:	d101      	bne.n	800d668 <__sflush_r+0x88>
 800d664:	682b      	ldr	r3, [r5, #0]
 800d666:	b903      	cbnz	r3, 800d66a <__sflush_r+0x8a>
 800d668:	6520      	str	r0, [r4, #80]	; 0x50
 800d66a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d66c:	602f      	str	r7, [r5, #0]
 800d66e:	2900      	cmp	r1, #0
 800d670:	d0c7      	beq.n	800d602 <__sflush_r+0x22>
 800d672:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d676:	4299      	cmp	r1, r3
 800d678:	d002      	beq.n	800d680 <__sflush_r+0xa0>
 800d67a:	4628      	mov	r0, r5
 800d67c:	f000 f922 	bl	800d8c4 <_free_r>
 800d680:	2000      	movs	r0, #0
 800d682:	6320      	str	r0, [r4, #48]	; 0x30
 800d684:	e7be      	b.n	800d604 <__sflush_r+0x24>
 800d686:	69e1      	ldr	r1, [r4, #28]
 800d688:	2301      	movs	r3, #1
 800d68a:	4628      	mov	r0, r5
 800d68c:	47b0      	blx	r6
 800d68e:	1c41      	adds	r1, r0, #1
 800d690:	d1c3      	bne.n	800d61a <__sflush_r+0x3a>
 800d692:	682b      	ldr	r3, [r5, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d0c0      	beq.n	800d61a <__sflush_r+0x3a>
 800d698:	2b1d      	cmp	r3, #29
 800d69a:	d001      	beq.n	800d6a0 <__sflush_r+0xc0>
 800d69c:	2b16      	cmp	r3, #22
 800d69e:	d101      	bne.n	800d6a4 <__sflush_r+0xc4>
 800d6a0:	602f      	str	r7, [r5, #0]
 800d6a2:	e7ae      	b.n	800d602 <__sflush_r+0x22>
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6aa:	81a3      	strh	r3, [r4, #12]
 800d6ac:	e7aa      	b.n	800d604 <__sflush_r+0x24>
 800d6ae:	690f      	ldr	r7, [r1, #16]
 800d6b0:	2f00      	cmp	r7, #0
 800d6b2:	d0a6      	beq.n	800d602 <__sflush_r+0x22>
 800d6b4:	079b      	lsls	r3, r3, #30
 800d6b6:	bf18      	it	ne
 800d6b8:	2300      	movne	r3, #0
 800d6ba:	680e      	ldr	r6, [r1, #0]
 800d6bc:	bf08      	it	eq
 800d6be:	694b      	ldreq	r3, [r1, #20]
 800d6c0:	1bf6      	subs	r6, r6, r7
 800d6c2:	600f      	str	r7, [r1, #0]
 800d6c4:	608b      	str	r3, [r1, #8]
 800d6c6:	2e00      	cmp	r6, #0
 800d6c8:	dd9b      	ble.n	800d602 <__sflush_r+0x22>
 800d6ca:	4633      	mov	r3, r6
 800d6cc:	463a      	mov	r2, r7
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	69e1      	ldr	r1, [r4, #28]
 800d6d2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800d6d6:	47e0      	blx	ip
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	dc06      	bgt.n	800d6ea <__sflush_r+0x10a>
 800d6dc:	89a3      	ldrh	r3, [r4, #12]
 800d6de:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6e6:	81a3      	strh	r3, [r4, #12]
 800d6e8:	e78c      	b.n	800d604 <__sflush_r+0x24>
 800d6ea:	4407      	add	r7, r0
 800d6ec:	1a36      	subs	r6, r6, r0
 800d6ee:	e7ea      	b.n	800d6c6 <__sflush_r+0xe6>
 800d6f0:	20400001 	.word	0x20400001

0800d6f4 <_fflush_r>:
 800d6f4:	b538      	push	{r3, r4, r5, lr}
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	4605      	mov	r5, r0
 800d6fa:	b118      	cbz	r0, 800d704 <_fflush_r+0x10>
 800d6fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d6fe:	b90b      	cbnz	r3, 800d704 <_fflush_r+0x10>
 800d700:	f000 f864 	bl	800d7cc <__sinit>
 800d704:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800d708:	b1b8      	cbz	r0, 800d73a <_fflush_r+0x46>
 800d70a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d70c:	07db      	lsls	r3, r3, #31
 800d70e:	d404      	bmi.n	800d71a <_fflush_r+0x26>
 800d710:	0581      	lsls	r1, r0, #22
 800d712:	d402      	bmi.n	800d71a <_fflush_r+0x26>
 800d714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d716:	f7fc f92f 	bl	8009978 <__retarget_lock_acquire_recursive>
 800d71a:	4628      	mov	r0, r5
 800d71c:	4621      	mov	r1, r4
 800d71e:	f7ff ff5f 	bl	800d5e0 <__sflush_r>
 800d722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d724:	4605      	mov	r5, r0
 800d726:	07da      	lsls	r2, r3, #31
 800d728:	d405      	bmi.n	800d736 <_fflush_r+0x42>
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	059b      	lsls	r3, r3, #22
 800d72e:	d402      	bmi.n	800d736 <_fflush_r+0x42>
 800d730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d732:	f7fc f922 	bl	800997a <__retarget_lock_release_recursive>
 800d736:	4628      	mov	r0, r5
 800d738:	bd38      	pop	{r3, r4, r5, pc}
 800d73a:	4605      	mov	r5, r0
 800d73c:	e7fb      	b.n	800d736 <_fflush_r+0x42>
	...

0800d740 <std>:
 800d740:	2300      	movs	r3, #0
 800d742:	b510      	push	{r4, lr}
 800d744:	4604      	mov	r4, r0
 800d746:	e9c0 3300 	strd	r3, r3, [r0]
 800d74a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d74e:	6083      	str	r3, [r0, #8]
 800d750:	8181      	strh	r1, [r0, #12]
 800d752:	6643      	str	r3, [r0, #100]	; 0x64
 800d754:	81c2      	strh	r2, [r0, #14]
 800d756:	6183      	str	r3, [r0, #24]
 800d758:	4619      	mov	r1, r3
 800d75a:	2208      	movs	r2, #8
 800d75c:	305c      	adds	r0, #92	; 0x5c
 800d75e:	f7fa fec1 	bl	80084e4 <memset>
 800d762:	4b07      	ldr	r3, [pc, #28]	; (800d780 <std+0x40>)
 800d764:	61e4      	str	r4, [r4, #28]
 800d766:	6223      	str	r3, [r4, #32]
 800d768:	4b06      	ldr	r3, [pc, #24]	; (800d784 <std+0x44>)
 800d76a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d76e:	6263      	str	r3, [r4, #36]	; 0x24
 800d770:	4b05      	ldr	r3, [pc, #20]	; (800d788 <std+0x48>)
 800d772:	62a3      	str	r3, [r4, #40]	; 0x28
 800d774:	4b05      	ldr	r3, [pc, #20]	; (800d78c <std+0x4c>)
 800d776:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d77c:	f7fc b8fa 	b.w	8009974 <__retarget_lock_init_recursive>
 800d780:	08008549 	.word	0x08008549
 800d784:	0800856f 	.word	0x0800856f
 800d788:	080085a7 	.word	0x080085a7
 800d78c:	080085cb 	.word	0x080085cb

0800d790 <_cleanup_r>:
 800d790:	4901      	ldr	r1, [pc, #4]	; (800d798 <_cleanup_r+0x8>)
 800d792:	f000 b957 	b.w	800da44 <_fwalk_reent>
 800d796:	bf00      	nop
 800d798:	0800ecef 	.word	0x0800ecef

0800d79c <__sfp_lock_acquire>:
 800d79c:	4801      	ldr	r0, [pc, #4]	; (800d7a4 <__sfp_lock_acquire+0x8>)
 800d79e:	f7fc b8eb 	b.w	8009978 <__retarget_lock_acquire_recursive>
 800d7a2:	bf00      	nop
 800d7a4:	20000bc6 	.word	0x20000bc6

0800d7a8 <__sfp_lock_release>:
 800d7a8:	4801      	ldr	r0, [pc, #4]	; (800d7b0 <__sfp_lock_release+0x8>)
 800d7aa:	f7fc b8e6 	b.w	800997a <__retarget_lock_release_recursive>
 800d7ae:	bf00      	nop
 800d7b0:	20000bc6 	.word	0x20000bc6

0800d7b4 <__sinit_lock_acquire>:
 800d7b4:	4801      	ldr	r0, [pc, #4]	; (800d7bc <__sinit_lock_acquire+0x8>)
 800d7b6:	f7fc b8df 	b.w	8009978 <__retarget_lock_acquire_recursive>
 800d7ba:	bf00      	nop
 800d7bc:	20000bc7 	.word	0x20000bc7

0800d7c0 <__sinit_lock_release>:
 800d7c0:	4801      	ldr	r0, [pc, #4]	; (800d7c8 <__sinit_lock_release+0x8>)
 800d7c2:	f7fc b8da 	b.w	800997a <__retarget_lock_release_recursive>
 800d7c6:	bf00      	nop
 800d7c8:	20000bc7 	.word	0x20000bc7

0800d7cc <__sinit>:
 800d7cc:	b510      	push	{r4, lr}
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	f7ff fff0 	bl	800d7b4 <__sinit_lock_acquire>
 800d7d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d7d6:	b11a      	cbz	r2, 800d7e0 <__sinit+0x14>
 800d7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7dc:	f7ff bff0 	b.w	800d7c0 <__sinit_lock_release>
 800d7e0:	4b0d      	ldr	r3, [pc, #52]	; (800d818 <__sinit+0x4c>)
 800d7e2:	2104      	movs	r1, #4
 800d7e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800d7ec:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800d7f0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800d7f4:	6860      	ldr	r0, [r4, #4]
 800d7f6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800d7fa:	f7ff ffa1 	bl	800d740 <std>
 800d7fe:	2201      	movs	r2, #1
 800d800:	2109      	movs	r1, #9
 800d802:	68a0      	ldr	r0, [r4, #8]
 800d804:	f7ff ff9c 	bl	800d740 <std>
 800d808:	2202      	movs	r2, #2
 800d80a:	2112      	movs	r1, #18
 800d80c:	68e0      	ldr	r0, [r4, #12]
 800d80e:	f7ff ff97 	bl	800d740 <std>
 800d812:	2301      	movs	r3, #1
 800d814:	63a3      	str	r3, [r4, #56]	; 0x38
 800d816:	e7df      	b.n	800d7d8 <__sinit+0xc>
 800d818:	0800d791 	.word	0x0800d791

0800d81c <_malloc_trim_r>:
 800d81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d820:	4606      	mov	r6, r0
 800d822:	2008      	movs	r0, #8
 800d824:	460c      	mov	r4, r1
 800d826:	f7ff f807 	bl	800c838 <sysconf>
 800d82a:	4680      	mov	r8, r0
 800d82c:	4f22      	ldr	r7, [pc, #136]	; (800d8b8 <_malloc_trim_r+0x9c>)
 800d82e:	4630      	mov	r0, r6
 800d830:	f7fc fb2e 	bl	8009e90 <__malloc_lock>
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	685d      	ldr	r5, [r3, #4]
 800d838:	f025 0503 	bic.w	r5, r5, #3
 800d83c:	1b2c      	subs	r4, r5, r4
 800d83e:	3c11      	subs	r4, #17
 800d840:	4444      	add	r4, r8
 800d842:	fbb4 f4f8 	udiv	r4, r4, r8
 800d846:	3c01      	subs	r4, #1
 800d848:	fb08 f404 	mul.w	r4, r8, r4
 800d84c:	45a0      	cmp	r8, r4
 800d84e:	dd05      	ble.n	800d85c <_malloc_trim_r+0x40>
 800d850:	4630      	mov	r0, r6
 800d852:	f7fc fb23 	bl	8009e9c <__malloc_unlock>
 800d856:	2000      	movs	r0, #0
 800d858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d85c:	2100      	movs	r1, #0
 800d85e:	4630      	mov	r0, r6
 800d860:	f7fc fce4 	bl	800a22c <_sbrk_r>
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	442b      	add	r3, r5
 800d868:	4298      	cmp	r0, r3
 800d86a:	d1f1      	bne.n	800d850 <_malloc_trim_r+0x34>
 800d86c:	4630      	mov	r0, r6
 800d86e:	4261      	negs	r1, r4
 800d870:	f7fc fcdc 	bl	800a22c <_sbrk_r>
 800d874:	3001      	adds	r0, #1
 800d876:	d110      	bne.n	800d89a <_malloc_trim_r+0x7e>
 800d878:	2100      	movs	r1, #0
 800d87a:	4630      	mov	r0, r6
 800d87c:	f7fc fcd6 	bl	800a22c <_sbrk_r>
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	1a83      	subs	r3, r0, r2
 800d884:	2b0f      	cmp	r3, #15
 800d886:	dde3      	ble.n	800d850 <_malloc_trim_r+0x34>
 800d888:	490c      	ldr	r1, [pc, #48]	; (800d8bc <_malloc_trim_r+0xa0>)
 800d88a:	f043 0301 	orr.w	r3, r3, #1
 800d88e:	6809      	ldr	r1, [r1, #0]
 800d890:	6053      	str	r3, [r2, #4]
 800d892:	1a40      	subs	r0, r0, r1
 800d894:	490a      	ldr	r1, [pc, #40]	; (800d8c0 <_malloc_trim_r+0xa4>)
 800d896:	6008      	str	r0, [r1, #0]
 800d898:	e7da      	b.n	800d850 <_malloc_trim_r+0x34>
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	4a08      	ldr	r2, [pc, #32]	; (800d8c0 <_malloc_trim_r+0xa4>)
 800d89e:	1b2d      	subs	r5, r5, r4
 800d8a0:	f045 0501 	orr.w	r5, r5, #1
 800d8a4:	605d      	str	r5, [r3, #4]
 800d8a6:	6813      	ldr	r3, [r2, #0]
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	1b1b      	subs	r3, r3, r4
 800d8ac:	6013      	str	r3, [r2, #0]
 800d8ae:	f7fc faf5 	bl	8009e9c <__malloc_unlock>
 800d8b2:	2001      	movs	r0, #1
 800d8b4:	e7d0      	b.n	800d858 <_malloc_trim_r+0x3c>
 800d8b6:	bf00      	nop
 800d8b8:	200005e8 	.word	0x200005e8
 800d8bc:	200009f0 	.word	0x200009f0
 800d8c0:	20000bc8 	.word	0x20000bc8

0800d8c4 <_free_r>:
 800d8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c6:	4605      	mov	r5, r0
 800d8c8:	460f      	mov	r7, r1
 800d8ca:	2900      	cmp	r1, #0
 800d8cc:	f000 80b1 	beq.w	800da32 <_free_r+0x16e>
 800d8d0:	f7fc fade 	bl	8009e90 <__malloc_lock>
 800d8d4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d8d8:	4856      	ldr	r0, [pc, #344]	; (800da34 <_free_r+0x170>)
 800d8da:	f022 0401 	bic.w	r4, r2, #1
 800d8de:	f1a7 0308 	sub.w	r3, r7, #8
 800d8e2:	eb03 0c04 	add.w	ip, r3, r4
 800d8e6:	6881      	ldr	r1, [r0, #8]
 800d8e8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800d8ec:	4561      	cmp	r1, ip
 800d8ee:	f026 0603 	bic.w	r6, r6, #3
 800d8f2:	f002 0201 	and.w	r2, r2, #1
 800d8f6:	d11b      	bne.n	800d930 <_free_r+0x6c>
 800d8f8:	4434      	add	r4, r6
 800d8fa:	b93a      	cbnz	r2, 800d90c <_free_r+0x48>
 800d8fc:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800d900:	1a9b      	subs	r3, r3, r2
 800d902:	4414      	add	r4, r2
 800d904:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800d908:	60ca      	str	r2, [r1, #12]
 800d90a:	6091      	str	r1, [r2, #8]
 800d90c:	f044 0201 	orr.w	r2, r4, #1
 800d910:	605a      	str	r2, [r3, #4]
 800d912:	6083      	str	r3, [r0, #8]
 800d914:	4b48      	ldr	r3, [pc, #288]	; (800da38 <_free_r+0x174>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	42a3      	cmp	r3, r4
 800d91a:	d804      	bhi.n	800d926 <_free_r+0x62>
 800d91c:	4b47      	ldr	r3, [pc, #284]	; (800da3c <_free_r+0x178>)
 800d91e:	4628      	mov	r0, r5
 800d920:	6819      	ldr	r1, [r3, #0]
 800d922:	f7ff ff7b 	bl	800d81c <_malloc_trim_r>
 800d926:	4628      	mov	r0, r5
 800d928:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d92c:	f7fc bab6 	b.w	8009e9c <__malloc_unlock>
 800d930:	f8cc 6004 	str.w	r6, [ip, #4]
 800d934:	2a00      	cmp	r2, #0
 800d936:	d138      	bne.n	800d9aa <_free_r+0xe6>
 800d938:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800d93c:	f100 0708 	add.w	r7, r0, #8
 800d940:	1a5b      	subs	r3, r3, r1
 800d942:	440c      	add	r4, r1
 800d944:	6899      	ldr	r1, [r3, #8]
 800d946:	42b9      	cmp	r1, r7
 800d948:	d031      	beq.n	800d9ae <_free_r+0xea>
 800d94a:	68df      	ldr	r7, [r3, #12]
 800d94c:	60cf      	str	r7, [r1, #12]
 800d94e:	60b9      	str	r1, [r7, #8]
 800d950:	eb0c 0106 	add.w	r1, ip, r6
 800d954:	6849      	ldr	r1, [r1, #4]
 800d956:	07c9      	lsls	r1, r1, #31
 800d958:	d40b      	bmi.n	800d972 <_free_r+0xae>
 800d95a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800d95e:	4434      	add	r4, r6
 800d960:	bb3a      	cbnz	r2, 800d9b2 <_free_r+0xee>
 800d962:	4e37      	ldr	r6, [pc, #220]	; (800da40 <_free_r+0x17c>)
 800d964:	42b1      	cmp	r1, r6
 800d966:	d124      	bne.n	800d9b2 <_free_r+0xee>
 800d968:	2201      	movs	r2, #1
 800d96a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d96e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800d972:	f044 0101 	orr.w	r1, r4, #1
 800d976:	6059      	str	r1, [r3, #4]
 800d978:	511c      	str	r4, [r3, r4]
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	d1d3      	bne.n	800d926 <_free_r+0x62>
 800d97e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800d982:	d21b      	bcs.n	800d9bc <_free_r+0xf8>
 800d984:	0961      	lsrs	r1, r4, #5
 800d986:	08e2      	lsrs	r2, r4, #3
 800d988:	2401      	movs	r4, #1
 800d98a:	408c      	lsls	r4, r1
 800d98c:	6841      	ldr	r1, [r0, #4]
 800d98e:	3201      	adds	r2, #1
 800d990:	430c      	orrs	r4, r1
 800d992:	6044      	str	r4, [r0, #4]
 800d994:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800d998:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800d99c:	3908      	subs	r1, #8
 800d99e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800d9a2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800d9a6:	60e3      	str	r3, [r4, #12]
 800d9a8:	e7bd      	b.n	800d926 <_free_r+0x62>
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	e7d0      	b.n	800d950 <_free_r+0x8c>
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	e7ce      	b.n	800d950 <_free_r+0x8c>
 800d9b2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800d9b6:	60ce      	str	r6, [r1, #12]
 800d9b8:	60b1      	str	r1, [r6, #8]
 800d9ba:	e7da      	b.n	800d972 <_free_r+0xae>
 800d9bc:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800d9c0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800d9c4:	d214      	bcs.n	800d9f0 <_free_r+0x12c>
 800d9c6:	09a2      	lsrs	r2, r4, #6
 800d9c8:	3238      	adds	r2, #56	; 0x38
 800d9ca:	1c51      	adds	r1, r2, #1
 800d9cc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800d9d0:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800d9d4:	428e      	cmp	r6, r1
 800d9d6:	d125      	bne.n	800da24 <_free_r+0x160>
 800d9d8:	2401      	movs	r4, #1
 800d9da:	1092      	asrs	r2, r2, #2
 800d9dc:	fa04 f202 	lsl.w	r2, r4, r2
 800d9e0:	6844      	ldr	r4, [r0, #4]
 800d9e2:	4322      	orrs	r2, r4
 800d9e4:	6042      	str	r2, [r0, #4]
 800d9e6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800d9ea:	60b3      	str	r3, [r6, #8]
 800d9ec:	60cb      	str	r3, [r1, #12]
 800d9ee:	e79a      	b.n	800d926 <_free_r+0x62>
 800d9f0:	2a14      	cmp	r2, #20
 800d9f2:	d801      	bhi.n	800d9f8 <_free_r+0x134>
 800d9f4:	325b      	adds	r2, #91	; 0x5b
 800d9f6:	e7e8      	b.n	800d9ca <_free_r+0x106>
 800d9f8:	2a54      	cmp	r2, #84	; 0x54
 800d9fa:	d802      	bhi.n	800da02 <_free_r+0x13e>
 800d9fc:	0b22      	lsrs	r2, r4, #12
 800d9fe:	326e      	adds	r2, #110	; 0x6e
 800da00:	e7e3      	b.n	800d9ca <_free_r+0x106>
 800da02:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800da06:	d802      	bhi.n	800da0e <_free_r+0x14a>
 800da08:	0be2      	lsrs	r2, r4, #15
 800da0a:	3277      	adds	r2, #119	; 0x77
 800da0c:	e7dd      	b.n	800d9ca <_free_r+0x106>
 800da0e:	f240 5154 	movw	r1, #1364	; 0x554
 800da12:	428a      	cmp	r2, r1
 800da14:	bf96      	itet	ls
 800da16:	0ca2      	lsrls	r2, r4, #18
 800da18:	227e      	movhi	r2, #126	; 0x7e
 800da1a:	327c      	addls	r2, #124	; 0x7c
 800da1c:	e7d5      	b.n	800d9ca <_free_r+0x106>
 800da1e:	6889      	ldr	r1, [r1, #8]
 800da20:	428e      	cmp	r6, r1
 800da22:	d004      	beq.n	800da2e <_free_r+0x16a>
 800da24:	684a      	ldr	r2, [r1, #4]
 800da26:	f022 0203 	bic.w	r2, r2, #3
 800da2a:	42a2      	cmp	r2, r4
 800da2c:	d8f7      	bhi.n	800da1e <_free_r+0x15a>
 800da2e:	68ce      	ldr	r6, [r1, #12]
 800da30:	e7d9      	b.n	800d9e6 <_free_r+0x122>
 800da32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da34:	200005e8 	.word	0x200005e8
 800da38:	200009f4 	.word	0x200009f4
 800da3c:	20000bf8 	.word	0x20000bf8
 800da40:	200005f0 	.word	0x200005f0

0800da44 <_fwalk_reent>:
 800da44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da48:	4606      	mov	r6, r0
 800da4a:	4688      	mov	r8, r1
 800da4c:	2700      	movs	r7, #0
 800da4e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800da52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da56:	f1b9 0901 	subs.w	r9, r9, #1
 800da5a:	d505      	bpl.n	800da68 <_fwalk_reent+0x24>
 800da5c:	6824      	ldr	r4, [r4, #0]
 800da5e:	2c00      	cmp	r4, #0
 800da60:	d1f7      	bne.n	800da52 <_fwalk_reent+0xe>
 800da62:	4638      	mov	r0, r7
 800da64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da68:	89ab      	ldrh	r3, [r5, #12]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d907      	bls.n	800da7e <_fwalk_reent+0x3a>
 800da6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da72:	3301      	adds	r3, #1
 800da74:	d003      	beq.n	800da7e <_fwalk_reent+0x3a>
 800da76:	4629      	mov	r1, r5
 800da78:	4630      	mov	r0, r6
 800da7a:	47c0      	blx	r8
 800da7c:	4307      	orrs	r7, r0
 800da7e:	3568      	adds	r5, #104	; 0x68
 800da80:	e7e9      	b.n	800da56 <_fwalk_reent+0x12>

0800da82 <rshift>:
 800da82:	6903      	ldr	r3, [r0, #16]
 800da84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da88:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da8c:	f100 0414 	add.w	r4, r0, #20
 800da90:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da94:	dd46      	ble.n	800db24 <rshift+0xa2>
 800da96:	f011 011f 	ands.w	r1, r1, #31
 800da9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800daa2:	d10c      	bne.n	800dabe <rshift+0x3c>
 800daa4:	4629      	mov	r1, r5
 800daa6:	f100 0710 	add.w	r7, r0, #16
 800daaa:	42b1      	cmp	r1, r6
 800daac:	d335      	bcc.n	800db1a <rshift+0x98>
 800daae:	1a9b      	subs	r3, r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	1eea      	subs	r2, r5, #3
 800dab4:	4296      	cmp	r6, r2
 800dab6:	bf38      	it	cc
 800dab8:	2300      	movcc	r3, #0
 800daba:	4423      	add	r3, r4
 800dabc:	e015      	b.n	800daea <rshift+0x68>
 800dabe:	46a1      	mov	r9, r4
 800dac0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dac4:	f1c1 0820 	rsb	r8, r1, #32
 800dac8:	40cf      	lsrs	r7, r1
 800daca:	f105 0e04 	add.w	lr, r5, #4
 800dace:	4576      	cmp	r6, lr
 800dad0:	46f4      	mov	ip, lr
 800dad2:	d816      	bhi.n	800db02 <rshift+0x80>
 800dad4:	1a9a      	subs	r2, r3, r2
 800dad6:	0092      	lsls	r2, r2, #2
 800dad8:	3a04      	subs	r2, #4
 800dada:	3501      	adds	r5, #1
 800dadc:	42ae      	cmp	r6, r5
 800dade:	bf38      	it	cc
 800dae0:	2200      	movcc	r2, #0
 800dae2:	18a3      	adds	r3, r4, r2
 800dae4:	50a7      	str	r7, [r4, r2]
 800dae6:	b107      	cbz	r7, 800daea <rshift+0x68>
 800dae8:	3304      	adds	r3, #4
 800daea:	42a3      	cmp	r3, r4
 800daec:	eba3 0204 	sub.w	r2, r3, r4
 800daf0:	bf08      	it	eq
 800daf2:	2300      	moveq	r3, #0
 800daf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800daf8:	6102      	str	r2, [r0, #16]
 800dafa:	bf08      	it	eq
 800dafc:	6143      	streq	r3, [r0, #20]
 800dafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db02:	f8dc c000 	ldr.w	ip, [ip]
 800db06:	fa0c fc08 	lsl.w	ip, ip, r8
 800db0a:	ea4c 0707 	orr.w	r7, ip, r7
 800db0e:	f849 7b04 	str.w	r7, [r9], #4
 800db12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db16:	40cf      	lsrs	r7, r1
 800db18:	e7d9      	b.n	800dace <rshift+0x4c>
 800db1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800db1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800db22:	e7c2      	b.n	800daaa <rshift+0x28>
 800db24:	4623      	mov	r3, r4
 800db26:	e7e0      	b.n	800daea <rshift+0x68>

0800db28 <__hexdig_fun>:
 800db28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800db2c:	2b09      	cmp	r3, #9
 800db2e:	d802      	bhi.n	800db36 <__hexdig_fun+0xe>
 800db30:	3820      	subs	r0, #32
 800db32:	b2c0      	uxtb	r0, r0
 800db34:	4770      	bx	lr
 800db36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800db3a:	2b05      	cmp	r3, #5
 800db3c:	d801      	bhi.n	800db42 <__hexdig_fun+0x1a>
 800db3e:	3847      	subs	r0, #71	; 0x47
 800db40:	e7f7      	b.n	800db32 <__hexdig_fun+0xa>
 800db42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800db46:	2b05      	cmp	r3, #5
 800db48:	d801      	bhi.n	800db4e <__hexdig_fun+0x26>
 800db4a:	3827      	subs	r0, #39	; 0x27
 800db4c:	e7f1      	b.n	800db32 <__hexdig_fun+0xa>
 800db4e:	2000      	movs	r0, #0
 800db50:	4770      	bx	lr
	...

0800db54 <__gethex>:
 800db54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db58:	b08b      	sub	sp, #44	; 0x2c
 800db5a:	9305      	str	r3, [sp, #20]
 800db5c:	4bb2      	ldr	r3, [pc, #712]	; (800de28 <__gethex+0x2d4>)
 800db5e:	9002      	str	r0, [sp, #8]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	468b      	mov	fp, r1
 800db64:	4618      	mov	r0, r3
 800db66:	4690      	mov	r8, r2
 800db68:	9303      	str	r3, [sp, #12]
 800db6a:	f7f2 fb5d 	bl	8000228 <strlen>
 800db6e:	4682      	mov	sl, r0
 800db70:	9b03      	ldr	r3, [sp, #12]
 800db72:	f8db 2000 	ldr.w	r2, [fp]
 800db76:	4403      	add	r3, r0
 800db78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800db7c:	9306      	str	r3, [sp, #24]
 800db7e:	1c93      	adds	r3, r2, #2
 800db80:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800db84:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800db88:	32fe      	adds	r2, #254	; 0xfe
 800db8a:	18d1      	adds	r1, r2, r3
 800db8c:	461f      	mov	r7, r3
 800db8e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db92:	9101      	str	r1, [sp, #4]
 800db94:	2830      	cmp	r0, #48	; 0x30
 800db96:	d0f8      	beq.n	800db8a <__gethex+0x36>
 800db98:	f7ff ffc6 	bl	800db28 <__hexdig_fun>
 800db9c:	4604      	mov	r4, r0
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d13a      	bne.n	800dc18 <__gethex+0xc4>
 800dba2:	4652      	mov	r2, sl
 800dba4:	4638      	mov	r0, r7
 800dba6:	9903      	ldr	r1, [sp, #12]
 800dba8:	f000 ffac 	bl	800eb04 <strncmp>
 800dbac:	4605      	mov	r5, r0
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d166      	bne.n	800dc80 <__gethex+0x12c>
 800dbb2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dbb6:	eb07 060a 	add.w	r6, r7, sl
 800dbba:	f7ff ffb5 	bl	800db28 <__hexdig_fun>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	d060      	beq.n	800dc84 <__gethex+0x130>
 800dbc2:	4633      	mov	r3, r6
 800dbc4:	7818      	ldrb	r0, [r3, #0]
 800dbc6:	461f      	mov	r7, r3
 800dbc8:	2830      	cmp	r0, #48	; 0x30
 800dbca:	f103 0301 	add.w	r3, r3, #1
 800dbce:	d0f9      	beq.n	800dbc4 <__gethex+0x70>
 800dbd0:	f7ff ffaa 	bl	800db28 <__hexdig_fun>
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	fab0 f480 	clz	r4, r0
 800dbda:	4635      	mov	r5, r6
 800dbdc:	0964      	lsrs	r4, r4, #5
 800dbde:	9301      	str	r3, [sp, #4]
 800dbe0:	463a      	mov	r2, r7
 800dbe2:	4616      	mov	r6, r2
 800dbe4:	7830      	ldrb	r0, [r6, #0]
 800dbe6:	3201      	adds	r2, #1
 800dbe8:	f7ff ff9e 	bl	800db28 <__hexdig_fun>
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d1f8      	bne.n	800dbe2 <__gethex+0x8e>
 800dbf0:	4652      	mov	r2, sl
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	9903      	ldr	r1, [sp, #12]
 800dbf6:	f000 ff85 	bl	800eb04 <strncmp>
 800dbfa:	b980      	cbnz	r0, 800dc1e <__gethex+0xca>
 800dbfc:	b94d      	cbnz	r5, 800dc12 <__gethex+0xbe>
 800dbfe:	eb06 050a 	add.w	r5, r6, sl
 800dc02:	462a      	mov	r2, r5
 800dc04:	4616      	mov	r6, r2
 800dc06:	7830      	ldrb	r0, [r6, #0]
 800dc08:	3201      	adds	r2, #1
 800dc0a:	f7ff ff8d 	bl	800db28 <__hexdig_fun>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d1f8      	bne.n	800dc04 <__gethex+0xb0>
 800dc12:	1bad      	subs	r5, r5, r6
 800dc14:	00ad      	lsls	r5, r5, #2
 800dc16:	e004      	b.n	800dc22 <__gethex+0xce>
 800dc18:	2400      	movs	r4, #0
 800dc1a:	4625      	mov	r5, r4
 800dc1c:	e7e0      	b.n	800dbe0 <__gethex+0x8c>
 800dc1e:	2d00      	cmp	r5, #0
 800dc20:	d1f7      	bne.n	800dc12 <__gethex+0xbe>
 800dc22:	7833      	ldrb	r3, [r6, #0]
 800dc24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dc28:	2b50      	cmp	r3, #80	; 0x50
 800dc2a:	d139      	bne.n	800dca0 <__gethex+0x14c>
 800dc2c:	7873      	ldrb	r3, [r6, #1]
 800dc2e:	2b2b      	cmp	r3, #43	; 0x2b
 800dc30:	d02a      	beq.n	800dc88 <__gethex+0x134>
 800dc32:	2b2d      	cmp	r3, #45	; 0x2d
 800dc34:	d02c      	beq.n	800dc90 <__gethex+0x13c>
 800dc36:	f04f 0900 	mov.w	r9, #0
 800dc3a:	1c71      	adds	r1, r6, #1
 800dc3c:	7808      	ldrb	r0, [r1, #0]
 800dc3e:	f7ff ff73 	bl	800db28 <__hexdig_fun>
 800dc42:	1e43      	subs	r3, r0, #1
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	2b18      	cmp	r3, #24
 800dc48:	d82a      	bhi.n	800dca0 <__gethex+0x14c>
 800dc4a:	f1a0 0210 	sub.w	r2, r0, #16
 800dc4e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dc52:	f7ff ff69 	bl	800db28 <__hexdig_fun>
 800dc56:	1e43      	subs	r3, r0, #1
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	2b18      	cmp	r3, #24
 800dc5c:	d91b      	bls.n	800dc96 <__gethex+0x142>
 800dc5e:	f1b9 0f00 	cmp.w	r9, #0
 800dc62:	d000      	beq.n	800dc66 <__gethex+0x112>
 800dc64:	4252      	negs	r2, r2
 800dc66:	4415      	add	r5, r2
 800dc68:	f8cb 1000 	str.w	r1, [fp]
 800dc6c:	b1d4      	cbz	r4, 800dca4 <__gethex+0x150>
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bf14      	ite	ne
 800dc74:	2700      	movne	r7, #0
 800dc76:	2706      	moveq	r7, #6
 800dc78:	4638      	mov	r0, r7
 800dc7a:	b00b      	add	sp, #44	; 0x2c
 800dc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc80:	463e      	mov	r6, r7
 800dc82:	4625      	mov	r5, r4
 800dc84:	2401      	movs	r4, #1
 800dc86:	e7cc      	b.n	800dc22 <__gethex+0xce>
 800dc88:	f04f 0900 	mov.w	r9, #0
 800dc8c:	1cb1      	adds	r1, r6, #2
 800dc8e:	e7d5      	b.n	800dc3c <__gethex+0xe8>
 800dc90:	f04f 0901 	mov.w	r9, #1
 800dc94:	e7fa      	b.n	800dc8c <__gethex+0x138>
 800dc96:	230a      	movs	r3, #10
 800dc98:	fb03 0202 	mla	r2, r3, r2, r0
 800dc9c:	3a10      	subs	r2, #16
 800dc9e:	e7d6      	b.n	800dc4e <__gethex+0xfa>
 800dca0:	4631      	mov	r1, r6
 800dca2:	e7e1      	b.n	800dc68 <__gethex+0x114>
 800dca4:	4621      	mov	r1, r4
 800dca6:	1bf3      	subs	r3, r6, r7
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	2b07      	cmp	r3, #7
 800dcac:	dc0a      	bgt.n	800dcc4 <__gethex+0x170>
 800dcae:	9802      	ldr	r0, [sp, #8]
 800dcb0:	f000 fa84 	bl	800e1bc <_Balloc>
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	b940      	cbnz	r0, 800dcca <__gethex+0x176>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	21de      	movs	r1, #222	; 0xde
 800dcbc:	4b5b      	ldr	r3, [pc, #364]	; (800de2c <__gethex+0x2d8>)
 800dcbe:	485c      	ldr	r0, [pc, #368]	; (800de30 <__gethex+0x2dc>)
 800dcc0:	f000 ffc2 	bl	800ec48 <__assert_func>
 800dcc4:	3101      	adds	r1, #1
 800dcc6:	105b      	asrs	r3, r3, #1
 800dcc8:	e7ef      	b.n	800dcaa <__gethex+0x156>
 800dcca:	f04f 0b00 	mov.w	fp, #0
 800dcce:	f100 0914 	add.w	r9, r0, #20
 800dcd2:	f1ca 0301 	rsb	r3, sl, #1
 800dcd6:	f8cd 9010 	str.w	r9, [sp, #16]
 800dcda:	f8cd b004 	str.w	fp, [sp, #4]
 800dcde:	9308      	str	r3, [sp, #32]
 800dce0:	42b7      	cmp	r7, r6
 800dce2:	d33f      	bcc.n	800dd64 <__gethex+0x210>
 800dce4:	9f04      	ldr	r7, [sp, #16]
 800dce6:	9b01      	ldr	r3, [sp, #4]
 800dce8:	f847 3b04 	str.w	r3, [r7], #4
 800dcec:	eba7 0709 	sub.w	r7, r7, r9
 800dcf0:	10bf      	asrs	r7, r7, #2
 800dcf2:	6127      	str	r7, [r4, #16]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 fb1f 	bl	800e338 <__hi0bits>
 800dcfa:	017f      	lsls	r7, r7, #5
 800dcfc:	f8d8 6000 	ldr.w	r6, [r8]
 800dd00:	1a3f      	subs	r7, r7, r0
 800dd02:	42b7      	cmp	r7, r6
 800dd04:	dd62      	ble.n	800ddcc <__gethex+0x278>
 800dd06:	1bbf      	subs	r7, r7, r6
 800dd08:	4639      	mov	r1, r7
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f000 fe9f 	bl	800ea4e <__any_on>
 800dd10:	4682      	mov	sl, r0
 800dd12:	b1a8      	cbz	r0, 800dd40 <__gethex+0x1ec>
 800dd14:	f04f 0a01 	mov.w	sl, #1
 800dd18:	1e7b      	subs	r3, r7, #1
 800dd1a:	1159      	asrs	r1, r3, #5
 800dd1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dd20:	f003 021f 	and.w	r2, r3, #31
 800dd24:	fa0a f202 	lsl.w	r2, sl, r2
 800dd28:	420a      	tst	r2, r1
 800dd2a:	d009      	beq.n	800dd40 <__gethex+0x1ec>
 800dd2c:	4553      	cmp	r3, sl
 800dd2e:	dd05      	ble.n	800dd3c <__gethex+0x1e8>
 800dd30:	4620      	mov	r0, r4
 800dd32:	1eb9      	subs	r1, r7, #2
 800dd34:	f000 fe8b 	bl	800ea4e <__any_on>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d144      	bne.n	800ddc6 <__gethex+0x272>
 800dd3c:	f04f 0a02 	mov.w	sl, #2
 800dd40:	4639      	mov	r1, r7
 800dd42:	4620      	mov	r0, r4
 800dd44:	f7ff fe9d 	bl	800da82 <rshift>
 800dd48:	443d      	add	r5, r7
 800dd4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd4e:	42ab      	cmp	r3, r5
 800dd50:	da4a      	bge.n	800dde8 <__gethex+0x294>
 800dd52:	4621      	mov	r1, r4
 800dd54:	9802      	ldr	r0, [sp, #8]
 800dd56:	f000 fa56 	bl	800e206 <_Bfree>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd5e:	27a3      	movs	r7, #163	; 0xa3
 800dd60:	6013      	str	r3, [r2, #0]
 800dd62:	e789      	b.n	800dc78 <__gethex+0x124>
 800dd64:	1e73      	subs	r3, r6, #1
 800dd66:	9a06      	ldr	r2, [sp, #24]
 800dd68:	9307      	str	r3, [sp, #28]
 800dd6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d019      	beq.n	800dda6 <__gethex+0x252>
 800dd72:	f1bb 0f20 	cmp.w	fp, #32
 800dd76:	d107      	bne.n	800dd88 <__gethex+0x234>
 800dd78:	9b04      	ldr	r3, [sp, #16]
 800dd7a:	9a01      	ldr	r2, [sp, #4]
 800dd7c:	f843 2b04 	str.w	r2, [r3], #4
 800dd80:	9304      	str	r3, [sp, #16]
 800dd82:	2300      	movs	r3, #0
 800dd84:	469b      	mov	fp, r3
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dd8c:	f7ff fecc 	bl	800db28 <__hexdig_fun>
 800dd90:	9b01      	ldr	r3, [sp, #4]
 800dd92:	f000 000f 	and.w	r0, r0, #15
 800dd96:	fa00 f00b 	lsl.w	r0, r0, fp
 800dd9a:	4303      	orrs	r3, r0
 800dd9c:	9301      	str	r3, [sp, #4]
 800dd9e:	f10b 0b04 	add.w	fp, fp, #4
 800dda2:	9b07      	ldr	r3, [sp, #28]
 800dda4:	e00d      	b.n	800ddc2 <__gethex+0x26e>
 800dda6:	9a08      	ldr	r2, [sp, #32]
 800dda8:	1e73      	subs	r3, r6, #1
 800ddaa:	4413      	add	r3, r2
 800ddac:	42bb      	cmp	r3, r7
 800ddae:	d3e0      	bcc.n	800dd72 <__gethex+0x21e>
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	4652      	mov	r2, sl
 800ddb4:	9903      	ldr	r1, [sp, #12]
 800ddb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ddb8:	f000 fea4 	bl	800eb04 <strncmp>
 800ddbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d1d7      	bne.n	800dd72 <__gethex+0x21e>
 800ddc2:	461e      	mov	r6, r3
 800ddc4:	e78c      	b.n	800dce0 <__gethex+0x18c>
 800ddc6:	f04f 0a03 	mov.w	sl, #3
 800ddca:	e7b9      	b.n	800dd40 <__gethex+0x1ec>
 800ddcc:	da09      	bge.n	800dde2 <__gethex+0x28e>
 800ddce:	1bf7      	subs	r7, r6, r7
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	463a      	mov	r2, r7
 800ddd4:	9802      	ldr	r0, [sp, #8]
 800ddd6:	f000 fbfb 	bl	800e5d0 <__lshift>
 800ddda:	4604      	mov	r4, r0
 800dddc:	1bed      	subs	r5, r5, r7
 800ddde:	f100 0914 	add.w	r9, r0, #20
 800dde2:	f04f 0a00 	mov.w	sl, #0
 800dde6:	e7b0      	b.n	800dd4a <__gethex+0x1f6>
 800dde8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ddec:	42a8      	cmp	r0, r5
 800ddee:	dd72      	ble.n	800ded6 <__gethex+0x382>
 800ddf0:	1b45      	subs	r5, r0, r5
 800ddf2:	42ae      	cmp	r6, r5
 800ddf4:	dc35      	bgt.n	800de62 <__gethex+0x30e>
 800ddf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d029      	beq.n	800de52 <__gethex+0x2fe>
 800ddfe:	2b03      	cmp	r3, #3
 800de00:	d02b      	beq.n	800de5a <__gethex+0x306>
 800de02:	2b01      	cmp	r3, #1
 800de04:	d11c      	bne.n	800de40 <__gethex+0x2ec>
 800de06:	42ae      	cmp	r6, r5
 800de08:	d11a      	bne.n	800de40 <__gethex+0x2ec>
 800de0a:	2e01      	cmp	r6, #1
 800de0c:	d112      	bne.n	800de34 <__gethex+0x2e0>
 800de0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de12:	9a05      	ldr	r2, [sp, #20]
 800de14:	2762      	movs	r7, #98	; 0x62
 800de16:	6013      	str	r3, [r2, #0]
 800de18:	2301      	movs	r3, #1
 800de1a:	6123      	str	r3, [r4, #16]
 800de1c:	f8c9 3000 	str.w	r3, [r9]
 800de20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de22:	601c      	str	r4, [r3, #0]
 800de24:	e728      	b.n	800dc78 <__gethex+0x124>
 800de26:	bf00      	nop
 800de28:	08034d78 	.word	0x08034d78
 800de2c:	08034ca9 	.word	0x08034ca9
 800de30:	08034d15 	.word	0x08034d15
 800de34:	4620      	mov	r0, r4
 800de36:	1e71      	subs	r1, r6, #1
 800de38:	f000 fe09 	bl	800ea4e <__any_on>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d1e6      	bne.n	800de0e <__gethex+0x2ba>
 800de40:	4621      	mov	r1, r4
 800de42:	9802      	ldr	r0, [sp, #8]
 800de44:	f000 f9df 	bl	800e206 <_Bfree>
 800de48:	2300      	movs	r3, #0
 800de4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de4c:	2750      	movs	r7, #80	; 0x50
 800de4e:	6013      	str	r3, [r2, #0]
 800de50:	e712      	b.n	800dc78 <__gethex+0x124>
 800de52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1f3      	bne.n	800de40 <__gethex+0x2ec>
 800de58:	e7d9      	b.n	800de0e <__gethex+0x2ba>
 800de5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d1d6      	bne.n	800de0e <__gethex+0x2ba>
 800de60:	e7ee      	b.n	800de40 <__gethex+0x2ec>
 800de62:	1e6f      	subs	r7, r5, #1
 800de64:	f1ba 0f00 	cmp.w	sl, #0
 800de68:	d132      	bne.n	800ded0 <__gethex+0x37c>
 800de6a:	b127      	cbz	r7, 800de76 <__gethex+0x322>
 800de6c:	4639      	mov	r1, r7
 800de6e:	4620      	mov	r0, r4
 800de70:	f000 fded 	bl	800ea4e <__any_on>
 800de74:	4682      	mov	sl, r0
 800de76:	2101      	movs	r1, #1
 800de78:	117b      	asrs	r3, r7, #5
 800de7a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800de7e:	f007 071f 	and.w	r7, r7, #31
 800de82:	fa01 f707 	lsl.w	r7, r1, r7
 800de86:	421f      	tst	r7, r3
 800de88:	f04f 0702 	mov.w	r7, #2
 800de8c:	4629      	mov	r1, r5
 800de8e:	4620      	mov	r0, r4
 800de90:	bf18      	it	ne
 800de92:	f04a 0a02 	orrne.w	sl, sl, #2
 800de96:	1b76      	subs	r6, r6, r5
 800de98:	f7ff fdf3 	bl	800da82 <rshift>
 800de9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dea0:	f1ba 0f00 	cmp.w	sl, #0
 800dea4:	d048      	beq.n	800df38 <__gethex+0x3e4>
 800dea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800deaa:	2b02      	cmp	r3, #2
 800deac:	d015      	beq.n	800deda <__gethex+0x386>
 800deae:	2b03      	cmp	r3, #3
 800deb0:	d017      	beq.n	800dee2 <__gethex+0x38e>
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d109      	bne.n	800deca <__gethex+0x376>
 800deb6:	f01a 0f02 	tst.w	sl, #2
 800deba:	d006      	beq.n	800deca <__gethex+0x376>
 800debc:	f8d9 0000 	ldr.w	r0, [r9]
 800dec0:	ea4a 0a00 	orr.w	sl, sl, r0
 800dec4:	f01a 0f01 	tst.w	sl, #1
 800dec8:	d10e      	bne.n	800dee8 <__gethex+0x394>
 800deca:	f047 0710 	orr.w	r7, r7, #16
 800dece:	e033      	b.n	800df38 <__gethex+0x3e4>
 800ded0:	f04f 0a01 	mov.w	sl, #1
 800ded4:	e7cf      	b.n	800de76 <__gethex+0x322>
 800ded6:	2701      	movs	r7, #1
 800ded8:	e7e2      	b.n	800dea0 <__gethex+0x34c>
 800deda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dedc:	f1c3 0301 	rsb	r3, r3, #1
 800dee0:	9315      	str	r3, [sp, #84]	; 0x54
 800dee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d0f0      	beq.n	800deca <__gethex+0x376>
 800dee8:	f04f 0c00 	mov.w	ip, #0
 800deec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800def0:	f104 0314 	add.w	r3, r4, #20
 800def4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800def8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800defc:	4618      	mov	r0, r3
 800defe:	f853 2b04 	ldr.w	r2, [r3], #4
 800df02:	f1b2 3fff 	cmp.w	r2, #4294967295
 800df06:	d01c      	beq.n	800df42 <__gethex+0x3ee>
 800df08:	3201      	adds	r2, #1
 800df0a:	6002      	str	r2, [r0, #0]
 800df0c:	2f02      	cmp	r7, #2
 800df0e:	f104 0314 	add.w	r3, r4, #20
 800df12:	d13d      	bne.n	800df90 <__gethex+0x43c>
 800df14:	f8d8 2000 	ldr.w	r2, [r8]
 800df18:	3a01      	subs	r2, #1
 800df1a:	42b2      	cmp	r2, r6
 800df1c:	d10a      	bne.n	800df34 <__gethex+0x3e0>
 800df1e:	2201      	movs	r2, #1
 800df20:	1171      	asrs	r1, r6, #5
 800df22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df26:	f006 061f 	and.w	r6, r6, #31
 800df2a:	fa02 f606 	lsl.w	r6, r2, r6
 800df2e:	421e      	tst	r6, r3
 800df30:	bf18      	it	ne
 800df32:	4617      	movne	r7, r2
 800df34:	f047 0720 	orr.w	r7, r7, #32
 800df38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df3a:	601c      	str	r4, [r3, #0]
 800df3c:	9b05      	ldr	r3, [sp, #20]
 800df3e:	601d      	str	r5, [r3, #0]
 800df40:	e69a      	b.n	800dc78 <__gethex+0x124>
 800df42:	4299      	cmp	r1, r3
 800df44:	f843 cc04 	str.w	ip, [r3, #-4]
 800df48:	d8d8      	bhi.n	800defc <__gethex+0x3a8>
 800df4a:	68a3      	ldr	r3, [r4, #8]
 800df4c:	459b      	cmp	fp, r3
 800df4e:	db17      	blt.n	800df80 <__gethex+0x42c>
 800df50:	6861      	ldr	r1, [r4, #4]
 800df52:	9802      	ldr	r0, [sp, #8]
 800df54:	3101      	adds	r1, #1
 800df56:	f000 f931 	bl	800e1bc <_Balloc>
 800df5a:	4681      	mov	r9, r0
 800df5c:	b918      	cbnz	r0, 800df66 <__gethex+0x412>
 800df5e:	4602      	mov	r2, r0
 800df60:	2184      	movs	r1, #132	; 0x84
 800df62:	4b19      	ldr	r3, [pc, #100]	; (800dfc8 <__gethex+0x474>)
 800df64:	e6ab      	b.n	800dcbe <__gethex+0x16a>
 800df66:	6922      	ldr	r2, [r4, #16]
 800df68:	f104 010c 	add.w	r1, r4, #12
 800df6c:	3202      	adds	r2, #2
 800df6e:	0092      	lsls	r2, r2, #2
 800df70:	300c      	adds	r0, #12
 800df72:	f000 f8fb 	bl	800e16c <memcpy>
 800df76:	4621      	mov	r1, r4
 800df78:	9802      	ldr	r0, [sp, #8]
 800df7a:	f000 f944 	bl	800e206 <_Bfree>
 800df7e:	464c      	mov	r4, r9
 800df80:	6923      	ldr	r3, [r4, #16]
 800df82:	1c5a      	adds	r2, r3, #1
 800df84:	6122      	str	r2, [r4, #16]
 800df86:	2201      	movs	r2, #1
 800df88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df8c:	615a      	str	r2, [r3, #20]
 800df8e:	e7bd      	b.n	800df0c <__gethex+0x3b8>
 800df90:	6922      	ldr	r2, [r4, #16]
 800df92:	455a      	cmp	r2, fp
 800df94:	dd0b      	ble.n	800dfae <__gethex+0x45a>
 800df96:	2101      	movs	r1, #1
 800df98:	4620      	mov	r0, r4
 800df9a:	f7ff fd72 	bl	800da82 <rshift>
 800df9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfa2:	3501      	adds	r5, #1
 800dfa4:	42ab      	cmp	r3, r5
 800dfa6:	f6ff aed4 	blt.w	800dd52 <__gethex+0x1fe>
 800dfaa:	2701      	movs	r7, #1
 800dfac:	e7c2      	b.n	800df34 <__gethex+0x3e0>
 800dfae:	f016 061f 	ands.w	r6, r6, #31
 800dfb2:	d0fa      	beq.n	800dfaa <__gethex+0x456>
 800dfb4:	4453      	add	r3, sl
 800dfb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dfba:	f000 f9bd 	bl	800e338 <__hi0bits>
 800dfbe:	f1c6 0620 	rsb	r6, r6, #32
 800dfc2:	42b0      	cmp	r0, r6
 800dfc4:	dbe7      	blt.n	800df96 <__gethex+0x442>
 800dfc6:	e7f0      	b.n	800dfaa <__gethex+0x456>
 800dfc8:	08034ca9 	.word	0x08034ca9

0800dfcc <L_shift>:
 800dfcc:	f1c2 0208 	rsb	r2, r2, #8
 800dfd0:	0092      	lsls	r2, r2, #2
 800dfd2:	b570      	push	{r4, r5, r6, lr}
 800dfd4:	f1c2 0620 	rsb	r6, r2, #32
 800dfd8:	6843      	ldr	r3, [r0, #4]
 800dfda:	6804      	ldr	r4, [r0, #0]
 800dfdc:	fa03 f506 	lsl.w	r5, r3, r6
 800dfe0:	432c      	orrs	r4, r5
 800dfe2:	40d3      	lsrs	r3, r2
 800dfe4:	6004      	str	r4, [r0, #0]
 800dfe6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dfea:	4288      	cmp	r0, r1
 800dfec:	d3f4      	bcc.n	800dfd8 <L_shift+0xc>
 800dfee:	bd70      	pop	{r4, r5, r6, pc}

0800dff0 <__match>:
 800dff0:	b530      	push	{r4, r5, lr}
 800dff2:	6803      	ldr	r3, [r0, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dffa:	b914      	cbnz	r4, 800e002 <__match+0x12>
 800dffc:	6003      	str	r3, [r0, #0]
 800dffe:	2001      	movs	r0, #1
 800e000:	bd30      	pop	{r4, r5, pc}
 800e002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e006:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e00a:	2d19      	cmp	r5, #25
 800e00c:	bf98      	it	ls
 800e00e:	3220      	addls	r2, #32
 800e010:	42a2      	cmp	r2, r4
 800e012:	d0f0      	beq.n	800dff6 <__match+0x6>
 800e014:	2000      	movs	r0, #0
 800e016:	e7f3      	b.n	800e000 <__match+0x10>

0800e018 <__hexnan>:
 800e018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01c:	2500      	movs	r5, #0
 800e01e:	680b      	ldr	r3, [r1, #0]
 800e020:	4682      	mov	sl, r0
 800e022:	115e      	asrs	r6, r3, #5
 800e024:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e028:	f013 031f 	ands.w	r3, r3, #31
 800e02c:	bf18      	it	ne
 800e02e:	3604      	addne	r6, #4
 800e030:	1f37      	subs	r7, r6, #4
 800e032:	46b9      	mov	r9, r7
 800e034:	463c      	mov	r4, r7
 800e036:	46ab      	mov	fp, r5
 800e038:	b087      	sub	sp, #28
 800e03a:	4690      	mov	r8, r2
 800e03c:	6802      	ldr	r2, [r0, #0]
 800e03e:	9301      	str	r3, [sp, #4]
 800e040:	f846 5c04 	str.w	r5, [r6, #-4]
 800e044:	9502      	str	r5, [sp, #8]
 800e046:	7851      	ldrb	r1, [r2, #1]
 800e048:	1c53      	adds	r3, r2, #1
 800e04a:	9303      	str	r3, [sp, #12]
 800e04c:	b341      	cbz	r1, 800e0a0 <__hexnan+0x88>
 800e04e:	4608      	mov	r0, r1
 800e050:	9205      	str	r2, [sp, #20]
 800e052:	9104      	str	r1, [sp, #16]
 800e054:	f7ff fd68 	bl	800db28 <__hexdig_fun>
 800e058:	2800      	cmp	r0, #0
 800e05a:	d14f      	bne.n	800e0fc <__hexnan+0xe4>
 800e05c:	9904      	ldr	r1, [sp, #16]
 800e05e:	9a05      	ldr	r2, [sp, #20]
 800e060:	2920      	cmp	r1, #32
 800e062:	d818      	bhi.n	800e096 <__hexnan+0x7e>
 800e064:	9b02      	ldr	r3, [sp, #8]
 800e066:	459b      	cmp	fp, r3
 800e068:	dd13      	ble.n	800e092 <__hexnan+0x7a>
 800e06a:	454c      	cmp	r4, r9
 800e06c:	d206      	bcs.n	800e07c <__hexnan+0x64>
 800e06e:	2d07      	cmp	r5, #7
 800e070:	dc04      	bgt.n	800e07c <__hexnan+0x64>
 800e072:	462a      	mov	r2, r5
 800e074:	4649      	mov	r1, r9
 800e076:	4620      	mov	r0, r4
 800e078:	f7ff ffa8 	bl	800dfcc <L_shift>
 800e07c:	4544      	cmp	r4, r8
 800e07e:	d950      	bls.n	800e122 <__hexnan+0x10a>
 800e080:	2300      	movs	r3, #0
 800e082:	f1a4 0904 	sub.w	r9, r4, #4
 800e086:	f844 3c04 	str.w	r3, [r4, #-4]
 800e08a:	461d      	mov	r5, r3
 800e08c:	464c      	mov	r4, r9
 800e08e:	f8cd b008 	str.w	fp, [sp, #8]
 800e092:	9a03      	ldr	r2, [sp, #12]
 800e094:	e7d7      	b.n	800e046 <__hexnan+0x2e>
 800e096:	2929      	cmp	r1, #41	; 0x29
 800e098:	d156      	bne.n	800e148 <__hexnan+0x130>
 800e09a:	3202      	adds	r2, #2
 800e09c:	f8ca 2000 	str.w	r2, [sl]
 800e0a0:	f1bb 0f00 	cmp.w	fp, #0
 800e0a4:	d050      	beq.n	800e148 <__hexnan+0x130>
 800e0a6:	454c      	cmp	r4, r9
 800e0a8:	d206      	bcs.n	800e0b8 <__hexnan+0xa0>
 800e0aa:	2d07      	cmp	r5, #7
 800e0ac:	dc04      	bgt.n	800e0b8 <__hexnan+0xa0>
 800e0ae:	462a      	mov	r2, r5
 800e0b0:	4649      	mov	r1, r9
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f7ff ff8a 	bl	800dfcc <L_shift>
 800e0b8:	4544      	cmp	r4, r8
 800e0ba:	d934      	bls.n	800e126 <__hexnan+0x10e>
 800e0bc:	4623      	mov	r3, r4
 800e0be:	f1a8 0204 	sub.w	r2, r8, #4
 800e0c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0c6:	429f      	cmp	r7, r3
 800e0c8:	f842 1f04 	str.w	r1, [r2, #4]!
 800e0cc:	d2f9      	bcs.n	800e0c2 <__hexnan+0xaa>
 800e0ce:	1b3b      	subs	r3, r7, r4
 800e0d0:	f023 0303 	bic.w	r3, r3, #3
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	3401      	adds	r4, #1
 800e0d8:	3e03      	subs	r6, #3
 800e0da:	42b4      	cmp	r4, r6
 800e0dc:	bf88      	it	hi
 800e0de:	2304      	movhi	r3, #4
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	4443      	add	r3, r8
 800e0e4:	f843 2b04 	str.w	r2, [r3], #4
 800e0e8:	429f      	cmp	r7, r3
 800e0ea:	d2fb      	bcs.n	800e0e4 <__hexnan+0xcc>
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	b91b      	cbnz	r3, 800e0f8 <__hexnan+0xe0>
 800e0f0:	4547      	cmp	r7, r8
 800e0f2:	d127      	bne.n	800e144 <__hexnan+0x12c>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	603b      	str	r3, [r7, #0]
 800e0f8:	2005      	movs	r0, #5
 800e0fa:	e026      	b.n	800e14a <__hexnan+0x132>
 800e0fc:	3501      	adds	r5, #1
 800e0fe:	2d08      	cmp	r5, #8
 800e100:	f10b 0b01 	add.w	fp, fp, #1
 800e104:	dd06      	ble.n	800e114 <__hexnan+0xfc>
 800e106:	4544      	cmp	r4, r8
 800e108:	d9c3      	bls.n	800e092 <__hexnan+0x7a>
 800e10a:	2300      	movs	r3, #0
 800e10c:	2501      	movs	r5, #1
 800e10e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e112:	3c04      	subs	r4, #4
 800e114:	6822      	ldr	r2, [r4, #0]
 800e116:	f000 000f 	and.w	r0, r0, #15
 800e11a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	e7b7      	b.n	800e092 <__hexnan+0x7a>
 800e122:	2508      	movs	r5, #8
 800e124:	e7b5      	b.n	800e092 <__hexnan+0x7a>
 800e126:	9b01      	ldr	r3, [sp, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0df      	beq.n	800e0ec <__hexnan+0xd4>
 800e12c:	f04f 32ff 	mov.w	r2, #4294967295
 800e130:	f1c3 0320 	rsb	r3, r3, #32
 800e134:	fa22 f303 	lsr.w	r3, r2, r3
 800e138:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e13c:	401a      	ands	r2, r3
 800e13e:	f846 2c04 	str.w	r2, [r6, #-4]
 800e142:	e7d3      	b.n	800e0ec <__hexnan+0xd4>
 800e144:	3f04      	subs	r7, #4
 800e146:	e7d1      	b.n	800e0ec <__hexnan+0xd4>
 800e148:	2004      	movs	r0, #4
 800e14a:	b007      	add	sp, #28
 800e14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e150 <memchr>:
 800e150:	4603      	mov	r3, r0
 800e152:	b510      	push	{r4, lr}
 800e154:	b2c9      	uxtb	r1, r1
 800e156:	4402      	add	r2, r0
 800e158:	4293      	cmp	r3, r2
 800e15a:	4618      	mov	r0, r3
 800e15c:	d101      	bne.n	800e162 <memchr+0x12>
 800e15e:	2000      	movs	r0, #0
 800e160:	e003      	b.n	800e16a <memchr+0x1a>
 800e162:	7804      	ldrb	r4, [r0, #0]
 800e164:	3301      	adds	r3, #1
 800e166:	428c      	cmp	r4, r1
 800e168:	d1f6      	bne.n	800e158 <memchr+0x8>
 800e16a:	bd10      	pop	{r4, pc}

0800e16c <memcpy>:
 800e16c:	440a      	add	r2, r1
 800e16e:	4291      	cmp	r1, r2
 800e170:	f100 33ff 	add.w	r3, r0, #4294967295
 800e174:	d100      	bne.n	800e178 <memcpy+0xc>
 800e176:	4770      	bx	lr
 800e178:	b510      	push	{r4, lr}
 800e17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e17e:	4291      	cmp	r1, r2
 800e180:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e184:	d1f9      	bne.n	800e17a <memcpy+0xe>
 800e186:	bd10      	pop	{r4, pc}

0800e188 <memmove>:
 800e188:	4288      	cmp	r0, r1
 800e18a:	b510      	push	{r4, lr}
 800e18c:	eb01 0402 	add.w	r4, r1, r2
 800e190:	d902      	bls.n	800e198 <memmove+0x10>
 800e192:	4284      	cmp	r4, r0
 800e194:	4623      	mov	r3, r4
 800e196:	d807      	bhi.n	800e1a8 <memmove+0x20>
 800e198:	1e43      	subs	r3, r0, #1
 800e19a:	42a1      	cmp	r1, r4
 800e19c:	d008      	beq.n	800e1b0 <memmove+0x28>
 800e19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1a6:	e7f8      	b.n	800e19a <memmove+0x12>
 800e1a8:	4601      	mov	r1, r0
 800e1aa:	4402      	add	r2, r0
 800e1ac:	428a      	cmp	r2, r1
 800e1ae:	d100      	bne.n	800e1b2 <memmove+0x2a>
 800e1b0:	bd10      	pop	{r4, pc}
 800e1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1ba:	e7f7      	b.n	800e1ac <memmove+0x24>

0800e1bc <_Balloc>:
 800e1bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e1be:	b570      	push	{r4, r5, r6, lr}
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	b17b      	cbz	r3, 800e1e6 <_Balloc+0x2a>
 800e1c6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e1c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e1cc:	b9a0      	cbnz	r0, 800e1f8 <_Balloc+0x3c>
 800e1ce:	2101      	movs	r1, #1
 800e1d0:	fa01 f604 	lsl.w	r6, r1, r4
 800e1d4:	1d72      	adds	r2, r6, #5
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	0092      	lsls	r2, r2, #2
 800e1da:	f000 fd53 	bl	800ec84 <_calloc_r>
 800e1de:	b148      	cbz	r0, 800e1f4 <_Balloc+0x38>
 800e1e0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800e1e4:	e00b      	b.n	800e1fe <_Balloc+0x42>
 800e1e6:	2221      	movs	r2, #33	; 0x21
 800e1e8:	2104      	movs	r1, #4
 800e1ea:	f000 fd4b 	bl	800ec84 <_calloc_r>
 800e1ee:	64e8      	str	r0, [r5, #76]	; 0x4c
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d1e8      	bne.n	800e1c6 <_Balloc+0xa>
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}
 800e1f8:	6802      	ldr	r2, [r0, #0]
 800e1fa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800e1fe:	2300      	movs	r3, #0
 800e200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e204:	e7f7      	b.n	800e1f6 <_Balloc+0x3a>

0800e206 <_Bfree>:
 800e206:	b131      	cbz	r1, 800e216 <_Bfree+0x10>
 800e208:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e20a:	684a      	ldr	r2, [r1, #4]
 800e20c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e210:	6008      	str	r0, [r1, #0]
 800e212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e216:	4770      	bx	lr

0800e218 <__multadd>:
 800e218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e21c:	4607      	mov	r7, r0
 800e21e:	460c      	mov	r4, r1
 800e220:	461e      	mov	r6, r3
 800e222:	2000      	movs	r0, #0
 800e224:	690d      	ldr	r5, [r1, #16]
 800e226:	f101 0c14 	add.w	ip, r1, #20
 800e22a:	f8dc 3000 	ldr.w	r3, [ip]
 800e22e:	3001      	adds	r0, #1
 800e230:	b299      	uxth	r1, r3
 800e232:	fb02 6101 	mla	r1, r2, r1, r6
 800e236:	0c1e      	lsrs	r6, r3, #16
 800e238:	0c0b      	lsrs	r3, r1, #16
 800e23a:	fb02 3306 	mla	r3, r2, r6, r3
 800e23e:	b289      	uxth	r1, r1
 800e240:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e244:	4285      	cmp	r5, r0
 800e246:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e24a:	f84c 1b04 	str.w	r1, [ip], #4
 800e24e:	dcec      	bgt.n	800e22a <__multadd+0x12>
 800e250:	b30e      	cbz	r6, 800e296 <__multadd+0x7e>
 800e252:	68a3      	ldr	r3, [r4, #8]
 800e254:	42ab      	cmp	r3, r5
 800e256:	dc19      	bgt.n	800e28c <__multadd+0x74>
 800e258:	6861      	ldr	r1, [r4, #4]
 800e25a:	4638      	mov	r0, r7
 800e25c:	3101      	adds	r1, #1
 800e25e:	f7ff ffad 	bl	800e1bc <_Balloc>
 800e262:	4680      	mov	r8, r0
 800e264:	b928      	cbnz	r0, 800e272 <__multadd+0x5a>
 800e266:	4602      	mov	r2, r0
 800e268:	21b5      	movs	r1, #181	; 0xb5
 800e26a:	4b0c      	ldr	r3, [pc, #48]	; (800e29c <__multadd+0x84>)
 800e26c:	480c      	ldr	r0, [pc, #48]	; (800e2a0 <__multadd+0x88>)
 800e26e:	f000 fceb 	bl	800ec48 <__assert_func>
 800e272:	6922      	ldr	r2, [r4, #16]
 800e274:	f104 010c 	add.w	r1, r4, #12
 800e278:	3202      	adds	r2, #2
 800e27a:	0092      	lsls	r2, r2, #2
 800e27c:	300c      	adds	r0, #12
 800e27e:	f7ff ff75 	bl	800e16c <memcpy>
 800e282:	4621      	mov	r1, r4
 800e284:	4638      	mov	r0, r7
 800e286:	f7ff ffbe 	bl	800e206 <_Bfree>
 800e28a:	4644      	mov	r4, r8
 800e28c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e290:	3501      	adds	r5, #1
 800e292:	615e      	str	r6, [r3, #20]
 800e294:	6125      	str	r5, [r4, #16]
 800e296:	4620      	mov	r0, r4
 800e298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e29c:	08034ca9 	.word	0x08034ca9
 800e2a0:	08034d84 	.word	0x08034d84

0800e2a4 <__s2b>:
 800e2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2a8:	4615      	mov	r5, r2
 800e2aa:	2209      	movs	r2, #9
 800e2ac:	461f      	mov	r7, r3
 800e2ae:	3308      	adds	r3, #8
 800e2b0:	460c      	mov	r4, r1
 800e2b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	db09      	blt.n	800e2d4 <__s2b+0x30>
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	f7ff ff7b 	bl	800e1bc <_Balloc>
 800e2c6:	b940      	cbnz	r0, 800e2da <__s2b+0x36>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	21ce      	movs	r1, #206	; 0xce
 800e2cc:	4b18      	ldr	r3, [pc, #96]	; (800e330 <__s2b+0x8c>)
 800e2ce:	4819      	ldr	r0, [pc, #100]	; (800e334 <__s2b+0x90>)
 800e2d0:	f000 fcba 	bl	800ec48 <__assert_func>
 800e2d4:	0052      	lsls	r2, r2, #1
 800e2d6:	3101      	adds	r1, #1
 800e2d8:	e7f0      	b.n	800e2bc <__s2b+0x18>
 800e2da:	9b08      	ldr	r3, [sp, #32]
 800e2dc:	2d09      	cmp	r5, #9
 800e2de:	6143      	str	r3, [r0, #20]
 800e2e0:	f04f 0301 	mov.w	r3, #1
 800e2e4:	6103      	str	r3, [r0, #16]
 800e2e6:	dd16      	ble.n	800e316 <__s2b+0x72>
 800e2e8:	f104 0909 	add.w	r9, r4, #9
 800e2ec:	46c8      	mov	r8, r9
 800e2ee:	442c      	add	r4, r5
 800e2f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e2f4:	4601      	mov	r1, r0
 800e2f6:	220a      	movs	r2, #10
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	3b30      	subs	r3, #48	; 0x30
 800e2fc:	f7ff ff8c 	bl	800e218 <__multadd>
 800e300:	45a0      	cmp	r8, r4
 800e302:	d1f5      	bne.n	800e2f0 <__s2b+0x4c>
 800e304:	f1a5 0408 	sub.w	r4, r5, #8
 800e308:	444c      	add	r4, r9
 800e30a:	1b2d      	subs	r5, r5, r4
 800e30c:	1963      	adds	r3, r4, r5
 800e30e:	42bb      	cmp	r3, r7
 800e310:	db04      	blt.n	800e31c <__s2b+0x78>
 800e312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e316:	2509      	movs	r5, #9
 800e318:	340a      	adds	r4, #10
 800e31a:	e7f6      	b.n	800e30a <__s2b+0x66>
 800e31c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e320:	4601      	mov	r1, r0
 800e322:	220a      	movs	r2, #10
 800e324:	4630      	mov	r0, r6
 800e326:	3b30      	subs	r3, #48	; 0x30
 800e328:	f7ff ff76 	bl	800e218 <__multadd>
 800e32c:	e7ee      	b.n	800e30c <__s2b+0x68>
 800e32e:	bf00      	nop
 800e330:	08034ca9 	.word	0x08034ca9
 800e334:	08034d84 	.word	0x08034d84

0800e338 <__hi0bits>:
 800e338:	0c02      	lsrs	r2, r0, #16
 800e33a:	0412      	lsls	r2, r2, #16
 800e33c:	4603      	mov	r3, r0
 800e33e:	b9ca      	cbnz	r2, 800e374 <__hi0bits+0x3c>
 800e340:	0403      	lsls	r3, r0, #16
 800e342:	2010      	movs	r0, #16
 800e344:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e348:	bf04      	itt	eq
 800e34a:	021b      	lsleq	r3, r3, #8
 800e34c:	3008      	addeq	r0, #8
 800e34e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e352:	bf04      	itt	eq
 800e354:	011b      	lsleq	r3, r3, #4
 800e356:	3004      	addeq	r0, #4
 800e358:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e35c:	bf04      	itt	eq
 800e35e:	009b      	lsleq	r3, r3, #2
 800e360:	3002      	addeq	r0, #2
 800e362:	2b00      	cmp	r3, #0
 800e364:	db05      	blt.n	800e372 <__hi0bits+0x3a>
 800e366:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e36a:	f100 0001 	add.w	r0, r0, #1
 800e36e:	bf08      	it	eq
 800e370:	2020      	moveq	r0, #32
 800e372:	4770      	bx	lr
 800e374:	2000      	movs	r0, #0
 800e376:	e7e5      	b.n	800e344 <__hi0bits+0xc>

0800e378 <__lo0bits>:
 800e378:	6803      	ldr	r3, [r0, #0]
 800e37a:	4602      	mov	r2, r0
 800e37c:	f013 0007 	ands.w	r0, r3, #7
 800e380:	d00b      	beq.n	800e39a <__lo0bits+0x22>
 800e382:	07d9      	lsls	r1, r3, #31
 800e384:	d421      	bmi.n	800e3ca <__lo0bits+0x52>
 800e386:	0798      	lsls	r0, r3, #30
 800e388:	bf49      	itett	mi
 800e38a:	085b      	lsrmi	r3, r3, #1
 800e38c:	089b      	lsrpl	r3, r3, #2
 800e38e:	2001      	movmi	r0, #1
 800e390:	6013      	strmi	r3, [r2, #0]
 800e392:	bf5c      	itt	pl
 800e394:	2002      	movpl	r0, #2
 800e396:	6013      	strpl	r3, [r2, #0]
 800e398:	4770      	bx	lr
 800e39a:	b299      	uxth	r1, r3
 800e39c:	b909      	cbnz	r1, 800e3a2 <__lo0bits+0x2a>
 800e39e:	2010      	movs	r0, #16
 800e3a0:	0c1b      	lsrs	r3, r3, #16
 800e3a2:	b2d9      	uxtb	r1, r3
 800e3a4:	b909      	cbnz	r1, 800e3aa <__lo0bits+0x32>
 800e3a6:	3008      	adds	r0, #8
 800e3a8:	0a1b      	lsrs	r3, r3, #8
 800e3aa:	0719      	lsls	r1, r3, #28
 800e3ac:	bf04      	itt	eq
 800e3ae:	091b      	lsreq	r3, r3, #4
 800e3b0:	3004      	addeq	r0, #4
 800e3b2:	0799      	lsls	r1, r3, #30
 800e3b4:	bf04      	itt	eq
 800e3b6:	089b      	lsreq	r3, r3, #2
 800e3b8:	3002      	addeq	r0, #2
 800e3ba:	07d9      	lsls	r1, r3, #31
 800e3bc:	d403      	bmi.n	800e3c6 <__lo0bits+0x4e>
 800e3be:	085b      	lsrs	r3, r3, #1
 800e3c0:	f100 0001 	add.w	r0, r0, #1
 800e3c4:	d003      	beq.n	800e3ce <__lo0bits+0x56>
 800e3c6:	6013      	str	r3, [r2, #0]
 800e3c8:	4770      	bx	lr
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	4770      	bx	lr
 800e3ce:	2020      	movs	r0, #32
 800e3d0:	4770      	bx	lr
	...

0800e3d4 <__i2b>:
 800e3d4:	b510      	push	{r4, lr}
 800e3d6:	460c      	mov	r4, r1
 800e3d8:	2101      	movs	r1, #1
 800e3da:	f7ff feef 	bl	800e1bc <_Balloc>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	b928      	cbnz	r0, 800e3ee <__i2b+0x1a>
 800e3e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e3e6:	4b04      	ldr	r3, [pc, #16]	; (800e3f8 <__i2b+0x24>)
 800e3e8:	4804      	ldr	r0, [pc, #16]	; (800e3fc <__i2b+0x28>)
 800e3ea:	f000 fc2d 	bl	800ec48 <__assert_func>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	6144      	str	r4, [r0, #20]
 800e3f2:	6103      	str	r3, [r0, #16]
 800e3f4:	bd10      	pop	{r4, pc}
 800e3f6:	bf00      	nop
 800e3f8:	08034ca9 	.word	0x08034ca9
 800e3fc:	08034d84 	.word	0x08034d84

0800e400 <__multiply>:
 800e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e404:	4691      	mov	r9, r2
 800e406:	690a      	ldr	r2, [r1, #16]
 800e408:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e40c:	460c      	mov	r4, r1
 800e40e:	429a      	cmp	r2, r3
 800e410:	bfbe      	ittt	lt
 800e412:	460b      	movlt	r3, r1
 800e414:	464c      	movlt	r4, r9
 800e416:	4699      	movlt	r9, r3
 800e418:	6927      	ldr	r7, [r4, #16]
 800e41a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e41e:	68a3      	ldr	r3, [r4, #8]
 800e420:	6861      	ldr	r1, [r4, #4]
 800e422:	eb07 060a 	add.w	r6, r7, sl
 800e426:	42b3      	cmp	r3, r6
 800e428:	b085      	sub	sp, #20
 800e42a:	bfb8      	it	lt
 800e42c:	3101      	addlt	r1, #1
 800e42e:	f7ff fec5 	bl	800e1bc <_Balloc>
 800e432:	b930      	cbnz	r0, 800e442 <__multiply+0x42>
 800e434:	4602      	mov	r2, r0
 800e436:	f240 115d 	movw	r1, #349	; 0x15d
 800e43a:	4b43      	ldr	r3, [pc, #268]	; (800e548 <__multiply+0x148>)
 800e43c:	4843      	ldr	r0, [pc, #268]	; (800e54c <__multiply+0x14c>)
 800e43e:	f000 fc03 	bl	800ec48 <__assert_func>
 800e442:	f100 0514 	add.w	r5, r0, #20
 800e446:	462b      	mov	r3, r5
 800e448:	2200      	movs	r2, #0
 800e44a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e44e:	4543      	cmp	r3, r8
 800e450:	d321      	bcc.n	800e496 <__multiply+0x96>
 800e452:	f104 0314 	add.w	r3, r4, #20
 800e456:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e45a:	f109 0314 	add.w	r3, r9, #20
 800e45e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e462:	9202      	str	r2, [sp, #8]
 800e464:	1b3a      	subs	r2, r7, r4
 800e466:	3a15      	subs	r2, #21
 800e468:	f022 0203 	bic.w	r2, r2, #3
 800e46c:	3204      	adds	r2, #4
 800e46e:	f104 0115 	add.w	r1, r4, #21
 800e472:	428f      	cmp	r7, r1
 800e474:	bf38      	it	cc
 800e476:	2204      	movcc	r2, #4
 800e478:	9201      	str	r2, [sp, #4]
 800e47a:	9a02      	ldr	r2, [sp, #8]
 800e47c:	9303      	str	r3, [sp, #12]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d80c      	bhi.n	800e49c <__multiply+0x9c>
 800e482:	2e00      	cmp	r6, #0
 800e484:	dd03      	ble.n	800e48e <__multiply+0x8e>
 800e486:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d059      	beq.n	800e542 <__multiply+0x142>
 800e48e:	6106      	str	r6, [r0, #16]
 800e490:	b005      	add	sp, #20
 800e492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e496:	f843 2b04 	str.w	r2, [r3], #4
 800e49a:	e7d8      	b.n	800e44e <__multiply+0x4e>
 800e49c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e4a0:	f1ba 0f00 	cmp.w	sl, #0
 800e4a4:	d023      	beq.n	800e4ee <__multiply+0xee>
 800e4a6:	46a9      	mov	r9, r5
 800e4a8:	f04f 0c00 	mov.w	ip, #0
 800e4ac:	f104 0e14 	add.w	lr, r4, #20
 800e4b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e4b4:	f8d9 1000 	ldr.w	r1, [r9]
 800e4b8:	fa1f fb82 	uxth.w	fp, r2
 800e4bc:	b289      	uxth	r1, r1
 800e4be:	fb0a 110b 	mla	r1, sl, fp, r1
 800e4c2:	4461      	add	r1, ip
 800e4c4:	f8d9 c000 	ldr.w	ip, [r9]
 800e4c8:	0c12      	lsrs	r2, r2, #16
 800e4ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800e4ce:	fb0a c202 	mla	r2, sl, r2, ip
 800e4d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4d6:	b289      	uxth	r1, r1
 800e4d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4dc:	4577      	cmp	r7, lr
 800e4de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4e2:	f849 1b04 	str.w	r1, [r9], #4
 800e4e6:	d8e3      	bhi.n	800e4b0 <__multiply+0xb0>
 800e4e8:	9a01      	ldr	r2, [sp, #4]
 800e4ea:	f845 c002 	str.w	ip, [r5, r2]
 800e4ee:	9a03      	ldr	r2, [sp, #12]
 800e4f0:	3304      	adds	r3, #4
 800e4f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e4f6:	f1b9 0f00 	cmp.w	r9, #0
 800e4fa:	d020      	beq.n	800e53e <__multiply+0x13e>
 800e4fc:	46ae      	mov	lr, r5
 800e4fe:	f04f 0a00 	mov.w	sl, #0
 800e502:	6829      	ldr	r1, [r5, #0]
 800e504:	f104 0c14 	add.w	ip, r4, #20
 800e508:	f8bc b000 	ldrh.w	fp, [ip]
 800e50c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e510:	b289      	uxth	r1, r1
 800e512:	fb09 220b 	mla	r2, r9, fp, r2
 800e516:	4492      	add	sl, r2
 800e518:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e51c:	f84e 1b04 	str.w	r1, [lr], #4
 800e520:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e524:	f8be 1000 	ldrh.w	r1, [lr]
 800e528:	0c12      	lsrs	r2, r2, #16
 800e52a:	fb09 1102 	mla	r1, r9, r2, r1
 800e52e:	4567      	cmp	r7, ip
 800e530:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e534:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e538:	d8e6      	bhi.n	800e508 <__multiply+0x108>
 800e53a:	9a01      	ldr	r2, [sp, #4]
 800e53c:	50a9      	str	r1, [r5, r2]
 800e53e:	3504      	adds	r5, #4
 800e540:	e79b      	b.n	800e47a <__multiply+0x7a>
 800e542:	3e01      	subs	r6, #1
 800e544:	e79d      	b.n	800e482 <__multiply+0x82>
 800e546:	bf00      	nop
 800e548:	08034ca9 	.word	0x08034ca9
 800e54c:	08034d84 	.word	0x08034d84

0800e550 <__pow5mult>:
 800e550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e554:	4615      	mov	r5, r2
 800e556:	f012 0203 	ands.w	r2, r2, #3
 800e55a:	4606      	mov	r6, r0
 800e55c:	460f      	mov	r7, r1
 800e55e:	d007      	beq.n	800e570 <__pow5mult+0x20>
 800e560:	4c1a      	ldr	r4, [pc, #104]	; (800e5cc <__pow5mult+0x7c>)
 800e562:	3a01      	subs	r2, #1
 800e564:	2300      	movs	r3, #0
 800e566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e56a:	f7ff fe55 	bl	800e218 <__multadd>
 800e56e:	4607      	mov	r7, r0
 800e570:	10ad      	asrs	r5, r5, #2
 800e572:	d027      	beq.n	800e5c4 <__pow5mult+0x74>
 800e574:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800e576:	b944      	cbnz	r4, 800e58a <__pow5mult+0x3a>
 800e578:	f240 2171 	movw	r1, #625	; 0x271
 800e57c:	4630      	mov	r0, r6
 800e57e:	f7ff ff29 	bl	800e3d4 <__i2b>
 800e582:	2300      	movs	r3, #0
 800e584:	4604      	mov	r4, r0
 800e586:	64b0      	str	r0, [r6, #72]	; 0x48
 800e588:	6003      	str	r3, [r0, #0]
 800e58a:	f04f 0900 	mov.w	r9, #0
 800e58e:	07eb      	lsls	r3, r5, #31
 800e590:	d50a      	bpl.n	800e5a8 <__pow5mult+0x58>
 800e592:	4639      	mov	r1, r7
 800e594:	4622      	mov	r2, r4
 800e596:	4630      	mov	r0, r6
 800e598:	f7ff ff32 	bl	800e400 <__multiply>
 800e59c:	4680      	mov	r8, r0
 800e59e:	4639      	mov	r1, r7
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f7ff fe30 	bl	800e206 <_Bfree>
 800e5a6:	4647      	mov	r7, r8
 800e5a8:	106d      	asrs	r5, r5, #1
 800e5aa:	d00b      	beq.n	800e5c4 <__pow5mult+0x74>
 800e5ac:	6820      	ldr	r0, [r4, #0]
 800e5ae:	b938      	cbnz	r0, 800e5c0 <__pow5mult+0x70>
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	4621      	mov	r1, r4
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7ff ff23 	bl	800e400 <__multiply>
 800e5ba:	6020      	str	r0, [r4, #0]
 800e5bc:	f8c0 9000 	str.w	r9, [r0]
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	e7e4      	b.n	800e58e <__pow5mult+0x3e>
 800e5c4:	4638      	mov	r0, r7
 800e5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5ca:	bf00      	nop
 800e5cc:	08034ed0 	.word	0x08034ed0

0800e5d0 <__lshift>:
 800e5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	4607      	mov	r7, r0
 800e5d8:	4691      	mov	r9, r2
 800e5da:	6923      	ldr	r3, [r4, #16]
 800e5dc:	6849      	ldr	r1, [r1, #4]
 800e5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5e2:	68a3      	ldr	r3, [r4, #8]
 800e5e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5e8:	f108 0601 	add.w	r6, r8, #1
 800e5ec:	42b3      	cmp	r3, r6
 800e5ee:	db0b      	blt.n	800e608 <__lshift+0x38>
 800e5f0:	4638      	mov	r0, r7
 800e5f2:	f7ff fde3 	bl	800e1bc <_Balloc>
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	b948      	cbnz	r0, 800e60e <__lshift+0x3e>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e600:	4b29      	ldr	r3, [pc, #164]	; (800e6a8 <__lshift+0xd8>)
 800e602:	482a      	ldr	r0, [pc, #168]	; (800e6ac <__lshift+0xdc>)
 800e604:	f000 fb20 	bl	800ec48 <__assert_func>
 800e608:	3101      	adds	r1, #1
 800e60a:	005b      	lsls	r3, r3, #1
 800e60c:	e7ee      	b.n	800e5ec <__lshift+0x1c>
 800e60e:	2300      	movs	r3, #0
 800e610:	f100 0114 	add.w	r1, r0, #20
 800e614:	f100 0210 	add.w	r2, r0, #16
 800e618:	4618      	mov	r0, r3
 800e61a:	4553      	cmp	r3, sl
 800e61c:	db37      	blt.n	800e68e <__lshift+0xbe>
 800e61e:	6920      	ldr	r0, [r4, #16]
 800e620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e624:	f104 0314 	add.w	r3, r4, #20
 800e628:	f019 091f 	ands.w	r9, r9, #31
 800e62c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e634:	d02f      	beq.n	800e696 <__lshift+0xc6>
 800e636:	468a      	mov	sl, r1
 800e638:	f04f 0c00 	mov.w	ip, #0
 800e63c:	f1c9 0e20 	rsb	lr, r9, #32
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	fa02 f209 	lsl.w	r2, r2, r9
 800e646:	ea42 020c 	orr.w	r2, r2, ip
 800e64a:	f84a 2b04 	str.w	r2, [sl], #4
 800e64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e652:	4298      	cmp	r0, r3
 800e654:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e658:	d8f2      	bhi.n	800e640 <__lshift+0x70>
 800e65a:	1b03      	subs	r3, r0, r4
 800e65c:	3b15      	subs	r3, #21
 800e65e:	f023 0303 	bic.w	r3, r3, #3
 800e662:	3304      	adds	r3, #4
 800e664:	f104 0215 	add.w	r2, r4, #21
 800e668:	4290      	cmp	r0, r2
 800e66a:	bf38      	it	cc
 800e66c:	2304      	movcc	r3, #4
 800e66e:	f841 c003 	str.w	ip, [r1, r3]
 800e672:	f1bc 0f00 	cmp.w	ip, #0
 800e676:	d001      	beq.n	800e67c <__lshift+0xac>
 800e678:	f108 0602 	add.w	r6, r8, #2
 800e67c:	3e01      	subs	r6, #1
 800e67e:	4638      	mov	r0, r7
 800e680:	4621      	mov	r1, r4
 800e682:	612e      	str	r6, [r5, #16]
 800e684:	f7ff fdbf 	bl	800e206 <_Bfree>
 800e688:	4628      	mov	r0, r5
 800e68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e692:	3301      	adds	r3, #1
 800e694:	e7c1      	b.n	800e61a <__lshift+0x4a>
 800e696:	3904      	subs	r1, #4
 800e698:	f853 2b04 	ldr.w	r2, [r3], #4
 800e69c:	4298      	cmp	r0, r3
 800e69e:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6a2:	d8f9      	bhi.n	800e698 <__lshift+0xc8>
 800e6a4:	e7ea      	b.n	800e67c <__lshift+0xac>
 800e6a6:	bf00      	nop
 800e6a8:	08034ca9 	.word	0x08034ca9
 800e6ac:	08034d84 	.word	0x08034d84

0800e6b0 <__mcmp>:
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	690a      	ldr	r2, [r1, #16]
 800e6b4:	6900      	ldr	r0, [r0, #16]
 800e6b6:	b530      	push	{r4, r5, lr}
 800e6b8:	1a80      	subs	r0, r0, r2
 800e6ba:	d10d      	bne.n	800e6d8 <__mcmp+0x28>
 800e6bc:	3314      	adds	r3, #20
 800e6be:	3114      	adds	r1, #20
 800e6c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e6c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e6c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e6cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e6d0:	4295      	cmp	r5, r2
 800e6d2:	d002      	beq.n	800e6da <__mcmp+0x2a>
 800e6d4:	d304      	bcc.n	800e6e0 <__mcmp+0x30>
 800e6d6:	2001      	movs	r0, #1
 800e6d8:	bd30      	pop	{r4, r5, pc}
 800e6da:	42a3      	cmp	r3, r4
 800e6dc:	d3f4      	bcc.n	800e6c8 <__mcmp+0x18>
 800e6de:	e7fb      	b.n	800e6d8 <__mcmp+0x28>
 800e6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e4:	e7f8      	b.n	800e6d8 <__mcmp+0x28>
	...

0800e6e8 <__mdiff>:
 800e6e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	460d      	mov	r5, r1
 800e6ee:	4607      	mov	r7, r0
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	4614      	mov	r4, r2
 800e6f6:	f7ff ffdb 	bl	800e6b0 <__mcmp>
 800e6fa:	1e06      	subs	r6, r0, #0
 800e6fc:	d111      	bne.n	800e722 <__mdiff+0x3a>
 800e6fe:	4631      	mov	r1, r6
 800e700:	4638      	mov	r0, r7
 800e702:	f7ff fd5b 	bl	800e1bc <_Balloc>
 800e706:	4602      	mov	r2, r0
 800e708:	b928      	cbnz	r0, 800e716 <__mdiff+0x2e>
 800e70a:	f240 2132 	movw	r1, #562	; 0x232
 800e70e:	4b3a      	ldr	r3, [pc, #232]	; (800e7f8 <__mdiff+0x110>)
 800e710:	483a      	ldr	r0, [pc, #232]	; (800e7fc <__mdiff+0x114>)
 800e712:	f000 fa99 	bl	800ec48 <__assert_func>
 800e716:	2301      	movs	r3, #1
 800e718:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e71c:	4610      	mov	r0, r2
 800e71e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e722:	bfa4      	itt	ge
 800e724:	4623      	movge	r3, r4
 800e726:	462c      	movge	r4, r5
 800e728:	4638      	mov	r0, r7
 800e72a:	6861      	ldr	r1, [r4, #4]
 800e72c:	bfa6      	itte	ge
 800e72e:	461d      	movge	r5, r3
 800e730:	2600      	movge	r6, #0
 800e732:	2601      	movlt	r6, #1
 800e734:	f7ff fd42 	bl	800e1bc <_Balloc>
 800e738:	4602      	mov	r2, r0
 800e73a:	b918      	cbnz	r0, 800e744 <__mdiff+0x5c>
 800e73c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e740:	4b2d      	ldr	r3, [pc, #180]	; (800e7f8 <__mdiff+0x110>)
 800e742:	e7e5      	b.n	800e710 <__mdiff+0x28>
 800e744:	f102 0814 	add.w	r8, r2, #20
 800e748:	46c2      	mov	sl, r8
 800e74a:	f04f 0c00 	mov.w	ip, #0
 800e74e:	6927      	ldr	r7, [r4, #16]
 800e750:	60c6      	str	r6, [r0, #12]
 800e752:	692e      	ldr	r6, [r5, #16]
 800e754:	f104 0014 	add.w	r0, r4, #20
 800e758:	f105 0914 	add.w	r9, r5, #20
 800e75c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800e760:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e764:	3410      	adds	r4, #16
 800e766:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800e76a:	f859 3b04 	ldr.w	r3, [r9], #4
 800e76e:	fa1f f18b 	uxth.w	r1, fp
 800e772:	448c      	add	ip, r1
 800e774:	b299      	uxth	r1, r3
 800e776:	0c1b      	lsrs	r3, r3, #16
 800e778:	ebac 0101 	sub.w	r1, ip, r1
 800e77c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e780:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e784:	b289      	uxth	r1, r1
 800e786:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e78a:	454e      	cmp	r6, r9
 800e78c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e790:	f84a 3b04 	str.w	r3, [sl], #4
 800e794:	d8e7      	bhi.n	800e766 <__mdiff+0x7e>
 800e796:	1b73      	subs	r3, r6, r5
 800e798:	3b15      	subs	r3, #21
 800e79a:	f023 0303 	bic.w	r3, r3, #3
 800e79e:	3515      	adds	r5, #21
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	42ae      	cmp	r6, r5
 800e7a4:	bf38      	it	cc
 800e7a6:	2304      	movcc	r3, #4
 800e7a8:	4418      	add	r0, r3
 800e7aa:	4443      	add	r3, r8
 800e7ac:	461e      	mov	r6, r3
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	4575      	cmp	r5, lr
 800e7b2:	d30e      	bcc.n	800e7d2 <__mdiff+0xea>
 800e7b4:	f10e 0103 	add.w	r1, lr, #3
 800e7b8:	1a09      	subs	r1, r1, r0
 800e7ba:	f021 0103 	bic.w	r1, r1, #3
 800e7be:	3803      	subs	r0, #3
 800e7c0:	4586      	cmp	lr, r0
 800e7c2:	bf38      	it	cc
 800e7c4:	2100      	movcc	r1, #0
 800e7c6:	4419      	add	r1, r3
 800e7c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e7cc:	b18b      	cbz	r3, 800e7f2 <__mdiff+0x10a>
 800e7ce:	6117      	str	r7, [r2, #16]
 800e7d0:	e7a4      	b.n	800e71c <__mdiff+0x34>
 800e7d2:	f855 8b04 	ldr.w	r8, [r5], #4
 800e7d6:	fa1f f188 	uxth.w	r1, r8
 800e7da:	4461      	add	r1, ip
 800e7dc:	140c      	asrs	r4, r1, #16
 800e7de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e7e2:	b289      	uxth	r1, r1
 800e7e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e7e8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800e7ec:	f846 1b04 	str.w	r1, [r6], #4
 800e7f0:	e7de      	b.n	800e7b0 <__mdiff+0xc8>
 800e7f2:	3f01      	subs	r7, #1
 800e7f4:	e7e8      	b.n	800e7c8 <__mdiff+0xe0>
 800e7f6:	bf00      	nop
 800e7f8:	08034ca9 	.word	0x08034ca9
 800e7fc:	08034d84 	.word	0x08034d84

0800e800 <__ulp>:
 800e800:	4b11      	ldr	r3, [pc, #68]	; (800e848 <__ulp+0x48>)
 800e802:	400b      	ands	r3, r1
 800e804:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e808:	2b00      	cmp	r3, #0
 800e80a:	dd02      	ble.n	800e812 <__ulp+0x12>
 800e80c:	2000      	movs	r0, #0
 800e80e:	4619      	mov	r1, r3
 800e810:	4770      	bx	lr
 800e812:	425b      	negs	r3, r3
 800e814:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e818:	f04f 0000 	mov.w	r0, #0
 800e81c:	f04f 0100 	mov.w	r1, #0
 800e820:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e824:	da04      	bge.n	800e830 <__ulp+0x30>
 800e826:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e82a:	fa43 f102 	asr.w	r1, r3, r2
 800e82e:	4770      	bx	lr
 800e830:	f1a2 0314 	sub.w	r3, r2, #20
 800e834:	2b1e      	cmp	r3, #30
 800e836:	bfd6      	itet	le
 800e838:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e83c:	2301      	movgt	r3, #1
 800e83e:	fa22 f303 	lsrle.w	r3, r2, r3
 800e842:	4618      	mov	r0, r3
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop
 800e848:	7ff00000 	.word	0x7ff00000

0800e84c <__b2d>:
 800e84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e850:	6907      	ldr	r7, [r0, #16]
 800e852:	f100 0914 	add.w	r9, r0, #20
 800e856:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800e85a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800e85e:	f1a7 0804 	sub.w	r8, r7, #4
 800e862:	4630      	mov	r0, r6
 800e864:	f7ff fd68 	bl	800e338 <__hi0bits>
 800e868:	f1c0 0320 	rsb	r3, r0, #32
 800e86c:	280a      	cmp	r0, #10
 800e86e:	600b      	str	r3, [r1, #0]
 800e870:	491f      	ldr	r1, [pc, #124]	; (800e8f0 <__b2d+0xa4>)
 800e872:	dc17      	bgt.n	800e8a4 <__b2d+0x58>
 800e874:	45c1      	cmp	r9, r8
 800e876:	bf28      	it	cs
 800e878:	2200      	movcs	r2, #0
 800e87a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e87e:	fa26 f30c 	lsr.w	r3, r6, ip
 800e882:	bf38      	it	cc
 800e884:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800e888:	ea43 0501 	orr.w	r5, r3, r1
 800e88c:	f100 0315 	add.w	r3, r0, #21
 800e890:	fa06 f303 	lsl.w	r3, r6, r3
 800e894:	fa22 f20c 	lsr.w	r2, r2, ip
 800e898:	ea43 0402 	orr.w	r4, r3, r2
 800e89c:	4620      	mov	r0, r4
 800e89e:	4629      	mov	r1, r5
 800e8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8a4:	45c1      	cmp	r9, r8
 800e8a6:	bf2e      	itee	cs
 800e8a8:	2200      	movcs	r2, #0
 800e8aa:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800e8ae:	f1a7 0808 	subcc.w	r8, r7, #8
 800e8b2:	f1b0 030b 	subs.w	r3, r0, #11
 800e8b6:	d016      	beq.n	800e8e6 <__b2d+0x9a>
 800e8b8:	f1c3 0720 	rsb	r7, r3, #32
 800e8bc:	fa22 f107 	lsr.w	r1, r2, r7
 800e8c0:	45c8      	cmp	r8, r9
 800e8c2:	fa06 f603 	lsl.w	r6, r6, r3
 800e8c6:	ea46 0601 	orr.w	r6, r6, r1
 800e8ca:	bf94      	ite	ls
 800e8cc:	2100      	movls	r1, #0
 800e8ce:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800e8d2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800e8d6:	fa02 f003 	lsl.w	r0, r2, r3
 800e8da:	40f9      	lsrs	r1, r7
 800e8dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e8e0:	ea40 0401 	orr.w	r4, r0, r1
 800e8e4:	e7da      	b.n	800e89c <__b2d+0x50>
 800e8e6:	4614      	mov	r4, r2
 800e8e8:	ea46 0501 	orr.w	r5, r6, r1
 800e8ec:	e7d6      	b.n	800e89c <__b2d+0x50>
 800e8ee:	bf00      	nop
 800e8f0:	3ff00000 	.word	0x3ff00000

0800e8f4 <__d2b>:
 800e8f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e8f8:	2101      	movs	r1, #1
 800e8fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e8fe:	4690      	mov	r8, r2
 800e900:	461d      	mov	r5, r3
 800e902:	f7ff fc5b 	bl	800e1bc <_Balloc>
 800e906:	4604      	mov	r4, r0
 800e908:	b930      	cbnz	r0, 800e918 <__d2b+0x24>
 800e90a:	4602      	mov	r2, r0
 800e90c:	f240 310a 	movw	r1, #778	; 0x30a
 800e910:	4b24      	ldr	r3, [pc, #144]	; (800e9a4 <__d2b+0xb0>)
 800e912:	4825      	ldr	r0, [pc, #148]	; (800e9a8 <__d2b+0xb4>)
 800e914:	f000 f998 	bl	800ec48 <__assert_func>
 800e918:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e91c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e920:	bb2d      	cbnz	r5, 800e96e <__d2b+0x7a>
 800e922:	9301      	str	r3, [sp, #4]
 800e924:	f1b8 0300 	subs.w	r3, r8, #0
 800e928:	d026      	beq.n	800e978 <__d2b+0x84>
 800e92a:	4668      	mov	r0, sp
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	f7ff fd23 	bl	800e378 <__lo0bits>
 800e932:	9900      	ldr	r1, [sp, #0]
 800e934:	b1f0      	cbz	r0, 800e974 <__d2b+0x80>
 800e936:	9a01      	ldr	r2, [sp, #4]
 800e938:	f1c0 0320 	rsb	r3, r0, #32
 800e93c:	fa02 f303 	lsl.w	r3, r2, r3
 800e940:	430b      	orrs	r3, r1
 800e942:	40c2      	lsrs	r2, r0
 800e944:	6163      	str	r3, [r4, #20]
 800e946:	9201      	str	r2, [sp, #4]
 800e948:	9b01      	ldr	r3, [sp, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	bf14      	ite	ne
 800e94e:	2102      	movne	r1, #2
 800e950:	2101      	moveq	r1, #1
 800e952:	61a3      	str	r3, [r4, #24]
 800e954:	6121      	str	r1, [r4, #16]
 800e956:	b1c5      	cbz	r5, 800e98a <__d2b+0x96>
 800e958:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e95c:	4405      	add	r5, r0
 800e95e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e962:	603d      	str	r5, [r7, #0]
 800e964:	6030      	str	r0, [r6, #0]
 800e966:	4620      	mov	r0, r4
 800e968:	b002      	add	sp, #8
 800e96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e96e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e972:	e7d6      	b.n	800e922 <__d2b+0x2e>
 800e974:	6161      	str	r1, [r4, #20]
 800e976:	e7e7      	b.n	800e948 <__d2b+0x54>
 800e978:	a801      	add	r0, sp, #4
 800e97a:	f7ff fcfd 	bl	800e378 <__lo0bits>
 800e97e:	2101      	movs	r1, #1
 800e980:	9b01      	ldr	r3, [sp, #4]
 800e982:	6121      	str	r1, [r4, #16]
 800e984:	6163      	str	r3, [r4, #20]
 800e986:	3020      	adds	r0, #32
 800e988:	e7e5      	b.n	800e956 <__d2b+0x62>
 800e98a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e98e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e992:	6038      	str	r0, [r7, #0]
 800e994:	6918      	ldr	r0, [r3, #16]
 800e996:	f7ff fccf 	bl	800e338 <__hi0bits>
 800e99a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e99e:	6031      	str	r1, [r6, #0]
 800e9a0:	e7e1      	b.n	800e966 <__d2b+0x72>
 800e9a2:	bf00      	nop
 800e9a4:	08034ca9 	.word	0x08034ca9
 800e9a8:	08034d84 	.word	0x08034d84

0800e9ac <__ratio>:
 800e9ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b0:	4688      	mov	r8, r1
 800e9b2:	4669      	mov	r1, sp
 800e9b4:	4681      	mov	r9, r0
 800e9b6:	f7ff ff49 	bl	800e84c <__b2d>
 800e9ba:	460f      	mov	r7, r1
 800e9bc:	4604      	mov	r4, r0
 800e9be:	460d      	mov	r5, r1
 800e9c0:	4640      	mov	r0, r8
 800e9c2:	a901      	add	r1, sp, #4
 800e9c4:	f7ff ff42 	bl	800e84c <__b2d>
 800e9c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e9d0:	468b      	mov	fp, r1
 800e9d2:	eba3 0c02 	sub.w	ip, r3, r2
 800e9d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e9da:	1a9b      	subs	r3, r3, r2
 800e9dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	bfd5      	itete	le
 800e9e4:	460a      	movle	r2, r1
 800e9e6:	462a      	movgt	r2, r5
 800e9e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e9ec:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e9f0:	bfd8      	it	le
 800e9f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e9f6:	465b      	mov	r3, fp
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	4639      	mov	r1, r7
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f7f1 ff01 	bl	8000804 <__aeabi_ddiv>
 800ea02:	b003      	add	sp, #12
 800ea04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea08 <__copybits>:
 800ea08:	3901      	subs	r1, #1
 800ea0a:	b570      	push	{r4, r5, r6, lr}
 800ea0c:	1149      	asrs	r1, r1, #5
 800ea0e:	6914      	ldr	r4, [r2, #16]
 800ea10:	3101      	adds	r1, #1
 800ea12:	f102 0314 	add.w	r3, r2, #20
 800ea16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea1e:	1f05      	subs	r5, r0, #4
 800ea20:	42a3      	cmp	r3, r4
 800ea22:	d30c      	bcc.n	800ea3e <__copybits+0x36>
 800ea24:	1aa3      	subs	r3, r4, r2
 800ea26:	3b11      	subs	r3, #17
 800ea28:	f023 0303 	bic.w	r3, r3, #3
 800ea2c:	3211      	adds	r2, #17
 800ea2e:	42a2      	cmp	r2, r4
 800ea30:	bf88      	it	hi
 800ea32:	2300      	movhi	r3, #0
 800ea34:	4418      	add	r0, r3
 800ea36:	2300      	movs	r3, #0
 800ea38:	4288      	cmp	r0, r1
 800ea3a:	d305      	bcc.n	800ea48 <__copybits+0x40>
 800ea3c:	bd70      	pop	{r4, r5, r6, pc}
 800ea3e:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea42:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea46:	e7eb      	b.n	800ea20 <__copybits+0x18>
 800ea48:	f840 3b04 	str.w	r3, [r0], #4
 800ea4c:	e7f4      	b.n	800ea38 <__copybits+0x30>

0800ea4e <__any_on>:
 800ea4e:	f100 0214 	add.w	r2, r0, #20
 800ea52:	6900      	ldr	r0, [r0, #16]
 800ea54:	114b      	asrs	r3, r1, #5
 800ea56:	4298      	cmp	r0, r3
 800ea58:	b510      	push	{r4, lr}
 800ea5a:	db11      	blt.n	800ea80 <__any_on+0x32>
 800ea5c:	dd0a      	ble.n	800ea74 <__any_on+0x26>
 800ea5e:	f011 011f 	ands.w	r1, r1, #31
 800ea62:	d007      	beq.n	800ea74 <__any_on+0x26>
 800ea64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea68:	fa24 f001 	lsr.w	r0, r4, r1
 800ea6c:	fa00 f101 	lsl.w	r1, r0, r1
 800ea70:	428c      	cmp	r4, r1
 800ea72:	d10b      	bne.n	800ea8c <__any_on+0x3e>
 800ea74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d803      	bhi.n	800ea84 <__any_on+0x36>
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	bd10      	pop	{r4, pc}
 800ea80:	4603      	mov	r3, r0
 800ea82:	e7f7      	b.n	800ea74 <__any_on+0x26>
 800ea84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea88:	2900      	cmp	r1, #0
 800ea8a:	d0f5      	beq.n	800ea78 <__any_on+0x2a>
 800ea8c:	2001      	movs	r0, #1
 800ea8e:	e7f6      	b.n	800ea7e <__any_on+0x30>

0800ea90 <frexp>:
 800ea90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea92:	4617      	mov	r7, r2
 800ea94:	2200      	movs	r2, #0
 800ea96:	603a      	str	r2, [r7, #0]
 800ea98:	4a14      	ldr	r2, [pc, #80]	; (800eaec <frexp+0x5c>)
 800ea9a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ea9e:	4296      	cmp	r6, r2
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	460d      	mov	r5, r1
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	dc1e      	bgt.n	800eae6 <frexp+0x56>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	4332      	orrs	r2, r6
 800eaac:	d01b      	beq.n	800eae6 <frexp+0x56>
 800eaae:	4a10      	ldr	r2, [pc, #64]	; (800eaf0 <frexp+0x60>)
 800eab0:	400a      	ands	r2, r1
 800eab2:	b952      	cbnz	r2, 800eaca <frexp+0x3a>
 800eab4:	2200      	movs	r2, #0
 800eab6:	4b0f      	ldr	r3, [pc, #60]	; (800eaf4 <frexp+0x64>)
 800eab8:	f7f1 fd7a 	bl	80005b0 <__aeabi_dmul>
 800eabc:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800eac0:	4604      	mov	r4, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eac8:	603a      	str	r2, [r7, #0]
 800eaca:	683a      	ldr	r2, [r7, #0]
 800eacc:	1536      	asrs	r6, r6, #20
 800eace:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ead2:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 800ead6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eada:	4416      	add	r6, r2
 800eadc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800eae0:	603e      	str	r6, [r7, #0]
 800eae2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800eae6:	4620      	mov	r0, r4
 800eae8:	4629      	mov	r1, r5
 800eaea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaec:	7fefffff 	.word	0x7fefffff
 800eaf0:	7ff00000 	.word	0x7ff00000
 800eaf4:	43500000 	.word	0x43500000

0800eaf8 <nan>:
 800eaf8:	2000      	movs	r0, #0
 800eafa:	4901      	ldr	r1, [pc, #4]	; (800eb00 <nan+0x8>)
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	7ff80000 	.word	0x7ff80000

0800eb04 <strncmp>:
 800eb04:	4603      	mov	r3, r0
 800eb06:	b510      	push	{r4, lr}
 800eb08:	b172      	cbz	r2, 800eb28 <strncmp+0x24>
 800eb0a:	3901      	subs	r1, #1
 800eb0c:	1884      	adds	r4, r0, r2
 800eb0e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eb16:	4290      	cmp	r0, r2
 800eb18:	d101      	bne.n	800eb1e <strncmp+0x1a>
 800eb1a:	42a3      	cmp	r3, r4
 800eb1c:	d101      	bne.n	800eb22 <strncmp+0x1e>
 800eb1e:	1a80      	subs	r0, r0, r2
 800eb20:	bd10      	pop	{r4, pc}
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d1f3      	bne.n	800eb0e <strncmp+0xa>
 800eb26:	e7fa      	b.n	800eb1e <strncmp+0x1a>
 800eb28:	4610      	mov	r0, r2
 800eb2a:	e7f9      	b.n	800eb20 <strncmp+0x1c>

0800eb2c <strncpy>:
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	b510      	push	{r4, lr}
 800eb30:	3901      	subs	r1, #1
 800eb32:	b132      	cbz	r2, 800eb42 <strncpy+0x16>
 800eb34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb38:	3a01      	subs	r2, #1
 800eb3a:	f803 4b01 	strb.w	r4, [r3], #1
 800eb3e:	2c00      	cmp	r4, #0
 800eb40:	d1f7      	bne.n	800eb32 <strncpy+0x6>
 800eb42:	2100      	movs	r1, #0
 800eb44:	441a      	add	r2, r3
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d100      	bne.n	800eb4c <strncpy+0x20>
 800eb4a:	bd10      	pop	{r4, pc}
 800eb4c:	f803 1b01 	strb.w	r1, [r3], #1
 800eb50:	e7f9      	b.n	800eb46 <strncpy+0x1a>

0800eb52 <__ssprint_r>:
 800eb52:	6893      	ldr	r3, [r2, #8]
 800eb54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb58:	4680      	mov	r8, r0
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	4617      	mov	r7, r2
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d061      	beq.n	800ec26 <__ssprint_r+0xd4>
 800eb62:	2300      	movs	r3, #0
 800eb64:	469b      	mov	fp, r3
 800eb66:	f8d2 a000 	ldr.w	sl, [r2]
 800eb6a:	9301      	str	r3, [sp, #4]
 800eb6c:	f1bb 0f00 	cmp.w	fp, #0
 800eb70:	d02b      	beq.n	800ebca <__ssprint_r+0x78>
 800eb72:	68a6      	ldr	r6, [r4, #8]
 800eb74:	455e      	cmp	r6, fp
 800eb76:	d844      	bhi.n	800ec02 <__ssprint_r+0xb0>
 800eb78:	89a2      	ldrh	r2, [r4, #12]
 800eb7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb7e:	d03e      	beq.n	800ebfe <__ssprint_r+0xac>
 800eb80:	6820      	ldr	r0, [r4, #0]
 800eb82:	6921      	ldr	r1, [r4, #16]
 800eb84:	6965      	ldr	r5, [r4, #20]
 800eb86:	eba0 0901 	sub.w	r9, r0, r1
 800eb8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb92:	f109 0001 	add.w	r0, r9, #1
 800eb96:	106d      	asrs	r5, r5, #1
 800eb98:	4458      	add	r0, fp
 800eb9a:	4285      	cmp	r5, r0
 800eb9c:	bf38      	it	cc
 800eb9e:	4605      	movcc	r5, r0
 800eba0:	0553      	lsls	r3, r2, #21
 800eba2:	d545      	bpl.n	800ec30 <__ssprint_r+0xde>
 800eba4:	4629      	mov	r1, r5
 800eba6:	4640      	mov	r0, r8
 800eba8:	f7fa ff0a 	bl	80099c0 <_malloc_r>
 800ebac:	4606      	mov	r6, r0
 800ebae:	b9a0      	cbnz	r0, 800ebda <__ssprint_r+0x88>
 800ebb0:	230c      	movs	r3, #12
 800ebb2:	f8c8 3000 	str.w	r3, [r8]
 800ebb6:	89a3      	ldrh	r3, [r4, #12]
 800ebb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebc0:	81a3      	strh	r3, [r4, #12]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800ebc8:	e02f      	b.n	800ec2a <__ssprint_r+0xd8>
 800ebca:	f8da 3000 	ldr.w	r3, [sl]
 800ebce:	f8da b004 	ldr.w	fp, [sl, #4]
 800ebd2:	9301      	str	r3, [sp, #4]
 800ebd4:	f10a 0a08 	add.w	sl, sl, #8
 800ebd8:	e7c8      	b.n	800eb6c <__ssprint_r+0x1a>
 800ebda:	464a      	mov	r2, r9
 800ebdc:	6921      	ldr	r1, [r4, #16]
 800ebde:	f7ff fac5 	bl	800e16c <memcpy>
 800ebe2:	89a2      	ldrh	r2, [r4, #12]
 800ebe4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ebe8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ebec:	81a2      	strh	r2, [r4, #12]
 800ebee:	6126      	str	r6, [r4, #16]
 800ebf0:	444e      	add	r6, r9
 800ebf2:	6026      	str	r6, [r4, #0]
 800ebf4:	465e      	mov	r6, fp
 800ebf6:	6165      	str	r5, [r4, #20]
 800ebf8:	eba5 0509 	sub.w	r5, r5, r9
 800ebfc:	60a5      	str	r5, [r4, #8]
 800ebfe:	455e      	cmp	r6, fp
 800ec00:	d900      	bls.n	800ec04 <__ssprint_r+0xb2>
 800ec02:	465e      	mov	r6, fp
 800ec04:	4632      	mov	r2, r6
 800ec06:	9901      	ldr	r1, [sp, #4]
 800ec08:	6820      	ldr	r0, [r4, #0]
 800ec0a:	f7ff fabd 	bl	800e188 <memmove>
 800ec0e:	68a2      	ldr	r2, [r4, #8]
 800ec10:	1b92      	subs	r2, r2, r6
 800ec12:	60a2      	str	r2, [r4, #8]
 800ec14:	6822      	ldr	r2, [r4, #0]
 800ec16:	4432      	add	r2, r6
 800ec18:	6022      	str	r2, [r4, #0]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	eba2 030b 	sub.w	r3, r2, fp
 800ec20:	60bb      	str	r3, [r7, #8]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d1d1      	bne.n	800ebca <__ssprint_r+0x78>
 800ec26:	2000      	movs	r0, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	b003      	add	sp, #12
 800ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec30:	462a      	mov	r2, r5
 800ec32:	4640      	mov	r0, r8
 800ec34:	f7fb f952 	bl	8009edc <_realloc_r>
 800ec38:	4606      	mov	r6, r0
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	d1d7      	bne.n	800ebee <__ssprint_r+0x9c>
 800ec3e:	4640      	mov	r0, r8
 800ec40:	6921      	ldr	r1, [r4, #16]
 800ec42:	f7fe fe3f 	bl	800d8c4 <_free_r>
 800ec46:	e7b3      	b.n	800ebb0 <__ssprint_r+0x5e>

0800ec48 <__assert_func>:
 800ec48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec4a:	4614      	mov	r4, r2
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4b09      	ldr	r3, [pc, #36]	; (800ec74 <__assert_func+0x2c>)
 800ec50:	4605      	mov	r5, r0
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68d8      	ldr	r0, [r3, #12]
 800ec56:	b14c      	cbz	r4, 800ec6c <__assert_func+0x24>
 800ec58:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <__assert_func+0x30>)
 800ec5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec5e:	9100      	str	r1, [sp, #0]
 800ec60:	462b      	mov	r3, r5
 800ec62:	4906      	ldr	r1, [pc, #24]	; (800ec7c <__assert_func+0x34>)
 800ec64:	f000 f89a 	bl	800ed9c <fiprintf>
 800ec68:	f000 fe02 	bl	800f870 <abort>
 800ec6c:	4b04      	ldr	r3, [pc, #16]	; (800ec80 <__assert_func+0x38>)
 800ec6e:	461c      	mov	r4, r3
 800ec70:	e7f3      	b.n	800ec5a <__assert_func+0x12>
 800ec72:	bf00      	nop
 800ec74:	20000048 	.word	0x20000048
 800ec78:	08034edc 	.word	0x08034edc
 800ec7c:	08034ee9 	.word	0x08034ee9
 800ec80:	08034f17 	.word	0x08034f17

0800ec84 <_calloc_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	fba1 1502 	umull	r1, r5, r1, r2
 800ec8a:	b92d      	cbnz	r5, 800ec98 <_calloc_r+0x14>
 800ec8c:	f7fa fe98 	bl	80099c0 <_malloc_r>
 800ec90:	4604      	mov	r4, r0
 800ec92:	b938      	cbnz	r0, 800eca4 <_calloc_r+0x20>
 800ec94:	4620      	mov	r0, r4
 800ec96:	bd38      	pop	{r3, r4, r5, pc}
 800ec98:	f7f9 fbfa 	bl	8008490 <__errno>
 800ec9c:	230c      	movs	r3, #12
 800ec9e:	2400      	movs	r4, #0
 800eca0:	6003      	str	r3, [r0, #0]
 800eca2:	e7f7      	b.n	800ec94 <_calloc_r+0x10>
 800eca4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800eca8:	f022 0203 	bic.w	r2, r2, #3
 800ecac:	3a04      	subs	r2, #4
 800ecae:	2a24      	cmp	r2, #36	; 0x24
 800ecb0:	d819      	bhi.n	800ece6 <_calloc_r+0x62>
 800ecb2:	2a13      	cmp	r2, #19
 800ecb4:	d915      	bls.n	800ece2 <_calloc_r+0x5e>
 800ecb6:	2a1b      	cmp	r2, #27
 800ecb8:	e9c0 5500 	strd	r5, r5, [r0]
 800ecbc:	d806      	bhi.n	800eccc <_calloc_r+0x48>
 800ecbe:	f100 0308 	add.w	r3, r0, #8
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	e9c3 2200 	strd	r2, r2, [r3]
 800ecc8:	609a      	str	r2, [r3, #8]
 800ecca:	e7e3      	b.n	800ec94 <_calloc_r+0x10>
 800eccc:	2a24      	cmp	r2, #36	; 0x24
 800ecce:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800ecd2:	bf11      	iteee	ne
 800ecd4:	f100 0310 	addne.w	r3, r0, #16
 800ecd8:	6105      	streq	r5, [r0, #16]
 800ecda:	f100 0318 	addeq.w	r3, r0, #24
 800ecde:	6145      	streq	r5, [r0, #20]
 800ece0:	e7ef      	b.n	800ecc2 <_calloc_r+0x3e>
 800ece2:	4603      	mov	r3, r0
 800ece4:	e7ed      	b.n	800ecc2 <_calloc_r+0x3e>
 800ece6:	4629      	mov	r1, r5
 800ece8:	f7f9 fbfc 	bl	80084e4 <memset>
 800ecec:	e7d2      	b.n	800ec94 <_calloc_r+0x10>

0800ecee <_fclose_r>:
 800ecee:	b570      	push	{r4, r5, r6, lr}
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	460c      	mov	r4, r1
 800ecf4:	b911      	cbnz	r1, 800ecfc <_fclose_r+0xe>
 800ecf6:	2500      	movs	r5, #0
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	bd70      	pop	{r4, r5, r6, pc}
 800ecfc:	b118      	cbz	r0, 800ed06 <_fclose_r+0x18>
 800ecfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ed00:	b90b      	cbnz	r3, 800ed06 <_fclose_r+0x18>
 800ed02:	f7fe fd63 	bl	800d7cc <__sinit>
 800ed06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed08:	07d8      	lsls	r0, r3, #31
 800ed0a:	d405      	bmi.n	800ed18 <_fclose_r+0x2a>
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	0599      	lsls	r1, r3, #22
 800ed10:	d402      	bmi.n	800ed18 <_fclose_r+0x2a>
 800ed12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed14:	f7fa fe30 	bl	8009978 <__retarget_lock_acquire_recursive>
 800ed18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed1c:	b93b      	cbnz	r3, 800ed2e <_fclose_r+0x40>
 800ed1e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ed20:	f015 0501 	ands.w	r5, r5, #1
 800ed24:	d1e7      	bne.n	800ecf6 <_fclose_r+0x8>
 800ed26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed28:	f7fa fe27 	bl	800997a <__retarget_lock_release_recursive>
 800ed2c:	e7e4      	b.n	800ecf8 <_fclose_r+0xa>
 800ed2e:	4621      	mov	r1, r4
 800ed30:	4630      	mov	r0, r6
 800ed32:	f7fe fc55 	bl	800d5e0 <__sflush_r>
 800ed36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ed38:	4605      	mov	r5, r0
 800ed3a:	b133      	cbz	r3, 800ed4a <_fclose_r+0x5c>
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	69e1      	ldr	r1, [r4, #28]
 800ed40:	4798      	blx	r3
 800ed42:	2800      	cmp	r0, #0
 800ed44:	bfb8      	it	lt
 800ed46:	f04f 35ff 	movlt.w	r5, #4294967295
 800ed4a:	89a3      	ldrh	r3, [r4, #12]
 800ed4c:	061a      	lsls	r2, r3, #24
 800ed4e:	d503      	bpl.n	800ed58 <_fclose_r+0x6a>
 800ed50:	4630      	mov	r0, r6
 800ed52:	6921      	ldr	r1, [r4, #16]
 800ed54:	f7fe fdb6 	bl	800d8c4 <_free_r>
 800ed58:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ed5a:	b141      	cbz	r1, 800ed6e <_fclose_r+0x80>
 800ed5c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ed60:	4299      	cmp	r1, r3
 800ed62:	d002      	beq.n	800ed6a <_fclose_r+0x7c>
 800ed64:	4630      	mov	r0, r6
 800ed66:	f7fe fdad 	bl	800d8c4 <_free_r>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	6323      	str	r3, [r4, #48]	; 0x30
 800ed6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ed70:	b121      	cbz	r1, 800ed7c <_fclose_r+0x8e>
 800ed72:	4630      	mov	r0, r6
 800ed74:	f7fe fda6 	bl	800d8c4 <_free_r>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	6463      	str	r3, [r4, #68]	; 0x44
 800ed7c:	f7fe fd0e 	bl	800d79c <__sfp_lock_acquire>
 800ed80:	2300      	movs	r3, #0
 800ed82:	81a3      	strh	r3, [r4, #12]
 800ed84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed86:	07db      	lsls	r3, r3, #31
 800ed88:	d402      	bmi.n	800ed90 <_fclose_r+0xa2>
 800ed8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed8c:	f7fa fdf5 	bl	800997a <__retarget_lock_release_recursive>
 800ed90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed92:	f7fa fdf0 	bl	8009976 <__retarget_lock_close_recursive>
 800ed96:	f7fe fd07 	bl	800d7a8 <__sfp_lock_release>
 800ed9a:	e7ad      	b.n	800ecf8 <_fclose_r+0xa>

0800ed9c <fiprintf>:
 800ed9c:	b40e      	push	{r1, r2, r3}
 800ed9e:	b503      	push	{r0, r1, lr}
 800eda0:	4601      	mov	r1, r0
 800eda2:	ab03      	add	r3, sp, #12
 800eda4:	4805      	ldr	r0, [pc, #20]	; (800edbc <fiprintf+0x20>)
 800eda6:	f853 2b04 	ldr.w	r2, [r3], #4
 800edaa:	6800      	ldr	r0, [r0, #0]
 800edac:	9301      	str	r3, [sp, #4]
 800edae:	f000 f839 	bl	800ee24 <_vfiprintf_r>
 800edb2:	b002      	add	sp, #8
 800edb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800edb8:	b003      	add	sp, #12
 800edba:	4770      	bx	lr
 800edbc:	20000048 	.word	0x20000048

0800edc0 <__sprint_r>:
 800edc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc4:	6893      	ldr	r3, [r2, #8]
 800edc6:	4680      	mov	r8, r0
 800edc8:	460f      	mov	r7, r1
 800edca:	4614      	mov	r4, r2
 800edcc:	b91b      	cbnz	r3, 800edd6 <__sprint_r+0x16>
 800edce:	4618      	mov	r0, r3
 800edd0:	6053      	str	r3, [r2, #4]
 800edd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800edd8:	049d      	lsls	r5, r3, #18
 800edda:	d520      	bpl.n	800ee1e <__sprint_r+0x5e>
 800eddc:	6815      	ldr	r5, [r2, #0]
 800edde:	3508      	adds	r5, #8
 800ede0:	f04f 0900 	mov.w	r9, #0
 800ede4:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800ede8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800edec:	45ca      	cmp	sl, r9
 800edee:	dc0b      	bgt.n	800ee08 <__sprint_r+0x48>
 800edf0:	68a0      	ldr	r0, [r4, #8]
 800edf2:	f026 0603 	bic.w	r6, r6, #3
 800edf6:	1b80      	subs	r0, r0, r6
 800edf8:	60a0      	str	r0, [r4, #8]
 800edfa:	3508      	adds	r5, #8
 800edfc:	2800      	cmp	r0, #0
 800edfe:	d1ef      	bne.n	800ede0 <__sprint_r+0x20>
 800ee00:	2300      	movs	r3, #0
 800ee02:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800ee06:	e7e4      	b.n	800edd2 <__sprint_r+0x12>
 800ee08:	463a      	mov	r2, r7
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800ee10:	f000 fd76 	bl	800f900 <_fputwc_r>
 800ee14:	1c43      	adds	r3, r0, #1
 800ee16:	d0f3      	beq.n	800ee00 <__sprint_r+0x40>
 800ee18:	f109 0901 	add.w	r9, r9, #1
 800ee1c:	e7e6      	b.n	800edec <__sprint_r+0x2c>
 800ee1e:	f000 fd99 	bl	800f954 <__sfvwrite_r>
 800ee22:	e7ed      	b.n	800ee00 <__sprint_r+0x40>

0800ee24 <_vfiprintf_r>:
 800ee24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee28:	b0bb      	sub	sp, #236	; 0xec
 800ee2a:	460f      	mov	r7, r1
 800ee2c:	461d      	mov	r5, r3
 800ee2e:	461c      	mov	r4, r3
 800ee30:	4681      	mov	r9, r0
 800ee32:	9202      	str	r2, [sp, #8]
 800ee34:	b118      	cbz	r0, 800ee3e <_vfiprintf_r+0x1a>
 800ee36:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ee38:	b90b      	cbnz	r3, 800ee3e <_vfiprintf_r+0x1a>
 800ee3a:	f7fe fcc7 	bl	800d7cc <__sinit>
 800ee3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee40:	07d8      	lsls	r0, r3, #31
 800ee42:	d405      	bmi.n	800ee50 <_vfiprintf_r+0x2c>
 800ee44:	89bb      	ldrh	r3, [r7, #12]
 800ee46:	0599      	lsls	r1, r3, #22
 800ee48:	d402      	bmi.n	800ee50 <_vfiprintf_r+0x2c>
 800ee4a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ee4c:	f7fa fd94 	bl	8009978 <__retarget_lock_acquire_recursive>
 800ee50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ee54:	049a      	lsls	r2, r3, #18
 800ee56:	d406      	bmi.n	800ee66 <_vfiprintf_r+0x42>
 800ee58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ee5c:	81bb      	strh	r3, [r7, #12]
 800ee5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee64:	667b      	str	r3, [r7, #100]	; 0x64
 800ee66:	89bb      	ldrh	r3, [r7, #12]
 800ee68:	071e      	lsls	r6, r3, #28
 800ee6a:	d501      	bpl.n	800ee70 <_vfiprintf_r+0x4c>
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	b9ab      	cbnz	r3, 800ee9c <_vfiprintf_r+0x78>
 800ee70:	4639      	mov	r1, r7
 800ee72:	4648      	mov	r0, r9
 800ee74:	f000 fca4 	bl	800f7c0 <__swsetup_r>
 800ee78:	b180      	cbz	r0, 800ee9c <_vfiprintf_r+0x78>
 800ee7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee7c:	07d8      	lsls	r0, r3, #31
 800ee7e:	d506      	bpl.n	800ee8e <_vfiprintf_r+0x6a>
 800ee80:	f04f 33ff 	mov.w	r3, #4294967295
 800ee84:	9303      	str	r3, [sp, #12]
 800ee86:	9803      	ldr	r0, [sp, #12]
 800ee88:	b03b      	add	sp, #236	; 0xec
 800ee8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8e:	89bb      	ldrh	r3, [r7, #12]
 800ee90:	0599      	lsls	r1, r3, #22
 800ee92:	d4f5      	bmi.n	800ee80 <_vfiprintf_r+0x5c>
 800ee94:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ee96:	f7fa fd70 	bl	800997a <__retarget_lock_release_recursive>
 800ee9a:	e7f1      	b.n	800ee80 <_vfiprintf_r+0x5c>
 800ee9c:	89bb      	ldrh	r3, [r7, #12]
 800ee9e:	f003 021a 	and.w	r2, r3, #26
 800eea2:	2a0a      	cmp	r2, #10
 800eea4:	d114      	bne.n	800eed0 <_vfiprintf_r+0xac>
 800eea6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800eeaa:	2a00      	cmp	r2, #0
 800eeac:	db10      	blt.n	800eed0 <_vfiprintf_r+0xac>
 800eeae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eeb0:	07d2      	lsls	r2, r2, #31
 800eeb2:	d404      	bmi.n	800eebe <_vfiprintf_r+0x9a>
 800eeb4:	059e      	lsls	r6, r3, #22
 800eeb6:	d402      	bmi.n	800eebe <_vfiprintf_r+0x9a>
 800eeb8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eeba:	f7fa fd5e 	bl	800997a <__retarget_lock_release_recursive>
 800eebe:	462b      	mov	r3, r5
 800eec0:	4639      	mov	r1, r7
 800eec2:	4648      	mov	r0, r9
 800eec4:	9a02      	ldr	r2, [sp, #8]
 800eec6:	b03b      	add	sp, #236	; 0xec
 800eec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	f000 bc38 	b.w	800f740 <__sbprintf>
 800eed0:	2300      	movs	r3, #0
 800eed2:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800eed6:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800eeda:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800eede:	ae11      	add	r6, sp, #68	; 0x44
 800eee0:	960e      	str	r6, [sp, #56]	; 0x38
 800eee2:	9303      	str	r3, [sp, #12]
 800eee4:	9b02      	ldr	r3, [sp, #8]
 800eee6:	461d      	mov	r5, r3
 800eee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeec:	b10a      	cbz	r2, 800eef2 <_vfiprintf_r+0xce>
 800eeee:	2a25      	cmp	r2, #37	; 0x25
 800eef0:	d1f9      	bne.n	800eee6 <_vfiprintf_r+0xc2>
 800eef2:	9b02      	ldr	r3, [sp, #8]
 800eef4:	ebb5 0803 	subs.w	r8, r5, r3
 800eef8:	d00d      	beq.n	800ef16 <_vfiprintf_r+0xf2>
 800eefa:	e9c6 3800 	strd	r3, r8, [r6]
 800eefe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef00:	4443      	add	r3, r8
 800ef02:	9310      	str	r3, [sp, #64]	; 0x40
 800ef04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef06:	3301      	adds	r3, #1
 800ef08:	2b07      	cmp	r3, #7
 800ef0a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef0c:	dc75      	bgt.n	800effa <_vfiprintf_r+0x1d6>
 800ef0e:	3608      	adds	r6, #8
 800ef10:	9b03      	ldr	r3, [sp, #12]
 800ef12:	4443      	add	r3, r8
 800ef14:	9303      	str	r3, [sp, #12]
 800ef16:	782b      	ldrb	r3, [r5, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f000 83d5 	beq.w	800f6c8 <_vfiprintf_r+0x8a4>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	f04f 31ff 	mov.w	r1, #4294967295
 800ef24:	469a      	mov	sl, r3
 800ef26:	1c6a      	adds	r2, r5, #1
 800ef28:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800ef2c:	9101      	str	r1, [sp, #4]
 800ef2e:	9304      	str	r3, [sp, #16]
 800ef30:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ef34:	9202      	str	r2, [sp, #8]
 800ef36:	f1a3 0220 	sub.w	r2, r3, #32
 800ef3a:	2a5a      	cmp	r2, #90	; 0x5a
 800ef3c:	f200 831d 	bhi.w	800f57a <_vfiprintf_r+0x756>
 800ef40:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ef44:	031b009a 	.word	0x031b009a
 800ef48:	00a2031b 	.word	0x00a2031b
 800ef4c:	031b031b 	.word	0x031b031b
 800ef50:	0082031b 	.word	0x0082031b
 800ef54:	031b031b 	.word	0x031b031b
 800ef58:	00af00a5 	.word	0x00af00a5
 800ef5c:	00ac031b 	.word	0x00ac031b
 800ef60:	031b00b1 	.word	0x031b00b1
 800ef64:	00cf00cc 	.word	0x00cf00cc
 800ef68:	00cf00cf 	.word	0x00cf00cf
 800ef6c:	00cf00cf 	.word	0x00cf00cf
 800ef70:	00cf00cf 	.word	0x00cf00cf
 800ef74:	00cf00cf 	.word	0x00cf00cf
 800ef78:	031b031b 	.word	0x031b031b
 800ef7c:	031b031b 	.word	0x031b031b
 800ef80:	031b031b 	.word	0x031b031b
 800ef84:	031b031b 	.word	0x031b031b
 800ef88:	00f9031b 	.word	0x00f9031b
 800ef8c:	031b0107 	.word	0x031b0107
 800ef90:	031b031b 	.word	0x031b031b
 800ef94:	031b031b 	.word	0x031b031b
 800ef98:	031b031b 	.word	0x031b031b
 800ef9c:	031b031b 	.word	0x031b031b
 800efa0:	0156031b 	.word	0x0156031b
 800efa4:	031b031b 	.word	0x031b031b
 800efa8:	01a0031b 	.word	0x01a0031b
 800efac:	027d031b 	.word	0x027d031b
 800efb0:	031b031b 	.word	0x031b031b
 800efb4:	031b029d 	.word	0x031b029d
 800efb8:	031b031b 	.word	0x031b031b
 800efbc:	031b031b 	.word	0x031b031b
 800efc0:	031b031b 	.word	0x031b031b
 800efc4:	031b031b 	.word	0x031b031b
 800efc8:	00f9031b 	.word	0x00f9031b
 800efcc:	031b0109 	.word	0x031b0109
 800efd0:	031b031b 	.word	0x031b031b
 800efd4:	010900df 	.word	0x010900df
 800efd8:	031b00f3 	.word	0x031b00f3
 800efdc:	031b00ec 	.word	0x031b00ec
 800efe0:	01580134 	.word	0x01580134
 800efe4:	00f3018d 	.word	0x00f3018d
 800efe8:	01a0031b 	.word	0x01a0031b
 800efec:	027f0098 	.word	0x027f0098
 800eff0:	031b031b 	.word	0x031b031b
 800eff4:	031b0065 	.word	0x031b0065
 800eff8:	0098      	.short	0x0098
 800effa:	4639      	mov	r1, r7
 800effc:	4648      	mov	r0, r9
 800effe:	aa0e      	add	r2, sp, #56	; 0x38
 800f000:	f7ff fede 	bl	800edc0 <__sprint_r>
 800f004:	2800      	cmp	r0, #0
 800f006:	f040 833e 	bne.w	800f686 <_vfiprintf_r+0x862>
 800f00a:	ae11      	add	r6, sp, #68	; 0x44
 800f00c:	e780      	b.n	800ef10 <_vfiprintf_r+0xec>
 800f00e:	4a9c      	ldr	r2, [pc, #624]	; (800f280 <_vfiprintf_r+0x45c>)
 800f010:	9206      	str	r2, [sp, #24]
 800f012:	f01a 0220 	ands.w	r2, sl, #32
 800f016:	f000 8234 	beq.w	800f482 <_vfiprintf_r+0x65e>
 800f01a:	3407      	adds	r4, #7
 800f01c:	f024 0207 	bic.w	r2, r4, #7
 800f020:	4693      	mov	fp, r2
 800f022:	6855      	ldr	r5, [r2, #4]
 800f024:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f028:	f01a 0f01 	tst.w	sl, #1
 800f02c:	d009      	beq.n	800f042 <_vfiprintf_r+0x21e>
 800f02e:	ea54 0205 	orrs.w	r2, r4, r5
 800f032:	bf1f      	itttt	ne
 800f034:	2230      	movne	r2, #48	; 0x30
 800f036:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800f03a:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800f03e:	f04a 0a02 	orrne.w	sl, sl, #2
 800f042:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f046:	e118      	b.n	800f27a <_vfiprintf_r+0x456>
 800f048:	4648      	mov	r0, r9
 800f04a:	f7fa fc8f 	bl	800996c <_localeconv_r>
 800f04e:	6843      	ldr	r3, [r0, #4]
 800f050:	4618      	mov	r0, r3
 800f052:	9309      	str	r3, [sp, #36]	; 0x24
 800f054:	f7f1 f8e8 	bl	8000228 <strlen>
 800f058:	9008      	str	r0, [sp, #32]
 800f05a:	4648      	mov	r0, r9
 800f05c:	f7fa fc86 	bl	800996c <_localeconv_r>
 800f060:	6883      	ldr	r3, [r0, #8]
 800f062:	9307      	str	r3, [sp, #28]
 800f064:	9b08      	ldr	r3, [sp, #32]
 800f066:	b12b      	cbz	r3, 800f074 <_vfiprintf_r+0x250>
 800f068:	9b07      	ldr	r3, [sp, #28]
 800f06a:	b11b      	cbz	r3, 800f074 <_vfiprintf_r+0x250>
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	b10b      	cbz	r3, 800f074 <_vfiprintf_r+0x250>
 800f070:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800f074:	9a02      	ldr	r2, [sp, #8]
 800f076:	e75b      	b.n	800ef30 <_vfiprintf_r+0x10c>
 800f078:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d1f9      	bne.n	800f074 <_vfiprintf_r+0x250>
 800f080:	2320      	movs	r3, #32
 800f082:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f086:	e7f5      	b.n	800f074 <_vfiprintf_r+0x250>
 800f088:	f04a 0a01 	orr.w	sl, sl, #1
 800f08c:	e7f2      	b.n	800f074 <_vfiprintf_r+0x250>
 800f08e:	f854 3b04 	ldr.w	r3, [r4], #4
 800f092:	2b00      	cmp	r3, #0
 800f094:	9304      	str	r3, [sp, #16]
 800f096:	daed      	bge.n	800f074 <_vfiprintf_r+0x250>
 800f098:	425b      	negs	r3, r3
 800f09a:	9304      	str	r3, [sp, #16]
 800f09c:	f04a 0a04 	orr.w	sl, sl, #4
 800f0a0:	e7e8      	b.n	800f074 <_vfiprintf_r+0x250>
 800f0a2:	232b      	movs	r3, #43	; 0x2b
 800f0a4:	e7ed      	b.n	800f082 <_vfiprintf_r+0x25e>
 800f0a6:	9a02      	ldr	r2, [sp, #8]
 800f0a8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f0ae:	d112      	bne.n	800f0d6 <_vfiprintf_r+0x2b2>
 800f0b0:	f854 0b04 	ldr.w	r0, [r4], #4
 800f0b4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800f0b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f0bc:	e7da      	b.n	800f074 <_vfiprintf_r+0x250>
 800f0be:	200a      	movs	r0, #10
 800f0c0:	9b01      	ldr	r3, [sp, #4]
 800f0c2:	fb00 1303 	mla	r3, r0, r3, r1
 800f0c6:	9301      	str	r3, [sp, #4]
 800f0c8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f0cc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f0d0:	2909      	cmp	r1, #9
 800f0d2:	d9f4      	bls.n	800f0be <_vfiprintf_r+0x29a>
 800f0d4:	e72e      	b.n	800ef34 <_vfiprintf_r+0x110>
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	9101      	str	r1, [sp, #4]
 800f0da:	e7f7      	b.n	800f0cc <_vfiprintf_r+0x2a8>
 800f0dc:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800f0e0:	e7c8      	b.n	800f074 <_vfiprintf_r+0x250>
 800f0e2:	2100      	movs	r1, #0
 800f0e4:	9a02      	ldr	r2, [sp, #8]
 800f0e6:	9104      	str	r1, [sp, #16]
 800f0e8:	200a      	movs	r0, #10
 800f0ea:	9904      	ldr	r1, [sp, #16]
 800f0ec:	3b30      	subs	r3, #48	; 0x30
 800f0ee:	fb00 3301 	mla	r3, r0, r1, r3
 800f0f2:	9304      	str	r3, [sp, #16]
 800f0f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f0f8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f0fc:	2909      	cmp	r1, #9
 800f0fe:	d9f3      	bls.n	800f0e8 <_vfiprintf_r+0x2c4>
 800f100:	e718      	b.n	800ef34 <_vfiprintf_r+0x110>
 800f102:	9b02      	ldr	r3, [sp, #8]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	2b68      	cmp	r3, #104	; 0x68
 800f108:	bf01      	itttt	eq
 800f10a:	9b02      	ldreq	r3, [sp, #8]
 800f10c:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800f110:	3301      	addeq	r3, #1
 800f112:	9302      	streq	r3, [sp, #8]
 800f114:	bf18      	it	ne
 800f116:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800f11a:	e7ab      	b.n	800f074 <_vfiprintf_r+0x250>
 800f11c:	9b02      	ldr	r3, [sp, #8]
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	2b6c      	cmp	r3, #108	; 0x6c
 800f122:	d105      	bne.n	800f130 <_vfiprintf_r+0x30c>
 800f124:	9b02      	ldr	r3, [sp, #8]
 800f126:	3301      	adds	r3, #1
 800f128:	9302      	str	r3, [sp, #8]
 800f12a:	f04a 0a20 	orr.w	sl, sl, #32
 800f12e:	e7a1      	b.n	800f074 <_vfiprintf_r+0x250>
 800f130:	f04a 0a10 	orr.w	sl, sl, #16
 800f134:	e79e      	b.n	800f074 <_vfiprintf_r+0x250>
 800f136:	46a3      	mov	fp, r4
 800f138:	2100      	movs	r1, #0
 800f13a:	f85b 3b04 	ldr.w	r3, [fp], #4
 800f13e:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800f142:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800f146:	2301      	movs	r3, #1
 800f148:	460d      	mov	r5, r1
 800f14a:	9301      	str	r3, [sp, #4]
 800f14c:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 800f150:	e0ad      	b.n	800f2ae <_vfiprintf_r+0x48a>
 800f152:	f04a 0a10 	orr.w	sl, sl, #16
 800f156:	f01a 0f20 	tst.w	sl, #32
 800f15a:	d010      	beq.n	800f17e <_vfiprintf_r+0x35a>
 800f15c:	3407      	adds	r4, #7
 800f15e:	f024 0307 	bic.w	r3, r4, #7
 800f162:	469b      	mov	fp, r3
 800f164:	685d      	ldr	r5, [r3, #4]
 800f166:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f16a:	2d00      	cmp	r5, #0
 800f16c:	da05      	bge.n	800f17a <_vfiprintf_r+0x356>
 800f16e:	232d      	movs	r3, #45	; 0x2d
 800f170:	4264      	negs	r4, r4
 800f172:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800f176:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f17a:	2301      	movs	r3, #1
 800f17c:	e04a      	b.n	800f214 <_vfiprintf_r+0x3f0>
 800f17e:	46a3      	mov	fp, r4
 800f180:	f01a 0f10 	tst.w	sl, #16
 800f184:	f85b 5b04 	ldr.w	r5, [fp], #4
 800f188:	d002      	beq.n	800f190 <_vfiprintf_r+0x36c>
 800f18a:	462c      	mov	r4, r5
 800f18c:	17ed      	asrs	r5, r5, #31
 800f18e:	e7ec      	b.n	800f16a <_vfiprintf_r+0x346>
 800f190:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f194:	d003      	beq.n	800f19e <_vfiprintf_r+0x37a>
 800f196:	b22c      	sxth	r4, r5
 800f198:	f345 35c0 	sbfx	r5, r5, #15, #1
 800f19c:	e7e5      	b.n	800f16a <_vfiprintf_r+0x346>
 800f19e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f1a2:	d0f2      	beq.n	800f18a <_vfiprintf_r+0x366>
 800f1a4:	b26c      	sxtb	r4, r5
 800f1a6:	f345 15c0 	sbfx	r5, r5, #7, #1
 800f1aa:	e7de      	b.n	800f16a <_vfiprintf_r+0x346>
 800f1ac:	f01a 0f20 	tst.w	sl, #32
 800f1b0:	f104 0b04 	add.w	fp, r4, #4
 800f1b4:	d007      	beq.n	800f1c6 <_vfiprintf_r+0x3a2>
 800f1b6:	9a03      	ldr	r2, [sp, #12]
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	9903      	ldr	r1, [sp, #12]
 800f1bc:	17d2      	asrs	r2, r2, #31
 800f1be:	e9c3 1200 	strd	r1, r2, [r3]
 800f1c2:	465c      	mov	r4, fp
 800f1c4:	e68e      	b.n	800eee4 <_vfiprintf_r+0xc0>
 800f1c6:	f01a 0f10 	tst.w	sl, #16
 800f1ca:	d003      	beq.n	800f1d4 <_vfiprintf_r+0x3b0>
 800f1cc:	6823      	ldr	r3, [r4, #0]
 800f1ce:	9a03      	ldr	r2, [sp, #12]
 800f1d0:	601a      	str	r2, [r3, #0]
 800f1d2:	e7f6      	b.n	800f1c2 <_vfiprintf_r+0x39e>
 800f1d4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f1d8:	d003      	beq.n	800f1e2 <_vfiprintf_r+0x3be>
 800f1da:	6823      	ldr	r3, [r4, #0]
 800f1dc:	9a03      	ldr	r2, [sp, #12]
 800f1de:	801a      	strh	r2, [r3, #0]
 800f1e0:	e7ef      	b.n	800f1c2 <_vfiprintf_r+0x39e>
 800f1e2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f1e6:	d0f1      	beq.n	800f1cc <_vfiprintf_r+0x3a8>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	9a03      	ldr	r2, [sp, #12]
 800f1ec:	701a      	strb	r2, [r3, #0]
 800f1ee:	e7e8      	b.n	800f1c2 <_vfiprintf_r+0x39e>
 800f1f0:	f04a 0a10 	orr.w	sl, sl, #16
 800f1f4:	f01a 0320 	ands.w	r3, sl, #32
 800f1f8:	d01f      	beq.n	800f23a <_vfiprintf_r+0x416>
 800f1fa:	3407      	adds	r4, #7
 800f1fc:	f024 0307 	bic.w	r3, r4, #7
 800f200:	469b      	mov	fp, r3
 800f202:	685d      	ldr	r5, [r3, #4]
 800f204:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f208:	2300      	movs	r3, #0
 800f20a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f20e:	2200      	movs	r2, #0
 800f210:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800f214:	9a01      	ldr	r2, [sp, #4]
 800f216:	3201      	adds	r2, #1
 800f218:	f000 8263 	beq.w	800f6e2 <_vfiprintf_r+0x8be>
 800f21c:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800f220:	9205      	str	r2, [sp, #20]
 800f222:	ea54 0205 	orrs.w	r2, r4, r5
 800f226:	f040 8262 	bne.w	800f6ee <_vfiprintf_r+0x8ca>
 800f22a:	9a01      	ldr	r2, [sp, #4]
 800f22c:	2a00      	cmp	r2, #0
 800f22e:	f000 8199 	beq.w	800f564 <_vfiprintf_r+0x740>
 800f232:	2b01      	cmp	r3, #1
 800f234:	f040 825e 	bne.w	800f6f4 <_vfiprintf_r+0x8d0>
 800f238:	e13a      	b.n	800f4b0 <_vfiprintf_r+0x68c>
 800f23a:	46a3      	mov	fp, r4
 800f23c:	f01a 0510 	ands.w	r5, sl, #16
 800f240:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f244:	d001      	beq.n	800f24a <_vfiprintf_r+0x426>
 800f246:	461d      	mov	r5, r3
 800f248:	e7de      	b.n	800f208 <_vfiprintf_r+0x3e4>
 800f24a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f24e:	d001      	beq.n	800f254 <_vfiprintf_r+0x430>
 800f250:	b2a4      	uxth	r4, r4
 800f252:	e7d9      	b.n	800f208 <_vfiprintf_r+0x3e4>
 800f254:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f258:	d0d6      	beq.n	800f208 <_vfiprintf_r+0x3e4>
 800f25a:	b2e4      	uxtb	r4, r4
 800f25c:	e7f3      	b.n	800f246 <_vfiprintf_r+0x422>
 800f25e:	2330      	movs	r3, #48	; 0x30
 800f260:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800f264:	2378      	movs	r3, #120	; 0x78
 800f266:	46a3      	mov	fp, r4
 800f268:	2500      	movs	r5, #0
 800f26a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800f26e:	4b04      	ldr	r3, [pc, #16]	; (800f280 <_vfiprintf_r+0x45c>)
 800f270:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f274:	f04a 0a02 	orr.w	sl, sl, #2
 800f278:	9306      	str	r3, [sp, #24]
 800f27a:	2302      	movs	r3, #2
 800f27c:	e7c7      	b.n	800f20e <_vfiprintf_r+0x3ea>
 800f27e:	bf00      	nop
 800f280:	08034c58 	.word	0x08034c58
 800f284:	46a3      	mov	fp, r4
 800f286:	2500      	movs	r5, #0
 800f288:	9b01      	ldr	r3, [sp, #4]
 800f28a:	f85b 8b04 	ldr.w	r8, [fp], #4
 800f28e:	1c5c      	adds	r4, r3, #1
 800f290:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800f294:	f000 80ce 	beq.w	800f434 <_vfiprintf_r+0x610>
 800f298:	461a      	mov	r2, r3
 800f29a:	4629      	mov	r1, r5
 800f29c:	4640      	mov	r0, r8
 800f29e:	f7fe ff57 	bl	800e150 <memchr>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f000 8173 	beq.w	800f58e <_vfiprintf_r+0x76a>
 800f2a8:	eba0 0308 	sub.w	r3, r0, r8
 800f2ac:	9301      	str	r3, [sp, #4]
 800f2ae:	9b01      	ldr	r3, [sp, #4]
 800f2b0:	42ab      	cmp	r3, r5
 800f2b2:	bfb8      	it	lt
 800f2b4:	462b      	movlt	r3, r5
 800f2b6:	9305      	str	r3, [sp, #20]
 800f2b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f2bc:	b113      	cbz	r3, 800f2c4 <_vfiprintf_r+0x4a0>
 800f2be:	9b05      	ldr	r3, [sp, #20]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	9305      	str	r3, [sp, #20]
 800f2c4:	f01a 0302 	ands.w	r3, sl, #2
 800f2c8:	930a      	str	r3, [sp, #40]	; 0x28
 800f2ca:	bf1e      	ittt	ne
 800f2cc:	9b05      	ldrne	r3, [sp, #20]
 800f2ce:	3302      	addne	r3, #2
 800f2d0:	9305      	strne	r3, [sp, #20]
 800f2d2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800f2d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2d8:	d11f      	bne.n	800f31a <_vfiprintf_r+0x4f6>
 800f2da:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f2de:	1a9c      	subs	r4, r3, r2
 800f2e0:	2c00      	cmp	r4, #0
 800f2e2:	dd1a      	ble.n	800f31a <_vfiprintf_r+0x4f6>
 800f2e4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800f2e8:	48aa      	ldr	r0, [pc, #680]	; (800f594 <_vfiprintf_r+0x770>)
 800f2ea:	2c10      	cmp	r4, #16
 800f2ec:	f103 0301 	add.w	r3, r3, #1
 800f2f0:	f106 0108 	add.w	r1, r6, #8
 800f2f4:	6030      	str	r0, [r6, #0]
 800f2f6:	f300 8153 	bgt.w	800f5a0 <_vfiprintf_r+0x77c>
 800f2fa:	6074      	str	r4, [r6, #4]
 800f2fc:	2b07      	cmp	r3, #7
 800f2fe:	4414      	add	r4, r2
 800f300:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800f304:	f340 815e 	ble.w	800f5c4 <_vfiprintf_r+0x7a0>
 800f308:	4639      	mov	r1, r7
 800f30a:	4648      	mov	r0, r9
 800f30c:	aa0e      	add	r2, sp, #56	; 0x38
 800f30e:	f7ff fd57 	bl	800edc0 <__sprint_r>
 800f312:	2800      	cmp	r0, #0
 800f314:	f040 81b7 	bne.w	800f686 <_vfiprintf_r+0x862>
 800f318:	ae11      	add	r6, sp, #68	; 0x44
 800f31a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f31e:	b173      	cbz	r3, 800f33e <_vfiprintf_r+0x51a>
 800f320:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800f324:	6032      	str	r2, [r6, #0]
 800f326:	2201      	movs	r2, #1
 800f328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f32a:	6072      	str	r2, [r6, #4]
 800f32c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f32e:	3301      	adds	r3, #1
 800f330:	3201      	adds	r2, #1
 800f332:	2b07      	cmp	r3, #7
 800f334:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800f338:	f300 8146 	bgt.w	800f5c8 <_vfiprintf_r+0x7a4>
 800f33c:	3608      	adds	r6, #8
 800f33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f340:	b16b      	cbz	r3, 800f35e <_vfiprintf_r+0x53a>
 800f342:	aa0d      	add	r2, sp, #52	; 0x34
 800f344:	6032      	str	r2, [r6, #0]
 800f346:	2202      	movs	r2, #2
 800f348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f34a:	6072      	str	r2, [r6, #4]
 800f34c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f34e:	3301      	adds	r3, #1
 800f350:	3202      	adds	r2, #2
 800f352:	2b07      	cmp	r3, #7
 800f354:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800f358:	f300 813f 	bgt.w	800f5da <_vfiprintf_r+0x7b6>
 800f35c:	3608      	adds	r6, #8
 800f35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f360:	2b80      	cmp	r3, #128	; 0x80
 800f362:	d11f      	bne.n	800f3a4 <_vfiprintf_r+0x580>
 800f364:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f368:	1a9c      	subs	r4, r3, r2
 800f36a:	2c00      	cmp	r4, #0
 800f36c:	dd1a      	ble.n	800f3a4 <_vfiprintf_r+0x580>
 800f36e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800f372:	4889      	ldr	r0, [pc, #548]	; (800f598 <_vfiprintf_r+0x774>)
 800f374:	2c10      	cmp	r4, #16
 800f376:	f103 0301 	add.w	r3, r3, #1
 800f37a:	f106 0108 	add.w	r1, r6, #8
 800f37e:	6030      	str	r0, [r6, #0]
 800f380:	f300 8134 	bgt.w	800f5ec <_vfiprintf_r+0x7c8>
 800f384:	6074      	str	r4, [r6, #4]
 800f386:	2b07      	cmp	r3, #7
 800f388:	4414      	add	r4, r2
 800f38a:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800f38e:	f340 813f 	ble.w	800f610 <_vfiprintf_r+0x7ec>
 800f392:	4639      	mov	r1, r7
 800f394:	4648      	mov	r0, r9
 800f396:	aa0e      	add	r2, sp, #56	; 0x38
 800f398:	f7ff fd12 	bl	800edc0 <__sprint_r>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f040 8172 	bne.w	800f686 <_vfiprintf_r+0x862>
 800f3a2:	ae11      	add	r6, sp, #68	; 0x44
 800f3a4:	9b01      	ldr	r3, [sp, #4]
 800f3a6:	1aec      	subs	r4, r5, r3
 800f3a8:	2c00      	cmp	r4, #0
 800f3aa:	dd1a      	ble.n	800f3e2 <_vfiprintf_r+0x5be>
 800f3ac:	4d7a      	ldr	r5, [pc, #488]	; (800f598 <_vfiprintf_r+0x774>)
 800f3ae:	2c10      	cmp	r4, #16
 800f3b0:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 800f3b4:	f106 0208 	add.w	r2, r6, #8
 800f3b8:	f103 0301 	add.w	r3, r3, #1
 800f3bc:	6035      	str	r5, [r6, #0]
 800f3be:	f300 8129 	bgt.w	800f614 <_vfiprintf_r+0x7f0>
 800f3c2:	6074      	str	r4, [r6, #4]
 800f3c4:	2b07      	cmp	r3, #7
 800f3c6:	440c      	add	r4, r1
 800f3c8:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800f3cc:	f340 8133 	ble.w	800f636 <_vfiprintf_r+0x812>
 800f3d0:	4639      	mov	r1, r7
 800f3d2:	4648      	mov	r0, r9
 800f3d4:	aa0e      	add	r2, sp, #56	; 0x38
 800f3d6:	f7ff fcf3 	bl	800edc0 <__sprint_r>
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	f040 8153 	bne.w	800f686 <_vfiprintf_r+0x862>
 800f3e0:	ae11      	add	r6, sp, #68	; 0x44
 800f3e2:	9b01      	ldr	r3, [sp, #4]
 800f3e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f3e6:	6073      	str	r3, [r6, #4]
 800f3e8:	4418      	add	r0, r3
 800f3ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3ec:	f8c6 8000 	str.w	r8, [r6]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	2b07      	cmp	r3, #7
 800f3f4:	9010      	str	r0, [sp, #64]	; 0x40
 800f3f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3f8:	f300 811f 	bgt.w	800f63a <_vfiprintf_r+0x816>
 800f3fc:	f106 0308 	add.w	r3, r6, #8
 800f400:	f01a 0f04 	tst.w	sl, #4
 800f404:	f040 8121 	bne.w	800f64a <_vfiprintf_r+0x826>
 800f408:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f40c:	9905      	ldr	r1, [sp, #20]
 800f40e:	428a      	cmp	r2, r1
 800f410:	bfac      	ite	ge
 800f412:	189b      	addge	r3, r3, r2
 800f414:	185b      	addlt	r3, r3, r1
 800f416:	9303      	str	r3, [sp, #12]
 800f418:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f41a:	b13b      	cbz	r3, 800f42c <_vfiprintf_r+0x608>
 800f41c:	4639      	mov	r1, r7
 800f41e:	4648      	mov	r0, r9
 800f420:	aa0e      	add	r2, sp, #56	; 0x38
 800f422:	f7ff fccd 	bl	800edc0 <__sprint_r>
 800f426:	2800      	cmp	r0, #0
 800f428:	f040 812d 	bne.w	800f686 <_vfiprintf_r+0x862>
 800f42c:	2300      	movs	r3, #0
 800f42e:	ae11      	add	r6, sp, #68	; 0x44
 800f430:	930f      	str	r3, [sp, #60]	; 0x3c
 800f432:	e6c6      	b.n	800f1c2 <_vfiprintf_r+0x39e>
 800f434:	4640      	mov	r0, r8
 800f436:	f7f0 fef7 	bl	8000228 <strlen>
 800f43a:	9001      	str	r0, [sp, #4]
 800f43c:	e737      	b.n	800f2ae <_vfiprintf_r+0x48a>
 800f43e:	f04a 0a10 	orr.w	sl, sl, #16
 800f442:	f01a 0320 	ands.w	r3, sl, #32
 800f446:	d008      	beq.n	800f45a <_vfiprintf_r+0x636>
 800f448:	3407      	adds	r4, #7
 800f44a:	f024 0307 	bic.w	r3, r4, #7
 800f44e:	469b      	mov	fp, r3
 800f450:	685d      	ldr	r5, [r3, #4]
 800f452:	f85b 4b08 	ldr.w	r4, [fp], #8
 800f456:	2301      	movs	r3, #1
 800f458:	e6d9      	b.n	800f20e <_vfiprintf_r+0x3ea>
 800f45a:	46a3      	mov	fp, r4
 800f45c:	f01a 0510 	ands.w	r5, sl, #16
 800f460:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f464:	d001      	beq.n	800f46a <_vfiprintf_r+0x646>
 800f466:	461d      	mov	r5, r3
 800f468:	e7f5      	b.n	800f456 <_vfiprintf_r+0x632>
 800f46a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f46e:	d001      	beq.n	800f474 <_vfiprintf_r+0x650>
 800f470:	b2a4      	uxth	r4, r4
 800f472:	e7f0      	b.n	800f456 <_vfiprintf_r+0x632>
 800f474:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f478:	d0ed      	beq.n	800f456 <_vfiprintf_r+0x632>
 800f47a:	b2e4      	uxtb	r4, r4
 800f47c:	e7f3      	b.n	800f466 <_vfiprintf_r+0x642>
 800f47e:	4a47      	ldr	r2, [pc, #284]	; (800f59c <_vfiprintf_r+0x778>)
 800f480:	e5c6      	b.n	800f010 <_vfiprintf_r+0x1ec>
 800f482:	46a3      	mov	fp, r4
 800f484:	f01a 0510 	ands.w	r5, sl, #16
 800f488:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f48c:	d001      	beq.n	800f492 <_vfiprintf_r+0x66e>
 800f48e:	4615      	mov	r5, r2
 800f490:	e5ca      	b.n	800f028 <_vfiprintf_r+0x204>
 800f492:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800f496:	d001      	beq.n	800f49c <_vfiprintf_r+0x678>
 800f498:	b2a4      	uxth	r4, r4
 800f49a:	e5c5      	b.n	800f028 <_vfiprintf_r+0x204>
 800f49c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f4a0:	f43f adc2 	beq.w	800f028 <_vfiprintf_r+0x204>
 800f4a4:	b2e4      	uxtb	r4, r4
 800f4a6:	e7f2      	b.n	800f48e <_vfiprintf_r+0x66a>
 800f4a8:	2c0a      	cmp	r4, #10
 800f4aa:	f175 0300 	sbcs.w	r3, r5, #0
 800f4ae:	d205      	bcs.n	800f4bc <_vfiprintf_r+0x698>
 800f4b0:	3430      	adds	r4, #48	; 0x30
 800f4b2:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800f4b6:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 800f4ba:	e137      	b.n	800f72c <_vfiprintf_r+0x908>
 800f4bc:	f04f 0a00 	mov.w	sl, #0
 800f4c0:	ab3a      	add	r3, sp, #232	; 0xe8
 800f4c2:	930a      	str	r3, [sp, #40]	; 0x28
 800f4c4:	9b05      	ldr	r3, [sp, #20]
 800f4c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4ce:	220a      	movs	r2, #10
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	4629      	mov	r1, r5
 800f4d4:	f103 38ff 	add.w	r8, r3, #4294967295
 800f4d8:	2300      	movs	r3, #0
 800f4da:	f7f1 fbb1 	bl	8000c40 <__aeabi_uldivmod>
 800f4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4e0:	3230      	adds	r2, #48	; 0x30
 800f4e2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4e8:	f10a 0a01 	add.w	sl, sl, #1
 800f4ec:	b1d3      	cbz	r3, 800f524 <_vfiprintf_r+0x700>
 800f4ee:	9b07      	ldr	r3, [sp, #28]
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	4553      	cmp	r3, sl
 800f4f4:	d116      	bne.n	800f524 <_vfiprintf_r+0x700>
 800f4f6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f4fa:	d013      	beq.n	800f524 <_vfiprintf_r+0x700>
 800f4fc:	2c0a      	cmp	r4, #10
 800f4fe:	f175 0300 	sbcs.w	r3, r5, #0
 800f502:	d30f      	bcc.n	800f524 <_vfiprintf_r+0x700>
 800f504:	9b08      	ldr	r3, [sp, #32]
 800f506:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f508:	eba8 0803 	sub.w	r8, r8, r3
 800f50c:	461a      	mov	r2, r3
 800f50e:	4640      	mov	r0, r8
 800f510:	f7ff fb0c 	bl	800eb2c <strncpy>
 800f514:	9b07      	ldr	r3, [sp, #28]
 800f516:	785b      	ldrb	r3, [r3, #1]
 800f518:	b1a3      	cbz	r3, 800f544 <_vfiprintf_r+0x720>
 800f51a:	f04f 0a00 	mov.w	sl, #0
 800f51e:	9b07      	ldr	r3, [sp, #28]
 800f520:	3301      	adds	r3, #1
 800f522:	9307      	str	r3, [sp, #28]
 800f524:	2300      	movs	r3, #0
 800f526:	220a      	movs	r2, #10
 800f528:	4620      	mov	r0, r4
 800f52a:	4629      	mov	r1, r5
 800f52c:	f7f1 fb88 	bl	8000c40 <__aeabi_uldivmod>
 800f530:	2c0a      	cmp	r4, #10
 800f532:	f175 0300 	sbcs.w	r3, r5, #0
 800f536:	f0c0 80f9 	bcc.w	800f72c <_vfiprintf_r+0x908>
 800f53a:	4604      	mov	r4, r0
 800f53c:	460d      	mov	r5, r1
 800f53e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800f542:	e7c3      	b.n	800f4cc <_vfiprintf_r+0x6a8>
 800f544:	469a      	mov	sl, r3
 800f546:	e7ed      	b.n	800f524 <_vfiprintf_r+0x700>
 800f548:	9a06      	ldr	r2, [sp, #24]
 800f54a:	f004 030f 	and.w	r3, r4, #15
 800f54e:	5cd3      	ldrb	r3, [r2, r3]
 800f550:	0924      	lsrs	r4, r4, #4
 800f552:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f556:	092d      	lsrs	r5, r5, #4
 800f558:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f55c:	ea54 0305 	orrs.w	r3, r4, r5
 800f560:	d1f2      	bne.n	800f548 <_vfiprintf_r+0x724>
 800f562:	e0e3      	b.n	800f72c <_vfiprintf_r+0x908>
 800f564:	b933      	cbnz	r3, 800f574 <_vfiprintf_r+0x750>
 800f566:	f01a 0f01 	tst.w	sl, #1
 800f56a:	d003      	beq.n	800f574 <_vfiprintf_r+0x750>
 800f56c:	2330      	movs	r3, #48	; 0x30
 800f56e:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800f572:	e7a0      	b.n	800f4b6 <_vfiprintf_r+0x692>
 800f574:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800f578:	e0d8      	b.n	800f72c <_vfiprintf_r+0x908>
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f000 80a4 	beq.w	800f6c8 <_vfiprintf_r+0x8a4>
 800f580:	2100      	movs	r1, #0
 800f582:	46a3      	mov	fp, r4
 800f584:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800f588:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800f58c:	e5db      	b.n	800f146 <_vfiprintf_r+0x322>
 800f58e:	4605      	mov	r5, r0
 800f590:	e68d      	b.n	800f2ae <_vfiprintf_r+0x48a>
 800f592:	bf00      	nop
 800f594:	08034f18 	.word	0x08034f18
 800f598:	08034f28 	.word	0x08034f28
 800f59c:	08034c69 	.word	0x08034c69
 800f5a0:	2010      	movs	r0, #16
 800f5a2:	2b07      	cmp	r3, #7
 800f5a4:	4402      	add	r2, r0
 800f5a6:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800f5aa:	6070      	str	r0, [r6, #4]
 800f5ac:	dd07      	ble.n	800f5be <_vfiprintf_r+0x79a>
 800f5ae:	4639      	mov	r1, r7
 800f5b0:	4648      	mov	r0, r9
 800f5b2:	aa0e      	add	r2, sp, #56	; 0x38
 800f5b4:	f7ff fc04 	bl	800edc0 <__sprint_r>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	d164      	bne.n	800f686 <_vfiprintf_r+0x862>
 800f5bc:	a911      	add	r1, sp, #68	; 0x44
 800f5be:	460e      	mov	r6, r1
 800f5c0:	3c10      	subs	r4, #16
 800f5c2:	e68f      	b.n	800f2e4 <_vfiprintf_r+0x4c0>
 800f5c4:	460e      	mov	r6, r1
 800f5c6:	e6a8      	b.n	800f31a <_vfiprintf_r+0x4f6>
 800f5c8:	4639      	mov	r1, r7
 800f5ca:	4648      	mov	r0, r9
 800f5cc:	aa0e      	add	r2, sp, #56	; 0x38
 800f5ce:	f7ff fbf7 	bl	800edc0 <__sprint_r>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d157      	bne.n	800f686 <_vfiprintf_r+0x862>
 800f5d6:	ae11      	add	r6, sp, #68	; 0x44
 800f5d8:	e6b1      	b.n	800f33e <_vfiprintf_r+0x51a>
 800f5da:	4639      	mov	r1, r7
 800f5dc:	4648      	mov	r0, r9
 800f5de:	aa0e      	add	r2, sp, #56	; 0x38
 800f5e0:	f7ff fbee 	bl	800edc0 <__sprint_r>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d14e      	bne.n	800f686 <_vfiprintf_r+0x862>
 800f5e8:	ae11      	add	r6, sp, #68	; 0x44
 800f5ea:	e6b8      	b.n	800f35e <_vfiprintf_r+0x53a>
 800f5ec:	2010      	movs	r0, #16
 800f5ee:	2b07      	cmp	r3, #7
 800f5f0:	4402      	add	r2, r0
 800f5f2:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800f5f6:	6070      	str	r0, [r6, #4]
 800f5f8:	dd07      	ble.n	800f60a <_vfiprintf_r+0x7e6>
 800f5fa:	4639      	mov	r1, r7
 800f5fc:	4648      	mov	r0, r9
 800f5fe:	aa0e      	add	r2, sp, #56	; 0x38
 800f600:	f7ff fbde 	bl	800edc0 <__sprint_r>
 800f604:	2800      	cmp	r0, #0
 800f606:	d13e      	bne.n	800f686 <_vfiprintf_r+0x862>
 800f608:	a911      	add	r1, sp, #68	; 0x44
 800f60a:	460e      	mov	r6, r1
 800f60c:	3c10      	subs	r4, #16
 800f60e:	e6ae      	b.n	800f36e <_vfiprintf_r+0x54a>
 800f610:	460e      	mov	r6, r1
 800f612:	e6c7      	b.n	800f3a4 <_vfiprintf_r+0x580>
 800f614:	2010      	movs	r0, #16
 800f616:	2b07      	cmp	r3, #7
 800f618:	4401      	add	r1, r0
 800f61a:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 800f61e:	6070      	str	r0, [r6, #4]
 800f620:	dd06      	ble.n	800f630 <_vfiprintf_r+0x80c>
 800f622:	4639      	mov	r1, r7
 800f624:	4648      	mov	r0, r9
 800f626:	aa0e      	add	r2, sp, #56	; 0x38
 800f628:	f7ff fbca 	bl	800edc0 <__sprint_r>
 800f62c:	bb58      	cbnz	r0, 800f686 <_vfiprintf_r+0x862>
 800f62e:	aa11      	add	r2, sp, #68	; 0x44
 800f630:	4616      	mov	r6, r2
 800f632:	3c10      	subs	r4, #16
 800f634:	e6bb      	b.n	800f3ae <_vfiprintf_r+0x58a>
 800f636:	4616      	mov	r6, r2
 800f638:	e6d3      	b.n	800f3e2 <_vfiprintf_r+0x5be>
 800f63a:	4639      	mov	r1, r7
 800f63c:	4648      	mov	r0, r9
 800f63e:	aa0e      	add	r2, sp, #56	; 0x38
 800f640:	f7ff fbbe 	bl	800edc0 <__sprint_r>
 800f644:	b9f8      	cbnz	r0, 800f686 <_vfiprintf_r+0x862>
 800f646:	ab11      	add	r3, sp, #68	; 0x44
 800f648:	e6da      	b.n	800f400 <_vfiprintf_r+0x5dc>
 800f64a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f64e:	1a54      	subs	r4, r2, r1
 800f650:	2c00      	cmp	r4, #0
 800f652:	f77f aed9 	ble.w	800f408 <_vfiprintf_r+0x5e4>
 800f656:	2610      	movs	r6, #16
 800f658:	4d38      	ldr	r5, [pc, #224]	; (800f73c <_vfiprintf_r+0x918>)
 800f65a:	2c10      	cmp	r4, #16
 800f65c:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f660:	601d      	str	r5, [r3, #0]
 800f662:	f102 0201 	add.w	r2, r2, #1
 800f666:	dc1d      	bgt.n	800f6a4 <_vfiprintf_r+0x880>
 800f668:	605c      	str	r4, [r3, #4]
 800f66a:	2a07      	cmp	r2, #7
 800f66c:	440c      	add	r4, r1
 800f66e:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f672:	f77f aec9 	ble.w	800f408 <_vfiprintf_r+0x5e4>
 800f676:	4639      	mov	r1, r7
 800f678:	4648      	mov	r0, r9
 800f67a:	aa0e      	add	r2, sp, #56	; 0x38
 800f67c:	f7ff fba0 	bl	800edc0 <__sprint_r>
 800f680:	2800      	cmp	r0, #0
 800f682:	f43f aec1 	beq.w	800f408 <_vfiprintf_r+0x5e4>
 800f686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f688:	07d9      	lsls	r1, r3, #31
 800f68a:	d405      	bmi.n	800f698 <_vfiprintf_r+0x874>
 800f68c:	89bb      	ldrh	r3, [r7, #12]
 800f68e:	059a      	lsls	r2, r3, #22
 800f690:	d402      	bmi.n	800f698 <_vfiprintf_r+0x874>
 800f692:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f694:	f7fa f971 	bl	800997a <__retarget_lock_release_recursive>
 800f698:	89bb      	ldrh	r3, [r7, #12]
 800f69a:	065b      	lsls	r3, r3, #25
 800f69c:	f57f abf3 	bpl.w	800ee86 <_vfiprintf_r+0x62>
 800f6a0:	f7ff bbee 	b.w	800ee80 <_vfiprintf_r+0x5c>
 800f6a4:	3110      	adds	r1, #16
 800f6a6:	2a07      	cmp	r2, #7
 800f6a8:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f6ac:	605e      	str	r6, [r3, #4]
 800f6ae:	dc02      	bgt.n	800f6b6 <_vfiprintf_r+0x892>
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	3c10      	subs	r4, #16
 800f6b4:	e7d1      	b.n	800f65a <_vfiprintf_r+0x836>
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	4648      	mov	r0, r9
 800f6ba:	aa0e      	add	r2, sp, #56	; 0x38
 800f6bc:	f7ff fb80 	bl	800edc0 <__sprint_r>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d1e0      	bne.n	800f686 <_vfiprintf_r+0x862>
 800f6c4:	ab11      	add	r3, sp, #68	; 0x44
 800f6c6:	e7f4      	b.n	800f6b2 <_vfiprintf_r+0x88e>
 800f6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6ca:	b913      	cbnz	r3, 800f6d2 <_vfiprintf_r+0x8ae>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6d0:	e7d9      	b.n	800f686 <_vfiprintf_r+0x862>
 800f6d2:	4639      	mov	r1, r7
 800f6d4:	4648      	mov	r0, r9
 800f6d6:	aa0e      	add	r2, sp, #56	; 0x38
 800f6d8:	f7ff fb72 	bl	800edc0 <__sprint_r>
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d0f5      	beq.n	800f6cc <_vfiprintf_r+0x8a8>
 800f6e0:	e7d1      	b.n	800f686 <_vfiprintf_r+0x862>
 800f6e2:	ea54 0205 	orrs.w	r2, r4, r5
 800f6e6:	f8cd a014 	str.w	sl, [sp, #20]
 800f6ea:	f43f ada2 	beq.w	800f232 <_vfiprintf_r+0x40e>
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	f43f aeda 	beq.w	800f4a8 <_vfiprintf_r+0x684>
 800f6f4:	2b02      	cmp	r3, #2
 800f6f6:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800f6fa:	f43f af25 	beq.w	800f548 <_vfiprintf_r+0x724>
 800f6fe:	f004 0307 	and.w	r3, r4, #7
 800f702:	08e4      	lsrs	r4, r4, #3
 800f704:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f708:	08ed      	lsrs	r5, r5, #3
 800f70a:	3330      	adds	r3, #48	; 0x30
 800f70c:	ea54 0105 	orrs.w	r1, r4, r5
 800f710:	4642      	mov	r2, r8
 800f712:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f716:	d1f2      	bne.n	800f6fe <_vfiprintf_r+0x8da>
 800f718:	9905      	ldr	r1, [sp, #20]
 800f71a:	07c8      	lsls	r0, r1, #31
 800f71c:	d506      	bpl.n	800f72c <_vfiprintf_r+0x908>
 800f71e:	2b30      	cmp	r3, #48	; 0x30
 800f720:	d004      	beq.n	800f72c <_vfiprintf_r+0x908>
 800f722:	2330      	movs	r3, #48	; 0x30
 800f724:	f808 3c01 	strb.w	r3, [r8, #-1]
 800f728:	f1a2 0802 	sub.w	r8, r2, #2
 800f72c:	ab3a      	add	r3, sp, #232	; 0xe8
 800f72e:	eba3 0308 	sub.w	r3, r3, r8
 800f732:	9d01      	ldr	r5, [sp, #4]
 800f734:	f8dd a014 	ldr.w	sl, [sp, #20]
 800f738:	9301      	str	r3, [sp, #4]
 800f73a:	e5b8      	b.n	800f2ae <_vfiprintf_r+0x48a>
 800f73c:	08034f18 	.word	0x08034f18

0800f740 <__sbprintf>:
 800f740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f742:	461f      	mov	r7, r3
 800f744:	898b      	ldrh	r3, [r1, #12]
 800f746:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800f74a:	f023 0302 	bic.w	r3, r3, #2
 800f74e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f752:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f754:	4615      	mov	r5, r2
 800f756:	9319      	str	r3, [sp, #100]	; 0x64
 800f758:	89cb      	ldrh	r3, [r1, #14]
 800f75a:	4606      	mov	r6, r0
 800f75c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f760:	69cb      	ldr	r3, [r1, #28]
 800f762:	a816      	add	r0, sp, #88	; 0x58
 800f764:	9307      	str	r3, [sp, #28]
 800f766:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800f768:	460c      	mov	r4, r1
 800f76a:	9309      	str	r3, [sp, #36]	; 0x24
 800f76c:	ab1a      	add	r3, sp, #104	; 0x68
 800f76e:	9300      	str	r3, [sp, #0]
 800f770:	9304      	str	r3, [sp, #16]
 800f772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f776:	9302      	str	r3, [sp, #8]
 800f778:	9305      	str	r3, [sp, #20]
 800f77a:	2300      	movs	r3, #0
 800f77c:	9306      	str	r3, [sp, #24]
 800f77e:	f7fa f8f9 	bl	8009974 <__retarget_lock_init_recursive>
 800f782:	462a      	mov	r2, r5
 800f784:	463b      	mov	r3, r7
 800f786:	4669      	mov	r1, sp
 800f788:	4630      	mov	r0, r6
 800f78a:	f7ff fb4b 	bl	800ee24 <_vfiprintf_r>
 800f78e:	1e05      	subs	r5, r0, #0
 800f790:	db07      	blt.n	800f7a2 <__sbprintf+0x62>
 800f792:	4669      	mov	r1, sp
 800f794:	4630      	mov	r0, r6
 800f796:	f7fd ffad 	bl	800d6f4 <_fflush_r>
 800f79a:	2800      	cmp	r0, #0
 800f79c:	bf18      	it	ne
 800f79e:	f04f 35ff 	movne.w	r5, #4294967295
 800f7a2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f7a6:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f7a8:	065b      	lsls	r3, r3, #25
 800f7aa:	bf42      	ittt	mi
 800f7ac:	89a3      	ldrhmi	r3, [r4, #12]
 800f7ae:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f7b2:	81a3      	strhmi	r3, [r4, #12]
 800f7b4:	f7fa f8df 	bl	8009976 <__retarget_lock_close_recursive>
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800f7be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7c0 <__swsetup_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4b2a      	ldr	r3, [pc, #168]	; (800f86c <__swsetup_r+0xac>)
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	6818      	ldr	r0, [r3, #0]
 800f7c8:	460c      	mov	r4, r1
 800f7ca:	b118      	cbz	r0, 800f7d4 <__swsetup_r+0x14>
 800f7cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f7ce:	b90b      	cbnz	r3, 800f7d4 <__swsetup_r+0x14>
 800f7d0:	f7fd fffc 	bl	800d7cc <__sinit>
 800f7d4:	89a3      	ldrh	r3, [r4, #12]
 800f7d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7da:	0718      	lsls	r0, r3, #28
 800f7dc:	d422      	bmi.n	800f824 <__swsetup_r+0x64>
 800f7de:	06d9      	lsls	r1, r3, #27
 800f7e0:	d407      	bmi.n	800f7f2 <__swsetup_r+0x32>
 800f7e2:	2309      	movs	r3, #9
 800f7e4:	602b      	str	r3, [r5, #0]
 800f7e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ee:	81a3      	strh	r3, [r4, #12]
 800f7f0:	e034      	b.n	800f85c <__swsetup_r+0x9c>
 800f7f2:	0758      	lsls	r0, r3, #29
 800f7f4:	d512      	bpl.n	800f81c <__swsetup_r+0x5c>
 800f7f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f7f8:	b141      	cbz	r1, 800f80c <__swsetup_r+0x4c>
 800f7fa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f7fe:	4299      	cmp	r1, r3
 800f800:	d002      	beq.n	800f808 <__swsetup_r+0x48>
 800f802:	4628      	mov	r0, r5
 800f804:	f7fe f85e 	bl	800d8c4 <_free_r>
 800f808:	2300      	movs	r3, #0
 800f80a:	6323      	str	r3, [r4, #48]	; 0x30
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f812:	81a3      	strh	r3, [r4, #12]
 800f814:	2300      	movs	r3, #0
 800f816:	6063      	str	r3, [r4, #4]
 800f818:	6923      	ldr	r3, [r4, #16]
 800f81a:	6023      	str	r3, [r4, #0]
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	f043 0308 	orr.w	r3, r3, #8
 800f822:	81a3      	strh	r3, [r4, #12]
 800f824:	6923      	ldr	r3, [r4, #16]
 800f826:	b94b      	cbnz	r3, 800f83c <__swsetup_r+0x7c>
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f82e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f832:	d003      	beq.n	800f83c <__swsetup_r+0x7c>
 800f834:	4621      	mov	r1, r4
 800f836:	4628      	mov	r0, r5
 800f838:	f000 fa00 	bl	800fc3c <__smakebuf_r>
 800f83c:	89a0      	ldrh	r0, [r4, #12]
 800f83e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f842:	f010 0301 	ands.w	r3, r0, #1
 800f846:	d00a      	beq.n	800f85e <__swsetup_r+0x9e>
 800f848:	2300      	movs	r3, #0
 800f84a:	60a3      	str	r3, [r4, #8]
 800f84c:	6963      	ldr	r3, [r4, #20]
 800f84e:	425b      	negs	r3, r3
 800f850:	61a3      	str	r3, [r4, #24]
 800f852:	6923      	ldr	r3, [r4, #16]
 800f854:	b943      	cbnz	r3, 800f868 <__swsetup_r+0xa8>
 800f856:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f85a:	d1c4      	bne.n	800f7e6 <__swsetup_r+0x26>
 800f85c:	bd38      	pop	{r3, r4, r5, pc}
 800f85e:	0781      	lsls	r1, r0, #30
 800f860:	bf58      	it	pl
 800f862:	6963      	ldrpl	r3, [r4, #20]
 800f864:	60a3      	str	r3, [r4, #8]
 800f866:	e7f4      	b.n	800f852 <__swsetup_r+0x92>
 800f868:	2000      	movs	r0, #0
 800f86a:	e7f7      	b.n	800f85c <__swsetup_r+0x9c>
 800f86c:	20000048 	.word	0x20000048

0800f870 <abort>:
 800f870:	2006      	movs	r0, #6
 800f872:	b508      	push	{r3, lr}
 800f874:	f000 fa4c 	bl	800fd10 <raise>
 800f878:	2001      	movs	r0, #1
 800f87a:	f7f5 fb88 	bl	8004f8e <_exit>

0800f87e <__fputwc>:
 800f87e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f882:	4680      	mov	r8, r0
 800f884:	460e      	mov	r6, r1
 800f886:	4615      	mov	r5, r2
 800f888:	f7fa f86a 	bl	8009960 <__locale_mb_cur_max>
 800f88c:	2801      	cmp	r0, #1
 800f88e:	4604      	mov	r4, r0
 800f890:	d11b      	bne.n	800f8ca <__fputwc+0x4c>
 800f892:	1e73      	subs	r3, r6, #1
 800f894:	2bfe      	cmp	r3, #254	; 0xfe
 800f896:	d818      	bhi.n	800f8ca <__fputwc+0x4c>
 800f898:	f88d 6004 	strb.w	r6, [sp, #4]
 800f89c:	2700      	movs	r7, #0
 800f89e:	f10d 0904 	add.w	r9, sp, #4
 800f8a2:	42a7      	cmp	r7, r4
 800f8a4:	d020      	beq.n	800f8e8 <__fputwc+0x6a>
 800f8a6:	68ab      	ldr	r3, [r5, #8]
 800f8a8:	f817 1009 	ldrb.w	r1, [r7, r9]
 800f8ac:	3b01      	subs	r3, #1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	60ab      	str	r3, [r5, #8]
 800f8b2:	da04      	bge.n	800f8be <__fputwc+0x40>
 800f8b4:	69aa      	ldr	r2, [r5, #24]
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	db1a      	blt.n	800f8f0 <__fputwc+0x72>
 800f8ba:	290a      	cmp	r1, #10
 800f8bc:	d018      	beq.n	800f8f0 <__fputwc+0x72>
 800f8be:	682b      	ldr	r3, [r5, #0]
 800f8c0:	1c5a      	adds	r2, r3, #1
 800f8c2:	602a      	str	r2, [r5, #0]
 800f8c4:	7019      	strb	r1, [r3, #0]
 800f8c6:	3701      	adds	r7, #1
 800f8c8:	e7eb      	b.n	800f8a2 <__fputwc+0x24>
 800f8ca:	4632      	mov	r2, r6
 800f8cc:	4640      	mov	r0, r8
 800f8ce:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800f8d2:	a901      	add	r1, sp, #4
 800f8d4:	f000 fa82 	bl	800fddc <_wcrtomb_r>
 800f8d8:	1c42      	adds	r2, r0, #1
 800f8da:	4604      	mov	r4, r0
 800f8dc:	d1de      	bne.n	800f89c <__fputwc+0x1e>
 800f8de:	4606      	mov	r6, r0
 800f8e0:	89ab      	ldrh	r3, [r5, #12]
 800f8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8e6:	81ab      	strh	r3, [r5, #12]
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	b003      	add	sp, #12
 800f8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8f0:	462a      	mov	r2, r5
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	f000 fa28 	bl	800fd48 <__swbuf_r>
 800f8f8:	1c43      	adds	r3, r0, #1
 800f8fa:	d1e4      	bne.n	800f8c6 <__fputwc+0x48>
 800f8fc:	4606      	mov	r6, r0
 800f8fe:	e7f3      	b.n	800f8e8 <__fputwc+0x6a>

0800f900 <_fputwc_r>:
 800f900:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f902:	b570      	push	{r4, r5, r6, lr}
 800f904:	07db      	lsls	r3, r3, #31
 800f906:	4605      	mov	r5, r0
 800f908:	460e      	mov	r6, r1
 800f90a:	4614      	mov	r4, r2
 800f90c:	d405      	bmi.n	800f91a <_fputwc_r+0x1a>
 800f90e:	8993      	ldrh	r3, [r2, #12]
 800f910:	0598      	lsls	r0, r3, #22
 800f912:	d402      	bmi.n	800f91a <_fputwc_r+0x1a>
 800f914:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800f916:	f7fa f82f 	bl	8009978 <__retarget_lock_acquire_recursive>
 800f91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f91e:	0499      	lsls	r1, r3, #18
 800f920:	d406      	bmi.n	800f930 <_fputwc_r+0x30>
 800f922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f926:	81a3      	strh	r3, [r4, #12]
 800f928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f92a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f92e:	6663      	str	r3, [r4, #100]	; 0x64
 800f930:	4622      	mov	r2, r4
 800f932:	4628      	mov	r0, r5
 800f934:	4631      	mov	r1, r6
 800f936:	f7ff ffa2 	bl	800f87e <__fputwc>
 800f93a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f93c:	4605      	mov	r5, r0
 800f93e:	07da      	lsls	r2, r3, #31
 800f940:	d405      	bmi.n	800f94e <_fputwc_r+0x4e>
 800f942:	89a3      	ldrh	r3, [r4, #12]
 800f944:	059b      	lsls	r3, r3, #22
 800f946:	d402      	bmi.n	800f94e <_fputwc_r+0x4e>
 800f948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f94a:	f7fa f816 	bl	800997a <__retarget_lock_release_recursive>
 800f94e:	4628      	mov	r0, r5
 800f950:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f954 <__sfvwrite_r>:
 800f954:	6893      	ldr	r3, [r2, #8]
 800f956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95a:	4606      	mov	r6, r0
 800f95c:	460c      	mov	r4, r1
 800f95e:	4690      	mov	r8, r2
 800f960:	b91b      	cbnz	r3, 800f96a <__sfvwrite_r+0x16>
 800f962:	2000      	movs	r0, #0
 800f964:	b003      	add	sp, #12
 800f966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f96a:	898b      	ldrh	r3, [r1, #12]
 800f96c:	0718      	lsls	r0, r3, #28
 800f96e:	d550      	bpl.n	800fa12 <__sfvwrite_r+0xbe>
 800f970:	690b      	ldr	r3, [r1, #16]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d04d      	beq.n	800fa12 <__sfvwrite_r+0xbe>
 800f976:	89a3      	ldrh	r3, [r4, #12]
 800f978:	f8d8 7000 	ldr.w	r7, [r8]
 800f97c:	f013 0902 	ands.w	r9, r3, #2
 800f980:	d16b      	bne.n	800fa5a <__sfvwrite_r+0x106>
 800f982:	f013 0301 	ands.w	r3, r3, #1
 800f986:	f000 809b 	beq.w	800fac0 <__sfvwrite_r+0x16c>
 800f98a:	4648      	mov	r0, r9
 800f98c:	46ca      	mov	sl, r9
 800f98e:	46cb      	mov	fp, r9
 800f990:	f1bb 0f00 	cmp.w	fp, #0
 800f994:	f000 8102 	beq.w	800fb9c <__sfvwrite_r+0x248>
 800f998:	b950      	cbnz	r0, 800f9b0 <__sfvwrite_r+0x5c>
 800f99a:	465a      	mov	r2, fp
 800f99c:	210a      	movs	r1, #10
 800f99e:	4650      	mov	r0, sl
 800f9a0:	f7fe fbd6 	bl	800e150 <memchr>
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	f000 80fe 	beq.w	800fba6 <__sfvwrite_r+0x252>
 800f9aa:	3001      	adds	r0, #1
 800f9ac:	eba0 090a 	sub.w	r9, r0, sl
 800f9b0:	6820      	ldr	r0, [r4, #0]
 800f9b2:	6921      	ldr	r1, [r4, #16]
 800f9b4:	45d9      	cmp	r9, fp
 800f9b6:	464a      	mov	r2, r9
 800f9b8:	bf28      	it	cs
 800f9ba:	465a      	movcs	r2, fp
 800f9bc:	4288      	cmp	r0, r1
 800f9be:	6963      	ldr	r3, [r4, #20]
 800f9c0:	f240 80f4 	bls.w	800fbac <__sfvwrite_r+0x258>
 800f9c4:	68a5      	ldr	r5, [r4, #8]
 800f9c6:	441d      	add	r5, r3
 800f9c8:	42aa      	cmp	r2, r5
 800f9ca:	f340 80ef 	ble.w	800fbac <__sfvwrite_r+0x258>
 800f9ce:	4651      	mov	r1, sl
 800f9d0:	462a      	mov	r2, r5
 800f9d2:	f7fe fbd9 	bl	800e188 <memmove>
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	4621      	mov	r1, r4
 800f9da:	442b      	add	r3, r5
 800f9dc:	4630      	mov	r0, r6
 800f9de:	6023      	str	r3, [r4, #0]
 800f9e0:	f7fd fe88 	bl	800d6f4 <_fflush_r>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d166      	bne.n	800fab6 <__sfvwrite_r+0x162>
 800f9e8:	ebb9 0905 	subs.w	r9, r9, r5
 800f9ec:	f040 80f6 	bne.w	800fbdc <__sfvwrite_r+0x288>
 800f9f0:	4621      	mov	r1, r4
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	f7fd fe7e 	bl	800d6f4 <_fflush_r>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d15c      	bne.n	800fab6 <__sfvwrite_r+0x162>
 800f9fc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800fa00:	44aa      	add	sl, r5
 800fa02:	ebab 0b05 	sub.w	fp, fp, r5
 800fa06:	1b55      	subs	r5, r2, r5
 800fa08:	f8c8 5008 	str.w	r5, [r8, #8]
 800fa0c:	2d00      	cmp	r5, #0
 800fa0e:	d1bf      	bne.n	800f990 <__sfvwrite_r+0x3c>
 800fa10:	e7a7      	b.n	800f962 <__sfvwrite_r+0xe>
 800fa12:	4621      	mov	r1, r4
 800fa14:	4630      	mov	r0, r6
 800fa16:	f7ff fed3 	bl	800f7c0 <__swsetup_r>
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	d0ab      	beq.n	800f976 <__sfvwrite_r+0x22>
 800fa1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa22:	e79f      	b.n	800f964 <__sfvwrite_r+0x10>
 800fa24:	e9d7 b500 	ldrd	fp, r5, [r7]
 800fa28:	3708      	adds	r7, #8
 800fa2a:	2d00      	cmp	r5, #0
 800fa2c:	d0fa      	beq.n	800fa24 <__sfvwrite_r+0xd0>
 800fa2e:	4555      	cmp	r5, sl
 800fa30:	462b      	mov	r3, r5
 800fa32:	465a      	mov	r2, fp
 800fa34:	bf28      	it	cs
 800fa36:	4653      	movcs	r3, sl
 800fa38:	4630      	mov	r0, r6
 800fa3a:	69e1      	ldr	r1, [r4, #28]
 800fa3c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800fa40:	47e0      	blx	ip
 800fa42:	2800      	cmp	r0, #0
 800fa44:	dd37      	ble.n	800fab6 <__sfvwrite_r+0x162>
 800fa46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa4a:	4483      	add	fp, r0
 800fa4c:	1a2d      	subs	r5, r5, r0
 800fa4e:	1a18      	subs	r0, r3, r0
 800fa50:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d1e8      	bne.n	800fa2a <__sfvwrite_r+0xd6>
 800fa58:	e783      	b.n	800f962 <__sfvwrite_r+0xe>
 800fa5a:	f04f 0b00 	mov.w	fp, #0
 800fa5e:	f8df a180 	ldr.w	sl, [pc, #384]	; 800fbe0 <__sfvwrite_r+0x28c>
 800fa62:	465d      	mov	r5, fp
 800fa64:	e7e1      	b.n	800fa2a <__sfvwrite_r+0xd6>
 800fa66:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	f1ba 0f00 	cmp.w	sl, #0
 800fa70:	d0f9      	beq.n	800fa66 <__sfvwrite_r+0x112>
 800fa72:	89a3      	ldrh	r3, [r4, #12]
 800fa74:	6820      	ldr	r0, [r4, #0]
 800fa76:	0599      	lsls	r1, r3, #22
 800fa78:	68a2      	ldr	r2, [r4, #8]
 800fa7a:	d563      	bpl.n	800fb44 <__sfvwrite_r+0x1f0>
 800fa7c:	4552      	cmp	r2, sl
 800fa7e:	d836      	bhi.n	800faee <__sfvwrite_r+0x19a>
 800fa80:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800fa84:	d033      	beq.n	800faee <__sfvwrite_r+0x19a>
 800fa86:	6921      	ldr	r1, [r4, #16]
 800fa88:	6965      	ldr	r5, [r4, #20]
 800fa8a:	eba0 0b01 	sub.w	fp, r0, r1
 800fa8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa96:	f10b 0201 	add.w	r2, fp, #1
 800fa9a:	106d      	asrs	r5, r5, #1
 800fa9c:	4452      	add	r2, sl
 800fa9e:	4295      	cmp	r5, r2
 800faa0:	bf38      	it	cc
 800faa2:	4615      	movcc	r5, r2
 800faa4:	055b      	lsls	r3, r3, #21
 800faa6:	d53d      	bpl.n	800fb24 <__sfvwrite_r+0x1d0>
 800faa8:	4629      	mov	r1, r5
 800faaa:	4630      	mov	r0, r6
 800faac:	f7f9 ff88 	bl	80099c0 <_malloc_r>
 800fab0:	b948      	cbnz	r0, 800fac6 <__sfvwrite_r+0x172>
 800fab2:	230c      	movs	r3, #12
 800fab4:	6033      	str	r3, [r6, #0]
 800fab6:	89a3      	ldrh	r3, [r4, #12]
 800fab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fabc:	81a3      	strh	r3, [r4, #12]
 800fabe:	e7ae      	b.n	800fa1e <__sfvwrite_r+0xca>
 800fac0:	4699      	mov	r9, r3
 800fac2:	469a      	mov	sl, r3
 800fac4:	e7d2      	b.n	800fa6c <__sfvwrite_r+0x118>
 800fac6:	465a      	mov	r2, fp
 800fac8:	6921      	ldr	r1, [r4, #16]
 800faca:	9001      	str	r0, [sp, #4]
 800facc:	f7fe fb4e 	bl	800e16c <memcpy>
 800fad0:	89a2      	ldrh	r2, [r4, #12]
 800fad2:	9b01      	ldr	r3, [sp, #4]
 800fad4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800fad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fadc:	81a2      	strh	r2, [r4, #12]
 800fade:	4652      	mov	r2, sl
 800fae0:	6123      	str	r3, [r4, #16]
 800fae2:	6165      	str	r5, [r4, #20]
 800fae4:	445b      	add	r3, fp
 800fae6:	eba5 050b 	sub.w	r5, r5, fp
 800faea:	6023      	str	r3, [r4, #0]
 800faec:	60a5      	str	r5, [r4, #8]
 800faee:	4552      	cmp	r2, sl
 800faf0:	bf28      	it	cs
 800faf2:	4652      	movcs	r2, sl
 800faf4:	4655      	mov	r5, sl
 800faf6:	4649      	mov	r1, r9
 800faf8:	6820      	ldr	r0, [r4, #0]
 800fafa:	9201      	str	r2, [sp, #4]
 800fafc:	f7fe fb44 	bl	800e188 <memmove>
 800fb00:	68a3      	ldr	r3, [r4, #8]
 800fb02:	9a01      	ldr	r2, [sp, #4]
 800fb04:	1a9b      	subs	r3, r3, r2
 800fb06:	60a3      	str	r3, [r4, #8]
 800fb08:	6823      	ldr	r3, [r4, #0]
 800fb0a:	441a      	add	r2, r3
 800fb0c:	6022      	str	r2, [r4, #0]
 800fb0e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800fb12:	44a9      	add	r9, r5
 800fb14:	ebaa 0a05 	sub.w	sl, sl, r5
 800fb18:	1b45      	subs	r5, r0, r5
 800fb1a:	f8c8 5008 	str.w	r5, [r8, #8]
 800fb1e:	2d00      	cmp	r5, #0
 800fb20:	d1a4      	bne.n	800fa6c <__sfvwrite_r+0x118>
 800fb22:	e71e      	b.n	800f962 <__sfvwrite_r+0xe>
 800fb24:	462a      	mov	r2, r5
 800fb26:	4630      	mov	r0, r6
 800fb28:	f7fa f9d8 	bl	8009edc <_realloc_r>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d1d5      	bne.n	800fade <__sfvwrite_r+0x18a>
 800fb32:	4630      	mov	r0, r6
 800fb34:	6921      	ldr	r1, [r4, #16]
 800fb36:	f7fd fec5 	bl	800d8c4 <_free_r>
 800fb3a:	89a3      	ldrh	r3, [r4, #12]
 800fb3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb40:	81a3      	strh	r3, [r4, #12]
 800fb42:	e7b6      	b.n	800fab2 <__sfvwrite_r+0x15e>
 800fb44:	6923      	ldr	r3, [r4, #16]
 800fb46:	4283      	cmp	r3, r0
 800fb48:	d302      	bcc.n	800fb50 <__sfvwrite_r+0x1fc>
 800fb4a:	6961      	ldr	r1, [r4, #20]
 800fb4c:	4551      	cmp	r1, sl
 800fb4e:	d915      	bls.n	800fb7c <__sfvwrite_r+0x228>
 800fb50:	4552      	cmp	r2, sl
 800fb52:	bf28      	it	cs
 800fb54:	4652      	movcs	r2, sl
 800fb56:	4615      	mov	r5, r2
 800fb58:	4649      	mov	r1, r9
 800fb5a:	f7fe fb15 	bl	800e188 <memmove>
 800fb5e:	68a3      	ldr	r3, [r4, #8]
 800fb60:	6822      	ldr	r2, [r4, #0]
 800fb62:	1b5b      	subs	r3, r3, r5
 800fb64:	442a      	add	r2, r5
 800fb66:	60a3      	str	r3, [r4, #8]
 800fb68:	6022      	str	r2, [r4, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1cf      	bne.n	800fb0e <__sfvwrite_r+0x1ba>
 800fb6e:	4621      	mov	r1, r4
 800fb70:	4630      	mov	r0, r6
 800fb72:	f7fd fdbf 	bl	800d6f4 <_fflush_r>
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d0c9      	beq.n	800fb0e <__sfvwrite_r+0x1ba>
 800fb7a:	e79c      	b.n	800fab6 <__sfvwrite_r+0x162>
 800fb7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fb80:	459a      	cmp	sl, r3
 800fb82:	bf38      	it	cc
 800fb84:	4653      	movcc	r3, sl
 800fb86:	fb93 f3f1 	sdiv	r3, r3, r1
 800fb8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fb8c:	434b      	muls	r3, r1
 800fb8e:	464a      	mov	r2, r9
 800fb90:	4630      	mov	r0, r6
 800fb92:	69e1      	ldr	r1, [r4, #28]
 800fb94:	47a8      	blx	r5
 800fb96:	1e05      	subs	r5, r0, #0
 800fb98:	dcb9      	bgt.n	800fb0e <__sfvwrite_r+0x1ba>
 800fb9a:	e78c      	b.n	800fab6 <__sfvwrite_r+0x162>
 800fb9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800fba0:	2000      	movs	r0, #0
 800fba2:	3708      	adds	r7, #8
 800fba4:	e6f4      	b.n	800f990 <__sfvwrite_r+0x3c>
 800fba6:	f10b 0901 	add.w	r9, fp, #1
 800fbaa:	e701      	b.n	800f9b0 <__sfvwrite_r+0x5c>
 800fbac:	4293      	cmp	r3, r2
 800fbae:	dc08      	bgt.n	800fbc2 <__sfvwrite_r+0x26e>
 800fbb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fbb2:	4652      	mov	r2, sl
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	69e1      	ldr	r1, [r4, #28]
 800fbb8:	47a8      	blx	r5
 800fbba:	1e05      	subs	r5, r0, #0
 800fbbc:	f73f af14 	bgt.w	800f9e8 <__sfvwrite_r+0x94>
 800fbc0:	e779      	b.n	800fab6 <__sfvwrite_r+0x162>
 800fbc2:	4651      	mov	r1, sl
 800fbc4:	9201      	str	r2, [sp, #4]
 800fbc6:	f7fe fadf 	bl	800e188 <memmove>
 800fbca:	9a01      	ldr	r2, [sp, #4]
 800fbcc:	68a3      	ldr	r3, [r4, #8]
 800fbce:	4615      	mov	r5, r2
 800fbd0:	1a9b      	subs	r3, r3, r2
 800fbd2:	60a3      	str	r3, [r4, #8]
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	6023      	str	r3, [r4, #0]
 800fbda:	e705      	b.n	800f9e8 <__sfvwrite_r+0x94>
 800fbdc:	2001      	movs	r0, #1
 800fbde:	e70d      	b.n	800f9fc <__sfvwrite_r+0xa8>
 800fbe0:	7ffffc00 	.word	0x7ffffc00

0800fbe4 <__swhatbuf_r>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	460e      	mov	r6, r1
 800fbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbec:	4614      	mov	r4, r2
 800fbee:	2900      	cmp	r1, #0
 800fbf0:	461d      	mov	r5, r3
 800fbf2:	b096      	sub	sp, #88	; 0x58
 800fbf4:	da0a      	bge.n	800fc0c <__swhatbuf_r+0x28>
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800fbfc:	602b      	str	r3, [r5, #0]
 800fbfe:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800fc02:	d116      	bne.n	800fc32 <__swhatbuf_r+0x4e>
 800fc04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	e015      	b.n	800fc38 <__swhatbuf_r+0x54>
 800fc0c:	466a      	mov	r2, sp
 800fc0e:	f000 f8fb 	bl	800fe08 <_fstat_r>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	dbef      	blt.n	800fbf6 <__swhatbuf_r+0x12>
 800fc16:	9a01      	ldr	r2, [sp, #4]
 800fc18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fc1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc24:	425a      	negs	r2, r3
 800fc26:	415a      	adcs	r2, r3
 800fc28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc2c:	602a      	str	r2, [r5, #0]
 800fc2e:	6023      	str	r3, [r4, #0]
 800fc30:	e002      	b.n	800fc38 <__swhatbuf_r+0x54>
 800fc32:	2240      	movs	r2, #64	; 0x40
 800fc34:	4618      	mov	r0, r3
 800fc36:	6022      	str	r2, [r4, #0]
 800fc38:	b016      	add	sp, #88	; 0x58
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}

0800fc3c <__smakebuf_r>:
 800fc3c:	898b      	ldrh	r3, [r1, #12]
 800fc3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc40:	079d      	lsls	r5, r3, #30
 800fc42:	4606      	mov	r6, r0
 800fc44:	460c      	mov	r4, r1
 800fc46:	d507      	bpl.n	800fc58 <__smakebuf_r+0x1c>
 800fc48:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	6123      	str	r3, [r4, #16]
 800fc50:	2301      	movs	r3, #1
 800fc52:	6163      	str	r3, [r4, #20]
 800fc54:	b002      	add	sp, #8
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
 800fc58:	466a      	mov	r2, sp
 800fc5a:	ab01      	add	r3, sp, #4
 800fc5c:	f7ff ffc2 	bl	800fbe4 <__swhatbuf_r>
 800fc60:	9900      	ldr	r1, [sp, #0]
 800fc62:	4605      	mov	r5, r0
 800fc64:	4630      	mov	r0, r6
 800fc66:	f7f9 feab 	bl	80099c0 <_malloc_r>
 800fc6a:	b948      	cbnz	r0, 800fc80 <__smakebuf_r+0x44>
 800fc6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc70:	059a      	lsls	r2, r3, #22
 800fc72:	d4ef      	bmi.n	800fc54 <__smakebuf_r+0x18>
 800fc74:	f023 0303 	bic.w	r3, r3, #3
 800fc78:	f043 0302 	orr.w	r3, r3, #2
 800fc7c:	81a3      	strh	r3, [r4, #12]
 800fc7e:	e7e3      	b.n	800fc48 <__smakebuf_r+0xc>
 800fc80:	4b0d      	ldr	r3, [pc, #52]	; (800fcb8 <__smakebuf_r+0x7c>)
 800fc82:	63f3      	str	r3, [r6, #60]	; 0x3c
 800fc84:	89a3      	ldrh	r3, [r4, #12]
 800fc86:	6020      	str	r0, [r4, #0]
 800fc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc8c:	81a3      	strh	r3, [r4, #12]
 800fc8e:	9b00      	ldr	r3, [sp, #0]
 800fc90:	6120      	str	r0, [r4, #16]
 800fc92:	6163      	str	r3, [r4, #20]
 800fc94:	9b01      	ldr	r3, [sp, #4]
 800fc96:	b15b      	cbz	r3, 800fcb0 <__smakebuf_r+0x74>
 800fc98:	4630      	mov	r0, r6
 800fc9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc9e:	f000 f8c5 	bl	800fe2c <_isatty_r>
 800fca2:	b128      	cbz	r0, 800fcb0 <__smakebuf_r+0x74>
 800fca4:	89a3      	ldrh	r3, [r4, #12]
 800fca6:	f023 0303 	bic.w	r3, r3, #3
 800fcaa:	f043 0301 	orr.w	r3, r3, #1
 800fcae:	81a3      	strh	r3, [r4, #12]
 800fcb0:	89a0      	ldrh	r0, [r4, #12]
 800fcb2:	4305      	orrs	r5, r0
 800fcb4:	81a5      	strh	r5, [r4, #12]
 800fcb6:	e7cd      	b.n	800fc54 <__smakebuf_r+0x18>
 800fcb8:	0800d791 	.word	0x0800d791

0800fcbc <_raise_r>:
 800fcbc:	291f      	cmp	r1, #31
 800fcbe:	b538      	push	{r3, r4, r5, lr}
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	d904      	bls.n	800fcd0 <_raise_r+0x14>
 800fcc6:	2316      	movs	r3, #22
 800fcc8:	6003      	str	r3, [r0, #0]
 800fcca:	f04f 30ff 	mov.w	r0, #4294967295
 800fcce:	bd38      	pop	{r3, r4, r5, pc}
 800fcd0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800fcd4:	b112      	cbz	r2, 800fcdc <_raise_r+0x20>
 800fcd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fcda:	b94b      	cbnz	r3, 800fcf0 <_raise_r+0x34>
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f000 f831 	bl	800fd44 <_getpid_r>
 800fce2:	462a      	mov	r2, r5
 800fce4:	4601      	mov	r1, r0
 800fce6:	4620      	mov	r0, r4
 800fce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcec:	f000 b818 	b.w	800fd20 <_kill_r>
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d00a      	beq.n	800fd0a <_raise_r+0x4e>
 800fcf4:	1c59      	adds	r1, r3, #1
 800fcf6:	d103      	bne.n	800fd00 <_raise_r+0x44>
 800fcf8:	2316      	movs	r3, #22
 800fcfa:	6003      	str	r3, [r0, #0]
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	e7e6      	b.n	800fcce <_raise_r+0x12>
 800fd00:	2400      	movs	r4, #0
 800fd02:	4628      	mov	r0, r5
 800fd04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd08:	4798      	blx	r3
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	e7df      	b.n	800fcce <_raise_r+0x12>
	...

0800fd10 <raise>:
 800fd10:	4b02      	ldr	r3, [pc, #8]	; (800fd1c <raise+0xc>)
 800fd12:	4601      	mov	r1, r0
 800fd14:	6818      	ldr	r0, [r3, #0]
 800fd16:	f7ff bfd1 	b.w	800fcbc <_raise_r>
 800fd1a:	bf00      	nop
 800fd1c:	20000048 	.word	0x20000048

0800fd20 <_kill_r>:
 800fd20:	b538      	push	{r3, r4, r5, lr}
 800fd22:	2300      	movs	r3, #0
 800fd24:	4d06      	ldr	r5, [pc, #24]	; (800fd40 <_kill_r+0x20>)
 800fd26:	4604      	mov	r4, r0
 800fd28:	4608      	mov	r0, r1
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	602b      	str	r3, [r5, #0]
 800fd2e:	f7f5 f91e 	bl	8004f6e <_kill>
 800fd32:	1c43      	adds	r3, r0, #1
 800fd34:	d102      	bne.n	800fd3c <_kill_r+0x1c>
 800fd36:	682b      	ldr	r3, [r5, #0]
 800fd38:	b103      	cbz	r3, 800fd3c <_kill_r+0x1c>
 800fd3a:	6023      	str	r3, [r4, #0]
 800fd3c:	bd38      	pop	{r3, r4, r5, pc}
 800fd3e:	bf00      	nop
 800fd40:	20000bfc 	.word	0x20000bfc

0800fd44 <_getpid_r>:
 800fd44:	f7f5 b90c 	b.w	8004f60 <_getpid>

0800fd48 <__swbuf_r>:
 800fd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4a:	460e      	mov	r6, r1
 800fd4c:	4614      	mov	r4, r2
 800fd4e:	4605      	mov	r5, r0
 800fd50:	b118      	cbz	r0, 800fd5a <__swbuf_r+0x12>
 800fd52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fd54:	b90b      	cbnz	r3, 800fd5a <__swbuf_r+0x12>
 800fd56:	f7fd fd39 	bl	800d7cc <__sinit>
 800fd5a:	69a3      	ldr	r3, [r4, #24]
 800fd5c:	60a3      	str	r3, [r4, #8]
 800fd5e:	89a3      	ldrh	r3, [r4, #12]
 800fd60:	0719      	lsls	r1, r3, #28
 800fd62:	d529      	bpl.n	800fdb8 <__swbuf_r+0x70>
 800fd64:	6923      	ldr	r3, [r4, #16]
 800fd66:	b33b      	cbz	r3, 800fdb8 <__swbuf_r+0x70>
 800fd68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd6c:	b2f6      	uxtb	r6, r6
 800fd6e:	049a      	lsls	r2, r3, #18
 800fd70:	4637      	mov	r7, r6
 800fd72:	d52a      	bpl.n	800fdca <__swbuf_r+0x82>
 800fd74:	6823      	ldr	r3, [r4, #0]
 800fd76:	6920      	ldr	r0, [r4, #16]
 800fd78:	1a18      	subs	r0, r3, r0
 800fd7a:	6963      	ldr	r3, [r4, #20]
 800fd7c:	4283      	cmp	r3, r0
 800fd7e:	dc04      	bgt.n	800fd8a <__swbuf_r+0x42>
 800fd80:	4621      	mov	r1, r4
 800fd82:	4628      	mov	r0, r5
 800fd84:	f7fd fcb6 	bl	800d6f4 <_fflush_r>
 800fd88:	b9e0      	cbnz	r0, 800fdc4 <__swbuf_r+0x7c>
 800fd8a:	68a3      	ldr	r3, [r4, #8]
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	60a3      	str	r3, [r4, #8]
 800fd90:	6823      	ldr	r3, [r4, #0]
 800fd92:	1c5a      	adds	r2, r3, #1
 800fd94:	6022      	str	r2, [r4, #0]
 800fd96:	701e      	strb	r6, [r3, #0]
 800fd98:	6962      	ldr	r2, [r4, #20]
 800fd9a:	1c43      	adds	r3, r0, #1
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d004      	beq.n	800fdaa <__swbuf_r+0x62>
 800fda0:	89a3      	ldrh	r3, [r4, #12]
 800fda2:	07db      	lsls	r3, r3, #31
 800fda4:	d506      	bpl.n	800fdb4 <__swbuf_r+0x6c>
 800fda6:	2e0a      	cmp	r6, #10
 800fda8:	d104      	bne.n	800fdb4 <__swbuf_r+0x6c>
 800fdaa:	4621      	mov	r1, r4
 800fdac:	4628      	mov	r0, r5
 800fdae:	f7fd fca1 	bl	800d6f4 <_fflush_r>
 800fdb2:	b938      	cbnz	r0, 800fdc4 <__swbuf_r+0x7c>
 800fdb4:	4638      	mov	r0, r7
 800fdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdb8:	4621      	mov	r1, r4
 800fdba:	4628      	mov	r0, r5
 800fdbc:	f7ff fd00 	bl	800f7c0 <__swsetup_r>
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	d0d1      	beq.n	800fd68 <__swbuf_r+0x20>
 800fdc4:	f04f 37ff 	mov.w	r7, #4294967295
 800fdc8:	e7f4      	b.n	800fdb4 <__swbuf_r+0x6c>
 800fdca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fdce:	81a3      	strh	r3, [r4, #12]
 800fdd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fdd6:	6663      	str	r3, [r4, #100]	; 0x64
 800fdd8:	e7cc      	b.n	800fd74 <__swbuf_r+0x2c>
	...

0800fddc <_wcrtomb_r>:
 800fddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdde:	4c09      	ldr	r4, [pc, #36]	; (800fe04 <_wcrtomb_r+0x28>)
 800fde0:	4605      	mov	r5, r0
 800fde2:	461e      	mov	r6, r3
 800fde4:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800fde8:	b085      	sub	sp, #20
 800fdea:	b909      	cbnz	r1, 800fdf0 <_wcrtomb_r+0x14>
 800fdec:	460a      	mov	r2, r1
 800fdee:	a901      	add	r1, sp, #4
 800fdf0:	47b8      	blx	r7
 800fdf2:	1c43      	adds	r3, r0, #1
 800fdf4:	bf01      	itttt	eq
 800fdf6:	2300      	moveq	r3, #0
 800fdf8:	6033      	streq	r3, [r6, #0]
 800fdfa:	238a      	moveq	r3, #138	; 0x8a
 800fdfc:	602b      	streq	r3, [r5, #0]
 800fdfe:	b005      	add	sp, #20
 800fe00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe02:	bf00      	nop
 800fe04:	2000047c 	.word	0x2000047c

0800fe08 <_fstat_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	4d06      	ldr	r5, [pc, #24]	; (800fe28 <_fstat_r+0x20>)
 800fe0e:	4604      	mov	r4, r0
 800fe10:	4608      	mov	r0, r1
 800fe12:	4611      	mov	r1, r2
 800fe14:	602b      	str	r3, [r5, #0]
 800fe16:	f7f5 f908 	bl	800502a <_fstat>
 800fe1a:	1c43      	adds	r3, r0, #1
 800fe1c:	d102      	bne.n	800fe24 <_fstat_r+0x1c>
 800fe1e:	682b      	ldr	r3, [r5, #0]
 800fe20:	b103      	cbz	r3, 800fe24 <_fstat_r+0x1c>
 800fe22:	6023      	str	r3, [r4, #0]
 800fe24:	bd38      	pop	{r3, r4, r5, pc}
 800fe26:	bf00      	nop
 800fe28:	20000bfc 	.word	0x20000bfc

0800fe2c <_isatty_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	2300      	movs	r3, #0
 800fe30:	4d05      	ldr	r5, [pc, #20]	; (800fe48 <_isatty_r+0x1c>)
 800fe32:	4604      	mov	r4, r0
 800fe34:	4608      	mov	r0, r1
 800fe36:	602b      	str	r3, [r5, #0]
 800fe38:	f7f5 f906 	bl	8005048 <_isatty>
 800fe3c:	1c43      	adds	r3, r0, #1
 800fe3e:	d102      	bne.n	800fe46 <_isatty_r+0x1a>
 800fe40:	682b      	ldr	r3, [r5, #0]
 800fe42:	b103      	cbz	r3, 800fe46 <_isatty_r+0x1a>
 800fe44:	6023      	str	r3, [r4, #0]
 800fe46:	bd38      	pop	{r3, r4, r5, pc}
 800fe48:	20000bfc 	.word	0x20000bfc

0800fe4c <cos>:
 800fe4c:	b530      	push	{r4, r5, lr}
 800fe4e:	4a20      	ldr	r2, [pc, #128]	; (800fed0 <cos+0x84>)
 800fe50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe54:	4293      	cmp	r3, r2
 800fe56:	b087      	sub	sp, #28
 800fe58:	dc06      	bgt.n	800fe68 <cos+0x1c>
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	b007      	add	sp, #28
 800fe60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe64:	f000 ba78 	b.w	8010358 <__kernel_cos>
 800fe68:	4a1a      	ldr	r2, [pc, #104]	; (800fed4 <cos+0x88>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	dd05      	ble.n	800fe7a <cos+0x2e>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	460b      	mov	r3, r1
 800fe72:	f7f0 f9e5 	bl	8000240 <__aeabi_dsub>
 800fe76:	b007      	add	sp, #28
 800fe78:	bd30      	pop	{r4, r5, pc}
 800fe7a:	aa02      	add	r2, sp, #8
 800fe7c:	f000 f874 	bl	800ff68 <__ieee754_rem_pio2>
 800fe80:	f000 0003 	and.w	r0, r0, #3
 800fe84:	2801      	cmp	r0, #1
 800fe86:	d009      	beq.n	800fe9c <cos+0x50>
 800fe88:	2802      	cmp	r0, #2
 800fe8a:	d011      	beq.n	800feb0 <cos+0x64>
 800fe8c:	b9b8      	cbnz	r0, 800febe <cos+0x72>
 800fe8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe96:	f000 fa5f 	bl	8010358 <__kernel_cos>
 800fe9a:	e7ec      	b.n	800fe76 <cos+0x2a>
 800fe9c:	9000      	str	r0, [sp, #0]
 800fe9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fea6:	f000 fe57 	bl	8010b58 <__kernel_sin>
 800feaa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800feae:	e7e2      	b.n	800fe76 <cos+0x2a>
 800feb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800feb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feb8:	f000 fa4e 	bl	8010358 <__kernel_cos>
 800febc:	e7f5      	b.n	800feaa <cos+0x5e>
 800febe:	2301      	movs	r3, #1
 800fec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fec4:	9300      	str	r3, [sp, #0]
 800fec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800feca:	f000 fe45 	bl	8010b58 <__kernel_sin>
 800fece:	e7d2      	b.n	800fe76 <cos+0x2a>
 800fed0:	3fe921fb 	.word	0x3fe921fb
 800fed4:	7fefffff 	.word	0x7fefffff

0800fed8 <sin>:
 800fed8:	b530      	push	{r4, r5, lr}
 800feda:	4a20      	ldr	r2, [pc, #128]	; (800ff5c <sin+0x84>)
 800fedc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fee0:	4293      	cmp	r3, r2
 800fee2:	b087      	sub	sp, #28
 800fee4:	dc06      	bgt.n	800fef4 <sin+0x1c>
 800fee6:	2300      	movs	r3, #0
 800fee8:	2200      	movs	r2, #0
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	2300      	movs	r3, #0
 800feee:	f000 fe33 	bl	8010b58 <__kernel_sin>
 800fef2:	e006      	b.n	800ff02 <sin+0x2a>
 800fef4:	4a1a      	ldr	r2, [pc, #104]	; (800ff60 <sin+0x88>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	dd05      	ble.n	800ff06 <sin+0x2e>
 800fefa:	4602      	mov	r2, r0
 800fefc:	460b      	mov	r3, r1
 800fefe:	f7f0 f99f 	bl	8000240 <__aeabi_dsub>
 800ff02:	b007      	add	sp, #28
 800ff04:	bd30      	pop	{r4, r5, pc}
 800ff06:	aa02      	add	r2, sp, #8
 800ff08:	f000 f82e 	bl	800ff68 <__ieee754_rem_pio2>
 800ff0c:	f000 0003 	and.w	r0, r0, #3
 800ff10:	2801      	cmp	r0, #1
 800ff12:	d009      	beq.n	800ff28 <sin+0x50>
 800ff14:	2802      	cmp	r0, #2
 800ff16:	d00e      	beq.n	800ff36 <sin+0x5e>
 800ff18:	b9c0      	cbnz	r0, 800ff4c <sin+0x74>
 800ff1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff1e:	2301      	movs	r3, #1
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff26:	e7e2      	b.n	800feee <sin+0x16>
 800ff28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff30:	f000 fa12 	bl	8010358 <__kernel_cos>
 800ff34:	e7e5      	b.n	800ff02 <sin+0x2a>
 800ff36:	2301      	movs	r3, #1
 800ff38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff3c:	9300      	str	r3, [sp, #0]
 800ff3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff42:	f000 fe09 	bl	8010b58 <__kernel_sin>
 800ff46:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ff4a:	e7da      	b.n	800ff02 <sin+0x2a>
 800ff4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff54:	f000 fa00 	bl	8010358 <__kernel_cos>
 800ff58:	e7f5      	b.n	800ff46 <sin+0x6e>
 800ff5a:	bf00      	nop
 800ff5c:	3fe921fb 	.word	0x3fe921fb
 800ff60:	7fefffff 	.word	0x7fefffff
 800ff64:	00000000 	.word	0x00000000

0800ff68 <__ieee754_rem_pio2>:
 800ff68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	4614      	mov	r4, r2
 800ff6e:	4ac4      	ldr	r2, [pc, #784]	; (8010280 <__ieee754_rem_pio2+0x318>)
 800ff70:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800ff74:	b08d      	sub	sp, #52	; 0x34
 800ff76:	4592      	cmp	sl, r2
 800ff78:	9104      	str	r1, [sp, #16]
 800ff7a:	dc07      	bgt.n	800ff8c <__ieee754_rem_pio2+0x24>
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	2300      	movs	r3, #0
 800ff80:	e9c4 0100 	strd	r0, r1, [r4]
 800ff84:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ff88:	2500      	movs	r5, #0
 800ff8a:	e024      	b.n	800ffd6 <__ieee754_rem_pio2+0x6e>
 800ff8c:	4abd      	ldr	r2, [pc, #756]	; (8010284 <__ieee754_rem_pio2+0x31c>)
 800ff8e:	4592      	cmp	sl, r2
 800ff90:	dc72      	bgt.n	8010078 <__ieee754_rem_pio2+0x110>
 800ff92:	9b04      	ldr	r3, [sp, #16]
 800ff94:	4dbc      	ldr	r5, [pc, #752]	; (8010288 <__ieee754_rem_pio2+0x320>)
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	a3ab      	add	r3, pc, #684	; (adr r3, 8010248 <__ieee754_rem_pio2+0x2e0>)
 800ff9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9e:	dd36      	ble.n	801000e <__ieee754_rem_pio2+0xa6>
 800ffa0:	f7f0 f94e 	bl	8000240 <__aeabi_dsub>
 800ffa4:	45aa      	cmp	sl, r5
 800ffa6:	4606      	mov	r6, r0
 800ffa8:	460f      	mov	r7, r1
 800ffaa:	d018      	beq.n	800ffde <__ieee754_rem_pio2+0x76>
 800ffac:	a3a8      	add	r3, pc, #672	; (adr r3, 8010250 <__ieee754_rem_pio2+0x2e8>)
 800ffae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb2:	f7f0 f945 	bl	8000240 <__aeabi_dsub>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	460b      	mov	r3, r1
 800ffba:	4630      	mov	r0, r6
 800ffbc:	e9c4 2300 	strd	r2, r3, [r4]
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	f7f0 f93d 	bl	8000240 <__aeabi_dsub>
 800ffc6:	a3a2      	add	r3, pc, #648	; (adr r3, 8010250 <__ieee754_rem_pio2+0x2e8>)
 800ffc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffcc:	f7f0 f938 	bl	8000240 <__aeabi_dsub>
 800ffd0:	2501      	movs	r5, #1
 800ffd2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	b00d      	add	sp, #52	; 0x34
 800ffda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffde:	a39e      	add	r3, pc, #632	; (adr r3, 8010258 <__ieee754_rem_pio2+0x2f0>)
 800ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe4:	f7f0 f92c 	bl	8000240 <__aeabi_dsub>
 800ffe8:	a39d      	add	r3, pc, #628	; (adr r3, 8010260 <__ieee754_rem_pio2+0x2f8>)
 800ffea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffee:	4606      	mov	r6, r0
 800fff0:	460f      	mov	r7, r1
 800fff2:	f7f0 f925 	bl	8000240 <__aeabi_dsub>
 800fff6:	4602      	mov	r2, r0
 800fff8:	460b      	mov	r3, r1
 800fffa:	4630      	mov	r0, r6
 800fffc:	e9c4 2300 	strd	r2, r3, [r4]
 8010000:	4639      	mov	r1, r7
 8010002:	f7f0 f91d 	bl	8000240 <__aeabi_dsub>
 8010006:	a396      	add	r3, pc, #600	; (adr r3, 8010260 <__ieee754_rem_pio2+0x2f8>)
 8010008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000c:	e7de      	b.n	800ffcc <__ieee754_rem_pio2+0x64>
 801000e:	f7f0 f919 	bl	8000244 <__adddf3>
 8010012:	45aa      	cmp	sl, r5
 8010014:	4606      	mov	r6, r0
 8010016:	460f      	mov	r7, r1
 8010018:	d016      	beq.n	8010048 <__ieee754_rem_pio2+0xe0>
 801001a:	a38d      	add	r3, pc, #564	; (adr r3, 8010250 <__ieee754_rem_pio2+0x2e8>)
 801001c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010020:	f7f0 f910 	bl	8000244 <__adddf3>
 8010024:	4602      	mov	r2, r0
 8010026:	460b      	mov	r3, r1
 8010028:	4630      	mov	r0, r6
 801002a:	e9c4 2300 	strd	r2, r3, [r4]
 801002e:	4639      	mov	r1, r7
 8010030:	f7f0 f906 	bl	8000240 <__aeabi_dsub>
 8010034:	a386      	add	r3, pc, #536	; (adr r3, 8010250 <__ieee754_rem_pio2+0x2e8>)
 8010036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003a:	f7f0 f903 	bl	8000244 <__adddf3>
 801003e:	f04f 35ff 	mov.w	r5, #4294967295
 8010042:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010046:	e7c6      	b.n	800ffd6 <__ieee754_rem_pio2+0x6e>
 8010048:	a383      	add	r3, pc, #524	; (adr r3, 8010258 <__ieee754_rem_pio2+0x2f0>)
 801004a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004e:	f7f0 f8f9 	bl	8000244 <__adddf3>
 8010052:	a383      	add	r3, pc, #524	; (adr r3, 8010260 <__ieee754_rem_pio2+0x2f8>)
 8010054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010058:	4606      	mov	r6, r0
 801005a:	460f      	mov	r7, r1
 801005c:	f7f0 f8f2 	bl	8000244 <__adddf3>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	4630      	mov	r0, r6
 8010066:	e9c4 2300 	strd	r2, r3, [r4]
 801006a:	4639      	mov	r1, r7
 801006c:	f7f0 f8e8 	bl	8000240 <__aeabi_dsub>
 8010070:	a37b      	add	r3, pc, #492	; (adr r3, 8010260 <__ieee754_rem_pio2+0x2f8>)
 8010072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010076:	e7e0      	b.n	801003a <__ieee754_rem_pio2+0xd2>
 8010078:	4a84      	ldr	r2, [pc, #528]	; (801028c <__ieee754_rem_pio2+0x324>)
 801007a:	4592      	cmp	sl, r2
 801007c:	f300 80d5 	bgt.w	801022a <__ieee754_rem_pio2+0x2c2>
 8010080:	f000 fe20 	bl	8010cc4 <fabs>
 8010084:	a378      	add	r3, pc, #480	; (adr r3, 8010268 <__ieee754_rem_pio2+0x300>)
 8010086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008a:	4606      	mov	r6, r0
 801008c:	460f      	mov	r7, r1
 801008e:	f7f0 fa8f 	bl	80005b0 <__aeabi_dmul>
 8010092:	2200      	movs	r2, #0
 8010094:	4b7e      	ldr	r3, [pc, #504]	; (8010290 <__ieee754_rem_pio2+0x328>)
 8010096:	f7f0 f8d5 	bl	8000244 <__adddf3>
 801009a:	f7f0 fd39 	bl	8000b10 <__aeabi_d2iz>
 801009e:	4605      	mov	r5, r0
 80100a0:	f7f0 fa1c 	bl	80004dc <__aeabi_i2d>
 80100a4:	4602      	mov	r2, r0
 80100a6:	460b      	mov	r3, r1
 80100a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80100ac:	a366      	add	r3, pc, #408	; (adr r3, 8010248 <__ieee754_rem_pio2+0x2e0>)
 80100ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b2:	f7f0 fa7d 	bl	80005b0 <__aeabi_dmul>
 80100b6:	4602      	mov	r2, r0
 80100b8:	460b      	mov	r3, r1
 80100ba:	4630      	mov	r0, r6
 80100bc:	4639      	mov	r1, r7
 80100be:	f7f0 f8bf 	bl	8000240 <__aeabi_dsub>
 80100c2:	a363      	add	r3, pc, #396	; (adr r3, 8010250 <__ieee754_rem_pio2+0x2e8>)
 80100c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c8:	4680      	mov	r8, r0
 80100ca:	4689      	mov	r9, r1
 80100cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100d0:	f7f0 fa6e 	bl	80005b0 <__aeabi_dmul>
 80100d4:	2d1f      	cmp	r5, #31
 80100d6:	4606      	mov	r6, r0
 80100d8:	460f      	mov	r7, r1
 80100da:	dc0e      	bgt.n	80100fa <__ieee754_rem_pio2+0x192>
 80100dc:	4b6d      	ldr	r3, [pc, #436]	; (8010294 <__ieee754_rem_pio2+0x32c>)
 80100de:	1e6a      	subs	r2, r5, #1
 80100e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e4:	4553      	cmp	r3, sl
 80100e6:	d008      	beq.n	80100fa <__ieee754_rem_pio2+0x192>
 80100e8:	4632      	mov	r2, r6
 80100ea:	463b      	mov	r3, r7
 80100ec:	4640      	mov	r0, r8
 80100ee:	4649      	mov	r1, r9
 80100f0:	f7f0 f8a6 	bl	8000240 <__aeabi_dsub>
 80100f4:	e9c4 0100 	strd	r0, r1, [r4]
 80100f8:	e013      	b.n	8010122 <__ieee754_rem_pio2+0x1ba>
 80100fa:	463b      	mov	r3, r7
 80100fc:	4632      	mov	r2, r6
 80100fe:	4640      	mov	r0, r8
 8010100:	4649      	mov	r1, r9
 8010102:	f7f0 f89d 	bl	8000240 <__aeabi_dsub>
 8010106:	ea4f 532a 	mov.w	r3, sl, asr #20
 801010a:	9305      	str	r3, [sp, #20]
 801010c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010110:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8010114:	f1ba 0f10 	cmp.w	sl, #16
 8010118:	dc1f      	bgt.n	801015a <__ieee754_rem_pio2+0x1f2>
 801011a:	4602      	mov	r2, r0
 801011c:	460b      	mov	r3, r1
 801011e:	e9c4 2300 	strd	r2, r3, [r4]
 8010122:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8010126:	4640      	mov	r0, r8
 8010128:	4653      	mov	r3, sl
 801012a:	4649      	mov	r1, r9
 801012c:	f7f0 f888 	bl	8000240 <__aeabi_dsub>
 8010130:	4632      	mov	r2, r6
 8010132:	463b      	mov	r3, r7
 8010134:	f7f0 f884 	bl	8000240 <__aeabi_dsub>
 8010138:	460b      	mov	r3, r1
 801013a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801013e:	9904      	ldr	r1, [sp, #16]
 8010140:	4602      	mov	r2, r0
 8010142:	2900      	cmp	r1, #0
 8010144:	f6bf af47 	bge.w	800ffd6 <__ieee754_rem_pio2+0x6e>
 8010148:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 801014c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010150:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010154:	60e3      	str	r3, [r4, #12]
 8010156:	426d      	negs	r5, r5
 8010158:	e73d      	b.n	800ffd6 <__ieee754_rem_pio2+0x6e>
 801015a:	a33f      	add	r3, pc, #252	; (adr r3, 8010258 <__ieee754_rem_pio2+0x2f0>)
 801015c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010164:	f7f0 fa24 	bl	80005b0 <__aeabi_dmul>
 8010168:	4606      	mov	r6, r0
 801016a:	460f      	mov	r7, r1
 801016c:	4602      	mov	r2, r0
 801016e:	460b      	mov	r3, r1
 8010170:	4640      	mov	r0, r8
 8010172:	4649      	mov	r1, r9
 8010174:	f7f0 f864 	bl	8000240 <__aeabi_dsub>
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	4682      	mov	sl, r0
 801017e:	468b      	mov	fp, r1
 8010180:	4640      	mov	r0, r8
 8010182:	4649      	mov	r1, r9
 8010184:	f7f0 f85c 	bl	8000240 <__aeabi_dsub>
 8010188:	4632      	mov	r2, r6
 801018a:	463b      	mov	r3, r7
 801018c:	f7f0 f858 	bl	8000240 <__aeabi_dsub>
 8010190:	a333      	add	r3, pc, #204	; (adr r3, 8010260 <__ieee754_rem_pio2+0x2f8>)
 8010192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010196:	4606      	mov	r6, r0
 8010198:	460f      	mov	r7, r1
 801019a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801019e:	f7f0 fa07 	bl	80005b0 <__aeabi_dmul>
 80101a2:	4632      	mov	r2, r6
 80101a4:	463b      	mov	r3, r7
 80101a6:	f7f0 f84b 	bl	8000240 <__aeabi_dsub>
 80101aa:	4602      	mov	r2, r0
 80101ac:	460b      	mov	r3, r1
 80101ae:	4606      	mov	r6, r0
 80101b0:	460f      	mov	r7, r1
 80101b2:	4650      	mov	r0, sl
 80101b4:	4659      	mov	r1, fp
 80101b6:	f7f0 f843 	bl	8000240 <__aeabi_dsub>
 80101ba:	9a05      	ldr	r2, [sp, #20]
 80101bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	2b31      	cmp	r3, #49	; 0x31
 80101c4:	dc06      	bgt.n	80101d4 <__ieee754_rem_pio2+0x26c>
 80101c6:	4602      	mov	r2, r0
 80101c8:	460b      	mov	r3, r1
 80101ca:	46d0      	mov	r8, sl
 80101cc:	46d9      	mov	r9, fp
 80101ce:	e9c4 2300 	strd	r2, r3, [r4]
 80101d2:	e7a6      	b.n	8010122 <__ieee754_rem_pio2+0x1ba>
 80101d4:	a326      	add	r3, pc, #152	; (adr r3, 8010270 <__ieee754_rem_pio2+0x308>)
 80101d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101de:	f7f0 f9e7 	bl	80005b0 <__aeabi_dmul>
 80101e2:	4606      	mov	r6, r0
 80101e4:	460f      	mov	r7, r1
 80101e6:	4602      	mov	r2, r0
 80101e8:	460b      	mov	r3, r1
 80101ea:	4650      	mov	r0, sl
 80101ec:	4659      	mov	r1, fp
 80101ee:	f7f0 f827 	bl	8000240 <__aeabi_dsub>
 80101f2:	4602      	mov	r2, r0
 80101f4:	460b      	mov	r3, r1
 80101f6:	4680      	mov	r8, r0
 80101f8:	4689      	mov	r9, r1
 80101fa:	4650      	mov	r0, sl
 80101fc:	4659      	mov	r1, fp
 80101fe:	f7f0 f81f 	bl	8000240 <__aeabi_dsub>
 8010202:	4632      	mov	r2, r6
 8010204:	463b      	mov	r3, r7
 8010206:	f7f0 f81b 	bl	8000240 <__aeabi_dsub>
 801020a:	a31b      	add	r3, pc, #108	; (adr r3, 8010278 <__ieee754_rem_pio2+0x310>)
 801020c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010210:	4606      	mov	r6, r0
 8010212:	460f      	mov	r7, r1
 8010214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010218:	f7f0 f9ca 	bl	80005b0 <__aeabi_dmul>
 801021c:	4632      	mov	r2, r6
 801021e:	463b      	mov	r3, r7
 8010220:	f7f0 f80e 	bl	8000240 <__aeabi_dsub>
 8010224:	4606      	mov	r6, r0
 8010226:	460f      	mov	r7, r1
 8010228:	e75e      	b.n	80100e8 <__ieee754_rem_pio2+0x180>
 801022a:	4a1b      	ldr	r2, [pc, #108]	; (8010298 <__ieee754_rem_pio2+0x330>)
 801022c:	4592      	cmp	sl, r2
 801022e:	dd35      	ble.n	801029c <__ieee754_rem_pio2+0x334>
 8010230:	4602      	mov	r2, r0
 8010232:	460b      	mov	r3, r1
 8010234:	f7f0 f804 	bl	8000240 <__aeabi_dsub>
 8010238:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801023c:	e9c4 0100 	strd	r0, r1, [r4]
 8010240:	e6a2      	b.n	800ff88 <__ieee754_rem_pio2+0x20>
 8010242:	bf00      	nop
 8010244:	f3af 8000 	nop.w
 8010248:	54400000 	.word	0x54400000
 801024c:	3ff921fb 	.word	0x3ff921fb
 8010250:	1a626331 	.word	0x1a626331
 8010254:	3dd0b461 	.word	0x3dd0b461
 8010258:	1a600000 	.word	0x1a600000
 801025c:	3dd0b461 	.word	0x3dd0b461
 8010260:	2e037073 	.word	0x2e037073
 8010264:	3ba3198a 	.word	0x3ba3198a
 8010268:	6dc9c883 	.word	0x6dc9c883
 801026c:	3fe45f30 	.word	0x3fe45f30
 8010270:	2e000000 	.word	0x2e000000
 8010274:	3ba3198a 	.word	0x3ba3198a
 8010278:	252049c1 	.word	0x252049c1
 801027c:	397b839a 	.word	0x397b839a
 8010280:	3fe921fb 	.word	0x3fe921fb
 8010284:	4002d97b 	.word	0x4002d97b
 8010288:	3ff921fb 	.word	0x3ff921fb
 801028c:	413921fb 	.word	0x413921fb
 8010290:	3fe00000 	.word	0x3fe00000
 8010294:	08034f38 	.word	0x08034f38
 8010298:	7fefffff 	.word	0x7fefffff
 801029c:	ea4f 552a 	mov.w	r5, sl, asr #20
 80102a0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80102a4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80102a8:	460f      	mov	r7, r1
 80102aa:	4606      	mov	r6, r0
 80102ac:	f7f0 fc30 	bl	8000b10 <__aeabi_d2iz>
 80102b0:	f7f0 f914 	bl	80004dc <__aeabi_i2d>
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	4630      	mov	r0, r6
 80102ba:	4639      	mov	r1, r7
 80102bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80102c0:	f7ef ffbe 	bl	8000240 <__aeabi_dsub>
 80102c4:	2200      	movs	r2, #0
 80102c6:	4b22      	ldr	r3, [pc, #136]	; (8010350 <__ieee754_rem_pio2+0x3e8>)
 80102c8:	f7f0 f972 	bl	80005b0 <__aeabi_dmul>
 80102cc:	460f      	mov	r7, r1
 80102ce:	4606      	mov	r6, r0
 80102d0:	f7f0 fc1e 	bl	8000b10 <__aeabi_d2iz>
 80102d4:	f7f0 f902 	bl	80004dc <__aeabi_i2d>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	4630      	mov	r0, r6
 80102de:	4639      	mov	r1, r7
 80102e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80102e4:	f7ef ffac 	bl	8000240 <__aeabi_dsub>
 80102e8:	2200      	movs	r2, #0
 80102ea:	4b19      	ldr	r3, [pc, #100]	; (8010350 <__ieee754_rem_pio2+0x3e8>)
 80102ec:	f7f0 f960 	bl	80005b0 <__aeabi_dmul>
 80102f0:	f04f 0803 	mov.w	r8, #3
 80102f4:	2600      	movs	r6, #0
 80102f6:	2700      	movs	r7, #0
 80102f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80102fc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8010300:	4632      	mov	r2, r6
 8010302:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8010306:	463b      	mov	r3, r7
 8010308:	46c2      	mov	sl, r8
 801030a:	f108 38ff 	add.w	r8, r8, #4294967295
 801030e:	f7f0 fbb7 	bl	8000a80 <__aeabi_dcmpeq>
 8010312:	2800      	cmp	r0, #0
 8010314:	d1f4      	bne.n	8010300 <__ieee754_rem_pio2+0x398>
 8010316:	4b0f      	ldr	r3, [pc, #60]	; (8010354 <__ieee754_rem_pio2+0x3ec>)
 8010318:	462a      	mov	r2, r5
 801031a:	9301      	str	r3, [sp, #4]
 801031c:	2302      	movs	r3, #2
 801031e:	4621      	mov	r1, r4
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	a806      	add	r0, sp, #24
 8010324:	4653      	mov	r3, sl
 8010326:	f000 f8d5 	bl	80104d4 <__kernel_rem_pio2>
 801032a:	9b04      	ldr	r3, [sp, #16]
 801032c:	4605      	mov	r5, r0
 801032e:	2b00      	cmp	r3, #0
 8010330:	f6bf ae51 	bge.w	800ffd6 <__ieee754_rem_pio2+0x6e>
 8010334:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010338:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801033c:	e9c4 2300 	strd	r2, r3, [r4]
 8010340:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010344:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010348:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801034c:	e703      	b.n	8010156 <__ieee754_rem_pio2+0x1ee>
 801034e:	bf00      	nop
 8010350:	41700000 	.word	0x41700000
 8010354:	08034fb8 	.word	0x08034fb8

08010358 <__kernel_cos>:
 8010358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801035c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010360:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8010364:	4680      	mov	r8, r0
 8010366:	460f      	mov	r7, r1
 8010368:	e9cd 2300 	strd	r2, r3, [sp]
 801036c:	da04      	bge.n	8010378 <__kernel_cos+0x20>
 801036e:	f7f0 fbcf 	bl	8000b10 <__aeabi_d2iz>
 8010372:	2800      	cmp	r0, #0
 8010374:	f000 8086 	beq.w	8010484 <__kernel_cos+0x12c>
 8010378:	4642      	mov	r2, r8
 801037a:	463b      	mov	r3, r7
 801037c:	4640      	mov	r0, r8
 801037e:	4639      	mov	r1, r7
 8010380:	f7f0 f916 	bl	80005b0 <__aeabi_dmul>
 8010384:	2200      	movs	r2, #0
 8010386:	4b4e      	ldr	r3, [pc, #312]	; (80104c0 <__kernel_cos+0x168>)
 8010388:	4604      	mov	r4, r0
 801038a:	460d      	mov	r5, r1
 801038c:	f7f0 f910 	bl	80005b0 <__aeabi_dmul>
 8010390:	a33f      	add	r3, pc, #252	; (adr r3, 8010490 <__kernel_cos+0x138>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	4682      	mov	sl, r0
 8010398:	468b      	mov	fp, r1
 801039a:	4620      	mov	r0, r4
 801039c:	4629      	mov	r1, r5
 801039e:	f7f0 f907 	bl	80005b0 <__aeabi_dmul>
 80103a2:	a33d      	add	r3, pc, #244	; (adr r3, 8010498 <__kernel_cos+0x140>)
 80103a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a8:	f7ef ff4c 	bl	8000244 <__adddf3>
 80103ac:	4622      	mov	r2, r4
 80103ae:	462b      	mov	r3, r5
 80103b0:	f7f0 f8fe 	bl	80005b0 <__aeabi_dmul>
 80103b4:	a33a      	add	r3, pc, #232	; (adr r3, 80104a0 <__kernel_cos+0x148>)
 80103b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ba:	f7ef ff41 	bl	8000240 <__aeabi_dsub>
 80103be:	4622      	mov	r2, r4
 80103c0:	462b      	mov	r3, r5
 80103c2:	f7f0 f8f5 	bl	80005b0 <__aeabi_dmul>
 80103c6:	a338      	add	r3, pc, #224	; (adr r3, 80104a8 <__kernel_cos+0x150>)
 80103c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103cc:	f7ef ff3a 	bl	8000244 <__adddf3>
 80103d0:	4622      	mov	r2, r4
 80103d2:	462b      	mov	r3, r5
 80103d4:	f7f0 f8ec 	bl	80005b0 <__aeabi_dmul>
 80103d8:	a335      	add	r3, pc, #212	; (adr r3, 80104b0 <__kernel_cos+0x158>)
 80103da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103de:	f7ef ff2f 	bl	8000240 <__aeabi_dsub>
 80103e2:	4622      	mov	r2, r4
 80103e4:	462b      	mov	r3, r5
 80103e6:	f7f0 f8e3 	bl	80005b0 <__aeabi_dmul>
 80103ea:	a333      	add	r3, pc, #204	; (adr r3, 80104b8 <__kernel_cos+0x160>)
 80103ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f0:	f7ef ff28 	bl	8000244 <__adddf3>
 80103f4:	4622      	mov	r2, r4
 80103f6:	462b      	mov	r3, r5
 80103f8:	f7f0 f8da 	bl	80005b0 <__aeabi_dmul>
 80103fc:	4622      	mov	r2, r4
 80103fe:	462b      	mov	r3, r5
 8010400:	f7f0 f8d6 	bl	80005b0 <__aeabi_dmul>
 8010404:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010408:	4604      	mov	r4, r0
 801040a:	460d      	mov	r5, r1
 801040c:	4640      	mov	r0, r8
 801040e:	4639      	mov	r1, r7
 8010410:	f7f0 f8ce 	bl	80005b0 <__aeabi_dmul>
 8010414:	460b      	mov	r3, r1
 8010416:	4602      	mov	r2, r0
 8010418:	4629      	mov	r1, r5
 801041a:	4620      	mov	r0, r4
 801041c:	f7ef ff10 	bl	8000240 <__aeabi_dsub>
 8010420:	4b28      	ldr	r3, [pc, #160]	; (80104c4 <__kernel_cos+0x16c>)
 8010422:	4680      	mov	r8, r0
 8010424:	429e      	cmp	r6, r3
 8010426:	4689      	mov	r9, r1
 8010428:	dc0e      	bgt.n	8010448 <__kernel_cos+0xf0>
 801042a:	4602      	mov	r2, r0
 801042c:	460b      	mov	r3, r1
 801042e:	4650      	mov	r0, sl
 8010430:	4659      	mov	r1, fp
 8010432:	f7ef ff05 	bl	8000240 <__aeabi_dsub>
 8010436:	4602      	mov	r2, r0
 8010438:	2000      	movs	r0, #0
 801043a:	460b      	mov	r3, r1
 801043c:	4922      	ldr	r1, [pc, #136]	; (80104c8 <__kernel_cos+0x170>)
 801043e:	f7ef feff 	bl	8000240 <__aeabi_dsub>
 8010442:	b003      	add	sp, #12
 8010444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010448:	2400      	movs	r4, #0
 801044a:	4b20      	ldr	r3, [pc, #128]	; (80104cc <__kernel_cos+0x174>)
 801044c:	4622      	mov	r2, r4
 801044e:	429e      	cmp	r6, r3
 8010450:	bfcc      	ite	gt
 8010452:	4d1f      	ldrgt	r5, [pc, #124]	; (80104d0 <__kernel_cos+0x178>)
 8010454:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8010458:	462b      	mov	r3, r5
 801045a:	2000      	movs	r0, #0
 801045c:	491a      	ldr	r1, [pc, #104]	; (80104c8 <__kernel_cos+0x170>)
 801045e:	f7ef feef 	bl	8000240 <__aeabi_dsub>
 8010462:	4622      	mov	r2, r4
 8010464:	4606      	mov	r6, r0
 8010466:	460f      	mov	r7, r1
 8010468:	462b      	mov	r3, r5
 801046a:	4650      	mov	r0, sl
 801046c:	4659      	mov	r1, fp
 801046e:	f7ef fee7 	bl	8000240 <__aeabi_dsub>
 8010472:	4642      	mov	r2, r8
 8010474:	464b      	mov	r3, r9
 8010476:	f7ef fee3 	bl	8000240 <__aeabi_dsub>
 801047a:	4602      	mov	r2, r0
 801047c:	460b      	mov	r3, r1
 801047e:	4630      	mov	r0, r6
 8010480:	4639      	mov	r1, r7
 8010482:	e7dc      	b.n	801043e <__kernel_cos+0xe6>
 8010484:	2000      	movs	r0, #0
 8010486:	4910      	ldr	r1, [pc, #64]	; (80104c8 <__kernel_cos+0x170>)
 8010488:	e7db      	b.n	8010442 <__kernel_cos+0xea>
 801048a:	bf00      	nop
 801048c:	f3af 8000 	nop.w
 8010490:	be8838d4 	.word	0xbe8838d4
 8010494:	bda8fae9 	.word	0xbda8fae9
 8010498:	bdb4b1c4 	.word	0xbdb4b1c4
 801049c:	3e21ee9e 	.word	0x3e21ee9e
 80104a0:	809c52ad 	.word	0x809c52ad
 80104a4:	3e927e4f 	.word	0x3e927e4f
 80104a8:	19cb1590 	.word	0x19cb1590
 80104ac:	3efa01a0 	.word	0x3efa01a0
 80104b0:	16c15177 	.word	0x16c15177
 80104b4:	3f56c16c 	.word	0x3f56c16c
 80104b8:	5555554c 	.word	0x5555554c
 80104bc:	3fa55555 	.word	0x3fa55555
 80104c0:	3fe00000 	.word	0x3fe00000
 80104c4:	3fd33332 	.word	0x3fd33332
 80104c8:	3ff00000 	.word	0x3ff00000
 80104cc:	3fe90000 	.word	0x3fe90000
 80104d0:	3fd20000 	.word	0x3fd20000

080104d4 <__kernel_rem_pio2>:
 80104d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80104dc:	9308      	str	r3, [sp, #32]
 80104de:	9106      	str	r1, [sp, #24]
 80104e0:	4bb6      	ldr	r3, [pc, #728]	; (80107bc <__kernel_rem_pio2+0x2e8>)
 80104e2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80104e4:	f112 0f14 	cmn.w	r2, #20
 80104e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80104ec:	bfa8      	it	ge
 80104ee:	1ed4      	subge	r4, r2, #3
 80104f0:	9302      	str	r3, [sp, #8]
 80104f2:	9b08      	ldr	r3, [sp, #32]
 80104f4:	bfb8      	it	lt
 80104f6:	2400      	movlt	r4, #0
 80104f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80104fc:	9307      	str	r3, [sp, #28]
 80104fe:	bfa4      	itt	ge
 8010500:	2318      	movge	r3, #24
 8010502:	fb94 f4f3 	sdivge	r4, r4, r3
 8010506:	f06f 0317 	mvn.w	r3, #23
 801050a:	fb04 3303 	mla	r3, r4, r3, r3
 801050e:	eb03 0b02 	add.w	fp, r3, r2
 8010512:	9a07      	ldr	r2, [sp, #28]
 8010514:	9b02      	ldr	r3, [sp, #8]
 8010516:	1aa7      	subs	r7, r4, r2
 8010518:	eb03 0802 	add.w	r8, r3, r2
 801051c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801051e:	2500      	movs	r5, #0
 8010520:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010524:	2200      	movs	r2, #0
 8010526:	2300      	movs	r3, #0
 8010528:	9009      	str	r0, [sp, #36]	; 0x24
 801052a:	ae20      	add	r6, sp, #128	; 0x80
 801052c:	4545      	cmp	r5, r8
 801052e:	dd14      	ble.n	801055a <__kernel_rem_pio2+0x86>
 8010530:	f04f 0800 	mov.w	r8, #0
 8010534:	9a08      	ldr	r2, [sp, #32]
 8010536:	ab20      	add	r3, sp, #128	; 0x80
 8010538:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 801053c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8010540:	9b02      	ldr	r3, [sp, #8]
 8010542:	4598      	cmp	r8, r3
 8010544:	dc35      	bgt.n	80105b2 <__kernel_rem_pio2+0xde>
 8010546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010548:	2200      	movs	r2, #0
 801054a:	f1a3 0908 	sub.w	r9, r3, #8
 801054e:	2300      	movs	r3, #0
 8010550:	462f      	mov	r7, r5
 8010552:	2600      	movs	r6, #0
 8010554:	e9cd 2300 	strd	r2, r3, [sp]
 8010558:	e01f      	b.n	801059a <__kernel_rem_pio2+0xc6>
 801055a:	42ef      	cmn	r7, r5
 801055c:	d40b      	bmi.n	8010576 <__kernel_rem_pio2+0xa2>
 801055e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010562:	e9cd 2300 	strd	r2, r3, [sp]
 8010566:	f7ef ffb9 	bl	80004dc <__aeabi_i2d>
 801056a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801056e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010572:	3501      	adds	r5, #1
 8010574:	e7da      	b.n	801052c <__kernel_rem_pio2+0x58>
 8010576:	4610      	mov	r0, r2
 8010578:	4619      	mov	r1, r3
 801057a:	e7f8      	b.n	801056e <__kernel_rem_pio2+0x9a>
 801057c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010580:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8010584:	f7f0 f814 	bl	80005b0 <__aeabi_dmul>
 8010588:	4602      	mov	r2, r0
 801058a:	460b      	mov	r3, r1
 801058c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010590:	f7ef fe58 	bl	8000244 <__adddf3>
 8010594:	e9cd 0100 	strd	r0, r1, [sp]
 8010598:	3601      	adds	r6, #1
 801059a:	9b07      	ldr	r3, [sp, #28]
 801059c:	3f08      	subs	r7, #8
 801059e:	429e      	cmp	r6, r3
 80105a0:	ddec      	ble.n	801057c <__kernel_rem_pio2+0xa8>
 80105a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105a6:	f108 0801 	add.w	r8, r8, #1
 80105aa:	e8ea 2302 	strd	r2, r3, [sl], #8
 80105ae:	3508      	adds	r5, #8
 80105b0:	e7c6      	b.n	8010540 <__kernel_rem_pio2+0x6c>
 80105b2:	9b02      	ldr	r3, [sp, #8]
 80105b4:	aa0c      	add	r2, sp, #48	; 0x30
 80105b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80105ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80105bc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80105be:	9e02      	ldr	r6, [sp, #8]
 80105c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80105c4:	930a      	str	r3, [sp, #40]	; 0x28
 80105c6:	ab98      	add	r3, sp, #608	; 0x260
 80105c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80105cc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80105d0:	ab70      	add	r3, sp, #448	; 0x1c0
 80105d2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80105d6:	46d0      	mov	r8, sl
 80105d8:	46b1      	mov	r9, r6
 80105da:	af0c      	add	r7, sp, #48	; 0x30
 80105dc:	9700      	str	r7, [sp, #0]
 80105de:	f1b9 0f00 	cmp.w	r9, #0
 80105e2:	f1a8 0808 	sub.w	r8, r8, #8
 80105e6:	dc71      	bgt.n	80106cc <__kernel_rem_pio2+0x1f8>
 80105e8:	465a      	mov	r2, fp
 80105ea:	4620      	mov	r0, r4
 80105ec:	4629      	mov	r1, r5
 80105ee:	f000 fbef 	bl	8010dd0 <scalbn>
 80105f2:	2200      	movs	r2, #0
 80105f4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80105f8:	4604      	mov	r4, r0
 80105fa:	460d      	mov	r5, r1
 80105fc:	f7ef ffd8 	bl	80005b0 <__aeabi_dmul>
 8010600:	f000 fb66 	bl	8010cd0 <floor>
 8010604:	2200      	movs	r2, #0
 8010606:	4b6e      	ldr	r3, [pc, #440]	; (80107c0 <__kernel_rem_pio2+0x2ec>)
 8010608:	f7ef ffd2 	bl	80005b0 <__aeabi_dmul>
 801060c:	4602      	mov	r2, r0
 801060e:	460b      	mov	r3, r1
 8010610:	4620      	mov	r0, r4
 8010612:	4629      	mov	r1, r5
 8010614:	f7ef fe14 	bl	8000240 <__aeabi_dsub>
 8010618:	460d      	mov	r5, r1
 801061a:	4604      	mov	r4, r0
 801061c:	f7f0 fa78 	bl	8000b10 <__aeabi_d2iz>
 8010620:	9004      	str	r0, [sp, #16]
 8010622:	f7ef ff5b 	bl	80004dc <__aeabi_i2d>
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	4620      	mov	r0, r4
 801062c:	4629      	mov	r1, r5
 801062e:	f7ef fe07 	bl	8000240 <__aeabi_dsub>
 8010632:	f1bb 0f00 	cmp.w	fp, #0
 8010636:	4680      	mov	r8, r0
 8010638:	4689      	mov	r9, r1
 801063a:	dd70      	ble.n	801071e <__kernel_rem_pio2+0x24a>
 801063c:	1e72      	subs	r2, r6, #1
 801063e:	ab0c      	add	r3, sp, #48	; 0x30
 8010640:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010644:	9c04      	ldr	r4, [sp, #16]
 8010646:	f1cb 0118 	rsb	r1, fp, #24
 801064a:	fa40 f301 	asr.w	r3, r0, r1
 801064e:	441c      	add	r4, r3
 8010650:	408b      	lsls	r3, r1
 8010652:	1ac0      	subs	r0, r0, r3
 8010654:	ab0c      	add	r3, sp, #48	; 0x30
 8010656:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801065a:	f1cb 0317 	rsb	r3, fp, #23
 801065e:	9404      	str	r4, [sp, #16]
 8010660:	fa40 f303 	asr.w	r3, r0, r3
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	9b00      	ldr	r3, [sp, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	dd66      	ble.n	801073a <__kernel_rem_pio2+0x266>
 801066c:	2200      	movs	r2, #0
 801066e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010672:	4614      	mov	r4, r2
 8010674:	9b04      	ldr	r3, [sp, #16]
 8010676:	3301      	adds	r3, #1
 8010678:	9304      	str	r3, [sp, #16]
 801067a:	4296      	cmp	r6, r2
 801067c:	f300 80ac 	bgt.w	80107d8 <__kernel_rem_pio2+0x304>
 8010680:	f1bb 0f00 	cmp.w	fp, #0
 8010684:	dd07      	ble.n	8010696 <__kernel_rem_pio2+0x1c2>
 8010686:	f1bb 0f01 	cmp.w	fp, #1
 801068a:	f000 80b4 	beq.w	80107f6 <__kernel_rem_pio2+0x322>
 801068e:	f1bb 0f02 	cmp.w	fp, #2
 8010692:	f000 80ba 	beq.w	801080a <__kernel_rem_pio2+0x336>
 8010696:	9b00      	ldr	r3, [sp, #0]
 8010698:	2b02      	cmp	r3, #2
 801069a:	d14e      	bne.n	801073a <__kernel_rem_pio2+0x266>
 801069c:	4642      	mov	r2, r8
 801069e:	464b      	mov	r3, r9
 80106a0:	2000      	movs	r0, #0
 80106a2:	4948      	ldr	r1, [pc, #288]	; (80107c4 <__kernel_rem_pio2+0x2f0>)
 80106a4:	f7ef fdcc 	bl	8000240 <__aeabi_dsub>
 80106a8:	4680      	mov	r8, r0
 80106aa:	4689      	mov	r9, r1
 80106ac:	2c00      	cmp	r4, #0
 80106ae:	d044      	beq.n	801073a <__kernel_rem_pio2+0x266>
 80106b0:	465a      	mov	r2, fp
 80106b2:	2000      	movs	r0, #0
 80106b4:	4943      	ldr	r1, [pc, #268]	; (80107c4 <__kernel_rem_pio2+0x2f0>)
 80106b6:	f000 fb8b 	bl	8010dd0 <scalbn>
 80106ba:	4602      	mov	r2, r0
 80106bc:	460b      	mov	r3, r1
 80106be:	4640      	mov	r0, r8
 80106c0:	4649      	mov	r1, r9
 80106c2:	f7ef fdbd 	bl	8000240 <__aeabi_dsub>
 80106c6:	4680      	mov	r8, r0
 80106c8:	4689      	mov	r9, r1
 80106ca:	e036      	b.n	801073a <__kernel_rem_pio2+0x266>
 80106cc:	2200      	movs	r2, #0
 80106ce:	4b3e      	ldr	r3, [pc, #248]	; (80107c8 <__kernel_rem_pio2+0x2f4>)
 80106d0:	4620      	mov	r0, r4
 80106d2:	4629      	mov	r1, r5
 80106d4:	f7ef ff6c 	bl	80005b0 <__aeabi_dmul>
 80106d8:	f7f0 fa1a 	bl	8000b10 <__aeabi_d2iz>
 80106dc:	f7ef fefe 	bl	80004dc <__aeabi_i2d>
 80106e0:	4602      	mov	r2, r0
 80106e2:	460b      	mov	r3, r1
 80106e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80106e8:	2200      	movs	r2, #0
 80106ea:	4b38      	ldr	r3, [pc, #224]	; (80107cc <__kernel_rem_pio2+0x2f8>)
 80106ec:	f7ef ff60 	bl	80005b0 <__aeabi_dmul>
 80106f0:	4602      	mov	r2, r0
 80106f2:	460b      	mov	r3, r1
 80106f4:	4620      	mov	r0, r4
 80106f6:	4629      	mov	r1, r5
 80106f8:	f7ef fda2 	bl	8000240 <__aeabi_dsub>
 80106fc:	f7f0 fa08 	bl	8000b10 <__aeabi_d2iz>
 8010700:	9b00      	ldr	r3, [sp, #0]
 8010702:	f109 39ff 	add.w	r9, r9, #4294967295
 8010706:	f843 0b04 	str.w	r0, [r3], #4
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010710:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010714:	f7ef fd96 	bl	8000244 <__adddf3>
 8010718:	4604      	mov	r4, r0
 801071a:	460d      	mov	r5, r1
 801071c:	e75f      	b.n	80105de <__kernel_rem_pio2+0x10a>
 801071e:	d105      	bne.n	801072c <__kernel_rem_pio2+0x258>
 8010720:	1e73      	subs	r3, r6, #1
 8010722:	aa0c      	add	r2, sp, #48	; 0x30
 8010724:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010728:	15c3      	asrs	r3, r0, #23
 801072a:	e79b      	b.n	8010664 <__kernel_rem_pio2+0x190>
 801072c:	2200      	movs	r2, #0
 801072e:	4b28      	ldr	r3, [pc, #160]	; (80107d0 <__kernel_rem_pio2+0x2fc>)
 8010730:	f7f0 f9c4 	bl	8000abc <__aeabi_dcmpge>
 8010734:	2800      	cmp	r0, #0
 8010736:	d13e      	bne.n	80107b6 <__kernel_rem_pio2+0x2e2>
 8010738:	9000      	str	r0, [sp, #0]
 801073a:	2200      	movs	r2, #0
 801073c:	2300      	movs	r3, #0
 801073e:	4640      	mov	r0, r8
 8010740:	4649      	mov	r1, r9
 8010742:	f7f0 f99d 	bl	8000a80 <__aeabi_dcmpeq>
 8010746:	2800      	cmp	r0, #0
 8010748:	f000 80b1 	beq.w	80108ae <__kernel_rem_pio2+0x3da>
 801074c:	1e74      	subs	r4, r6, #1
 801074e:	4623      	mov	r3, r4
 8010750:	2200      	movs	r2, #0
 8010752:	9902      	ldr	r1, [sp, #8]
 8010754:	428b      	cmp	r3, r1
 8010756:	da5f      	bge.n	8010818 <__kernel_rem_pio2+0x344>
 8010758:	2a00      	cmp	r2, #0
 801075a:	d074      	beq.n	8010846 <__kernel_rem_pio2+0x372>
 801075c:	ab0c      	add	r3, sp, #48	; 0x30
 801075e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010762:	f1ab 0b18 	sub.w	fp, fp, #24
 8010766:	2b00      	cmp	r3, #0
 8010768:	f000 809f 	beq.w	80108aa <__kernel_rem_pio2+0x3d6>
 801076c:	465a      	mov	r2, fp
 801076e:	2000      	movs	r0, #0
 8010770:	4914      	ldr	r1, [pc, #80]	; (80107c4 <__kernel_rem_pio2+0x2f0>)
 8010772:	f000 fb2d 	bl	8010dd0 <scalbn>
 8010776:	46a2      	mov	sl, r4
 8010778:	4606      	mov	r6, r0
 801077a:	460f      	mov	r7, r1
 801077c:	f04f 0800 	mov.w	r8, #0
 8010780:	ab70      	add	r3, sp, #448	; 0x1c0
 8010782:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80107c8 <__kernel_rem_pio2+0x2f4>
 8010786:	00e5      	lsls	r5, r4, #3
 8010788:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 801078c:	f1ba 0f00 	cmp.w	sl, #0
 8010790:	f280 80c3 	bge.w	801091a <__kernel_rem_pio2+0x446>
 8010794:	4626      	mov	r6, r4
 8010796:	2e00      	cmp	r6, #0
 8010798:	f2c0 80f5 	blt.w	8010986 <__kernel_rem_pio2+0x4b2>
 801079c:	4b0d      	ldr	r3, [pc, #52]	; (80107d4 <__kernel_rem_pio2+0x300>)
 801079e:	f04f 0a00 	mov.w	sl, #0
 80107a2:	9307      	str	r3, [sp, #28]
 80107a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80107a6:	f04f 0b00 	mov.w	fp, #0
 80107aa:	f04f 0800 	mov.w	r8, #0
 80107ae:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80107b2:	1ba7      	subs	r7, r4, r6
 80107b4:	e0db      	b.n	801096e <__kernel_rem_pio2+0x49a>
 80107b6:	2302      	movs	r3, #2
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	e757      	b.n	801066c <__kernel_rem_pio2+0x198>
 80107bc:	08035100 	.word	0x08035100
 80107c0:	40200000 	.word	0x40200000
 80107c4:	3ff00000 	.word	0x3ff00000
 80107c8:	3e700000 	.word	0x3e700000
 80107cc:	41700000 	.word	0x41700000
 80107d0:	3fe00000 	.word	0x3fe00000
 80107d4:	080350c0 	.word	0x080350c0
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	b944      	cbnz	r4, 80107ee <__kernel_rem_pio2+0x31a>
 80107dc:	b11b      	cbz	r3, 80107e6 <__kernel_rem_pio2+0x312>
 80107de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80107e2:	603b      	str	r3, [r7, #0]
 80107e4:	2301      	movs	r3, #1
 80107e6:	461c      	mov	r4, r3
 80107e8:	3201      	adds	r2, #1
 80107ea:	3704      	adds	r7, #4
 80107ec:	e745      	b.n	801067a <__kernel_rem_pio2+0x1a6>
 80107ee:	1acb      	subs	r3, r1, r3
 80107f0:	603b      	str	r3, [r7, #0]
 80107f2:	4623      	mov	r3, r4
 80107f4:	e7f7      	b.n	80107e6 <__kernel_rem_pio2+0x312>
 80107f6:	1e72      	subs	r2, r6, #1
 80107f8:	ab0c      	add	r3, sp, #48	; 0x30
 80107fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010802:	a90c      	add	r1, sp, #48	; 0x30
 8010804:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010808:	e745      	b.n	8010696 <__kernel_rem_pio2+0x1c2>
 801080a:	1e72      	subs	r2, r6, #1
 801080c:	ab0c      	add	r3, sp, #48	; 0x30
 801080e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010812:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010816:	e7f4      	b.n	8010802 <__kernel_rem_pio2+0x32e>
 8010818:	a90c      	add	r1, sp, #48	; 0x30
 801081a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801081e:	3b01      	subs	r3, #1
 8010820:	430a      	orrs	r2, r1
 8010822:	e796      	b.n	8010752 <__kernel_rem_pio2+0x27e>
 8010824:	3401      	adds	r4, #1
 8010826:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801082a:	2a00      	cmp	r2, #0
 801082c:	d0fa      	beq.n	8010824 <__kernel_rem_pio2+0x350>
 801082e:	9b08      	ldr	r3, [sp, #32]
 8010830:	f106 0801 	add.w	r8, r6, #1
 8010834:	18f5      	adds	r5, r6, r3
 8010836:	ab20      	add	r3, sp, #128	; 0x80
 8010838:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801083c:	4434      	add	r4, r6
 801083e:	4544      	cmp	r4, r8
 8010840:	da04      	bge.n	801084c <__kernel_rem_pio2+0x378>
 8010842:	4626      	mov	r6, r4
 8010844:	e6bf      	b.n	80105c6 <__kernel_rem_pio2+0xf2>
 8010846:	2401      	movs	r4, #1
 8010848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801084a:	e7ec      	b.n	8010826 <__kernel_rem_pio2+0x352>
 801084c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801084e:	f04f 0900 	mov.w	r9, #0
 8010852:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010856:	f7ef fe41 	bl	80004dc <__aeabi_i2d>
 801085a:	2600      	movs	r6, #0
 801085c:	2700      	movs	r7, #0
 801085e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010860:	e9c5 0100 	strd	r0, r1, [r5]
 8010864:	3b08      	subs	r3, #8
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	9504      	str	r5, [sp, #16]
 801086a:	9b07      	ldr	r3, [sp, #28]
 801086c:	4599      	cmp	r9, r3
 801086e:	dd05      	ble.n	801087c <__kernel_rem_pio2+0x3a8>
 8010870:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8010874:	f108 0801 	add.w	r8, r8, #1
 8010878:	3508      	adds	r5, #8
 801087a:	e7e0      	b.n	801083e <__kernel_rem_pio2+0x36a>
 801087c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8010880:	9900      	ldr	r1, [sp, #0]
 8010882:	f109 0901 	add.w	r9, r9, #1
 8010886:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 801088a:	9100      	str	r1, [sp, #0]
 801088c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8010890:	f8cd c010 	str.w	ip, [sp, #16]
 8010894:	f7ef fe8c 	bl	80005b0 <__aeabi_dmul>
 8010898:	4602      	mov	r2, r0
 801089a:	460b      	mov	r3, r1
 801089c:	4630      	mov	r0, r6
 801089e:	4639      	mov	r1, r7
 80108a0:	f7ef fcd0 	bl	8000244 <__adddf3>
 80108a4:	4606      	mov	r6, r0
 80108a6:	460f      	mov	r7, r1
 80108a8:	e7df      	b.n	801086a <__kernel_rem_pio2+0x396>
 80108aa:	3c01      	subs	r4, #1
 80108ac:	e756      	b.n	801075c <__kernel_rem_pio2+0x288>
 80108ae:	f1cb 0200 	rsb	r2, fp, #0
 80108b2:	4640      	mov	r0, r8
 80108b4:	4649      	mov	r1, r9
 80108b6:	f000 fa8b 	bl	8010dd0 <scalbn>
 80108ba:	2200      	movs	r2, #0
 80108bc:	4ba4      	ldr	r3, [pc, #656]	; (8010b50 <__kernel_rem_pio2+0x67c>)
 80108be:	4604      	mov	r4, r0
 80108c0:	460d      	mov	r5, r1
 80108c2:	f7f0 f8fb 	bl	8000abc <__aeabi_dcmpge>
 80108c6:	b1f8      	cbz	r0, 8010908 <__kernel_rem_pio2+0x434>
 80108c8:	2200      	movs	r2, #0
 80108ca:	4ba2      	ldr	r3, [pc, #648]	; (8010b54 <__kernel_rem_pio2+0x680>)
 80108cc:	4620      	mov	r0, r4
 80108ce:	4629      	mov	r1, r5
 80108d0:	f7ef fe6e 	bl	80005b0 <__aeabi_dmul>
 80108d4:	f7f0 f91c 	bl	8000b10 <__aeabi_d2iz>
 80108d8:	4607      	mov	r7, r0
 80108da:	f7ef fdff 	bl	80004dc <__aeabi_i2d>
 80108de:	2200      	movs	r2, #0
 80108e0:	4b9b      	ldr	r3, [pc, #620]	; (8010b50 <__kernel_rem_pio2+0x67c>)
 80108e2:	f7ef fe65 	bl	80005b0 <__aeabi_dmul>
 80108e6:	460b      	mov	r3, r1
 80108e8:	4602      	mov	r2, r0
 80108ea:	4629      	mov	r1, r5
 80108ec:	4620      	mov	r0, r4
 80108ee:	f7ef fca7 	bl	8000240 <__aeabi_dsub>
 80108f2:	f7f0 f90d 	bl	8000b10 <__aeabi_d2iz>
 80108f6:	1c74      	adds	r4, r6, #1
 80108f8:	ab0c      	add	r3, sp, #48	; 0x30
 80108fa:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80108fe:	f10b 0b18 	add.w	fp, fp, #24
 8010902:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8010906:	e731      	b.n	801076c <__kernel_rem_pio2+0x298>
 8010908:	4620      	mov	r0, r4
 801090a:	4629      	mov	r1, r5
 801090c:	f7f0 f900 	bl	8000b10 <__aeabi_d2iz>
 8010910:	ab0c      	add	r3, sp, #48	; 0x30
 8010912:	4634      	mov	r4, r6
 8010914:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8010918:	e728      	b.n	801076c <__kernel_rem_pio2+0x298>
 801091a:	ab0c      	add	r3, sp, #48	; 0x30
 801091c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010920:	f7ef fddc 	bl	80004dc <__aeabi_i2d>
 8010924:	4632      	mov	r2, r6
 8010926:	463b      	mov	r3, r7
 8010928:	f7ef fe42 	bl	80005b0 <__aeabi_dmul>
 801092c:	4642      	mov	r2, r8
 801092e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8010932:	464b      	mov	r3, r9
 8010934:	4630      	mov	r0, r6
 8010936:	4639      	mov	r1, r7
 8010938:	f7ef fe3a 	bl	80005b0 <__aeabi_dmul>
 801093c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010940:	4606      	mov	r6, r0
 8010942:	460f      	mov	r7, r1
 8010944:	e722      	b.n	801078c <__kernel_rem_pio2+0x2b8>
 8010946:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801094a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801094e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8010952:	f8cd c01c 	str.w	ip, [sp, #28]
 8010956:	f7ef fe2b 	bl	80005b0 <__aeabi_dmul>
 801095a:	4602      	mov	r2, r0
 801095c:	460b      	mov	r3, r1
 801095e:	4650      	mov	r0, sl
 8010960:	4659      	mov	r1, fp
 8010962:	f7ef fc6f 	bl	8000244 <__adddf3>
 8010966:	4682      	mov	sl, r0
 8010968:	468b      	mov	fp, r1
 801096a:	f108 0801 	add.w	r8, r8, #1
 801096e:	9b02      	ldr	r3, [sp, #8]
 8010970:	4598      	cmp	r8, r3
 8010972:	dc01      	bgt.n	8010978 <__kernel_rem_pio2+0x4a4>
 8010974:	45b8      	cmp	r8, r7
 8010976:	dde6      	ble.n	8010946 <__kernel_rem_pio2+0x472>
 8010978:	ab48      	add	r3, sp, #288	; 0x120
 801097a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801097e:	e9c7 ab00 	strd	sl, fp, [r7]
 8010982:	3e01      	subs	r6, #1
 8010984:	e707      	b.n	8010796 <__kernel_rem_pio2+0x2c2>
 8010986:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8010988:	2b02      	cmp	r3, #2
 801098a:	dc09      	bgt.n	80109a0 <__kernel_rem_pio2+0x4cc>
 801098c:	2b00      	cmp	r3, #0
 801098e:	dc32      	bgt.n	80109f6 <__kernel_rem_pio2+0x522>
 8010990:	d05a      	beq.n	8010a48 <__kernel_rem_pio2+0x574>
 8010992:	9b04      	ldr	r3, [sp, #16]
 8010994:	f003 0007 	and.w	r0, r3, #7
 8010998:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80109a2:	2b03      	cmp	r3, #3
 80109a4:	d1f5      	bne.n	8010992 <__kernel_rem_pio2+0x4be>
 80109a6:	ab48      	add	r3, sp, #288	; 0x120
 80109a8:	441d      	add	r5, r3
 80109aa:	46aa      	mov	sl, r5
 80109ac:	46a3      	mov	fp, r4
 80109ae:	f1bb 0f00 	cmp.w	fp, #0
 80109b2:	dc76      	bgt.n	8010aa2 <__kernel_rem_pio2+0x5ce>
 80109b4:	46aa      	mov	sl, r5
 80109b6:	46a3      	mov	fp, r4
 80109b8:	f1bb 0f01 	cmp.w	fp, #1
 80109bc:	f300 8090 	bgt.w	8010ae0 <__kernel_rem_pio2+0x60c>
 80109c0:	2700      	movs	r7, #0
 80109c2:	463e      	mov	r6, r7
 80109c4:	2c01      	cmp	r4, #1
 80109c6:	f300 80aa 	bgt.w	8010b1e <__kernel_rem_pio2+0x64a>
 80109ca:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80109ce:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80109d2:	9b00      	ldr	r3, [sp, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f040 80ac 	bne.w	8010b32 <__kernel_rem_pio2+0x65e>
 80109da:	4603      	mov	r3, r0
 80109dc:	462a      	mov	r2, r5
 80109de:	9806      	ldr	r0, [sp, #24]
 80109e0:	e9c0 2300 	strd	r2, r3, [r0]
 80109e4:	4622      	mov	r2, r4
 80109e6:	460b      	mov	r3, r1
 80109e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80109ec:	463a      	mov	r2, r7
 80109ee:	4633      	mov	r3, r6
 80109f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80109f4:	e7cd      	b.n	8010992 <__kernel_rem_pio2+0x4be>
 80109f6:	2000      	movs	r0, #0
 80109f8:	46a0      	mov	r8, r4
 80109fa:	4601      	mov	r1, r0
 80109fc:	ab48      	add	r3, sp, #288	; 0x120
 80109fe:	441d      	add	r5, r3
 8010a00:	f1b8 0f00 	cmp.w	r8, #0
 8010a04:	da3a      	bge.n	8010a7c <__kernel_rem_pio2+0x5a8>
 8010a06:	9b00      	ldr	r3, [sp, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d03e      	beq.n	8010a8a <__kernel_rem_pio2+0x5b6>
 8010a0c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8010a10:	4602      	mov	r2, r0
 8010a12:	462b      	mov	r3, r5
 8010a14:	9d06      	ldr	r5, [sp, #24]
 8010a16:	2601      	movs	r6, #1
 8010a18:	e9c5 2300 	strd	r2, r3, [r5]
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010a22:	f7ef fc0d 	bl	8000240 <__aeabi_dsub>
 8010a26:	4684      	mov	ip, r0
 8010a28:	460f      	mov	r7, r1
 8010a2a:	ad48      	add	r5, sp, #288	; 0x120
 8010a2c:	42b4      	cmp	r4, r6
 8010a2e:	f105 0508 	add.w	r5, r5, #8
 8010a32:	da2c      	bge.n	8010a8e <__kernel_rem_pio2+0x5ba>
 8010a34:	9b00      	ldr	r3, [sp, #0]
 8010a36:	b10b      	cbz	r3, 8010a3c <__kernel_rem_pio2+0x568>
 8010a38:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8010a3c:	4662      	mov	r2, ip
 8010a3e:	463b      	mov	r3, r7
 8010a40:	9906      	ldr	r1, [sp, #24]
 8010a42:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8010a46:	e7a4      	b.n	8010992 <__kernel_rem_pio2+0x4be>
 8010a48:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8010a4a:	ab48      	add	r3, sp, #288	; 0x120
 8010a4c:	4637      	mov	r7, r6
 8010a4e:	441d      	add	r5, r3
 8010a50:	2c00      	cmp	r4, #0
 8010a52:	da09      	bge.n	8010a68 <__kernel_rem_pio2+0x594>
 8010a54:	9b00      	ldr	r3, [sp, #0]
 8010a56:	b10b      	cbz	r3, 8010a5c <__kernel_rem_pio2+0x588>
 8010a58:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8010a5c:	4632      	mov	r2, r6
 8010a5e:	463b      	mov	r3, r7
 8010a60:	9906      	ldr	r1, [sp, #24]
 8010a62:	e9c1 2300 	strd	r2, r3, [r1]
 8010a66:	e794      	b.n	8010992 <__kernel_rem_pio2+0x4be>
 8010a68:	4630      	mov	r0, r6
 8010a6a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8010a6e:	4639      	mov	r1, r7
 8010a70:	f7ef fbe8 	bl	8000244 <__adddf3>
 8010a74:	3c01      	subs	r4, #1
 8010a76:	4606      	mov	r6, r0
 8010a78:	460f      	mov	r7, r1
 8010a7a:	e7e9      	b.n	8010a50 <__kernel_rem_pio2+0x57c>
 8010a7c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8010a80:	f7ef fbe0 	bl	8000244 <__adddf3>
 8010a84:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a88:	e7ba      	b.n	8010a00 <__kernel_rem_pio2+0x52c>
 8010a8a:	460d      	mov	r5, r1
 8010a8c:	e7c0      	b.n	8010a10 <__kernel_rem_pio2+0x53c>
 8010a8e:	4660      	mov	r0, ip
 8010a90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a94:	4639      	mov	r1, r7
 8010a96:	f7ef fbd5 	bl	8000244 <__adddf3>
 8010a9a:	3601      	adds	r6, #1
 8010a9c:	4684      	mov	ip, r0
 8010a9e:	460f      	mov	r7, r1
 8010aa0:	e7c4      	b.n	8010a2c <__kernel_rem_pio2+0x558>
 8010aa2:	e9da 6700 	ldrd	r6, r7, [sl]
 8010aa6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8010aaa:	4632      	mov	r2, r6
 8010aac:	463b      	mov	r3, r7
 8010aae:	4640      	mov	r0, r8
 8010ab0:	4649      	mov	r1, r9
 8010ab2:	f7ef fbc7 	bl	8000244 <__adddf3>
 8010ab6:	4602      	mov	r2, r0
 8010ab8:	460b      	mov	r3, r1
 8010aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010abe:	4640      	mov	r0, r8
 8010ac0:	4649      	mov	r1, r9
 8010ac2:	f7ef fbbd 	bl	8000240 <__aeabi_dsub>
 8010ac6:	4632      	mov	r2, r6
 8010ac8:	463b      	mov	r3, r7
 8010aca:	f7ef fbbb 	bl	8000244 <__adddf3>
 8010ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ad2:	e86a 0102 	strd	r0, r1, [sl], #-8
 8010ad6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010ada:	e9ca 2300 	strd	r2, r3, [sl]
 8010ade:	e766      	b.n	80109ae <__kernel_rem_pio2+0x4da>
 8010ae0:	e9da 8900 	ldrd	r8, r9, [sl]
 8010ae4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8010ae8:	4642      	mov	r2, r8
 8010aea:	464b      	mov	r3, r9
 8010aec:	4630      	mov	r0, r6
 8010aee:	4639      	mov	r1, r7
 8010af0:	f7ef fba8 	bl	8000244 <__adddf3>
 8010af4:	4602      	mov	r2, r0
 8010af6:	460b      	mov	r3, r1
 8010af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010afc:	4630      	mov	r0, r6
 8010afe:	4639      	mov	r1, r7
 8010b00:	f7ef fb9e 	bl	8000240 <__aeabi_dsub>
 8010b04:	4642      	mov	r2, r8
 8010b06:	464b      	mov	r3, r9
 8010b08:	f7ef fb9c 	bl	8000244 <__adddf3>
 8010b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b10:	e86a 0102 	strd	r0, r1, [sl], #-8
 8010b14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b18:	e9ca 2300 	strd	r2, r3, [sl]
 8010b1c:	e74c      	b.n	80109b8 <__kernel_rem_pio2+0x4e4>
 8010b1e:	4638      	mov	r0, r7
 8010b20:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8010b24:	4631      	mov	r1, r6
 8010b26:	f7ef fb8d 	bl	8000244 <__adddf3>
 8010b2a:	3c01      	subs	r4, #1
 8010b2c:	4607      	mov	r7, r0
 8010b2e:	460e      	mov	r6, r1
 8010b30:	e748      	b.n	80109c4 <__kernel_rem_pio2+0x4f0>
 8010b32:	9b06      	ldr	r3, [sp, #24]
 8010b34:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010b38:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8010b3c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8010b40:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8010b44:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8010b48:	601d      	str	r5, [r3, #0]
 8010b4a:	615e      	str	r6, [r3, #20]
 8010b4c:	e721      	b.n	8010992 <__kernel_rem_pio2+0x4be>
 8010b4e:	bf00      	nop
 8010b50:	41700000 	.word	0x41700000
 8010b54:	3e700000 	.word	0x3e700000

08010b58 <__kernel_sin>:
 8010b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b5c:	b086      	sub	sp, #24
 8010b5e:	e9cd 2300 	strd	r2, r3, [sp]
 8010b62:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010b66:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010b6a:	4682      	mov	sl, r0
 8010b6c:	460c      	mov	r4, r1
 8010b6e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010b70:	da03      	bge.n	8010b7a <__kernel_sin+0x22>
 8010b72:	f7ef ffcd 	bl	8000b10 <__aeabi_d2iz>
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d050      	beq.n	8010c1c <__kernel_sin+0xc4>
 8010b7a:	4652      	mov	r2, sl
 8010b7c:	4623      	mov	r3, r4
 8010b7e:	4650      	mov	r0, sl
 8010b80:	4621      	mov	r1, r4
 8010b82:	f7ef fd15 	bl	80005b0 <__aeabi_dmul>
 8010b86:	4606      	mov	r6, r0
 8010b88:	460f      	mov	r7, r1
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	4650      	mov	r0, sl
 8010b90:	4621      	mov	r1, r4
 8010b92:	f7ef fd0d 	bl	80005b0 <__aeabi_dmul>
 8010b96:	a33e      	add	r3, pc, #248	; (adr r3, 8010c90 <__kernel_sin+0x138>)
 8010b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9c:	4680      	mov	r8, r0
 8010b9e:	4689      	mov	r9, r1
 8010ba0:	4630      	mov	r0, r6
 8010ba2:	4639      	mov	r1, r7
 8010ba4:	f7ef fd04 	bl	80005b0 <__aeabi_dmul>
 8010ba8:	a33b      	add	r3, pc, #236	; (adr r3, 8010c98 <__kernel_sin+0x140>)
 8010baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bae:	f7ef fb47 	bl	8000240 <__aeabi_dsub>
 8010bb2:	4632      	mov	r2, r6
 8010bb4:	463b      	mov	r3, r7
 8010bb6:	f7ef fcfb 	bl	80005b0 <__aeabi_dmul>
 8010bba:	a339      	add	r3, pc, #228	; (adr r3, 8010ca0 <__kernel_sin+0x148>)
 8010bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc0:	f7ef fb40 	bl	8000244 <__adddf3>
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	463b      	mov	r3, r7
 8010bc8:	f7ef fcf2 	bl	80005b0 <__aeabi_dmul>
 8010bcc:	a336      	add	r3, pc, #216	; (adr r3, 8010ca8 <__kernel_sin+0x150>)
 8010bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd2:	f7ef fb35 	bl	8000240 <__aeabi_dsub>
 8010bd6:	4632      	mov	r2, r6
 8010bd8:	463b      	mov	r3, r7
 8010bda:	f7ef fce9 	bl	80005b0 <__aeabi_dmul>
 8010bde:	a334      	add	r3, pc, #208	; (adr r3, 8010cb0 <__kernel_sin+0x158>)
 8010be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be4:	f7ef fb2e 	bl	8000244 <__adddf3>
 8010be8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bec:	b9dd      	cbnz	r5, 8010c26 <__kernel_sin+0xce>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	4639      	mov	r1, r7
 8010bf6:	f7ef fcdb 	bl	80005b0 <__aeabi_dmul>
 8010bfa:	a32f      	add	r3, pc, #188	; (adr r3, 8010cb8 <__kernel_sin+0x160>)
 8010bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c00:	f7ef fb1e 	bl	8000240 <__aeabi_dsub>
 8010c04:	4642      	mov	r2, r8
 8010c06:	464b      	mov	r3, r9
 8010c08:	f7ef fcd2 	bl	80005b0 <__aeabi_dmul>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	460b      	mov	r3, r1
 8010c10:	4650      	mov	r0, sl
 8010c12:	4621      	mov	r1, r4
 8010c14:	f7ef fb16 	bl	8000244 <__adddf3>
 8010c18:	4682      	mov	sl, r0
 8010c1a:	460c      	mov	r4, r1
 8010c1c:	4650      	mov	r0, sl
 8010c1e:	4621      	mov	r1, r4
 8010c20:	b006      	add	sp, #24
 8010c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c26:	2200      	movs	r2, #0
 8010c28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c2c:	4b24      	ldr	r3, [pc, #144]	; (8010cc0 <__kernel_sin+0x168>)
 8010c2e:	f7ef fcbf 	bl	80005b0 <__aeabi_dmul>
 8010c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c3a:	4640      	mov	r0, r8
 8010c3c:	4649      	mov	r1, r9
 8010c3e:	f7ef fcb7 	bl	80005b0 <__aeabi_dmul>
 8010c42:	4602      	mov	r2, r0
 8010c44:	460b      	mov	r3, r1
 8010c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c4a:	f7ef faf9 	bl	8000240 <__aeabi_dsub>
 8010c4e:	4632      	mov	r2, r6
 8010c50:	463b      	mov	r3, r7
 8010c52:	f7ef fcad 	bl	80005b0 <__aeabi_dmul>
 8010c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c5a:	f7ef faf1 	bl	8000240 <__aeabi_dsub>
 8010c5e:	a316      	add	r3, pc, #88	; (adr r3, 8010cb8 <__kernel_sin+0x160>)
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	4606      	mov	r6, r0
 8010c66:	460f      	mov	r7, r1
 8010c68:	4640      	mov	r0, r8
 8010c6a:	4649      	mov	r1, r9
 8010c6c:	f7ef fca0 	bl	80005b0 <__aeabi_dmul>
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	4630      	mov	r0, r6
 8010c76:	4639      	mov	r1, r7
 8010c78:	f7ef fae4 	bl	8000244 <__adddf3>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	460b      	mov	r3, r1
 8010c80:	4650      	mov	r0, sl
 8010c82:	4621      	mov	r1, r4
 8010c84:	f7ef fadc 	bl	8000240 <__aeabi_dsub>
 8010c88:	e7c6      	b.n	8010c18 <__kernel_sin+0xc0>
 8010c8a:	bf00      	nop
 8010c8c:	f3af 8000 	nop.w
 8010c90:	5acfd57c 	.word	0x5acfd57c
 8010c94:	3de5d93a 	.word	0x3de5d93a
 8010c98:	8a2b9ceb 	.word	0x8a2b9ceb
 8010c9c:	3e5ae5e6 	.word	0x3e5ae5e6
 8010ca0:	57b1fe7d 	.word	0x57b1fe7d
 8010ca4:	3ec71de3 	.word	0x3ec71de3
 8010ca8:	19c161d5 	.word	0x19c161d5
 8010cac:	3f2a01a0 	.word	0x3f2a01a0
 8010cb0:	1110f8a6 	.word	0x1110f8a6
 8010cb4:	3f811111 	.word	0x3f811111
 8010cb8:	55555549 	.word	0x55555549
 8010cbc:	3fc55555 	.word	0x3fc55555
 8010cc0:	3fe00000 	.word	0x3fe00000

08010cc4 <fabs>:
 8010cc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010cc8:	4770      	bx	lr
 8010cca:	0000      	movs	r0, r0
 8010ccc:	0000      	movs	r0, r0
	...

08010cd0 <floor>:
 8010cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cd4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8010cd8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8010cdc:	2e13      	cmp	r6, #19
 8010cde:	4602      	mov	r2, r0
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	4607      	mov	r7, r0
 8010ce4:	460c      	mov	r4, r1
 8010ce6:	4605      	mov	r5, r0
 8010ce8:	dc33      	bgt.n	8010d52 <floor+0x82>
 8010cea:	2e00      	cmp	r6, #0
 8010cec:	da14      	bge.n	8010d18 <floor+0x48>
 8010cee:	a334      	add	r3, pc, #208	; (adr r3, 8010dc0 <floor+0xf0>)
 8010cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf4:	f7ef faa6 	bl	8000244 <__adddf3>
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	f7ef fee8 	bl	8000ad0 <__aeabi_dcmpgt>
 8010d00:	b138      	cbz	r0, 8010d12 <floor+0x42>
 8010d02:	2c00      	cmp	r4, #0
 8010d04:	da58      	bge.n	8010db8 <floor+0xe8>
 8010d06:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010d0a:	431d      	orrs	r5, r3
 8010d0c:	d001      	beq.n	8010d12 <floor+0x42>
 8010d0e:	2500      	movs	r5, #0
 8010d10:	4c2d      	ldr	r4, [pc, #180]	; (8010dc8 <floor+0xf8>)
 8010d12:	4623      	mov	r3, r4
 8010d14:	462f      	mov	r7, r5
 8010d16:	e025      	b.n	8010d64 <floor+0x94>
 8010d18:	4a2c      	ldr	r2, [pc, #176]	; (8010dcc <floor+0xfc>)
 8010d1a:	fa42 f806 	asr.w	r8, r2, r6
 8010d1e:	ea01 0208 	and.w	r2, r1, r8
 8010d22:	4302      	orrs	r2, r0
 8010d24:	d01e      	beq.n	8010d64 <floor+0x94>
 8010d26:	a326      	add	r3, pc, #152	; (adr r3, 8010dc0 <floor+0xf0>)
 8010d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2c:	f7ef fa8a 	bl	8000244 <__adddf3>
 8010d30:	2200      	movs	r2, #0
 8010d32:	2300      	movs	r3, #0
 8010d34:	f7ef fecc 	bl	8000ad0 <__aeabi_dcmpgt>
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d0ea      	beq.n	8010d12 <floor+0x42>
 8010d3c:	2c00      	cmp	r4, #0
 8010d3e:	bfbe      	ittt	lt
 8010d40:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010d44:	fa43 f606 	asrlt.w	r6, r3, r6
 8010d48:	19a4      	addlt	r4, r4, r6
 8010d4a:	2500      	movs	r5, #0
 8010d4c:	ea24 0408 	bic.w	r4, r4, r8
 8010d50:	e7df      	b.n	8010d12 <floor+0x42>
 8010d52:	2e33      	cmp	r6, #51	; 0x33
 8010d54:	dd0a      	ble.n	8010d6c <floor+0x9c>
 8010d56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010d5a:	d103      	bne.n	8010d64 <floor+0x94>
 8010d5c:	f7ef fa72 	bl	8000244 <__adddf3>
 8010d60:	4607      	mov	r7, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4638      	mov	r0, r7
 8010d66:	4619      	mov	r1, r3
 8010d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d70:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8010d74:	fa22 f808 	lsr.w	r8, r2, r8
 8010d78:	ea18 0f00 	tst.w	r8, r0
 8010d7c:	d0f2      	beq.n	8010d64 <floor+0x94>
 8010d7e:	a310      	add	r3, pc, #64	; (adr r3, 8010dc0 <floor+0xf0>)
 8010d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d84:	f7ef fa5e 	bl	8000244 <__adddf3>
 8010d88:	2200      	movs	r2, #0
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	f7ef fea0 	bl	8000ad0 <__aeabi_dcmpgt>
 8010d90:	2800      	cmp	r0, #0
 8010d92:	d0be      	beq.n	8010d12 <floor+0x42>
 8010d94:	2c00      	cmp	r4, #0
 8010d96:	da02      	bge.n	8010d9e <floor+0xce>
 8010d98:	2e14      	cmp	r6, #20
 8010d9a:	d103      	bne.n	8010da4 <floor+0xd4>
 8010d9c:	3401      	adds	r4, #1
 8010d9e:	ea25 0508 	bic.w	r5, r5, r8
 8010da2:	e7b6      	b.n	8010d12 <floor+0x42>
 8010da4:	2301      	movs	r3, #1
 8010da6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010daa:	fa03 f606 	lsl.w	r6, r3, r6
 8010dae:	4435      	add	r5, r6
 8010db0:	42bd      	cmp	r5, r7
 8010db2:	bf38      	it	cc
 8010db4:	18e4      	addcc	r4, r4, r3
 8010db6:	e7f2      	b.n	8010d9e <floor+0xce>
 8010db8:	2500      	movs	r5, #0
 8010dba:	462c      	mov	r4, r5
 8010dbc:	e7a9      	b.n	8010d12 <floor+0x42>
 8010dbe:	bf00      	nop
 8010dc0:	8800759c 	.word	0x8800759c
 8010dc4:	7e37e43c 	.word	0x7e37e43c
 8010dc8:	bff00000 	.word	0xbff00000
 8010dcc:	000fffff 	.word	0x000fffff

08010dd0 <scalbn>:
 8010dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dd2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	460d      	mov	r5, r1
 8010dda:	4617      	mov	r7, r2
 8010ddc:	460b      	mov	r3, r1
 8010dde:	b996      	cbnz	r6, 8010e06 <scalbn+0x36>
 8010de0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010de4:	4303      	orrs	r3, r0
 8010de6:	d039      	beq.n	8010e5c <scalbn+0x8c>
 8010de8:	4b33      	ldr	r3, [pc, #204]	; (8010eb8 <scalbn+0xe8>)
 8010dea:	2200      	movs	r2, #0
 8010dec:	f7ef fbe0 	bl	80005b0 <__aeabi_dmul>
 8010df0:	4b32      	ldr	r3, [pc, #200]	; (8010ebc <scalbn+0xec>)
 8010df2:	4604      	mov	r4, r0
 8010df4:	429f      	cmp	r7, r3
 8010df6:	460d      	mov	r5, r1
 8010df8:	da0f      	bge.n	8010e1a <scalbn+0x4a>
 8010dfa:	a32b      	add	r3, pc, #172	; (adr r3, 8010ea8 <scalbn+0xd8>)
 8010dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e00:	f7ef fbd6 	bl	80005b0 <__aeabi_dmul>
 8010e04:	e006      	b.n	8010e14 <scalbn+0x44>
 8010e06:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010e0a:	4296      	cmp	r6, r2
 8010e0c:	d10a      	bne.n	8010e24 <scalbn+0x54>
 8010e0e:	4602      	mov	r2, r0
 8010e10:	f7ef fa18 	bl	8000244 <__adddf3>
 8010e14:	4604      	mov	r4, r0
 8010e16:	460d      	mov	r5, r1
 8010e18:	e020      	b.n	8010e5c <scalbn+0x8c>
 8010e1a:	460b      	mov	r3, r1
 8010e1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010e20:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8010e24:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8010e28:	19b9      	adds	r1, r7, r6
 8010e2a:	4291      	cmp	r1, r2
 8010e2c:	dd0e      	ble.n	8010e4c <scalbn+0x7c>
 8010e2e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8010e32:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8010e36:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8010e3a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8010e3e:	4820      	ldr	r0, [pc, #128]	; (8010ec0 <scalbn+0xf0>)
 8010e40:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8010e44:	a31a      	add	r3, pc, #104	; (adr r3, 8010eb0 <scalbn+0xe0>)
 8010e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4a:	e7d9      	b.n	8010e00 <scalbn+0x30>
 8010e4c:	2900      	cmp	r1, #0
 8010e4e:	dd08      	ble.n	8010e62 <scalbn+0x92>
 8010e50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010e54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010e58:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	4629      	mov	r1, r5
 8010e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e62:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8010e66:	da12      	bge.n	8010e8e <scalbn+0xbe>
 8010e68:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010e6c:	429f      	cmp	r7, r3
 8010e6e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8010e72:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8010e76:	dcdc      	bgt.n	8010e32 <scalbn+0x62>
 8010e78:	a30b      	add	r3, pc, #44	; (adr r3, 8010ea8 <scalbn+0xd8>)
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8010e82:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8010e86:	480f      	ldr	r0, [pc, #60]	; (8010ec4 <scalbn+0xf4>)
 8010e88:	f041 011f 	orr.w	r1, r1, #31
 8010e8c:	e7b8      	b.n	8010e00 <scalbn+0x30>
 8010e8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010e92:	3136      	adds	r1, #54	; 0x36
 8010e94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010e98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	4b09      	ldr	r3, [pc, #36]	; (8010ec8 <scalbn+0xf8>)
 8010ea4:	e7ac      	b.n	8010e00 <scalbn+0x30>
 8010ea6:	bf00      	nop
 8010ea8:	c2f8f359 	.word	0xc2f8f359
 8010eac:	01a56e1f 	.word	0x01a56e1f
 8010eb0:	8800759c 	.word	0x8800759c
 8010eb4:	7e37e43c 	.word	0x7e37e43c
 8010eb8:	43500000 	.word	0x43500000
 8010ebc:	ffff3cb0 	.word	0xffff3cb0
 8010ec0:	8800759c 	.word	0x8800759c
 8010ec4:	c2f8f359 	.word	0xc2f8f359
 8010ec8:	3c900000 	.word	0x3c900000

08010ecc <_init>:
 8010ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ece:	bf00      	nop
 8010ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ed2:	bc08      	pop	{r3}
 8010ed4:	469e      	mov	lr, r3
 8010ed6:	4770      	bx	lr

08010ed8 <_fini>:
 8010ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eda:	bf00      	nop
 8010edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ede:	bc08      	pop	{r3}
 8010ee0:	469e      	mov	lr, r3
 8010ee2:	4770      	bx	lr
