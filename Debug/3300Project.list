
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015c9c  08009ea8  08009ea8  00019ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fb44  0801fb44  000309f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801fb44  0801fb44  0002fb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fb4c  0801fb4c  000309f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801fb4c  0801fb4c  0002fb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fb54  0801fb54  0002fb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009f0  20000000  0801fb58  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200009f0  08020548  000309f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  08020548  00030b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001132e  00000000  00000000  00030a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033fc  00000000  00000000  00041d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00045148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00046320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7ce  00000000  00000000  000474b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001434c  00000000  00000000  00062c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c14  00000000  00000000  00076fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbbe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc8  00000000  00000000  000fbc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000088  00000000  00000000  00101900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200009f0 	.word	0x200009f0
 8000204:	00000000 	.word	0x00000000
 8000208:	08009e90 	.word	0x08009e90

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200009f4 	.word	0x200009f4
 8000224:	08009e90 	.word	0x08009e90

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b976 	b.w	8000ea4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	4688      	mov	r8, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14d      	bne.n	8000c7c <__udivmoddi4+0xac>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4694      	mov	ip, r2
 8000be4:	d968      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	b152      	cbz	r2, 8000c02 <__udivmoddi4+0x32>
 8000bec:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf0:	f1c2 0120 	rsb	r1, r2, #32
 8000bf4:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	ea41 0803 	orr.w	r8, r1, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c06:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	fb01 8817 	mls	r8, r1, r7, r8
 8000c12:	fb07 f00e 	mul.w	r0, r7, lr
 8000c16:	0c23      	lsrs	r3, r4, #16
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	4298      	cmp	r0, r3
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x66>
 8000c20:	eb1c 0303 	adds.w	r3, ip, r3
 8000c24:	f107 35ff 	add.w	r5, r7, #4294967295
 8000c28:	f080 811e 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2c:	4298      	cmp	r0, r3
 8000c2e:	f240 811b 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c32:	3f02      	subs	r7, #2
 8000c34:	4463      	add	r3, ip
 8000c36:	1a1b      	subs	r3, r3, r0
 8000c38:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c3c:	fb01 3310 	mls	r3, r1, r0, r3
 8000c40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c44:	b2a4      	uxth	r4, r4
 8000c46:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8109 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8106 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	2100      	movs	r1, #0
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa8>
 8000c70:	2300      	movs	r3, #0
 8000c72:	40d4      	lsrs	r4, r2
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	f000 80ee 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c86:	2100      	movs	r1, #0
 8000c88:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	42ab      	cmp	r3, r5
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80fc 	bhi.w	8000e9c <__udivmoddi4+0x2cc>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb65 0303 	sbc.w	r3, r5, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4698      	mov	r8, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d0e2      	beq.n	8000c78 <__udivmoddi4+0xa8>
 8000cb2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb6:	e7df      	b.n	8000c78 <__udivmoddi4+0xa8>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8091 	bne.w	8000de8 <__udivmoddi4+0x218>
 8000cc6:	eba1 000c 	sub.w	r0, r1, ip
 8000cca:	2101      	movs	r1, #1
 8000ccc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd0:	fa1f fe8c 	uxth.w	lr, ip
 8000cd4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cd8:	fb07 0013 	mls	r0, r7, r3, r0
 8000cdc:	0c25      	lsrs	r5, r4, #16
 8000cde:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	42a8      	cmp	r0, r5
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0505 	adds.w	r5, ip, r5
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	42a8      	cmp	r0, r5
 8000cf6:	f200 80ce 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a2d      	subs	r5, r5, r0
 8000cfe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d02:	fb07 5510 	mls	r5, r7, r0, r5
 8000d06:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80b6 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000d24:	4628      	mov	r0, r5
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79e      	b.n	8000c6e <__udivmoddi4+0x9e>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fbba f8f9 	udiv	r8, sl, r9
 8000d4a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d52:	408d      	lsls	r5, r1
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	431d      	orrs	r5, r3
 8000d5a:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d68:	42a0      	cmp	r0, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	42a0      	cmp	r0, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1a24      	subs	r4, r4, r0
 8000d8a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d8e:	fb09 4410 	mls	r4, r9, r0, r4
 8000d92:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d96:	b2ad      	uxth	r5, r5
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9502 	umull	r9, r5, r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2d0>
 8000dcc:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd0:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd4:	fa22 f301 	lsr.w	r3, r2, r1
 8000dd8:	fa04 f707 	lsl.w	r7, r4, r7
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa8>
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	f1c2 0120 	rsb	r1, r2, #32
 8000df0:	fa25 f301 	lsr.w	r3, r5, r1
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfc:	4095      	lsls	r5, r2
 8000dfe:	430d      	orrs	r5, r1
 8000e00:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e04:	fb07 3311 	mls	r3, r7, r1, r3
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	0c28      	lsrs	r0, r5, #16
 8000e0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e12:	fb01 f30e 	mul.w	r3, r1, lr
 8000e16:	4283      	cmp	r3, r0
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0000 	adds.w	r0, ip, r0
 8000e22:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	4283      	cmp	r3, r0
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3902      	subs	r1, #2
 8000e2e:	4460      	add	r0, ip
 8000e30:	1ac0      	subs	r0, r0, r3
 8000e32:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e36:	fb07 0013 	mls	r0, r7, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e40:	fb03 f00e 	mul.w	r0, r3, lr
 8000e44:	42a8      	cmp	r0, r5
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0505 	adds.w	r5, ip, r5
 8000e4c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	42a8      	cmp	r0, r5
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	4465      	add	r5, ip
 8000e5a:	1a28      	subs	r0, r5, r0
 8000e5c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e707      	b.n	8000c78 <__udivmoddi4+0xa8>
 8000e68:	462f      	mov	r7, r5
 8000e6a:	e6e4      	b.n	8000c36 <__udivmoddi4+0x66>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f9      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4643      	mov	r3, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4628      	mov	r0, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4641      	mov	r1, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	4464      	add	r4, ip
 8000e92:	3802      	subs	r0, #2
 8000e94:	e747      	b.n	8000d26 <__udivmoddi4+0x156>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	4465      	add	r5, ip
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e706      	b.n	8000cae <__udivmoddi4+0xde>
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa8>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <Check_touchkey>:
#include "UI.h"
#include "lcdtp.h"

uint8_t Check_touchkey(const int* constraints ,strType_XPT2046_Coordinate *pDisplayCoordinate) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	uint8_t match = (constraints[0]<= pDisplayCoordinate->x && constraints[1]>= pDisplayCoordinate->x
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	8812      	ldrh	r2, [r2, #0]
			 && constraints[2]<= pDisplayCoordinate->y && constraints[3]>= pDisplayCoordinate->y);
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	dc16      	bgt.n	8000eec <Check_touchkey+0x44>
	uint8_t match = (constraints[0]<= pDisplayCoordinate->x && constraints[1]>= pDisplayCoordinate->x
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	8812      	ldrh	r2, [r2, #0]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	db0f      	blt.n	8000eec <Check_touchkey+0x44>
			 && constraints[2]<= pDisplayCoordinate->y && constraints[3]>= pDisplayCoordinate->y);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3308      	adds	r3, #8
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	8852      	ldrh	r2, [r2, #2]
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	dc08      	bgt.n	8000eec <Check_touchkey+0x44>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	330c      	adds	r3, #12
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	8852      	ldrh	r2, [r2, #2]
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	db01      	blt.n	8000eec <Check_touchkey+0x44>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <Check_touchkey+0x46>
 8000eec:	2300      	movs	r3, #0
	uint8_t match = (constraints[0]<= pDisplayCoordinate->x && constraints[1]>= pDisplayCoordinate->x
 8000eee:	73fb      	strb	r3, [r7, #15]
	 return match;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <Render>:

void Render(uint8_t* mode_new, uint8_t* render_status,unsigned char *petStats){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
	//Not Render if done
	if(*render_status==1) return;
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d01e      	beq.n	8000f4e <Render+0x52>

	//Mode 0 = Home, Mode 1 = Drink Water, Mode 2 = Toggle Dark Mode, Mode 3 = Pet
	switch(*mode_new){
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d00f      	beq.n	8000f38 <Render+0x3c>
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	dc14      	bgt.n	8000f46 <Render+0x4a>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <Render+0x2a>
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d003      	beq.n	8000f2c <Render+0x30>
 8000f24:	e00f      	b.n	8000f46 <Render+0x4a>
		case(0):
			UI_Home();
 8000f26:	f000 f859 	bl	8000fdc <UI_Home>
			break;
 8000f2a:	e00c      	b.n	8000f46 <Render+0x4a>
		case(1):
			UI_Drink_Water();
 8000f2c:	f000 f814 	bl	8000f58 <UI_Drink_Water>
			*mode_new = 0;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
			break;
 8000f36:	e006      	b.n	8000f46 <Render+0x4a>
		case(2):
			LCD_Darkmode_Toggle(petStats);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 fd63 	bl	8001a04 <LCD_Darkmode_Toggle>
			*mode_new = 0;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
			break;
 8000f44:	bf00      	nop

	}
	*render_status = 1;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e000      	b.n	8000f50 <Render+0x54>
	if(*render_status==1) return;
 8000f4e:	bf00      	nop
}
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <UI_Drink_Water>:

void UI_Drink_Water(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8000f5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f60:	22f0      	movs	r2, #240	; 0xf0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 fb17 	bl	8001598 <LCD_Clear>

	LCD_DrawString(10, 150, "Drinked a glass of water");
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <UI_Drink_Water+0x74>)
 8000f6c:	2196      	movs	r1, #150	; 0x96
 8000f6e:	200a      	movs	r0, #10
 8000f70:	f000 fbc0 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(10, 250, "Return to home in 2s");
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <UI_Drink_Water+0x78>)
 8000f76:	21fa      	movs	r1, #250	; 0xfa
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f000 fbbb 	bl	80016f4 <LCD_DrawString>
	HAL_Delay(1000);
 8000f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f82:	f002 fb37 	bl	80035f4 <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 8000f86:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f8a:	22f0      	movs	r2, #240	; 0xf0
 8000f8c:	21fa      	movs	r1, #250	; 0xfa
 8000f8e:	200a      	movs	r0, #10
 8000f90:	f000 fb02 	bl	8001598 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 1s");
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <UI_Drink_Water+0x7c>)
 8000f96:	21fa      	movs	r1, #250	; 0xfa
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f000 fbab 	bl	80016f4 <LCD_DrawString>
	HAL_Delay(1000);
 8000f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa2:	f002 fb27 	bl	80035f4 <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 8000fa6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000faa:	22f0      	movs	r2, #240	; 0xf0
 8000fac:	21fa      	movs	r1, #250	; 0xfa
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f000 faf2 	bl	8001598 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 0s");
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <UI_Drink_Water+0x80>)
 8000fb6:	21fa      	movs	r1, #250	; 0xfa
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f000 fb9b 	bl	80016f4 <LCD_DrawString>
	HAL_Delay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc2:	f002 fb17 	bl	80035f4 <HAL_Delay>

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	08009ea8 	.word	0x08009ea8
 8000fd0:	08009ec4 	.word	0x08009ec4
 8000fd4:	08009edc 	.word	0x08009edc
 8000fd8:	08009ef4 	.word	0x08009ef4

08000fdc <UI_Home>:

void UI_Home(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	LCD_Clear ( 0, 0, 240, 320);
 8000fe0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fe4:	22f0      	movs	r2, #240	; 0xf0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 fad5 	bl	8001598 <LCD_Clear>
	LCD_DrawString(2, 10, "Config");
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <UI_Home+0x78>)
 8000ff0:	210a      	movs	r1, #10
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f000 fb7e 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(200, 10, "Stats");
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <UI_Home+0x7c>)
 8000ffa:	210a      	movs	r1, #10
 8000ffc:	20c8      	movs	r0, #200	; 0xc8
 8000ffe:	f000 fb79 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(40, 220, "Set");
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <UI_Home+0x80>)
 8001004:	21dc      	movs	r1, #220	; 0xdc
 8001006:	2028      	movs	r0, #40	; 0x28
 8001008:	f000 fb74 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(40, 240, "Exercise");
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <UI_Home+0x84>)
 800100e:	21f0      	movs	r1, #240	; 0xf0
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f000 fb6f 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(40, 260, "Timer");
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <UI_Home+0x88>)
 8001018:	f44f 7182 	mov.w	r1, #260	; 0x104
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f000 fb69 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(140, 220, "Drink");
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <UI_Home+0x8c>)
 8001024:	21dc      	movs	r1, #220	; 0xdc
 8001026:	208c      	movs	r0, #140	; 0x8c
 8001028:	f000 fb64 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(140, 240, "water");
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <UI_Home+0x90>)
 800102e:	21f0      	movs	r1, #240	; 0xf0
 8001030:	208c      	movs	r0, #140	; 0x8c
 8001032:	f000 fb5f 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(200, 260, "Dark");
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <UI_Home+0x94>)
 8001038:	f44f 7182 	mov.w	r1, #260	; 0x104
 800103c:	20c8      	movs	r0, #200	; 0xc8
 800103e:	f000 fb59 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(200, 280, "mode");
 8001042:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <UI_Home+0x98>)
 8001044:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001048:	20c8      	movs	r0, #200	; 0xc8
 800104a:	f000 fb53 	bl	80016f4 <LCD_DrawString>

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	08009f0c 	.word	0x08009f0c
 8001058:	08009f14 	.word	0x08009f14
 800105c:	08009f1c 	.word	0x08009f1c
 8001060:	08009f20 	.word	0x08009f20
 8001064:	08009f2c 	.word	0x08009f2c
 8001068:	08009f34 	.word	0x08009f34
 800106c:	08009f3c 	.word	0x08009f3c
 8001070:	08009f44 	.word	0x08009f44
 8001074:	08009f4c 	.word	0x08009f4c

08001078 <UI_Home_Display_Date>:

void UI_Home_Display_Date(uint16_t year, uint8_t month, uint8_t day){
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	460b      	mov	r3, r1
 8001084:	717b      	strb	r3, [r7, #5]
 8001086:	4613      	mov	r3, r2
 8001088:	713b      	strb	r3, [r7, #4]
	char str[10];

	//Draw Year
	sprintf(str, "%04i", year);
 800108a:	88fa      	ldrh	r2, [r7, #6]
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4915      	ldr	r1, [pc, #84]	; (80010e8 <UI_Home_Display_Date+0x70>)
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fa1c 	bl	80054d0 <sprintf>
	LCD_DrawString(86, 10, str);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	461a      	mov	r2, r3
 800109e:	210a      	movs	r1, #10
 80010a0:	2056      	movs	r0, #86	; 0x56
 80010a2:	f000 fb27 	bl	80016f4 <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", month);
 80010a6:	797a      	ldrb	r2, [r7, #5]
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <UI_Home_Display_Date+0x74>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fa0e 	bl	80054d0 <sprintf>
	LCD_DrawString(125, 10, str);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	461a      	mov	r2, r3
 80010ba:	210a      	movs	r1, #10
 80010bc:	207d      	movs	r0, #125	; 0x7d
 80010be:	f000 fb19 	bl	80016f4 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", day);
 80010c2:	793a      	ldrb	r2, [r7, #4]
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4908      	ldr	r1, [pc, #32]	; (80010ec <UI_Home_Display_Date+0x74>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 fa00 	bl	80054d0 <sprintf>
	LCD_DrawString(145, 10, str);
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	461a      	mov	r2, r3
 80010d6:	210a      	movs	r1, #10
 80010d8:	2091      	movs	r0, #145	; 0x91
 80010da:	f000 fb0b 	bl	80016f4 <LCD_DrawString>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	08009f54 	.word	0x08009f54
 80010ec:	08009f5c 	.word	0x08009f5c

080010f0 <UI_Home_Display_Time>:

void UI_Home_Display_Time(uint8_t hour, uint8_t minute, uint8_t second){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	460b      	mov	r3, r1
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	4613      	mov	r3, r2
 8001100:	717b      	strb	r3, [r7, #5]
	char str[10];

	//Draw Year
	sprintf(str, "%02i", hour);
 8001102:	79fa      	ldrb	r2, [r7, #7]
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4915      	ldr	r1, [pc, #84]	; (8001160 <UI_Home_Display_Time+0x70>)
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f9e0 	bl	80054d0 <sprintf>
	LCD_DrawString(95, 30, str);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	461a      	mov	r2, r3
 8001116:	211e      	movs	r1, #30
 8001118:	205f      	movs	r0, #95	; 0x5f
 800111a:	f000 faeb 	bl	80016f4 <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", minute);
 800111e:	79ba      	ldrb	r2, [r7, #6]
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <UI_Home_Display_Time+0x70>)
 8001126:	4618      	mov	r0, r3
 8001128:	f004 f9d2 	bl	80054d0 <sprintf>
	LCD_DrawString(115, 30, str);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	461a      	mov	r2, r3
 8001132:	211e      	movs	r1, #30
 8001134:	2073      	movs	r0, #115	; 0x73
 8001136:	f000 fadd 	bl	80016f4 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", second);
 800113a:	797a      	ldrb	r2, [r7, #5]
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <UI_Home_Display_Time+0x70>)
 8001142:	4618      	mov	r0, r3
 8001144:	f004 f9c4 	bl	80054d0 <sprintf>
	LCD_DrawString(135, 30, str);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	461a      	mov	r2, r3
 800114e:	211e      	movs	r1, #30
 8001150:	2087      	movs	r0, #135	; 0x87
 8001152:	f000 facf 	bl	80016f4 <LCD_DrawString>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	08009f5c 	.word	0x08009f5c

08001164 <UI_Home_Display_Pet>:

void UI_Home_Display_Pet(uint16_t StartX, uint16_t StartY,unsigned char *pic){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	603a      	str	r2, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
 8001170:	460b      	mov	r3, r1
 8001172:	80bb      	strh	r3, [r7, #4]

	LCD_DrawPicture(StartX,StartY,pic);
 8001174:	88b9      	ldrh	r1, [r7, #4]
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fc60 	bl	8001a40 <LCD_DrawPicture>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	e002      	b.n	8001198 <Delay+0x10>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3b01      	subs	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <Delay+0xa>
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <LCD_INIT>:
int darkmode_toggle = 0;


void LCD_INIT ( void )
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 f826 	bl	8001200 <LCD_BackLed_Control>
	LCD_Rst();
 80011b4:	f000 f80c 	bl	80011d0 <LCD_Rst>
	LCD_REG_Config();
 80011b8:	f000 f85c 	bl	8001274 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 80011bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011c0:	22f0      	movs	r2, #240	; 0xf0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 f9e7 	bl	8001598 <LCD_Clear>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <LCD_Rst>:


void LCD_Rst ( void )
{			
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2102      	movs	r1, #2
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <LCD_Rst+0x28>)
 80011da:	f002 fce8 	bl	8003bae <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <LCD_Rst+0x2c>)
 80011e0:	f7ff ffd2 	bl	8001188 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2102      	movs	r1, #2
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <LCD_Rst+0x28>)
 80011ea:	f002 fce0 	bl	8003bae <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <LCD_Rst+0x2c>)
 80011f0:	f7ff ffca 	bl	8001188 <Delay>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40011800 	.word	0x40011800
 80011fc:	0002bffc 	.word	0x0002bffc

08001200 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <LCD_BackLed_Control+0x34>)
 8001218:	f002 fcc9 	bl	8003bae <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 800121c:	e005      	b.n	800122a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <LCD_BackLed_Control+0x34>)
 8001226:	f002 fcc2 	bl	8003bae <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40011400 	.word	0x40011400

08001238 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001242:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	8013      	strh	r3, [r2, #0]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <LCD_Write_Data+0x1c>)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	8013      	strh	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	60020000 	.word	0x60020000

08001274 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001278:	20cf      	movs	r0, #207	; 0xcf
 800127a:	f7ff ffdd 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff ffe8 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001284:	2081      	movs	r0, #129	; 0x81
 8001286:	f7ff ffe5 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800128a:	2030      	movs	r0, #48	; 0x30
 800128c:	f7ff ffe2 	bl	8001254 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001290:	20ed      	movs	r0, #237	; 0xed
 8001292:	f7ff ffd1 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001296:	2064      	movs	r0, #100	; 0x64
 8001298:	f7ff ffdc 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800129c:	2003      	movs	r0, #3
 800129e:	f7ff ffd9 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80012a2:	2012      	movs	r0, #18
 80012a4:	f7ff ffd6 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80012a8:	2081      	movs	r0, #129	; 0x81
 80012aa:	f7ff ffd3 	bl	8001254 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80012ae:	20e8      	movs	r0, #232	; 0xe8
 80012b0:	f7ff ffc2 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80012b4:	2085      	movs	r0, #133	; 0x85
 80012b6:	f7ff ffcd 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80012ba:	2010      	movs	r0, #16
 80012bc:	f7ff ffca 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80012c0:	2078      	movs	r0, #120	; 0x78
 80012c2:	f7ff ffc7 	bl	8001254 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80012c6:	20cb      	movs	r0, #203	; 0xcb
 80012c8:	f7ff ffb6 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80012cc:	2039      	movs	r0, #57	; 0x39
 80012ce:	f7ff ffc1 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80012d2:	202c      	movs	r0, #44	; 0x2c
 80012d4:	f7ff ffbe 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff ffbb 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80012de:	2034      	movs	r0, #52	; 0x34
 80012e0:	f7ff ffb8 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80012e4:	2002      	movs	r0, #2
 80012e6:	f7ff ffb5 	bl	8001254 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80012ea:	20f7      	movs	r0, #247	; 0xf7
 80012ec:	f7ff ffa4 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80012f0:	2020      	movs	r0, #32
 80012f2:	f7ff ffaf 	bl	8001254 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80012f6:	20ea      	movs	r0, #234	; 0xea
 80012f8:	f7ff ff9e 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ffa9 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff ffa6 	bl	8001254 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001308:	20b1      	movs	r0, #177	; 0xb1
 800130a:	f7ff ff95 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff ffa0 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001314:	201b      	movs	r0, #27
 8001316:	f7ff ff9d 	bl	8001254 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800131a:	20b6      	movs	r0, #182	; 0xb6
 800131c:	f7ff ff8c 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001320:	200a      	movs	r0, #10
 8001322:	f7ff ff97 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001326:	20a2      	movs	r0, #162	; 0xa2
 8001328:	f7ff ff94 	bl	8001254 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800132c:	20c0      	movs	r0, #192	; 0xc0
 800132e:	f7ff ff83 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001332:	2035      	movs	r0, #53	; 0x35
 8001334:	f7ff ff8e 	bl	8001254 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001338:	20c1      	movs	r0, #193	; 0xc1
 800133a:	f7ff ff7d 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800133e:	2011      	movs	r0, #17
 8001340:	f7ff ff88 	bl	8001254 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001344:	20c5      	movs	r0, #197	; 0xc5
 8001346:	f7ff ff77 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800134a:	2045      	movs	r0, #69	; 0x45
 800134c:	f7ff ff82 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001350:	2045      	movs	r0, #69	; 0x45
 8001352:	f7ff ff7f 	bl	8001254 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001356:	20c7      	movs	r0, #199	; 0xc7
 8001358:	f7ff ff6e 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 800135c:	20a2      	movs	r0, #162	; 0xa2
 800135e:	f7ff ff79 	bl	8001254 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001362:	20f2      	movs	r0, #242	; 0xf2
 8001364:	f7ff ff68 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff ff73 	bl	8001254 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800136e:	2026      	movs	r0, #38	; 0x26
 8001370:	f7ff ff62 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff ff6d 	bl	8001254 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800137a:	20e0      	movs	r0, #224	; 0xe0
 800137c:	f7ff ff5c 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001380:	200f      	movs	r0, #15
 8001382:	f7ff ff67 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001386:	2026      	movs	r0, #38	; 0x26
 8001388:	f7ff ff64 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 800138c:	2024      	movs	r0, #36	; 0x24
 800138e:	f7ff ff61 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001392:	200b      	movs	r0, #11
 8001394:	f7ff ff5e 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001398:	200e      	movs	r0, #14
 800139a:	f7ff ff5b 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800139e:	2009      	movs	r0, #9
 80013a0:	f7ff ff58 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80013a4:	2054      	movs	r0, #84	; 0x54
 80013a6:	f7ff ff55 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80013aa:	20a8      	movs	r0, #168	; 0xa8
 80013ac:	f7ff ff52 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80013b0:	2046      	movs	r0, #70	; 0x46
 80013b2:	f7ff ff4f 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80013b6:	200c      	movs	r0, #12
 80013b8:	f7ff ff4c 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80013bc:	2017      	movs	r0, #23
 80013be:	f7ff ff49 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80013c2:	2009      	movs	r0, #9
 80013c4:	f7ff ff46 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80013c8:	200f      	movs	r0, #15
 80013ca:	f7ff ff43 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80013ce:	2007      	movs	r0, #7
 80013d0:	f7ff ff40 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff ff3d 	bl	8001254 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80013da:	20e1      	movs	r0, #225	; 0xe1
 80013dc:	f7ff ff2c 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff ff37 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80013e6:	2019      	movs	r0, #25
 80013e8:	f7ff ff34 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80013ec:	201b      	movs	r0, #27
 80013ee:	f7ff ff31 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80013f2:	2004      	movs	r0, #4
 80013f4:	f7ff ff2e 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80013f8:	2010      	movs	r0, #16
 80013fa:	f7ff ff2b 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80013fe:	2007      	movs	r0, #7
 8001400:	f7ff ff28 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001404:	202a      	movs	r0, #42	; 0x2a
 8001406:	f7ff ff25 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800140a:	2047      	movs	r0, #71	; 0x47
 800140c:	f7ff ff22 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001410:	2039      	movs	r0, #57	; 0x39
 8001412:	f7ff ff1f 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001416:	2003      	movs	r0, #3
 8001418:	f7ff ff1c 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800141c:	2006      	movs	r0, #6
 800141e:	f7ff ff19 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001422:	2006      	movs	r0, #6
 8001424:	f7ff ff16 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001428:	2030      	movs	r0, #48	; 0x30
 800142a:	f7ff ff13 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800142e:	2038      	movs	r0, #56	; 0x38
 8001430:	f7ff ff10 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001434:	200f      	movs	r0, #15
 8001436:	f7ff ff0d 	bl	8001254 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800143a:	2036      	movs	r0, #54	; 0x36
 800143c:	f7ff fefc 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001440:	20c8      	movs	r0, #200	; 0xc8
 8001442:	f7ff ff07 	bl	8001254 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001446:	202a      	movs	r0, #42	; 0x2a
 8001448:	f7ff fef6 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff ff01 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fefe 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff fefb 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800145e:	20ef      	movs	r0, #239	; 0xef
 8001460:	f7ff fef8 	bl	8001254 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001464:	202b      	movs	r0, #43	; 0x2b
 8001466:	f7ff fee7 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fef2 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff feef 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff feec 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 800147c:	203f      	movs	r0, #63	; 0x3f
 800147e:	f7ff fee9 	bl	8001254 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001482:	203a      	movs	r0, #58	; 0x3a
 8001484:	f7ff fed8 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001488:	2055      	movs	r0, #85	; 0x55
 800148a:	f7ff fee3 	bl	8001254 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800148e:	2011      	movs	r0, #17
 8001490:	f7ff fed2 	bl	8001238 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <LCD_REG_Config+0x230>)
 8001496:	f7ff fe77 	bl	8001188 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800149a:	2029      	movs	r0, #41	; 0x29
 800149c:	f7ff fecc 	bl	8001238 <LCD_Write_Cmd>
	
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	0002bffc 	.word	0x0002bffc

080014a8 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4604      	mov	r4, r0
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4623      	mov	r3, r4
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	4603      	mov	r3, r0
 80014bc:	80bb      	strh	r3, [r7, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	807b      	strh	r3, [r7, #2]
 80014c2:	4613      	mov	r3, r2
 80014c4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80014c6:	202a      	movs	r0, #42	; 0x2a
 80014c8:	f7ff feb6 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff febe 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff feb8 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	4413      	add	r3, r2
 80014ea:	3b01      	subs	r3, #1
 80014ec:	121b      	asrs	r3, r3, #8
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff feaf 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80014f6:	88fa      	ldrh	r2, [r7, #6]
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	4413      	add	r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fea4 	bl	8001254 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800150c:	202b      	movs	r0, #43	; 0x2b
 800150e:	f7ff fe93 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fe9b 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe95 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800152a:	88ba      	ldrh	r2, [r7, #4]
 800152c:	883b      	ldrh	r3, [r7, #0]
 800152e:	4413      	add	r3, r2
 8001530:	3b01      	subs	r3, #1
 8001532:	121b      	asrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fe8c 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800153c:	88ba      	ldrh	r2, [r7, #4]
 800153e:	883b      	ldrh	r3, [r7, #0]
 8001540:	4413      	add	r3, r2
 8001542:	b29b      	uxth	r3, r3
 8001544:	3b01      	subs	r3, #1
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fe81 	bl	8001254 <LCD_Write_Data>
	
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}

0800155a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800156a:	202c      	movs	r0, #44	; 0x2c
 800156c:	f7ff fe64 	bl	8001238 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	e006      	b.n	8001584 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fe6b 	bl	8001254 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3301      	adds	r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3f4      	bcc.n	8001576 <LCD_FillColor+0x1c>
		
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	4604      	mov	r4, r0
 80015a0:	4608      	mov	r0, r1
 80015a2:	4611      	mov	r1, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	4623      	mov	r3, r4
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	4603      	mov	r3, r0
 80015ac:	80bb      	strh	r3, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	807b      	strh	r3, [r7, #2]
 80015b2:	4613      	mov	r3, r2
 80015b4:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <LCD_Clear+0x58>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <LCD_Clear+0x2a>
 80015be:	2300      	movs	r3, #0
 80015c0:	e001      	b.n	80015c6 <LCD_Clear+0x2e>
 80015c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c6:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80015c8:	883b      	ldrh	r3, [r7, #0]
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	88b9      	ldrh	r1, [r7, #4]
 80015ce:	88f8      	ldrh	r0, [r7, #6]
 80015d0:	f7ff ff6a 	bl	80014a8 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	883a      	ldrh	r2, [r7, #0]
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f7ff ffb9 	bl	800155a <LCD_FillColor>
	
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	20000a0c 	.word	0x20000a0c

080015f4 <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4623      	mov	r3, r4
 8001604:	80fb      	strh	r3, [r7, #6]
 8001606:	4603      	mov	r3, r0
 8001608:	80bb      	strh	r3, [r7, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	807b      	strh	r3, [r7, #2]
 800160e:	4613      	mov	r3, r2
 8001610:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001612:	883b      	ldrh	r3, [r7, #0]
 8001614:	887a      	ldrh	r2, [r7, #2]
 8001616:	88b9      	ldrh	r1, [r7, #4]
 8001618:	88f8      	ldrh	r0, [r7, #6]
 800161a:	f7ff ff45 	bl	80014a8 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	883a      	ldrh	r2, [r7, #0]
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	461a      	mov	r2, r3
 8001628:	8b3b      	ldrh	r3, [r7, #24]
 800162a:	4619      	mov	r1, r3
 800162c:	4610      	mov	r0, r2
 800162e:	f7ff ff94 	bl	800155a <LCD_FillColor>
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
	...

0800163c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	460b      	mov	r3, r1
 8001648:	80bb      	strh	r3, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <LCD_DrawChar+0xb0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <LCD_DrawChar+0x20>
 8001656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165a:	e000      	b.n	800165e <LCD_DrawChar+0x22>
 800165c:	2300      	movs	r3, #0
 800165e:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <LCD_DrawChar+0xb0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <LCD_DrawChar+0x30>
 8001668:	2300      	movs	r3, #0
 800166a:	e001      	b.n	8001670 <LCD_DrawChar+0x34>
 800166c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001670:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	3b20      	subs	r3, #32
 8001676:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001678:	88b9      	ldrh	r1, [r7, #4]
 800167a:	88f8      	ldrh	r0, [r7, #6]
 800167c:	2310      	movs	r3, #16
 800167e:	2208      	movs	r2, #8
 8001680:	f7ff ff12 	bl	80014a8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001684:	202c      	movs	r0, #44	; 0x2c
 8001686:	f7ff fdd7 	bl	8001238 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800168a:	2300      	movs	r3, #0
 800168c:	75bb      	strb	r3, [r7, #22]
 800168e:	e024      	b.n	80016da <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	7dbb      	ldrb	r3, [r7, #22]
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <LCD_DrawChar+0xb4>)
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	440a      	add	r2, r1
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80016a0:	2300      	movs	r3, #0
 80016a2:	757b      	strb	r3, [r7, #21]
 80016a4:	e013      	b.n	80016ce <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 80016b0:	8a7b      	ldrh	r3, [r7, #18]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fdce 	bl	8001254 <LCD_Write_Data>
 80016b8:	e003      	b.n	80016c2 <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 80016ba:	8a3b      	ldrh	r3, [r7, #16]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fdc9 	bl	8001254 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80016c8:	7d7b      	ldrb	r3, [r7, #21]
 80016ca:	3301      	adds	r3, #1
 80016cc:	757b      	strb	r3, [r7, #21]
 80016ce:	7d7b      	ldrb	r3, [r7, #21]
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	d9e8      	bls.n	80016a6 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80016d4:	7dbb      	ldrb	r3, [r7, #22]
 80016d6:	3301      	adds	r3, #1
 80016d8:	75bb      	strb	r3, [r7, #22]
 80016da:	7dbb      	ldrb	r3, [r7, #22]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d9d7      	bls.n	8001690 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000a0c 	.word	0x20000a0c
 80016f0:	08009fc4 	.word	0x08009fc4

080016f4 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	603a      	str	r2, [r7, #0]
 80016fe:	80fb      	strh	r3, [r7, #6]
 8001700:	460b      	mov	r3, r1
 8001702:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001704:	e01c      	b.n	8001740 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	2be8      	cmp	r3, #232	; 0xe8
 800170a:	d904      	bls.n	8001716 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800170c:	2300      	movs	r3, #0
 800170e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	3310      	adds	r3, #16
 8001714:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800171c:	d903      	bls.n	8001726 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800171e:	2300      	movs	r3, #0
 8001720:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001722:	2300      	movs	r3, #0
 8001724:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	88b9      	ldrh	r1, [r7, #4]
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff84 	bl	800163c <LCD_DrawChar>
		
		pStr ++;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	3308      	adds	r3, #8
 800173e:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1de      	bne.n	8001706 <LCD_DrawString+0x12>
		
	}
	
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4623      	mov	r3, r4
 8001764:	80fb      	strh	r3, [r7, #6]
 8001766:	4603      	mov	r3, r0
 8001768:	80bb      	strh	r3, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	70fb      	strb	r3, [r7, #3]
 800176e:	4613      	mov	r3, r2
 8001770:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	3b20      	subs	r3, #32
 8001776:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001778:	88b9      	ldrh	r1, [r7, #4]
 800177a:	88f8      	ldrh	r0, [r7, #6]
 800177c:	2310      	movs	r3, #16
 800177e:	2208      	movs	r2, #8
 8001780:	f7ff fe92 	bl	80014a8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001784:	202c      	movs	r0, #44	; 0x2c
 8001786:	f7ff fd57 	bl	8001238 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800178a:	2300      	movs	r3, #0
 800178c:	73bb      	strb	r3, [r7, #14]
 800178e:	e024      	b.n	80017da <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001790:	7b3a      	ldrb	r2, [r7, #12]
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	4915      	ldr	r1, [pc, #84]	; (80017ec <LCD_DrawChar_Color+0x98>)
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	440a      	add	r2, r1
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80017a0:	2300      	movs	r3, #0
 80017a2:	737b      	strb	r3, [r7, #13]
 80017a4:	e013      	b.n	80017ce <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80017b0:	8c3b      	ldrh	r3, [r7, #32]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fd4e 	bl	8001254 <LCD_Write_Data>
 80017b8:	e003      	b.n	80017c2 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80017ba:	883b      	ldrh	r3, [r7, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fd49 	bl	8001254 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80017c8:	7b7b      	ldrb	r3, [r7, #13]
 80017ca:	3301      	adds	r3, #1
 80017cc:	737b      	strb	r3, [r7, #13]
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d9e8      	bls.n	80017a6 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80017d4:	7bbb      	ldrb	r3, [r7, #14]
 80017d6:	3301      	adds	r3, #1
 80017d8:	73bb      	strb	r3, [r7, #14]
 80017da:	7bbb      	ldrb	r3, [r7, #14]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d9d7      	bls.n	8001790 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd90      	pop	{r4, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	08009fc4 	.word	0x08009fc4

080017f0 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	4613      	mov	r3, r2
 80017fe:	80bb      	strh	r3, [r7, #4]
  LCD_Clear_Color ( usX - 10, usY, 20, 1, RED);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3b0a      	subs	r3, #10
 8001804:	b298      	uxth	r0, r3
 8001806:	88b9      	ldrh	r1, [r7, #4]
 8001808:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	2214      	movs	r2, #20
 8001812:	f7ff feef 	bl	80015f4 <LCD_Clear_Color>
  LCD_Clear_Color ( usX, usY - 10, 1, 20, RED);
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	3b0a      	subs	r3, #10
 800181a:	b299      	uxth	r1, r3
 800181c:	88f8      	ldrh	r0, [r7, #6]
 800181e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2314      	movs	r3, #20
 8001826:	2201      	movs	r2, #1
 8001828:	f7ff fee4 	bl	80015f4 <LCD_Clear_Color>
	
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b087      	sub	sp, #28
 8001838:	af02      	add	r7, sp, #8
 800183a:	60ba      	str	r2, [r7, #8]
 800183c:	461a      	mov	r2, r3
 800183e:	4603      	mov	r3, r0
 8001840:	81fb      	strh	r3, [r7, #14]
 8001842:	460b      	mov	r3, r1
 8001844:	81bb      	strh	r3, [r7, #12]
 8001846:	4613      	mov	r3, r2
 8001848:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800184a:	e01f      	b.n	800188c <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800184c:	89fb      	ldrh	r3, [r7, #14]
 800184e:	2be8      	cmp	r3, #232	; 0xe8
 8001850:	d904      	bls.n	800185c <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001852:	2300      	movs	r3, #0
 8001854:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8001856:	89bb      	ldrh	r3, [r7, #12]
 8001858:	3310      	adds	r3, #16
 800185a:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800185c:	89bb      	ldrh	r3, [r7, #12]
 800185e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001862:	d903      	bls.n	800186c <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001864:	2300      	movs	r3, #0
 8001866:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8001868:	2300      	movs	r3, #0
 800186a:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	88fc      	ldrh	r4, [r7, #6]
 8001872:	89b9      	ldrh	r1, [r7, #12]
 8001874:	89f8      	ldrh	r0, [r7, #14]
 8001876:	8c3b      	ldrh	r3, [r7, #32]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	4623      	mov	r3, r4
 800187c:	f7ff ff6a 	bl	8001754 <LCD_DrawChar_Color>
		
		pStr ++;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3301      	adds	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	3308      	adds	r3, #8
 800188a:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1db      	bne.n	800184c <LCD_DrawString_Color+0x18>
		
	}
	
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bd90      	pop	{r4, r7, pc}
	...

080018a0 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	f200 80a0 	bhi.w	80019f4 <LCD_GramScan+0x154>
 80018b4:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <LCD_GramScan+0x1c>)
 80018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	08001917 	.word	0x08001917
 80018c4:	08001961 	.word	0x08001961
 80018c8:	080019ab 	.word	0x080019ab

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 80018cc:	2036      	movs	r0, #54	; 0x36
 80018ce:	f7ff fcb3 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 80018d2:	20c8      	movs	r0, #200	; 0xc8
 80018d4:	f7ff fcbe 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80018d8:	202a      	movs	r0, #42	; 0x2a
 80018da:	f7ff fcad 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fcb8 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fcb5 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fcb2 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 80018f0:	20ef      	movs	r0, #239	; 0xef
 80018f2:	f7ff fcaf 	bl	8001254 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80018f6:	202b      	movs	r0, #43	; 0x2b
 80018f8:	f7ff fc9e 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff fca9 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff fca6 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff fca3 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 800190e:	203f      	movs	r0, #63	; 0x3f
 8001910:	f7ff fca0 	bl	8001254 <LCD_Write_Data>
					
		  break;
 8001914:	e06e      	b.n	80019f4 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001916:	2036      	movs	r0, #54	; 0x36
 8001918:	f7ff fc8e 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 800191c:	2068      	movs	r0, #104	; 0x68
 800191e:	f7ff fc99 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001922:	202a      	movs	r0, #42	; 0x2a
 8001924:	f7ff fc88 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fc93 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fc90 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001934:	2001      	movs	r0, #1
 8001936:	f7ff fc8d 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 800193a:	203f      	movs	r0, #63	; 0x3f
 800193c:	f7ff fc8a 	bl	8001254 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001940:	202b      	movs	r0, #43	; 0x2b
 8001942:	f7ff fc79 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff fc84 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff fc81 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fc7e 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001958:	20ef      	movs	r0, #239	; 0xef
 800195a:	f7ff fc7b 	bl	8001254 <LCD_Write_Data>
		
		  break;
 800195e:	e049      	b.n	80019f4 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001960:	2036      	movs	r0, #54	; 0x36
 8001962:	f7ff fc69 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001966:	2028      	movs	r0, #40	; 0x28
 8001968:	f7ff fc74 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 800196c:	202a      	movs	r0, #42	; 0x2a
 800196e:	f7ff fc63 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff fc6e 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fc6b 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff fc68 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001984:	203f      	movs	r0, #63	; 0x3f
 8001986:	f7ff fc65 	bl	8001254 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800198a:	202b      	movs	r0, #43	; 0x2b
 800198c:	f7ff fc54 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fc5f 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fc5c 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fc59 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 80019a2:	20ef      	movs	r0, #239	; 0xef
 80019a4:	f7ff fc56 	bl	8001254 <LCD_Write_Data>
		  
		  break;
 80019a8:	e024      	b.n	80019f4 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 80019aa:	2036      	movs	r0, #54	; 0x36
 80019ac:	f7ff fc44 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 80019b0:	2048      	movs	r0, #72	; 0x48
 80019b2:	f7ff fc4f 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80019b6:	202a      	movs	r0, #42	; 0x2a
 80019b8:	f7ff fc3e 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fc49 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fc46 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fc43 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 80019ce:	20ef      	movs	r0, #239	; 0xef
 80019d0:	f7ff fc40 	bl	8001254 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80019d4:	202b      	movs	r0, #43	; 0x2b
 80019d6:	f7ff fc2f 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fc3a 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fc37 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff fc34 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 80019ec:	203f      	movs	r0, #63	; 0x3f
 80019ee:	f7ff fc31 	bl	8001254 <LCD_Write_Data>
		
	    break;
 80019f2:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 80019f4:	202c      	movs	r0, #44	; 0x2c
 80019f6:	f7ff fc1f 	bl	8001238 <LCD_Write_Cmd>
	
	
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop

08001a04 <LCD_Darkmode_Toggle>:

void LCD_Darkmode_Toggle(unsigned char *petStats){
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	if (!darkmode_toggle) {
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <LCD_Darkmode_Toggle+0x30>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <LCD_Darkmode_Toggle+0x1c>
		darkmode_toggle = 1;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <LCD_Darkmode_Toggle+0x30>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
		petStats = sleep;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <LCD_Darkmode_Toggle+0x34>)
 8001a1c:	607b      	str	r3, [r7, #4]
	}
	else {
		darkmode_toggle = 0;
		petStats = normal;
	}
}
 8001a1e:	e004      	b.n	8001a2a <LCD_Darkmode_Toggle+0x26>
		darkmode_toggle = 0;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <LCD_Darkmode_Toggle+0x30>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
		petStats = normal;
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <LCD_Darkmode_Toggle+0x38>)
 8001a28:	607b      	str	r3, [r7, #4]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000a0c 	.word	0x20000a0c
 8001a38:	080186f4 	.word	0x080186f4
 8001a3c:	0800a5e4 	.word	0x0800a5e4

08001a40 <LCD_DrawPicture>:

void LCD_DrawPicture(uint16_t StartX, uint16_t StartY,unsigned char *pic) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	603a      	str	r2, [r7, #0]
 8001a4a:	80fb      	strh	r3, [r7, #6]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	80bb      	strh	r3, [r7, #4]
		uint32_t i = 8, len;
 8001a50:	2308      	movs	r3, #8
 8001a52:	617b      	str	r3, [r7, #20]
		uint16_t temp, x, y;

		x = ((uint16_t) (pic[2] << 8) + pic[3]) - 1;	  	//get width
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3302      	adds	r3, #2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	3303      	adds	r3, #3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	827b      	strh	r3, [r7, #18]
		y = ((uint16_t) (pic[4] << 8) + pic[5]) - 1;	  	//get height
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	3304      	adds	r3, #4
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	3305      	adds	r3, #5
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	823b      	strh	r3, [r7, #16]

		LCD_OpenWindow ( StartX, StartY, 120,120 );
 8001a8c:	88b9      	ldrh	r1, [r7, #4]
 8001a8e:	88f8      	ldrh	r0, [r7, #6]
 8001a90:	2378      	movs	r3, #120	; 0x78
 8001a92:	2278      	movs	r2, #120	; 0x78
 8001a94:	f7ff fd08 	bl	80014a8 <LCD_OpenWindow>
		//LCD_FillColor ( StartX*StartY ,0x01010);
		LCD_Write_Cmd(CMD_SetPixel);					//fillcolor
 8001a98:	202c      	movs	r0, #44	; 0x2c
 8001a9a:	f7ff fbcd 	bl	8001238 <LCD_Write_Cmd>
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
				* ((uint16_t) (pic[4] << 8) + pic[5]);   	//calculate size
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	3204      	adds	r2, #4
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	b292      	uxth	r2, r2
 8001abc:	0212      	lsls	r2, r2, #8
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	3205      	adds	r2, #5
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	440a      	add	r2, r1
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	005b      	lsls	r3, r3, #1
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8001ad0:	60fb      	str	r3, [r7, #12]

		while (i < (len + 8)) {							 	//start from the 9th
 8001ad2:	e015      	b.n	8001b00 <LCD_DrawPicture+0xc0>
			temp = (uint16_t) (pic[i] << 8) + pic[i + 1];	//2bits once
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	440b      	add	r3, r1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	817b      	strh	r3, [r7, #10]
			LCD_Write_Data(temp);
 8001af2:	897b      	ldrh	r3, [r7, #10]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fbad 	bl	8001254 <LCD_Write_Data>
			i = i + 2;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3302      	adds	r3, #2
 8001afe:	617b      	str	r3, [r7, #20]
		while (i < (len + 8)) {							 	//start from the 9th
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3308      	adds	r3, #8
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d3e4      	bcc.n	8001ad4 <LCD_DrawPicture+0x94>
		}
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <SystemClock_Config>:
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b14:	2301      	movs	r3, #1
{
 8001b16:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001b18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
{
 8001b1c:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001b1e:	2005      	movs	r0, #5
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b20:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b22:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b28:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001b30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b34:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b36:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b38:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001b42:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b46:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001b4a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b50:	9400      	str	r4, [sp, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b52:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b54:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b56:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b58:	f002 f870 	bl	8003c3c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e9cd 2300 	strd	r2, r3, [sp]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b72:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b74:	f002 fac6 	bl	8004104 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7e:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b80:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b84:	f002 fc7a 	bl	800447c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001b88:	b017      	add	sp, #92	; 0x5c
 8001b8a:	bd30      	pop	{r4, r5, pc}

08001b8c <main>:
{
 8001b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	2400      	movs	r4, #0
{
 8001b92:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8001b94:	f001 fccc 	bl	8003530 <HAL_Init>
  SystemClock_Config();
 8001b98:	f7ff ffbc 	bl	8001b14 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001ba0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba4:	4bb3      	ldr	r3, [pc, #716]	; (8001e74 <main+0x2e8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba6:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001baa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001bac:	2107      	movs	r1, #7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb2:	619a      	str	r2, [r3, #24]
 8001bb4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001bb6:	48b0      	ldr	r0, [pc, #704]	; (8001e78 <main+0x2ec>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001bbc:	9201      	str	r2, [sp, #4]
 8001bbe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001bc2:	2600      	movs	r6, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc4:	f042 0210 	orr.w	r2, r2, #16
 8001bc8:	619a      	str	r2, [r3, #24]
 8001bca:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001bcc:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	f002 0210 	and.w	r2, r2, #16
 8001bd2:	9202      	str	r2, [sp, #8]
 8001bd4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	699a      	ldr	r2, [r3, #24]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001bd8:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	f042 0208 	orr.w	r2, r2, #8
 8001be0:	619a      	str	r2, [r3, #24]
 8001be2:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 8001be4:	4da5      	ldr	r5, [pc, #660]	; (8001e7c <main+0x2f0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	f002 0208 	and.w	r2, r2, #8
 8001bea:	9203      	str	r2, [sp, #12]
 8001bec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bee:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
 8001bf0:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8001e80 <main+0x2f4>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf4:	f042 0220 	orr.w	r2, r2, #32
 8001bf8:	619a      	str	r2, [r3, #24]
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	f002 0220 	and.w	r2, r2, #32
 8001c00:	9204      	str	r2, [sp, #16]
 8001c02:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	f042 0204 	orr.w	r2, r2, #4
 8001c0a:	619a      	str	r2, [r3, #24]
 8001c0c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001c0e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	9305      	str	r3, [sp, #20]
 8001c16:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001c18:	f001 ffc9 	bl	8003bae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8001c1c:	464a      	mov	r2, r9
 8001c1e:	2140      	movs	r1, #64	; 0x40
 8001c20:	4895      	ldr	r0, [pc, #596]	; (8001e78 <main+0x2ec>)
 8001c22:	f001 ffc4 	bl	8003bae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8001c26:	2123      	movs	r1, #35	; 0x23
 8001c28:	464a      	mov	r2, r9
 8001c2a:	4896      	ldr	r0, [pc, #600]	; (8001e84 <main+0x2f8>)
 8001c2c:	f001 ffbf 	bl	8003bae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001c30:	4622      	mov	r2, r4
 8001c32:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001c36:	4894      	ldr	r0, [pc, #592]	; (8001e88 <main+0x2fc>)
 8001c38:	f001 ffb9 	bl	8003bae <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001c3c:	2247      	movs	r2, #71	; 0x47
 8001c3e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c40:	488d      	ldr	r0, [pc, #564]	; (8001e78 <main+0x2ec>)
 8001c42:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001c44:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8001c48:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c4c:	f001 fe00 	bl	8003850 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c50:	2208      	movs	r2, #8
 8001c52:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c54:	4888      	ldr	r0, [pc, #544]	; (8001e78 <main+0x2ec>)
 8001c56:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c58:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c60:	f001 fdf6 	bl	8003850 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c64:	2210      	movs	r2, #16
 8001c66:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <main+0x300>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c68:	4883      	ldr	r0, [pc, #524]	; (8001e78 <main+0x2ec>)
 8001c6a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c70:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c74:	f001 fdec 	bl	8003850 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001c78:	2223      	movs	r2, #35	; 0x23
 8001c7a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	4881      	ldr	r0, [pc, #516]	; (8001e84 <main+0x2f8>)
 8001c7e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001c80:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8001c84:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f001 fde2 	bl	8003850 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c92:	487d      	ldr	r0, [pc, #500]	; (8001e88 <main+0x2fc>)
 8001c94:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001c9a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9e:	f001 fdd7 	bl	8003850 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	200a      	movs	r0, #10
 8001ca8:	f001 fd9b 	bl	80037e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cac:	200a      	movs	r0, #10
 8001cae:	f001 fdb4 	bl	800381a <HAL_NVIC_EnableIRQ>
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001cb2:	230f      	movs	r3, #15
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001cb4:	2210      	movs	r2, #16
  Timing.AddressHoldTime = 15;
  Timing.DataSetupTime = 255;
 8001cb6:	21ff      	movs	r1, #255	; 0xff
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001cb8:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
  Timing.BusTurnAroundDuration = 15;
  Timing.CLKDivision = 16;
 8001cbc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  Timing.AddressHoldTime = 15;
 8001cc0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  Timing.DataLatency = 17;
 8001cc4:	2311      	movs	r3, #17
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001cc6:	4872      	ldr	r0, [pc, #456]	; (8001e90 <main+0x304>)
 8001cc8:	4f72      	ldr	r7, [pc, #456]	; (8001e94 <main+0x308>)
  Timing.DataSetupTime = 255;
 8001cca:	910a      	str	r1, [sp, #40]	; 0x28
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001ccc:	6142      	str	r2, [r0, #20]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001cce:	a908      	add	r1, sp, #32
 8001cd0:	4622      	mov	r2, r4
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001cd2:	e9c0 6700 	strd	r6, r7, [r0]
  Timing.DataLatency = 17;
 8001cd6:	930d      	str	r3, [sp, #52]	; 0x34
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001cd8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001cdc:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001ce0:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001ce4:	e9c0 840a 	strd	r8, r4, [r0, #40]	; 0x28
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ce8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001cec:	940e      	str	r4, [sp, #56]	; 0x38
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001cee:	6104      	str	r4, [r0, #16]
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001cf0:	6384      	str	r4, [r0, #56]	; 0x38
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001cf2:	f002 fea9 	bl	8004a48 <HAL_SRAM_Init>
  huart1.Init.BaudRate = 115200;
 8001cf6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cfa:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cfe:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d02:	e9c5 4406 	strd	r4, r4, [r5, #24]
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001d06:	4a64      	ldr	r2, [pc, #400]	; (8001e98 <main+0x30c>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d08:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d0a:	616b      	str	r3, [r5, #20]
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001d0c:	69d3      	ldr	r3, [r2, #28]
  huart1.Instance = USART1;
 8001d0e:	4963      	ldr	r1, [pc, #396]	; (8001e9c <main+0x310>)
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d14:	61d3      	str	r3, [r2, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d16:	4628      	mov	r0, r5
  huart1.Instance = USART1;
 8001d18:	6029      	str	r1, [r5, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d1a:	f003 f956 	bl	8004fca <HAL_UART_Init>
  htim2.Init.Prescaler = 72-1;
 8001d1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d22:	2347      	movs	r3, #71	; 0x47
 8001d24:	e9ca 1300 	strd	r1, r3, [sl]
  htim2.Init.Period = 65535;
 8001d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d2c:	4650      	mov	r0, sl
  htim2.Init.Period = 65535;
 8001d2e:	f8ca 300c 	str.w	r3, [sl, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d32:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001d36:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	f8ca 4008 	str.w	r4, [sl, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d42:	f8ca 4010 	str.w	r4, [sl, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d46:	f8ca 4018 	str.w	r4, [sl, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d4a:	f002 fec1 	bl	8004ad0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d4e:	a908      	add	r1, sp, #32
 8001d50:	4650      	mov	r0, sl
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d52:	f8cd 8020 	str.w	r8, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d56:	f002 fee6 	bl	8004b26 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d5e:	a906      	add	r1, sp, #24
 8001d60:	4650      	mov	r0, sl
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d66:	f003 f8ec 	bl	8004f42 <HAL_TIMEx_MasterConfigSynchronization>
	RTC_Init(&hrtc);
 8001d6a:	484d      	ldr	r0, [pc, #308]	; (8001ea0 <main+0x314>)
 8001d6c:	f000 f8b8 	bl	8001ee0 <RTC_Init>
	TIM2_INIT(&htim2);
 8001d70:	4650      	mov	r0, sl
 8001d72:	f000 fd8f 	bl	8002894 <TIM2_INIT>
	USART1_PRINT_INIT(&huart1);
 8001d76:	4628      	mov	r0, r5
 8001d78:	f000 f8a4 	bl	8001ec4 <USART1_PRINT_INIT>
	macXPT2046_CS_DISABLE();
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d82:	4841      	ldr	r0, [pc, #260]	; (8001e88 <main+0x2fc>)
 8001d84:	f001 ff13 	bl	8003bae <HAL_GPIO_WritePin>
	LCD_INIT();
 8001d88:	f7ff fa0f 	bl	80011aa <LCD_INIT>
	uint8_t mode_new = 0; //To Determine Whether A Mode is Updated
 8001d8c:	f88d 4002 	strb.w	r4, [sp, #2]
	uint8_t render_done=0;
 8001d90:	f88d 4003 	strb.w	r4, [sp, #3]
	while( ! XPT2046_Touch_Calibrate () );
 8001d94:	f001 f8f8 	bl	8002f88 <XPT2046_Touch_Calibrate>
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d0fb      	beq.n	8001d94 <main+0x208>
	const unsigned char * petStats = normal;
 8001d9c:	4c41      	ldr	r4, [pc, #260]	; (8001ea4 <main+0x318>)
	uint8_t mode = 0; //Current Mode: Mode 0 = Home, Mode 1 = Drink Water, Mode 3 = Pet
 8001d9e:	2600      	movs	r6, #0
		  petStats = normal;
 8001da0:	46a2      	mov	sl, r4
 8001da2:	4f41      	ldr	r7, [pc, #260]	; (8001ea8 <main+0x31c>)
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8001da4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001eac <main+0x320>
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {mode_new = 1; break;}
 8001da8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8001eb0 <main+0x324>
 8001dac:	e01d      	b.n	8001dea <main+0x25e>
	  get_TimeStamp(&real_time);
 8001dae:	a808      	add	r0, sp, #32
 8001db0:	f000 fafe 	bl	80023b0 <get_TimeStamp>
	  if (petStats != sleep){
 8001db4:	42bc      	cmp	r4, r7
 8001db6:	d045      	beq.n	8001e44 <main+0x2b8>
		  petStats = normal;
 8001db8:	4c3a      	ldr	r4, [pc, #232]	; (8001ea4 <main+0x318>)
	  XPT2046_Reset_TouchPoint(&Coordinate);
 8001dba:	a806      	add	r0, sp, #24
 8001dbc:	f001 fb83 	bl	80034c6 <XPT2046_Reset_TouchPoint>
	  if(mode != mode_new){
 8001dc0:	f89d 5002 	ldrb.w	r5, [sp, #2]
 8001dc4:	42b5      	cmp	r5, r6
 8001dc6:	d008      	beq.n	8001dda <main+0x24e>
		  render_done = 0;
 8001dc8:	2300      	movs	r3, #0
		  if (mode_new == 2){
 8001dca:	2d02      	cmp	r5, #2
		  render_done = 0;
 8001dcc:	f88d 3003 	strb.w	r3, [sp, #3]
		  if (mode_new == 2){
 8001dd0:	d103      	bne.n	8001dda <main+0x24e>
			  if (petStats == sleep){
 8001dd2:	42bc      	cmp	r4, r7
				  petStats = sleep;
 8001dd4:	bf14      	ite	ne
 8001dd6:	4c34      	ldrne	r4, [pc, #208]	; (8001ea8 <main+0x31c>)
				  petStats = normal;
 8001dd8:	4c32      	ldreq	r4, [pc, #200]	; (8001ea4 <main+0x318>)
	  Render(&mode_new, &render_done,petStats);
 8001dda:	4622      	mov	r2, r4
 8001ddc:	f10d 0103 	add.w	r1, sp, #3
 8001de0:	f10d 0002 	add.w	r0, sp, #2
 8001de4:	f7ff f88a 	bl	8000efc <Render>
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8001de8:	462e      	mov	r6, r5
 8001dea:	4641      	mov	r1, r8
 8001dec:	a806      	add	r0, sp, #24
 8001dee:	f001 fae3 	bl	80033b8 <XPT2046_Get_TouchedPoint>
	  if(mode==0) {
 8001df2:	2e00      	cmp	r6, #0
 8001df4:	d1db      	bne.n	8001dae <main+0x222>
		  RTC_Get();
 8001df6:	f000 f953 	bl	80020a0 <RTC_Get>
		  UI_Home_Display_Date(real_time.ryear, real_time.rmon, real_time.rday);
 8001dfa:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8001dfe:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 8001e02:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8001e06:	f7ff f937 	bl	8001078 <UI_Home_Display_Date>
		  UI_Home_Display_Time(real_time.rhour, real_time.rmin, real_time.rsec);
 8001e0a:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8001e0e:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8001e12:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8001e16:	f7ff f96b 	bl	80010f0 <UI_Home_Display_Time>
		  UI_Home_Display_Pet(60,70,petStats);
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	2146      	movs	r1, #70	; 0x46
 8001e1e:	203c      	movs	r0, #60	; 0x3c
 8001e20:	f7ff f9a0 	bl	8001164 <UI_Home_Display_Pet>
	  get_TimeStamp(&real_time);
 8001e24:	a808      	add	r0, sp, #32
 8001e26:	f000 fac3 	bl	80023b0 <get_TimeStamp>
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {mode_new = 1; break;}
 8001e2a:	4648      	mov	r0, r9
 8001e2c:	a906      	add	r1, sp, #24
 8001e2e:	f7ff f83b 	bl	8000ea8 <Check_touchkey>
		  petStats = normal;
 8001e32:	42bc      	cmp	r4, r7
 8001e34:	bf0c      	ite	eq
 8001e36:	463c      	moveq	r4, r7
 8001e38:	4654      	movne	r4, sl
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {mode_new = 1; break;}
 8001e3a:	b128      	cbz	r0, 8001e48 <main+0x2bc>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f88d 3002 	strb.w	r3, [sp, #2]
 8001e42:	e7ba      	b.n	8001dba <main+0x22e>
		  petStats = normal;
 8001e44:	4c18      	ldr	r4, [pc, #96]	; (8001ea8 <main+0x31c>)
 8001e46:	e7b8      	b.n	8001dba <main+0x22e>
			  if(Check_touchkey(&home_dark_mode,&Coordinate)) {mode_new = 2; break;}
 8001e48:	481a      	ldr	r0, [pc, #104]	; (8001eb4 <main+0x328>)
 8001e4a:	a906      	add	r1, sp, #24
 8001e4c:	f7ff f82c 	bl	8000ea8 <Check_touchkey>
 8001e50:	b118      	cbz	r0, 8001e5a <main+0x2ce>
 8001e52:	2302      	movs	r3, #2
 8001e54:	f88d 3002 	strb.w	r3, [sp, #2]
 8001e58:	e7af      	b.n	8001dba <main+0x22e>
			  if(Check_touchkey(&home_pet,&Coordinate)) {mode_new = 0;	if (petStats != sleep) {petStats = happy1;}; break;}
 8001e5a:	4817      	ldr	r0, [pc, #92]	; (8001eb8 <main+0x32c>)
 8001e5c:	a906      	add	r1, sp, #24
 8001e5e:	f7ff f823 	bl	8000ea8 <Check_touchkey>
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d0a9      	beq.n	8001dba <main+0x22e>
 8001e66:	42bc      	cmp	r4, r7
 8001e68:	f88d 6002 	strb.w	r6, [sp, #2]
 8001e6c:	d0ea      	beq.n	8001e44 <main+0x2b8>
 8001e6e:	4c13      	ldr	r4, [pc, #76]	; (8001ebc <main+0x330>)
 8001e70:	e7a3      	b.n	8001dba <main+0x22e>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40011800 	.word	0x40011800
 8001e7c:	20000aac 	.word	0x20000aac
 8001e80:	20000a6c 	.word	0x20000a6c
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	40011400 	.word	0x40011400
 8001e8c:	10210000 	.word	0x10210000
 8001e90:	20000a28 	.word	0x20000a28
 8001e94:	a0000104 	.word	0xa0000104
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	20000a10 	.word	0x20000a10
 8001ea4:	0800a5e4 	.word	0x0800a5e4
 8001ea8:	080186f4 	.word	0x080186f4
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	0800a5c4 	.word	0x0800a5c4
 8001eb4:	0800a5b4 	.word	0x0800a5b4
 8001eb8:	0800a5d4 	.word	0x0800a5d4
 8001ebc:	0801166c 	.word	0x0801166c

08001ec0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop

08001ec4 <USART1_PRINT_INIT>:
#include <float.h>
#endif

UART_HandleTypeDef* huart1_print;

void USART1_PRINT_INIT(UART_HandleTypeDef* h){
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	huart1_print = h;
 8001ecc:	4a03      	ldr	r2, [pc, #12]	; (8001edc <USART1_PRINT_INIT+0x18>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	20000aec 	.word	0x20000aec

08001ee0 <RTC_Init>:
uint8_t rmon,rday,rhour,rmin,rsec,rweek;
uint8_t const table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5};
uint8_t const mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};

void RTC_Init(RTC_HandleTypeDef* hrtc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
	hrtc->Instance = RTC;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <RTC_Init+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
	hrtc->Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	605a      	str	r2, [r3, #4]
	hrtc->Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(hrtc) != HAL_OK)
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f002 fc59 	bl	80047b4 <HAL_RTC_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <RTC_Init+0x2c>
	{
		Error_Handler();
 8001f08:	f7ff ffda 	bl	8001ec0 <Error_Handler>
	}
	//Check If first time connect to power source
	if(HAL_RTCEx_BKUPRead(hrtc,RTC_BKP_DR1)!=0x5050){//Deafult Value should be 0xffff
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f002 fd7e 	bl	8004a10 <HAL_RTCEx_BKUPRead>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f245 0250 	movw	r2, #20560	; 0x5050
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d010      	beq.n	8001f40 <RTC_Init+0x60>
		HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR1,0x5050);
 8001f1e:	f245 0250 	movw	r2, #20560	; 0x5050
 8001f22:	2101      	movs	r1, #1
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f002 fd59 	bl	80049dc <HAL_RTCEx_BKUPWrite>
		RTC_Set(2022,1,1,0,0,0);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	2201      	movs	r2, #1
 8001f36:	2101      	movs	r1, #1
 8001f38:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8001f3c:	f000 f806 	bl	8001f4c <RTC_Set>
	}
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40002800 	.word	0x40002800

08001f4c <RTC_Set>:

uint8_t RTC_Set(uint16_t syear, int8_t smon, uint8_t sday,uint8_t rhour,uint8_t rmin,uint8_t rsec){
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4604      	mov	r4, r0
 8001f54:	4608      	mov	r0, r1
 8001f56:	4611      	mov	r1, r2
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4623      	mov	r3, r4
 8001f5c:	80fb      	strh	r3, [r7, #6]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	717b      	strb	r3, [r7, #5]
 8001f62:	460b      	mov	r3, r1
 8001f64:	713b      	strb	r3, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set Time According To Parameters (Be Done Later Using USART)
	 */
	uint16_t t;
	uint32_t seccount=0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
	if(syear<2000||syear>2099)return 1;// Range: 1970-2099
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f74:	d304      	bcc.n	8001f80 <RTC_Set+0x34>
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f640 0233 	movw	r2, #2099	; 0x833
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <RTC_Set+0x38>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e081      	b.n	8002088 <RTC_Set+0x13c>
	for(t=1970;t<syear;++t){
 8001f84:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8001f88:	81fb      	strh	r3, [r7, #14]
 8001f8a:	e014      	b.n	8001fb6 <RTC_Set+0x6a>
		if(Is_Leap_Year(t))seccount+=31622400;
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f9dc 	bl	800234c <Is_Leap_Year>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <RTC_Set+0x5c>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
 8001fa0:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	e003      	b.n	8001fb0 <RTC_Set+0x64>
		else seccount+=31536000;
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <RTC_Set+0x144>)
 8001fac:	4413      	add	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
	for(t=1970;t<syear;++t){
 8001fb0:	89fb      	ldrh	r3, [r7, #14]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	81fb      	strh	r3, [r7, #14]
 8001fb6:	89fa      	ldrh	r2, [r7, #14]
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d3e6      	bcc.n	8001f8c <RTC_Set+0x40>
	}
	smon-=1;
 8001fbe:	797b      	ldrb	r3, [r7, #5]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	717b      	strb	r3, [r7, #5]
	for(t=0;t<smon;t++){
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	81fb      	strh	r3, [r7, #14]
 8001fca:	e01c      	b.n	8002006 <RTC_Set+0xba>
		seccount+=(uint32_t)mon_table[t]*86400;
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	4a31      	ldr	r2, [pc, #196]	; (8002094 <RTC_Set+0x148>)
 8001fd0:	5cd3      	ldrb	r3, [r2, r3]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <RTC_Set+0x14c>)
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4413      	add	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f9b2 	bl	800234c <Is_Leap_Year>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <RTC_Set+0xb4>
 8001fee:	89fb      	ldrh	r3, [r7, #14]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <RTC_Set+0xb4>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001ffa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ffe:	60bb      	str	r3, [r7, #8]
	for(t=0;t<smon;t++){
 8002000:	89fb      	ldrh	r3, [r7, #14]
 8002002:	3301      	adds	r3, #1
 8002004:	81fb      	strh	r3, [r7, #14]
 8002006:	89fa      	ldrh	r2, [r7, #14]
 8002008:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbdd      	blt.n	8001fcc <RTC_Set+0x80>
	}
	seccount+=(uint32_t)(sday-1)*86400;
 8002010:	793b      	ldrb	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	461a      	mov	r2, r3
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <RTC_Set+0x14c>)
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	4413      	add	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rhour*3600;
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	4413      	add	r3, r2
 8002030:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rmin*60;
 8002032:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4413      	add	r3, r2
 8002044:	60bb      	str	r3, [r7, #8]
	seccount += rsec;
 8002046:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	4413      	add	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]

	RTC->CRL|=1<<4;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <RTC_Set+0x150>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a11      	ldr	r2, [pc, #68]	; (800209c <RTC_Set+0x150>)
 8002056:	f043 0310 	orr.w	r3, r3, #16
 800205a:	6053      	str	r3, [r2, #4]
	RTC->CNTL=seccount&0xffff;
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <RTC_Set+0x150>)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	b29b      	uxth	r3, r3
 8002062:	61d3      	str	r3, [r2, #28]
	RTC->CNTH=seccount>>16;
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <RTC_Set+0x150>)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	6193      	str	r3, [r2, #24]
	RTC->CRL&=~(1<<4);
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <RTC_Set+0x150>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <RTC_Set+0x150>)
 8002072:	f023 0310 	bic.w	r3, r3, #16
 8002076:	6053      	str	r3, [r2, #4]
	while(!(RTC->CRL&(1<<5)));
 8002078:	bf00      	nop
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <RTC_Set+0x150>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f9      	beq.n	800207a <RTC_Set+0x12e>

	return 0;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}
 8002090:	01e13380 	.word	0x01e13380
 8002094:	0801f788 	.word	0x0801f788
 8002098:	00015180 	.word	0x00015180
 800209c:	40002800 	.word	0x40002800

080020a0 <RTC_Get>:

uint8_t RTC_Get(void){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
	/*
	 * Refresh Time variables in rtc.c
	 */
	static uint16_t daycnt=0;
	uint32_t timecount=0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
	uint32_t temp=0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
	uint32_t temp1=0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]

	timecount=RTC->CNTH;
 80020b2:	4b65      	ldr	r3, [pc, #404]	; (8002248 <RTC_Get+0x1a8>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	607b      	str	r3, [r7, #4]
	timecount<<=16;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	607b      	str	r3, [r7, #4]
	timecount+=RTC->CNTL;
 80020be:	4b62      	ldr	r3, [pc, #392]	; (8002248 <RTC_Get+0x1a8>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	607b      	str	r3, [r7, #4]

	temp=timecount/86400;//Day
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a60      	ldr	r2, [pc, #384]	; (800224c <RTC_Get+0x1ac>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	60fb      	str	r3, [r7, #12]
	if(daycnt!=temp){//New Day
 80020d4:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <RTC_Get+0x1b0>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4293      	cmp	r3, r2
 80020de:	d066      	beq.n	80021ae <RTC_Get+0x10e>
		daycnt=temp;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b5a      	ldr	r3, [pc, #360]	; (8002250 <RTC_Get+0x1b0>)
 80020e6:	801a      	strh	r2, [r3, #0]
		temp1=1970;
 80020e8:	f240 73b2 	movw	r3, #1970	; 0x7b2
 80020ec:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 80020ee:	e01b      	b.n	8002128 <RTC_Get+0x88>
			if(Is_Leap_Year(temp1)){
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f929 	bl	800234c <Is_Leap_Year>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00c      	beq.n	800211a <RTC_Get+0x7a>
				if(temp>=366)temp-=366;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8002106:	d304      	bcc.n	8002112 <RTC_Get+0x72>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e007      	b.n	8002122 <RTC_Get+0x82>
				else{temp1++; break;}
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	e00a      	b.n	8002130 <RTC_Get+0x90>
			}
			else temp-=365;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 8002120:	60fb      	str	r3, [r7, #12]
			temp1++;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3301      	adds	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 800212e:	d8df      	bhi.n	80020f0 <RTC_Get+0x50>
		}
		ryear=temp1;//Year
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	b29a      	uxth	r2, r3
 8002134:	4b47      	ldr	r3, [pc, #284]	; (8002254 <RTC_Get+0x1b4>)
 8002136:	801a      	strh	r2, [r3, #0]
		temp1=0;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 800213c:	e024      	b.n	8002188 <RTC_Get+0xe8>
			if(Is_Leap_Year(ryear)&&temp1==1){
 800213e:	4b45      	ldr	r3, [pc, #276]	; (8002254 <RTC_Get+0x1b4>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f902 	bl	800234c <Is_Leap_Year>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <RTC_Get+0xc2>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <RTC_Get+0xc2>
				if(temp>=29)temp-=29;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b1c      	cmp	r3, #28
 8002158:	d91a      	bls.n	8002190 <RTC_Get+0xf0>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3b1d      	subs	r3, #29
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e00f      	b.n	8002182 <RTC_Get+0xe2>
				else break;
			}else{
			if(temp>=mon_table[temp1])temp-=mon_table[temp1];
 8002162:	4a3d      	ldr	r2, [pc, #244]	; (8002258 <RTC_Get+0x1b8>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4293      	cmp	r3, r2
 8002170:	d310      	bcc.n	8002194 <RTC_Get+0xf4>
 8002172:	4a39      	ldr	r2, [pc, #228]	; (8002258 <RTC_Get+0x1b8>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
			else break;
			}
			temp1++;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3301      	adds	r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b1b      	cmp	r3, #27
 800218c:	d8d7      	bhi.n	800213e <RTC_Get+0x9e>
 800218e:	e002      	b.n	8002196 <RTC_Get+0xf6>
				else break;
 8002190:	bf00      	nop
 8002192:	e000      	b.n	8002196 <RTC_Get+0xf6>
			else break;
 8002194:	bf00      	nop
		}
		rmon=temp1+1;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	3301      	adds	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b2f      	ldr	r3, [pc, #188]	; (800225c <RTC_Get+0x1bc>)
 80021a0:	701a      	strb	r2, [r3, #0]
		rday=temp+1;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <RTC_Get+0x1c0>)
 80021ac:	701a      	strb	r2, [r3, #0]
	}
	temp=timecount%86400;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a26      	ldr	r2, [pc, #152]	; (800224c <RTC_Get+0x1ac>)
 80021b2:	fba2 1203 	umull	r1, r2, r2, r3
 80021b6:	0c12      	lsrs	r2, r2, #16
 80021b8:	492a      	ldr	r1, [pc, #168]	; (8002264 <RTC_Get+0x1c4>)
 80021ba:	fb01 f202 	mul.w	r2, r1, r2
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
	rhour=temp/3600;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a28      	ldr	r2, [pc, #160]	; (8002268 <RTC_Get+0x1c8>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0adb      	lsrs	r3, r3, #11
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b27      	ldr	r3, [pc, #156]	; (800226c <RTC_Get+0x1cc>)
 80021d0:	701a      	strb	r2, [r3, #0]
	rmin=(temp%3600)/60;
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <RTC_Get+0x1c8>)
 80021d6:	fba3 1302 	umull	r1, r3, r3, r2
 80021da:	0adb      	lsrs	r3, r3, #11
 80021dc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	4a22      	ldr	r2, [pc, #136]	; (8002270 <RTC_Get+0x1d0>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <RTC_Get+0x1d4>)
 80021f2:	701a      	strb	r2, [r3, #0]
	rsec=(temp%3600)%60;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <RTC_Get+0x1c8>)
 80021f8:	fba2 1203 	umull	r1, r2, r2, r3
 80021fc:	0ad2      	lsrs	r2, r2, #11
 80021fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002202:	fb01 f202 	mul.w	r2, r1, r2
 8002206:	1a9a      	subs	r2, r3, r2
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <RTC_Get+0x1d0>)
 800220a:	fba3 1302 	umull	r1, r3, r3, r2
 800220e:	0959      	lsrs	r1, r3, #5
 8002210:	460b      	mov	r3, r1
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a5b      	subs	r3, r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	1ad1      	subs	r1, r2, r3
 800221a:	b2ca      	uxtb	r2, r1
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <RTC_Get+0x1d8>)
 800221e:	701a      	strb	r2, [r3, #0]
	rweek=RTC_Get_Week(ryear,rmon,rday);
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <RTC_Get+0x1b4>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <RTC_Get+0x1bc>)
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	b291      	uxth	r1, r2
 800222a:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <RTC_Get+0x1c0>)
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	b292      	uxth	r2, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f000 f825 	bl	8002280 <RTC_Get_Week>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <RTC_Get+0x1dc>)
 800223c:	701a      	strb	r2, [r3, #0]
	return 0;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40002800 	.word	0x40002800
 800224c:	c22e4507 	.word	0xc22e4507
 8002250:	20000af8 	.word	0x20000af8
 8002254:	20000af0 	.word	0x20000af0
 8002258:	0801f788 	.word	0x0801f788
 800225c:	20000af2 	.word	0x20000af2
 8002260:	20000af3 	.word	0x20000af3
 8002264:	00015180 	.word	0x00015180
 8002268:	91a2b3c5 	.word	0x91a2b3c5
 800226c:	20000af4 	.word	0x20000af4
 8002270:	88888889 	.word	0x88888889
 8002274:	20000af5 	.word	0x20000af5
 8002278:	20000af6 	.word	0x20000af6
 800227c:	20000af7 	.word	0x20000af7

08002280 <RTC_Get_Week>:

uint8_t RTC_Get_Week(uint16_t year, uint16_t month, uint16_t day){
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	80fb      	strh	r3, [r7, #6]
 800228a:	460b      	mov	r3, r1
 800228c:	80bb      	strh	r3, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	807b      	strh	r3, [r7, #2]
	uint16_t temp2;
	uint8_t yearH,yearL;
	yearH=year/100;
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <RTC_Get_Week+0xc0>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	b29b      	uxth	r3, r3
 800229e:	733b      	strb	r3, [r7, #12]
	yearL=year%100;
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	4a27      	ldr	r2, [pc, #156]	; (8002340 <RTC_Get_Week+0xc0>)
 80022a4:	fba2 1203 	umull	r1, r2, r2, r3
 80022a8:	0952      	lsrs	r2, r2, #5
 80022aa:	2164      	movs	r1, #100	; 0x64
 80022ac:	fb01 f202 	mul.w	r2, r1, r2
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	737b      	strb	r3, [r7, #13]
	if (yearH>19)yearL+=100;
 80022b6:	7b3b      	ldrb	r3, [r7, #12]
 80022b8:	2b13      	cmp	r3, #19
 80022ba:	d902      	bls.n	80022c2 <RTC_Get_Week+0x42>
 80022bc:	7b7b      	ldrb	r3, [r7, #13]
 80022be:	3364      	adds	r3, #100	; 0x64
 80022c0:	737b      	strb	r3, [r7, #13]
	temp2=yearL+yearL/4;
 80022c2:	7b7b      	ldrb	r3, [r7, #13]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	7b7b      	ldrb	r3, [r7, #13]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	81fb      	strh	r3, [r7, #14]
	temp2=temp2%7;
 80022d2:	89fa      	ldrh	r2, [r7, #14]
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <RTC_Get_Week+0xc4>)
 80022d6:	fba3 1302 	umull	r1, r3, r3, r2
 80022da:	1ad1      	subs	r1, r2, r3
 80022dc:	0849      	lsrs	r1, r1, #1
 80022de:	440b      	add	r3, r1
 80022e0:	0899      	lsrs	r1, r3, #2
 80022e2:	460b      	mov	r3, r1
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	1a5b      	subs	r3, r3, r1
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	81fb      	strh	r3, [r7, #14]
	temp2=temp2+day+table_week[month-1];
 80022ec:	89fa      	ldrh	r2, [r7, #14]
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	4413      	add	r3, r2
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	4913      	ldr	r1, [pc, #76]	; (8002348 <RTC_Get_Week+0xc8>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4413      	add	r3, r2
 8002300:	81fb      	strh	r3, [r7, #14]
	if (yearL%4==0&&month<3)temp2--;
 8002302:	7b7b      	ldrb	r3, [r7, #13]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <RTC_Get_Week+0x9a>
 800230e:	88bb      	ldrh	r3, [r7, #4]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d802      	bhi.n	800231a <RTC_Get_Week+0x9a>
 8002314:	89fb      	ldrh	r3, [r7, #14]
 8002316:	3b01      	subs	r3, #1
 8002318:	81fb      	strh	r3, [r7, #14]
	return(temp2%7);
 800231a:	89fa      	ldrh	r2, [r7, #14]
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <RTC_Get_Week+0xc4>)
 800231e:	fba3 1302 	umull	r1, r3, r3, r2
 8002322:	1ad1      	subs	r1, r2, r3
 8002324:	0849      	lsrs	r1, r1, #1
 8002326:	440b      	add	r3, r1
 8002328:	0899      	lsrs	r1, r3, #2
 800232a:	460b      	mov	r3, r1
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	1a5b      	subs	r3, r3, r1
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	b29b      	uxth	r3, r3
 8002334:	b2db      	uxtb	r3, r3
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	51eb851f 	.word	0x51eb851f
 8002344:	24924925 	.word	0x24924925
 8002348:	0801f77c 	.word	0x0801f77c

0800234c <Is_Leap_Year>:

uint8_t Is_Leap_Year(uint16_t year){
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
	if(year%4==0){
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11e      	bne.n	80023a0 <Is_Leap_Year+0x54>
		if(year%100==0){
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	4a11      	ldr	r2, [pc, #68]	; (80023ac <Is_Leap_Year+0x60>)
 8002366:	fba2 1203 	umull	r1, r2, r2, r3
 800236a:	0952      	lsrs	r2, r2, #5
 800236c:	2164      	movs	r1, #100	; 0x64
 800236e:	fb01 f202 	mul.w	r2, r1, r2
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d110      	bne.n	800239c <Is_Leap_Year+0x50>
			if(year%400==0)return 1;
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <Is_Leap_Year+0x60>)
 800237e:	fba2 1203 	umull	r1, r2, r2, r3
 8002382:	09d2      	lsrs	r2, r2, #7
 8002384:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002388:	fb01 f202 	mul.w	r2, r1, r2
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <Is_Leap_Year+0x4c>
 8002394:	2301      	movs	r3, #1
 8002396:	e004      	b.n	80023a2 <Is_Leap_Year+0x56>
			else return 0;
 8002398:	2300      	movs	r3, #0
 800239a:	e002      	b.n	80023a2 <Is_Leap_Year+0x56>
		}else return 1;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <Is_Leap_Year+0x56>
	}else return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	51eb851f 	.word	0x51eb851f

080023b0 <get_TimeStamp>:




void get_TimeStamp(TimeStamp* t){
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	/*
	 * Store Updated Values By a TimeStamp Pointer
	 */
	t->ryear = ryear;
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <get_TimeStamp+0x44>)
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	801a      	strh	r2, [r3, #0]
	t->rmon = rmon;
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <get_TimeStamp+0x48>)
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	709a      	strb	r2, [r3, #2]
	t->rhour = rhour;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <get_TimeStamp+0x4c>)
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	711a      	strb	r2, [r3, #4]
	t->rmin = rmin;
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <get_TimeStamp+0x50>)
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	715a      	strb	r2, [r3, #5]
	t->rsec = rsec;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <get_TimeStamp+0x54>)
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	719a      	strb	r2, [r3, #6]
	t->rweek = rweek;
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <get_TimeStamp+0x58>)
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	71da      	strb	r2, [r3, #7]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000af0 	.word	0x20000af0
 80023f8:	20000af2 	.word	0x20000af2
 80023fc:	20000af4 	.word	0x20000af4
 8002400:	20000af5 	.word	0x20000af5
 8002404:	20000af6 	.word	0x20000af6
 8002408:	20000af7 	.word	0x20000af7

0800240c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_MspInit+0x5c>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	4a14      	ldr	r2, [pc, #80]	; (8002468 <HAL_MspInit+0x5c>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6193      	str	r3, [r2, #24]
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_MspInit+0x5c>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_MspInit+0x5c>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_MspInit+0x5c>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_MspInit+0x5c>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_MspInit+0x60>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_MspInit+0x60>)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	40021000 	.word	0x40021000
 800246c:	40010000 	.word	0x40010000

08002470 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <HAL_RTC_MspInit+0x3c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d110      	bne.n	80024a4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002482:	f001 fbcf 	bl	8003c24 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_RTC_MspInit+0x40>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_RTC_MspInit+0x40>)
 800248c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002490:	61d3      	str	r3, [r2, #28]
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_RTC_MspInit+0x40>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RTC_MspInit+0x44>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40002800 	.word	0x40002800
 80024b0:	40021000 	.word	0x40021000
 80024b4:	4242043c 	.word	0x4242043c

080024b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d10b      	bne.n	80024e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_TIM_Base_MspInit+0x34>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_TIM_Base_MspInit+0x34>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_TIM_Base_MspInit+0x34>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_UART_MspInit+0x8c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d131      	bne.n	8002574 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_UART_MspInit+0x90>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <HAL_UART_MspInit+0x90>)
 8002516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_UART_MspInit+0x90>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_UART_MspInit+0x90>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <HAL_UART_MspInit+0x90>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_UART_MspInit+0x90>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002540:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	4619      	mov	r1, r3
 8002554:	480b      	ldr	r0, [pc, #44]	; (8002584 <HAL_UART_MspInit+0x94>)
 8002556:	f001 f97b 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800255a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800255e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4619      	mov	r1, r3
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <HAL_UART_MspInit+0x94>)
 8002570:	f001 f96e 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002574:	bf00      	nop
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40013800 	.word	0x40013800
 8002580:	40021000 	.word	0x40021000
 8002584:	40010800 	.word	0x40010800

08002588 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_FSMC_MspInit+0x78>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d129      	bne.n	80025f8 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80025a4:	4b16      	ldr	r3, [pc, #88]	; (8002600 <HAL_FSMC_MspInit+0x78>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <HAL_FSMC_MspInit+0x7c>)
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	4a15      	ldr	r2, [pc, #84]	; (8002604 <HAL_FSMC_MspInit+0x7c>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	6153      	str	r3, [r2, #20]
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_FSMC_MspInit+0x7c>)
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80025c2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80025c6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	4619      	mov	r1, r3
 80025d6:	480c      	ldr	r0, [pc, #48]	; (8002608 <HAL_FSMC_MspInit+0x80>)
 80025d8:	f001 f93a 	bl	8003850 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80025dc:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80025e0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ea:	f107 0308 	add.w	r3, r7, #8
 80025ee:	4619      	mov	r1, r3
 80025f0:	4806      	ldr	r0, [pc, #24]	; (800260c <HAL_FSMC_MspInit+0x84>)
 80025f2:	f001 f92d 	bl	8003850 <HAL_GPIO_Init>
 80025f6:	e000      	b.n	80025fa <HAL_FSMC_MspInit+0x72>
    return;
 80025f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000afc 	.word	0x20000afc
 8002604:	40021000 	.word	0x40021000
 8002608:	40011800 	.word	0x40011800
 800260c:	40011400 	.word	0x40011400

08002610 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002618:	f7ff ffb6 	bl	8002588 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <HardFault_Handler+0x4>

08002636 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <MemManage_Handler+0x4>

0800263c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <BusFault_Handler+0x4>

08002642 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <UsageFault_Handler+0x4>

08002648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002670:	f000 ffa4 	bl	80035bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}

08002678 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <EXTI4_IRQHandler+0x2c>)
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <EXTI4_IRQHandler+0x30>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <EXTI4_IRQHandler+0x2c>)
 8002690:	2210      	movs	r2, #16
 8002692:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8002694:	2010      	movs	r0, #16
 8002696:	f001 fabb 	bl	8003c10 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800269a:	2010      	movs	r0, #16
 800269c:	f001 faa0 	bl	8003be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40010400 	.word	0x40010400
 80026a8:	20000b08 	.word	0x20000b08

080026ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
	return 1;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <_kill>:

int _kill(int pid, int sig)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026c4:	f002 fed2 	bl	800546c <__errno>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2216      	movs	r2, #22
 80026cc:	601a      	str	r2, [r3, #0]
	return -1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_exit>:

void _exit (int status)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026e2:	f04f 31ff 	mov.w	r1, #4294967295
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffe7 	bl	80026ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80026ec:	e7fe      	b.n	80026ec <_exit+0x12>

080026ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e00a      	b.n	8002716 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002700:	f3af 8000 	nop.w
 8002704:	4601      	mov	r1, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	60ba      	str	r2, [r7, #8]
 800270c:	b2ca      	uxtb	r2, r1
 800270e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	dbf0      	blt.n	8002700 <_read+0x12>
	}

return len;
 800271e:	687b      	ldr	r3, [r7, #4]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e009      	b.n	800274e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	60ba      	str	r2, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3301      	adds	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	dbf1      	blt.n	800273a <_write+0x12>
	}
	return len;
 8002756:	687b      	ldr	r3, [r7, #4]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_close>:

int _close(int file)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	return -1;
 8002768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002786:	605a      	str	r2, [r3, #4]
	return 0;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <_isatty>:

int _isatty(int file)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	return 1;
 800279c:	2301      	movs	r3, #1
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
	return 0;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <_sbrk+0x5c>)
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <_sbrk+0x60>)
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <_sbrk+0x64>)
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <_sbrk+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f0:	f002 fe3c 	bl	800546c <__errno>
 80027f4:	4603      	mov	r3, r0
 80027f6:	220c      	movs	r2, #12
 80027f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e009      	b.n	8002814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <_sbrk+0x64>)
 8002810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20010000 	.word	0x20010000
 8002820:	00000400 	.word	0x00000400
 8002824:	20000b00 	.word	0x20000b00
 8002828:	20000b50 	.word	0x20000b50

0800282c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <SystemInit+0x5c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <SystemInit+0x5c>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <SystemInit+0x5c>)
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4911      	ldr	r1, [pc, #68]	; (8002888 <SystemInit+0x5c>)
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <SystemInit+0x60>)
 8002844:	4013      	ands	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <SystemInit+0x5c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <SystemInit+0x5c>)
 800284e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <SystemInit+0x5c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <SystemInit+0x5c>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002862:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <SystemInit+0x5c>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <SystemInit+0x5c>)
 800286a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800286e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SystemInit+0x5c>)
 8002872:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002876:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <SystemInit+0x64>)
 800287a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800287e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	40021000 	.word	0x40021000
 800288c:	f8ff0000 	.word	0xf8ff0000
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <TIM2_INIT>:
#include "timer.h"

TIM_HandleTypeDef* htim2_loc;

void TIM2_INIT(TIM_HandleTypeDef* htim2){
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	htim2_loc = htim2;
 800289c:	4a03      	ldr	r2, [pc, #12]	; (80028ac <TIM2_INIT+0x18>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6013      	str	r3, [r2, #0]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	20000b04 	.word	0x20000b04

080028b0 <XPT2046_DelayUS>:
		-4.979353, -0.001750, 0.065168, -13.318824 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e00a      	b.n	80028d4 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 80028be:	230c      	movs	r3, #12
 80028c0:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 80028c2:	bf00      	nop
 80028c4:	7afb      	ldrb	r3, [r7, #11]
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	72fa      	strb	r2, [r7, #11]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1fa      	bne.n	80028c4 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3301      	adds	r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3f0      	bcc.n	80028be <XPT2046_DelayUS+0xe>
			;

	}

}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 80028f2:	2200      	movs	r2, #0
 80028f4:	2104      	movs	r1, #4
 80028f6:	481d      	ldr	r0, [pc, #116]	; (800296c <XPT2046_WriteCMD+0x84>)
 80028f8:	f001 f959 	bl	8003bae <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 80028fc:	2200      	movs	r2, #0
 80028fe:	2101      	movs	r1, #1
 8002900:	481a      	ldr	r0, [pc, #104]	; (800296c <XPT2046_WriteCMD+0x84>)
 8002902:	f001 f954 	bl	8003bae <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e027      	b.n	800295c <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800290c:	79fa      	ldrb	r2, [r7, #7]
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	f1c3 0307 	rsb	r3, r3, #7
 8002914:	fa42 f303 	asr.w	r3, r2, r3
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <XPT2046_WriteCMD+0x44>
 8002920:	2201      	movs	r2, #1
 8002922:	2104      	movs	r1, #4
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <XPT2046_WriteCMD+0x84>)
 8002926:	f001 f942 	bl	8003bae <HAL_GPIO_WritePin>
 800292a:	e004      	b.n	8002936 <XPT2046_WriteCMD+0x4e>
 800292c:	2200      	movs	r2, #0
 800292e:	2104      	movs	r1, #4
 8002930:	480e      	ldr	r0, [pc, #56]	; (800296c <XPT2046_WriteCMD+0x84>)
 8002932:	f001 f93c 	bl	8003bae <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8002936:	2005      	movs	r0, #5
 8002938:	f7ff ffba 	bl	80028b0 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 800293c:	2201      	movs	r2, #1
 800293e:	2101      	movs	r1, #1
 8002940:	480a      	ldr	r0, [pc, #40]	; (800296c <XPT2046_WriteCMD+0x84>)
 8002942:	f001 f934 	bl	8003bae <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8002946:	2005      	movs	r0, #5
 8002948:	f7ff ffb2 	bl	80028b0 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 800294c:	2200      	movs	r2, #0
 800294e:	2101      	movs	r1, #1
 8002950:	4806      	ldr	r0, [pc, #24]	; (800296c <XPT2046_WriteCMD+0x84>)
 8002952:	f001 f92c 	bl	8003bae <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	3301      	adds	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	2b07      	cmp	r3, #7
 8002960:	d9d4      	bls.n	800290c <XPT2046_WriteCMD+0x24>
	}

}
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40011800 	.word	0x40011800

08002970 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8002976:	2300      	movs	r3, #0
 8002978:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 800297a:	2200      	movs	r2, #0
 800297c:	2104      	movs	r1, #4
 800297e:	4819      	ldr	r0, [pc, #100]	; (80029e4 <XPT2046_ReadCMD+0x74>)
 8002980:	f001 f915 	bl	8003bae <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8002984:	2201      	movs	r2, #1
 8002986:	2101      	movs	r1, #1
 8002988:	4816      	ldr	r0, [pc, #88]	; (80029e4 <XPT2046_ReadCMD+0x74>)
 800298a:	f001 f910 	bl	8003bae <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 800298e:	2300      	movs	r3, #0
 8002990:	71fb      	strb	r3, [r7, #7]
 8002992:	e01e      	b.n	80029d2 <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8002994:	2200      	movs	r2, #0
 8002996:	2101      	movs	r1, #1
 8002998:	4812      	ldr	r0, [pc, #72]	; (80029e4 <XPT2046_ReadCMD+0x74>)
 800299a:	f001 f908 	bl	8003bae <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 800299e:	2108      	movs	r1, #8
 80029a0:	4810      	ldr	r0, [pc, #64]	; (80029e4 <XPT2046_ReadCMD+0x74>)
 80029a2:	f001 f8ed 	bl	8003b80 <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f1c3 030b 	rsb	r3, r3, #11
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029bc:	4313      	orrs	r3, r2
 80029be:	b21b      	sxth	r3, r3
 80029c0:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 80029c2:	2201      	movs	r2, #1
 80029c4:	2101      	movs	r1, #1
 80029c6:	4807      	ldr	r0, [pc, #28]	; (80029e4 <XPT2046_ReadCMD+0x74>)
 80029c8:	f001 f8f1 	bl	8003bae <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	3301      	adds	r3, #1
 80029d0:	71fb      	strb	r3, [r7, #7]
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b0b      	cmp	r3, #11
 80029d6:	d9dd      	bls.n	8002994 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 80029d8:	88bb      	ldrh	r3, [r7, #4]

}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40011800 	.word	0x40011800

080029e8 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff77 	bl	80028e8 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 80029fa:	f7ff ffb9 	bl	8002970 <XPT2046_ReadCMD>
 80029fe:	4603      	mov	r3, r0

}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 8002a12:	2090      	movs	r0, #144	; 0x90
 8002a14:	f7ff ffe8 	bl	80029e8 <XPT2046_ReadAdc>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7ff ff47 	bl	80028b0 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 8002a22:	20d0      	movs	r0, #208	; 0xd0
 8002a24:	f7ff ffe0 	bl	80029e8 <XPT2046_ReadAdc>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	89fa      	ldrh	r2, [r7, #14]
 8002a30:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	89ba      	ldrh	r2, [r7, #12]
 8002a36:	801a      	strh	r2, [r3, #0]

}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b092      	sub	sp, #72	; 0x48
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	2228      	movs	r2, #40	; 0x28
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 fd32 	bl	80054c0 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8002a5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a60:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ffce 	bl	8002a08 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8002a6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a70:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	3348      	adds	r3, #72	; 0x48
 8002a78:	443b      	add	r3, r7
 8002a7a:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 8002a7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a82:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002a86:	330a      	adds	r3, #10
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	3348      	adds	r3, #72	; 0x48
 8002a8c:	443b      	add	r3, r7
 8002a8e:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 8002a92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a96:	3301      	adds	r3, #1
 8002a98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 8002a9c:	2110      	movs	r1, #16
 8002a9e:	4871      	ldr	r0, [pc, #452]	; (8002c64 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002aa0:	f001 f86e 	bl	8003b80 <HAL_GPIO_ReadPin>
 8002aa4:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <XPT2046_ReadAdc_Smooth_XY+0x72>
 8002aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aae:	2b09      	cmp	r3, #9
 8002ab0:	d9d4      	bls.n	8002a5c <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	486b      	ldr	r0, [pc, #428]	; (8002c64 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002ab6:	f001 f863 	bl	8003b80 <HAL_GPIO_ReadPin>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8002ac0:	4b69      	ldr	r3, [pc, #420]	; (8002c68 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8002ac6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aca:	2b0a      	cmp	r3, #10
 8002acc:	f040 80c4 	bne.w	8002c58 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8002ad0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8002ada:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002aea:	e02b      	b.n	8002b44 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8002aec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	3348      	adds	r3, #72	; 0x48
 8002af4:	443b      	add	r3, r7
 8002af6:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002afa:	461a      	mov	r2, r3
 8002afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afe:	4293      	cmp	r3, r2
 8002b00:	dd08      	ble.n	8002b14 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8002b02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	3348      	adds	r3, #72	; 0x48
 8002b0a:	443b      	add	r3, r7
 8002b0c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002b10:	643b      	str	r3, [r7, #64]	; 0x40
 8002b12:	e012      	b.n	8002b3a <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8002b14:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	3348      	adds	r3, #72	; 0x48
 8002b1c:	443b      	add	r3, r7
 8002b1e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002b22:	461a      	mov	r2, r3
 8002b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b26:	4293      	cmp	r3, r2
 8002b28:	da07      	bge.n	8002b3a <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8002b2a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	3348      	adds	r3, #72	; 0x48
 8002b32:	443b      	add	r3, r7
 8002b34:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8002b3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002b44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b48:	2b09      	cmp	r3, #9
 8002b4a:	d9cf      	bls.n	8002aec <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002b52:	e02f      	b.n	8002bb4 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8002b54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b58:	330a      	adds	r3, #10
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	3348      	adds	r3, #72	; 0x48
 8002b5e:	443b      	add	r3, r7
 8002b60:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002b64:	461a      	mov	r2, r3
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	dd09      	ble.n	8002b80 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8002b6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b70:	330a      	adds	r3, #10
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	3348      	adds	r3, #72	; 0x48
 8002b76:	443b      	add	r3, r7
 8002b78:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7e:	e014      	b.n	8002baa <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 8002b80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b84:	330a      	adds	r3, #10
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	3348      	adds	r3, #72	; 0x48
 8002b8a:	443b      	add	r3, r7
 8002b8c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002b90:	461a      	mov	r2, r3
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	4293      	cmp	r3, r2
 8002b96:	da08      	bge.n	8002baa <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8002b98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002b9c:	330a      	adds	r3, #10
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	3348      	adds	r3, #72	; 0x48
 8002ba2:	443b      	add	r3, r7
 8002ba4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 8002baa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002bb4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	d9cb      	bls.n	8002b54 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8002bbc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bc6:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8002bc8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002bd8:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8002bda:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002bde:	4413      	add	r3, r2
 8002be0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002be4:	4413      	add	r3, r2
 8002be6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002bea:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8002bec:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002bf6:	441a      	add	r2, r3
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	1ad2      	subs	r2, r2, r3
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfe:	1ad3      	subs	r3, r2, r3
				>> 3;
 8002c00:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8002c08:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c12:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8002c14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002c1e:	4413      	add	r3, r2
 8002c20:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002c24:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8002c26:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8002c30:	4413      	add	r3, r2
 8002c32:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8002c36:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8002c38:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002c42:	441a      	add	r2, r3
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4a:	1ad3      	subs	r3, r2, r3
				>> 3;
 8002c4c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	805a      	strh	r2, [r3, #2]

		return 1;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8002c58:	2300      	movs	r3, #0

}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3748      	adds	r7, #72	; 0x48
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40011800 	.word	0x40011800
 8002c68:	20000b08 	.word	0x20000b08

08002c6c <XPT2046_Calculate_CalibrationFactor>:
#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(
		strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_Coordinate *pScreenSample,
		strType_XPT2046_Calibration *pCalibrationFactor) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3308      	adds	r3, #8
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	1ad3      	subs	r3, r2, r3
			* (pScreenSample[1].y - pScreenSample[2].y))
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	3204      	adds	r2, #4
 8002c8e:	8852      	ldrh	r2, [r2, #2]
 8002c90:	4611      	mov	r1, r2
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	3208      	adds	r2, #8
 8002c96:	8852      	ldrh	r2, [r2, #2]
 8002c98:	1a8a      	subs	r2, r1, r2
 8002c9a:	fb03 f202 	mul.w	r2, r3, r2
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3308      	adds	r3, #8
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	1acb      	subs	r3, r1, r3
					* (pScreenSample[0].y - pScreenSample[2].y));
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	8849      	ldrh	r1, [r1, #2]
 8002cb2:	4608      	mov	r0, r1
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	3108      	adds	r1, #8
 8002cb8:	8849      	ldrh	r1, [r1, #2]
 8002cba:	1a41      	subs	r1, r0, r1
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8002cc0:	1ad3      	subs	r3, r2, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc0a 	bl	80004dc <__aeabi_i2d>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	f7fd fece 	bl	8000a80 <__aeabi_dcmpeq>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]
 8002cee:	e145      	b.n	8002f7c <XPT2046_Calculate_CalibrationFactor+0x310>

	else {

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].x)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	3204      	adds	r2, #4
 8002d02:	8852      	ldrh	r2, [r2, #2]
 8002d04:	4611      	mov	r1, r2
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	8852      	ldrh	r2, [r2, #2]
 8002d0c:	1a8a      	subs	r2, r1, r2
 8002d0e:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3304      	adds	r3, #4
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	8849      	ldrh	r1, [r1, #2]
 8002d26:	4608      	mov	r0, r1
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	3108      	adds	r1, #8
 8002d2c:	8849      	ldrh	r1, [r1, #2]
 8002d2e:	1a41      	subs	r1, r0, r1
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8002d34:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fbd0 	bl	80004dc <__aeabi_i2d>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x))
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	3204      	adds	r2, #4
 8002d58:	8812      	ldrh	r2, [r2, #0]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	1a8a      	subs	r2, r1, r2
 8002d64:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3308      	adds	r3, #8
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	3104      	adds	r1, #4
 8002d7a:	8809      	ldrh	r1, [r1, #0]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	3108      	adds	r1, #8
 8002d82:	8809      	ldrh	r1, [r1, #0]
 8002d84:	1a41      	subs	r1, r0, r1
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8002d8a:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fba5 	bl	80004dc <__aeabi_i2d>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	3308      	adds	r3, #8
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3304      	adds	r3, #4
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].x)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3304      	adds	r3, #4
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	4619      	mov	r1, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3308      	adds	r3, #8
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	8852      	ldrh	r2, [r2, #2]
 8002dc6:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].x)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	3308      	adds	r3, #8
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	3104      	adds	r1, #4
 8002df0:	8849      	ldrh	r1, [r1, #2]
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8002df6:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].x)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3304      	adds	r3, #4
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	fb00 f303 	mul.w	r3, r0, r3
 8002e18:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	3108      	adds	r1, #8
 8002e1e:	8849      	ldrh	r1, [r1, #2]
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8002e24:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb58 	bl	80004dc <__aeabi_i2d>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	885b      	ldrh	r3, [r3, #2]
 8002e3a:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].y)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3308      	adds	r3, #8
 8002e40:	885b      	ldrh	r3, [r3, #2]
 8002e42:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	3204      	adds	r2, #4
 8002e48:	8852      	ldrh	r2, [r2, #2]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	8852      	ldrh	r2, [r2, #2]
 8002e52:	1a8a      	subs	r2, r1, r2
 8002e54:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	885b      	ldrh	r3, [r3, #2]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3308      	adds	r3, #8
 8002e64:	885b      	ldrh	r3, [r3, #2]
 8002e66:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	8849      	ldrh	r1, [r1, #2]
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	3108      	adds	r1, #8
 8002e72:	8849      	ldrh	r1, [r1, #2]
 8002e74:	1a41      	subs	r1, r0, r1
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8002e7a:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb2d 	bl	80004dc <__aeabi_i2d>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3308      	adds	r3, #8
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y))
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	3204      	adds	r2, #4
 8002e9e:	8852      	ldrh	r2, [r2, #2]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	8852      	ldrh	r2, [r2, #2]
 8002ea8:	1a8a      	subs	r2, r1, r2
 8002eaa:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	885b      	ldrh	r3, [r3, #2]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	885b      	ldrh	r3, [r3, #2]
 8002eba:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	3104      	adds	r1, #4
 8002ec0:	8809      	ldrh	r1, [r1, #0]
 8002ec2:	4608      	mov	r0, r1
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	3108      	adds	r1, #8
 8002ec8:	8809      	ldrh	r1, [r1, #0]
 8002eca:	1a41      	subs	r1, r0, r1
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8002ed0:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd fb02 	bl	80004dc <__aeabi_i2d>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3304      	adds	r3, #4
 8002eee:	885b      	ldrh	r3, [r3, #2]
 8002ef0:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].y)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3308      	adds	r3, #8
 8002f00:	885b      	ldrh	r3, [r3, #2]
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	8852      	ldrh	r2, [r2, #2]
 8002f0c:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	4619      	mov	r1, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3308      	adds	r3, #8
 8002f1a:	885b      	ldrh	r3, [r3, #2]
 8002f1c:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].y)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3308      	adds	r3, #8
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	885b      	ldrh	r3, [r3, #2]
 8002f2c:	fb00 f303 	mul.w	r3, r0, r3
 8002f30:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	3104      	adds	r1, #4
 8002f36:	8849      	ldrh	r1, [r1, #2]
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8002f3c:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3304      	adds	r3, #4
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	885b      	ldrh	r3, [r3, #2]
 8002f4a:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].y)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3304      	adds	r3, #4
 8002f58:	885b      	ldrh	r3, [r3, #2]
 8002f5a:	fb00 f303 	mul.w	r3, r0, r3
 8002f5e:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	3108      	adds	r1, #8
 8002f64:	8849      	ldrh	r1, [r1, #2]
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8002f6a:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fab5 	bl	80004dc <__aeabi_i2d>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}

	return ucRet;
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]

}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void) {
 8002f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f8c:	b0a0      	sub	sp, #128	; 0x80
 8002f8e:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char *pStr = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	66bb      	str	r3, [r7, #104]	; 0x68
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 8002fac:	23f0      	movs	r3, #240	; 0xf0
 8002fae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 8002fb2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002fb6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	    usScreenWidth = LCD_Default_Max_Heigth;
	    usScreenHeigth = LCD_Default_Max_Width;
	
	  #endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 8002fba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 8002fc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8002fd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fd6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8002fda:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	109b      	asrs	r3, r3, #2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8002fec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	109b      	asrs	r3, r3, #2
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8002ffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003002:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8003006:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800300a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 800300e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003012:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	LCD_GramScan(1);
 8003016:	2001      	movs	r0, #1
 8003018:	f7fe fc42 	bl	80018a0 <LCD_GramScan>

	for (i = 0; i < 4; i++) {
 800301c:	2300      	movs	r3, #0
 800301e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003022:	e047      	b.n	80030b4 <XPT2046_Touch_Calibrate+0x12c>
		LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8003024:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003028:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800302c:	2100      	movs	r1, #0
 800302e:	2000      	movs	r0, #0
 8003030:	f7fe fab2 	bl	8001598 <LCD_Clear>

		pStr = "Touch Calibrate ......";
 8003034:	4bb6      	ldr	r3, [pc, #728]	; (8003310 <XPT2046_Touch_Calibrate+0x388>)
 8003036:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color(
				(usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1,
 8003038:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800303c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800303e:	f7fd f8f3 	bl	8000228 <strlen>
 8003042:	4603      	mov	r3, r0
 8003044:	3b07      	subs	r3, #7
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	1ae3      	subs	r3, r4, r3
 800304a:	085b      	lsrs	r3, r3, #1
		LCD_DrawString_Color(
 800304c:	b298      	uxth	r0, r3
 800304e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	b299      	uxth	r1, r3
 8003056:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003060:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003062:	f7fe fbe7 	bl	8001834 <LCD_DrawString_Color>
		/*
		sprintf(cStr, "%d", i + 1);
		LCD_DrawString_Color(usScreenWidth >> 1,
				(usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
		*/
		XPT2046_DelayUS(100000);
 8003066:	48ab      	ldr	r0, [pc, #684]	; (8003314 <XPT2046_Touch_Calibrate+0x38c>)
 8003068:	f7ff fc22 	bl	80028b0 <XPT2046_DelayUS>

		LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 800306c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	3378      	adds	r3, #120	; 0x78
 8003074:	443b      	add	r3, r7
 8003076:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800307a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3378      	adds	r3, #120	; 0x78
 8003082:	443b      	add	r3, r7
 8003084:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7fe fbb0 	bl	80017f0 <LCD_DrawCross>

		while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
 8003090:	bf00      	nop
 8003092:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003096:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fcce 	bl	8002a40 <XPT2046_ReadAdc_Smooth_XY>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f3      	beq.n	8003092 <XPT2046_Touch_Calibrate+0x10a>
	for (i = 0; i < 4; i++) {
 80030aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80030ae:	3301      	adds	r3, #1
 80030b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80030b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d9b3      	bls.n	8003024 <XPT2046_Touch_Calibrate+0x9c>
			;

	}

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample,
 80030bc:	463a      	mov	r2, r7
 80030be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80030c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fdd0 	bl	8002c6c <XPT2046_Calculate_CalibrationFactor>
			&CalibrationFactor);

	if (CalibrationFactor.Divider == 0)
 80030cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	f7fd fcd2 	bl	8000a80 <__aeabi_dcmpeq>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 8113 	bne.w	800330a <XPT2046_Touch_Calibrate+0x382>
		goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 80030e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd f9f5 	bl	80004dc <__aeabi_i2d>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4620      	mov	r0, r4
 80030f8:	4629      	mov	r1, r5
 80030fa:	f7fd fa59 	bl	80005b0 <__aeabi_dmul>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4690      	mov	r8, r2
 8003104:	4699      	mov	r9, r3
			+ (CalibrationFactor.Bn * strScreenSample[3].y)
 8003106:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800310a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd f9e4 	bl	80004dc <__aeabi_i2d>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4620      	mov	r0, r4
 800311a:	4629      	mov	r1, r5
 800311c:	f7fd fa48 	bl	80005b0 <__aeabi_dmul>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4640      	mov	r0, r8
 8003126:	4649      	mov	r1, r9
 8003128:	f7fd f88c 	bl	8000244 <__adddf3>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
			+ CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8003134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003138:	f7fd f884 	bl	8000244 <__adddf3>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003148:	f7fd fb5c 	bl	8000804 <__aeabi_ddiv>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7fd fd04 	bl	8000b60 <__aeabi_d2uiz>
 8003158:	4603      	mov	r3, r0
 800315a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 800315e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003162:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd f9b8 	bl	80004dc <__aeabi_i2d>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4620      	mov	r0, r4
 8003172:	4629      	mov	r1, r5
 8003174:	f7fd fa1c 	bl	80005b0 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4690      	mov	r8, r2
 800317e:	4699      	mov	r9, r3
			+ (CalibrationFactor.En * strScreenSample[3].y)
 8003180:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003184:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f9a7 	bl	80004dc <__aeabi_i2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4620      	mov	r0, r4
 8003194:	4629      	mov	r1, r5
 8003196:	f7fd fa0b 	bl	80005b0 <__aeabi_dmul>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4640      	mov	r0, r8
 80031a0:	4649      	mov	r1, r9
 80031a2:	f7fd f84f 	bl	8000244 <__adddf3>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
			+ CalibrationFactor.Fn) / CalibrationFactor.Divider;
 80031ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031b2:	f7fd f847 	bl	8000244 <__adddf3>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031c2:	f7fd fb1f 	bl	8000804 <__aeabi_ddiv>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	f7fd fcc7 	bl	8000b60 <__aeabi_d2uiz>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x =
			(usTest_x > strCrossCoordinate[3].x) ?
 80031d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 80031dc:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d906      	bls.n	80031f2 <XPT2046_Touch_Calibrate+0x26a>
					(usTest_x - strCrossCoordinate[3].x) :
 80031e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 80031e8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	e005      	b.n	80031fe <XPT2046_Touch_Calibrate+0x276>
					(strCrossCoordinate[3].x - usTest_x);
 80031f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	usGap_x =
 80031f6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y =
			(usTest_y > strCrossCoordinate[3].y) ?
 8003202:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8003206:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800320a:	429a      	cmp	r2, r3
 800320c:	d906      	bls.n	800321c <XPT2046_Touch_Calibrate+0x294>
					(usTest_y - strCrossCoordinate[3].y) :
 800320e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8003212:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	b29b      	uxth	r3, r3
 800321a:	e005      	b.n	8003228 <XPT2046_Touch_Calibrate+0x2a0>
					(strCrossCoordinate[3].y - usTest_y);
 800321c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
	usGap_y =
 8003220:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	b29b      	uxth	r3, r3
 8003228:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((usGap_x > 10) || (usGap_y > 10))
 800322c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003230:	2b0a      	cmp	r3, #10
 8003232:	d877      	bhi.n	8003324 <XPT2046_Touch_Calibrate+0x39c>
 8003234:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003238:	2b0a      	cmp	r3, #10
 800323a:	d873      	bhi.n	8003324 <XPT2046_Touch_Calibrate+0x39c>
		goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 800323c:	e9d7 0100 	ldrd	r0, r1, [r7]
			/ CalibrationFactor.Divider;
 8003240:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003244:	f7fd fade 	bl	8000804 <__aeabi_ddiv>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 800324c:	4932      	ldr	r1, [pc, #200]	; (8003318 <XPT2046_Touch_Calibrate+0x390>)
 800324e:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8003252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
			/ CalibrationFactor.Divider;
 8003256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800325a:	f7fd fad3 	bl	8000804 <__aeabi_ddiv>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8003262:	492d      	ldr	r1, [pc, #180]	; (8003318 <XPT2046_Touch_Calibrate+0x390>)
 8003264:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8003268:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
			/ CalibrationFactor.Divider;
 800326c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003270:	f7fd fac8 	bl	8000804 <__aeabi_ddiv>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8003278:	4927      	ldr	r1, [pc, #156]	; (8003318 <XPT2046_Touch_Calibrate+0x390>)
 800327a:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 800327e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			/ CalibrationFactor.Divider;
 8003282:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003286:	f7fd fabd 	bl	8000804 <__aeabi_ddiv>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 800328e:	4922      	ldr	r1, [pc, #136]	; (8003318 <XPT2046_Touch_Calibrate+0x390>)
 8003290:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8003294:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
			/ CalibrationFactor.Divider;
 8003298:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800329c:	f7fd fab2 	bl	8000804 <__aeabi_ddiv>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 80032a4:	491c      	ldr	r1, [pc, #112]	; (8003318 <XPT2046_Touch_Calibrate+0x390>)
 80032a6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 80032aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
			/ CalibrationFactor.Divider;
 80032ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032b2:	f7fd faa7 	bl	8000804 <__aeabi_ddiv>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 80032ba:	4917      	ldr	r1, [pc, #92]	; (8003318 <XPT2046_Touch_Calibrate+0x390>)
 80032bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

#endif

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 80032c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032c4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80032c8:	2100      	movs	r1, #0
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fe f964 	bl	8001598 <LCD_Clear>

	pStr = "Welcome !";
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <XPT2046_Touch_Calibrate+0x394>)
 80032d2:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 80032d4:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80032d8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80032da:	f7fc ffa5 	bl	8000228 <strlen>
 80032de:	4603      	mov	r3, r0
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	1ae3      	subs	r3, r4, r3
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	b298      	uxth	r0, r3
 80032e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	b299      	uxth	r1, r3
 80032f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032fc:	f7fe fa9a 	bl	8001834 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(200000);
 8003300:	4807      	ldr	r0, [pc, #28]	; (8003320 <XPT2046_Touch_Calibrate+0x398>)
 8003302:	f7ff fad5 	bl	80028b0 <XPT2046_DelayUS>

	return 1;
 8003306:	2301      	movs	r3, #1
 8003308:	e04b      	b.n	80033a2 <XPT2046_Touch_Calibrate+0x41a>
		goto Failure;
 800330a:	bf00      	nop
 800330c:	e00b      	b.n	8003326 <XPT2046_Touch_Calibrate+0x39e>
 800330e:	bf00      	nop
 8003310:	08009f64 	.word	0x08009f64
 8003314:	000186a0 	.word	0x000186a0
 8003318:	20000008 	.word	0x20000008
 800331c:	08009f7c 	.word	0x08009f7c
 8003320:	00030d40 	.word	0x00030d40
		goto Failure;
 8003324:	bf00      	nop

	Failure:

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8003326:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800332a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800332e:	2100      	movs	r1, #0
 8003330:	2000      	movs	r0, #0
 8003332:	f7fe f931 	bl	8001598 <LCD_Clear>

	pStr = "Calibrate fail";
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <XPT2046_Touch_Calibrate+0x424>)
 8003338:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 800333a:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800333e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003340:	f7fc ff72 	bl	8000228 <strlen>
 8003344:	4603      	mov	r3, r0
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1ae3      	subs	r3, r4, r3
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	b298      	uxth	r0, r3
 800334e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	b299      	uxth	r1, r3
 8003356:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003362:	f7fe fa67 	bl	8001834 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	pStr = "try again";
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <XPT2046_Touch_Calibrate+0x428>)
 8003368:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 800336a:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800336e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003370:	f7fc ff5a 	bl	8000228 <strlen>
 8003374:	4603      	mov	r3, r0
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1ae3      	subs	r3, r4, r3
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	b298      	uxth	r0, r3
 800337e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	b29b      	uxth	r3, r3
 8003386:	3310      	adds	r3, #16
 8003388:	b299      	uxth	r1, r3
 800338a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003394:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003396:	f7fe fa4d 	bl	8001834 <LCD_DrawString_Color>
			(usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);
 800339a:	4806      	ldr	r0, [pc, #24]	; (80033b4 <XPT2046_Touch_Calibrate+0x42c>)
 800339c:	f7ff fa88 	bl	80028b0 <XPT2046_DelayUS>

	return 0;
 80033a0:	2300      	movs	r3, #0

}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3778      	adds	r7, #120	; 0x78
 80033a6:	46bd      	mov	sp, r7
 80033a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ac:	08009f88 	.word	0x08009f88
 80033b0:	08009f98 	.word	0x08009f98
 80033b4:	000f4240 	.word	0x000f4240

080033b8 <XPT2046_Get_TouchedPoint>:

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 80033b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 80033c8:	f107 0308 	add.w	r3, r7, #8
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fb37 	bl	8002a40 <XPT2046_ReadAdc_Smooth_XY>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d06e      	beq.n	80034b6 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80033de:	893b      	ldrh	r3, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd f87b 	bl	80004dc <__aeabi_i2d>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4620      	mov	r0, r4
 80033ec:	4629      	mov	r1, r5
 80033ee:	f7fd f8df 	bl	80005b0 <__aeabi_dmul>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4690      	mov	r8, r2
 80033f8:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd f86a 	bl	80004dc <__aeabi_i2d>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4620      	mov	r0, r4
 800340e:	4629      	mov	r1, r5
 8003410:	f7fd f8ce 	bl	80005b0 <__aeabi_dmul>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4640      	mov	r0, r8
 800341a:	4649      	mov	r1, r9
 800341c:	f7fc ff12 	bl	8000244 <__adddf3>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800342e:	f7fc ff09 	bl	8000244 <__adddf3>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f7fd fb91 	bl	8000b60 <__aeabi_d2uiz>
 800343e:	4603      	mov	r3, r0
 8003440:	b29a      	uxth	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800344c:	893b      	ldrh	r3, [r7, #8]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd f844 	bl	80004dc <__aeabi_i2d>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4620      	mov	r0, r4
 800345a:	4629      	mov	r1, r5
 800345c:	f7fd f8a8 	bl	80005b0 <__aeabi_dmul>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4690      	mov	r8, r2
 8003466:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f833 	bl	80004dc <__aeabi_i2d>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7fd f897 	bl	80005b0 <__aeabi_dmul>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4640      	mov	r0, r8
 8003488:	4649      	mov	r1, r9
 800348a:	f7fc fedb 	bl	8000244 <__adddf3>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800349c:	f7fc fed2 	bl	8000244 <__adddf3>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	f7fd fb5a 	bl	8000b60 <__aeabi_d2uiz>
 80034ac:	4603      	mov	r3, r0
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	805a      	strh	r2, [r3, #2]
 80034b4:	e001      	b.n	80034ba <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]

}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080034c6 <XPT2046_Reset_TouchPoint>:

void XPT2046_Reset_TouchPoint(strType_XPT2046_Coordinate *pDisplayCoordinate){
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
	//Reset X and Y
	pDisplayCoordinate->x = 0;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	801a      	strh	r2, [r3, #0]
	pDisplayCoordinate->y = 0;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	805a      	strh	r2, [r3, #2]
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80034e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80034e6:	e003      	b.n	80034f0 <LoopCopyDataInit>

080034e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80034ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80034ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80034ee:	3104      	adds	r1, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80034f0:	480a      	ldr	r0, [pc, #40]	; (800351c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80034f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80034f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80034f8:	d3f6      	bcc.n	80034e8 <CopyDataInit>
  ldr r2, =_sbss
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80034fc:	e002      	b.n	8003504 <LoopFillZerobss>

080034fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003500:	f842 3b04 	str.w	r3, [r2], #4

08003504 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003506:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003508:	d3f9      	bcc.n	80034fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800350a:	f7ff f98f 	bl	800282c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800350e:	f001 ffb3 	bl	8005478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003512:	f7fe fb3b 	bl	8001b8c <main>
  bx lr
 8003516:	4770      	bx	lr
  ldr r3, =_sidata
 8003518:	0801fb58 	.word	0x0801fb58
  ldr r0, =_sdata
 800351c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003520:	200009f0 	.word	0x200009f0
  ldr r2, =_sbss
 8003524:	200009f0 	.word	0x200009f0
  ldr r3, = _ebss
 8003528:	20000b4c 	.word	0x20000b4c

0800352c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800352c:	e7fe      	b.n	800352c <ADC1_2_IRQHandler>
	...

08003530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_Init+0x28>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a07      	ldr	r2, [pc, #28]	; (8003558 <HAL_Init+0x28>)
 800353a:	f043 0310 	orr.w	r3, r3, #16
 800353e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003540:	2003      	movs	r0, #3
 8003542:	f000 f943 	bl	80037cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003546:	2000      	movs	r0, #0
 8003548:	f000 f808 	bl	800355c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800354c:	f7fe ff5e 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40022000 	.word	0x40022000

0800355c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_InitTick+0x54>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_InitTick+0x58>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	4619      	mov	r1, r3
 800356e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003572:	fbb3 f3f1 	udiv	r3, r3, r1
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f95b 	bl	8003836 <HAL_SYSTICK_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e00e      	b.n	80035a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b0f      	cmp	r3, #15
 800358e:	d80a      	bhi.n	80035a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003590:	2200      	movs	r2, #0
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f000 f923 	bl	80037e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800359c:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <HAL_InitTick+0x5c>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000000 	.word	0x20000000
 80035b4:	2000003c 	.word	0x2000003c
 80035b8:	20000038 	.word	0x20000038

080035bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_IncTick+0x1c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_IncTick+0x20>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	4a03      	ldr	r2, [pc, #12]	; (80035dc <HAL_IncTick+0x20>)
 80035ce:	6013      	str	r3, [r2, #0]
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	2000003c 	.word	0x2000003c
 80035dc:	20000b0c 	.word	0x20000b0c

080035e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return uwTick;
 80035e4:	4b02      	ldr	r3, [pc, #8]	; (80035f0 <HAL_GetTick+0x10>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	20000b0c 	.word	0x20000b0c

080035f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff fff0 	bl	80035e0 <HAL_GetTick>
 8003600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d005      	beq.n	800361a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_Delay+0x44>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800361a:	bf00      	nop
 800361c:	f7ff ffe0 	bl	80035e0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	429a      	cmp	r2, r3
 800362a:	d8f7      	bhi.n	800361c <HAL_Delay+0x28>
  {
  }
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000003c 	.word	0x2000003c

0800363c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <NVIC_SetPriorityGrouping+0x44>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003658:	4013      	ands	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366e:	4a04      	ldr	r2, [pc, #16]	; (8003680 <NVIC_SetPriorityGrouping+0x44>)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	60d3      	str	r3, [r2, #12]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <NVIC_GetPriorityGrouping+0x18>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f003 0307 	and.w	r3, r3, #7
}
 8003692:	4618      	mov	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4906      	ldr	r1, [pc, #24]	; (80036cc <NVIC_EnableIRQ+0x2c>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2001      	movs	r0, #1
 80036ba:	fa00 f202 	lsl.w	r2, r0, r2
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	da0b      	bge.n	80036fc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	490c      	ldr	r1, [pc, #48]	; (800371c <NVIC_SetPriority+0x4c>)
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	3b04      	subs	r3, #4
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036fa:	e009      	b.n	8003710 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4907      	ldr	r1, [pc, #28]	; (8003720 <NVIC_SetPriority+0x50>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	440b      	add	r3, r1
 800370c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000ed00 	.word	0xe000ed00
 8003720:	e000e100 	.word	0xe000e100

08003724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf28      	it	cs
 8003742:	2304      	movcs	r3, #4
 8003744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3304      	adds	r3, #4
 800374a:	2b06      	cmp	r3, #6
 800374c:	d902      	bls.n	8003754 <NVIC_EncodePriority+0x30>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3b03      	subs	r3, #3
 8003752:	e000      	b.n	8003756 <NVIC_EncodePriority+0x32>
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	401a      	ands	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	f04f 31ff 	mov.w	r1, #4294967295
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43d9      	mvns	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	4313      	orrs	r3, r2
         );
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	; 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003798:	d301      	bcc.n	800379e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800379a:	2301      	movs	r3, #1
 800379c:	e00f      	b.n	80037be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <SysTick_Config+0x40>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037a6:	210f      	movs	r1, #15
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	f7ff ff90 	bl	80036d0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <SysTick_Config+0x40>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037b6:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <SysTick_Config+0x40>)
 80037b8:	2207      	movs	r2, #7
 80037ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	e000e010 	.word	0xe000e010

080037cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ff31 	bl	800363c <NVIC_SetPriorityGrouping>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	4603      	mov	r3, r0
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037f4:	f7ff ff46 	bl	8003684 <NVIC_GetPriorityGrouping>
 80037f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	6978      	ldr	r0, [r7, #20]
 8003800:	f7ff ff90 	bl	8003724 <NVIC_EncodePriority>
 8003804:	4602      	mov	r2, r0
 8003806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff ff5f 	bl	80036d0 <NVIC_SetPriority>
}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ff39 	bl	80036a0 <NVIC_EnableIRQ>
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ffa2 	bl	8003788 <SysTick_Config>
 8003844:	4603      	mov	r3, r0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003850:	b480      	push	{r7}
 8003852:	b08b      	sub	sp, #44	; 0x2c
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	e179      	b.n	8003b68 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8003874:	2201      	movs	r2, #1
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	429a      	cmp	r2, r3
 800388e:	f040 8168 	bne.w	8003b62 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4a96      	ldr	r2, [pc, #600]	; (8003af0 <HAL_GPIO_Init+0x2a0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d05e      	beq.n	800395a <HAL_GPIO_Init+0x10a>
 800389c:	4a94      	ldr	r2, [pc, #592]	; (8003af0 <HAL_GPIO_Init+0x2a0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d875      	bhi.n	800398e <HAL_GPIO_Init+0x13e>
 80038a2:	4a94      	ldr	r2, [pc, #592]	; (8003af4 <HAL_GPIO_Init+0x2a4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d058      	beq.n	800395a <HAL_GPIO_Init+0x10a>
 80038a8:	4a92      	ldr	r2, [pc, #584]	; (8003af4 <HAL_GPIO_Init+0x2a4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d86f      	bhi.n	800398e <HAL_GPIO_Init+0x13e>
 80038ae:	4a92      	ldr	r2, [pc, #584]	; (8003af8 <HAL_GPIO_Init+0x2a8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d052      	beq.n	800395a <HAL_GPIO_Init+0x10a>
 80038b4:	4a90      	ldr	r2, [pc, #576]	; (8003af8 <HAL_GPIO_Init+0x2a8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d869      	bhi.n	800398e <HAL_GPIO_Init+0x13e>
 80038ba:	4a90      	ldr	r2, [pc, #576]	; (8003afc <HAL_GPIO_Init+0x2ac>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d04c      	beq.n	800395a <HAL_GPIO_Init+0x10a>
 80038c0:	4a8e      	ldr	r2, [pc, #568]	; (8003afc <HAL_GPIO_Init+0x2ac>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d863      	bhi.n	800398e <HAL_GPIO_Init+0x13e>
 80038c6:	4a8e      	ldr	r2, [pc, #568]	; (8003b00 <HAL_GPIO_Init+0x2b0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d046      	beq.n	800395a <HAL_GPIO_Init+0x10a>
 80038cc:	4a8c      	ldr	r2, [pc, #560]	; (8003b00 <HAL_GPIO_Init+0x2b0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d85d      	bhi.n	800398e <HAL_GPIO_Init+0x13e>
 80038d2:	2b12      	cmp	r3, #18
 80038d4:	d82a      	bhi.n	800392c <HAL_GPIO_Init+0xdc>
 80038d6:	2b12      	cmp	r3, #18
 80038d8:	d859      	bhi.n	800398e <HAL_GPIO_Init+0x13e>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <HAL_GPIO_Init+0x90>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	0800395b 	.word	0x0800395b
 80038e4:	08003935 	.word	0x08003935
 80038e8:	08003947 	.word	0x08003947
 80038ec:	08003989 	.word	0x08003989
 80038f0:	0800398f 	.word	0x0800398f
 80038f4:	0800398f 	.word	0x0800398f
 80038f8:	0800398f 	.word	0x0800398f
 80038fc:	0800398f 	.word	0x0800398f
 8003900:	0800398f 	.word	0x0800398f
 8003904:	0800398f 	.word	0x0800398f
 8003908:	0800398f 	.word	0x0800398f
 800390c:	0800398f 	.word	0x0800398f
 8003910:	0800398f 	.word	0x0800398f
 8003914:	0800398f 	.word	0x0800398f
 8003918:	0800398f 	.word	0x0800398f
 800391c:	0800398f 	.word	0x0800398f
 8003920:	0800398f 	.word	0x0800398f
 8003924:	0800393d 	.word	0x0800393d
 8003928:	08003951 	.word	0x08003951
 800392c:	4a75      	ldr	r2, [pc, #468]	; (8003b04 <HAL_GPIO_Init+0x2b4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003932:	e02c      	b.n	800398e <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	623b      	str	r3, [r7, #32]
          break;
 800393a:	e029      	b.n	8003990 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	3304      	adds	r3, #4
 8003942:	623b      	str	r3, [r7, #32]
          break;
 8003944:	e024      	b.n	8003990 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	3308      	adds	r3, #8
 800394c:	623b      	str	r3, [r7, #32]
          break;
 800394e:	e01f      	b.n	8003990 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	330c      	adds	r3, #12
 8003956:	623b      	str	r3, [r7, #32]
          break;
 8003958:	e01a      	b.n	8003990 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003962:	2304      	movs	r3, #4
 8003964:	623b      	str	r3, [r7, #32]
          break;
 8003966:	e013      	b.n	8003990 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003970:	2308      	movs	r3, #8
 8003972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	611a      	str	r2, [r3, #16]
          break;
 800397a:	e009      	b.n	8003990 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800397c:	2308      	movs	r3, #8
 800397e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	615a      	str	r2, [r3, #20]
          break;
 8003986:	e003      	b.n	8003990 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003988:	2300      	movs	r3, #0
 800398a:	623b      	str	r3, [r7, #32]
          break;
 800398c:	e000      	b.n	8003990 <HAL_GPIO_Init+0x140>
          break;
 800398e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2bff      	cmp	r3, #255	; 0xff
 8003994:	d801      	bhi.n	800399a <HAL_GPIO_Init+0x14a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	e001      	b.n	800399e <HAL_GPIO_Init+0x14e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3304      	adds	r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2bff      	cmp	r3, #255	; 0xff
 80039a4:	d802      	bhi.n	80039ac <HAL_GPIO_Init+0x15c>
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	e002      	b.n	80039b2 <HAL_GPIO_Init+0x162>
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	3b08      	subs	r3, #8
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	210f      	movs	r1, #15
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	401a      	ands	r2, r3
 80039c4:	6a39      	ldr	r1, [r7, #32]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80c1 	beq.w	8003b62 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039e0:	4b49      	ldr	r3, [pc, #292]	; (8003b08 <HAL_GPIO_Init+0x2b8>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	4a48      	ldr	r2, [pc, #288]	; (8003b08 <HAL_GPIO_Init+0x2b8>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6193      	str	r3, [r2, #24]
 80039ec:	4b46      	ldr	r3, [pc, #280]	; (8003b08 <HAL_GPIO_Init+0x2b8>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80039f8:	4a44      	ldr	r2, [pc, #272]	; (8003b0c <HAL_GPIO_Init+0x2bc>)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	3302      	adds	r3, #2
 8003a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a04:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a3c      	ldr	r2, [pc, #240]	; (8003b10 <HAL_GPIO_Init+0x2c0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01f      	beq.n	8003a64 <HAL_GPIO_Init+0x214>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a3b      	ldr	r2, [pc, #236]	; (8003b14 <HAL_GPIO_Init+0x2c4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d019      	beq.n	8003a60 <HAL_GPIO_Init+0x210>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a3a      	ldr	r2, [pc, #232]	; (8003b18 <HAL_GPIO_Init+0x2c8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d013      	beq.n	8003a5c <HAL_GPIO_Init+0x20c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a39      	ldr	r2, [pc, #228]	; (8003b1c <HAL_GPIO_Init+0x2cc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00d      	beq.n	8003a58 <HAL_GPIO_Init+0x208>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a38      	ldr	r2, [pc, #224]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <HAL_GPIO_Init+0x204>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a37      	ldr	r2, [pc, #220]	; (8003b24 <HAL_GPIO_Init+0x2d4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_GPIO_Init+0x200>
 8003a4c:	2305      	movs	r3, #5
 8003a4e:	e00a      	b.n	8003a66 <HAL_GPIO_Init+0x216>
 8003a50:	2306      	movs	r3, #6
 8003a52:	e008      	b.n	8003a66 <HAL_GPIO_Init+0x216>
 8003a54:	2304      	movs	r3, #4
 8003a56:	e006      	b.n	8003a66 <HAL_GPIO_Init+0x216>
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e004      	b.n	8003a66 <HAL_GPIO_Init+0x216>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e002      	b.n	8003a66 <HAL_GPIO_Init+0x216>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_GPIO_Init+0x216>
 8003a64:	2300      	movs	r3, #0
 8003a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a68:	f002 0203 	and.w	r2, r2, #3
 8003a6c:	0092      	lsls	r2, r2, #2
 8003a6e:	4093      	lsls	r3, r2
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8003a76:	4925      	ldr	r1, [pc, #148]	; (8003b0c <HAL_GPIO_Init+0x2bc>)
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	089b      	lsrs	r3, r3, #2
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4924      	ldr	r1, [pc, #144]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e006      	b.n	8003aac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	4920      	ldr	r1, [pc, #128]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d006      	beq.n	8003ac6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	491a      	ldr	r1, [pc, #104]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	e006      	b.n	8003ad4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ac6:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	4916      	ldr	r1, [pc, #88]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d025      	beq.n	8003b2c <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	4910      	ldr	r1, [pc, #64]	; (8003b28 <HAL_GPIO_Init+0x2d8>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]
 8003aec:	e025      	b.n	8003b3a <HAL_GPIO_Init+0x2ea>
 8003aee:	bf00      	nop
 8003af0:	10320000 	.word	0x10320000
 8003af4:	10310000 	.word	0x10310000
 8003af8:	10220000 	.word	0x10220000
 8003afc:	10210000 	.word	0x10210000
 8003b00:	10120000 	.word	0x10120000
 8003b04:	10110000 	.word	0x10110000
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40010800 	.word	0x40010800
 8003b14:	40010c00 	.word	0x40010c00
 8003b18:	40011000 	.word	0x40011000
 8003b1c:	40011400 	.word	0x40011400
 8003b20:	40011800 	.word	0x40011800
 8003b24:	40011c00 	.word	0x40011c00
 8003b28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b2c:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_GPIO_Init+0x32c>)
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	4911      	ldr	r1, [pc, #68]	; (8003b7c <HAL_GPIO_Init+0x32c>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b46:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <HAL_GPIO_Init+0x32c>)
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	490c      	ldr	r1, [pc, #48]	; (8003b7c <HAL_GPIO_Init+0x32c>)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60cb      	str	r3, [r1, #12]
 8003b52:	e006      	b.n	8003b62 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_GPIO_Init+0x32c>)
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	4907      	ldr	r1, [pc, #28]	; (8003b7c <HAL_GPIO_Init+0x32c>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	3301      	adds	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	f67f ae82 	bls.w	8003874 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	372c      	adds	r7, #44	; 0x2c
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr
 8003b7c:	40010400 	.word	0x40010400

08003b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	887b      	ldrh	r3, [r7, #2]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	e001      	b.n	8003ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	807b      	strh	r3, [r7, #2]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bbe:	787b      	ldrb	r3, [r7, #1]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc4:	887a      	ldrh	r2, [r7, #2]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bca:	e003      	b.n	8003bd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	041a      	lsls	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	611a      	str	r2, [r3, #16]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d006      	beq.n	8003c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bf6:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f806 	bl	8003c10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c04:	bf00      	nop
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40010400 	.word	0x40010400

08003c10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	420e0020 	.word	0x420e0020

08003c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8087 	beq.w	8003d64 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c56:	4b92      	ldr	r3, [pc, #584]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d00c      	beq.n	8003c7c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c62:	4b8f      	ldr	r3, [pc, #572]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d112      	bne.n	8003c94 <HAL_RCC_OscConfig+0x58>
 8003c6e:	4b8c      	ldr	r3, [pc, #560]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	4b88      	ldr	r3, [pc, #544]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d06c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x126>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d168      	bne.n	8003d62 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e22d      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d106      	bne.n	8003cac <HAL_RCC_OscConfig+0x70>
 8003c9e:	4b80      	ldr	r3, [pc, #512]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7f      	ldr	r2, [pc, #508]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e02e      	b.n	8003d0a <HAL_RCC_OscConfig+0xce>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10c      	bne.n	8003cce <HAL_RCC_OscConfig+0x92>
 8003cb4:	4b7a      	ldr	r3, [pc, #488]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a79      	ldr	r2, [pc, #484]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b77      	ldr	r3, [pc, #476]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a76      	ldr	r2, [pc, #472]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	e01d      	b.n	8003d0a <HAL_RCC_OscConfig+0xce>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd6:	d10c      	bne.n	8003cf2 <HAL_RCC_OscConfig+0xb6>
 8003cd8:	4b71      	ldr	r3, [pc, #452]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a70      	ldr	r2, [pc, #448]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b6e      	ldr	r3, [pc, #440]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6d      	ldr	r2, [pc, #436]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	e00b      	b.n	8003d0a <HAL_RCC_OscConfig+0xce>
 8003cf2:	4b6b      	ldr	r3, [pc, #428]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6a      	ldr	r2, [pc, #424]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a67      	ldr	r2, [pc, #412]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d08:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7ff fc65 	bl	80035e0 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d1a:	f7ff fc61 	bl	80035e0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b64      	cmp	r3, #100	; 0x64
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1e1      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2c:	4b5c      	ldr	r3, [pc, #368]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0xde>
 8003d38:	e014      	b.n	8003d64 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7ff fc51 	bl	80035e0 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d42:	f7ff fc4d 	bl	80035e0 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b64      	cmp	r3, #100	; 0x64
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1cd      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d54:	4b52      	ldr	r3, [pc, #328]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x106>
 8003d60:	e000      	b.n	8003d64 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d063      	beq.n	8003e38 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d70:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d7c:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d11c      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x186>
 8003d88:	4b45      	ldr	r3, [pc, #276]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d116      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d94:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_OscConfig+0x170>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e1a1      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	4b3c      	ldr	r3, [pc, #240]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4939      	ldr	r1, [pc, #228]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc0:	e03a      	b.n	8003e38 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d020      	beq.n	8003e0c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dca:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_RCC_OscConfig+0x268>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7ff fc06 	bl	80035e0 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7ff fc02 	bl	80035e0 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e182      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dea:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4926      	ldr	r1, [pc, #152]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
 8003e0a:	e015      	b.n	8003e38 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_RCC_OscConfig+0x268>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7ff fbe5 	bl	80035e0 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7ff fbe1 	bl	80035e0 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e161      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d039      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d019      	beq.n	8003e80 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4c:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e52:	f7ff fbc5 	bl	80035e0 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5a:	f7ff fbc1 	bl	80035e0 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e141      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_RCC_OscConfig+0x264>)
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8003e78:	2001      	movs	r0, #1
 8003e7a:	f000 fadf 	bl	800443c <RCC_Delay>
 8003e7e:	e01b      	b.n	8003eb8 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e86:	f7ff fbab 	bl	80035e0 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	e00e      	b.n	8003eac <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e8e:	f7ff fba7 	bl	80035e0 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d907      	bls.n	8003eac <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e127      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	42420000 	.word	0x42420000
 8003ea8:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eac:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ea      	bne.n	8003e8e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a6 	beq.w	8004012 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eca:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10d      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4a87      	ldr	r2, [pc, #540]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	61d3      	str	r3, [r2, #28]
 8003ee2:	4b85      	ldr	r3, [pc, #532]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	4b82      	ldr	r3, [pc, #520]	; (80040fc <HAL_RCC_OscConfig+0x4c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d118      	bne.n	8003f30 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efe:	4b7f      	ldr	r3, [pc, #508]	; (80040fc <HAL_RCC_OscConfig+0x4c0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7e      	ldr	r2, [pc, #504]	; (80040fc <HAL_RCC_OscConfig+0x4c0>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0a:	f7ff fb69 	bl	80035e0 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f12:	f7ff fb65 	bl	80035e0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0e5      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	4b75      	ldr	r3, [pc, #468]	; (80040fc <HAL_RCC_OscConfig+0x4c0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x30a>
 8003f38:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6213      	str	r3, [r2, #32]
 8003f44:	e02d      	b.n	8003fa2 <HAL_RCC_OscConfig+0x366>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x32c>
 8003f4e:	4b6a      	ldr	r3, [pc, #424]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4a69      	ldr	r2, [pc, #420]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	6213      	str	r3, [r2, #32]
 8003f5a:	4b67      	ldr	r3, [pc, #412]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a66      	ldr	r2, [pc, #408]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f60:	f023 0304 	bic.w	r3, r3, #4
 8003f64:	6213      	str	r3, [r2, #32]
 8003f66:	e01c      	b.n	8003fa2 <HAL_RCC_OscConfig+0x366>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b05      	cmp	r3, #5
 8003f6e:	d10c      	bne.n	8003f8a <HAL_RCC_OscConfig+0x34e>
 8003f70:	4b61      	ldr	r3, [pc, #388]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4a60      	ldr	r2, [pc, #384]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f76:	f043 0304 	orr.w	r3, r3, #4
 8003f7a:	6213      	str	r3, [r2, #32]
 8003f7c:	4b5e      	ldr	r3, [pc, #376]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	4a5d      	ldr	r2, [pc, #372]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6213      	str	r3, [r2, #32]
 8003f88:	e00b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x366>
 8003f8a:	4b5b      	ldr	r3, [pc, #364]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4a5a      	ldr	r2, [pc, #360]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	6213      	str	r3, [r2, #32]
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003f9c:	f023 0304 	bic.w	r3, r3, #4
 8003fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d015      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003faa:	f7ff fb19 	bl	80035e0 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7ff fb15 	bl	80035e0 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e093      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc8:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ee      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x376>
 8003fd4:	e014      	b.n	8004000 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7ff fb03 	bl	80035e0 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7ff faff 	bl	80035e0 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e07d      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff4:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ee      	bne.n	8003fde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d105      	bne.n	8004012 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004006:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 800400c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d069      	beq.n	80040ee <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401a:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b08      	cmp	r3, #8
 8004024:	d061      	beq.n	80040ea <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d146      	bne.n	80040bc <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b34      	ldr	r3, [pc, #208]	; (8004100 <HAL_RCC_OscConfig+0x4c4>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7ff fad4 	bl	80035e0 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403c:	f7ff fad0 	bl	80035e0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e050      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404e:	4b2a      	ldr	r3, [pc, #168]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004062:	d108      	bne.n	8004076 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4921      	ldr	r1, [pc, #132]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004076:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a19      	ldr	r1, [r3, #32]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	430b      	orrs	r3, r1
 8004088:	491b      	ldr	r1, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_RCC_OscConfig+0x4c4>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7ff faa4 	bl	80035e0 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409c:	f7ff faa0 	bl	80035e0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e020      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x460>
 80040ba:	e018      	b.n	80040ee <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_RCC_OscConfig+0x4c4>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7ff fa8d 	bl	80035e0 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ca:	f7ff fa89 	bl	80035e0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e009      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_OscConfig+0x4bc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x48e>
 80040e8:	e001      	b.n	80040ee <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
 8004100:	42420060 	.word	0x42420060

08004104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004112:	4b7e      	ldr	r3, [pc, #504]	; (800430c <HAL_RCC_ClockConfig+0x208>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d910      	bls.n	8004142 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004120:	4b7a      	ldr	r3, [pc, #488]	; (800430c <HAL_RCC_ClockConfig+0x208>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 0207 	bic.w	r2, r3, #7
 8004128:	4978      	ldr	r1, [pc, #480]	; (800430c <HAL_RCC_ClockConfig+0x208>)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004130:	4b76      	ldr	r3, [pc, #472]	; (800430c <HAL_RCC_ClockConfig+0x208>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d001      	beq.n	8004142 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0e0      	b.n	8004304 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d020      	beq.n	8004190 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800415a:	4b6d      	ldr	r3, [pc, #436]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4a6c      	ldr	r2, [pc, #432]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 8004160:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004164:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004172:	4b67      	ldr	r3, [pc, #412]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4a66      	ldr	r2, [pc, #408]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 8004178:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800417c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800417e:	4b64      	ldr	r3, [pc, #400]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4961      	ldr	r1, [pc, #388]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d06a      	beq.n	8004272 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a4:	4b5a      	ldr	r3, [pc, #360]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d115      	bne.n	80041dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0a7      	b.n	8004304 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d107      	bne.n	80041cc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041bc:	4b54      	ldr	r3, [pc, #336]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e09b      	b.n	8004304 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041cc:	4b50      	ldr	r3, [pc, #320]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e093      	b.n	8004304 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041dc:	4b4c      	ldr	r3, [pc, #304]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 0203 	bic.w	r2, r3, #3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4949      	ldr	r1, [pc, #292]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ee:	f7ff f9f7 	bl	80035e0 <HAL_GetTick>
 80041f2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d112      	bne.n	8004222 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fe:	f7ff f9ef 	bl	80035e0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	; 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e077      	b.n	8004304 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004214:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b04      	cmp	r3, #4
 800421e:	d1ee      	bne.n	80041fe <HAL_RCC_ClockConfig+0xfa>
 8004220:	e027      	b.n	8004272 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d11d      	bne.n	8004266 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7ff f9d8 	bl	80035e0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e060      	b.n	8004304 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004242:	4b33      	ldr	r3, [pc, #204]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b08      	cmp	r3, #8
 800424c:	d1ee      	bne.n	800422c <HAL_RCC_ClockConfig+0x128>
 800424e:	e010      	b.n	8004272 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004250:	f7ff f9c6 	bl	80035e0 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e04e      	b.n	8004304 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004266:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ee      	bne.n	8004250 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004272:	4b26      	ldr	r3, [pc, #152]	; (800430c <HAL_RCC_ClockConfig+0x208>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d210      	bcs.n	80042a2 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004280:	4b22      	ldr	r3, [pc, #136]	; (800430c <HAL_RCC_ClockConfig+0x208>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f023 0207 	bic.w	r2, r3, #7
 8004288:	4920      	ldr	r1, [pc, #128]	; (800430c <HAL_RCC_ClockConfig+0x208>)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	4313      	orrs	r3, r2
 800428e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004290:	4b1e      	ldr	r3, [pc, #120]	; (800430c <HAL_RCC_ClockConfig+0x208>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e030      	b.n	8004304 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	4915      	ldr	r1, [pc, #84]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	490d      	ldr	r1, [pc, #52]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042e0:	f000 f81c 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <HAL_RCC_ClockConfig+0x20c>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	4908      	ldr	r1, [pc, #32]	; (8004314 <HAL_RCC_ClockConfig+0x210>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
 80042f8:	4a07      	ldr	r2, [pc, #28]	; (8004318 <HAL_RCC_ClockConfig+0x214>)
 80042fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80042fc:	2000      	movs	r0, #0
 80042fe:	f7ff f92d 	bl	800355c <HAL_InitTick>
  
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40022000 	.word	0x40022000
 8004310:	40021000 	.word	0x40021000
 8004314:	0801f794 	.word	0x0801f794
 8004318:	20000000 	.word	0x20000000

0800431c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	b490      	push	{r4, r7}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004322:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004324:	1d3c      	adds	r4, r7, #4
 8004326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800432c:	f240 2301 	movw	r3, #513	; 0x201
 8004330:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	2300      	movs	r3, #0
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004346:	4b21      	ldr	r3, [pc, #132]	; (80043cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b04      	cmp	r3, #4
 8004354:	d002      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0x40>
 8004356:	2b08      	cmp	r3, #8
 8004358:	d003      	beq.n	8004362 <HAL_RCC_GetSysClockFreq+0x46>
 800435a:	e02b      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800435c:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800435e:	623b      	str	r3, [r7, #32]
      break;
 8004360:	e02b      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	0c9b      	lsrs	r3, r3, #18
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	3328      	adds	r3, #40	; 0x28
 800436c:	443b      	add	r3, r7
 800436e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004372:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d012      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800437e:	4b13      	ldr	r3, [pc, #76]	; (80043cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	0c5b      	lsrs	r3, r3, #17
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	3328      	adds	r3, #40	; 0x28
 800438a:	443b      	add	r3, r7
 800438c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004390:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004396:	fb03 f202 	mul.w	r2, r3, r2
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	e004      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	623b      	str	r3, [r7, #32]
      break;
 80043b2:	e002      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043b6:	623b      	str	r3, [r7, #32]
      break;
 80043b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ba:	6a3b      	ldr	r3, [r7, #32]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3728      	adds	r7, #40	; 0x28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc90      	pop	{r4, r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	08009fa4 	.word	0x08009fa4
 80043cc:	40021000 	.word	0x40021000
 80043d0:	007a1200 	.word	0x007a1200
 80043d4:	003d0900 	.word	0x003d0900

080043d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043dc:	4b02      	ldr	r3, [pc, #8]	; (80043e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80043de:	681b      	ldr	r3, [r3, #0]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr
 80043e8:	20000000 	.word	0x20000000

080043ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043f0:	f7ff fff2 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4903      	ldr	r1, [pc, #12]	; (8004410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8004408:	4618      	mov	r0, r3
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000
 8004410:	0801f7a4 	.word	0x0801f7a4

08004414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004418:	f7ff ffde 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	0adb      	lsrs	r3, r3, #11
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4903      	ldr	r1, [pc, #12]	; (8004438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	0801f7a4 	.word	0x0801f7a4

0800443c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <RCC_Delay+0x38>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <RCC_Delay+0x3c>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	0a5b      	lsrs	r3, r3, #9
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004458:	bf00      	nop
}
 800445a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1e5a      	subs	r2, r3, #1
 8004460:	60fa      	str	r2, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f8      	bne.n	8004458 <RCC_Delay+0x1c>
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000000 	.word	0x20000000
 8004478:	10624dd3 	.word	0x10624dd3

0800447c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d07d      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004498:	2300      	movs	r3, #0
 800449a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449c:	4b4f      	ldr	r3, [pc, #316]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10d      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044a8:	4b4c      	ldr	r3, [pc, #304]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	4a4b      	ldr	r2, [pc, #300]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b2:	61d3      	str	r3, [r2, #28]
 80044b4:	4b49      	ldr	r3, [pc, #292]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c0:	2301      	movs	r3, #1
 80044c2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c4:	4b46      	ldr	r3, [pc, #280]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d118      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d0:	4b43      	ldr	r3, [pc, #268]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a42      	ldr	r2, [pc, #264]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044dc:	f7ff f880 	bl	80035e0 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e2:	e008      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7ff f87c 	bl	80035e0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e06d      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f6:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004502:	4b36      	ldr	r3, [pc, #216]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d02e      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	429a      	cmp	r2, r3
 800451e:	d027      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004520:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004528:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452a:	4b2e      	ldr	r3, [pc, #184]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800452c:	2201      	movs	r2, #1
 800452e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004536:	4a29      	ldr	r2, [pc, #164]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d014      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004546:	f7ff f84b 	bl	80035e0 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	e00a      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454e:	f7ff f847 	bl	80035e0 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	; 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e036      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ee      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4917      	ldr	r1, [pc, #92]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457e:	4313      	orrs	r3, r2
 8004580:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004592:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a0:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	490b      	ldr	r1, [pc, #44]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4904      	ldr	r1, [pc, #16]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40007000 	.word	0x40007000
 80045e4:	42420440 	.word	0x42420440

080045e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b08d      	sub	sp, #52	; 0x34
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045f0:	4b6b      	ldr	r3, [pc, #428]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80045f2:	f107 040c 	add.w	r4, r7, #12
 80045f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045fc:	f240 2301 	movw	r3, #513	; 0x201
 8004600:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
 8004606:	2300      	movs	r3, #0
 8004608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460a:	2300      	movs	r3, #0
 800460c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	2300      	movs	r3, #0
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3b01      	subs	r3, #1
 800461a:	2b0f      	cmp	r3, #15
 800461c:	f200 80b7 	bhi.w	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8004620:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	08004707 	.word	0x08004707
 800462c:	08004773 	.word	0x08004773
 8004630:	0800478f 	.word	0x0800478f
 8004634:	080046f7 	.word	0x080046f7
 8004638:	0800478f 	.word	0x0800478f
 800463c:	0800478f 	.word	0x0800478f
 8004640:	0800478f 	.word	0x0800478f
 8004644:	080046ff 	.word	0x080046ff
 8004648:	0800478f 	.word	0x0800478f
 800464c:	0800478f 	.word	0x0800478f
 8004650:	0800478f 	.word	0x0800478f
 8004654:	0800478f 	.word	0x0800478f
 8004658:	0800478f 	.word	0x0800478f
 800465c:	0800478f 	.word	0x0800478f
 8004660:	0800478f 	.word	0x0800478f
 8004664:	08004669 	.word	0x08004669
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004668:	4b4e      	ldr	r3, [pc, #312]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800466e:	4b4d      	ldr	r3, [pc, #308]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 808b 	beq.w	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	0c9b      	lsrs	r3, r3, #18
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	3330      	adds	r3, #48	; 0x30
 8004686:	443b      	add	r3, r7
 8004688:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800468c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d017      	beq.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004698:	4b42      	ldr	r3, [pc, #264]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0c5b      	lsrs	r3, r3, #17
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	3330      	adds	r3, #48	; 0x30
 80046a4:	443b      	add	r3, r7
 80046a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046b6:	4a3c      	ldr	r2, [pc, #240]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c6:	e004      	b.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	4a38      	ldr	r2, [pc, #224]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046d2:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046de:	d102      	bne.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80046e4:	e055      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          frequency = (pllclk * 2) / 3;
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4a31      	ldr	r2, [pc, #196]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80046f4:	e04d      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80046f6:	f7ff fe11 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80046fa:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80046fc:	e04a      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80046fe:	f7ff fe0d 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8004702:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004704:	e046      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004706:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004716:	d108      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8004722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
 8004728:	e022      	b.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004734:	d109      	bne.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8004736:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8004742:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28
 8004748:	e012      	b.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004754:	d109      	bne.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004756:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = HSE_VALUE / 128U;
 8004762:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
 8004768:	e002      	b.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800476e:	e011      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004770:	e010      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004772:	f7ff fe4f 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8004776:	4602      	mov	r2, r0
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	0b9b      	lsrs	r3, r3, #14
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	3301      	adds	r3, #1
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	fbb2 f3f3 	udiv	r3, r2, r3
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800478c:	e002      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  default: 
    {
      break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 8004792:	bf00      	nop
    }
  }
  return(frequency);
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004796:	4618      	mov	r0, r3
 8004798:	3734      	adds	r7, #52	; 0x34
 800479a:	46bd      	mov	sp, r7
 800479c:	bd90      	pop	{r4, r7, pc}
 800479e:	bf00      	nop
 80047a0:	08009fb4 	.word	0x08009fb4
 80047a4:	40021000 	.word	0x40021000
 80047a8:	007a1200 	.word	0x007a1200
 80047ac:	003d0900 	.word	0x003d0900
 80047b0:	aaaaaaab 	.word	0xaaaaaaab

080047b4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e084      	b.n	80048d4 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7c5b      	ldrb	r3, [r3, #17]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd fe48 	bl	8002470 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f87a 	bl	80048e0 <HAL_RTC_WaitForSynchro>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2204      	movs	r2, #4
 80047f6:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e06b      	b.n	80048d4 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f89c 	bl	800493a <RTC_EnterInitMode>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2204      	movs	r2, #4
 800480c:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e060      	b.n	80048d4 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0207 	bic.w	r2, r2, #7
 8004820:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800482a:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <HAL_RTC_Init+0x128>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <HAL_RTC_Init+0x128>)
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004836:	4b29      	ldr	r3, [pc, #164]	; (80048dc <HAL_RTC_Init+0x128>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	4926      	ldr	r1, [pc, #152]	; (80048dc <HAL_RTC_Init+0x128>)
 8004844:	4313      	orrs	r3, r2
 8004846:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d003      	beq.n	800485a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	e00e      	b.n	8004878 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800485a:	2001      	movs	r0, #1
 800485c:	f7ff fec4 	bl	80045e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004860:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2204      	movs	r2, #4
 800486c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e030      	b.n	80048d4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b01      	subs	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 010f 	bic.w	r1, r3, #15
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	0c1a      	lsrs	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	b291      	uxth	r1, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f870 	bl	800498a <RTC_ExitInitMode>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2204      	movs	r2, #4
 80048b4:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00c      	b.n	80048d4 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 80048d2:	2300      	movs	r3, #0
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40006c00 	.word	0x40006c00

080048e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e01d      	b.n	8004932 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0208 	bic.w	r2, r2, #8
 8004904:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8004906:	f7fe fe6b 	bl	80035e0 <HAL_GetTick>
 800490a:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800490c:	e009      	b.n	8004922 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800490e:	f7fe fe67 	bl	80035e0 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800491c:	d901      	bls.n	8004922 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e007      	b.n	8004932 <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ee      	beq.n	800490e <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8004946:	f7fe fe4b 	bl	80035e0 <HAL_GetTick>
 800494a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800494c:	e009      	b.n	8004962 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800494e:	f7fe fe47 	bl	80035e0 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800495c:	d901      	bls.n	8004962 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e00f      	b.n	8004982 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ee      	beq.n	800494e <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0210 	orr.w	r2, r2, #16
 800497e:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0210 	bic.w	r2, r2, #16
 80049a4:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 80049a6:	f7fe fe1b 	bl	80035e0 <HAL_GetTick>
 80049aa:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049ac:	e009      	b.n	80049c2 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80049ae:	f7fe fe17 	bl	80035e0 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049bc:	d901      	bls.n	80049c2 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e007      	b.n	80049d2 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0ee      	beq.n	80049ae <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 80049ec:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <HAL_RTCEx_BKUPWrite+0x30>)
 80049ee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4413      	add	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	b292      	uxth	r2, r2
 8004a00:	601a      	str	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	40006c00 	.word	0x40006c00

08004a10 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <HAL_RTCEx_BKUPRead+0x34>)
 8004a24:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004a38:	68bb      	ldr	r3, [r7, #8]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	40006c00 	.word	0x40006c00

08004a48 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e034      	b.n	8004ac8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7fd fdcc 	bl	8002610 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f000 fc06 	bl	8005294 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	461a      	mov	r2, r3
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	f000 fc7e 	bl	8005394 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6858      	ldr	r0, [r3, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	f000 fca9 	bl	80053fc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	6892      	ldr	r2, [r2, #8]
 8004ab2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	6892      	ldr	r2, [r2, #8]
 8004abe:	f041 0101 	orr.w	r1, r1, #1
 8004ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e01d      	b.n	8004b1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fd fcde 	bl	80024b8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f000 f8f4 	bl	8004cfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_ConfigClockSource+0x1c>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e0d8      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b68:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7a:	d052      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0xfc>
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b80:	f200 80ae 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x1ba>
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	d027      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0xb4>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8e:	f200 80a7 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x1ba>
 8004b92:	2b70      	cmp	r3, #112	; 0x70
 8004b94:	d02a      	beq.n	8004bec <HAL_TIM_ConfigClockSource+0xc6>
 8004b96:	2b70      	cmp	r3, #112	; 0x70
 8004b98:	f200 80a2 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x1ba>
 8004b9c:	2b60      	cmp	r3, #96	; 0x60
 8004b9e:	d063      	beq.n	8004c68 <HAL_TIM_ConfigClockSource+0x142>
 8004ba0:	2b60      	cmp	r3, #96	; 0x60
 8004ba2:	f200 809d 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x1ba>
 8004ba6:	2b50      	cmp	r3, #80	; 0x50
 8004ba8:	d04e      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0x122>
 8004baa:	2b50      	cmp	r3, #80	; 0x50
 8004bac:	f200 8098 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x1ba>
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d069      	beq.n	8004c88 <HAL_TIM_ConfigClockSource+0x162>
 8004bb4:	2b40      	cmp	r3, #64	; 0x40
 8004bb6:	f200 8093 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x1ba>
 8004bba:	2b30      	cmp	r3, #48	; 0x30
 8004bbc:	f000 8089 	beq.w	8004cd2 <HAL_TIM_ConfigClockSource+0x1ac>
 8004bc0:	2b30      	cmp	r3, #48	; 0x30
 8004bc2:	f200 808d 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x1ba>
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d07c      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x19e>
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f200 8088 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x1ba>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d069      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0x182>
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d06e      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8004bd8:	e082      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0207 	bic.w	r2, r2, #7
 8004be8:	609a      	str	r2, [r3, #8]
    break;
 8004bea:	e07a      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	6899      	ldr	r1, [r3, #8]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f000 f980 	bl	8004f00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	609a      	str	r2, [r3, #8]
    break;
 8004c20:	e05f      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6899      	ldr	r1, [r3, #8]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f000 f965 	bl	8004f00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c44:	609a      	str	r2, [r3, #8]
    break;
 8004c46:	e04c      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6859      	ldr	r1, [r3, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	461a      	mov	r2, r3
 8004c56:	f000 f8cf 	bl	8004df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2150      	movs	r1, #80	; 0x50
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 f92e 	bl	8004ec2 <TIM_ITRx_SetConfig>
    break;
 8004c66:	e03c      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	461a      	mov	r2, r3
 8004c76:	f000 f8f1 	bl	8004e5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2160      	movs	r1, #96	; 0x60
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 f91e 	bl	8004ec2 <TIM_ITRx_SetConfig>
    break;
 8004c86:	e02c      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6859      	ldr	r1, [r3, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	461a      	mov	r2, r3
 8004c96:	f000 f8af 	bl	8004df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2140      	movs	r1, #64	; 0x40
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 f90e 	bl	8004ec2 <TIM_ITRx_SetConfig>
    break;
 8004ca6:	e01c      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f907 	bl	8004ec2 <TIM_ITRx_SetConfig>
    break;
 8004cb4:	e015      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2110      	movs	r1, #16
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f900 	bl	8004ec2 <TIM_ITRx_SetConfig>
    break;
 8004cc2:	e00e      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2120      	movs	r1, #32
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f8f9 	bl	8004ec2 <TIM_ITRx_SetConfig>
    break;
 8004cd0:	e007      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2130      	movs	r1, #48	; 0x30
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f8f2 	bl	8004ec2 <TIM_ITRx_SetConfig>
    break;
 8004cde:	e000      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8004ce0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a34      	ldr	r2, [pc, #208]	; (8004de4 <TIM_Base_SetConfig+0xe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <TIM_Base_SetConfig+0x44>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a33      	ldr	r2, [pc, #204]	; (8004de8 <TIM_Base_SetConfig+0xec>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00f      	beq.n	8004d40 <TIM_Base_SetConfig+0x44>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d26:	d00b      	beq.n	8004d40 <TIM_Base_SetConfig+0x44>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a30      	ldr	r2, [pc, #192]	; (8004dec <TIM_Base_SetConfig+0xf0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_Base_SetConfig+0x44>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a2f      	ldr	r2, [pc, #188]	; (8004df0 <TIM_Base_SetConfig+0xf4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_Base_SetConfig+0x44>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a2e      	ldr	r2, [pc, #184]	; (8004df4 <TIM_Base_SetConfig+0xf8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d108      	bne.n	8004d52 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a23      	ldr	r2, [pc, #140]	; (8004de4 <TIM_Base_SetConfig+0xe8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <TIM_Base_SetConfig+0x86>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a22      	ldr	r2, [pc, #136]	; (8004de8 <TIM_Base_SetConfig+0xec>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_Base_SetConfig+0x86>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d68:	d00b      	beq.n	8004d82 <TIM_Base_SetConfig+0x86>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <TIM_Base_SetConfig+0xf0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_Base_SetConfig+0x86>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1e      	ldr	r2, [pc, #120]	; (8004df0 <TIM_Base_SetConfig+0xf4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_Base_SetConfig+0x86>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <TIM_Base_SetConfig+0xf8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d108      	bne.n	8004d94 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <TIM_Base_SetConfig+0xe8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_Base_SetConfig+0xd0>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <TIM_Base_SetConfig+0xec>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d103      	bne.n	8004dd4 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	615a      	str	r2, [r3, #20]
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40013400 	.word	0x40013400
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40000c00 	.word	0x40000c00

08004df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0201 	bic.w	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f023 030a 	bic.w	r3, r3, #10
 8004e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	f023 0210 	bic.w	r2, r3, #16
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	031b      	lsls	r3, r3, #12
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ea0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004ee0:	887b      	ldrh	r3, [r7, #2]
 8004ee2:	f043 0307 	orr.w	r3, r3, #7
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	609a      	str	r2, [r3, #8]
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	021a      	lsls	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	609a      	str	r2, [r3, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e032      	b.n	8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f78:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f9a:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6899      	ldr	r1, [r3, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e03f      	b.n	800505c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fd fa7d 	bl	80024f0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2224      	movs	r2, #36	; 0x24
 8004ffa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800500c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f828 	bl	8005064 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005022:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005032:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005042:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005064:	b5b0      	push	{r4, r5, r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80050a6:	f023 030c 	bic.w	r3, r3, #12
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	430b      	orrs	r3, r1
 80050b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a6f      	ldr	r2, [pc, #444]	; (800528c <UART_SetConfig+0x228>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d16b      	bne.n	80051ac <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80050d4:	f7ff f99e 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009a      	lsls	r2, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	4a68      	ldr	r2, [pc, #416]	; (8005290 <UART_SetConfig+0x22c>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	011c      	lsls	r4, r3, #4
 80050f8:	f7ff f98c 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 80050fc:	4602      	mov	r2, r0
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009a      	lsls	r2, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005112:	f7ff f97f 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8005116:	4602      	mov	r2, r0
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009a      	lsls	r2, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	4a58      	ldr	r2, [pc, #352]	; (8005290 <UART_SetConfig+0x22c>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2264      	movs	r2, #100	; 0x64
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	1aeb      	subs	r3, r5, r3
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	3332      	adds	r3, #50	; 0x32
 8005140:	4a53      	ldr	r2, [pc, #332]	; (8005290 <UART_SetConfig+0x22c>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800514c:	441c      	add	r4, r3
 800514e:	f7ff f961 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8005152:	4602      	mov	r2, r0
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009a      	lsls	r2, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	fbb2 f5f3 	udiv	r5, r2, r3
 8005168:	f7ff f954 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 800516c:	4602      	mov	r2, r0
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009a      	lsls	r2, r3, #2
 8005176:	441a      	add	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005182:	4a43      	ldr	r2, [pc, #268]	; (8005290 <UART_SetConfig+0x22c>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	2264      	movs	r2, #100	; 0x64
 800518c:	fb02 f303 	mul.w	r3, r2, r3
 8005190:	1aeb      	subs	r3, r5, r3
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	3332      	adds	r3, #50	; 0x32
 8005196:	4a3e      	ldr	r2, [pc, #248]	; (8005290 <UART_SetConfig+0x22c>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	f003 020f 	and.w	r2, r3, #15
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4422      	add	r2, r4
 80051a8:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80051aa:	e06a      	b.n	8005282 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80051ac:	f7ff f91e 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009a      	lsls	r2, r3, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	4a32      	ldr	r2, [pc, #200]	; (8005290 <UART_SetConfig+0x22c>)
 80051c8:	fba2 2303 	umull	r2, r3, r2, r3
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	011c      	lsls	r4, r3, #4
 80051d0:	f7ff f90c 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 80051d4:	4602      	mov	r2, r0
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009a      	lsls	r2, r3, #2
 80051de:	441a      	add	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80051ea:	f7ff f8ff 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 80051ee:	4602      	mov	r2, r0
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	4a22      	ldr	r2, [pc, #136]	; (8005290 <UART_SetConfig+0x22c>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2264      	movs	r2, #100	; 0x64
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	1aeb      	subs	r3, r5, r3
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	3332      	adds	r3, #50	; 0x32
 8005218:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <UART_SetConfig+0x22c>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005224:	441c      	add	r4, r3
 8005226:	f7ff f8e1 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 800522a:	4602      	mov	r2, r0
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009a      	lsls	r2, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005240:	f7ff f8d4 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 8005244:	4602      	mov	r2, r0
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009a      	lsls	r2, r3, #2
 800524e:	441a      	add	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	4a0d      	ldr	r2, [pc, #52]	; (8005290 <UART_SetConfig+0x22c>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	2264      	movs	r2, #100	; 0x64
 8005264:	fb02 f303 	mul.w	r3, r2, r3
 8005268:	1aeb      	subs	r3, r5, r3
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	3332      	adds	r3, #50	; 0x32
 800526e:	4a08      	ldr	r2, [pc, #32]	; (8005290 <UART_SetConfig+0x22c>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4422      	add	r2, r4
 8005280:	609a      	str	r2, [r3, #8]
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bdb0      	pop	{r4, r5, r7, pc}
 800528a:	bf00      	nop
 800528c:	40013800 	.word	0x40013800
 8005290:	51eb851f 	.word	0x51eb851f

08005294 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	f023 0101 	bic.w	r1, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d132      	bne.n	8005324 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052c8:	4b31      	ldr	r3, [pc, #196]	; (8005390 <FSMC_NORSRAM_Init+0xfc>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	6851      	ldr	r1, [r2, #4]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	6892      	ldr	r2, [r2, #8]
 80052d4:	4311      	orrs	r1, r2
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	68d2      	ldr	r2, [r2, #12]
 80052da:	4311      	orrs	r1, r2
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	6912      	ldr	r2, [r2, #16]
 80052e0:	4311      	orrs	r1, r2
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	6952      	ldr	r2, [r2, #20]
 80052e6:	4311      	orrs	r1, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	6992      	ldr	r2, [r2, #24]
 80052ec:	4311      	orrs	r1, r2
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	69d2      	ldr	r2, [r2, #28]
 80052f2:	4311      	orrs	r1, r2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	6a12      	ldr	r2, [r2, #32]
 80052f8:	4311      	orrs	r1, r2
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052fe:	4311      	orrs	r1, r2
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005304:	4311      	orrs	r1, r2
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800530a:	4311      	orrs	r1, r2
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005310:	430a      	orrs	r2, r1
 8005312:	4313      	orrs	r3, r2
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005322:	e02f      	b.n	8005384 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800532e:	4b18      	ldr	r3, [pc, #96]	; (8005390 <FSMC_NORSRAM_Init+0xfc>)
 8005330:	4013      	ands	r3, r2
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	6851      	ldr	r1, [r2, #4]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	6892      	ldr	r2, [r2, #8]
 800533a:	4311      	orrs	r1, r2
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	68d2      	ldr	r2, [r2, #12]
 8005340:	4311      	orrs	r1, r2
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	6912      	ldr	r2, [r2, #16]
 8005346:	4311      	orrs	r1, r2
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	6952      	ldr	r2, [r2, #20]
 800534c:	4311      	orrs	r1, r2
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	6992      	ldr	r2, [r2, #24]
 8005352:	4311      	orrs	r1, r2
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	69d2      	ldr	r2, [r2, #28]
 8005358:	4311      	orrs	r1, r2
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	6a12      	ldr	r2, [r2, #32]
 800535e:	4311      	orrs	r1, r2
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005364:	4311      	orrs	r1, r2
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800536a:	4311      	orrs	r1, r2
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005370:	4311      	orrs	r1, r2
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005376:	4311      	orrs	r1, r2
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	4319      	orrs	r1, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	fff70081 	.word	0xfff70081

08005394 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	041b      	lsls	r3, r3, #16
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	051b      	lsls	r3, r3, #20
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	3b02      	subs	r3, #2
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	431a      	orrs	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	3201      	adds	r2, #1
 80053e8:	4319      	orrs	r1, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005410:	d11d      	bne.n	800544e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800541a:	4b13      	ldr	r3, [pc, #76]	; (8005468 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800541c:	4013      	ands	r3, r2
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	6811      	ldr	r1, [r2, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	6852      	ldr	r2, [r2, #4]
 8005426:	0112      	lsls	r2, r2, #4
 8005428:	4311      	orrs	r1, r2
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	6892      	ldr	r2, [r2, #8]
 800542e:	0212      	lsls	r2, r2, #8
 8005430:	4311      	orrs	r1, r2
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	6992      	ldr	r2, [r2, #24]
 8005436:	4311      	orrs	r1, r2
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	68d2      	ldr	r2, [r2, #12]
 800543c:	0412      	lsls	r2, r2, #16
 800543e:	430a      	orrs	r2, r1
 8005440:	ea43 0102 	orr.w	r1, r3, r2
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800544c:	e005      	b.n	800545a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	cff00000 	.word	0xcff00000

0800546c <__errno>:
 800546c:	4b01      	ldr	r3, [pc, #4]	; (8005474 <__errno+0x8>)
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20000040 	.word	0x20000040

08005478 <__libc_init_array>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	2600      	movs	r6, #0
 800547c:	4d0c      	ldr	r5, [pc, #48]	; (80054b0 <__libc_init_array+0x38>)
 800547e:	4c0d      	ldr	r4, [pc, #52]	; (80054b4 <__libc_init_array+0x3c>)
 8005480:	1b64      	subs	r4, r4, r5
 8005482:	10a4      	asrs	r4, r4, #2
 8005484:	42a6      	cmp	r6, r4
 8005486:	d109      	bne.n	800549c <__libc_init_array+0x24>
 8005488:	f004 fd02 	bl	8009e90 <_init>
 800548c:	2600      	movs	r6, #0
 800548e:	4d0a      	ldr	r5, [pc, #40]	; (80054b8 <__libc_init_array+0x40>)
 8005490:	4c0a      	ldr	r4, [pc, #40]	; (80054bc <__libc_init_array+0x44>)
 8005492:	1b64      	subs	r4, r4, r5
 8005494:	10a4      	asrs	r4, r4, #2
 8005496:	42a6      	cmp	r6, r4
 8005498:	d105      	bne.n	80054a6 <__libc_init_array+0x2e>
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a0:	4798      	blx	r3
 80054a2:	3601      	adds	r6, #1
 80054a4:	e7ee      	b.n	8005484 <__libc_init_array+0xc>
 80054a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054aa:	4798      	blx	r3
 80054ac:	3601      	adds	r6, #1
 80054ae:	e7f2      	b.n	8005496 <__libc_init_array+0x1e>
 80054b0:	0801fb4c 	.word	0x0801fb4c
 80054b4:	0801fb4c 	.word	0x0801fb4c
 80054b8:	0801fb4c 	.word	0x0801fb4c
 80054bc:	0801fb54 	.word	0x0801fb54

080054c0 <memset>:
 80054c0:	4603      	mov	r3, r0
 80054c2:	4402      	add	r2, r0
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d100      	bne.n	80054ca <memset+0xa>
 80054c8:	4770      	bx	lr
 80054ca:	f803 1b01 	strb.w	r1, [r3], #1
 80054ce:	e7f9      	b.n	80054c4 <memset+0x4>

080054d0 <sprintf>:
 80054d0:	b40e      	push	{r1, r2, r3}
 80054d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d6:	b500      	push	{lr}
 80054d8:	b09c      	sub	sp, #112	; 0x70
 80054da:	ab1d      	add	r3, sp, #116	; 0x74
 80054dc:	9002      	str	r0, [sp, #8]
 80054de:	9006      	str	r0, [sp, #24]
 80054e0:	9107      	str	r1, [sp, #28]
 80054e2:	9104      	str	r1, [sp, #16]
 80054e4:	4808      	ldr	r0, [pc, #32]	; (8005508 <sprintf+0x38>)
 80054e6:	4909      	ldr	r1, [pc, #36]	; (800550c <sprintf+0x3c>)
 80054e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ec:	9105      	str	r1, [sp, #20]
 80054ee:	6800      	ldr	r0, [r0, #0]
 80054f0:	a902      	add	r1, sp, #8
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	f000 f80c 	bl	8005510 <_svfprintf_r>
 80054f8:	2200      	movs	r2, #0
 80054fa:	9b02      	ldr	r3, [sp, #8]
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	b01c      	add	sp, #112	; 0x70
 8005500:	f85d eb04 	ldr.w	lr, [sp], #4
 8005504:	b003      	add	sp, #12
 8005506:	4770      	bx	lr
 8005508:	20000040 	.word	0x20000040
 800550c:	ffff0208 	.word	0xffff0208

08005510 <_svfprintf_r>:
 8005510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005514:	b0d3      	sub	sp, #332	; 0x14c
 8005516:	468b      	mov	fp, r1
 8005518:	4692      	mov	sl, r2
 800551a:	461e      	mov	r6, r3
 800551c:	4681      	mov	r9, r0
 800551e:	f002 f943 	bl	80077a8 <_localeconv_r>
 8005522:	6803      	ldr	r3, [r0, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	9317      	str	r3, [sp, #92]	; 0x5c
 8005528:	f7fa fe7e 	bl	8000228 <strlen>
 800552c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005530:	9012      	str	r0, [sp, #72]	; 0x48
 8005532:	0618      	lsls	r0, r3, #24
 8005534:	d518      	bpl.n	8005568 <_svfprintf_r+0x58>
 8005536:	f8db 3010 	ldr.w	r3, [fp, #16]
 800553a:	b9ab      	cbnz	r3, 8005568 <_svfprintf_r+0x58>
 800553c:	2140      	movs	r1, #64	; 0x40
 800553e:	4648      	mov	r0, r9
 8005540:	f002 f93a 	bl	80077b8 <_malloc_r>
 8005544:	f8cb 0000 	str.w	r0, [fp]
 8005548:	f8cb 0010 	str.w	r0, [fp, #16]
 800554c:	b948      	cbnz	r0, 8005562 <_svfprintf_r+0x52>
 800554e:	230c      	movs	r3, #12
 8005550:	f8c9 3000 	str.w	r3, [r9]
 8005554:	f04f 33ff 	mov.w	r3, #4294967295
 8005558:	930f      	str	r3, [sp, #60]	; 0x3c
 800555a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800555c:	b053      	add	sp, #332	; 0x14c
 800555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	f8cb 3014 	str.w	r3, [fp, #20]
 8005568:	2500      	movs	r5, #0
 800556a:	2200      	movs	r2, #0
 800556c:	2300      	movs	r3, #0
 800556e:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 8005572:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005576:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 800557a:	ac29      	add	r4, sp, #164	; 0xa4
 800557c:	9426      	str	r4, [sp, #152]	; 0x98
 800557e:	9509      	str	r5, [sp, #36]	; 0x24
 8005580:	950d      	str	r5, [sp, #52]	; 0x34
 8005582:	9515      	str	r5, [sp, #84]	; 0x54
 8005584:	9518      	str	r5, [sp, #96]	; 0x60
 8005586:	950f      	str	r5, [sp, #60]	; 0x3c
 8005588:	4653      	mov	r3, sl
 800558a:	461d      	mov	r5, r3
 800558c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005590:	b10a      	cbz	r2, 8005596 <_svfprintf_r+0x86>
 8005592:	2a25      	cmp	r2, #37	; 0x25
 8005594:	d1f9      	bne.n	800558a <_svfprintf_r+0x7a>
 8005596:	ebb5 070a 	subs.w	r7, r5, sl
 800559a:	d00d      	beq.n	80055b8 <_svfprintf_r+0xa8>
 800559c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800559e:	e9c4 a700 	strd	sl, r7, [r4]
 80055a2:	443b      	add	r3, r7
 80055a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80055a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80055a8:	3301      	adds	r3, #1
 80055aa:	2b07      	cmp	r3, #7
 80055ac:	9327      	str	r3, [sp, #156]	; 0x9c
 80055ae:	dc79      	bgt.n	80056a4 <_svfprintf_r+0x194>
 80055b0:	3408      	adds	r4, #8
 80055b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055b4:	443b      	add	r3, r7
 80055b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80055b8:	782b      	ldrb	r3, [r5, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f001 813a 	beq.w	8006834 <_svfprintf_r+0x1324>
 80055c0:	2300      	movs	r3, #0
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295
 80055c6:	4698      	mov	r8, r3
 80055c8:	9207      	str	r2, [sp, #28]
 80055ca:	270a      	movs	r7, #10
 80055cc:	222b      	movs	r2, #43	; 0x2b
 80055ce:	3501      	adds	r5, #1
 80055d0:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80055d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80055d6:	462b      	mov	r3, r5
 80055d8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80055dc:	910a      	str	r1, [sp, #40]	; 0x28
 80055de:	930e      	str	r3, [sp, #56]	; 0x38
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	3b20      	subs	r3, #32
 80055e4:	2b5a      	cmp	r3, #90	; 0x5a
 80055e6:	f200 85ac 	bhi.w	8006142 <_svfprintf_r+0xc32>
 80055ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80055ee:	007e      	.short	0x007e
 80055f0:	05aa05aa 	.word	0x05aa05aa
 80055f4:	05aa0086 	.word	0x05aa0086
 80055f8:	05aa05aa 	.word	0x05aa05aa
 80055fc:	05aa0065 	.word	0x05aa0065
 8005600:	008905aa 	.word	0x008905aa
 8005604:	05aa0093 	.word	0x05aa0093
 8005608:	00960090 	.word	0x00960090
 800560c:	00b305aa 	.word	0x00b305aa
 8005610:	00b600b6 	.word	0x00b600b6
 8005614:	00b600b6 	.word	0x00b600b6
 8005618:	00b600b6 	.word	0x00b600b6
 800561c:	00b600b6 	.word	0x00b600b6
 8005620:	05aa00b6 	.word	0x05aa00b6
 8005624:	05aa05aa 	.word	0x05aa05aa
 8005628:	05aa05aa 	.word	0x05aa05aa
 800562c:	05aa05aa 	.word	0x05aa05aa
 8005630:	05aa0125 	.word	0x05aa0125
 8005634:	00f600e3 	.word	0x00f600e3
 8005638:	01250125 	.word	0x01250125
 800563c:	05aa0125 	.word	0x05aa0125
 8005640:	05aa05aa 	.word	0x05aa05aa
 8005644:	00c605aa 	.word	0x00c605aa
 8005648:	05aa05aa 	.word	0x05aa05aa
 800564c:	05aa0482 	.word	0x05aa0482
 8005650:	05aa05aa 	.word	0x05aa05aa
 8005654:	05aa04cd 	.word	0x05aa04cd
 8005658:	05aa04ee 	.word	0x05aa04ee
 800565c:	051005aa 	.word	0x051005aa
 8005660:	05aa05aa 	.word	0x05aa05aa
 8005664:	05aa05aa 	.word	0x05aa05aa
 8005668:	05aa05aa 	.word	0x05aa05aa
 800566c:	05aa05aa 	.word	0x05aa05aa
 8005670:	05aa0125 	.word	0x05aa0125
 8005674:	00f800e3 	.word	0x00f800e3
 8005678:	01250125 	.word	0x01250125
 800567c:	00c90125 	.word	0x00c90125
 8005680:	00dd00f8 	.word	0x00dd00f8
 8005684:	00d605aa 	.word	0x00d605aa
 8005688:	045d05aa 	.word	0x045d05aa
 800568c:	04bb0484 	.word	0x04bb0484
 8005690:	05aa00dd 	.word	0x05aa00dd
 8005694:	007c04cd 	.word	0x007c04cd
 8005698:	05aa04f0 	.word	0x05aa04f0
 800569c:	052f05aa 	.word	0x052f05aa
 80056a0:	007c05aa 	.word	0x007c05aa
 80056a4:	4659      	mov	r1, fp
 80056a6:	4648      	mov	r0, r9
 80056a8:	aa26      	add	r2, sp, #152	; 0x98
 80056aa:	f002 fe74 	bl	8008396 <__ssprint_r>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f040 812f 	bne.w	8005912 <_svfprintf_r+0x402>
 80056b4:	ac29      	add	r4, sp, #164	; 0xa4
 80056b6:	e77c      	b.n	80055b2 <_svfprintf_r+0xa2>
 80056b8:	4648      	mov	r0, r9
 80056ba:	f002 f875 	bl	80077a8 <_localeconv_r>
 80056be:	6843      	ldr	r3, [r0, #4]
 80056c0:	4618      	mov	r0, r3
 80056c2:	9318      	str	r3, [sp, #96]	; 0x60
 80056c4:	f7fa fdb0 	bl	8000228 <strlen>
 80056c8:	9015      	str	r0, [sp, #84]	; 0x54
 80056ca:	4648      	mov	r0, r9
 80056cc:	f002 f86c 	bl	80077a8 <_localeconv_r>
 80056d0:	6883      	ldr	r3, [r0, #8]
 80056d2:	222b      	movs	r2, #43	; 0x2b
 80056d4:	930d      	str	r3, [sp, #52]	; 0x34
 80056d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056d8:	b12b      	cbz	r3, 80056e6 <_svfprintf_r+0x1d6>
 80056da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056dc:	b11b      	cbz	r3, 80056e6 <_svfprintf_r+0x1d6>
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	b10b      	cbz	r3, 80056e6 <_svfprintf_r+0x1d6>
 80056e2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 80056e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80056e8:	e775      	b.n	80055d6 <_svfprintf_r+0xc6>
 80056ea:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f9      	bne.n	80056e6 <_svfprintf_r+0x1d6>
 80056f2:	2320      	movs	r3, #32
 80056f4:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80056f8:	e7f5      	b.n	80056e6 <_svfprintf_r+0x1d6>
 80056fa:	f048 0801 	orr.w	r8, r8, #1
 80056fe:	e7f2      	b.n	80056e6 <_svfprintf_r+0x1d6>
 8005700:	f856 3b04 	ldr.w	r3, [r6], #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	9313      	str	r3, [sp, #76]	; 0x4c
 8005708:	daed      	bge.n	80056e6 <_svfprintf_r+0x1d6>
 800570a:	425b      	negs	r3, r3
 800570c:	9313      	str	r3, [sp, #76]	; 0x4c
 800570e:	f048 0804 	orr.w	r8, r8, #4
 8005712:	e7e8      	b.n	80056e6 <_svfprintf_r+0x1d6>
 8005714:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8005718:	e7e5      	b.n	80056e6 <_svfprintf_r+0x1d6>
 800571a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800571c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005720:	2b2a      	cmp	r3, #42	; 0x2a
 8005722:	930a      	str	r3, [sp, #40]	; 0x28
 8005724:	d113      	bne.n	800574e <_svfprintf_r+0x23e>
 8005726:	f856 0b04 	ldr.w	r0, [r6], #4
 800572a:	950e      	str	r5, [sp, #56]	; 0x38
 800572c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8005730:	9307      	str	r3, [sp, #28]
 8005732:	e7d8      	b.n	80056e6 <_svfprintf_r+0x1d6>
 8005734:	9907      	ldr	r1, [sp, #28]
 8005736:	fb07 3301 	mla	r3, r7, r1, r3
 800573a:	9307      	str	r3, [sp, #28]
 800573c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005740:	930a      	str	r3, [sp, #40]	; 0x28
 8005742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005744:	3b30      	subs	r3, #48	; 0x30
 8005746:	2b09      	cmp	r3, #9
 8005748:	d9f4      	bls.n	8005734 <_svfprintf_r+0x224>
 800574a:	950e      	str	r5, [sp, #56]	; 0x38
 800574c:	e748      	b.n	80055e0 <_svfprintf_r+0xd0>
 800574e:	2300      	movs	r3, #0
 8005750:	9307      	str	r3, [sp, #28]
 8005752:	e7f6      	b.n	8005742 <_svfprintf_r+0x232>
 8005754:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8005758:	e7c5      	b.n	80056e6 <_svfprintf_r+0x1d6>
 800575a:	2300      	movs	r3, #0
 800575c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800575e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005762:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005764:	3b30      	subs	r3, #48	; 0x30
 8005766:	fb07 3301 	mla	r3, r7, r1, r3
 800576a:	9313      	str	r3, [sp, #76]	; 0x4c
 800576c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005770:	930a      	str	r3, [sp, #40]	; 0x28
 8005772:	3b30      	subs	r3, #48	; 0x30
 8005774:	2b09      	cmp	r3, #9
 8005776:	d9f3      	bls.n	8005760 <_svfprintf_r+0x250>
 8005778:	e7e7      	b.n	800574a <_svfprintf_r+0x23a>
 800577a:	f048 0808 	orr.w	r8, r8, #8
 800577e:	e7b2      	b.n	80056e6 <_svfprintf_r+0x1d6>
 8005780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b68      	cmp	r3, #104	; 0x68
 8005786:	bf01      	itttt	eq
 8005788:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 800578a:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800578e:	3301      	addeq	r3, #1
 8005790:	930e      	streq	r3, [sp, #56]	; 0x38
 8005792:	bf18      	it	ne
 8005794:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8005798:	e7a5      	b.n	80056e6 <_svfprintf_r+0x1d6>
 800579a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b6c      	cmp	r3, #108	; 0x6c
 80057a0:	d105      	bne.n	80057ae <_svfprintf_r+0x29e>
 80057a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a4:	3301      	adds	r3, #1
 80057a6:	930e      	str	r3, [sp, #56]	; 0x38
 80057a8:	f048 0820 	orr.w	r8, r8, #32
 80057ac:	e79b      	b.n	80056e6 <_svfprintf_r+0x1d6>
 80057ae:	f048 0810 	orr.w	r8, r8, #16
 80057b2:	e798      	b.n	80056e6 <_svfprintf_r+0x1d6>
 80057b4:	4632      	mov	r2, r6
 80057b6:	2000      	movs	r0, #0
 80057b8:	f852 3b04 	ldr.w	r3, [r2], #4
 80057bc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80057c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80057c2:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80057c6:	2301      	movs	r3, #1
 80057c8:	4607      	mov	r7, r0
 80057ca:	4606      	mov	r6, r0
 80057cc:	4605      	mov	r5, r0
 80057ce:	9008      	str	r0, [sp, #32]
 80057d0:	9307      	str	r3, [sp, #28]
 80057d2:	900c      	str	r0, [sp, #48]	; 0x30
 80057d4:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 80057d8:	e1b0      	b.n	8005b3c <_svfprintf_r+0x62c>
 80057da:	f048 0810 	orr.w	r8, r8, #16
 80057de:	f018 0f20 	tst.w	r8, #32
 80057e2:	d011      	beq.n	8005808 <_svfprintf_r+0x2f8>
 80057e4:	1df3      	adds	r3, r6, #7
 80057e6:	f023 0307 	bic.w	r3, r3, #7
 80057ea:	461a      	mov	r2, r3
 80057ec:	f852 6b08 	ldr.w	r6, [r2], #8
 80057f0:	685f      	ldr	r7, [r3, #4]
 80057f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80057f4:	2f00      	cmp	r7, #0
 80057f6:	da05      	bge.n	8005804 <_svfprintf_r+0x2f4>
 80057f8:	232d      	movs	r3, #45	; 0x2d
 80057fa:	4276      	negs	r6, r6
 80057fc:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005800:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005804:	2301      	movs	r3, #1
 8005806:	e387      	b.n	8005f18 <_svfprintf_r+0xa08>
 8005808:	4633      	mov	r3, r6
 800580a:	f853 7b04 	ldr.w	r7, [r3], #4
 800580e:	f018 0f10 	tst.w	r8, #16
 8005812:	930b      	str	r3, [sp, #44]	; 0x2c
 8005814:	d002      	beq.n	800581c <_svfprintf_r+0x30c>
 8005816:	463e      	mov	r6, r7
 8005818:	17ff      	asrs	r7, r7, #31
 800581a:	e7eb      	b.n	80057f4 <_svfprintf_r+0x2e4>
 800581c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005820:	d003      	beq.n	800582a <_svfprintf_r+0x31a>
 8005822:	b23e      	sxth	r6, r7
 8005824:	f347 37c0 	sbfx	r7, r7, #15, #1
 8005828:	e7e4      	b.n	80057f4 <_svfprintf_r+0x2e4>
 800582a:	f418 7f00 	tst.w	r8, #512	; 0x200
 800582e:	d0f2      	beq.n	8005816 <_svfprintf_r+0x306>
 8005830:	b27e      	sxtb	r6, r7
 8005832:	f347 17c0 	sbfx	r7, r7, #7, #1
 8005836:	e7dd      	b.n	80057f4 <_svfprintf_r+0x2e4>
 8005838:	3607      	adds	r6, #7
 800583a:	f026 0307 	bic.w	r3, r6, #7
 800583e:	4619      	mov	r1, r3
 8005840:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005844:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005848:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 800584c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005850:	910b      	str	r1, [sp, #44]	; 0x2c
 8005852:	f04f 32ff 	mov.w	r2, #4294967295
 8005856:	4630      	mov	r0, r6
 8005858:	4629      	mov	r1, r5
 800585a:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <_svfprintf_r+0x434>)
 800585c:	f7fb f942 	bl	8000ae4 <__aeabi_dcmpun>
 8005860:	bb18      	cbnz	r0, 80058aa <_svfprintf_r+0x39a>
 8005862:	f04f 32ff 	mov.w	r2, #4294967295
 8005866:	4630      	mov	r0, r6
 8005868:	4629      	mov	r1, r5
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <_svfprintf_r+0x434>)
 800586c:	f7fb f91c 	bl	8000aa8 <__aeabi_dcmple>
 8005870:	b9d8      	cbnz	r0, 80058aa <_svfprintf_r+0x39a>
 8005872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005876:	2200      	movs	r2, #0
 8005878:	2300      	movs	r3, #0
 800587a:	f7fb f90b 	bl	8000a94 <__aeabi_dcmplt>
 800587e:	b110      	cbz	r0, 8005886 <_svfprintf_r+0x376>
 8005880:	232d      	movs	r3, #45	; 0x2d
 8005882:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005886:	4a30      	ldr	r2, [pc, #192]	; (8005948 <_svfprintf_r+0x438>)
 8005888:	4830      	ldr	r0, [pc, #192]	; (800594c <_svfprintf_r+0x43c>)
 800588a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588c:	2100      	movs	r1, #0
 800588e:	2b47      	cmp	r3, #71	; 0x47
 8005890:	bfd4      	ite	le
 8005892:	4692      	movle	sl, r2
 8005894:	4682      	movgt	sl, r0
 8005896:	2303      	movs	r3, #3
 8005898:	e9cd 3107 	strd	r3, r1, [sp, #28]
 800589c:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 80058a0:	2700      	movs	r7, #0
 80058a2:	463e      	mov	r6, r7
 80058a4:	463b      	mov	r3, r7
 80058a6:	f000 bfff 	b.w	80068a8 <_svfprintf_r+0x1398>
 80058aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	f7fb f917 	bl	8000ae4 <__aeabi_dcmpun>
 80058b6:	b148      	cbz	r0, 80058cc <_svfprintf_r+0x3bc>
 80058b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ba:	4a25      	ldr	r2, [pc, #148]	; (8005950 <_svfprintf_r+0x440>)
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bfb8      	it	lt
 80058c0:	232d      	movlt	r3, #45	; 0x2d
 80058c2:	4824      	ldr	r0, [pc, #144]	; (8005954 <_svfprintf_r+0x444>)
 80058c4:	bfb8      	it	lt
 80058c6:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 80058ca:	e7de      	b.n	800588a <_svfprintf_r+0x37a>
 80058cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ce:	f023 0320 	bic.w	r3, r3, #32
 80058d2:	2b41      	cmp	r3, #65	; 0x41
 80058d4:	930c      	str	r3, [sp, #48]	; 0x30
 80058d6:	d125      	bne.n	8005924 <_svfprintf_r+0x414>
 80058d8:	2330      	movs	r3, #48	; 0x30
 80058da:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e0:	f048 0802 	orr.w	r8, r8, #2
 80058e4:	2b61      	cmp	r3, #97	; 0x61
 80058e6:	bf0c      	ite	eq
 80058e8:	2378      	moveq	r3, #120	; 0x78
 80058ea:	2358      	movne	r3, #88	; 0x58
 80058ec:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80058f0:	9b07      	ldr	r3, [sp, #28]
 80058f2:	2b63      	cmp	r3, #99	; 0x63
 80058f4:	dd30      	ble.n	8005958 <_svfprintf_r+0x448>
 80058f6:	4648      	mov	r0, r9
 80058f8:	1c59      	adds	r1, r3, #1
 80058fa:	f001 ff5d 	bl	80077b8 <_malloc_r>
 80058fe:	4682      	mov	sl, r0
 8005900:	2800      	cmp	r0, #0
 8005902:	f040 81f7 	bne.w	8005cf4 <_svfprintf_r+0x7e4>
 8005906:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800590a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8005912:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005916:	f013 0f40 	tst.w	r3, #64	; 0x40
 800591a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800591c:	bf18      	it	ne
 800591e:	f04f 33ff 	movne.w	r3, #4294967295
 8005922:	e619      	b.n	8005558 <_svfprintf_r+0x48>
 8005924:	9b07      	ldr	r3, [sp, #28]
 8005926:	3301      	adds	r3, #1
 8005928:	f000 81e6 	beq.w	8005cf8 <_svfprintf_r+0x7e8>
 800592c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800592e:	2b47      	cmp	r3, #71	; 0x47
 8005930:	f040 81e5 	bne.w	8005cfe <_svfprintf_r+0x7ee>
 8005934:	9b07      	ldr	r3, [sp, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f040 81e1 	bne.w	8005cfe <_svfprintf_r+0x7ee>
 800593c:	9308      	str	r3, [sp, #32]
 800593e:	2301      	movs	r3, #1
 8005940:	9307      	str	r3, [sp, #28]
 8005942:	e00c      	b.n	800595e <_svfprintf_r+0x44e>
 8005944:	7fefffff 	.word	0x7fefffff
 8005948:	0801f7b0 	.word	0x0801f7b0
 800594c:	0801f7b4 	.word	0x0801f7b4
 8005950:	0801f7b8 	.word	0x0801f7b8
 8005954:	0801f7bc 	.word	0x0801f7bc
 8005958:	9008      	str	r0, [sp, #32]
 800595a:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 800595e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8005962:	9314      	str	r3, [sp, #80]	; 0x50
 8005964:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 8005968:	1e1d      	subs	r5, r3, #0
 800596a:	bfae      	itee	ge
 800596c:	2300      	movge	r3, #0
 800596e:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8005972:	232d      	movlt	r3, #45	; 0x2d
 8005974:	931c      	str	r3, [sp, #112]	; 0x70
 8005976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005978:	2b41      	cmp	r3, #65	; 0x41
 800597a:	f040 81d8 	bne.w	8005d2e <_svfprintf_r+0x81e>
 800597e:	4638      	mov	r0, r7
 8005980:	aa20      	add	r2, sp, #128	; 0x80
 8005982:	4629      	mov	r1, r5
 8005984:	f002 fcb0 	bl	80082e8 <frexp>
 8005988:	2200      	movs	r2, #0
 800598a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800598e:	f7fa fe0f 	bl	80005b0 <__aeabi_dmul>
 8005992:	2200      	movs	r2, #0
 8005994:	2300      	movs	r3, #0
 8005996:	4606      	mov	r6, r0
 8005998:	460f      	mov	r7, r1
 800599a:	f7fb f871 	bl	8000a80 <__aeabi_dcmpeq>
 800599e:	b108      	cbz	r0, 80059a4 <_svfprintf_r+0x494>
 80059a0:	2301      	movs	r3, #1
 80059a2:	9320      	str	r3, [sp, #128]	; 0x80
 80059a4:	4bad      	ldr	r3, [pc, #692]	; (8005c5c <_svfprintf_r+0x74c>)
 80059a6:	4aae      	ldr	r2, [pc, #696]	; (8005c60 <_svfprintf_r+0x750>)
 80059a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059aa:	4655      	mov	r5, sl
 80059ac:	2961      	cmp	r1, #97	; 0x61
 80059ae:	bf18      	it	ne
 80059b0:	461a      	movne	r2, r3
 80059b2:	9b07      	ldr	r3, [sp, #28]
 80059b4:	921b      	str	r2, [sp, #108]	; 0x6c
 80059b6:	3b01      	subs	r3, #1
 80059b8:	9309      	str	r3, [sp, #36]	; 0x24
 80059ba:	2200      	movs	r2, #0
 80059bc:	4ba9      	ldr	r3, [pc, #676]	; (8005c64 <_svfprintf_r+0x754>)
 80059be:	4630      	mov	r0, r6
 80059c0:	4639      	mov	r1, r7
 80059c2:	f7fa fdf5 	bl	80005b0 <__aeabi_dmul>
 80059c6:	460f      	mov	r7, r1
 80059c8:	4606      	mov	r6, r0
 80059ca:	f7fb f8a1 	bl	8000b10 <__aeabi_d2iz>
 80059ce:	901d      	str	r0, [sp, #116]	; 0x74
 80059d0:	f7fa fd84 	bl	80004dc <__aeabi_i2d>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4630      	mov	r0, r6
 80059da:	4639      	mov	r1, r7
 80059dc:	f7fa fc30 	bl	8000240 <__aeabi_dsub>
 80059e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80059e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059e4:	4606      	mov	r6, r0
 80059e6:	5c9b      	ldrb	r3, [r3, r2]
 80059e8:	460f      	mov	r7, r1
 80059ea:	f805 3b01 	strb.w	r3, [r5], #1
 80059ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	9316      	str	r3, [sp, #88]	; 0x58
 80059f4:	d007      	beq.n	8005a06 <_svfprintf_r+0x4f6>
 80059f6:	3b01      	subs	r3, #1
 80059f8:	9309      	str	r3, [sp, #36]	; 0x24
 80059fa:	2200      	movs	r2, #0
 80059fc:	2300      	movs	r3, #0
 80059fe:	f7fb f83f 	bl	8000a80 <__aeabi_dcmpeq>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d0d9      	beq.n	80059ba <_svfprintf_r+0x4aa>
 8005a06:	2200      	movs	r2, #0
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	4b96      	ldr	r3, [pc, #600]	; (8005c68 <_svfprintf_r+0x758>)
 8005a0e:	f7fb f85f 	bl	8000ad0 <__aeabi_dcmpgt>
 8005a12:	b960      	cbnz	r0, 8005a2e <_svfprintf_r+0x51e>
 8005a14:	2200      	movs	r2, #0
 8005a16:	4630      	mov	r0, r6
 8005a18:	4639      	mov	r1, r7
 8005a1a:	4b93      	ldr	r3, [pc, #588]	; (8005c68 <_svfprintf_r+0x758>)
 8005a1c:	f7fb f830 	bl	8000a80 <__aeabi_dcmpeq>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	f000 817f 	beq.w	8005d24 <_svfprintf_r+0x814>
 8005a26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a28:	07db      	lsls	r3, r3, #31
 8005a2a:	f140 817b 	bpl.w	8005d24 <_svfprintf_r+0x814>
 8005a2e:	2030      	movs	r0, #48	; 0x30
 8005a30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a32:	9524      	str	r5, [sp, #144]	; 0x90
 8005a34:	7bd9      	ldrb	r1, [r3, #15]
 8005a36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a38:	1e53      	subs	r3, r2, #1
 8005a3a:	9324      	str	r3, [sp, #144]	; 0x90
 8005a3c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8005a40:	428b      	cmp	r3, r1
 8005a42:	f000 815e 	beq.w	8005d02 <_svfprintf_r+0x7f2>
 8005a46:	2b39      	cmp	r3, #57	; 0x39
 8005a48:	bf0b      	itete	eq
 8005a4a:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 8005a4c:	3301      	addne	r3, #1
 8005a4e:	7a9b      	ldrbeq	r3, [r3, #10]
 8005a50:	b2db      	uxtbne	r3, r3
 8005a52:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a56:	eba5 030a 	sub.w	r3, r5, sl
 8005a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a5e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005a60:	2b47      	cmp	r3, #71	; 0x47
 8005a62:	f040 81b1 	bne.w	8005dc8 <_svfprintf_r+0x8b8>
 8005a66:	1cef      	adds	r7, r5, #3
 8005a68:	db03      	blt.n	8005a72 <_svfprintf_r+0x562>
 8005a6a:	9b07      	ldr	r3, [sp, #28]
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	f280 81d6 	bge.w	8005e1e <_svfprintf_r+0x90e>
 8005a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a74:	3b02      	subs	r3, #2
 8005a76:	930a      	str	r3, [sp, #40]	; 0x28
 8005a78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a7a:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8005a7e:	f021 0120 	bic.w	r1, r1, #32
 8005a82:	2941      	cmp	r1, #65	; 0x41
 8005a84:	bf08      	it	eq
 8005a86:	320f      	addeq	r2, #15
 8005a88:	f105 33ff 	add.w	r3, r5, #4294967295
 8005a8c:	bf06      	itte	eq
 8005a8e:	b2d2      	uxtbeq	r2, r2
 8005a90:	2101      	moveq	r1, #1
 8005a92:	2100      	movne	r1, #0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8005a9a:	bfb4      	ite	lt
 8005a9c:	222d      	movlt	r2, #45	; 0x2d
 8005a9e:	222b      	movge	r2, #43	; 0x2b
 8005aa0:	9320      	str	r3, [sp, #128]	; 0x80
 8005aa2:	bfb8      	it	lt
 8005aa4:	f1c5 0301 	rsblt	r3, r5, #1
 8005aa8:	2b09      	cmp	r3, #9
 8005aaa:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8005aae:	f340 81a4 	ble.w	8005dfa <_svfprintf_r+0x8ea>
 8005ab2:	260a      	movs	r6, #10
 8005ab4:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8005ab8:	fb93 f5f6 	sdiv	r5, r3, r6
 8005abc:	4611      	mov	r1, r2
 8005abe:	fb06 3015 	mls	r0, r6, r5, r3
 8005ac2:	3030      	adds	r0, #48	; 0x30
 8005ac4:	f801 0c01 	strb.w	r0, [r1, #-1]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	2863      	cmp	r0, #99	; 0x63
 8005acc:	462b      	mov	r3, r5
 8005ace:	f102 32ff 	add.w	r2, r2, #4294967295
 8005ad2:	dcf1      	bgt.n	8005ab8 <_svfprintf_r+0x5a8>
 8005ad4:	3330      	adds	r3, #48	; 0x30
 8005ad6:	1e88      	subs	r0, r1, #2
 8005ad8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005adc:	4603      	mov	r3, r0
 8005ade:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8005ae2:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 8005ae6:	42ab      	cmp	r3, r5
 8005ae8:	f0c0 8182 	bcc.w	8005df0 <_svfprintf_r+0x8e0>
 8005aec:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 8005af0:	1a52      	subs	r2, r2, r1
 8005af2:	42a8      	cmp	r0, r5
 8005af4:	bf88      	it	hi
 8005af6:	2200      	movhi	r2, #0
 8005af8:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8005afc:	441a      	add	r2, r3
 8005afe:	ab22      	add	r3, sp, #136	; 0x88
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b04:	9319      	str	r3, [sp, #100]	; 0x64
 8005b06:	2a01      	cmp	r2, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	9307      	str	r3, [sp, #28]
 8005b0c:	dc02      	bgt.n	8005b14 <_svfprintf_r+0x604>
 8005b0e:	f018 0f01 	tst.w	r8, #1
 8005b12:	d003      	beq.n	8005b1c <_svfprintf_r+0x60c>
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b18:	4413      	add	r3, r2
 8005b1a:	9307      	str	r3, [sp, #28]
 8005b1c:	2600      	movs	r6, #0
 8005b1e:	4635      	mov	r5, r6
 8005b20:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8005b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b28:	9314      	str	r3, [sp, #80]	; 0x50
 8005b2a:	960c      	str	r6, [sp, #48]	; 0x30
 8005b2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005b2e:	b113      	cbz	r3, 8005b36 <_svfprintf_r+0x626>
 8005b30:	232d      	movs	r3, #45	; 0x2d
 8005b32:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005b36:	2700      	movs	r7, #0
 8005b38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005b3c:	9b07      	ldr	r3, [sp, #28]
 8005b3e:	42bb      	cmp	r3, r7
 8005b40:	bfb8      	it	lt
 8005b42:	463b      	movlt	r3, r7
 8005b44:	9314      	str	r3, [sp, #80]	; 0x50
 8005b46:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8005b4a:	b113      	cbz	r3, 8005b52 <_svfprintf_r+0x642>
 8005b4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b4e:	3301      	adds	r3, #1
 8005b50:	9314      	str	r3, [sp, #80]	; 0x50
 8005b52:	f018 0302 	ands.w	r3, r8, #2
 8005b56:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b58:	bf1e      	ittt	ne
 8005b5a:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 8005b5c:	3302      	addne	r3, #2
 8005b5e:	9314      	strne	r3, [sp, #80]	; 0x50
 8005b60:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8005b64:	931c      	str	r3, [sp, #112]	; 0x70
 8005b66:	d121      	bne.n	8005bac <_svfprintf_r+0x69c>
 8005b68:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	9316      	str	r3, [sp, #88]	; 0x58
 8005b72:	dd1b      	ble.n	8005bac <_svfprintf_r+0x69c>
 8005b74:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005b78:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005b7a:	3201      	adds	r2, #1
 8005b7c:	2810      	cmp	r0, #16
 8005b7e:	483b      	ldr	r0, [pc, #236]	; (8005c6c <_svfprintf_r+0x75c>)
 8005b80:	f104 0108 	add.w	r1, r4, #8
 8005b84:	6020      	str	r0, [r4, #0]
 8005b86:	f300 82eb 	bgt.w	8006160 <_svfprintf_r+0xc50>
 8005b8a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005b8c:	2a07      	cmp	r2, #7
 8005b8e:	4403      	add	r3, r0
 8005b90:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005b94:	6060      	str	r0, [r4, #4]
 8005b96:	f340 82f8 	ble.w	800618a <_svfprintf_r+0xc7a>
 8005b9a:	4659      	mov	r1, fp
 8005b9c:	4648      	mov	r0, r9
 8005b9e:	aa26      	add	r2, sp, #152	; 0x98
 8005ba0:	f002 fbf9 	bl	8008396 <__ssprint_r>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f040 8623 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8005baa:	ac29      	add	r4, sp, #164	; 0xa4
 8005bac:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8005bb0:	b173      	cbz	r3, 8005bd0 <_svfprintf_r+0x6c0>
 8005bb2:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	2301      	movs	r3, #1
 8005bba:	6063      	str	r3, [r4, #4]
 8005bbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	9328      	str	r3, [sp, #160]	; 0xa0
 8005bc2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	2b07      	cmp	r3, #7
 8005bc8:	9327      	str	r3, [sp, #156]	; 0x9c
 8005bca:	f300 82e0 	bgt.w	800618e <_svfprintf_r+0xc7e>
 8005bce:	3408      	adds	r4, #8
 8005bd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bd2:	b16b      	cbz	r3, 8005bf0 <_svfprintf_r+0x6e0>
 8005bd4:	ab1f      	add	r3, sp, #124	; 0x7c
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	2302      	movs	r3, #2
 8005bda:	6063      	str	r3, [r4, #4]
 8005bdc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005bde:	3302      	adds	r3, #2
 8005be0:	9328      	str	r3, [sp, #160]	; 0xa0
 8005be2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005be4:	3301      	adds	r3, #1
 8005be6:	2b07      	cmp	r3, #7
 8005be8:	9327      	str	r3, [sp, #156]	; 0x9c
 8005bea:	f300 82da 	bgt.w	80061a2 <_svfprintf_r+0xc92>
 8005bee:	3408      	adds	r4, #8
 8005bf0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	d121      	bne.n	8005c3a <_svfprintf_r+0x72a>
 8005bf6:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	9316      	str	r3, [sp, #88]	; 0x58
 8005c00:	dd1b      	ble.n	8005c3a <_svfprintf_r+0x72a>
 8005c02:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005c06:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005c08:	3201      	adds	r2, #1
 8005c0a:	2810      	cmp	r0, #16
 8005c0c:	4818      	ldr	r0, [pc, #96]	; (8005c70 <_svfprintf_r+0x760>)
 8005c0e:	f104 0108 	add.w	r1, r4, #8
 8005c12:	6020      	str	r0, [r4, #0]
 8005c14:	f300 82cf 	bgt.w	80061b6 <_svfprintf_r+0xca6>
 8005c18:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005c1a:	2a07      	cmp	r2, #7
 8005c1c:	4403      	add	r3, r0
 8005c1e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005c22:	6060      	str	r0, [r4, #4]
 8005c24:	f340 82dc 	ble.w	80061e0 <_svfprintf_r+0xcd0>
 8005c28:	4659      	mov	r1, fp
 8005c2a:	4648      	mov	r0, r9
 8005c2c:	aa26      	add	r2, sp, #152	; 0x98
 8005c2e:	f002 fbb2 	bl	8008396 <__ssprint_r>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f040 85dc 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8005c38:	ac29      	add	r4, sp, #164	; 0xa4
 8005c3a:	9b07      	ldr	r3, [sp, #28]
 8005c3c:	1aff      	subs	r7, r7, r3
 8005c3e:	2f00      	cmp	r7, #0
 8005c40:	dd28      	ble.n	8005c94 <_svfprintf_r+0x784>
 8005c42:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005c46:	480a      	ldr	r0, [pc, #40]	; (8005c70 <_svfprintf_r+0x760>)
 8005c48:	2f10      	cmp	r7, #16
 8005c4a:	f103 0301 	add.w	r3, r3, #1
 8005c4e:	f104 0108 	add.w	r1, r4, #8
 8005c52:	6020      	str	r0, [r4, #0]
 8005c54:	f300 82c6 	bgt.w	80061e4 <_svfprintf_r+0xcd4>
 8005c58:	e00c      	b.n	8005c74 <_svfprintf_r+0x764>
 8005c5a:	bf00      	nop
 8005c5c:	0801f7d1 	.word	0x0801f7d1
 8005c60:	0801f7c0 	.word	0x0801f7c0
 8005c64:	40300000 	.word	0x40300000
 8005c68:	3fe00000 	.word	0x3fe00000
 8005c6c:	0801f7e4 	.word	0x0801f7e4
 8005c70:	0801f7f4 	.word	0x0801f7f4
 8005c74:	6067      	str	r7, [r4, #4]
 8005c76:	2b07      	cmp	r3, #7
 8005c78:	4417      	add	r7, r2
 8005c7a:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8005c7e:	f340 82c4 	ble.w	800620a <_svfprintf_r+0xcfa>
 8005c82:	4659      	mov	r1, fp
 8005c84:	4648      	mov	r0, r9
 8005c86:	aa26      	add	r2, sp, #152	; 0x98
 8005c88:	f002 fb85 	bl	8008396 <__ssprint_r>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	f040 85af 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8005c92:	ac29      	add	r4, sp, #164	; 0xa4
 8005c94:	f418 7f80 	tst.w	r8, #256	; 0x100
 8005c98:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8005c9a:	f040 82bd 	bne.w	8006218 <_svfprintf_r+0xd08>
 8005c9e:	9b07      	ldr	r3, [sp, #28]
 8005ca0:	f8c4 a000 	str.w	sl, [r4]
 8005ca4:	441f      	add	r7, r3
 8005ca6:	6063      	str	r3, [r4, #4]
 8005ca8:	9728      	str	r7, [sp, #160]	; 0xa0
 8005caa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005cac:	3301      	adds	r3, #1
 8005cae:	2b07      	cmp	r3, #7
 8005cb0:	9327      	str	r3, [sp, #156]	; 0x9c
 8005cb2:	f300 82f6 	bgt.w	80062a2 <_svfprintf_r+0xd92>
 8005cb6:	3408      	adds	r4, #8
 8005cb8:	f018 0f04 	tst.w	r8, #4
 8005cbc:	f040 857a 	bne.w	80067b4 <_svfprintf_r+0x12a4>
 8005cc0:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 8005cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cc6:	428a      	cmp	r2, r1
 8005cc8:	bfac      	ite	ge
 8005cca:	189b      	addge	r3, r3, r2
 8005ccc:	185b      	addlt	r3, r3, r1
 8005cce:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cd0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005cd2:	b13b      	cbz	r3, 8005ce4 <_svfprintf_r+0x7d4>
 8005cd4:	4659      	mov	r1, fp
 8005cd6:	4648      	mov	r0, r9
 8005cd8:	aa26      	add	r2, sp, #152	; 0x98
 8005cda:	f002 fb5c 	bl	8008396 <__ssprint_r>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	f040 8586 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9327      	str	r3, [sp, #156]	; 0x9c
 8005ce8:	9b08      	ldr	r3, [sp, #32]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 859c 	bne.w	8006828 <_svfprintf_r+0x1318>
 8005cf0:	ac29      	add	r4, sp, #164	; 0xa4
 8005cf2:	e0e4      	b.n	8005ebe <_svfprintf_r+0x9ae>
 8005cf4:	9008      	str	r0, [sp, #32]
 8005cf6:	e632      	b.n	800595e <_svfprintf_r+0x44e>
 8005cf8:	2306      	movs	r3, #6
 8005cfa:	9008      	str	r0, [sp, #32]
 8005cfc:	e620      	b.n	8005940 <_svfprintf_r+0x430>
 8005cfe:	9008      	str	r0, [sp, #32]
 8005d00:	e62d      	b.n	800595e <_svfprintf_r+0x44e>
 8005d02:	f802 0c01 	strb.w	r0, [r2, #-1]
 8005d06:	e696      	b.n	8005a36 <_svfprintf_r+0x526>
 8005d08:	f803 0b01 	strb.w	r0, [r3], #1
 8005d0c:	1aca      	subs	r2, r1, r3
 8005d0e:	2a00      	cmp	r2, #0
 8005d10:	dafa      	bge.n	8005d08 <_svfprintf_r+0x7f8>
 8005d12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d14:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d16:	3201      	adds	r2, #1
 8005d18:	f103 0301 	add.w	r3, r3, #1
 8005d1c:	bfb8      	it	lt
 8005d1e:	2300      	movlt	r3, #0
 8005d20:	441d      	add	r5, r3
 8005d22:	e698      	b.n	8005a56 <_svfprintf_r+0x546>
 8005d24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d26:	462b      	mov	r3, r5
 8005d28:	2030      	movs	r0, #48	; 0x30
 8005d2a:	18a9      	adds	r1, r5, r2
 8005d2c:	e7ee      	b.n	8005d0c <_svfprintf_r+0x7fc>
 8005d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d30:	2b46      	cmp	r3, #70	; 0x46
 8005d32:	d005      	beq.n	8005d40 <_svfprintf_r+0x830>
 8005d34:	2b45      	cmp	r3, #69	; 0x45
 8005d36:	d11b      	bne.n	8005d70 <_svfprintf_r+0x860>
 8005d38:	9b07      	ldr	r3, [sp, #28]
 8005d3a:	1c5e      	adds	r6, r3, #1
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e001      	b.n	8005d44 <_svfprintf_r+0x834>
 8005d40:	2303      	movs	r3, #3
 8005d42:	9e07      	ldr	r6, [sp, #28]
 8005d44:	aa24      	add	r2, sp, #144	; 0x90
 8005d46:	9204      	str	r2, [sp, #16]
 8005d48:	aa21      	add	r2, sp, #132	; 0x84
 8005d4a:	9203      	str	r2, [sp, #12]
 8005d4c:	aa20      	add	r2, sp, #128	; 0x80
 8005d4e:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	463a      	mov	r2, r7
 8005d56:	462b      	mov	r3, r5
 8005d58:	4648      	mov	r0, r9
 8005d5a:	f000 fe49 	bl	80069f0 <_dtoa_r>
 8005d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d60:	4682      	mov	sl, r0
 8005d62:	2b47      	cmp	r3, #71	; 0x47
 8005d64:	d106      	bne.n	8005d74 <_svfprintf_r+0x864>
 8005d66:	f018 0f01 	tst.w	r8, #1
 8005d6a:	d103      	bne.n	8005d74 <_svfprintf_r+0x864>
 8005d6c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8005d6e:	e672      	b.n	8005a56 <_svfprintf_r+0x546>
 8005d70:	9e07      	ldr	r6, [sp, #28]
 8005d72:	e7e3      	b.n	8005d3c <_svfprintf_r+0x82c>
 8005d74:	eb0a 0306 	add.w	r3, sl, r6
 8005d78:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d7c:	2b46      	cmp	r3, #70	; 0x46
 8005d7e:	d111      	bne.n	8005da4 <_svfprintf_r+0x894>
 8005d80:	f89a 3000 	ldrb.w	r3, [sl]
 8005d84:	2b30      	cmp	r3, #48	; 0x30
 8005d86:	d109      	bne.n	8005d9c <_svfprintf_r+0x88c>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f7fa fe76 	bl	8000a80 <__aeabi_dcmpeq>
 8005d94:	b910      	cbnz	r0, 8005d9c <_svfprintf_r+0x88c>
 8005d96:	f1c6 0601 	rsb	r6, r6, #1
 8005d9a:	9620      	str	r6, [sp, #128]	; 0x80
 8005d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005da0:	441a      	add	r2, r3
 8005da2:	9209      	str	r2, [sp, #36]	; 0x24
 8005da4:	2200      	movs	r2, #0
 8005da6:	2300      	movs	r3, #0
 8005da8:	4638      	mov	r0, r7
 8005daa:	4629      	mov	r1, r5
 8005dac:	f7fa fe68 	bl	8000a80 <__aeabi_dcmpeq>
 8005db0:	b108      	cbz	r0, 8005db6 <_svfprintf_r+0x8a6>
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	9324      	str	r3, [sp, #144]	; 0x90
 8005db6:	2230      	movs	r2, #48	; 0x30
 8005db8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dbc:	4299      	cmp	r1, r3
 8005dbe:	d9d5      	bls.n	8005d6c <_svfprintf_r+0x85c>
 8005dc0:	1c59      	adds	r1, r3, #1
 8005dc2:	9124      	str	r1, [sp, #144]	; 0x90
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e7f7      	b.n	8005db8 <_svfprintf_r+0x8a8>
 8005dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dca:	2b46      	cmp	r3, #70	; 0x46
 8005dcc:	f47f ae54 	bne.w	8005a78 <_svfprintf_r+0x568>
 8005dd0:	9a07      	ldr	r2, [sp, #28]
 8005dd2:	f008 0301 	and.w	r3, r8, #1
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	ea43 0302 	orr.w	r3, r3, r2
 8005ddc:	dd1a      	ble.n	8005e14 <_svfprintf_r+0x904>
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d034      	beq.n	8005e4c <_svfprintf_r+0x93c>
 8005de2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005de4:	18eb      	adds	r3, r5, r3
 8005de6:	441a      	add	r2, r3
 8005de8:	9207      	str	r2, [sp, #28]
 8005dea:	2366      	movs	r3, #102	; 0x66
 8005dec:	930a      	str	r3, [sp, #40]	; 0x28
 8005dee:	e033      	b.n	8005e58 <_svfprintf_r+0x948>
 8005df0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005df4:	f802 6b01 	strb.w	r6, [r2], #1
 8005df8:	e675      	b.n	8005ae6 <_svfprintf_r+0x5d6>
 8005dfa:	b941      	cbnz	r1, 8005e0e <_svfprintf_r+0x8fe>
 8005dfc:	2230      	movs	r2, #48	; 0x30
 8005dfe:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8005e02:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8005e06:	3330      	adds	r3, #48	; 0x30
 8005e08:	f802 3b01 	strb.w	r3, [r2], #1
 8005e0c:	e677      	b.n	8005afe <_svfprintf_r+0x5ee>
 8005e0e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8005e12:	e7f8      	b.n	8005e06 <_svfprintf_r+0x8f6>
 8005e14:	b1e3      	cbz	r3, 8005e50 <_svfprintf_r+0x940>
 8005e16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e18:	9a07      	ldr	r2, [sp, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	e7e3      	b.n	8005de6 <_svfprintf_r+0x8d6>
 8005e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e20:	429d      	cmp	r5, r3
 8005e22:	db07      	blt.n	8005e34 <_svfprintf_r+0x924>
 8005e24:	f018 0f01 	tst.w	r8, #1
 8005e28:	d02b      	beq.n	8005e82 <_svfprintf_r+0x972>
 8005e2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e2c:	18eb      	adds	r3, r5, r3
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	2367      	movs	r3, #103	; 0x67
 8005e32:	e7db      	b.n	8005dec <_svfprintf_r+0x8dc>
 8005e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	4413      	add	r3, r2
 8005e3c:	9307      	str	r3, [sp, #28]
 8005e3e:	dcf7      	bgt.n	8005e30 <_svfprintf_r+0x920>
 8005e40:	9a07      	ldr	r2, [sp, #28]
 8005e42:	f1c5 0301 	rsb	r3, r5, #1
 8005e46:	441a      	add	r2, r3
 8005e48:	9207      	str	r2, [sp, #28]
 8005e4a:	e7f1      	b.n	8005e30 <_svfprintf_r+0x920>
 8005e4c:	9507      	str	r5, [sp, #28]
 8005e4e:	e7cc      	b.n	8005dea <_svfprintf_r+0x8da>
 8005e50:	2366      	movs	r3, #102	; 0x66
 8005e52:	930a      	str	r3, [sp, #40]	; 0x28
 8005e54:	2301      	movs	r3, #1
 8005e56:	9307      	str	r3, [sp, #28]
 8005e58:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8005e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e5e:	d021      	beq.n	8005ea4 <_svfprintf_r+0x994>
 8005e60:	2600      	movs	r6, #0
 8005e62:	2d00      	cmp	r5, #0
 8005e64:	960c      	str	r6, [sp, #48]	; 0x30
 8005e66:	f77f ae61 	ble.w	8005b2c <_svfprintf_r+0x61c>
 8005e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2bff      	cmp	r3, #255	; 0xff
 8005e70:	d109      	bne.n	8005e86 <_svfprintf_r+0x976>
 8005e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e74:	9a07      	ldr	r2, [sp, #28]
 8005e76:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005e78:	4433      	add	r3, r6
 8005e7a:	fb01 2303 	mla	r3, r1, r3, r2
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	e654      	b.n	8005b2c <_svfprintf_r+0x61c>
 8005e82:	9507      	str	r5, [sp, #28]
 8005e84:	e7d4      	b.n	8005e30 <_svfprintf_r+0x920>
 8005e86:	42ab      	cmp	r3, r5
 8005e88:	daf3      	bge.n	8005e72 <_svfprintf_r+0x962>
 8005e8a:	1aed      	subs	r5, r5, r3
 8005e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	b133      	cbz	r3, 8005ea0 <_svfprintf_r+0x990>
 8005e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e94:	3301      	adds	r3, #1
 8005e96:	930c      	str	r3, [sp, #48]	; 0x30
 8005e98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8005e9e:	e7e4      	b.n	8005e6a <_svfprintf_r+0x95a>
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7e2      	b.n	8005e6a <_svfprintf_r+0x95a>
 8005ea4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005ea6:	e641      	b.n	8005b2c <_svfprintf_r+0x61c>
 8005ea8:	1d33      	adds	r3, r6, #4
 8005eaa:	f018 0f20 	tst.w	r8, #32
 8005eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eb0:	d00a      	beq.n	8005ec8 <_svfprintf_r+0x9b8>
 8005eb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005eb4:	6833      	ldr	r3, [r6, #0]
 8005eb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005eb8:	17d2      	asrs	r2, r2, #31
 8005eba:	e9c3 1200 	strd	r1, r2, [r3]
 8005ebe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005ec0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8005ec4:	f7ff bb60 	b.w	8005588 <_svfprintf_r+0x78>
 8005ec8:	f018 0f10 	tst.w	r8, #16
 8005ecc:	d003      	beq.n	8005ed6 <_svfprintf_r+0x9c6>
 8005ece:	6833      	ldr	r3, [r6, #0]
 8005ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	e7f3      	b.n	8005ebe <_svfprintf_r+0x9ae>
 8005ed6:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005eda:	d003      	beq.n	8005ee4 <_svfprintf_r+0x9d4>
 8005edc:	6833      	ldr	r3, [r6, #0]
 8005ede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	e7ec      	b.n	8005ebe <_svfprintf_r+0x9ae>
 8005ee4:	f418 7f00 	tst.w	r8, #512	; 0x200
 8005ee8:	d0f1      	beq.n	8005ece <_svfprintf_r+0x9be>
 8005eea:	6833      	ldr	r3, [r6, #0]
 8005eec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	e7e5      	b.n	8005ebe <_svfprintf_r+0x9ae>
 8005ef2:	f048 0810 	orr.w	r8, r8, #16
 8005ef6:	f018 0320 	ands.w	r3, r8, #32
 8005efa:	d020      	beq.n	8005f3e <_svfprintf_r+0xa2e>
 8005efc:	1df3      	adds	r3, r6, #7
 8005efe:	f023 0307 	bic.w	r3, r3, #7
 8005f02:	461a      	mov	r2, r3
 8005f04:	f852 6b08 	ldr.w	r6, [r2], #8
 8005f08:	685f      	ldr	r7, [r3, #4]
 8005f0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8005f12:	2200      	movs	r2, #0
 8005f14:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8005f18:	9a07      	ldr	r2, [sp, #28]
 8005f1a:	3201      	adds	r2, #1
 8005f1c:	f000 8495 	beq.w	800684a <_svfprintf_r+0x133a>
 8005f20:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8005f24:	9208      	str	r2, [sp, #32]
 8005f26:	ea56 0207 	orrs.w	r2, r6, r7
 8005f2a:	f040 8494 	bne.w	8006856 <_svfprintf_r+0x1346>
 8005f2e:	9a07      	ldr	r2, [sp, #28]
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	f000 80fb 	beq.w	800612c <_svfprintf_r+0xc1c>
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	f040 8490 	bne.w	800685c <_svfprintf_r+0x134c>
 8005f3c:	e09f      	b.n	800607e <_svfprintf_r+0xb6e>
 8005f3e:	4632      	mov	r2, r6
 8005f40:	f852 6b04 	ldr.w	r6, [r2], #4
 8005f44:	f018 0710 	ands.w	r7, r8, #16
 8005f48:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f4a:	d001      	beq.n	8005f50 <_svfprintf_r+0xa40>
 8005f4c:	461f      	mov	r7, r3
 8005f4e:	e7dd      	b.n	8005f0c <_svfprintf_r+0x9fc>
 8005f50:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8005f54:	d001      	beq.n	8005f5a <_svfprintf_r+0xa4a>
 8005f56:	b2b6      	uxth	r6, r6
 8005f58:	e7d8      	b.n	8005f0c <_svfprintf_r+0x9fc>
 8005f5a:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 8005f5e:	d0d5      	beq.n	8005f0c <_svfprintf_r+0x9fc>
 8005f60:	b2f6      	uxtb	r6, r6
 8005f62:	e7f3      	b.n	8005f4c <_svfprintf_r+0xa3c>
 8005f64:	4633      	mov	r3, r6
 8005f66:	f853 6b04 	ldr.w	r6, [r3], #4
 8005f6a:	2278      	movs	r2, #120	; 0x78
 8005f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f6e:	2330      	movs	r3, #48	; 0x30
 8005f70:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8005f74:	4ba6      	ldr	r3, [pc, #664]	; (8006210 <_svfprintf_r+0xd00>)
 8005f76:	2700      	movs	r7, #0
 8005f78:	931a      	str	r3, [sp, #104]	; 0x68
 8005f7a:	f048 0802 	orr.w	r8, r8, #2
 8005f7e:	2302      	movs	r3, #2
 8005f80:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 8005f84:	920a      	str	r2, [sp, #40]	; 0x28
 8005f86:	e7c4      	b.n	8005f12 <_svfprintf_r+0xa02>
 8005f88:	4633      	mov	r3, r6
 8005f8a:	2500      	movs	r5, #0
 8005f8c:	f853 ab04 	ldr.w	sl, [r3], #4
 8005f90:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8005f94:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f96:	9b07      	ldr	r3, [sp, #28]
 8005f98:	1c58      	adds	r0, r3, #1
 8005f9a:	d010      	beq.n	8005fbe <_svfprintf_r+0xaae>
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4650      	mov	r0, sl
 8005fa2:	f001 fe45 	bl	8007c30 <memchr>
 8005fa6:	9008      	str	r0, [sp, #32]
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	f000 80d6 	beq.w	800615a <_svfprintf_r+0xc4a>
 8005fae:	eba0 030a 	sub.w	r3, r0, sl
 8005fb2:	462f      	mov	r7, r5
 8005fb4:	462e      	mov	r6, r5
 8005fb6:	e9cd 3507 	strd	r3, r5, [sp, #28]
 8005fba:	950c      	str	r5, [sp, #48]	; 0x30
 8005fbc:	e5be      	b.n	8005b3c <_svfprintf_r+0x62c>
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	f7fa f932 	bl	8000228 <strlen>
 8005fc4:	e9cd 0507 	strd	r0, r5, [sp, #28]
 8005fc8:	e46a      	b.n	80058a0 <_svfprintf_r+0x390>
 8005fca:	f048 0810 	orr.w	r8, r8, #16
 8005fce:	f018 0320 	ands.w	r3, r8, #32
 8005fd2:	d009      	beq.n	8005fe8 <_svfprintf_r+0xad8>
 8005fd4:	1df3      	adds	r3, r6, #7
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f852 6b08 	ldr.w	r6, [r2], #8
 8005fe0:	685f      	ldr	r7, [r3, #4]
 8005fe2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e794      	b.n	8005f12 <_svfprintf_r+0xa02>
 8005fe8:	4632      	mov	r2, r6
 8005fea:	f852 6b04 	ldr.w	r6, [r2], #4
 8005fee:	f018 0710 	ands.w	r7, r8, #16
 8005ff2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ff4:	d001      	beq.n	8005ffa <_svfprintf_r+0xaea>
 8005ff6:	461f      	mov	r7, r3
 8005ff8:	e7f4      	b.n	8005fe4 <_svfprintf_r+0xad4>
 8005ffa:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8005ffe:	d001      	beq.n	8006004 <_svfprintf_r+0xaf4>
 8006000:	b2b6      	uxth	r6, r6
 8006002:	e7ef      	b.n	8005fe4 <_svfprintf_r+0xad4>
 8006004:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 8006008:	d0ec      	beq.n	8005fe4 <_svfprintf_r+0xad4>
 800600a:	b2f6      	uxtb	r6, r6
 800600c:	e7f3      	b.n	8005ff6 <_svfprintf_r+0xae6>
 800600e:	4b81      	ldr	r3, [pc, #516]	; (8006214 <_svfprintf_r+0xd04>)
 8006010:	931a      	str	r3, [sp, #104]	; 0x68
 8006012:	f018 0320 	ands.w	r3, r8, #32
 8006016:	d01b      	beq.n	8006050 <_svfprintf_r+0xb40>
 8006018:	1df3      	adds	r3, r6, #7
 800601a:	f023 0307 	bic.w	r3, r3, #7
 800601e:	461a      	mov	r2, r3
 8006020:	f852 6b08 	ldr.w	r6, [r2], #8
 8006024:	685f      	ldr	r7, [r3, #4]
 8006026:	920b      	str	r2, [sp, #44]	; 0x2c
 8006028:	f018 0f01 	tst.w	r8, #1
 800602c:	d00a      	beq.n	8006044 <_svfprintf_r+0xb34>
 800602e:	ea56 0307 	orrs.w	r3, r6, r7
 8006032:	d007      	beq.n	8006044 <_svfprintf_r+0xb34>
 8006034:	2330      	movs	r3, #48	; 0x30
 8006036:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800603a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800603c:	f048 0802 	orr.w	r8, r8, #2
 8006040:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8006044:	2302      	movs	r3, #2
 8006046:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800604a:	e762      	b.n	8005f12 <_svfprintf_r+0xa02>
 800604c:	4b70      	ldr	r3, [pc, #448]	; (8006210 <_svfprintf_r+0xd00>)
 800604e:	e7df      	b.n	8006010 <_svfprintf_r+0xb00>
 8006050:	4632      	mov	r2, r6
 8006052:	f852 6b04 	ldr.w	r6, [r2], #4
 8006056:	f018 0710 	ands.w	r7, r8, #16
 800605a:	920b      	str	r2, [sp, #44]	; 0x2c
 800605c:	d001      	beq.n	8006062 <_svfprintf_r+0xb52>
 800605e:	461f      	mov	r7, r3
 8006060:	e7e2      	b.n	8006028 <_svfprintf_r+0xb18>
 8006062:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8006066:	d001      	beq.n	800606c <_svfprintf_r+0xb5c>
 8006068:	b2b6      	uxth	r6, r6
 800606a:	e7dd      	b.n	8006028 <_svfprintf_r+0xb18>
 800606c:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 8006070:	d0da      	beq.n	8006028 <_svfprintf_r+0xb18>
 8006072:	b2f6      	uxtb	r6, r6
 8006074:	e7f3      	b.n	800605e <_svfprintf_r+0xb4e>
 8006076:	2e0a      	cmp	r6, #10
 8006078:	f177 0300 	sbcs.w	r3, r7, #0
 800607c:	d206      	bcs.n	800608c <_svfprintf_r+0xb7c>
 800607e:	3630      	adds	r6, #48	; 0x30
 8006080:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 8006084:	f20d 1a47 	addw	sl, sp, #327	; 0x147
 8006088:	f000 bc04 	b.w	8006894 <_svfprintf_r+0x1384>
 800608c:	2300      	movs	r3, #0
 800608e:	9309      	str	r3, [sp, #36]	; 0x24
 8006090:	9b08      	ldr	r3, [sp, #32]
 8006092:	ad52      	add	r5, sp, #328	; 0x148
 8006094:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8006098:	220a      	movs	r2, #10
 800609a:	2300      	movs	r3, #0
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f7fa fd7e 	bl	8000ba0 <__aeabi_uldivmod>
 80060a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a6:	3230      	adds	r2, #48	; 0x30
 80060a8:	3301      	adds	r3, #1
 80060aa:	f105 3aff 	add.w	sl, r5, #4294967295
 80060ae:	f805 2c01 	strb.w	r2, [r5, #-1]
 80060b2:	9309      	str	r3, [sp, #36]	; 0x24
 80060b4:	f1b8 0f00 	cmp.w	r8, #0
 80060b8:	d019      	beq.n	80060ee <_svfprintf_r+0xbde>
 80060ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d114      	bne.n	80060ee <_svfprintf_r+0xbde>
 80060c4:	2aff      	cmp	r2, #255	; 0xff
 80060c6:	d012      	beq.n	80060ee <_svfprintf_r+0xbde>
 80060c8:	2e0a      	cmp	r6, #10
 80060ca:	f177 0300 	sbcs.w	r3, r7, #0
 80060ce:	d30e      	bcc.n	80060ee <_svfprintf_r+0xbde>
 80060d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060d4:	ebaa 0a03 	sub.w	sl, sl, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	4650      	mov	r0, sl
 80060dc:	f002 f948 	bl	8008370 <strncpy>
 80060e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e2:	785d      	ldrb	r5, [r3, #1]
 80060e4:	b195      	cbz	r5, 800610c <_svfprintf_r+0xbfc>
 80060e6:	3301      	adds	r3, #1
 80060e8:	930d      	str	r3, [sp, #52]	; 0x34
 80060ea:	2300      	movs	r3, #0
 80060ec:	9309      	str	r3, [sp, #36]	; 0x24
 80060ee:	2300      	movs	r3, #0
 80060f0:	220a      	movs	r2, #10
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa fd53 	bl	8000ba0 <__aeabi_uldivmod>
 80060fa:	2e0a      	cmp	r6, #10
 80060fc:	f177 0300 	sbcs.w	r3, r7, #0
 8006100:	f0c0 83c8 	bcc.w	8006894 <_svfprintf_r+0x1384>
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	4655      	mov	r5, sl
 800610a:	e7c5      	b.n	8006098 <_svfprintf_r+0xb88>
 800610c:	9509      	str	r5, [sp, #36]	; 0x24
 800610e:	e7ee      	b.n	80060ee <_svfprintf_r+0xbde>
 8006110:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006112:	f006 030f 	and.w	r3, r6, #15
 8006116:	5cd3      	ldrb	r3, [r2, r3]
 8006118:	0936      	lsrs	r6, r6, #4
 800611a:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800611e:	093f      	lsrs	r7, r7, #4
 8006120:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8006124:	ea56 0307 	orrs.w	r3, r6, r7
 8006128:	d1f2      	bne.n	8006110 <_svfprintf_r+0xc00>
 800612a:	e3b3      	b.n	8006894 <_svfprintf_r+0x1384>
 800612c:	b933      	cbnz	r3, 800613c <_svfprintf_r+0xc2c>
 800612e:	f018 0f01 	tst.w	r8, #1
 8006132:	d003      	beq.n	800613c <_svfprintf_r+0xc2c>
 8006134:	2330      	movs	r3, #48	; 0x30
 8006136:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 800613a:	e7a3      	b.n	8006084 <_svfprintf_r+0xb74>
 800613c:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8006140:	e3a8      	b.n	8006894 <_svfprintf_r+0x1384>
 8006142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8375 	beq.w	8006834 <_svfprintf_r+0x1324>
 800614a:	2000      	movs	r0, #0
 800614c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8006150:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8006154:	960b      	str	r6, [sp, #44]	; 0x2c
 8006156:	f7ff bb36 	b.w	80057c6 <_svfprintf_r+0x2b6>
 800615a:	9f08      	ldr	r7, [sp, #32]
 800615c:	f7ff bba1 	b.w	80058a2 <_svfprintf_r+0x392>
 8006160:	2010      	movs	r0, #16
 8006162:	2a07      	cmp	r2, #7
 8006164:	4403      	add	r3, r0
 8006166:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800616a:	6060      	str	r0, [r4, #4]
 800616c:	dd08      	ble.n	8006180 <_svfprintf_r+0xc70>
 800616e:	4659      	mov	r1, fp
 8006170:	4648      	mov	r0, r9
 8006172:	aa26      	add	r2, sp, #152	; 0x98
 8006174:	f002 f90f 	bl	8008396 <__ssprint_r>
 8006178:	2800      	cmp	r0, #0
 800617a:	f040 8339 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 800617e:	a929      	add	r1, sp, #164	; 0xa4
 8006180:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006182:	460c      	mov	r4, r1
 8006184:	3b10      	subs	r3, #16
 8006186:	9316      	str	r3, [sp, #88]	; 0x58
 8006188:	e4f4      	b.n	8005b74 <_svfprintf_r+0x664>
 800618a:	460c      	mov	r4, r1
 800618c:	e50e      	b.n	8005bac <_svfprintf_r+0x69c>
 800618e:	4659      	mov	r1, fp
 8006190:	4648      	mov	r0, r9
 8006192:	aa26      	add	r2, sp, #152	; 0x98
 8006194:	f002 f8ff 	bl	8008396 <__ssprint_r>
 8006198:	2800      	cmp	r0, #0
 800619a:	f040 8329 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 800619e:	ac29      	add	r4, sp, #164	; 0xa4
 80061a0:	e516      	b.n	8005bd0 <_svfprintf_r+0x6c0>
 80061a2:	4659      	mov	r1, fp
 80061a4:	4648      	mov	r0, r9
 80061a6:	aa26      	add	r2, sp, #152	; 0x98
 80061a8:	f002 f8f5 	bl	8008396 <__ssprint_r>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f040 831f 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80061b2:	ac29      	add	r4, sp, #164	; 0xa4
 80061b4:	e51c      	b.n	8005bf0 <_svfprintf_r+0x6e0>
 80061b6:	2010      	movs	r0, #16
 80061b8:	2a07      	cmp	r2, #7
 80061ba:	4403      	add	r3, r0
 80061bc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80061c0:	6060      	str	r0, [r4, #4]
 80061c2:	dd08      	ble.n	80061d6 <_svfprintf_r+0xcc6>
 80061c4:	4659      	mov	r1, fp
 80061c6:	4648      	mov	r0, r9
 80061c8:	aa26      	add	r2, sp, #152	; 0x98
 80061ca:	f002 f8e4 	bl	8008396 <__ssprint_r>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	f040 830e 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80061d4:	a929      	add	r1, sp, #164	; 0xa4
 80061d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061d8:	460c      	mov	r4, r1
 80061da:	3b10      	subs	r3, #16
 80061dc:	9316      	str	r3, [sp, #88]	; 0x58
 80061de:	e510      	b.n	8005c02 <_svfprintf_r+0x6f2>
 80061e0:	460c      	mov	r4, r1
 80061e2:	e52a      	b.n	8005c3a <_svfprintf_r+0x72a>
 80061e4:	2010      	movs	r0, #16
 80061e6:	2b07      	cmp	r3, #7
 80061e8:	4402      	add	r2, r0
 80061ea:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80061ee:	6060      	str	r0, [r4, #4]
 80061f0:	dd08      	ble.n	8006204 <_svfprintf_r+0xcf4>
 80061f2:	4659      	mov	r1, fp
 80061f4:	4648      	mov	r0, r9
 80061f6:	aa26      	add	r2, sp, #152	; 0x98
 80061f8:	f002 f8cd 	bl	8008396 <__ssprint_r>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f040 82f7 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8006202:	a929      	add	r1, sp, #164	; 0xa4
 8006204:	460c      	mov	r4, r1
 8006206:	3f10      	subs	r7, #16
 8006208:	e51b      	b.n	8005c42 <_svfprintf_r+0x732>
 800620a:	460c      	mov	r4, r1
 800620c:	e542      	b.n	8005c94 <_svfprintf_r+0x784>
 800620e:	bf00      	nop
 8006210:	0801f7c0 	.word	0x0801f7c0
 8006214:	0801f7d1 	.word	0x0801f7d1
 8006218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621a:	2b65      	cmp	r3, #101	; 0x65
 800621c:	f340 8230 	ble.w	8006680 <_svfprintf_r+0x1170>
 8006220:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006224:	2200      	movs	r2, #0
 8006226:	2300      	movs	r3, #0
 8006228:	f7fa fc2a 	bl	8000a80 <__aeabi_dcmpeq>
 800622c:	2800      	cmp	r0, #0
 800622e:	d068      	beq.n	8006302 <_svfprintf_r+0xdf2>
 8006230:	4b6d      	ldr	r3, [pc, #436]	; (80063e8 <_svfprintf_r+0xed8>)
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	2301      	movs	r3, #1
 8006236:	441f      	add	r7, r3
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800623c:	9728      	str	r7, [sp, #160]	; 0xa0
 800623e:	3301      	adds	r3, #1
 8006240:	2b07      	cmp	r3, #7
 8006242:	9327      	str	r3, [sp, #156]	; 0x9c
 8006244:	dc37      	bgt.n	80062b6 <_svfprintf_r+0xda6>
 8006246:	3408      	adds	r4, #8
 8006248:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800624a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800624c:	4293      	cmp	r3, r2
 800624e:	db03      	blt.n	8006258 <_svfprintf_r+0xd48>
 8006250:	f018 0f01 	tst.w	r8, #1
 8006254:	f43f ad30 	beq.w	8005cb8 <_svfprintf_r+0x7a8>
 8006258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800625a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006260:	6063      	str	r3, [r4, #4]
 8006262:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006264:	4413      	add	r3, r2
 8006266:	9328      	str	r3, [sp, #160]	; 0xa0
 8006268:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800626a:	3301      	adds	r3, #1
 800626c:	2b07      	cmp	r3, #7
 800626e:	9327      	str	r3, [sp, #156]	; 0x9c
 8006270:	dc2b      	bgt.n	80062ca <_svfprintf_r+0xdba>
 8006272:	3408      	adds	r4, #8
 8006274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006276:	1e5d      	subs	r5, r3, #1
 8006278:	2d00      	cmp	r5, #0
 800627a:	f77f ad1d 	ble.w	8005cb8 <_svfprintf_r+0x7a8>
 800627e:	2710      	movs	r7, #16
 8006280:	4e5a      	ldr	r6, [pc, #360]	; (80063ec <_svfprintf_r+0xedc>)
 8006282:	2d10      	cmp	r5, #16
 8006284:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006288:	f104 0108 	add.w	r1, r4, #8
 800628c:	f103 0301 	add.w	r3, r3, #1
 8006290:	6026      	str	r6, [r4, #0]
 8006292:	dc24      	bgt.n	80062de <_svfprintf_r+0xdce>
 8006294:	6065      	str	r5, [r4, #4]
 8006296:	2b07      	cmp	r3, #7
 8006298:	4415      	add	r5, r2
 800629a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800629e:	f340 8286 	ble.w	80067ae <_svfprintf_r+0x129e>
 80062a2:	4659      	mov	r1, fp
 80062a4:	4648      	mov	r0, r9
 80062a6:	aa26      	add	r2, sp, #152	; 0x98
 80062a8:	f002 f875 	bl	8008396 <__ssprint_r>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f040 829f 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80062b2:	ac29      	add	r4, sp, #164	; 0xa4
 80062b4:	e500      	b.n	8005cb8 <_svfprintf_r+0x7a8>
 80062b6:	4659      	mov	r1, fp
 80062b8:	4648      	mov	r0, r9
 80062ba:	aa26      	add	r2, sp, #152	; 0x98
 80062bc:	f002 f86b 	bl	8008396 <__ssprint_r>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	f040 8295 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80062c6:	ac29      	add	r4, sp, #164	; 0xa4
 80062c8:	e7be      	b.n	8006248 <_svfprintf_r+0xd38>
 80062ca:	4659      	mov	r1, fp
 80062cc:	4648      	mov	r0, r9
 80062ce:	aa26      	add	r2, sp, #152	; 0x98
 80062d0:	f002 f861 	bl	8008396 <__ssprint_r>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	f040 828b 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80062da:	ac29      	add	r4, sp, #164	; 0xa4
 80062dc:	e7ca      	b.n	8006274 <_svfprintf_r+0xd64>
 80062de:	3210      	adds	r2, #16
 80062e0:	2b07      	cmp	r3, #7
 80062e2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80062e6:	6067      	str	r7, [r4, #4]
 80062e8:	dd08      	ble.n	80062fc <_svfprintf_r+0xdec>
 80062ea:	4659      	mov	r1, fp
 80062ec:	4648      	mov	r0, r9
 80062ee:	aa26      	add	r2, sp, #152	; 0x98
 80062f0:	f002 f851 	bl	8008396 <__ssprint_r>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f040 827b 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80062fa:	a929      	add	r1, sp, #164	; 0xa4
 80062fc:	460c      	mov	r4, r1
 80062fe:	3d10      	subs	r5, #16
 8006300:	e7bf      	b.n	8006282 <_svfprintf_r+0xd72>
 8006302:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006304:	2b00      	cmp	r3, #0
 8006306:	dc73      	bgt.n	80063f0 <_svfprintf_r+0xee0>
 8006308:	4b37      	ldr	r3, [pc, #220]	; (80063e8 <_svfprintf_r+0xed8>)
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	2301      	movs	r3, #1
 800630e:	441f      	add	r7, r3
 8006310:	6063      	str	r3, [r4, #4]
 8006312:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006314:	9728      	str	r7, [sp, #160]	; 0xa0
 8006316:	3301      	adds	r3, #1
 8006318:	2b07      	cmp	r3, #7
 800631a:	9327      	str	r3, [sp, #156]	; 0x9c
 800631c:	dc3d      	bgt.n	800639a <_svfprintf_r+0xe8a>
 800631e:	3408      	adds	r4, #8
 8006320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006322:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006324:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006326:	430a      	orrs	r2, r1
 8006328:	f008 0101 	and.w	r1, r8, #1
 800632c:	430a      	orrs	r2, r1
 800632e:	f43f acc3 	beq.w	8005cb8 <_svfprintf_r+0x7a8>
 8006332:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006334:	6022      	str	r2, [r4, #0]
 8006336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006338:	4413      	add	r3, r2
 800633a:	9328      	str	r3, [sp, #160]	; 0xa0
 800633c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800633e:	6062      	str	r2, [r4, #4]
 8006340:	3301      	adds	r3, #1
 8006342:	2b07      	cmp	r3, #7
 8006344:	9327      	str	r3, [sp, #156]	; 0x9c
 8006346:	dc32      	bgt.n	80063ae <_svfprintf_r+0xe9e>
 8006348:	3408      	adds	r4, #8
 800634a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800634c:	2d00      	cmp	r5, #0
 800634e:	da1b      	bge.n	8006388 <_svfprintf_r+0xe78>
 8006350:	4623      	mov	r3, r4
 8006352:	2710      	movs	r7, #16
 8006354:	4e25      	ldr	r6, [pc, #148]	; (80063ec <_svfprintf_r+0xedc>)
 8006356:	426d      	negs	r5, r5
 8006358:	2d10      	cmp	r5, #16
 800635a:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800635e:	f104 0408 	add.w	r4, r4, #8
 8006362:	f102 0201 	add.w	r2, r2, #1
 8006366:	601e      	str	r6, [r3, #0]
 8006368:	dc2b      	bgt.n	80063c2 <_svfprintf_r+0xeb2>
 800636a:	605d      	str	r5, [r3, #4]
 800636c:	2a07      	cmp	r2, #7
 800636e:	440d      	add	r5, r1
 8006370:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8006374:	dd08      	ble.n	8006388 <_svfprintf_r+0xe78>
 8006376:	4659      	mov	r1, fp
 8006378:	4648      	mov	r0, r9
 800637a:	aa26      	add	r2, sp, #152	; 0x98
 800637c:	f002 f80b 	bl	8008396 <__ssprint_r>
 8006380:	2800      	cmp	r0, #0
 8006382:	f040 8235 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8006386:	ac29      	add	r4, sp, #164	; 0xa4
 8006388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800638c:	6063      	str	r3, [r4, #4]
 800638e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006390:	f8c4 a000 	str.w	sl, [r4]
 8006394:	4413      	add	r3, r2
 8006396:	9328      	str	r3, [sp, #160]	; 0xa0
 8006398:	e487      	b.n	8005caa <_svfprintf_r+0x79a>
 800639a:	4659      	mov	r1, fp
 800639c:	4648      	mov	r0, r9
 800639e:	aa26      	add	r2, sp, #152	; 0x98
 80063a0:	f001 fff9 	bl	8008396 <__ssprint_r>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 8223 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80063aa:	ac29      	add	r4, sp, #164	; 0xa4
 80063ac:	e7b8      	b.n	8006320 <_svfprintf_r+0xe10>
 80063ae:	4659      	mov	r1, fp
 80063b0:	4648      	mov	r0, r9
 80063b2:	aa26      	add	r2, sp, #152	; 0x98
 80063b4:	f001 ffef 	bl	8008396 <__ssprint_r>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f040 8219 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80063be:	ac29      	add	r4, sp, #164	; 0xa4
 80063c0:	e7c3      	b.n	800634a <_svfprintf_r+0xe3a>
 80063c2:	3110      	adds	r1, #16
 80063c4:	2a07      	cmp	r2, #7
 80063c6:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 80063ca:	605f      	str	r7, [r3, #4]
 80063cc:	dd08      	ble.n	80063e0 <_svfprintf_r+0xed0>
 80063ce:	4659      	mov	r1, fp
 80063d0:	4648      	mov	r0, r9
 80063d2:	aa26      	add	r2, sp, #152	; 0x98
 80063d4:	f001 ffdf 	bl	8008396 <__ssprint_r>
 80063d8:	2800      	cmp	r0, #0
 80063da:	f040 8209 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80063de:	ac29      	add	r4, sp, #164	; 0xa4
 80063e0:	4623      	mov	r3, r4
 80063e2:	3d10      	subs	r5, #16
 80063e4:	e7b8      	b.n	8006358 <_svfprintf_r+0xe48>
 80063e6:	bf00      	nop
 80063e8:	0801f7e2 	.word	0x0801f7e2
 80063ec:	0801f7f4 	.word	0x0801f7f4
 80063f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f2:	42ab      	cmp	r3, r5
 80063f4:	bfa8      	it	ge
 80063f6:	462b      	movge	r3, r5
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	9307      	str	r3, [sp, #28]
 80063fc:	dd0a      	ble.n	8006414 <_svfprintf_r+0xf04>
 80063fe:	441f      	add	r7, r3
 8006400:	e9c4 a300 	strd	sl, r3, [r4]
 8006404:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006406:	9728      	str	r7, [sp, #160]	; 0xa0
 8006408:	3301      	adds	r3, #1
 800640a:	2b07      	cmp	r3, #7
 800640c:	9327      	str	r3, [sp, #156]	; 0x9c
 800640e:	f300 8085 	bgt.w	800651c <_svfprintf_r+0x100c>
 8006412:	3408      	adds	r4, #8
 8006414:	9b07      	ldr	r3, [sp, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	bfb4      	ite	lt
 800641a:	462f      	movlt	r7, r5
 800641c:	1aef      	subge	r7, r5, r3
 800641e:	2f00      	cmp	r7, #0
 8006420:	dd19      	ble.n	8006456 <_svfprintf_r+0xf46>
 8006422:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006426:	4895      	ldr	r0, [pc, #596]	; (800667c <_svfprintf_r+0x116c>)
 8006428:	2f10      	cmp	r7, #16
 800642a:	f103 0301 	add.w	r3, r3, #1
 800642e:	f104 0108 	add.w	r1, r4, #8
 8006432:	6020      	str	r0, [r4, #0]
 8006434:	dc7c      	bgt.n	8006530 <_svfprintf_r+0x1020>
 8006436:	6067      	str	r7, [r4, #4]
 8006438:	2b07      	cmp	r3, #7
 800643a:	4417      	add	r7, r2
 800643c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8006440:	f340 8089 	ble.w	8006556 <_svfprintf_r+0x1046>
 8006444:	4659      	mov	r1, fp
 8006446:	4648      	mov	r0, r9
 8006448:	aa26      	add	r2, sp, #152	; 0x98
 800644a:	f001 ffa4 	bl	8008396 <__ssprint_r>
 800644e:	2800      	cmp	r0, #0
 8006450:	f040 81ce 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8006454:	ac29      	add	r4, sp, #164	; 0xa4
 8006456:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800645a:	4455      	add	r5, sl
 800645c:	d009      	beq.n	8006472 <_svfprintf_r+0xf62>
 800645e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006460:	2b00      	cmp	r3, #0
 8006462:	d17a      	bne.n	800655a <_svfprintf_r+0x104a>
 8006464:	2e00      	cmp	r6, #0
 8006466:	d17a      	bne.n	800655e <_svfprintf_r+0x104e>
 8006468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646a:	4453      	add	r3, sl
 800646c:	429d      	cmp	r5, r3
 800646e:	bf28      	it	cs
 8006470:	461d      	movcs	r5, r3
 8006472:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006476:	4293      	cmp	r3, r2
 8006478:	db02      	blt.n	8006480 <_svfprintf_r+0xf70>
 800647a:	f018 0f01 	tst.w	r8, #1
 800647e:	d00e      	beq.n	800649e <_svfprintf_r+0xf8e>
 8006480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006482:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006488:	6063      	str	r3, [r4, #4]
 800648a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800648c:	4413      	add	r3, r2
 800648e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006490:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006492:	3301      	adds	r3, #1
 8006494:	2b07      	cmp	r3, #7
 8006496:	9327      	str	r3, [sp, #156]	; 0x9c
 8006498:	f300 80db 	bgt.w	8006652 <_svfprintf_r+0x1142>
 800649c:	3408      	adds	r4, #8
 800649e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80064a2:	eb0a 0203 	add.w	r2, sl, r3
 80064a6:	1b9e      	subs	r6, r3, r6
 80064a8:	1b52      	subs	r2, r2, r5
 80064aa:	4296      	cmp	r6, r2
 80064ac:	bfa8      	it	ge
 80064ae:	4616      	movge	r6, r2
 80064b0:	2e00      	cmp	r6, #0
 80064b2:	dd0b      	ble.n	80064cc <_svfprintf_r+0xfbc>
 80064b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80064b6:	e9c4 5600 	strd	r5, r6, [r4]
 80064ba:	4433      	add	r3, r6
 80064bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80064be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80064c0:	3301      	adds	r3, #1
 80064c2:	2b07      	cmp	r3, #7
 80064c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80064c6:	f300 80ce 	bgt.w	8006666 <_svfprintf_r+0x1156>
 80064ca:	3408      	adds	r4, #8
 80064cc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80064ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	eba3 0505 	sub.w	r5, r3, r5
 80064d6:	bfa8      	it	ge
 80064d8:	1bad      	subge	r5, r5, r6
 80064da:	2d00      	cmp	r5, #0
 80064dc:	f77f abec 	ble.w	8005cb8 <_svfprintf_r+0x7a8>
 80064e0:	2710      	movs	r7, #16
 80064e2:	4e66      	ldr	r6, [pc, #408]	; (800667c <_svfprintf_r+0x116c>)
 80064e4:	2d10      	cmp	r5, #16
 80064e6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80064ea:	f104 0108 	add.w	r1, r4, #8
 80064ee:	f103 0301 	add.w	r3, r3, #1
 80064f2:	6026      	str	r6, [r4, #0]
 80064f4:	f77f aece 	ble.w	8006294 <_svfprintf_r+0xd84>
 80064f8:	3210      	adds	r2, #16
 80064fa:	2b07      	cmp	r3, #7
 80064fc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006500:	6067      	str	r7, [r4, #4]
 8006502:	dd08      	ble.n	8006516 <_svfprintf_r+0x1006>
 8006504:	4659      	mov	r1, fp
 8006506:	4648      	mov	r0, r9
 8006508:	aa26      	add	r2, sp, #152	; 0x98
 800650a:	f001 ff44 	bl	8008396 <__ssprint_r>
 800650e:	2800      	cmp	r0, #0
 8006510:	f040 816e 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8006514:	a929      	add	r1, sp, #164	; 0xa4
 8006516:	460c      	mov	r4, r1
 8006518:	3d10      	subs	r5, #16
 800651a:	e7e3      	b.n	80064e4 <_svfprintf_r+0xfd4>
 800651c:	4659      	mov	r1, fp
 800651e:	4648      	mov	r0, r9
 8006520:	aa26      	add	r2, sp, #152	; 0x98
 8006522:	f001 ff38 	bl	8008396 <__ssprint_r>
 8006526:	2800      	cmp	r0, #0
 8006528:	f040 8162 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 800652c:	ac29      	add	r4, sp, #164	; 0xa4
 800652e:	e771      	b.n	8006414 <_svfprintf_r+0xf04>
 8006530:	2010      	movs	r0, #16
 8006532:	2b07      	cmp	r3, #7
 8006534:	4402      	add	r2, r0
 8006536:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800653a:	6060      	str	r0, [r4, #4]
 800653c:	dd08      	ble.n	8006550 <_svfprintf_r+0x1040>
 800653e:	4659      	mov	r1, fp
 8006540:	4648      	mov	r0, r9
 8006542:	aa26      	add	r2, sp, #152	; 0x98
 8006544:	f001 ff27 	bl	8008396 <__ssprint_r>
 8006548:	2800      	cmp	r0, #0
 800654a:	f040 8151 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 800654e:	a929      	add	r1, sp, #164	; 0xa4
 8006550:	460c      	mov	r4, r1
 8006552:	3f10      	subs	r7, #16
 8006554:	e765      	b.n	8006422 <_svfprintf_r+0xf12>
 8006556:	460c      	mov	r4, r1
 8006558:	e77d      	b.n	8006456 <_svfprintf_r+0xf46>
 800655a:	2e00      	cmp	r6, #0
 800655c:	d049      	beq.n	80065f2 <_svfprintf_r+0x10e2>
 800655e:	3e01      	subs	r6, #1
 8006560:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006562:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800656c:	4413      	add	r3, r2
 800656e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006570:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006572:	3301      	adds	r3, #1
 8006574:	2b07      	cmp	r3, #7
 8006576:	9327      	str	r3, [sp, #156]	; 0x9c
 8006578:	dc42      	bgt.n	8006600 <_svfprintf_r+0x10f0>
 800657a:	3408      	adds	r4, #8
 800657c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006580:	4453      	add	r3, sl
 8006582:	7812      	ldrb	r2, [r2, #0]
 8006584:	1b5b      	subs	r3, r3, r5
 8006586:	429a      	cmp	r2, r3
 8006588:	bfa8      	it	ge
 800658a:	461a      	movge	r2, r3
 800658c:	2a00      	cmp	r2, #0
 800658e:	9207      	str	r2, [sp, #28]
 8006590:	dd0a      	ble.n	80065a8 <_svfprintf_r+0x1098>
 8006592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006594:	e9c4 5200 	strd	r5, r2, [r4]
 8006598:	4413      	add	r3, r2
 800659a:	9328      	str	r3, [sp, #160]	; 0xa0
 800659c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800659e:	3301      	adds	r3, #1
 80065a0:	2b07      	cmp	r3, #7
 80065a2:	9327      	str	r3, [sp, #156]	; 0x9c
 80065a4:	dc36      	bgt.n	8006614 <_svfprintf_r+0x1104>
 80065a6:	3408      	adds	r4, #8
 80065a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065aa:	781f      	ldrb	r7, [r3, #0]
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfa8      	it	ge
 80065b2:	1aff      	subge	r7, r7, r3
 80065b4:	2f00      	cmp	r7, #0
 80065b6:	dd18      	ble.n	80065ea <_svfprintf_r+0x10da>
 80065b8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80065bc:	482f      	ldr	r0, [pc, #188]	; (800667c <_svfprintf_r+0x116c>)
 80065be:	2f10      	cmp	r7, #16
 80065c0:	f103 0301 	add.w	r3, r3, #1
 80065c4:	f104 0108 	add.w	r1, r4, #8
 80065c8:	6020      	str	r0, [r4, #0]
 80065ca:	dc2d      	bgt.n	8006628 <_svfprintf_r+0x1118>
 80065cc:	443a      	add	r2, r7
 80065ce:	2b07      	cmp	r3, #7
 80065d0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80065d4:	6067      	str	r7, [r4, #4]
 80065d6:	dd3a      	ble.n	800664e <_svfprintf_r+0x113e>
 80065d8:	4659      	mov	r1, fp
 80065da:	4648      	mov	r0, r9
 80065dc:	aa26      	add	r2, sp, #152	; 0x98
 80065de:	f001 feda 	bl	8008396 <__ssprint_r>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f040 8104 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80065e8:	ac29      	add	r4, sp, #164	; 0xa4
 80065ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	441d      	add	r5, r3
 80065f0:	e735      	b.n	800645e <_svfprintf_r+0xf4e>
 80065f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f4:	3b01      	subs	r3, #1
 80065f6:	930d      	str	r3, [sp, #52]	; 0x34
 80065f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065fa:	3b01      	subs	r3, #1
 80065fc:	930c      	str	r3, [sp, #48]	; 0x30
 80065fe:	e7af      	b.n	8006560 <_svfprintf_r+0x1050>
 8006600:	4659      	mov	r1, fp
 8006602:	4648      	mov	r0, r9
 8006604:	aa26      	add	r2, sp, #152	; 0x98
 8006606:	f001 fec6 	bl	8008396 <__ssprint_r>
 800660a:	2800      	cmp	r0, #0
 800660c:	f040 80f0 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8006610:	ac29      	add	r4, sp, #164	; 0xa4
 8006612:	e7b3      	b.n	800657c <_svfprintf_r+0x106c>
 8006614:	4659      	mov	r1, fp
 8006616:	4648      	mov	r0, r9
 8006618:	aa26      	add	r2, sp, #152	; 0x98
 800661a:	f001 febc 	bl	8008396 <__ssprint_r>
 800661e:	2800      	cmp	r0, #0
 8006620:	f040 80e6 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8006624:	ac29      	add	r4, sp, #164	; 0xa4
 8006626:	e7bf      	b.n	80065a8 <_svfprintf_r+0x1098>
 8006628:	2010      	movs	r0, #16
 800662a:	2b07      	cmp	r3, #7
 800662c:	4402      	add	r2, r0
 800662e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006632:	6060      	str	r0, [r4, #4]
 8006634:	dd08      	ble.n	8006648 <_svfprintf_r+0x1138>
 8006636:	4659      	mov	r1, fp
 8006638:	4648      	mov	r0, r9
 800663a:	aa26      	add	r2, sp, #152	; 0x98
 800663c:	f001 feab 	bl	8008396 <__ssprint_r>
 8006640:	2800      	cmp	r0, #0
 8006642:	f040 80d5 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8006646:	a929      	add	r1, sp, #164	; 0xa4
 8006648:	460c      	mov	r4, r1
 800664a:	3f10      	subs	r7, #16
 800664c:	e7b4      	b.n	80065b8 <_svfprintf_r+0x10a8>
 800664e:	460c      	mov	r4, r1
 8006650:	e7cb      	b.n	80065ea <_svfprintf_r+0x10da>
 8006652:	4659      	mov	r1, fp
 8006654:	4648      	mov	r0, r9
 8006656:	aa26      	add	r2, sp, #152	; 0x98
 8006658:	f001 fe9d 	bl	8008396 <__ssprint_r>
 800665c:	2800      	cmp	r0, #0
 800665e:	f040 80c7 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8006662:	ac29      	add	r4, sp, #164	; 0xa4
 8006664:	e71b      	b.n	800649e <_svfprintf_r+0xf8e>
 8006666:	4659      	mov	r1, fp
 8006668:	4648      	mov	r0, r9
 800666a:	aa26      	add	r2, sp, #152	; 0x98
 800666c:	f001 fe93 	bl	8008396 <__ssprint_r>
 8006670:	2800      	cmp	r0, #0
 8006672:	f040 80bd 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 8006676:	ac29      	add	r4, sp, #164	; 0xa4
 8006678:	e728      	b.n	80064cc <_svfprintf_r+0xfbc>
 800667a:	bf00      	nop
 800667c:	0801f7f4 	.word	0x0801f7f4
 8006680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006682:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006684:	2a01      	cmp	r2, #1
 8006686:	f107 0701 	add.w	r7, r7, #1
 800668a:	f103 0301 	add.w	r3, r3, #1
 800668e:	f104 0508 	add.w	r5, r4, #8
 8006692:	dc02      	bgt.n	800669a <_svfprintf_r+0x118a>
 8006694:	f018 0f01 	tst.w	r8, #1
 8006698:	d07e      	beq.n	8006798 <_svfprintf_r+0x1288>
 800669a:	2201      	movs	r2, #1
 800669c:	2b07      	cmp	r3, #7
 800669e:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 80066a2:	f8c4 a000 	str.w	sl, [r4]
 80066a6:	6062      	str	r2, [r4, #4]
 80066a8:	dd08      	ble.n	80066bc <_svfprintf_r+0x11ac>
 80066aa:	4659      	mov	r1, fp
 80066ac:	4648      	mov	r0, r9
 80066ae:	aa26      	add	r2, sp, #152	; 0x98
 80066b0:	f001 fe71 	bl	8008396 <__ssprint_r>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f040 809b 	bne.w	80067f0 <_svfprintf_r+0x12e0>
 80066ba:	ad29      	add	r5, sp, #164	; 0xa4
 80066bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066c4:	606b      	str	r3, [r5, #4]
 80066c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80066c8:	4413      	add	r3, r2
 80066ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80066cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80066ce:	3301      	adds	r3, #1
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	9327      	str	r3, [sp, #156]	; 0x9c
 80066d4:	dc32      	bgt.n	800673c <_svfprintf_r+0x122c>
 80066d6:	3508      	adds	r5, #8
 80066d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066da:	2200      	movs	r2, #0
 80066dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066e0:	1e5c      	subs	r4, r3, #1
 80066e2:	2300      	movs	r3, #0
 80066e4:	f7fa f9cc 	bl	8000a80 <__aeabi_dcmpeq>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d130      	bne.n	800674e <_svfprintf_r+0x123e>
 80066ec:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80066ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80066f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f2:	3101      	adds	r1, #1
 80066f4:	3b01      	subs	r3, #1
 80066f6:	f10a 0001 	add.w	r0, sl, #1
 80066fa:	4413      	add	r3, r2
 80066fc:	2907      	cmp	r1, #7
 80066fe:	e9c5 0400 	strd	r0, r4, [r5]
 8006702:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 8006706:	dd50      	ble.n	80067aa <_svfprintf_r+0x129a>
 8006708:	4659      	mov	r1, fp
 800670a:	4648      	mov	r0, r9
 800670c:	aa26      	add	r2, sp, #152	; 0x98
 800670e:	f001 fe42 	bl	8008396 <__ssprint_r>
 8006712:	2800      	cmp	r0, #0
 8006714:	d16c      	bne.n	80067f0 <_svfprintf_r+0x12e0>
 8006716:	ad29      	add	r5, sp, #164	; 0xa4
 8006718:	ab22      	add	r3, sp, #136	; 0x88
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800671e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006720:	606b      	str	r3, [r5, #4]
 8006722:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006724:	4413      	add	r3, r2
 8006726:	9328      	str	r3, [sp, #160]	; 0xa0
 8006728:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800672a:	3301      	adds	r3, #1
 800672c:	2b07      	cmp	r3, #7
 800672e:	9327      	str	r3, [sp, #156]	; 0x9c
 8006730:	f73f adb7 	bgt.w	80062a2 <_svfprintf_r+0xd92>
 8006734:	f105 0408 	add.w	r4, r5, #8
 8006738:	f7ff babe 	b.w	8005cb8 <_svfprintf_r+0x7a8>
 800673c:	4659      	mov	r1, fp
 800673e:	4648      	mov	r0, r9
 8006740:	aa26      	add	r2, sp, #152	; 0x98
 8006742:	f001 fe28 	bl	8008396 <__ssprint_r>
 8006746:	2800      	cmp	r0, #0
 8006748:	d152      	bne.n	80067f0 <_svfprintf_r+0x12e0>
 800674a:	ad29      	add	r5, sp, #164	; 0xa4
 800674c:	e7c4      	b.n	80066d8 <_svfprintf_r+0x11c8>
 800674e:	2c00      	cmp	r4, #0
 8006750:	dde2      	ble.n	8006718 <_svfprintf_r+0x1208>
 8006752:	2710      	movs	r7, #16
 8006754:	4e56      	ldr	r6, [pc, #344]	; (80068b0 <_svfprintf_r+0x13a0>)
 8006756:	2c10      	cmp	r4, #16
 8006758:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800675c:	f105 0108 	add.w	r1, r5, #8
 8006760:	f103 0301 	add.w	r3, r3, #1
 8006764:	602e      	str	r6, [r5, #0]
 8006766:	dc07      	bgt.n	8006778 <_svfprintf_r+0x1268>
 8006768:	606c      	str	r4, [r5, #4]
 800676a:	2b07      	cmp	r3, #7
 800676c:	4414      	add	r4, r2
 800676e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8006772:	dcc9      	bgt.n	8006708 <_svfprintf_r+0x11f8>
 8006774:	460d      	mov	r5, r1
 8006776:	e7cf      	b.n	8006718 <_svfprintf_r+0x1208>
 8006778:	3210      	adds	r2, #16
 800677a:	2b07      	cmp	r3, #7
 800677c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006780:	606f      	str	r7, [r5, #4]
 8006782:	dd06      	ble.n	8006792 <_svfprintf_r+0x1282>
 8006784:	4659      	mov	r1, fp
 8006786:	4648      	mov	r0, r9
 8006788:	aa26      	add	r2, sp, #152	; 0x98
 800678a:	f001 fe04 	bl	8008396 <__ssprint_r>
 800678e:	bb78      	cbnz	r0, 80067f0 <_svfprintf_r+0x12e0>
 8006790:	a929      	add	r1, sp, #164	; 0xa4
 8006792:	460d      	mov	r5, r1
 8006794:	3c10      	subs	r4, #16
 8006796:	e7de      	b.n	8006756 <_svfprintf_r+0x1246>
 8006798:	2201      	movs	r2, #1
 800679a:	2b07      	cmp	r3, #7
 800679c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 80067a0:	f8c4 a000 	str.w	sl, [r4]
 80067a4:	6062      	str	r2, [r4, #4]
 80067a6:	ddb7      	ble.n	8006718 <_svfprintf_r+0x1208>
 80067a8:	e7ae      	b.n	8006708 <_svfprintf_r+0x11f8>
 80067aa:	3508      	adds	r5, #8
 80067ac:	e7b4      	b.n	8006718 <_svfprintf_r+0x1208>
 80067ae:	460c      	mov	r4, r1
 80067b0:	f7ff ba82 	b.w	8005cb8 <_svfprintf_r+0x7a8>
 80067b4:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 80067b8:	1a9d      	subs	r5, r3, r2
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	f77f aa80 	ble.w	8005cc0 <_svfprintf_r+0x7b0>
 80067c0:	2710      	movs	r7, #16
 80067c2:	4e3c      	ldr	r6, [pc, #240]	; (80068b4 <_svfprintf_r+0x13a4>)
 80067c4:	2d10      	cmp	r5, #16
 80067c6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80067ca:	6026      	str	r6, [r4, #0]
 80067cc:	f103 0301 	add.w	r3, r3, #1
 80067d0:	dc18      	bgt.n	8006804 <_svfprintf_r+0x12f4>
 80067d2:	6065      	str	r5, [r4, #4]
 80067d4:	2b07      	cmp	r3, #7
 80067d6:	4415      	add	r5, r2
 80067d8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80067dc:	f77f aa70 	ble.w	8005cc0 <_svfprintf_r+0x7b0>
 80067e0:	4659      	mov	r1, fp
 80067e2:	4648      	mov	r0, r9
 80067e4:	aa26      	add	r2, sp, #152	; 0x98
 80067e6:	f001 fdd6 	bl	8008396 <__ssprint_r>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	f43f aa68 	beq.w	8005cc0 <_svfprintf_r+0x7b0>
 80067f0:	9b08      	ldr	r3, [sp, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f43f a88d 	beq.w	8005912 <_svfprintf_r+0x402>
 80067f8:	4619      	mov	r1, r3
 80067fa:	4648      	mov	r0, r9
 80067fc:	f000 ff14 	bl	8007628 <_free_r>
 8006800:	f7ff b887 	b.w	8005912 <_svfprintf_r+0x402>
 8006804:	3210      	adds	r2, #16
 8006806:	2b07      	cmp	r3, #7
 8006808:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800680c:	6067      	str	r7, [r4, #4]
 800680e:	dc02      	bgt.n	8006816 <_svfprintf_r+0x1306>
 8006810:	3408      	adds	r4, #8
 8006812:	3d10      	subs	r5, #16
 8006814:	e7d6      	b.n	80067c4 <_svfprintf_r+0x12b4>
 8006816:	4659      	mov	r1, fp
 8006818:	4648      	mov	r0, r9
 800681a:	aa26      	add	r2, sp, #152	; 0x98
 800681c:	f001 fdbb 	bl	8008396 <__ssprint_r>
 8006820:	2800      	cmp	r0, #0
 8006822:	d1e5      	bne.n	80067f0 <_svfprintf_r+0x12e0>
 8006824:	ac29      	add	r4, sp, #164	; 0xa4
 8006826:	e7f4      	b.n	8006812 <_svfprintf_r+0x1302>
 8006828:	4648      	mov	r0, r9
 800682a:	9908      	ldr	r1, [sp, #32]
 800682c:	f000 fefc 	bl	8007628 <_free_r>
 8006830:	f7ff ba5e 	b.w	8005cf0 <_svfprintf_r+0x7e0>
 8006834:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006836:	2b00      	cmp	r3, #0
 8006838:	f43f a86b 	beq.w	8005912 <_svfprintf_r+0x402>
 800683c:	4659      	mov	r1, fp
 800683e:	4648      	mov	r0, r9
 8006840:	aa26      	add	r2, sp, #152	; 0x98
 8006842:	f001 fda8 	bl	8008396 <__ssprint_r>
 8006846:	f7ff b864 	b.w	8005912 <_svfprintf_r+0x402>
 800684a:	ea56 0207 	orrs.w	r2, r6, r7
 800684e:	f8cd 8020 	str.w	r8, [sp, #32]
 8006852:	f43f ab70 	beq.w	8005f36 <_svfprintf_r+0xa26>
 8006856:	2b01      	cmp	r3, #1
 8006858:	f43f ac0d 	beq.w	8006076 <_svfprintf_r+0xb66>
 800685c:	2b02      	cmp	r3, #2
 800685e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8006862:	f43f ac55 	beq.w	8006110 <_svfprintf_r+0xc00>
 8006866:	f006 0307 	and.w	r3, r6, #7
 800686a:	08f6      	lsrs	r6, r6, #3
 800686c:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8006870:	08ff      	lsrs	r7, r7, #3
 8006872:	3330      	adds	r3, #48	; 0x30
 8006874:	ea56 0107 	orrs.w	r1, r6, r7
 8006878:	4652      	mov	r2, sl
 800687a:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800687e:	d1f2      	bne.n	8006866 <_svfprintf_r+0x1356>
 8006880:	9908      	ldr	r1, [sp, #32]
 8006882:	07c9      	lsls	r1, r1, #31
 8006884:	d506      	bpl.n	8006894 <_svfprintf_r+0x1384>
 8006886:	2b30      	cmp	r3, #48	; 0x30
 8006888:	d004      	beq.n	8006894 <_svfprintf_r+0x1384>
 800688a:	2330      	movs	r3, #48	; 0x30
 800688c:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8006890:	f1a2 0a02 	sub.w	sl, r2, #2
 8006894:	ab52      	add	r3, sp, #328	; 0x148
 8006896:	eba3 030a 	sub.w	r3, r3, sl
 800689a:	9f07      	ldr	r7, [sp, #28]
 800689c:	9307      	str	r3, [sp, #28]
 800689e:	2300      	movs	r3, #0
 80068a0:	461e      	mov	r6, r3
 80068a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068a6:	9308      	str	r3, [sp, #32]
 80068a8:	461d      	mov	r5, r3
 80068aa:	930c      	str	r3, [sp, #48]	; 0x30
 80068ac:	f7ff b946 	b.w	8005b3c <_svfprintf_r+0x62c>
 80068b0:	0801f7f4 	.word	0x0801f7f4
 80068b4:	0801f7e4 	.word	0x0801f7e4

080068b8 <register_fini>:
 80068b8:	4b02      	ldr	r3, [pc, #8]	; (80068c4 <register_fini+0xc>)
 80068ba:	b113      	cbz	r3, 80068c2 <register_fini+0xa>
 80068bc:	4802      	ldr	r0, [pc, #8]	; (80068c8 <register_fini+0x10>)
 80068be:	f000 b805 	b.w	80068cc <atexit>
 80068c2:	4770      	bx	lr
 80068c4:	00000000 	.word	0x00000000
 80068c8:	08007559 	.word	0x08007559

080068cc <atexit>:
 80068cc:	2300      	movs	r3, #0
 80068ce:	4601      	mov	r1, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 bde8 	b.w	80084a8 <__register_exitproc>

080068d8 <quorem>:
 80068d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	6903      	ldr	r3, [r0, #16]
 80068de:	690c      	ldr	r4, [r1, #16]
 80068e0:	4607      	mov	r7, r0
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	f2c0 8082 	blt.w	80069ec <quorem+0x114>
 80068e8:	3c01      	subs	r4, #1
 80068ea:	f100 0514 	add.w	r5, r0, #20
 80068ee:	f101 0814 	add.w	r8, r1, #20
 80068f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006900:	3301      	adds	r3, #1
 8006902:	429a      	cmp	r2, r3
 8006904:	fbb2 f6f3 	udiv	r6, r2, r3
 8006908:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800690c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006910:	d331      	bcc.n	8006976 <quorem+0x9e>
 8006912:	f04f 0e00 	mov.w	lr, #0
 8006916:	4640      	mov	r0, r8
 8006918:	46ac      	mov	ip, r5
 800691a:	46f2      	mov	sl, lr
 800691c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006920:	b293      	uxth	r3, r2
 8006922:	fb06 e303 	mla	r3, r6, r3, lr
 8006926:	0c12      	lsrs	r2, r2, #16
 8006928:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800692c:	b29b      	uxth	r3, r3
 800692e:	fb06 e202 	mla	r2, r6, r2, lr
 8006932:	ebaa 0303 	sub.w	r3, sl, r3
 8006936:	f8dc a000 	ldr.w	sl, [ip]
 800693a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800693e:	fa1f fa8a 	uxth.w	sl, sl
 8006942:	4453      	add	r3, sl
 8006944:	f8dc a000 	ldr.w	sl, [ip]
 8006948:	b292      	uxth	r2, r2
 800694a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800694e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006952:	b29b      	uxth	r3, r3
 8006954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006958:	4581      	cmp	r9, r0
 800695a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800695e:	f84c 3b04 	str.w	r3, [ip], #4
 8006962:	d2db      	bcs.n	800691c <quorem+0x44>
 8006964:	f855 300b 	ldr.w	r3, [r5, fp]
 8006968:	b92b      	cbnz	r3, 8006976 <quorem+0x9e>
 800696a:	9b01      	ldr	r3, [sp, #4]
 800696c:	3b04      	subs	r3, #4
 800696e:	429d      	cmp	r5, r3
 8006970:	461a      	mov	r2, r3
 8006972:	d32f      	bcc.n	80069d4 <quorem+0xfc>
 8006974:	613c      	str	r4, [r7, #16]
 8006976:	4638      	mov	r0, r7
 8006978:	f001 fbb2 	bl	80080e0 <__mcmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	db25      	blt.n	80069cc <quorem+0xf4>
 8006980:	4628      	mov	r0, r5
 8006982:	f04f 0c00 	mov.w	ip, #0
 8006986:	3601      	adds	r6, #1
 8006988:	f858 1b04 	ldr.w	r1, [r8], #4
 800698c:	f8d0 e000 	ldr.w	lr, [r0]
 8006990:	b28b      	uxth	r3, r1
 8006992:	ebac 0303 	sub.w	r3, ip, r3
 8006996:	fa1f f28e 	uxth.w	r2, lr
 800699a:	4413      	add	r3, r2
 800699c:	0c0a      	lsrs	r2, r1, #16
 800699e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ac:	45c1      	cmp	r9, r8
 80069ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069b2:	f840 3b04 	str.w	r3, [r0], #4
 80069b6:	d2e7      	bcs.n	8006988 <quorem+0xb0>
 80069b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069c0:	b922      	cbnz	r2, 80069cc <quorem+0xf4>
 80069c2:	3b04      	subs	r3, #4
 80069c4:	429d      	cmp	r5, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	d30a      	bcc.n	80069e0 <quorem+0x108>
 80069ca:	613c      	str	r4, [r7, #16]
 80069cc:	4630      	mov	r0, r6
 80069ce:	b003      	add	sp, #12
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	3b04      	subs	r3, #4
 80069d8:	2a00      	cmp	r2, #0
 80069da:	d1cb      	bne.n	8006974 <quorem+0x9c>
 80069dc:	3c01      	subs	r4, #1
 80069de:	e7c6      	b.n	800696e <quorem+0x96>
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	3b04      	subs	r3, #4
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	d1f0      	bne.n	80069ca <quorem+0xf2>
 80069e8:	3c01      	subs	r4, #1
 80069ea:	e7eb      	b.n	80069c4 <quorem+0xec>
 80069ec:	2000      	movs	r0, #0
 80069ee:	e7ee      	b.n	80069ce <quorem+0xf6>

080069f0 <_dtoa_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80069f6:	b097      	sub	sp, #92	; 0x5c
 80069f8:	4681      	mov	r9, r0
 80069fa:	4614      	mov	r4, r2
 80069fc:	461d      	mov	r5, r3
 80069fe:	4692      	mov	sl, r2
 8006a00:	469b      	mov	fp, r3
 8006a02:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8006a04:	b149      	cbz	r1, 8006a1a <_dtoa_r+0x2a>
 8006a06:	2301      	movs	r3, #1
 8006a08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a0a:	4093      	lsls	r3, r2
 8006a0c:	608b      	str	r3, [r1, #8]
 8006a0e:	604a      	str	r2, [r1, #4]
 8006a10:	f001 f95b 	bl	8007cca <_Bfree>
 8006a14:	2300      	movs	r3, #0
 8006a16:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8006a1a:	1e2b      	subs	r3, r5, #0
 8006a1c:	bfad      	iteet	ge
 8006a1e:	2300      	movge	r3, #0
 8006a20:	2201      	movlt	r2, #1
 8006a22:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006a26:	6033      	strge	r3, [r6, #0]
 8006a28:	4b9f      	ldr	r3, [pc, #636]	; (8006ca8 <_dtoa_r+0x2b8>)
 8006a2a:	bfb8      	it	lt
 8006a2c:	6032      	strlt	r2, [r6, #0]
 8006a2e:	ea33 030b 	bics.w	r3, r3, fp
 8006a32:	d119      	bne.n	8006a68 <_dtoa_r+0x78>
 8006a34:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a40:	4323      	orrs	r3, r4
 8006a42:	f000 8574 	beq.w	800752e <_dtoa_r+0xb3e>
 8006a46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a48:	b90b      	cbnz	r3, 8006a4e <_dtoa_r+0x5e>
 8006a4a:	4b98      	ldr	r3, [pc, #608]	; (8006cac <_dtoa_r+0x2bc>)
 8006a4c:	e020      	b.n	8006a90 <_dtoa_r+0xa0>
 8006a4e:	4b97      	ldr	r3, [pc, #604]	; (8006cac <_dtoa_r+0x2bc>)
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	3303      	adds	r3, #3
 8006a54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	9804      	ldr	r0, [sp, #16]
 8006a5a:	b017      	add	sp, #92	; 0x5c
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a60:	4b93      	ldr	r3, [pc, #588]	; (8006cb0 <_dtoa_r+0x2c0>)
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	3308      	adds	r3, #8
 8006a66:	e7f5      	b.n	8006a54 <_dtoa_r+0x64>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	4659      	mov	r1, fp
 8006a70:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8006a74:	f7fa f804 	bl	8000a80 <__aeabi_dcmpeq>
 8006a78:	4607      	mov	r7, r0
 8006a7a:	b158      	cbz	r0, 8006a94 <_dtoa_r+0xa4>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 854f 	beq.w	8007528 <_dtoa_r+0xb38>
 8006a8a:	488a      	ldr	r0, [pc, #552]	; (8006cb4 <_dtoa_r+0x2c4>)
 8006a8c:	6018      	str	r0, [r3, #0]
 8006a8e:	1e43      	subs	r3, r0, #1
 8006a90:	9304      	str	r3, [sp, #16]
 8006a92:	e7e1      	b.n	8006a58 <_dtoa_r+0x68>
 8006a94:	ab14      	add	r3, sp, #80	; 0x50
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	ab15      	add	r3, sp, #84	; 0x54
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	4648      	mov	r0, r9
 8006a9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006aa2:	f001 fbc5 	bl	8008230 <__d2b>
 8006aa6:	f3cb 560a 	ubfx	r6, fp, #20, #11
 8006aaa:	9003      	str	r0, [sp, #12]
 8006aac:	2e00      	cmp	r6, #0
 8006aae:	d07c      	beq.n	8006baa <_dtoa_r+0x1ba>
 8006ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8006aba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006abe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006ac2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006ac6:	9713      	str	r7, [sp, #76]	; 0x4c
 8006ac8:	2200      	movs	r2, #0
 8006aca:	4b7b      	ldr	r3, [pc, #492]	; (8006cb8 <_dtoa_r+0x2c8>)
 8006acc:	f7f9 fbb8 	bl	8000240 <__aeabi_dsub>
 8006ad0:	a36f      	add	r3, pc, #444	; (adr r3, 8006c90 <_dtoa_r+0x2a0>)
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	f7f9 fd6b 	bl	80005b0 <__aeabi_dmul>
 8006ada:	a36f      	add	r3, pc, #444	; (adr r3, 8006c98 <_dtoa_r+0x2a8>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fbb0 	bl	8000244 <__adddf3>
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	460d      	mov	r5, r1
 8006aea:	f7f9 fcf7 	bl	80004dc <__aeabi_i2d>
 8006aee:	a36c      	add	r3, pc, #432	; (adr r3, 8006ca0 <_dtoa_r+0x2b0>)
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f7f9 fd5c 	bl	80005b0 <__aeabi_dmul>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 fba0 	bl	8000244 <__adddf3>
 8006b04:	4604      	mov	r4, r0
 8006b06:	460d      	mov	r5, r1
 8006b08:	f7fa f802 	bl	8000b10 <__aeabi_d2iz>
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4680      	mov	r8, r0
 8006b10:	2300      	movs	r3, #0
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	f7f9 ffbd 	bl	8000a94 <__aeabi_dcmplt>
 8006b1a:	b148      	cbz	r0, 8006b30 <_dtoa_r+0x140>
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	f7f9 fcdd 	bl	80004dc <__aeabi_i2d>
 8006b22:	4622      	mov	r2, r4
 8006b24:	462b      	mov	r3, r5
 8006b26:	f7f9 ffab 	bl	8000a80 <__aeabi_dcmpeq>
 8006b2a:	b908      	cbnz	r0, 8006b30 <_dtoa_r+0x140>
 8006b2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b30:	f1b8 0f16 	cmp.w	r8, #22
 8006b34:	d856      	bhi.n	8006be4 <_dtoa_r+0x1f4>
 8006b36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b3a:	4b60      	ldr	r3, [pc, #384]	; (8006cbc <_dtoa_r+0x2cc>)
 8006b3c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	f7f9 ffa6 	bl	8000a94 <__aeabi_dcmplt>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d04d      	beq.n	8006be8 <_dtoa_r+0x1f8>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b52:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b56:	1b9e      	subs	r6, r3, r6
 8006b58:	1e73      	subs	r3, r6, #1
 8006b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b5c:	bf49      	itett	mi
 8006b5e:	f1c6 0301 	rsbmi	r3, r6, #1
 8006b62:	2300      	movpl	r3, #0
 8006b64:	9306      	strmi	r3, [sp, #24]
 8006b66:	2300      	movmi	r3, #0
 8006b68:	bf54      	ite	pl
 8006b6a:	9306      	strpl	r3, [sp, #24]
 8006b6c:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006b6e:	f1b8 0f00 	cmp.w	r8, #0
 8006b72:	db3b      	blt.n	8006bec <_dtoa_r+0x1fc>
 8006b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b76:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b7a:	4443      	add	r3, r8
 8006b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b7e:	2300      	movs	r3, #0
 8006b80:	930a      	str	r3, [sp, #40]	; 0x28
 8006b82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b84:	2b09      	cmp	r3, #9
 8006b86:	d86b      	bhi.n	8006c60 <_dtoa_r+0x270>
 8006b88:	2b05      	cmp	r3, #5
 8006b8a:	bfc4      	itt	gt
 8006b8c:	3b04      	subgt	r3, #4
 8006b8e:	9320      	strgt	r3, [sp, #128]	; 0x80
 8006b90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b92:	bfc8      	it	gt
 8006b94:	2400      	movgt	r4, #0
 8006b96:	f1a3 0302 	sub.w	r3, r3, #2
 8006b9a:	bfd8      	it	le
 8006b9c:	2401      	movle	r4, #1
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d869      	bhi.n	8006c76 <_dtoa_r+0x286>
 8006ba2:	e8df f003 	tbb	[pc, r3]
 8006ba6:	3a2d      	.short	0x3a2d
 8006ba8:	5b38      	.short	0x5b38
 8006baa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 8006bae:	441e      	add	r6, r3
 8006bb0:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	bfc3      	ittte	gt
 8006bb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bbc:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
 8006bc0:	fa0b f303 	lslgt.w	r3, fp, r3
 8006bc4:	f1c3 0320 	rsble	r3, r3, #32
 8006bc8:	bfc6      	itte	gt
 8006bca:	fa24 f000 	lsrgt.w	r0, r4, r0
 8006bce:	4318      	orrgt	r0, r3
 8006bd0:	fa04 f003 	lslle.w	r0, r4, r3
 8006bd4:	f7f9 fc72 	bl	80004bc <__aeabi_ui2d>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006bde:	3e01      	subs	r6, #1
 8006be0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006be2:	e771      	b.n	8006ac8 <_dtoa_r+0xd8>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e7b4      	b.n	8006b52 <_dtoa_r+0x162>
 8006be8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006bea:	e7b3      	b.n	8006b54 <_dtoa_r+0x164>
 8006bec:	9b06      	ldr	r3, [sp, #24]
 8006bee:	eba3 0308 	sub.w	r3, r3, r8
 8006bf2:	9306      	str	r3, [sp, #24]
 8006bf4:	f1c8 0300 	rsb	r3, r8, #0
 8006bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8006bfe:	e7c0      	b.n	8006b82 <_dtoa_r+0x192>
 8006c00:	2300      	movs	r3, #0
 8006c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	dc38      	bgt.n	8006c7c <_dtoa_r+0x28c>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	9308      	str	r3, [sp, #32]
 8006c10:	9305      	str	r3, [sp, #20]
 8006c12:	9221      	str	r2, [sp, #132]	; 0x84
 8006c14:	e00b      	b.n	8006c2e <_dtoa_r+0x23e>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e7f3      	b.n	8006c02 <_dtoa_r+0x212>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c20:	4443      	add	r3, r8
 8006c22:	9308      	str	r3, [sp, #32]
 8006c24:	3301      	adds	r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	9305      	str	r3, [sp, #20]
 8006c2a:	bfb8      	it	lt
 8006c2c:	2301      	movlt	r3, #1
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 8006c34:	2204      	movs	r2, #4
 8006c36:	f102 0014 	add.w	r0, r2, #20
 8006c3a:	4298      	cmp	r0, r3
 8006c3c:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8006c40:	d920      	bls.n	8006c84 <_dtoa_r+0x294>
 8006c42:	4648      	mov	r0, r9
 8006c44:	f001 f81c 	bl	8007c80 <_Balloc>
 8006c48:	9004      	str	r0, [sp, #16]
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d13c      	bne.n	8006cc8 <_dtoa_r+0x2d8>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c54:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <_dtoa_r+0x2d0>)
 8006c56:	481b      	ldr	r0, [pc, #108]	; (8006cc4 <_dtoa_r+0x2d4>)
 8006c58:	f001 fc68 	bl	800852c <__assert_func>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e7dd      	b.n	8006c1c <_dtoa_r+0x22c>
 8006c60:	2401      	movs	r4, #1
 8006c62:	2300      	movs	r3, #0
 8006c64:	940b      	str	r4, [sp, #44]	; 0x2c
 8006c66:	9320      	str	r3, [sp, #128]	; 0x80
 8006c68:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	9308      	str	r3, [sp, #32]
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	2312      	movs	r3, #18
 8006c74:	e7cd      	b.n	8006c12 <_dtoa_r+0x222>
 8006c76:	2301      	movs	r3, #1
 8006c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c7a:	e7f5      	b.n	8006c68 <_dtoa_r+0x278>
 8006c7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c7e:	9308      	str	r3, [sp, #32]
 8006c80:	9305      	str	r3, [sp, #20]
 8006c82:	e7d4      	b.n	8006c2e <_dtoa_r+0x23e>
 8006c84:	3101      	adds	r1, #1
 8006c86:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8006c8a:	0052      	lsls	r2, r2, #1
 8006c8c:	e7d3      	b.n	8006c36 <_dtoa_r+0x246>
 8006c8e:	bf00      	nop
 8006c90:	636f4361 	.word	0x636f4361
 8006c94:	3fd287a7 	.word	0x3fd287a7
 8006c98:	8b60c8b3 	.word	0x8b60c8b3
 8006c9c:	3fc68a28 	.word	0x3fc68a28
 8006ca0:	509f79fb 	.word	0x509f79fb
 8006ca4:	3fd34413 	.word	0x3fd34413
 8006ca8:	7ff00000 	.word	0x7ff00000
 8006cac:	0801f804 	.word	0x0801f804
 8006cb0:	0801f808 	.word	0x0801f808
 8006cb4:	0801f7e3 	.word	0x0801f7e3
 8006cb8:	3ff80000 	.word	0x3ff80000
 8006cbc:	0801f908 	.word	0x0801f908
 8006cc0:	0801f811 	.word	0x0801f811
 8006cc4:	0801f822 	.word	0x0801f822
 8006cc8:	9b04      	ldr	r3, [sp, #16]
 8006cca:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8006cce:	9b05      	ldr	r3, [sp, #20]
 8006cd0:	2b0e      	cmp	r3, #14
 8006cd2:	f200 80a1 	bhi.w	8006e18 <_dtoa_r+0x428>
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	f000 809e 	beq.w	8006e18 <_dtoa_r+0x428>
 8006cdc:	f1b8 0f00 	cmp.w	r8, #0
 8006ce0:	dd34      	ble.n	8006d4c <_dtoa_r+0x35c>
 8006ce2:	4a96      	ldr	r2, [pc, #600]	; (8006f3c <_dtoa_r+0x54c>)
 8006ce4:	f008 030f 	and.w	r3, r8, #15
 8006ce8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006cec:	f418 7f80 	tst.w	r8, #256	; 0x100
 8006cf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cf4:	ea4f 1528 	mov.w	r5, r8, asr #4
 8006cf8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006cfc:	d016      	beq.n	8006d2c <_dtoa_r+0x33c>
 8006cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d02:	4b8f      	ldr	r3, [pc, #572]	; (8006f40 <_dtoa_r+0x550>)
 8006d04:	2603      	movs	r6, #3
 8006d06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d0a:	f7f9 fd7b 	bl	8000804 <__aeabi_ddiv>
 8006d0e:	4682      	mov	sl, r0
 8006d10:	468b      	mov	fp, r1
 8006d12:	f005 050f 	and.w	r5, r5, #15
 8006d16:	4c8a      	ldr	r4, [pc, #552]	; (8006f40 <_dtoa_r+0x550>)
 8006d18:	b955      	cbnz	r5, 8006d30 <_dtoa_r+0x340>
 8006d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d1e:	4650      	mov	r0, sl
 8006d20:	4659      	mov	r1, fp
 8006d22:	f7f9 fd6f 	bl	8000804 <__aeabi_ddiv>
 8006d26:	4682      	mov	sl, r0
 8006d28:	468b      	mov	fp, r1
 8006d2a:	e028      	b.n	8006d7e <_dtoa_r+0x38e>
 8006d2c:	2602      	movs	r6, #2
 8006d2e:	e7f2      	b.n	8006d16 <_dtoa_r+0x326>
 8006d30:	07e9      	lsls	r1, r5, #31
 8006d32:	d508      	bpl.n	8006d46 <_dtoa_r+0x356>
 8006d34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d38:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d3c:	f7f9 fc38 	bl	80005b0 <__aeabi_dmul>
 8006d40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d44:	3601      	adds	r6, #1
 8006d46:	106d      	asrs	r5, r5, #1
 8006d48:	3408      	adds	r4, #8
 8006d4a:	e7e5      	b.n	8006d18 <_dtoa_r+0x328>
 8006d4c:	f000 809e 	beq.w	8006e8c <_dtoa_r+0x49c>
 8006d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d54:	f1c8 0400 	rsb	r4, r8, #0
 8006d58:	4b78      	ldr	r3, [pc, #480]	; (8006f3c <_dtoa_r+0x54c>)
 8006d5a:	f004 020f 	and.w	r2, r4, #15
 8006d5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f7f9 fc23 	bl	80005b0 <__aeabi_dmul>
 8006d6a:	2602      	movs	r6, #2
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	468b      	mov	fp, r1
 8006d70:	2300      	movs	r3, #0
 8006d72:	4d73      	ldr	r5, [pc, #460]	; (8006f40 <_dtoa_r+0x550>)
 8006d74:	1124      	asrs	r4, r4, #4
 8006d76:	2c00      	cmp	r4, #0
 8006d78:	d17d      	bne.n	8006e76 <_dtoa_r+0x486>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1d3      	bne.n	8006d26 <_dtoa_r+0x336>
 8006d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 8085 	beq.w	8006e90 <_dtoa_r+0x4a0>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4650      	mov	r0, sl
 8006d8a:	4659      	mov	r1, fp
 8006d8c:	4b6d      	ldr	r3, [pc, #436]	; (8006f44 <_dtoa_r+0x554>)
 8006d8e:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8006d92:	f7f9 fe7f 	bl	8000a94 <__aeabi_dcmplt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d07a      	beq.n	8006e90 <_dtoa_r+0x4a0>
 8006d9a:	9b05      	ldr	r3, [sp, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d077      	beq.n	8006e90 <_dtoa_r+0x4a0>
 8006da0:	9b08      	ldr	r3, [sp, #32]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	dd36      	ble.n	8006e14 <_dtoa_r+0x424>
 8006da6:	4650      	mov	r0, sl
 8006da8:	4659      	mov	r1, fp
 8006daa:	2200      	movs	r2, #0
 8006dac:	4b66      	ldr	r3, [pc, #408]	; (8006f48 <_dtoa_r+0x558>)
 8006dae:	f7f9 fbff 	bl	80005b0 <__aeabi_dmul>
 8006db2:	4682      	mov	sl, r0
 8006db4:	468b      	mov	fp, r1
 8006db6:	9c08      	ldr	r4, [sp, #32]
 8006db8:	f108 35ff 	add.w	r5, r8, #4294967295
 8006dbc:	3601      	adds	r6, #1
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f7f9 fb8c 	bl	80004dc <__aeabi_i2d>
 8006dc4:	4652      	mov	r2, sl
 8006dc6:	465b      	mov	r3, fp
 8006dc8:	f7f9 fbf2 	bl	80005b0 <__aeabi_dmul>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4b5f      	ldr	r3, [pc, #380]	; (8006f4c <_dtoa_r+0x55c>)
 8006dd0:	f7f9 fa38 	bl	8000244 <__adddf3>
 8006dd4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006dd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ddc:	9611      	str	r6, [sp, #68]	; 0x44
 8006dde:	2c00      	cmp	r4, #0
 8006de0:	d159      	bne.n	8006e96 <_dtoa_r+0x4a6>
 8006de2:	2200      	movs	r2, #0
 8006de4:	4650      	mov	r0, sl
 8006de6:	4659      	mov	r1, fp
 8006de8:	4b59      	ldr	r3, [pc, #356]	; (8006f50 <_dtoa_r+0x560>)
 8006dea:	f7f9 fa29 	bl	8000240 <__aeabi_dsub>
 8006dee:	4633      	mov	r3, r6
 8006df0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006df2:	4682      	mov	sl, r0
 8006df4:	468b      	mov	fp, r1
 8006df6:	f7f9 fe6b 	bl	8000ad0 <__aeabi_dcmpgt>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	f040 828b 	bne.w	8007316 <_dtoa_r+0x926>
 8006e00:	4650      	mov	r0, sl
 8006e02:	4659      	mov	r1, fp
 8006e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e0a:	f7f9 fe43 	bl	8000a94 <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f040 827f 	bne.w	8007312 <_dtoa_r+0x922>
 8006e14:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 8006e18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f2c0 814d 	blt.w	80070ba <_dtoa_r+0x6ca>
 8006e20:	f1b8 0f0e 	cmp.w	r8, #14
 8006e24:	f300 8149 	bgt.w	80070ba <_dtoa_r+0x6ca>
 8006e28:	4b44      	ldr	r3, [pc, #272]	; (8006f3c <_dtoa_r+0x54c>)
 8006e2a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006e2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e32:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f280 80d6 	bge.w	8006fea <_dtoa_r+0x5fa>
 8006e3e:	9b05      	ldr	r3, [sp, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f300 80d2 	bgt.w	8006fea <_dtoa_r+0x5fa>
 8006e46:	f040 8263 	bne.w	8007310 <_dtoa_r+0x920>
 8006e4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	4b3f      	ldr	r3, [pc, #252]	; (8006f50 <_dtoa_r+0x560>)
 8006e52:	f7f9 fbad 	bl	80005b0 <__aeabi_dmul>
 8006e56:	4652      	mov	r2, sl
 8006e58:	465b      	mov	r3, fp
 8006e5a:	f7f9 fe2f 	bl	8000abc <__aeabi_dcmpge>
 8006e5e:	9c05      	ldr	r4, [sp, #20]
 8006e60:	4625      	mov	r5, r4
 8006e62:	2800      	cmp	r0, #0
 8006e64:	f040 823c 	bne.w	80072e0 <_dtoa_r+0x8f0>
 8006e68:	2331      	movs	r3, #49	; 0x31
 8006e6a:	9e04      	ldr	r6, [sp, #16]
 8006e6c:	f108 0801 	add.w	r8, r8, #1
 8006e70:	f806 3b01 	strb.w	r3, [r6], #1
 8006e74:	e238      	b.n	80072e8 <_dtoa_r+0x8f8>
 8006e76:	07e2      	lsls	r2, r4, #31
 8006e78:	d505      	bpl.n	8006e86 <_dtoa_r+0x496>
 8006e7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e7e:	f7f9 fb97 	bl	80005b0 <__aeabi_dmul>
 8006e82:	2301      	movs	r3, #1
 8006e84:	3601      	adds	r6, #1
 8006e86:	1064      	asrs	r4, r4, #1
 8006e88:	3508      	adds	r5, #8
 8006e8a:	e774      	b.n	8006d76 <_dtoa_r+0x386>
 8006e8c:	2602      	movs	r6, #2
 8006e8e:	e776      	b.n	8006d7e <_dtoa_r+0x38e>
 8006e90:	4645      	mov	r5, r8
 8006e92:	9c05      	ldr	r4, [sp, #20]
 8006e94:	e793      	b.n	8006dbe <_dtoa_r+0x3ce>
 8006e96:	9904      	ldr	r1, [sp, #16]
 8006e98:	4b28      	ldr	r3, [pc, #160]	; (8006f3c <_dtoa_r+0x54c>)
 8006e9a:	4421      	add	r1, r4
 8006e9c:	9112      	str	r1, [sp, #72]	; 0x48
 8006e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ea0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ea4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ea8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d053      	beq.n	8006f58 <_dtoa_r+0x568>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	4928      	ldr	r1, [pc, #160]	; (8006f54 <_dtoa_r+0x564>)
 8006eb4:	f7f9 fca6 	bl	8000804 <__aeabi_ddiv>
 8006eb8:	4632      	mov	r2, r6
 8006eba:	463b      	mov	r3, r7
 8006ebc:	f7f9 f9c0 	bl	8000240 <__aeabi_dsub>
 8006ec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ec4:	9e04      	ldr	r6, [sp, #16]
 8006ec6:	4659      	mov	r1, fp
 8006ec8:	4650      	mov	r0, sl
 8006eca:	f7f9 fe21 	bl	8000b10 <__aeabi_d2iz>
 8006ece:	4604      	mov	r4, r0
 8006ed0:	f7f9 fb04 	bl	80004dc <__aeabi_i2d>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4650      	mov	r0, sl
 8006eda:	4659      	mov	r1, fp
 8006edc:	f7f9 f9b0 	bl	8000240 <__aeabi_dsub>
 8006ee0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ee4:	3430      	adds	r4, #48	; 0x30
 8006ee6:	f806 4b01 	strb.w	r4, [r6], #1
 8006eea:	4682      	mov	sl, r0
 8006eec:	468b      	mov	fp, r1
 8006eee:	f7f9 fdd1 	bl	8000a94 <__aeabi_dcmplt>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d171      	bne.n	8006fda <_dtoa_r+0x5ea>
 8006ef6:	4652      	mov	r2, sl
 8006ef8:	465b      	mov	r3, fp
 8006efa:	2000      	movs	r0, #0
 8006efc:	4911      	ldr	r1, [pc, #68]	; (8006f44 <_dtoa_r+0x554>)
 8006efe:	f7f9 f99f 	bl	8000240 <__aeabi_dsub>
 8006f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f06:	f7f9 fdc5 	bl	8000a94 <__aeabi_dcmplt>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	f040 80b7 	bne.w	800707e <_dtoa_r+0x68e>
 8006f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f12:	429e      	cmp	r6, r3
 8006f14:	f43f af7e 	beq.w	8006e14 <_dtoa_r+0x424>
 8006f18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <_dtoa_r+0x558>)
 8006f20:	f7f9 fb46 	bl	80005b0 <__aeabi_dmul>
 8006f24:	2200      	movs	r2, #0
 8006f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f2a:	4b07      	ldr	r3, [pc, #28]	; (8006f48 <_dtoa_r+0x558>)
 8006f2c:	4650      	mov	r0, sl
 8006f2e:	4659      	mov	r1, fp
 8006f30:	f7f9 fb3e 	bl	80005b0 <__aeabi_dmul>
 8006f34:	4682      	mov	sl, r0
 8006f36:	468b      	mov	fp, r1
 8006f38:	e7c5      	b.n	8006ec6 <_dtoa_r+0x4d6>
 8006f3a:	bf00      	nop
 8006f3c:	0801f908 	.word	0x0801f908
 8006f40:	0801f8e0 	.word	0x0801f8e0
 8006f44:	3ff00000 	.word	0x3ff00000
 8006f48:	40240000 	.word	0x40240000
 8006f4c:	401c0000 	.word	0x401c0000
 8006f50:	40140000 	.word	0x40140000
 8006f54:	3fe00000 	.word	0x3fe00000
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fb28 	bl	80005b0 <__aeabi_dmul>
 8006f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f64:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006f66:	9e04      	ldr	r6, [sp, #16]
 8006f68:	4659      	mov	r1, fp
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	f7f9 fdd0 	bl	8000b10 <__aeabi_d2iz>
 8006f70:	4604      	mov	r4, r0
 8006f72:	f7f9 fab3 	bl	80004dc <__aeabi_i2d>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4650      	mov	r0, sl
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	f7f9 f95f 	bl	8000240 <__aeabi_dsub>
 8006f82:	3430      	adds	r4, #48	; 0x30
 8006f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f86:	f806 4b01 	strb.w	r4, [r6], #1
 8006f8a:	429e      	cmp	r6, r3
 8006f8c:	4682      	mov	sl, r0
 8006f8e:	468b      	mov	fp, r1
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	d123      	bne.n	8006fde <_dtoa_r+0x5ee>
 8006f96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f9a:	4baf      	ldr	r3, [pc, #700]	; (8007258 <_dtoa_r+0x868>)
 8006f9c:	f7f9 f952 	bl	8000244 <__adddf3>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f7f9 fd92 	bl	8000ad0 <__aeabi_dcmpgt>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d166      	bne.n	800707e <_dtoa_r+0x68e>
 8006fb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	49a8      	ldr	r1, [pc, #672]	; (8007258 <_dtoa_r+0x868>)
 8006fb8:	f7f9 f942 	bl	8000240 <__aeabi_dsub>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	f7f9 fd66 	bl	8000a94 <__aeabi_dcmplt>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	f43f af23 	beq.w	8006e14 <_dtoa_r+0x424>
 8006fce:	463e      	mov	r6, r7
 8006fd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fd4:	3f01      	subs	r7, #1
 8006fd6:	2b30      	cmp	r3, #48	; 0x30
 8006fd8:	d0f9      	beq.n	8006fce <_dtoa_r+0x5de>
 8006fda:	46a8      	mov	r8, r5
 8006fdc:	e03e      	b.n	800705c <_dtoa_r+0x66c>
 8006fde:	4b9f      	ldr	r3, [pc, #636]	; (800725c <_dtoa_r+0x86c>)
 8006fe0:	f7f9 fae6 	bl	80005b0 <__aeabi_dmul>
 8006fe4:	4682      	mov	sl, r0
 8006fe6:	468b      	mov	fp, r1
 8006fe8:	e7be      	b.n	8006f68 <_dtoa_r+0x578>
 8006fea:	4654      	mov	r4, sl
 8006fec:	f04f 0a00 	mov.w	sl, #0
 8006ff0:	465d      	mov	r5, fp
 8006ff2:	9e04      	ldr	r6, [sp, #16]
 8006ff4:	f8df b264 	ldr.w	fp, [pc, #612]	; 800725c <_dtoa_r+0x86c>
 8006ff8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	f7f9 fc00 	bl	8000804 <__aeabi_ddiv>
 8007004:	f7f9 fd84 	bl	8000b10 <__aeabi_d2iz>
 8007008:	4607      	mov	r7, r0
 800700a:	f7f9 fa67 	bl	80004dc <__aeabi_i2d>
 800700e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007012:	f7f9 facd 	bl	80005b0 <__aeabi_dmul>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4620      	mov	r0, r4
 800701c:	4629      	mov	r1, r5
 800701e:	f7f9 f90f 	bl	8000240 <__aeabi_dsub>
 8007022:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007026:	f806 4b01 	strb.w	r4, [r6], #1
 800702a:	9c04      	ldr	r4, [sp, #16]
 800702c:	9d05      	ldr	r5, [sp, #20]
 800702e:	1b34      	subs	r4, r6, r4
 8007030:	42a5      	cmp	r5, r4
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	d133      	bne.n	80070a0 <_dtoa_r+0x6b0>
 8007038:	f7f9 f904 	bl	8000244 <__adddf3>
 800703c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	f7f9 fd44 	bl	8000ad0 <__aeabi_dcmpgt>
 8007048:	b9c0      	cbnz	r0, 800707c <_dtoa_r+0x68c>
 800704a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fd15 	bl	8000a80 <__aeabi_dcmpeq>
 8007056:	b108      	cbz	r0, 800705c <_dtoa_r+0x66c>
 8007058:	07fb      	lsls	r3, r7, #31
 800705a:	d40f      	bmi.n	800707c <_dtoa_r+0x68c>
 800705c:	4648      	mov	r0, r9
 800705e:	9903      	ldr	r1, [sp, #12]
 8007060:	f000 fe33 	bl	8007cca <_Bfree>
 8007064:	2300      	movs	r3, #0
 8007066:	7033      	strb	r3, [r6, #0]
 8007068:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800706a:	f108 0001 	add.w	r0, r8, #1
 800706e:	6018      	str	r0, [r3, #0]
 8007070:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007072:	2b00      	cmp	r3, #0
 8007074:	f43f acf0 	beq.w	8006a58 <_dtoa_r+0x68>
 8007078:	601e      	str	r6, [r3, #0]
 800707a:	e4ed      	b.n	8006a58 <_dtoa_r+0x68>
 800707c:	4645      	mov	r5, r8
 800707e:	4633      	mov	r3, r6
 8007080:	461e      	mov	r6, r3
 8007082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007086:	2a39      	cmp	r2, #57	; 0x39
 8007088:	d106      	bne.n	8007098 <_dtoa_r+0x6a8>
 800708a:	9a04      	ldr	r2, [sp, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	d1f7      	bne.n	8007080 <_dtoa_r+0x690>
 8007090:	2230      	movs	r2, #48	; 0x30
 8007092:	9904      	ldr	r1, [sp, #16]
 8007094:	3501      	adds	r5, #1
 8007096:	700a      	strb	r2, [r1, #0]
 8007098:	781a      	ldrb	r2, [r3, #0]
 800709a:	3201      	adds	r2, #1
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e79c      	b.n	8006fda <_dtoa_r+0x5ea>
 80070a0:	4652      	mov	r2, sl
 80070a2:	465b      	mov	r3, fp
 80070a4:	f7f9 fa84 	bl	80005b0 <__aeabi_dmul>
 80070a8:	2200      	movs	r2, #0
 80070aa:	2300      	movs	r3, #0
 80070ac:	4604      	mov	r4, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	f7f9 fce6 	bl	8000a80 <__aeabi_dcmpeq>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d09f      	beq.n	8006ff8 <_dtoa_r+0x608>
 80070b8:	e7d0      	b.n	800705c <_dtoa_r+0x66c>
 80070ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070bc:	2a00      	cmp	r2, #0
 80070be:	f000 80cf 	beq.w	8007260 <_dtoa_r+0x870>
 80070c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070c4:	2a01      	cmp	r2, #1
 80070c6:	f300 80ad 	bgt.w	8007224 <_dtoa_r+0x834>
 80070ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070cc:	2a00      	cmp	r2, #0
 80070ce:	f000 80a5 	beq.w	800721c <_dtoa_r+0x82c>
 80070d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80070d8:	9e06      	ldr	r6, [sp, #24]
 80070da:	9a06      	ldr	r2, [sp, #24]
 80070dc:	2101      	movs	r1, #1
 80070de:	441a      	add	r2, r3
 80070e0:	9206      	str	r2, [sp, #24]
 80070e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070e4:	4648      	mov	r0, r9
 80070e6:	441a      	add	r2, r3
 80070e8:	9209      	str	r2, [sp, #36]	; 0x24
 80070ea:	f000 fe8b 	bl	8007e04 <__i2b>
 80070ee:	4605      	mov	r5, r0
 80070f0:	2e00      	cmp	r6, #0
 80070f2:	dd0c      	ble.n	800710e <_dtoa_r+0x71e>
 80070f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	dd09      	ble.n	800710e <_dtoa_r+0x71e>
 80070fa:	42b3      	cmp	r3, r6
 80070fc:	bfa8      	it	ge
 80070fe:	4633      	movge	r3, r6
 8007100:	9a06      	ldr	r2, [sp, #24]
 8007102:	1af6      	subs	r6, r6, r3
 8007104:	1ad2      	subs	r2, r2, r3
 8007106:	9206      	str	r2, [sp, #24]
 8007108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	9309      	str	r3, [sp, #36]	; 0x24
 800710e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007110:	b1f3      	cbz	r3, 8007150 <_dtoa_r+0x760>
 8007112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80a7 	beq.w	8007268 <_dtoa_r+0x878>
 800711a:	2c00      	cmp	r4, #0
 800711c:	dd10      	ble.n	8007140 <_dtoa_r+0x750>
 800711e:	4629      	mov	r1, r5
 8007120:	4622      	mov	r2, r4
 8007122:	4648      	mov	r0, r9
 8007124:	f000 ff2c 	bl	8007f80 <__pow5mult>
 8007128:	9a03      	ldr	r2, [sp, #12]
 800712a:	4601      	mov	r1, r0
 800712c:	4605      	mov	r5, r0
 800712e:	4648      	mov	r0, r9
 8007130:	f000 fe7e 	bl	8007e30 <__multiply>
 8007134:	4607      	mov	r7, r0
 8007136:	9903      	ldr	r1, [sp, #12]
 8007138:	4648      	mov	r0, r9
 800713a:	f000 fdc6 	bl	8007cca <_Bfree>
 800713e:	9703      	str	r7, [sp, #12]
 8007140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007142:	1b1a      	subs	r2, r3, r4
 8007144:	d004      	beq.n	8007150 <_dtoa_r+0x760>
 8007146:	4648      	mov	r0, r9
 8007148:	9903      	ldr	r1, [sp, #12]
 800714a:	f000 ff19 	bl	8007f80 <__pow5mult>
 800714e:	9003      	str	r0, [sp, #12]
 8007150:	2101      	movs	r1, #1
 8007152:	4648      	mov	r0, r9
 8007154:	f000 fe56 	bl	8007e04 <__i2b>
 8007158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800715a:	4604      	mov	r4, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	f340 8085 	ble.w	800726c <_dtoa_r+0x87c>
 8007162:	461a      	mov	r2, r3
 8007164:	4601      	mov	r1, r0
 8007166:	4648      	mov	r0, r9
 8007168:	f000 ff0a 	bl	8007f80 <__pow5mult>
 800716c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800716e:	4604      	mov	r4, r0
 8007170:	2b01      	cmp	r3, #1
 8007172:	dd7e      	ble.n	8007272 <_dtoa_r+0x882>
 8007174:	2700      	movs	r7, #0
 8007176:	6923      	ldr	r3, [r4, #16]
 8007178:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800717c:	6918      	ldr	r0, [r3, #16]
 800717e:	f000 fdf3 	bl	8007d68 <__hi0bits>
 8007182:	f1c0 0020 	rsb	r0, r0, #32
 8007186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007188:	4418      	add	r0, r3
 800718a:	f010 001f 	ands.w	r0, r0, #31
 800718e:	f000 808e 	beq.w	80072ae <_dtoa_r+0x8be>
 8007192:	f1c0 0320 	rsb	r3, r0, #32
 8007196:	2b04      	cmp	r3, #4
 8007198:	f340 8087 	ble.w	80072aa <_dtoa_r+0x8ba>
 800719c:	f1c0 001c 	rsb	r0, r0, #28
 80071a0:	9b06      	ldr	r3, [sp, #24]
 80071a2:	4406      	add	r6, r0
 80071a4:	4403      	add	r3, r0
 80071a6:	9306      	str	r3, [sp, #24]
 80071a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071aa:	4403      	add	r3, r0
 80071ac:	9309      	str	r3, [sp, #36]	; 0x24
 80071ae:	9b06      	ldr	r3, [sp, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dd05      	ble.n	80071c0 <_dtoa_r+0x7d0>
 80071b4:	461a      	mov	r2, r3
 80071b6:	4648      	mov	r0, r9
 80071b8:	9903      	ldr	r1, [sp, #12]
 80071ba:	f000 ff21 	bl	8008000 <__lshift>
 80071be:	9003      	str	r0, [sp, #12]
 80071c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dd05      	ble.n	80071d2 <_dtoa_r+0x7e2>
 80071c6:	4621      	mov	r1, r4
 80071c8:	461a      	mov	r2, r3
 80071ca:	4648      	mov	r0, r9
 80071cc:	f000 ff18 	bl	8008000 <__lshift>
 80071d0:	4604      	mov	r4, r0
 80071d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d06c      	beq.n	80072b2 <_dtoa_r+0x8c2>
 80071d8:	4621      	mov	r1, r4
 80071da:	9803      	ldr	r0, [sp, #12]
 80071dc:	f000 ff80 	bl	80080e0 <__mcmp>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	da66      	bge.n	80072b2 <_dtoa_r+0x8c2>
 80071e4:	2300      	movs	r3, #0
 80071e6:	220a      	movs	r2, #10
 80071e8:	4648      	mov	r0, r9
 80071ea:	9903      	ldr	r1, [sp, #12]
 80071ec:	f000 fd76 	bl	8007cdc <__multadd>
 80071f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80071f6:	9003      	str	r0, [sp, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 819f 	beq.w	800753c <_dtoa_r+0xb4c>
 80071fe:	2300      	movs	r3, #0
 8007200:	4629      	mov	r1, r5
 8007202:	220a      	movs	r2, #10
 8007204:	4648      	mov	r0, r9
 8007206:	f000 fd69 	bl	8007cdc <__multadd>
 800720a:	9b08      	ldr	r3, [sp, #32]
 800720c:	4605      	mov	r5, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	f300 808a 	bgt.w	8007328 <_dtoa_r+0x938>
 8007214:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007216:	2b02      	cmp	r3, #2
 8007218:	dc53      	bgt.n	80072c2 <_dtoa_r+0x8d2>
 800721a:	e085      	b.n	8007328 <_dtoa_r+0x938>
 800721c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800721e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007222:	e758      	b.n	80070d6 <_dtoa_r+0x6e6>
 8007224:	9b05      	ldr	r3, [sp, #20]
 8007226:	1e5c      	subs	r4, r3, #1
 8007228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722a:	42a3      	cmp	r3, r4
 800722c:	bfb7      	itett	lt
 800722e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007230:	1b1c      	subge	r4, r3, r4
 8007232:	1ae2      	sublt	r2, r4, r3
 8007234:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007236:	bfbe      	ittt	lt
 8007238:	940a      	strlt	r4, [sp, #40]	; 0x28
 800723a:	189b      	addlt	r3, r3, r2
 800723c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800723e:	9b05      	ldr	r3, [sp, #20]
 8007240:	bfb8      	it	lt
 8007242:	2400      	movlt	r4, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	bfb7      	itett	lt
 8007248:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 800724c:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 8007250:	1a9e      	sublt	r6, r3, r2
 8007252:	2300      	movlt	r3, #0
 8007254:	e741      	b.n	80070da <_dtoa_r+0x6ea>
 8007256:	bf00      	nop
 8007258:	3fe00000 	.word	0x3fe00000
 800725c:	40240000 	.word	0x40240000
 8007260:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007262:	9e06      	ldr	r6, [sp, #24]
 8007264:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007266:	e743      	b.n	80070f0 <_dtoa_r+0x700>
 8007268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800726a:	e76c      	b.n	8007146 <_dtoa_r+0x756>
 800726c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800726e:	2b01      	cmp	r3, #1
 8007270:	dc17      	bgt.n	80072a2 <_dtoa_r+0x8b2>
 8007272:	f1ba 0f00 	cmp.w	sl, #0
 8007276:	d114      	bne.n	80072a2 <_dtoa_r+0x8b2>
 8007278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800727c:	b99b      	cbnz	r3, 80072a6 <_dtoa_r+0x8b6>
 800727e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8007282:	0d3f      	lsrs	r7, r7, #20
 8007284:	053f      	lsls	r7, r7, #20
 8007286:	b137      	cbz	r7, 8007296 <_dtoa_r+0x8a6>
 8007288:	2701      	movs	r7, #1
 800728a:	9b06      	ldr	r3, [sp, #24]
 800728c:	3301      	adds	r3, #1
 800728e:	9306      	str	r3, [sp, #24]
 8007290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007292:	3301      	adds	r3, #1
 8007294:	9309      	str	r3, [sp, #36]	; 0x24
 8007296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007298:	2b00      	cmp	r3, #0
 800729a:	f47f af6c 	bne.w	8007176 <_dtoa_r+0x786>
 800729e:	2001      	movs	r0, #1
 80072a0:	e771      	b.n	8007186 <_dtoa_r+0x796>
 80072a2:	2700      	movs	r7, #0
 80072a4:	e7f7      	b.n	8007296 <_dtoa_r+0x8a6>
 80072a6:	4657      	mov	r7, sl
 80072a8:	e7f5      	b.n	8007296 <_dtoa_r+0x8a6>
 80072aa:	d080      	beq.n	80071ae <_dtoa_r+0x7be>
 80072ac:	4618      	mov	r0, r3
 80072ae:	301c      	adds	r0, #28
 80072b0:	e776      	b.n	80071a0 <_dtoa_r+0x7b0>
 80072b2:	9b05      	ldr	r3, [sp, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	dc31      	bgt.n	800731c <_dtoa_r+0x92c>
 80072b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	dd2e      	ble.n	800731c <_dtoa_r+0x92c>
 80072be:	9b05      	ldr	r3, [sp, #20]
 80072c0:	9308      	str	r3, [sp, #32]
 80072c2:	9b08      	ldr	r3, [sp, #32]
 80072c4:	b963      	cbnz	r3, 80072e0 <_dtoa_r+0x8f0>
 80072c6:	4621      	mov	r1, r4
 80072c8:	2205      	movs	r2, #5
 80072ca:	4648      	mov	r0, r9
 80072cc:	f000 fd06 	bl	8007cdc <__multadd>
 80072d0:	4601      	mov	r1, r0
 80072d2:	4604      	mov	r4, r0
 80072d4:	9803      	ldr	r0, [sp, #12]
 80072d6:	f000 ff03 	bl	80080e0 <__mcmp>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f73f adc4 	bgt.w	8006e68 <_dtoa_r+0x478>
 80072e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e2:	9e04      	ldr	r6, [sp, #16]
 80072e4:	ea6f 0803 	mvn.w	r8, r3
 80072e8:	2700      	movs	r7, #0
 80072ea:	4621      	mov	r1, r4
 80072ec:	4648      	mov	r0, r9
 80072ee:	f000 fcec 	bl	8007cca <_Bfree>
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	f43f aeb2 	beq.w	800705c <_dtoa_r+0x66c>
 80072f8:	b12f      	cbz	r7, 8007306 <_dtoa_r+0x916>
 80072fa:	42af      	cmp	r7, r5
 80072fc:	d003      	beq.n	8007306 <_dtoa_r+0x916>
 80072fe:	4639      	mov	r1, r7
 8007300:	4648      	mov	r0, r9
 8007302:	f000 fce2 	bl	8007cca <_Bfree>
 8007306:	4629      	mov	r1, r5
 8007308:	4648      	mov	r0, r9
 800730a:	f000 fcde 	bl	8007cca <_Bfree>
 800730e:	e6a5      	b.n	800705c <_dtoa_r+0x66c>
 8007310:	2400      	movs	r4, #0
 8007312:	4625      	mov	r5, r4
 8007314:	e7e4      	b.n	80072e0 <_dtoa_r+0x8f0>
 8007316:	46a8      	mov	r8, r5
 8007318:	4625      	mov	r5, r4
 800731a:	e5a5      	b.n	8006e68 <_dtoa_r+0x478>
 800731c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 80c4 	beq.w	80074ac <_dtoa_r+0xabc>
 8007324:	9b05      	ldr	r3, [sp, #20]
 8007326:	9308      	str	r3, [sp, #32]
 8007328:	2e00      	cmp	r6, #0
 800732a:	dd05      	ble.n	8007338 <_dtoa_r+0x948>
 800732c:	4629      	mov	r1, r5
 800732e:	4632      	mov	r2, r6
 8007330:	4648      	mov	r0, r9
 8007332:	f000 fe65 	bl	8008000 <__lshift>
 8007336:	4605      	mov	r5, r0
 8007338:	2f00      	cmp	r7, #0
 800733a:	d058      	beq.n	80073ee <_dtoa_r+0x9fe>
 800733c:	4648      	mov	r0, r9
 800733e:	6869      	ldr	r1, [r5, #4]
 8007340:	f000 fc9e 	bl	8007c80 <_Balloc>
 8007344:	4606      	mov	r6, r0
 8007346:	b920      	cbnz	r0, 8007352 <_dtoa_r+0x962>
 8007348:	4602      	mov	r2, r0
 800734a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800734e:	4b7f      	ldr	r3, [pc, #508]	; (800754c <_dtoa_r+0xb5c>)
 8007350:	e481      	b.n	8006c56 <_dtoa_r+0x266>
 8007352:	692a      	ldr	r2, [r5, #16]
 8007354:	f105 010c 	add.w	r1, r5, #12
 8007358:	3202      	adds	r2, #2
 800735a:	0092      	lsls	r2, r2, #2
 800735c:	300c      	adds	r0, #12
 800735e:	f000 fc75 	bl	8007c4c <memcpy>
 8007362:	2201      	movs	r2, #1
 8007364:	4631      	mov	r1, r6
 8007366:	4648      	mov	r0, r9
 8007368:	f000 fe4a 	bl	8008000 <__lshift>
 800736c:	462f      	mov	r7, r5
 800736e:	4605      	mov	r5, r0
 8007370:	9b04      	ldr	r3, [sp, #16]
 8007372:	9a04      	ldr	r2, [sp, #16]
 8007374:	3301      	adds	r3, #1
 8007376:	9305      	str	r3, [sp, #20]
 8007378:	9b08      	ldr	r3, [sp, #32]
 800737a:	4413      	add	r3, r2
 800737c:	930a      	str	r3, [sp, #40]	; 0x28
 800737e:	f00a 0301 	and.w	r3, sl, #1
 8007382:	9309      	str	r3, [sp, #36]	; 0x24
 8007384:	9b05      	ldr	r3, [sp, #20]
 8007386:	4621      	mov	r1, r4
 8007388:	9803      	ldr	r0, [sp, #12]
 800738a:	f103 3bff 	add.w	fp, r3, #4294967295
 800738e:	f7ff faa3 	bl	80068d8 <quorem>
 8007392:	4639      	mov	r1, r7
 8007394:	9006      	str	r0, [sp, #24]
 8007396:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800739a:	9803      	ldr	r0, [sp, #12]
 800739c:	f000 fea0 	bl	80080e0 <__mcmp>
 80073a0:	462a      	mov	r2, r5
 80073a2:	9008      	str	r0, [sp, #32]
 80073a4:	4621      	mov	r1, r4
 80073a6:	4648      	mov	r0, r9
 80073a8:	f000 feb6 	bl	8008118 <__mdiff>
 80073ac:	68c2      	ldr	r2, [r0, #12]
 80073ae:	4606      	mov	r6, r0
 80073b0:	b9fa      	cbnz	r2, 80073f2 <_dtoa_r+0xa02>
 80073b2:	4601      	mov	r1, r0
 80073b4:	9803      	ldr	r0, [sp, #12]
 80073b6:	f000 fe93 	bl	80080e0 <__mcmp>
 80073ba:	4602      	mov	r2, r0
 80073bc:	4631      	mov	r1, r6
 80073be:	4648      	mov	r0, r9
 80073c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80073c2:	f000 fc82 	bl	8007cca <_Bfree>
 80073c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073ca:	9e05      	ldr	r6, [sp, #20]
 80073cc:	ea43 0102 	orr.w	r1, r3, r2
 80073d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d2:	430b      	orrs	r3, r1
 80073d4:	d10f      	bne.n	80073f6 <_dtoa_r+0xa06>
 80073d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073da:	d028      	beq.n	800742e <_dtoa_r+0xa3e>
 80073dc:	9b08      	ldr	r3, [sp, #32]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	dd02      	ble.n	80073e8 <_dtoa_r+0x9f8>
 80073e2:	9b06      	ldr	r3, [sp, #24]
 80073e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80073e8:	f88b a000 	strb.w	sl, [fp]
 80073ec:	e77d      	b.n	80072ea <_dtoa_r+0x8fa>
 80073ee:	4628      	mov	r0, r5
 80073f0:	e7bc      	b.n	800736c <_dtoa_r+0x97c>
 80073f2:	2201      	movs	r2, #1
 80073f4:	e7e2      	b.n	80073bc <_dtoa_r+0x9cc>
 80073f6:	9b08      	ldr	r3, [sp, #32]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	db04      	blt.n	8007406 <_dtoa_r+0xa16>
 80073fc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80073fe:	430b      	orrs	r3, r1
 8007400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007402:	430b      	orrs	r3, r1
 8007404:	d120      	bne.n	8007448 <_dtoa_r+0xa58>
 8007406:	2a00      	cmp	r2, #0
 8007408:	ddee      	ble.n	80073e8 <_dtoa_r+0x9f8>
 800740a:	2201      	movs	r2, #1
 800740c:	9903      	ldr	r1, [sp, #12]
 800740e:	4648      	mov	r0, r9
 8007410:	f000 fdf6 	bl	8008000 <__lshift>
 8007414:	4621      	mov	r1, r4
 8007416:	9003      	str	r0, [sp, #12]
 8007418:	f000 fe62 	bl	80080e0 <__mcmp>
 800741c:	2800      	cmp	r0, #0
 800741e:	dc03      	bgt.n	8007428 <_dtoa_r+0xa38>
 8007420:	d1e2      	bne.n	80073e8 <_dtoa_r+0x9f8>
 8007422:	f01a 0f01 	tst.w	sl, #1
 8007426:	d0df      	beq.n	80073e8 <_dtoa_r+0x9f8>
 8007428:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800742c:	d1d9      	bne.n	80073e2 <_dtoa_r+0x9f2>
 800742e:	2339      	movs	r3, #57	; 0x39
 8007430:	f88b 3000 	strb.w	r3, [fp]
 8007434:	4633      	mov	r3, r6
 8007436:	461e      	mov	r6, r3
 8007438:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800743c:	3b01      	subs	r3, #1
 800743e:	2a39      	cmp	r2, #57	; 0x39
 8007440:	d06a      	beq.n	8007518 <_dtoa_r+0xb28>
 8007442:	3201      	adds	r2, #1
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	e750      	b.n	80072ea <_dtoa_r+0x8fa>
 8007448:	2a00      	cmp	r2, #0
 800744a:	dd07      	ble.n	800745c <_dtoa_r+0xa6c>
 800744c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007450:	d0ed      	beq.n	800742e <_dtoa_r+0xa3e>
 8007452:	f10a 0301 	add.w	r3, sl, #1
 8007456:	f88b 3000 	strb.w	r3, [fp]
 800745a:	e746      	b.n	80072ea <_dtoa_r+0x8fa>
 800745c:	9b05      	ldr	r3, [sp, #20]
 800745e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007460:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007464:	4293      	cmp	r3, r2
 8007466:	d041      	beq.n	80074ec <_dtoa_r+0xafc>
 8007468:	2300      	movs	r3, #0
 800746a:	220a      	movs	r2, #10
 800746c:	9903      	ldr	r1, [sp, #12]
 800746e:	4648      	mov	r0, r9
 8007470:	f000 fc34 	bl	8007cdc <__multadd>
 8007474:	42af      	cmp	r7, r5
 8007476:	9003      	str	r0, [sp, #12]
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	f04f 020a 	mov.w	r2, #10
 8007480:	4639      	mov	r1, r7
 8007482:	4648      	mov	r0, r9
 8007484:	d107      	bne.n	8007496 <_dtoa_r+0xaa6>
 8007486:	f000 fc29 	bl	8007cdc <__multadd>
 800748a:	4607      	mov	r7, r0
 800748c:	4605      	mov	r5, r0
 800748e:	9b05      	ldr	r3, [sp, #20]
 8007490:	3301      	adds	r3, #1
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	e776      	b.n	8007384 <_dtoa_r+0x994>
 8007496:	f000 fc21 	bl	8007cdc <__multadd>
 800749a:	4629      	mov	r1, r5
 800749c:	4607      	mov	r7, r0
 800749e:	2300      	movs	r3, #0
 80074a0:	220a      	movs	r2, #10
 80074a2:	4648      	mov	r0, r9
 80074a4:	f000 fc1a 	bl	8007cdc <__multadd>
 80074a8:	4605      	mov	r5, r0
 80074aa:	e7f0      	b.n	800748e <_dtoa_r+0xa9e>
 80074ac:	9b05      	ldr	r3, [sp, #20]
 80074ae:	9308      	str	r3, [sp, #32]
 80074b0:	9e04      	ldr	r6, [sp, #16]
 80074b2:	4621      	mov	r1, r4
 80074b4:	9803      	ldr	r0, [sp, #12]
 80074b6:	f7ff fa0f 	bl	80068d8 <quorem>
 80074ba:	9b04      	ldr	r3, [sp, #16]
 80074bc:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80074c0:	f806 ab01 	strb.w	sl, [r6], #1
 80074c4:	1af2      	subs	r2, r6, r3
 80074c6:	9b08      	ldr	r3, [sp, #32]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	dd07      	ble.n	80074dc <_dtoa_r+0xaec>
 80074cc:	2300      	movs	r3, #0
 80074ce:	220a      	movs	r2, #10
 80074d0:	4648      	mov	r0, r9
 80074d2:	9903      	ldr	r1, [sp, #12]
 80074d4:	f000 fc02 	bl	8007cdc <__multadd>
 80074d8:	9003      	str	r0, [sp, #12]
 80074da:	e7ea      	b.n	80074b2 <_dtoa_r+0xac2>
 80074dc:	9b08      	ldr	r3, [sp, #32]
 80074de:	2700      	movs	r7, #0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bfcc      	ite	gt
 80074e4:	461e      	movgt	r6, r3
 80074e6:	2601      	movle	r6, #1
 80074e8:	9b04      	ldr	r3, [sp, #16]
 80074ea:	441e      	add	r6, r3
 80074ec:	2201      	movs	r2, #1
 80074ee:	9903      	ldr	r1, [sp, #12]
 80074f0:	4648      	mov	r0, r9
 80074f2:	f000 fd85 	bl	8008000 <__lshift>
 80074f6:	4621      	mov	r1, r4
 80074f8:	9003      	str	r0, [sp, #12]
 80074fa:	f000 fdf1 	bl	80080e0 <__mcmp>
 80074fe:	2800      	cmp	r0, #0
 8007500:	dc98      	bgt.n	8007434 <_dtoa_r+0xa44>
 8007502:	d102      	bne.n	800750a <_dtoa_r+0xb1a>
 8007504:	f01a 0f01 	tst.w	sl, #1
 8007508:	d194      	bne.n	8007434 <_dtoa_r+0xa44>
 800750a:	4633      	mov	r3, r6
 800750c:	461e      	mov	r6, r3
 800750e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007512:	2a30      	cmp	r2, #48	; 0x30
 8007514:	d0fa      	beq.n	800750c <_dtoa_r+0xb1c>
 8007516:	e6e8      	b.n	80072ea <_dtoa_r+0x8fa>
 8007518:	9a04      	ldr	r2, [sp, #16]
 800751a:	429a      	cmp	r2, r3
 800751c:	d18b      	bne.n	8007436 <_dtoa_r+0xa46>
 800751e:	2331      	movs	r3, #49	; 0x31
 8007520:	f108 0801 	add.w	r8, r8, #1
 8007524:	7013      	strb	r3, [r2, #0]
 8007526:	e6e0      	b.n	80072ea <_dtoa_r+0x8fa>
 8007528:	4b09      	ldr	r3, [pc, #36]	; (8007550 <_dtoa_r+0xb60>)
 800752a:	f7ff bab1 	b.w	8006a90 <_dtoa_r+0xa0>
 800752e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007530:	2b00      	cmp	r3, #0
 8007532:	f47f aa95 	bne.w	8006a60 <_dtoa_r+0x70>
 8007536:	4b07      	ldr	r3, [pc, #28]	; (8007554 <_dtoa_r+0xb64>)
 8007538:	f7ff baaa 	b.w	8006a90 <_dtoa_r+0xa0>
 800753c:	9b08      	ldr	r3, [sp, #32]
 800753e:	2b00      	cmp	r3, #0
 8007540:	dcb6      	bgt.n	80074b0 <_dtoa_r+0xac0>
 8007542:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007544:	2b02      	cmp	r3, #2
 8007546:	f73f aebc 	bgt.w	80072c2 <_dtoa_r+0x8d2>
 800754a:	e7b1      	b.n	80074b0 <_dtoa_r+0xac0>
 800754c:	0801f811 	.word	0x0801f811
 8007550:	0801f7e2 	.word	0x0801f7e2
 8007554:	0801f808 	.word	0x0801f808

08007558 <__libc_fini_array>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <__libc_fini_array+0x20>)
 800755c:	4c07      	ldr	r4, [pc, #28]	; (800757c <__libc_fini_array+0x24>)
 800755e:	1b64      	subs	r4, r4, r5
 8007560:	10a4      	asrs	r4, r4, #2
 8007562:	b91c      	cbnz	r4, 800756c <__libc_fini_array+0x14>
 8007564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007568:	f002 bc98 	b.w	8009e9c <_fini>
 800756c:	3c01      	subs	r4, #1
 800756e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007572:	4798      	blx	r3
 8007574:	e7f5      	b.n	8007562 <__libc_fini_array+0xa>
 8007576:	bf00      	nop
 8007578:	0801fb54 	.word	0x0801fb54
 800757c:	0801fb58 	.word	0x0801fb58

08007580 <_malloc_trim_r>:
 8007580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007584:	4606      	mov	r6, r0
 8007586:	2008      	movs	r0, #8
 8007588:	460c      	mov	r4, r1
 800758a:	f000 ff7f 	bl	800848c <sysconf>
 800758e:	4680      	mov	r8, r0
 8007590:	4f22      	ldr	r7, [pc, #136]	; (800761c <_malloc_trim_r+0x9c>)
 8007592:	4630      	mov	r0, r6
 8007594:	f000 fb68 	bl	8007c68 <__malloc_lock>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	685d      	ldr	r5, [r3, #4]
 800759c:	f025 0503 	bic.w	r5, r5, #3
 80075a0:	1b2c      	subs	r4, r5, r4
 80075a2:	3c11      	subs	r4, #17
 80075a4:	4444      	add	r4, r8
 80075a6:	fbb4 f4f8 	udiv	r4, r4, r8
 80075aa:	3c01      	subs	r4, #1
 80075ac:	fb08 f404 	mul.w	r4, r8, r4
 80075b0:	45a0      	cmp	r8, r4
 80075b2:	dd05      	ble.n	80075c0 <_malloc_trim_r+0x40>
 80075b4:	4630      	mov	r0, r6
 80075b6:	f000 fb5d 	bl	8007c74 <__malloc_unlock>
 80075ba:	2000      	movs	r0, #0
 80075bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c0:	2100      	movs	r1, #0
 80075c2:	4630      	mov	r0, r6
 80075c4:	f000 fec4 	bl	8008350 <_sbrk_r>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	442b      	add	r3, r5
 80075cc:	4298      	cmp	r0, r3
 80075ce:	d1f1      	bne.n	80075b4 <_malloc_trim_r+0x34>
 80075d0:	4630      	mov	r0, r6
 80075d2:	4261      	negs	r1, r4
 80075d4:	f000 febc 	bl	8008350 <_sbrk_r>
 80075d8:	3001      	adds	r0, #1
 80075da:	d110      	bne.n	80075fe <_malloc_trim_r+0x7e>
 80075dc:	2100      	movs	r1, #0
 80075de:	4630      	mov	r0, r6
 80075e0:	f000 feb6 	bl	8008350 <_sbrk_r>
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	1a83      	subs	r3, r0, r2
 80075e8:	2b0f      	cmp	r3, #15
 80075ea:	dde3      	ble.n	80075b4 <_malloc_trim_r+0x34>
 80075ec:	490c      	ldr	r1, [pc, #48]	; (8007620 <_malloc_trim_r+0xa0>)
 80075ee:	f043 0301 	orr.w	r3, r3, #1
 80075f2:	6809      	ldr	r1, [r1, #0]
 80075f4:	6053      	str	r3, [r2, #4]
 80075f6:	1a40      	subs	r0, r0, r1
 80075f8:	490a      	ldr	r1, [pc, #40]	; (8007624 <_malloc_trim_r+0xa4>)
 80075fa:	6008      	str	r0, [r1, #0]
 80075fc:	e7da      	b.n	80075b4 <_malloc_trim_r+0x34>
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4a08      	ldr	r2, [pc, #32]	; (8007624 <_malloc_trim_r+0xa4>)
 8007602:	1b2d      	subs	r5, r5, r4
 8007604:	f045 0501 	orr.w	r5, r5, #1
 8007608:	605d      	str	r5, [r3, #4]
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	4630      	mov	r0, r6
 800760e:	1b1b      	subs	r3, r3, r4
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	f000 fb2f 	bl	8007c74 <__malloc_unlock>
 8007616:	2001      	movs	r0, #1
 8007618:	e7d0      	b.n	80075bc <_malloc_trim_r+0x3c>
 800761a:	bf00      	nop
 800761c:	20000474 	.word	0x20000474
 8007620:	2000087c 	.word	0x2000087c
 8007624:	20000b14 	.word	0x20000b14

08007628 <_free_r>:
 8007628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762a:	4605      	mov	r5, r0
 800762c:	460f      	mov	r7, r1
 800762e:	2900      	cmp	r1, #0
 8007630:	f000 80b1 	beq.w	8007796 <_free_r+0x16e>
 8007634:	f000 fb18 	bl	8007c68 <__malloc_lock>
 8007638:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800763c:	4856      	ldr	r0, [pc, #344]	; (8007798 <_free_r+0x170>)
 800763e:	f022 0401 	bic.w	r4, r2, #1
 8007642:	f1a7 0308 	sub.w	r3, r7, #8
 8007646:	eb03 0c04 	add.w	ip, r3, r4
 800764a:	6881      	ldr	r1, [r0, #8]
 800764c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007650:	4561      	cmp	r1, ip
 8007652:	f026 0603 	bic.w	r6, r6, #3
 8007656:	f002 0201 	and.w	r2, r2, #1
 800765a:	d11b      	bne.n	8007694 <_free_r+0x6c>
 800765c:	4434      	add	r4, r6
 800765e:	b93a      	cbnz	r2, 8007670 <_free_r+0x48>
 8007660:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8007664:	1a9b      	subs	r3, r3, r2
 8007666:	4414      	add	r4, r2
 8007668:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800766c:	60ca      	str	r2, [r1, #12]
 800766e:	6091      	str	r1, [r2, #8]
 8007670:	f044 0201 	orr.w	r2, r4, #1
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	6083      	str	r3, [r0, #8]
 8007678:	4b48      	ldr	r3, [pc, #288]	; (800779c <_free_r+0x174>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	42a3      	cmp	r3, r4
 800767e:	d804      	bhi.n	800768a <_free_r+0x62>
 8007680:	4b47      	ldr	r3, [pc, #284]	; (80077a0 <_free_r+0x178>)
 8007682:	4628      	mov	r0, r5
 8007684:	6819      	ldr	r1, [r3, #0]
 8007686:	f7ff ff7b 	bl	8007580 <_malloc_trim_r>
 800768a:	4628      	mov	r0, r5
 800768c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007690:	f000 baf0 	b.w	8007c74 <__malloc_unlock>
 8007694:	f8cc 6004 	str.w	r6, [ip, #4]
 8007698:	2a00      	cmp	r2, #0
 800769a:	d138      	bne.n	800770e <_free_r+0xe6>
 800769c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80076a0:	f100 0708 	add.w	r7, r0, #8
 80076a4:	1a5b      	subs	r3, r3, r1
 80076a6:	440c      	add	r4, r1
 80076a8:	6899      	ldr	r1, [r3, #8]
 80076aa:	42b9      	cmp	r1, r7
 80076ac:	d031      	beq.n	8007712 <_free_r+0xea>
 80076ae:	68df      	ldr	r7, [r3, #12]
 80076b0:	60cf      	str	r7, [r1, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	eb0c 0106 	add.w	r1, ip, r6
 80076b8:	6849      	ldr	r1, [r1, #4]
 80076ba:	07c9      	lsls	r1, r1, #31
 80076bc:	d40b      	bmi.n	80076d6 <_free_r+0xae>
 80076be:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80076c2:	4434      	add	r4, r6
 80076c4:	bb3a      	cbnz	r2, 8007716 <_free_r+0xee>
 80076c6:	4e37      	ldr	r6, [pc, #220]	; (80077a4 <_free_r+0x17c>)
 80076c8:	42b1      	cmp	r1, r6
 80076ca:	d124      	bne.n	8007716 <_free_r+0xee>
 80076cc:	2201      	movs	r2, #1
 80076ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076d2:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80076d6:	f044 0101 	orr.w	r1, r4, #1
 80076da:	6059      	str	r1, [r3, #4]
 80076dc:	511c      	str	r4, [r3, r4]
 80076de:	2a00      	cmp	r2, #0
 80076e0:	d1d3      	bne.n	800768a <_free_r+0x62>
 80076e2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80076e6:	d21b      	bcs.n	8007720 <_free_r+0xf8>
 80076e8:	0961      	lsrs	r1, r4, #5
 80076ea:	08e2      	lsrs	r2, r4, #3
 80076ec:	2401      	movs	r4, #1
 80076ee:	408c      	lsls	r4, r1
 80076f0:	6841      	ldr	r1, [r0, #4]
 80076f2:	3201      	adds	r2, #1
 80076f4:	430c      	orrs	r4, r1
 80076f6:	6044      	str	r4, [r0, #4]
 80076f8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80076fc:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8007700:	3908      	subs	r1, #8
 8007702:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8007706:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800770a:	60e3      	str	r3, [r4, #12]
 800770c:	e7bd      	b.n	800768a <_free_r+0x62>
 800770e:	2200      	movs	r2, #0
 8007710:	e7d0      	b.n	80076b4 <_free_r+0x8c>
 8007712:	2201      	movs	r2, #1
 8007714:	e7ce      	b.n	80076b4 <_free_r+0x8c>
 8007716:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800771a:	60ce      	str	r6, [r1, #12]
 800771c:	60b1      	str	r1, [r6, #8]
 800771e:	e7da      	b.n	80076d6 <_free_r+0xae>
 8007720:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8007724:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8007728:	d214      	bcs.n	8007754 <_free_r+0x12c>
 800772a:	09a2      	lsrs	r2, r4, #6
 800772c:	3238      	adds	r2, #56	; 0x38
 800772e:	1c51      	adds	r1, r2, #1
 8007730:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8007734:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8007738:	428e      	cmp	r6, r1
 800773a:	d125      	bne.n	8007788 <_free_r+0x160>
 800773c:	2401      	movs	r4, #1
 800773e:	1092      	asrs	r2, r2, #2
 8007740:	fa04 f202 	lsl.w	r2, r4, r2
 8007744:	6844      	ldr	r4, [r0, #4]
 8007746:	4322      	orrs	r2, r4
 8007748:	6042      	str	r2, [r0, #4]
 800774a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800774e:	60b3      	str	r3, [r6, #8]
 8007750:	60cb      	str	r3, [r1, #12]
 8007752:	e79a      	b.n	800768a <_free_r+0x62>
 8007754:	2a14      	cmp	r2, #20
 8007756:	d801      	bhi.n	800775c <_free_r+0x134>
 8007758:	325b      	adds	r2, #91	; 0x5b
 800775a:	e7e8      	b.n	800772e <_free_r+0x106>
 800775c:	2a54      	cmp	r2, #84	; 0x54
 800775e:	d802      	bhi.n	8007766 <_free_r+0x13e>
 8007760:	0b22      	lsrs	r2, r4, #12
 8007762:	326e      	adds	r2, #110	; 0x6e
 8007764:	e7e3      	b.n	800772e <_free_r+0x106>
 8007766:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800776a:	d802      	bhi.n	8007772 <_free_r+0x14a>
 800776c:	0be2      	lsrs	r2, r4, #15
 800776e:	3277      	adds	r2, #119	; 0x77
 8007770:	e7dd      	b.n	800772e <_free_r+0x106>
 8007772:	f240 5154 	movw	r1, #1364	; 0x554
 8007776:	428a      	cmp	r2, r1
 8007778:	bf96      	itet	ls
 800777a:	0ca2      	lsrls	r2, r4, #18
 800777c:	227e      	movhi	r2, #126	; 0x7e
 800777e:	327c      	addls	r2, #124	; 0x7c
 8007780:	e7d5      	b.n	800772e <_free_r+0x106>
 8007782:	6889      	ldr	r1, [r1, #8]
 8007784:	428e      	cmp	r6, r1
 8007786:	d004      	beq.n	8007792 <_free_r+0x16a>
 8007788:	684a      	ldr	r2, [r1, #4]
 800778a:	f022 0203 	bic.w	r2, r2, #3
 800778e:	42a2      	cmp	r2, r4
 8007790:	d8f7      	bhi.n	8007782 <_free_r+0x15a>
 8007792:	68ce      	ldr	r6, [r1, #12]
 8007794:	e7d9      	b.n	800774a <_free_r+0x122>
 8007796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007798:	20000474 	.word	0x20000474
 800779c:	20000880 	.word	0x20000880
 80077a0:	20000b44 	.word	0x20000b44
 80077a4:	2000047c 	.word	0x2000047c

080077a8 <_localeconv_r>:
 80077a8:	4800      	ldr	r0, [pc, #0]	; (80077ac <_localeconv_r+0x4>)
 80077aa:	4770      	bx	lr
 80077ac:	20000974 	.word	0x20000974

080077b0 <__retarget_lock_init_recursive>:
 80077b0:	4770      	bx	lr

080077b2 <__retarget_lock_close_recursive>:
 80077b2:	4770      	bx	lr

080077b4 <__retarget_lock_acquire_recursive>:
 80077b4:	4770      	bx	lr

080077b6 <__retarget_lock_release_recursive>:
 80077b6:	4770      	bx	lr

080077b8 <_malloc_r>:
 80077b8:	f101 030b 	add.w	r3, r1, #11
 80077bc:	2b16      	cmp	r3, #22
 80077be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c2:	4605      	mov	r5, r0
 80077c4:	d906      	bls.n	80077d4 <_malloc_r+0x1c>
 80077c6:	f033 0707 	bics.w	r7, r3, #7
 80077ca:	d504      	bpl.n	80077d6 <_malloc_r+0x1e>
 80077cc:	230c      	movs	r3, #12
 80077ce:	602b      	str	r3, [r5, #0]
 80077d0:	2400      	movs	r4, #0
 80077d2:	e1a3      	b.n	8007b1c <_malloc_r+0x364>
 80077d4:	2710      	movs	r7, #16
 80077d6:	42b9      	cmp	r1, r7
 80077d8:	d8f8      	bhi.n	80077cc <_malloc_r+0x14>
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 fa44 	bl	8007c68 <__malloc_lock>
 80077e0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80077e4:	4eaf      	ldr	r6, [pc, #700]	; (8007aa4 <_malloc_r+0x2ec>)
 80077e6:	d237      	bcs.n	8007858 <_malloc_r+0xa0>
 80077e8:	f107 0208 	add.w	r2, r7, #8
 80077ec:	4432      	add	r2, r6
 80077ee:	6854      	ldr	r4, [r2, #4]
 80077f0:	f1a2 0108 	sub.w	r1, r2, #8
 80077f4:	428c      	cmp	r4, r1
 80077f6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80077fa:	d102      	bne.n	8007802 <_malloc_r+0x4a>
 80077fc:	68d4      	ldr	r4, [r2, #12]
 80077fe:	42a2      	cmp	r2, r4
 8007800:	d010      	beq.n	8007824 <_malloc_r+0x6c>
 8007802:	6863      	ldr	r3, [r4, #4]
 8007804:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007808:	f023 0303 	bic.w	r3, r3, #3
 800780c:	60ca      	str	r2, [r1, #12]
 800780e:	4423      	add	r3, r4
 8007810:	6091      	str	r1, [r2, #8]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	f042 0201 	orr.w	r2, r2, #1
 8007818:	605a      	str	r2, [r3, #4]
 800781a:	4628      	mov	r0, r5
 800781c:	f000 fa2a 	bl	8007c74 <__malloc_unlock>
 8007820:	3408      	adds	r4, #8
 8007822:	e17b      	b.n	8007b1c <_malloc_r+0x364>
 8007824:	3302      	adds	r3, #2
 8007826:	6934      	ldr	r4, [r6, #16]
 8007828:	499f      	ldr	r1, [pc, #636]	; (8007aa8 <_malloc_r+0x2f0>)
 800782a:	428c      	cmp	r4, r1
 800782c:	d077      	beq.n	800791e <_malloc_r+0x166>
 800782e:	6862      	ldr	r2, [r4, #4]
 8007830:	f022 0c03 	bic.w	ip, r2, #3
 8007834:	ebac 0007 	sub.w	r0, ip, r7
 8007838:	280f      	cmp	r0, #15
 800783a:	dd48      	ble.n	80078ce <_malloc_r+0x116>
 800783c:	19e2      	adds	r2, r4, r7
 800783e:	f040 0301 	orr.w	r3, r0, #1
 8007842:	f047 0701 	orr.w	r7, r7, #1
 8007846:	6067      	str	r7, [r4, #4]
 8007848:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800784c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8007850:	6053      	str	r3, [r2, #4]
 8007852:	f844 000c 	str.w	r0, [r4, ip]
 8007856:	e7e0      	b.n	800781a <_malloc_r+0x62>
 8007858:	0a7b      	lsrs	r3, r7, #9
 800785a:	d02a      	beq.n	80078b2 <_malloc_r+0xfa>
 800785c:	2b04      	cmp	r3, #4
 800785e:	d812      	bhi.n	8007886 <_malloc_r+0xce>
 8007860:	09bb      	lsrs	r3, r7, #6
 8007862:	3338      	adds	r3, #56	; 0x38
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800786a:	6854      	ldr	r4, [r2, #4]
 800786c:	f1a2 0c08 	sub.w	ip, r2, #8
 8007870:	4564      	cmp	r4, ip
 8007872:	d006      	beq.n	8007882 <_malloc_r+0xca>
 8007874:	6862      	ldr	r2, [r4, #4]
 8007876:	f022 0203 	bic.w	r2, r2, #3
 800787a:	1bd0      	subs	r0, r2, r7
 800787c:	280f      	cmp	r0, #15
 800787e:	dd1c      	ble.n	80078ba <_malloc_r+0x102>
 8007880:	3b01      	subs	r3, #1
 8007882:	3301      	adds	r3, #1
 8007884:	e7cf      	b.n	8007826 <_malloc_r+0x6e>
 8007886:	2b14      	cmp	r3, #20
 8007888:	d801      	bhi.n	800788e <_malloc_r+0xd6>
 800788a:	335b      	adds	r3, #91	; 0x5b
 800788c:	e7ea      	b.n	8007864 <_malloc_r+0xac>
 800788e:	2b54      	cmp	r3, #84	; 0x54
 8007890:	d802      	bhi.n	8007898 <_malloc_r+0xe0>
 8007892:	0b3b      	lsrs	r3, r7, #12
 8007894:	336e      	adds	r3, #110	; 0x6e
 8007896:	e7e5      	b.n	8007864 <_malloc_r+0xac>
 8007898:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800789c:	d802      	bhi.n	80078a4 <_malloc_r+0xec>
 800789e:	0bfb      	lsrs	r3, r7, #15
 80078a0:	3377      	adds	r3, #119	; 0x77
 80078a2:	e7df      	b.n	8007864 <_malloc_r+0xac>
 80078a4:	f240 5254 	movw	r2, #1364	; 0x554
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d804      	bhi.n	80078b6 <_malloc_r+0xfe>
 80078ac:	0cbb      	lsrs	r3, r7, #18
 80078ae:	337c      	adds	r3, #124	; 0x7c
 80078b0:	e7d8      	b.n	8007864 <_malloc_r+0xac>
 80078b2:	233f      	movs	r3, #63	; 0x3f
 80078b4:	e7d6      	b.n	8007864 <_malloc_r+0xac>
 80078b6:	237e      	movs	r3, #126	; 0x7e
 80078b8:	e7d4      	b.n	8007864 <_malloc_r+0xac>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	68e1      	ldr	r1, [r4, #12]
 80078be:	db04      	blt.n	80078ca <_malloc_r+0x112>
 80078c0:	68a3      	ldr	r3, [r4, #8]
 80078c2:	60d9      	str	r1, [r3, #12]
 80078c4:	608b      	str	r3, [r1, #8]
 80078c6:	18a3      	adds	r3, r4, r2
 80078c8:	e7a3      	b.n	8007812 <_malloc_r+0x5a>
 80078ca:	460c      	mov	r4, r1
 80078cc:	e7d0      	b.n	8007870 <_malloc_r+0xb8>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80078d4:	db07      	blt.n	80078e6 <_malloc_r+0x12e>
 80078d6:	44a4      	add	ip, r4
 80078d8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80078dc:	f043 0301 	orr.w	r3, r3, #1
 80078e0:	f8cc 3004 	str.w	r3, [ip, #4]
 80078e4:	e799      	b.n	800781a <_malloc_r+0x62>
 80078e6:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80078ea:	6870      	ldr	r0, [r6, #4]
 80078ec:	f080 8094 	bcs.w	8007a18 <_malloc_r+0x260>
 80078f0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80078f4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80078f8:	f04f 0c01 	mov.w	ip, #1
 80078fc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007900:	ea4c 0000 	orr.w	r0, ip, r0
 8007904:	3201      	adds	r2, #1
 8007906:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800790a:	6070      	str	r0, [r6, #4]
 800790c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8007910:	3808      	subs	r0, #8
 8007912:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8007916:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800791a:	f8cc 400c 	str.w	r4, [ip, #12]
 800791e:	2001      	movs	r0, #1
 8007920:	109a      	asrs	r2, r3, #2
 8007922:	fa00 f202 	lsl.w	r2, r0, r2
 8007926:	6870      	ldr	r0, [r6, #4]
 8007928:	4290      	cmp	r0, r2
 800792a:	d326      	bcc.n	800797a <_malloc_r+0x1c2>
 800792c:	4210      	tst	r0, r2
 800792e:	d106      	bne.n	800793e <_malloc_r+0x186>
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	0052      	lsls	r2, r2, #1
 8007936:	4210      	tst	r0, r2
 8007938:	f103 0304 	add.w	r3, r3, #4
 800793c:	d0fa      	beq.n	8007934 <_malloc_r+0x17c>
 800793e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8007942:	46c1      	mov	r9, r8
 8007944:	469e      	mov	lr, r3
 8007946:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800794a:	454c      	cmp	r4, r9
 800794c:	f040 80b8 	bne.w	8007ac0 <_malloc_r+0x308>
 8007950:	f10e 0e01 	add.w	lr, lr, #1
 8007954:	f01e 0f03 	tst.w	lr, #3
 8007958:	f109 0908 	add.w	r9, r9, #8
 800795c:	d1f3      	bne.n	8007946 <_malloc_r+0x18e>
 800795e:	0798      	lsls	r0, r3, #30
 8007960:	f040 80e2 	bne.w	8007b28 <_malloc_r+0x370>
 8007964:	6873      	ldr	r3, [r6, #4]
 8007966:	ea23 0302 	bic.w	r3, r3, r2
 800796a:	6073      	str	r3, [r6, #4]
 800796c:	6870      	ldr	r0, [r6, #4]
 800796e:	0052      	lsls	r2, r2, #1
 8007970:	4290      	cmp	r0, r2
 8007972:	d302      	bcc.n	800797a <_malloc_r+0x1c2>
 8007974:	2a00      	cmp	r2, #0
 8007976:	f040 80e3 	bne.w	8007b40 <_malloc_r+0x388>
 800797a:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800797e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007982:	f023 0903 	bic.w	r9, r3, #3
 8007986:	45b9      	cmp	r9, r7
 8007988:	d304      	bcc.n	8007994 <_malloc_r+0x1dc>
 800798a:	eba9 0207 	sub.w	r2, r9, r7
 800798e:	2a0f      	cmp	r2, #15
 8007990:	f300 8141 	bgt.w	8007c16 <_malloc_r+0x45e>
 8007994:	4b45      	ldr	r3, [pc, #276]	; (8007aac <_malloc_r+0x2f4>)
 8007996:	2008      	movs	r0, #8
 8007998:	6819      	ldr	r1, [r3, #0]
 800799a:	eb0a 0b09 	add.w	fp, sl, r9
 800799e:	3110      	adds	r1, #16
 80079a0:	4439      	add	r1, r7
 80079a2:	9101      	str	r1, [sp, #4]
 80079a4:	f000 fd72 	bl	800848c <sysconf>
 80079a8:	4a41      	ldr	r2, [pc, #260]	; (8007ab0 <_malloc_r+0x2f8>)
 80079aa:	9901      	ldr	r1, [sp, #4]
 80079ac:	6813      	ldr	r3, [r2, #0]
 80079ae:	4680      	mov	r8, r0
 80079b0:	3301      	adds	r3, #1
 80079b2:	bf1f      	itttt	ne
 80079b4:	f101 31ff 	addne.w	r1, r1, #4294967295
 80079b8:	1809      	addne	r1, r1, r0
 80079ba:	4243      	negne	r3, r0
 80079bc:	4019      	andne	r1, r3
 80079be:	4628      	mov	r0, r5
 80079c0:	9101      	str	r1, [sp, #4]
 80079c2:	f000 fcc5 	bl	8008350 <_sbrk_r>
 80079c6:	1c42      	adds	r2, r0, #1
 80079c8:	4604      	mov	r4, r0
 80079ca:	f000 80f7 	beq.w	8007bbc <_malloc_r+0x404>
 80079ce:	4583      	cmp	fp, r0
 80079d0:	9901      	ldr	r1, [sp, #4]
 80079d2:	4a37      	ldr	r2, [pc, #220]	; (8007ab0 <_malloc_r+0x2f8>)
 80079d4:	d902      	bls.n	80079dc <_malloc_r+0x224>
 80079d6:	45b2      	cmp	sl, r6
 80079d8:	f040 80f0 	bne.w	8007bbc <_malloc_r+0x404>
 80079dc:	4b35      	ldr	r3, [pc, #212]	; (8007ab4 <_malloc_r+0x2fc>)
 80079de:	45a3      	cmp	fp, r4
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	f108 3cff 	add.w	ip, r8, #4294967295
 80079e6:	4408      	add	r0, r1
 80079e8:	6018      	str	r0, [r3, #0]
 80079ea:	f040 80ab 	bne.w	8007b44 <_malloc_r+0x38c>
 80079ee:	ea1b 0f0c 	tst.w	fp, ip
 80079f2:	f040 80a7 	bne.w	8007b44 <_malloc_r+0x38c>
 80079f6:	68b2      	ldr	r2, [r6, #8]
 80079f8:	4449      	add	r1, r9
 80079fa:	f041 0101 	orr.w	r1, r1, #1
 80079fe:	6051      	str	r1, [r2, #4]
 8007a00:	4a2d      	ldr	r2, [pc, #180]	; (8007ab8 <_malloc_r+0x300>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6811      	ldr	r1, [r2, #0]
 8007a06:	428b      	cmp	r3, r1
 8007a08:	bf88      	it	hi
 8007a0a:	6013      	strhi	r3, [r2, #0]
 8007a0c:	4a2b      	ldr	r2, [pc, #172]	; (8007abc <_malloc_r+0x304>)
 8007a0e:	6811      	ldr	r1, [r2, #0]
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf88      	it	hi
 8007a14:	6013      	strhi	r3, [r2, #0]
 8007a16:	e0d1      	b.n	8007bbc <_malloc_r+0x404>
 8007a18:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8007a1c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8007a20:	d218      	bcs.n	8007a54 <_malloc_r+0x29c>
 8007a22:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8007a26:	3238      	adds	r2, #56	; 0x38
 8007a28:	f102 0e01 	add.w	lr, r2, #1
 8007a2c:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8007a30:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8007a34:	45f0      	cmp	r8, lr
 8007a36:	d12b      	bne.n	8007a90 <_malloc_r+0x2d8>
 8007a38:	f04f 0c01 	mov.w	ip, #1
 8007a3c:	1092      	asrs	r2, r2, #2
 8007a3e:	fa0c f202 	lsl.w	r2, ip, r2
 8007a42:	4310      	orrs	r0, r2
 8007a44:	6070      	str	r0, [r6, #4]
 8007a46:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8007a4a:	f8c8 4008 	str.w	r4, [r8, #8]
 8007a4e:	f8ce 400c 	str.w	r4, [lr, #12]
 8007a52:	e764      	b.n	800791e <_malloc_r+0x166>
 8007a54:	2a14      	cmp	r2, #20
 8007a56:	d801      	bhi.n	8007a5c <_malloc_r+0x2a4>
 8007a58:	325b      	adds	r2, #91	; 0x5b
 8007a5a:	e7e5      	b.n	8007a28 <_malloc_r+0x270>
 8007a5c:	2a54      	cmp	r2, #84	; 0x54
 8007a5e:	d803      	bhi.n	8007a68 <_malloc_r+0x2b0>
 8007a60:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8007a64:	326e      	adds	r2, #110	; 0x6e
 8007a66:	e7df      	b.n	8007a28 <_malloc_r+0x270>
 8007a68:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007a6c:	d803      	bhi.n	8007a76 <_malloc_r+0x2be>
 8007a6e:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8007a72:	3277      	adds	r2, #119	; 0x77
 8007a74:	e7d8      	b.n	8007a28 <_malloc_r+0x270>
 8007a76:	f240 5e54 	movw	lr, #1364	; 0x554
 8007a7a:	4572      	cmp	r2, lr
 8007a7c:	bf96      	itet	ls
 8007a7e:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8007a82:	227e      	movhi	r2, #126	; 0x7e
 8007a84:	327c      	addls	r2, #124	; 0x7c
 8007a86:	e7cf      	b.n	8007a28 <_malloc_r+0x270>
 8007a88:	f8de e008 	ldr.w	lr, [lr, #8]
 8007a8c:	45f0      	cmp	r8, lr
 8007a8e:	d005      	beq.n	8007a9c <_malloc_r+0x2e4>
 8007a90:	f8de 2004 	ldr.w	r2, [lr, #4]
 8007a94:	f022 0203 	bic.w	r2, r2, #3
 8007a98:	4562      	cmp	r2, ip
 8007a9a:	d8f5      	bhi.n	8007a88 <_malloc_r+0x2d0>
 8007a9c:	f8de 800c 	ldr.w	r8, [lr, #12]
 8007aa0:	e7d1      	b.n	8007a46 <_malloc_r+0x28e>
 8007aa2:	bf00      	nop
 8007aa4:	20000474 	.word	0x20000474
 8007aa8:	2000047c 	.word	0x2000047c
 8007aac:	20000b44 	.word	0x20000b44
 8007ab0:	2000087c 	.word	0x2000087c
 8007ab4:	20000b14 	.word	0x20000b14
 8007ab8:	20000b3c 	.word	0x20000b3c
 8007abc:	20000b40 	.word	0x20000b40
 8007ac0:	6860      	ldr	r0, [r4, #4]
 8007ac2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007ac6:	f020 0003 	bic.w	r0, r0, #3
 8007aca:	eba0 0a07 	sub.w	sl, r0, r7
 8007ace:	f1ba 0f0f 	cmp.w	sl, #15
 8007ad2:	dd12      	ble.n	8007afa <_malloc_r+0x342>
 8007ad4:	68a3      	ldr	r3, [r4, #8]
 8007ad6:	19e2      	adds	r2, r4, r7
 8007ad8:	f047 0701 	orr.w	r7, r7, #1
 8007adc:	6067      	str	r7, [r4, #4]
 8007ade:	f8c3 c00c 	str.w	ip, [r3, #12]
 8007ae2:	f8cc 3008 	str.w	r3, [ip, #8]
 8007ae6:	f04a 0301 	orr.w	r3, sl, #1
 8007aea:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8007aee:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8007af2:	6053      	str	r3, [r2, #4]
 8007af4:	f844 a000 	str.w	sl, [r4, r0]
 8007af8:	e68f      	b.n	800781a <_malloc_r+0x62>
 8007afa:	f1ba 0f00 	cmp.w	sl, #0
 8007afe:	db11      	blt.n	8007b24 <_malloc_r+0x36c>
 8007b00:	4420      	add	r0, r4
 8007b02:	6843      	ldr	r3, [r0, #4]
 8007b04:	f043 0301 	orr.w	r3, r3, #1
 8007b08:	6043      	str	r3, [r0, #4]
 8007b0a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f8c3 c00c 	str.w	ip, [r3, #12]
 8007b14:	f8cc 3008 	str.w	r3, [ip, #8]
 8007b18:	f000 f8ac 	bl	8007c74 <__malloc_unlock>
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	b003      	add	sp, #12
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	4664      	mov	r4, ip
 8007b26:	e710      	b.n	800794a <_malloc_r+0x192>
 8007b28:	f858 0908 	ldr.w	r0, [r8], #-8
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	4540      	cmp	r0, r8
 8007b30:	f43f af15 	beq.w	800795e <_malloc_r+0x1a6>
 8007b34:	e71a      	b.n	800796c <_malloc_r+0x1b4>
 8007b36:	3304      	adds	r3, #4
 8007b38:	0052      	lsls	r2, r2, #1
 8007b3a:	4210      	tst	r0, r2
 8007b3c:	d0fb      	beq.n	8007b36 <_malloc_r+0x37e>
 8007b3e:	e6fe      	b.n	800793e <_malloc_r+0x186>
 8007b40:	4673      	mov	r3, lr
 8007b42:	e7fa      	b.n	8007b3a <_malloc_r+0x382>
 8007b44:	f8d2 e000 	ldr.w	lr, [r2]
 8007b48:	f1be 3fff 	cmp.w	lr, #4294967295
 8007b4c:	bf1b      	ittet	ne
 8007b4e:	eba4 0b0b 	subne.w	fp, r4, fp
 8007b52:	eb0b 0200 	addne.w	r2, fp, r0
 8007b56:	6014      	streq	r4, [r2, #0]
 8007b58:	601a      	strne	r2, [r3, #0]
 8007b5a:	f014 0b07 	ands.w	fp, r4, #7
 8007b5e:	bf0e      	itee	eq
 8007b60:	4658      	moveq	r0, fp
 8007b62:	f1cb 0008 	rsbne	r0, fp, #8
 8007b66:	1824      	addne	r4, r4, r0
 8007b68:	1862      	adds	r2, r4, r1
 8007b6a:	ea02 010c 	and.w	r1, r2, ip
 8007b6e:	4480      	add	r8, r0
 8007b70:	eba8 0801 	sub.w	r8, r8, r1
 8007b74:	ea08 080c 	and.w	r8, r8, ip
 8007b78:	4641      	mov	r1, r8
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	9201      	str	r2, [sp, #4]
 8007b7e:	f000 fbe7 	bl	8008350 <_sbrk_r>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	9a01      	ldr	r2, [sp, #4]
 8007b86:	4b29      	ldr	r3, [pc, #164]	; (8007c2c <_malloc_r+0x474>)
 8007b88:	d107      	bne.n	8007b9a <_malloc_r+0x3e2>
 8007b8a:	f1bb 0f00 	cmp.w	fp, #0
 8007b8e:	d023      	beq.n	8007bd8 <_malloc_r+0x420>
 8007b90:	f04f 0800 	mov.w	r8, #0
 8007b94:	f1ab 0008 	sub.w	r0, fp, #8
 8007b98:	4410      	add	r0, r2
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	1b00      	subs	r0, r0, r4
 8007b9e:	4440      	add	r0, r8
 8007ba0:	4442      	add	r2, r8
 8007ba2:	f040 0001 	orr.w	r0, r0, #1
 8007ba6:	45b2      	cmp	sl, r6
 8007ba8:	60b4      	str	r4, [r6, #8]
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	6060      	str	r0, [r4, #4]
 8007bae:	f43f af27 	beq.w	8007a00 <_malloc_r+0x248>
 8007bb2:	f1b9 0f0f 	cmp.w	r9, #15
 8007bb6:	d812      	bhi.n	8007bde <_malloc_r+0x426>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	6063      	str	r3, [r4, #4]
 8007bbc:	68b3      	ldr	r3, [r6, #8]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f023 0303 	bic.w	r3, r3, #3
 8007bc4:	42bb      	cmp	r3, r7
 8007bc6:	eba3 0207 	sub.w	r2, r3, r7
 8007bca:	d301      	bcc.n	8007bd0 <_malloc_r+0x418>
 8007bcc:	2a0f      	cmp	r2, #15
 8007bce:	dc22      	bgt.n	8007c16 <_malloc_r+0x45e>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 f84f 	bl	8007c74 <__malloc_unlock>
 8007bd6:	e5fb      	b.n	80077d0 <_malloc_r+0x18>
 8007bd8:	4610      	mov	r0, r2
 8007bda:	46d8      	mov	r8, fp
 8007bdc:	e7dd      	b.n	8007b9a <_malloc_r+0x3e2>
 8007bde:	2105      	movs	r1, #5
 8007be0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007be4:	f1a9 090c 	sub.w	r9, r9, #12
 8007be8:	f029 0907 	bic.w	r9, r9, #7
 8007bec:	f002 0201 	and.w	r2, r2, #1
 8007bf0:	ea42 0209 	orr.w	r2, r2, r9
 8007bf4:	f8ca 2004 	str.w	r2, [sl, #4]
 8007bf8:	f1b9 0f0f 	cmp.w	r9, #15
 8007bfc:	eb0a 0209 	add.w	r2, sl, r9
 8007c00:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8007c04:	f67f aefc 	bls.w	8007a00 <_malloc_r+0x248>
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f10a 0108 	add.w	r1, sl, #8
 8007c0e:	f7ff fd0b 	bl	8007628 <_free_r>
 8007c12:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <_malloc_r+0x474>)
 8007c14:	e6f4      	b.n	8007a00 <_malloc_r+0x248>
 8007c16:	68b4      	ldr	r4, [r6, #8]
 8007c18:	f047 0301 	orr.w	r3, r7, #1
 8007c1c:	f042 0201 	orr.w	r2, r2, #1
 8007c20:	4427      	add	r7, r4
 8007c22:	6063      	str	r3, [r4, #4]
 8007c24:	60b7      	str	r7, [r6, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	e5f7      	b.n	800781a <_malloc_r+0x62>
 8007c2a:	bf00      	nop
 8007c2c:	20000b14 	.word	0x20000b14

08007c30 <memchr>:
 8007c30:	4603      	mov	r3, r0
 8007c32:	b510      	push	{r4, lr}
 8007c34:	b2c9      	uxtb	r1, r1
 8007c36:	4402      	add	r2, r0
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	d101      	bne.n	8007c42 <memchr+0x12>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	e003      	b.n	8007c4a <memchr+0x1a>
 8007c42:	7804      	ldrb	r4, [r0, #0]
 8007c44:	3301      	adds	r3, #1
 8007c46:	428c      	cmp	r4, r1
 8007c48:	d1f6      	bne.n	8007c38 <memchr+0x8>
 8007c4a:	bd10      	pop	{r4, pc}

08007c4c <memcpy>:
 8007c4c:	440a      	add	r2, r1
 8007c4e:	4291      	cmp	r1, r2
 8007c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c54:	d100      	bne.n	8007c58 <memcpy+0xc>
 8007c56:	4770      	bx	lr
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c5e:	4291      	cmp	r1, r2
 8007c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c64:	d1f9      	bne.n	8007c5a <memcpy+0xe>
 8007c66:	bd10      	pop	{r4, pc}

08007c68 <__malloc_lock>:
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <__malloc_lock+0x8>)
 8007c6a:	f7ff bda3 	b.w	80077b4 <__retarget_lock_acquire_recursive>
 8007c6e:	bf00      	nop
 8007c70:	20000b11 	.word	0x20000b11

08007c74 <__malloc_unlock>:
 8007c74:	4801      	ldr	r0, [pc, #4]	; (8007c7c <__malloc_unlock+0x8>)
 8007c76:	f7ff bd9e 	b.w	80077b6 <__retarget_lock_release_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	20000b11 	.word	0x20000b11

08007c80 <_Balloc>:
 8007c80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007c82:	b570      	push	{r4, r5, r6, lr}
 8007c84:	4605      	mov	r5, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	b17b      	cbz	r3, 8007caa <_Balloc+0x2a>
 8007c8a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007c8c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007c90:	b9a0      	cbnz	r0, 8007cbc <_Balloc+0x3c>
 8007c92:	2101      	movs	r1, #1
 8007c94:	fa01 f604 	lsl.w	r6, r1, r4
 8007c98:	1d72      	adds	r2, r6, #5
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	0092      	lsls	r2, r2, #2
 8007c9e:	f000 fc63 	bl	8008568 <_calloc_r>
 8007ca2:	b148      	cbz	r0, 8007cb8 <_Balloc+0x38>
 8007ca4:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8007ca8:	e00b      	b.n	8007cc2 <_Balloc+0x42>
 8007caa:	2221      	movs	r2, #33	; 0x21
 8007cac:	2104      	movs	r1, #4
 8007cae:	f000 fc5b 	bl	8008568 <_calloc_r>
 8007cb2:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d1e8      	bne.n	8007c8a <_Balloc+0xa>
 8007cb8:	2000      	movs	r0, #0
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	6802      	ldr	r2, [r0, #0]
 8007cbe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cc8:	e7f7      	b.n	8007cba <_Balloc+0x3a>

08007cca <_Bfree>:
 8007cca:	b131      	cbz	r1, 8007cda <_Bfree+0x10>
 8007ccc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007cce:	684a      	ldr	r2, [r1, #4]
 8007cd0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007cd4:	6008      	str	r0, [r1, #0]
 8007cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007cda:	4770      	bx	lr

08007cdc <__multadd>:
 8007cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	461e      	mov	r6, r3
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	690d      	ldr	r5, [r1, #16]
 8007cea:	f101 0c14 	add.w	ip, r1, #20
 8007cee:	f8dc 3000 	ldr.w	r3, [ip]
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	b299      	uxth	r1, r3
 8007cf6:	fb02 6101 	mla	r1, r2, r1, r6
 8007cfa:	0c1e      	lsrs	r6, r3, #16
 8007cfc:	0c0b      	lsrs	r3, r1, #16
 8007cfe:	fb02 3306 	mla	r3, r2, r6, r3
 8007d02:	b289      	uxth	r1, r1
 8007d04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d08:	4285      	cmp	r5, r0
 8007d0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d0e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d12:	dcec      	bgt.n	8007cee <__multadd+0x12>
 8007d14:	b30e      	cbz	r6, 8007d5a <__multadd+0x7e>
 8007d16:	68a3      	ldr	r3, [r4, #8]
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc19      	bgt.n	8007d50 <__multadd+0x74>
 8007d1c:	6861      	ldr	r1, [r4, #4]
 8007d1e:	4638      	mov	r0, r7
 8007d20:	3101      	adds	r1, #1
 8007d22:	f7ff ffad 	bl	8007c80 <_Balloc>
 8007d26:	4680      	mov	r8, r0
 8007d28:	b928      	cbnz	r0, 8007d36 <__multadd+0x5a>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	21b5      	movs	r1, #181	; 0xb5
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <__multadd+0x84>)
 8007d30:	480c      	ldr	r0, [pc, #48]	; (8007d64 <__multadd+0x88>)
 8007d32:	f000 fbfb 	bl	800852c <__assert_func>
 8007d36:	6922      	ldr	r2, [r4, #16]
 8007d38:	f104 010c 	add.w	r1, r4, #12
 8007d3c:	3202      	adds	r2, #2
 8007d3e:	0092      	lsls	r2, r2, #2
 8007d40:	300c      	adds	r0, #12
 8007d42:	f7ff ff83 	bl	8007c4c <memcpy>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4638      	mov	r0, r7
 8007d4a:	f7ff ffbe 	bl	8007cca <_Bfree>
 8007d4e:	4644      	mov	r4, r8
 8007d50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d54:	3501      	adds	r5, #1
 8007d56:	615e      	str	r6, [r3, #20]
 8007d58:	6125      	str	r5, [r4, #16]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d60:	0801f811 	.word	0x0801f811
 8007d64:	0801f87d 	.word	0x0801f87d

08007d68 <__hi0bits>:
 8007d68:	0c02      	lsrs	r2, r0, #16
 8007d6a:	0412      	lsls	r2, r2, #16
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	b9ca      	cbnz	r2, 8007da4 <__hi0bits+0x3c>
 8007d70:	0403      	lsls	r3, r0, #16
 8007d72:	2010      	movs	r0, #16
 8007d74:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d78:	bf04      	itt	eq
 8007d7a:	021b      	lsleq	r3, r3, #8
 8007d7c:	3008      	addeq	r0, #8
 8007d7e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d82:	bf04      	itt	eq
 8007d84:	011b      	lsleq	r3, r3, #4
 8007d86:	3004      	addeq	r0, #4
 8007d88:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d8c:	bf04      	itt	eq
 8007d8e:	009b      	lsleq	r3, r3, #2
 8007d90:	3002      	addeq	r0, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	db05      	blt.n	8007da2 <__hi0bits+0x3a>
 8007d96:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007d9a:	f100 0001 	add.w	r0, r0, #1
 8007d9e:	bf08      	it	eq
 8007da0:	2020      	moveq	r0, #32
 8007da2:	4770      	bx	lr
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7e5      	b.n	8007d74 <__hi0bits+0xc>

08007da8 <__lo0bits>:
 8007da8:	6803      	ldr	r3, [r0, #0]
 8007daa:	4602      	mov	r2, r0
 8007dac:	f013 0007 	ands.w	r0, r3, #7
 8007db0:	d00b      	beq.n	8007dca <__lo0bits+0x22>
 8007db2:	07d9      	lsls	r1, r3, #31
 8007db4:	d421      	bmi.n	8007dfa <__lo0bits+0x52>
 8007db6:	0798      	lsls	r0, r3, #30
 8007db8:	bf49      	itett	mi
 8007dba:	085b      	lsrmi	r3, r3, #1
 8007dbc:	089b      	lsrpl	r3, r3, #2
 8007dbe:	2001      	movmi	r0, #1
 8007dc0:	6013      	strmi	r3, [r2, #0]
 8007dc2:	bf5c      	itt	pl
 8007dc4:	2002      	movpl	r0, #2
 8007dc6:	6013      	strpl	r3, [r2, #0]
 8007dc8:	4770      	bx	lr
 8007dca:	b299      	uxth	r1, r3
 8007dcc:	b909      	cbnz	r1, 8007dd2 <__lo0bits+0x2a>
 8007dce:	2010      	movs	r0, #16
 8007dd0:	0c1b      	lsrs	r3, r3, #16
 8007dd2:	b2d9      	uxtb	r1, r3
 8007dd4:	b909      	cbnz	r1, 8007dda <__lo0bits+0x32>
 8007dd6:	3008      	adds	r0, #8
 8007dd8:	0a1b      	lsrs	r3, r3, #8
 8007dda:	0719      	lsls	r1, r3, #28
 8007ddc:	bf04      	itt	eq
 8007dde:	091b      	lsreq	r3, r3, #4
 8007de0:	3004      	addeq	r0, #4
 8007de2:	0799      	lsls	r1, r3, #30
 8007de4:	bf04      	itt	eq
 8007de6:	089b      	lsreq	r3, r3, #2
 8007de8:	3002      	addeq	r0, #2
 8007dea:	07d9      	lsls	r1, r3, #31
 8007dec:	d403      	bmi.n	8007df6 <__lo0bits+0x4e>
 8007dee:	085b      	lsrs	r3, r3, #1
 8007df0:	f100 0001 	add.w	r0, r0, #1
 8007df4:	d003      	beq.n	8007dfe <__lo0bits+0x56>
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	4770      	bx	lr
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	4770      	bx	lr
 8007dfe:	2020      	movs	r0, #32
 8007e00:	4770      	bx	lr
	...

08007e04 <__i2b>:
 8007e04:	b510      	push	{r4, lr}
 8007e06:	460c      	mov	r4, r1
 8007e08:	2101      	movs	r1, #1
 8007e0a:	f7ff ff39 	bl	8007c80 <_Balloc>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	b928      	cbnz	r0, 8007e1e <__i2b+0x1a>
 8007e12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e16:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <__i2b+0x24>)
 8007e18:	4804      	ldr	r0, [pc, #16]	; (8007e2c <__i2b+0x28>)
 8007e1a:	f000 fb87 	bl	800852c <__assert_func>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	6144      	str	r4, [r0, #20]
 8007e22:	6103      	str	r3, [r0, #16]
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	bf00      	nop
 8007e28:	0801f811 	.word	0x0801f811
 8007e2c:	0801f87d 	.word	0x0801f87d

08007e30 <__multiply>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	4691      	mov	r9, r2
 8007e36:	690a      	ldr	r2, [r1, #16]
 8007e38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	bfbe      	ittt	lt
 8007e42:	460b      	movlt	r3, r1
 8007e44:	464c      	movlt	r4, r9
 8007e46:	4699      	movlt	r9, r3
 8007e48:	6927      	ldr	r7, [r4, #16]
 8007e4a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e4e:	68a3      	ldr	r3, [r4, #8]
 8007e50:	6861      	ldr	r1, [r4, #4]
 8007e52:	eb07 060a 	add.w	r6, r7, sl
 8007e56:	42b3      	cmp	r3, r6
 8007e58:	b085      	sub	sp, #20
 8007e5a:	bfb8      	it	lt
 8007e5c:	3101      	addlt	r1, #1
 8007e5e:	f7ff ff0f 	bl	8007c80 <_Balloc>
 8007e62:	b930      	cbnz	r0, 8007e72 <__multiply+0x42>
 8007e64:	4602      	mov	r2, r0
 8007e66:	f240 115d 	movw	r1, #349	; 0x15d
 8007e6a:	4b43      	ldr	r3, [pc, #268]	; (8007f78 <__multiply+0x148>)
 8007e6c:	4843      	ldr	r0, [pc, #268]	; (8007f7c <__multiply+0x14c>)
 8007e6e:	f000 fb5d 	bl	800852c <__assert_func>
 8007e72:	f100 0514 	add.w	r5, r0, #20
 8007e76:	462b      	mov	r3, r5
 8007e78:	2200      	movs	r2, #0
 8007e7a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e7e:	4543      	cmp	r3, r8
 8007e80:	d321      	bcc.n	8007ec6 <__multiply+0x96>
 8007e82:	f104 0314 	add.w	r3, r4, #20
 8007e86:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e8a:	f109 0314 	add.w	r3, r9, #20
 8007e8e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e92:	9202      	str	r2, [sp, #8]
 8007e94:	1b3a      	subs	r2, r7, r4
 8007e96:	3a15      	subs	r2, #21
 8007e98:	f022 0203 	bic.w	r2, r2, #3
 8007e9c:	3204      	adds	r2, #4
 8007e9e:	f104 0115 	add.w	r1, r4, #21
 8007ea2:	428f      	cmp	r7, r1
 8007ea4:	bf38      	it	cc
 8007ea6:	2204      	movcc	r2, #4
 8007ea8:	9201      	str	r2, [sp, #4]
 8007eaa:	9a02      	ldr	r2, [sp, #8]
 8007eac:	9303      	str	r3, [sp, #12]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d80c      	bhi.n	8007ecc <__multiply+0x9c>
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	dd03      	ble.n	8007ebe <__multiply+0x8e>
 8007eb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d059      	beq.n	8007f72 <__multiply+0x142>
 8007ebe:	6106      	str	r6, [r0, #16]
 8007ec0:	b005      	add	sp, #20
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	f843 2b04 	str.w	r2, [r3], #4
 8007eca:	e7d8      	b.n	8007e7e <__multiply+0x4e>
 8007ecc:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ed0:	f1ba 0f00 	cmp.w	sl, #0
 8007ed4:	d023      	beq.n	8007f1e <__multiply+0xee>
 8007ed6:	46a9      	mov	r9, r5
 8007ed8:	f04f 0c00 	mov.w	ip, #0
 8007edc:	f104 0e14 	add.w	lr, r4, #20
 8007ee0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ee4:	f8d9 1000 	ldr.w	r1, [r9]
 8007ee8:	fa1f fb82 	uxth.w	fp, r2
 8007eec:	b289      	uxth	r1, r1
 8007eee:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ef2:	4461      	add	r1, ip
 8007ef4:	f8d9 c000 	ldr.w	ip, [r9]
 8007ef8:	0c12      	lsrs	r2, r2, #16
 8007efa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007efe:	fb0a c202 	mla	r2, sl, r2, ip
 8007f02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f06:	b289      	uxth	r1, r1
 8007f08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f0c:	4577      	cmp	r7, lr
 8007f0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f12:	f849 1b04 	str.w	r1, [r9], #4
 8007f16:	d8e3      	bhi.n	8007ee0 <__multiply+0xb0>
 8007f18:	9a01      	ldr	r2, [sp, #4]
 8007f1a:	f845 c002 	str.w	ip, [r5, r2]
 8007f1e:	9a03      	ldr	r2, [sp, #12]
 8007f20:	3304      	adds	r3, #4
 8007f22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f26:	f1b9 0f00 	cmp.w	r9, #0
 8007f2a:	d020      	beq.n	8007f6e <__multiply+0x13e>
 8007f2c:	46ae      	mov	lr, r5
 8007f2e:	f04f 0a00 	mov.w	sl, #0
 8007f32:	6829      	ldr	r1, [r5, #0]
 8007f34:	f104 0c14 	add.w	ip, r4, #20
 8007f38:	f8bc b000 	ldrh.w	fp, [ip]
 8007f3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f40:	b289      	uxth	r1, r1
 8007f42:	fb09 220b 	mla	r2, r9, fp, r2
 8007f46:	4492      	add	sl, r2
 8007f48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f4c:	f84e 1b04 	str.w	r1, [lr], #4
 8007f50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f54:	f8be 1000 	ldrh.w	r1, [lr]
 8007f58:	0c12      	lsrs	r2, r2, #16
 8007f5a:	fb09 1102 	mla	r1, r9, r2, r1
 8007f5e:	4567      	cmp	r7, ip
 8007f60:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f68:	d8e6      	bhi.n	8007f38 <__multiply+0x108>
 8007f6a:	9a01      	ldr	r2, [sp, #4]
 8007f6c:	50a9      	str	r1, [r5, r2]
 8007f6e:	3504      	adds	r5, #4
 8007f70:	e79b      	b.n	8007eaa <__multiply+0x7a>
 8007f72:	3e01      	subs	r6, #1
 8007f74:	e79d      	b.n	8007eb2 <__multiply+0x82>
 8007f76:	bf00      	nop
 8007f78:	0801f811 	.word	0x0801f811
 8007f7c:	0801f87d 	.word	0x0801f87d

08007f80 <__pow5mult>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	4615      	mov	r5, r2
 8007f86:	f012 0203 	ands.w	r2, r2, #3
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460f      	mov	r7, r1
 8007f8e:	d007      	beq.n	8007fa0 <__pow5mult+0x20>
 8007f90:	4c1a      	ldr	r4, [pc, #104]	; (8007ffc <__pow5mult+0x7c>)
 8007f92:	3a01      	subs	r2, #1
 8007f94:	2300      	movs	r3, #0
 8007f96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f9a:	f7ff fe9f 	bl	8007cdc <__multadd>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	10ad      	asrs	r5, r5, #2
 8007fa2:	d027      	beq.n	8007ff4 <__pow5mult+0x74>
 8007fa4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8007fa6:	b944      	cbnz	r4, 8007fba <__pow5mult+0x3a>
 8007fa8:	f240 2171 	movw	r1, #625	; 0x271
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff ff29 	bl	8007e04 <__i2b>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	64b0      	str	r0, [r6, #72]	; 0x48
 8007fb8:	6003      	str	r3, [r0, #0]
 8007fba:	f04f 0900 	mov.w	r9, #0
 8007fbe:	07eb      	lsls	r3, r5, #31
 8007fc0:	d50a      	bpl.n	8007fd8 <__pow5mult+0x58>
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ff32 	bl	8007e30 <__multiply>
 8007fcc:	4680      	mov	r8, r0
 8007fce:	4639      	mov	r1, r7
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff fe7a 	bl	8007cca <_Bfree>
 8007fd6:	4647      	mov	r7, r8
 8007fd8:	106d      	asrs	r5, r5, #1
 8007fda:	d00b      	beq.n	8007ff4 <__pow5mult+0x74>
 8007fdc:	6820      	ldr	r0, [r4, #0]
 8007fde:	b938      	cbnz	r0, 8007ff0 <__pow5mult+0x70>
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff ff23 	bl	8007e30 <__multiply>
 8007fea:	6020      	str	r0, [r4, #0]
 8007fec:	f8c0 9000 	str.w	r9, [r0]
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	e7e4      	b.n	8007fbe <__pow5mult+0x3e>
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffa:	bf00      	nop
 8007ffc:	0801f9d0 	.word	0x0801f9d0

08008000 <__lshift>:
 8008000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	460c      	mov	r4, r1
 8008006:	4607      	mov	r7, r0
 8008008:	4691      	mov	r9, r2
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	6849      	ldr	r1, [r1, #4]
 800800e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008018:	f108 0601 	add.w	r6, r8, #1
 800801c:	42b3      	cmp	r3, r6
 800801e:	db0b      	blt.n	8008038 <__lshift+0x38>
 8008020:	4638      	mov	r0, r7
 8008022:	f7ff fe2d 	bl	8007c80 <_Balloc>
 8008026:	4605      	mov	r5, r0
 8008028:	b948      	cbnz	r0, 800803e <__lshift+0x3e>
 800802a:	4602      	mov	r2, r0
 800802c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008030:	4b29      	ldr	r3, [pc, #164]	; (80080d8 <__lshift+0xd8>)
 8008032:	482a      	ldr	r0, [pc, #168]	; (80080dc <__lshift+0xdc>)
 8008034:	f000 fa7a 	bl	800852c <__assert_func>
 8008038:	3101      	adds	r1, #1
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	e7ee      	b.n	800801c <__lshift+0x1c>
 800803e:	2300      	movs	r3, #0
 8008040:	f100 0114 	add.w	r1, r0, #20
 8008044:	f100 0210 	add.w	r2, r0, #16
 8008048:	4618      	mov	r0, r3
 800804a:	4553      	cmp	r3, sl
 800804c:	db37      	blt.n	80080be <__lshift+0xbe>
 800804e:	6920      	ldr	r0, [r4, #16]
 8008050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008054:	f104 0314 	add.w	r3, r4, #20
 8008058:	f019 091f 	ands.w	r9, r9, #31
 800805c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008060:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008064:	d02f      	beq.n	80080c6 <__lshift+0xc6>
 8008066:	468a      	mov	sl, r1
 8008068:	f04f 0c00 	mov.w	ip, #0
 800806c:	f1c9 0e20 	rsb	lr, r9, #32
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	fa02 f209 	lsl.w	r2, r2, r9
 8008076:	ea42 020c 	orr.w	r2, r2, ip
 800807a:	f84a 2b04 	str.w	r2, [sl], #4
 800807e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008082:	4298      	cmp	r0, r3
 8008084:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008088:	d8f2      	bhi.n	8008070 <__lshift+0x70>
 800808a:	1b03      	subs	r3, r0, r4
 800808c:	3b15      	subs	r3, #21
 800808e:	f023 0303 	bic.w	r3, r3, #3
 8008092:	3304      	adds	r3, #4
 8008094:	f104 0215 	add.w	r2, r4, #21
 8008098:	4290      	cmp	r0, r2
 800809a:	bf38      	it	cc
 800809c:	2304      	movcc	r3, #4
 800809e:	f841 c003 	str.w	ip, [r1, r3]
 80080a2:	f1bc 0f00 	cmp.w	ip, #0
 80080a6:	d001      	beq.n	80080ac <__lshift+0xac>
 80080a8:	f108 0602 	add.w	r6, r8, #2
 80080ac:	3e01      	subs	r6, #1
 80080ae:	4638      	mov	r0, r7
 80080b0:	4621      	mov	r1, r4
 80080b2:	612e      	str	r6, [r5, #16]
 80080b4:	f7ff fe09 	bl	8007cca <_Bfree>
 80080b8:	4628      	mov	r0, r5
 80080ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080be:	f842 0f04 	str.w	r0, [r2, #4]!
 80080c2:	3301      	adds	r3, #1
 80080c4:	e7c1      	b.n	800804a <__lshift+0x4a>
 80080c6:	3904      	subs	r1, #4
 80080c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080cc:	4298      	cmp	r0, r3
 80080ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80080d2:	d8f9      	bhi.n	80080c8 <__lshift+0xc8>
 80080d4:	e7ea      	b.n	80080ac <__lshift+0xac>
 80080d6:	bf00      	nop
 80080d8:	0801f811 	.word	0x0801f811
 80080dc:	0801f87d 	.word	0x0801f87d

080080e0 <__mcmp>:
 80080e0:	4603      	mov	r3, r0
 80080e2:	690a      	ldr	r2, [r1, #16]
 80080e4:	6900      	ldr	r0, [r0, #16]
 80080e6:	b530      	push	{r4, r5, lr}
 80080e8:	1a80      	subs	r0, r0, r2
 80080ea:	d10d      	bne.n	8008108 <__mcmp+0x28>
 80080ec:	3314      	adds	r3, #20
 80080ee:	3114      	adds	r1, #20
 80080f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008100:	4295      	cmp	r5, r2
 8008102:	d002      	beq.n	800810a <__mcmp+0x2a>
 8008104:	d304      	bcc.n	8008110 <__mcmp+0x30>
 8008106:	2001      	movs	r0, #1
 8008108:	bd30      	pop	{r4, r5, pc}
 800810a:	42a3      	cmp	r3, r4
 800810c:	d3f4      	bcc.n	80080f8 <__mcmp+0x18>
 800810e:	e7fb      	b.n	8008108 <__mcmp+0x28>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	e7f8      	b.n	8008108 <__mcmp+0x28>
	...

08008118 <__mdiff>:
 8008118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	460d      	mov	r5, r1
 800811e:	4607      	mov	r7, r0
 8008120:	4611      	mov	r1, r2
 8008122:	4628      	mov	r0, r5
 8008124:	4614      	mov	r4, r2
 8008126:	f7ff ffdb 	bl	80080e0 <__mcmp>
 800812a:	1e06      	subs	r6, r0, #0
 800812c:	d111      	bne.n	8008152 <__mdiff+0x3a>
 800812e:	4631      	mov	r1, r6
 8008130:	4638      	mov	r0, r7
 8008132:	f7ff fda5 	bl	8007c80 <_Balloc>
 8008136:	4602      	mov	r2, r0
 8008138:	b928      	cbnz	r0, 8008146 <__mdiff+0x2e>
 800813a:	f240 2132 	movw	r1, #562	; 0x232
 800813e:	4b3a      	ldr	r3, [pc, #232]	; (8008228 <__mdiff+0x110>)
 8008140:	483a      	ldr	r0, [pc, #232]	; (800822c <__mdiff+0x114>)
 8008142:	f000 f9f3 	bl	800852c <__assert_func>
 8008146:	2301      	movs	r3, #1
 8008148:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800814c:	4610      	mov	r0, r2
 800814e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008152:	bfa4      	itt	ge
 8008154:	4623      	movge	r3, r4
 8008156:	462c      	movge	r4, r5
 8008158:	4638      	mov	r0, r7
 800815a:	6861      	ldr	r1, [r4, #4]
 800815c:	bfa6      	itte	ge
 800815e:	461d      	movge	r5, r3
 8008160:	2600      	movge	r6, #0
 8008162:	2601      	movlt	r6, #1
 8008164:	f7ff fd8c 	bl	8007c80 <_Balloc>
 8008168:	4602      	mov	r2, r0
 800816a:	b918      	cbnz	r0, 8008174 <__mdiff+0x5c>
 800816c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008170:	4b2d      	ldr	r3, [pc, #180]	; (8008228 <__mdiff+0x110>)
 8008172:	e7e5      	b.n	8008140 <__mdiff+0x28>
 8008174:	f102 0814 	add.w	r8, r2, #20
 8008178:	46c2      	mov	sl, r8
 800817a:	f04f 0c00 	mov.w	ip, #0
 800817e:	6927      	ldr	r7, [r4, #16]
 8008180:	60c6      	str	r6, [r0, #12]
 8008182:	692e      	ldr	r6, [r5, #16]
 8008184:	f104 0014 	add.w	r0, r4, #20
 8008188:	f105 0914 	add.w	r9, r5, #20
 800818c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008190:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008194:	3410      	adds	r4, #16
 8008196:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800819a:	f859 3b04 	ldr.w	r3, [r9], #4
 800819e:	fa1f f18b 	uxth.w	r1, fp
 80081a2:	448c      	add	ip, r1
 80081a4:	b299      	uxth	r1, r3
 80081a6:	0c1b      	lsrs	r3, r3, #16
 80081a8:	ebac 0101 	sub.w	r1, ip, r1
 80081ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80081b4:	b289      	uxth	r1, r1
 80081b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80081ba:	454e      	cmp	r6, r9
 80081bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80081c0:	f84a 3b04 	str.w	r3, [sl], #4
 80081c4:	d8e7      	bhi.n	8008196 <__mdiff+0x7e>
 80081c6:	1b73      	subs	r3, r6, r5
 80081c8:	3b15      	subs	r3, #21
 80081ca:	f023 0303 	bic.w	r3, r3, #3
 80081ce:	3515      	adds	r5, #21
 80081d0:	3304      	adds	r3, #4
 80081d2:	42ae      	cmp	r6, r5
 80081d4:	bf38      	it	cc
 80081d6:	2304      	movcc	r3, #4
 80081d8:	4418      	add	r0, r3
 80081da:	4443      	add	r3, r8
 80081dc:	461e      	mov	r6, r3
 80081de:	4605      	mov	r5, r0
 80081e0:	4575      	cmp	r5, lr
 80081e2:	d30e      	bcc.n	8008202 <__mdiff+0xea>
 80081e4:	f10e 0103 	add.w	r1, lr, #3
 80081e8:	1a09      	subs	r1, r1, r0
 80081ea:	f021 0103 	bic.w	r1, r1, #3
 80081ee:	3803      	subs	r0, #3
 80081f0:	4586      	cmp	lr, r0
 80081f2:	bf38      	it	cc
 80081f4:	2100      	movcc	r1, #0
 80081f6:	4419      	add	r1, r3
 80081f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80081fc:	b18b      	cbz	r3, 8008222 <__mdiff+0x10a>
 80081fe:	6117      	str	r7, [r2, #16]
 8008200:	e7a4      	b.n	800814c <__mdiff+0x34>
 8008202:	f855 8b04 	ldr.w	r8, [r5], #4
 8008206:	fa1f f188 	uxth.w	r1, r8
 800820a:	4461      	add	r1, ip
 800820c:	140c      	asrs	r4, r1, #16
 800820e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008212:	b289      	uxth	r1, r1
 8008214:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008218:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800821c:	f846 1b04 	str.w	r1, [r6], #4
 8008220:	e7de      	b.n	80081e0 <__mdiff+0xc8>
 8008222:	3f01      	subs	r7, #1
 8008224:	e7e8      	b.n	80081f8 <__mdiff+0xe0>
 8008226:	bf00      	nop
 8008228:	0801f811 	.word	0x0801f811
 800822c:	0801f87d 	.word	0x0801f87d

08008230 <__d2b>:
 8008230:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008234:	2101      	movs	r1, #1
 8008236:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800823a:	4690      	mov	r8, r2
 800823c:	461d      	mov	r5, r3
 800823e:	f7ff fd1f 	bl	8007c80 <_Balloc>
 8008242:	4604      	mov	r4, r0
 8008244:	b930      	cbnz	r0, 8008254 <__d2b+0x24>
 8008246:	4602      	mov	r2, r0
 8008248:	f240 310a 	movw	r1, #778	; 0x30a
 800824c:	4b24      	ldr	r3, [pc, #144]	; (80082e0 <__d2b+0xb0>)
 800824e:	4825      	ldr	r0, [pc, #148]	; (80082e4 <__d2b+0xb4>)
 8008250:	f000 f96c 	bl	800852c <__assert_func>
 8008254:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008258:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800825c:	bb2d      	cbnz	r5, 80082aa <__d2b+0x7a>
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	f1b8 0300 	subs.w	r3, r8, #0
 8008264:	d026      	beq.n	80082b4 <__d2b+0x84>
 8008266:	4668      	mov	r0, sp
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	f7ff fd9d 	bl	8007da8 <__lo0bits>
 800826e:	9900      	ldr	r1, [sp, #0]
 8008270:	b1f0      	cbz	r0, 80082b0 <__d2b+0x80>
 8008272:	9a01      	ldr	r2, [sp, #4]
 8008274:	f1c0 0320 	rsb	r3, r0, #32
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	430b      	orrs	r3, r1
 800827e:	40c2      	lsrs	r2, r0
 8008280:	6163      	str	r3, [r4, #20]
 8008282:	9201      	str	r2, [sp, #4]
 8008284:	9b01      	ldr	r3, [sp, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	bf14      	ite	ne
 800828a:	2102      	movne	r1, #2
 800828c:	2101      	moveq	r1, #1
 800828e:	61a3      	str	r3, [r4, #24]
 8008290:	6121      	str	r1, [r4, #16]
 8008292:	b1c5      	cbz	r5, 80082c6 <__d2b+0x96>
 8008294:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008298:	4405      	add	r5, r0
 800829a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800829e:	603d      	str	r5, [r7, #0]
 80082a0:	6030      	str	r0, [r6, #0]
 80082a2:	4620      	mov	r0, r4
 80082a4:	b002      	add	sp, #8
 80082a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082ae:	e7d6      	b.n	800825e <__d2b+0x2e>
 80082b0:	6161      	str	r1, [r4, #20]
 80082b2:	e7e7      	b.n	8008284 <__d2b+0x54>
 80082b4:	a801      	add	r0, sp, #4
 80082b6:	f7ff fd77 	bl	8007da8 <__lo0bits>
 80082ba:	2101      	movs	r1, #1
 80082bc:	9b01      	ldr	r3, [sp, #4]
 80082be:	6121      	str	r1, [r4, #16]
 80082c0:	6163      	str	r3, [r4, #20]
 80082c2:	3020      	adds	r0, #32
 80082c4:	e7e5      	b.n	8008292 <__d2b+0x62>
 80082c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80082ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082ce:	6038      	str	r0, [r7, #0]
 80082d0:	6918      	ldr	r0, [r3, #16]
 80082d2:	f7ff fd49 	bl	8007d68 <__hi0bits>
 80082d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80082da:	6031      	str	r1, [r6, #0]
 80082dc:	e7e1      	b.n	80082a2 <__d2b+0x72>
 80082de:	bf00      	nop
 80082e0:	0801f811 	.word	0x0801f811
 80082e4:	0801f87d 	.word	0x0801f87d

080082e8 <frexp>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	4617      	mov	r7, r2
 80082ec:	2200      	movs	r2, #0
 80082ee:	603a      	str	r2, [r7, #0]
 80082f0:	4a14      	ldr	r2, [pc, #80]	; (8008344 <frexp+0x5c>)
 80082f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80082f6:	4296      	cmp	r6, r2
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	460b      	mov	r3, r1
 80082fe:	dc1e      	bgt.n	800833e <frexp+0x56>
 8008300:	4602      	mov	r2, r0
 8008302:	4332      	orrs	r2, r6
 8008304:	d01b      	beq.n	800833e <frexp+0x56>
 8008306:	4a10      	ldr	r2, [pc, #64]	; (8008348 <frexp+0x60>)
 8008308:	400a      	ands	r2, r1
 800830a:	b952      	cbnz	r2, 8008322 <frexp+0x3a>
 800830c:	2200      	movs	r2, #0
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <frexp+0x64>)
 8008310:	f7f8 f94e 	bl	80005b0 <__aeabi_dmul>
 8008314:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8008318:	4604      	mov	r4, r0
 800831a:	460b      	mov	r3, r1
 800831c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008320:	603a      	str	r2, [r7, #0]
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	1536      	asrs	r6, r6, #20
 8008326:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800832a:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 800832e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008332:	4416      	add	r6, r2
 8008334:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8008338:	603e      	str	r6, [r7, #0]
 800833a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008344:	7fefffff 	.word	0x7fefffff
 8008348:	7ff00000 	.word	0x7ff00000
 800834c:	43500000 	.word	0x43500000

08008350 <_sbrk_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	2300      	movs	r3, #0
 8008354:	4d05      	ldr	r5, [pc, #20]	; (800836c <_sbrk_r+0x1c>)
 8008356:	4604      	mov	r4, r0
 8008358:	4608      	mov	r0, r1
 800835a:	602b      	str	r3, [r5, #0]
 800835c:	f7fa fa30 	bl	80027c0 <_sbrk>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_sbrk_r+0x1a>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_sbrk_r+0x1a>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	20000b48 	.word	0x20000b48

08008370 <strncpy>:
 8008370:	4603      	mov	r3, r0
 8008372:	b510      	push	{r4, lr}
 8008374:	3901      	subs	r1, #1
 8008376:	b132      	cbz	r2, 8008386 <strncpy+0x16>
 8008378:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800837c:	3a01      	subs	r2, #1
 800837e:	f803 4b01 	strb.w	r4, [r3], #1
 8008382:	2c00      	cmp	r4, #0
 8008384:	d1f7      	bne.n	8008376 <strncpy+0x6>
 8008386:	2100      	movs	r1, #0
 8008388:	441a      	add	r2, r3
 800838a:	4293      	cmp	r3, r2
 800838c:	d100      	bne.n	8008390 <strncpy+0x20>
 800838e:	bd10      	pop	{r4, pc}
 8008390:	f803 1b01 	strb.w	r1, [r3], #1
 8008394:	e7f9      	b.n	800838a <strncpy+0x1a>

08008396 <__ssprint_r>:
 8008396:	6893      	ldr	r3, [r2, #8]
 8008398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	4680      	mov	r8, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	4617      	mov	r7, r2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d061      	beq.n	800846a <__ssprint_r+0xd4>
 80083a6:	2300      	movs	r3, #0
 80083a8:	469b      	mov	fp, r3
 80083aa:	f8d2 a000 	ldr.w	sl, [r2]
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	f1bb 0f00 	cmp.w	fp, #0
 80083b4:	d02b      	beq.n	800840e <__ssprint_r+0x78>
 80083b6:	68a6      	ldr	r6, [r4, #8]
 80083b8:	455e      	cmp	r6, fp
 80083ba:	d844      	bhi.n	8008446 <__ssprint_r+0xb0>
 80083bc:	89a2      	ldrh	r2, [r4, #12]
 80083be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083c2:	d03e      	beq.n	8008442 <__ssprint_r+0xac>
 80083c4:	6820      	ldr	r0, [r4, #0]
 80083c6:	6921      	ldr	r1, [r4, #16]
 80083c8:	6965      	ldr	r5, [r4, #20]
 80083ca:	eba0 0901 	sub.w	r9, r0, r1
 80083ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083d6:	f109 0001 	add.w	r0, r9, #1
 80083da:	106d      	asrs	r5, r5, #1
 80083dc:	4458      	add	r0, fp
 80083de:	4285      	cmp	r5, r0
 80083e0:	bf38      	it	cc
 80083e2:	4605      	movcc	r5, r0
 80083e4:	0553      	lsls	r3, r2, #21
 80083e6:	d545      	bpl.n	8008474 <__ssprint_r+0xde>
 80083e8:	4629      	mov	r1, r5
 80083ea:	4640      	mov	r0, r8
 80083ec:	f7ff f9e4 	bl	80077b8 <_malloc_r>
 80083f0:	4606      	mov	r6, r0
 80083f2:	b9a0      	cbnz	r0, 800841e <__ssprint_r+0x88>
 80083f4:	230c      	movs	r3, #12
 80083f6:	f8c8 3000 	str.w	r3, [r8]
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008404:	81a3      	strh	r3, [r4, #12]
 8008406:	2300      	movs	r3, #0
 8008408:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800840c:	e02f      	b.n	800846e <__ssprint_r+0xd8>
 800840e:	f8da 3000 	ldr.w	r3, [sl]
 8008412:	f8da b004 	ldr.w	fp, [sl, #4]
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	f10a 0a08 	add.w	sl, sl, #8
 800841c:	e7c8      	b.n	80083b0 <__ssprint_r+0x1a>
 800841e:	464a      	mov	r2, r9
 8008420:	6921      	ldr	r1, [r4, #16]
 8008422:	f7ff fc13 	bl	8007c4c <memcpy>
 8008426:	89a2      	ldrh	r2, [r4, #12]
 8008428:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800842c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008430:	81a2      	strh	r2, [r4, #12]
 8008432:	6126      	str	r6, [r4, #16]
 8008434:	444e      	add	r6, r9
 8008436:	6026      	str	r6, [r4, #0]
 8008438:	465e      	mov	r6, fp
 800843a:	6165      	str	r5, [r4, #20]
 800843c:	eba5 0509 	sub.w	r5, r5, r9
 8008440:	60a5      	str	r5, [r4, #8]
 8008442:	455e      	cmp	r6, fp
 8008444:	d900      	bls.n	8008448 <__ssprint_r+0xb2>
 8008446:	465e      	mov	r6, fp
 8008448:	4632      	mov	r2, r6
 800844a:	9901      	ldr	r1, [sp, #4]
 800844c:	6820      	ldr	r0, [r4, #0]
 800844e:	f000 f8eb 	bl	8008628 <memmove>
 8008452:	68a2      	ldr	r2, [r4, #8]
 8008454:	1b92      	subs	r2, r2, r6
 8008456:	60a2      	str	r2, [r4, #8]
 8008458:	6822      	ldr	r2, [r4, #0]
 800845a:	4432      	add	r2, r6
 800845c:	6022      	str	r2, [r4, #0]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	eba2 030b 	sub.w	r3, r2, fp
 8008464:	60bb      	str	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1d1      	bne.n	800840e <__ssprint_r+0x78>
 800846a:	2000      	movs	r0, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	b003      	add	sp, #12
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008474:	462a      	mov	r2, r5
 8008476:	4640      	mov	r0, r8
 8008478:	f000 f8f0 	bl	800865c <_realloc_r>
 800847c:	4606      	mov	r6, r0
 800847e:	2800      	cmp	r0, #0
 8008480:	d1d7      	bne.n	8008432 <__ssprint_r+0x9c>
 8008482:	4640      	mov	r0, r8
 8008484:	6921      	ldr	r1, [r4, #16]
 8008486:	f7ff f8cf 	bl	8007628 <_free_r>
 800848a:	e7b3      	b.n	80083f4 <__ssprint_r+0x5e>

0800848c <sysconf>:
 800848c:	2808      	cmp	r0, #8
 800848e:	b508      	push	{r3, lr}
 8008490:	d006      	beq.n	80084a0 <sysconf+0x14>
 8008492:	f7fc ffeb 	bl	800546c <__errno>
 8008496:	2316      	movs	r3, #22
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	f04f 30ff 	mov.w	r0, #4294967295
 800849e:	bd08      	pop	{r3, pc}
 80084a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80084a4:	e7fb      	b.n	800849e <sysconf+0x12>
	...

080084a8 <__register_exitproc>:
 80084a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ac:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008524 <__register_exitproc+0x7c>
 80084b0:	4606      	mov	r6, r0
 80084b2:	f8da 0000 	ldr.w	r0, [sl]
 80084b6:	4698      	mov	r8, r3
 80084b8:	460f      	mov	r7, r1
 80084ba:	4691      	mov	r9, r2
 80084bc:	f7ff f97a 	bl	80077b4 <__retarget_lock_acquire_recursive>
 80084c0:	4b19      	ldr	r3, [pc, #100]	; (8008528 <__register_exitproc+0x80>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80084c8:	b91c      	cbnz	r4, 80084d2 <__register_exitproc+0x2a>
 80084ca:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80084ce:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80084d2:	6865      	ldr	r5, [r4, #4]
 80084d4:	f8da 0000 	ldr.w	r0, [sl]
 80084d8:	2d1f      	cmp	r5, #31
 80084da:	dd05      	ble.n	80084e8 <__register_exitproc+0x40>
 80084dc:	f7ff f96b 	bl	80077b6 <__retarget_lock_release_recursive>
 80084e0:	f04f 30ff 	mov.w	r0, #4294967295
 80084e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e8:	b19e      	cbz	r6, 8008512 <__register_exitproc+0x6a>
 80084ea:	2201      	movs	r2, #1
 80084ec:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80084f0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80084f4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80084f8:	40aa      	lsls	r2, r5
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8008500:	2e02      	cmp	r6, #2
 8008502:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8008506:	bf02      	ittt	eq
 8008508:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800850c:	4313      	orreq	r3, r2
 800850e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8008512:	1c6b      	adds	r3, r5, #1
 8008514:	3502      	adds	r5, #2
 8008516:	6063      	str	r3, [r4, #4]
 8008518:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800851c:	f7ff f94b 	bl	80077b6 <__retarget_lock_release_recursive>
 8008520:	2000      	movs	r0, #0
 8008522:	e7df      	b.n	80084e4 <__register_exitproc+0x3c>
 8008524:	20000470 	.word	0x20000470
 8008528:	0801f7ac 	.word	0x0801f7ac

0800852c <__assert_func>:
 800852c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800852e:	4614      	mov	r4, r2
 8008530:	461a      	mov	r2, r3
 8008532:	4b09      	ldr	r3, [pc, #36]	; (8008558 <__assert_func+0x2c>)
 8008534:	4605      	mov	r5, r0
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68d8      	ldr	r0, [r3, #12]
 800853a:	b14c      	cbz	r4, 8008550 <__assert_func+0x24>
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <__assert_func+0x30>)
 800853e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008542:	9100      	str	r1, [sp, #0]
 8008544:	462b      	mov	r3, r5
 8008546:	4906      	ldr	r1, [pc, #24]	; (8008560 <__assert_func+0x34>)
 8008548:	f000 f844 	bl	80085d4 <fiprintf>
 800854c:	f000 ff94 	bl	8009478 <abort>
 8008550:	4b04      	ldr	r3, [pc, #16]	; (8008564 <__assert_func+0x38>)
 8008552:	461c      	mov	r4, r3
 8008554:	e7f3      	b.n	800853e <__assert_func+0x12>
 8008556:	bf00      	nop
 8008558:	20000040 	.word	0x20000040
 800855c:	0801f9dc 	.word	0x0801f9dc
 8008560:	0801f9e9 	.word	0x0801f9e9
 8008564:	0801fa17 	.word	0x0801fa17

08008568 <_calloc_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	fba1 1502 	umull	r1, r5, r1, r2
 800856e:	b92d      	cbnz	r5, 800857c <_calloc_r+0x14>
 8008570:	f7ff f922 	bl	80077b8 <_malloc_r>
 8008574:	4604      	mov	r4, r0
 8008576:	b938      	cbnz	r0, 8008588 <_calloc_r+0x20>
 8008578:	4620      	mov	r0, r4
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	f7fc ff76 	bl	800546c <__errno>
 8008580:	230c      	movs	r3, #12
 8008582:	2400      	movs	r4, #0
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	e7f7      	b.n	8008578 <_calloc_r+0x10>
 8008588:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800858c:	f022 0203 	bic.w	r2, r2, #3
 8008590:	3a04      	subs	r2, #4
 8008592:	2a24      	cmp	r2, #36	; 0x24
 8008594:	d819      	bhi.n	80085ca <_calloc_r+0x62>
 8008596:	2a13      	cmp	r2, #19
 8008598:	d915      	bls.n	80085c6 <_calloc_r+0x5e>
 800859a:	2a1b      	cmp	r2, #27
 800859c:	e9c0 5500 	strd	r5, r5, [r0]
 80085a0:	d806      	bhi.n	80085b0 <_calloc_r+0x48>
 80085a2:	f100 0308 	add.w	r3, r0, #8
 80085a6:	2200      	movs	r2, #0
 80085a8:	e9c3 2200 	strd	r2, r2, [r3]
 80085ac:	609a      	str	r2, [r3, #8]
 80085ae:	e7e3      	b.n	8008578 <_calloc_r+0x10>
 80085b0:	2a24      	cmp	r2, #36	; 0x24
 80085b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80085b6:	bf11      	iteee	ne
 80085b8:	f100 0310 	addne.w	r3, r0, #16
 80085bc:	6105      	streq	r5, [r0, #16]
 80085be:	f100 0318 	addeq.w	r3, r0, #24
 80085c2:	6145      	streq	r5, [r0, #20]
 80085c4:	e7ef      	b.n	80085a6 <_calloc_r+0x3e>
 80085c6:	4603      	mov	r3, r0
 80085c8:	e7ed      	b.n	80085a6 <_calloc_r+0x3e>
 80085ca:	4629      	mov	r1, r5
 80085cc:	f7fc ff78 	bl	80054c0 <memset>
 80085d0:	e7d2      	b.n	8008578 <_calloc_r+0x10>
	...

080085d4 <fiprintf>:
 80085d4:	b40e      	push	{r1, r2, r3}
 80085d6:	b503      	push	{r0, r1, lr}
 80085d8:	4601      	mov	r1, r0
 80085da:	ab03      	add	r3, sp, #12
 80085dc:	4805      	ldr	r0, [pc, #20]	; (80085f4 <fiprintf+0x20>)
 80085de:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e2:	6800      	ldr	r0, [r0, #0]
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	f000 fa13 	bl	8008a10 <_vfiprintf_r>
 80085ea:	b002      	add	sp, #8
 80085ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80085f0:	b003      	add	sp, #12
 80085f2:	4770      	bx	lr
 80085f4:	20000040 	.word	0x20000040

080085f8 <__locale_mb_cur_max>:
 80085f8:	4b01      	ldr	r3, [pc, #4]	; (8008600 <__locale_mb_cur_max+0x8>)
 80085fa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80085fe:	4770      	bx	lr
 8008600:	20000884 	.word	0x20000884

08008604 <__ascii_mbtowc>:
 8008604:	b082      	sub	sp, #8
 8008606:	b901      	cbnz	r1, 800860a <__ascii_mbtowc+0x6>
 8008608:	a901      	add	r1, sp, #4
 800860a:	b142      	cbz	r2, 800861e <__ascii_mbtowc+0x1a>
 800860c:	b14b      	cbz	r3, 8008622 <__ascii_mbtowc+0x1e>
 800860e:	7813      	ldrb	r3, [r2, #0]
 8008610:	600b      	str	r3, [r1, #0]
 8008612:	7812      	ldrb	r2, [r2, #0]
 8008614:	1e10      	subs	r0, r2, #0
 8008616:	bf18      	it	ne
 8008618:	2001      	movne	r0, #1
 800861a:	b002      	add	sp, #8
 800861c:	4770      	bx	lr
 800861e:	4610      	mov	r0, r2
 8008620:	e7fb      	b.n	800861a <__ascii_mbtowc+0x16>
 8008622:	f06f 0001 	mvn.w	r0, #1
 8008626:	e7f8      	b.n	800861a <__ascii_mbtowc+0x16>

08008628 <memmove>:
 8008628:	4288      	cmp	r0, r1
 800862a:	b510      	push	{r4, lr}
 800862c:	eb01 0402 	add.w	r4, r1, r2
 8008630:	d902      	bls.n	8008638 <memmove+0x10>
 8008632:	4284      	cmp	r4, r0
 8008634:	4623      	mov	r3, r4
 8008636:	d807      	bhi.n	8008648 <memmove+0x20>
 8008638:	1e43      	subs	r3, r0, #1
 800863a:	42a1      	cmp	r1, r4
 800863c:	d008      	beq.n	8008650 <memmove+0x28>
 800863e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008646:	e7f8      	b.n	800863a <memmove+0x12>
 8008648:	4601      	mov	r1, r0
 800864a:	4402      	add	r2, r0
 800864c:	428a      	cmp	r2, r1
 800864e:	d100      	bne.n	8008652 <memmove+0x2a>
 8008650:	bd10      	pop	{r4, pc}
 8008652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800865a:	e7f7      	b.n	800864c <memmove+0x24>

0800865c <_realloc_r>:
 800865c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	460c      	mov	r4, r1
 8008662:	4681      	mov	r9, r0
 8008664:	4611      	mov	r1, r2
 8008666:	b924      	cbnz	r4, 8008672 <_realloc_r+0x16>
 8008668:	b003      	add	sp, #12
 800866a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866e:	f7ff b8a3 	b.w	80077b8 <_malloc_r>
 8008672:	9201      	str	r2, [sp, #4]
 8008674:	f7ff faf8 	bl	8007c68 <__malloc_lock>
 8008678:	9901      	ldr	r1, [sp, #4]
 800867a:	f101 080b 	add.w	r8, r1, #11
 800867e:	f1b8 0f16 	cmp.w	r8, #22
 8008682:	d90b      	bls.n	800869c <_realloc_r+0x40>
 8008684:	f038 0807 	bics.w	r8, r8, #7
 8008688:	d50a      	bpl.n	80086a0 <_realloc_r+0x44>
 800868a:	230c      	movs	r3, #12
 800868c:	f04f 0b00 	mov.w	fp, #0
 8008690:	f8c9 3000 	str.w	r3, [r9]
 8008694:	4658      	mov	r0, fp
 8008696:	b003      	add	sp, #12
 8008698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869c:	f04f 0810 	mov.w	r8, #16
 80086a0:	4588      	cmp	r8, r1
 80086a2:	d3f2      	bcc.n	800868a <_realloc_r+0x2e>
 80086a4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80086a8:	f1a4 0a08 	sub.w	sl, r4, #8
 80086ac:	f025 0603 	bic.w	r6, r5, #3
 80086b0:	45b0      	cmp	r8, r6
 80086b2:	f340 8171 	ble.w	8008998 <_realloc_r+0x33c>
 80086b6:	4a9c      	ldr	r2, [pc, #624]	; (8008928 <_realloc_r+0x2cc>)
 80086b8:	eb0a 0306 	add.w	r3, sl, r6
 80086bc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	459c      	cmp	ip, r3
 80086c4:	d005      	beq.n	80086d2 <_realloc_r+0x76>
 80086c6:	f022 0001 	bic.w	r0, r2, #1
 80086ca:	4418      	add	r0, r3
 80086cc:	6840      	ldr	r0, [r0, #4]
 80086ce:	07c7      	lsls	r7, r0, #31
 80086d0:	d427      	bmi.n	8008722 <_realloc_r+0xc6>
 80086d2:	f022 0203 	bic.w	r2, r2, #3
 80086d6:	459c      	cmp	ip, r3
 80086d8:	eb06 0702 	add.w	r7, r6, r2
 80086dc:	d119      	bne.n	8008712 <_realloc_r+0xb6>
 80086de:	f108 0010 	add.w	r0, r8, #16
 80086e2:	42b8      	cmp	r0, r7
 80086e4:	dc1f      	bgt.n	8008726 <_realloc_r+0xca>
 80086e6:	4a90      	ldr	r2, [pc, #576]	; (8008928 <_realloc_r+0x2cc>)
 80086e8:	eba7 0708 	sub.w	r7, r7, r8
 80086ec:	eb0a 0308 	add.w	r3, sl, r8
 80086f0:	f047 0701 	orr.w	r7, r7, #1
 80086f4:	6093      	str	r3, [r2, #8]
 80086f6:	605f      	str	r7, [r3, #4]
 80086f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80086fc:	4648      	mov	r0, r9
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	ea43 0308 	orr.w	r3, r3, r8
 8008706:	f844 3c04 	str.w	r3, [r4, #-4]
 800870a:	f7ff fab3 	bl	8007c74 <__malloc_unlock>
 800870e:	46a3      	mov	fp, r4
 8008710:	e7c0      	b.n	8008694 <_realloc_r+0x38>
 8008712:	45b8      	cmp	r8, r7
 8008714:	dc07      	bgt.n	8008726 <_realloc_r+0xca>
 8008716:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800871a:	60da      	str	r2, [r3, #12]
 800871c:	6093      	str	r3, [r2, #8]
 800871e:	4655      	mov	r5, sl
 8008720:	e080      	b.n	8008824 <_realloc_r+0x1c8>
 8008722:	2200      	movs	r2, #0
 8008724:	4613      	mov	r3, r2
 8008726:	07e8      	lsls	r0, r5, #31
 8008728:	f100 80e8 	bmi.w	80088fc <_realloc_r+0x2a0>
 800872c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008730:	ebaa 0505 	sub.w	r5, sl, r5
 8008734:	6868      	ldr	r0, [r5, #4]
 8008736:	f020 0003 	bic.w	r0, r0, #3
 800873a:	eb00 0b06 	add.w	fp, r0, r6
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80a7 	beq.w	8008892 <_realloc_r+0x236>
 8008744:	459c      	cmp	ip, r3
 8008746:	eb02 070b 	add.w	r7, r2, fp
 800874a:	d14b      	bne.n	80087e4 <_realloc_r+0x188>
 800874c:	f108 0310 	add.w	r3, r8, #16
 8008750:	42bb      	cmp	r3, r7
 8008752:	f300 809e 	bgt.w	8008892 <_realloc_r+0x236>
 8008756:	46ab      	mov	fp, r5
 8008758:	68eb      	ldr	r3, [r5, #12]
 800875a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800875e:	60d3      	str	r3, [r2, #12]
 8008760:	609a      	str	r2, [r3, #8]
 8008762:	1f32      	subs	r2, r6, #4
 8008764:	2a24      	cmp	r2, #36	; 0x24
 8008766:	d838      	bhi.n	80087da <_realloc_r+0x17e>
 8008768:	2a13      	cmp	r2, #19
 800876a:	d934      	bls.n	80087d6 <_realloc_r+0x17a>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	2a1b      	cmp	r2, #27
 8008770:	60ab      	str	r3, [r5, #8]
 8008772:	6863      	ldr	r3, [r4, #4]
 8008774:	60eb      	str	r3, [r5, #12]
 8008776:	d81b      	bhi.n	80087b0 <_realloc_r+0x154>
 8008778:	3408      	adds	r4, #8
 800877a:	f105 0310 	add.w	r3, r5, #16
 800877e:	6822      	ldr	r2, [r4, #0]
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	6862      	ldr	r2, [r4, #4]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	68a2      	ldr	r2, [r4, #8]
 8008788:	609a      	str	r2, [r3, #8]
 800878a:	4a67      	ldr	r2, [pc, #412]	; (8008928 <_realloc_r+0x2cc>)
 800878c:	eba7 0708 	sub.w	r7, r7, r8
 8008790:	eb05 0308 	add.w	r3, r5, r8
 8008794:	f047 0701 	orr.w	r7, r7, #1
 8008798:	6093      	str	r3, [r2, #8]
 800879a:	605f      	str	r7, [r3, #4]
 800879c:	686b      	ldr	r3, [r5, #4]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	ea43 0308 	orr.w	r3, r3, r8
 80087a6:	606b      	str	r3, [r5, #4]
 80087a8:	4648      	mov	r0, r9
 80087aa:	f7ff fa63 	bl	8007c74 <__malloc_unlock>
 80087ae:	e771      	b.n	8008694 <_realloc_r+0x38>
 80087b0:	68a3      	ldr	r3, [r4, #8]
 80087b2:	2a24      	cmp	r2, #36	; 0x24
 80087b4:	612b      	str	r3, [r5, #16]
 80087b6:	68e3      	ldr	r3, [r4, #12]
 80087b8:	bf18      	it	ne
 80087ba:	3410      	addne	r4, #16
 80087bc:	616b      	str	r3, [r5, #20]
 80087be:	bf09      	itett	eq
 80087c0:	6923      	ldreq	r3, [r4, #16]
 80087c2:	f105 0318 	addne.w	r3, r5, #24
 80087c6:	61ab      	streq	r3, [r5, #24]
 80087c8:	6962      	ldreq	r2, [r4, #20]
 80087ca:	bf02      	ittt	eq
 80087cc:	f105 0320 	addeq.w	r3, r5, #32
 80087d0:	61ea      	streq	r2, [r5, #28]
 80087d2:	3418      	addeq	r4, #24
 80087d4:	e7d3      	b.n	800877e <_realloc_r+0x122>
 80087d6:	465b      	mov	r3, fp
 80087d8:	e7d1      	b.n	800877e <_realloc_r+0x122>
 80087da:	4621      	mov	r1, r4
 80087dc:	4658      	mov	r0, fp
 80087de:	f7ff ff23 	bl	8008628 <memmove>
 80087e2:	e7d2      	b.n	800878a <_realloc_r+0x12e>
 80087e4:	45b8      	cmp	r8, r7
 80087e6:	dc54      	bgt.n	8008892 <_realloc_r+0x236>
 80087e8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80087ec:	4628      	mov	r0, r5
 80087ee:	60da      	str	r2, [r3, #12]
 80087f0:	6093      	str	r3, [r2, #8]
 80087f2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80087f6:	68eb      	ldr	r3, [r5, #12]
 80087f8:	60d3      	str	r3, [r2, #12]
 80087fa:	609a      	str	r2, [r3, #8]
 80087fc:	1f32      	subs	r2, r6, #4
 80087fe:	2a24      	cmp	r2, #36	; 0x24
 8008800:	d843      	bhi.n	800888a <_realloc_r+0x22e>
 8008802:	2a13      	cmp	r2, #19
 8008804:	d908      	bls.n	8008818 <_realloc_r+0x1bc>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	2a1b      	cmp	r2, #27
 800880a:	60ab      	str	r3, [r5, #8]
 800880c:	6863      	ldr	r3, [r4, #4]
 800880e:	60eb      	str	r3, [r5, #12]
 8008810:	d828      	bhi.n	8008864 <_realloc_r+0x208>
 8008812:	3408      	adds	r4, #8
 8008814:	f105 0010 	add.w	r0, r5, #16
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	6003      	str	r3, [r0, #0]
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	6043      	str	r3, [r0, #4]
 8008820:	68a3      	ldr	r3, [r4, #8]
 8008822:	6083      	str	r3, [r0, #8]
 8008824:	686b      	ldr	r3, [r5, #4]
 8008826:	eba7 0008 	sub.w	r0, r7, r8
 800882a:	280f      	cmp	r0, #15
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	eb05 0207 	add.w	r2, r5, r7
 8008834:	f240 80b2 	bls.w	800899c <_realloc_r+0x340>
 8008838:	eb05 0108 	add.w	r1, r5, r8
 800883c:	ea48 0303 	orr.w	r3, r8, r3
 8008840:	f040 0001 	orr.w	r0, r0, #1
 8008844:	606b      	str	r3, [r5, #4]
 8008846:	6048      	str	r0, [r1, #4]
 8008848:	6853      	ldr	r3, [r2, #4]
 800884a:	4648      	mov	r0, r9
 800884c:	f043 0301 	orr.w	r3, r3, #1
 8008850:	6053      	str	r3, [r2, #4]
 8008852:	3108      	adds	r1, #8
 8008854:	f7fe fee8 	bl	8007628 <_free_r>
 8008858:	4648      	mov	r0, r9
 800885a:	f7ff fa0b 	bl	8007c74 <__malloc_unlock>
 800885e:	f105 0b08 	add.w	fp, r5, #8
 8008862:	e717      	b.n	8008694 <_realloc_r+0x38>
 8008864:	68a3      	ldr	r3, [r4, #8]
 8008866:	2a24      	cmp	r2, #36	; 0x24
 8008868:	612b      	str	r3, [r5, #16]
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	bf18      	it	ne
 800886e:	f105 0018 	addne.w	r0, r5, #24
 8008872:	616b      	str	r3, [r5, #20]
 8008874:	bf09      	itett	eq
 8008876:	6923      	ldreq	r3, [r4, #16]
 8008878:	3410      	addne	r4, #16
 800887a:	61ab      	streq	r3, [r5, #24]
 800887c:	6963      	ldreq	r3, [r4, #20]
 800887e:	bf02      	ittt	eq
 8008880:	f105 0020 	addeq.w	r0, r5, #32
 8008884:	61eb      	streq	r3, [r5, #28]
 8008886:	3418      	addeq	r4, #24
 8008888:	e7c6      	b.n	8008818 <_realloc_r+0x1bc>
 800888a:	4621      	mov	r1, r4
 800888c:	f7ff fecc 	bl	8008628 <memmove>
 8008890:	e7c8      	b.n	8008824 <_realloc_r+0x1c8>
 8008892:	45d8      	cmp	r8, fp
 8008894:	dc32      	bgt.n	80088fc <_realloc_r+0x2a0>
 8008896:	4628      	mov	r0, r5
 8008898:	68eb      	ldr	r3, [r5, #12]
 800889a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800889e:	60d3      	str	r3, [r2, #12]
 80088a0:	609a      	str	r2, [r3, #8]
 80088a2:	1f32      	subs	r2, r6, #4
 80088a4:	2a24      	cmp	r2, #36	; 0x24
 80088a6:	d825      	bhi.n	80088f4 <_realloc_r+0x298>
 80088a8:	2a13      	cmp	r2, #19
 80088aa:	d908      	bls.n	80088be <_realloc_r+0x262>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	2a1b      	cmp	r2, #27
 80088b0:	60ab      	str	r3, [r5, #8]
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	60eb      	str	r3, [r5, #12]
 80088b6:	d80a      	bhi.n	80088ce <_realloc_r+0x272>
 80088b8:	3408      	adds	r4, #8
 80088ba:	f105 0010 	add.w	r0, r5, #16
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	6003      	str	r3, [r0, #0]
 80088c2:	6863      	ldr	r3, [r4, #4]
 80088c4:	6043      	str	r3, [r0, #4]
 80088c6:	68a3      	ldr	r3, [r4, #8]
 80088c8:	6083      	str	r3, [r0, #8]
 80088ca:	465f      	mov	r7, fp
 80088cc:	e7aa      	b.n	8008824 <_realloc_r+0x1c8>
 80088ce:	68a3      	ldr	r3, [r4, #8]
 80088d0:	2a24      	cmp	r2, #36	; 0x24
 80088d2:	612b      	str	r3, [r5, #16]
 80088d4:	68e3      	ldr	r3, [r4, #12]
 80088d6:	bf18      	it	ne
 80088d8:	f105 0018 	addne.w	r0, r5, #24
 80088dc:	616b      	str	r3, [r5, #20]
 80088de:	bf09      	itett	eq
 80088e0:	6923      	ldreq	r3, [r4, #16]
 80088e2:	3410      	addne	r4, #16
 80088e4:	61ab      	streq	r3, [r5, #24]
 80088e6:	6963      	ldreq	r3, [r4, #20]
 80088e8:	bf02      	ittt	eq
 80088ea:	f105 0020 	addeq.w	r0, r5, #32
 80088ee:	61eb      	streq	r3, [r5, #28]
 80088f0:	3418      	addeq	r4, #24
 80088f2:	e7e4      	b.n	80088be <_realloc_r+0x262>
 80088f4:	4621      	mov	r1, r4
 80088f6:	f7ff fe97 	bl	8008628 <memmove>
 80088fa:	e7e6      	b.n	80088ca <_realloc_r+0x26e>
 80088fc:	4648      	mov	r0, r9
 80088fe:	f7fe ff5b 	bl	80077b8 <_malloc_r>
 8008902:	4683      	mov	fp, r0
 8008904:	2800      	cmp	r0, #0
 8008906:	f43f af4f 	beq.w	80087a8 <_realloc_r+0x14c>
 800890a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800890e:	f1a0 0208 	sub.w	r2, r0, #8
 8008912:	f023 0301 	bic.w	r3, r3, #1
 8008916:	4453      	add	r3, sl
 8008918:	4293      	cmp	r3, r2
 800891a:	d107      	bne.n	800892c <_realloc_r+0x2d0>
 800891c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8008920:	f027 0703 	bic.w	r7, r7, #3
 8008924:	4437      	add	r7, r6
 8008926:	e6fa      	b.n	800871e <_realloc_r+0xc2>
 8008928:	20000474 	.word	0x20000474
 800892c:	1f32      	subs	r2, r6, #4
 800892e:	2a24      	cmp	r2, #36	; 0x24
 8008930:	d82e      	bhi.n	8008990 <_realloc_r+0x334>
 8008932:	2a13      	cmp	r2, #19
 8008934:	d929      	bls.n	800898a <_realloc_r+0x32e>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	2a1b      	cmp	r2, #27
 800893a:	6003      	str	r3, [r0, #0]
 800893c:	6863      	ldr	r3, [r4, #4]
 800893e:	6043      	str	r3, [r0, #4]
 8008940:	d80e      	bhi.n	8008960 <_realloc_r+0x304>
 8008942:	f104 0208 	add.w	r2, r4, #8
 8008946:	f100 0308 	add.w	r3, r0, #8
 800894a:	6811      	ldr	r1, [r2, #0]
 800894c:	6019      	str	r1, [r3, #0]
 800894e:	6851      	ldr	r1, [r2, #4]
 8008950:	6059      	str	r1, [r3, #4]
 8008952:	6892      	ldr	r2, [r2, #8]
 8008954:	609a      	str	r2, [r3, #8]
 8008956:	4621      	mov	r1, r4
 8008958:	4648      	mov	r0, r9
 800895a:	f7fe fe65 	bl	8007628 <_free_r>
 800895e:	e723      	b.n	80087a8 <_realloc_r+0x14c>
 8008960:	68a3      	ldr	r3, [r4, #8]
 8008962:	2a24      	cmp	r2, #36	; 0x24
 8008964:	6083      	str	r3, [r0, #8]
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	bf18      	it	ne
 800896a:	f104 0210 	addne.w	r2, r4, #16
 800896e:	60c3      	str	r3, [r0, #12]
 8008970:	bf09      	itett	eq
 8008972:	6923      	ldreq	r3, [r4, #16]
 8008974:	f100 0310 	addne.w	r3, r0, #16
 8008978:	6103      	streq	r3, [r0, #16]
 800897a:	6961      	ldreq	r1, [r4, #20]
 800897c:	bf02      	ittt	eq
 800897e:	f104 0218 	addeq.w	r2, r4, #24
 8008982:	f100 0318 	addeq.w	r3, r0, #24
 8008986:	6141      	streq	r1, [r0, #20]
 8008988:	e7df      	b.n	800894a <_realloc_r+0x2ee>
 800898a:	4603      	mov	r3, r0
 800898c:	4622      	mov	r2, r4
 800898e:	e7dc      	b.n	800894a <_realloc_r+0x2ee>
 8008990:	4621      	mov	r1, r4
 8008992:	f7ff fe49 	bl	8008628 <memmove>
 8008996:	e7de      	b.n	8008956 <_realloc_r+0x2fa>
 8008998:	4637      	mov	r7, r6
 800899a:	e6c0      	b.n	800871e <_realloc_r+0xc2>
 800899c:	431f      	orrs	r7, r3
 800899e:	606f      	str	r7, [r5, #4]
 80089a0:	6853      	ldr	r3, [r2, #4]
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	6053      	str	r3, [r2, #4]
 80089a8:	e756      	b.n	8008858 <_realloc_r+0x1fc>
 80089aa:	bf00      	nop

080089ac <__sprint_r>:
 80089ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	6893      	ldr	r3, [r2, #8]
 80089b2:	4680      	mov	r8, r0
 80089b4:	460f      	mov	r7, r1
 80089b6:	4614      	mov	r4, r2
 80089b8:	b91b      	cbnz	r3, 80089c2 <__sprint_r+0x16>
 80089ba:	4618      	mov	r0, r3
 80089bc:	6053      	str	r3, [r2, #4]
 80089be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80089c4:	049d      	lsls	r5, r3, #18
 80089c6:	d520      	bpl.n	8008a0a <__sprint_r+0x5e>
 80089c8:	6815      	ldr	r5, [r2, #0]
 80089ca:	3508      	adds	r5, #8
 80089cc:	f04f 0900 	mov.w	r9, #0
 80089d0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 80089d4:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80089d8:	45ca      	cmp	sl, r9
 80089da:	dc0b      	bgt.n	80089f4 <__sprint_r+0x48>
 80089dc:	68a0      	ldr	r0, [r4, #8]
 80089de:	f026 0603 	bic.w	r6, r6, #3
 80089e2:	1b80      	subs	r0, r0, r6
 80089e4:	60a0      	str	r0, [r4, #8]
 80089e6:	3508      	adds	r5, #8
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d1ef      	bne.n	80089cc <__sprint_r+0x20>
 80089ec:	2300      	movs	r3, #0
 80089ee:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80089f2:	e7e4      	b.n	80089be <__sprint_r+0x12>
 80089f4:	463a      	mov	r2, r7
 80089f6:	4640      	mov	r0, r8
 80089f8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80089fc:	f000 fea3 	bl	8009746 <_fputwc_r>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d0f3      	beq.n	80089ec <__sprint_r+0x40>
 8008a04:	f109 0901 	add.w	r9, r9, #1
 8008a08:	e7e6      	b.n	80089d8 <__sprint_r+0x2c>
 8008a0a:	f000 fec5 	bl	8009798 <__sfvwrite_r>
 8008a0e:	e7ed      	b.n	80089ec <__sprint_r+0x40>

08008a10 <_vfiprintf_r>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	b0bb      	sub	sp, #236	; 0xec
 8008a16:	460f      	mov	r7, r1
 8008a18:	461d      	mov	r5, r3
 8008a1a:	461c      	mov	r4, r3
 8008a1c:	4681      	mov	r9, r0
 8008a1e:	9202      	str	r2, [sp, #8]
 8008a20:	b118      	cbz	r0, 8008a2a <_vfiprintf_r+0x1a>
 8008a22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a24:	b90b      	cbnz	r3, 8008a2a <_vfiprintf_r+0x1a>
 8008a26:	f000 fe25 	bl	8009674 <__sinit>
 8008a2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a2c:	07d8      	lsls	r0, r3, #31
 8008a2e:	d405      	bmi.n	8008a3c <_vfiprintf_r+0x2c>
 8008a30:	89bb      	ldrh	r3, [r7, #12]
 8008a32:	0599      	lsls	r1, r3, #22
 8008a34:	d402      	bmi.n	8008a3c <_vfiprintf_r+0x2c>
 8008a36:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008a38:	f7fe febc 	bl	80077b4 <__retarget_lock_acquire_recursive>
 8008a3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008a40:	049a      	lsls	r2, r3, #18
 8008a42:	d406      	bmi.n	8008a52 <_vfiprintf_r+0x42>
 8008a44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a48:	81bb      	strh	r3, [r7, #12]
 8008a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a50:	667b      	str	r3, [r7, #100]	; 0x64
 8008a52:	89bb      	ldrh	r3, [r7, #12]
 8008a54:	071e      	lsls	r6, r3, #28
 8008a56:	d501      	bpl.n	8008a5c <_vfiprintf_r+0x4c>
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	b9ab      	cbnz	r3, 8008a88 <_vfiprintf_r+0x78>
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	4648      	mov	r0, r9
 8008a60:	f000 fcb2 	bl	80093c8 <__swsetup_r>
 8008a64:	b180      	cbz	r0, 8008a88 <_vfiprintf_r+0x78>
 8008a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a68:	07d8      	lsls	r0, r3, #31
 8008a6a:	d506      	bpl.n	8008a7a <_vfiprintf_r+0x6a>
 8008a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a70:	9303      	str	r3, [sp, #12]
 8008a72:	9803      	ldr	r0, [sp, #12]
 8008a74:	b03b      	add	sp, #236	; 0xec
 8008a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7a:	89bb      	ldrh	r3, [r7, #12]
 8008a7c:	0599      	lsls	r1, r3, #22
 8008a7e:	d4f5      	bmi.n	8008a6c <_vfiprintf_r+0x5c>
 8008a80:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008a82:	f7fe fe98 	bl	80077b6 <__retarget_lock_release_recursive>
 8008a86:	e7f1      	b.n	8008a6c <_vfiprintf_r+0x5c>
 8008a88:	89bb      	ldrh	r3, [r7, #12]
 8008a8a:	f003 021a 	and.w	r2, r3, #26
 8008a8e:	2a0a      	cmp	r2, #10
 8008a90:	d114      	bne.n	8008abc <_vfiprintf_r+0xac>
 8008a92:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	db10      	blt.n	8008abc <_vfiprintf_r+0xac>
 8008a9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a9c:	07d2      	lsls	r2, r2, #31
 8008a9e:	d404      	bmi.n	8008aaa <_vfiprintf_r+0x9a>
 8008aa0:	059e      	lsls	r6, r3, #22
 8008aa2:	d402      	bmi.n	8008aaa <_vfiprintf_r+0x9a>
 8008aa4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008aa6:	f7fe fe86 	bl	80077b6 <__retarget_lock_release_recursive>
 8008aaa:	462b      	mov	r3, r5
 8008aac:	4639      	mov	r1, r7
 8008aae:	4648      	mov	r0, r9
 8008ab0:	9a02      	ldr	r2, [sp, #8]
 8008ab2:	b03b      	add	sp, #236	; 0xec
 8008ab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	f000 bc38 	b.w	800932c <__sbprintf>
 8008abc:	2300      	movs	r3, #0
 8008abe:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8008ac2:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8008ac6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8008aca:	ae11      	add	r6, sp, #68	; 0x44
 8008acc:	960e      	str	r6, [sp, #56]	; 0x38
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	9b02      	ldr	r3, [sp, #8]
 8008ad2:	461d      	mov	r5, r3
 8008ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad8:	b10a      	cbz	r2, 8008ade <_vfiprintf_r+0xce>
 8008ada:	2a25      	cmp	r2, #37	; 0x25
 8008adc:	d1f9      	bne.n	8008ad2 <_vfiprintf_r+0xc2>
 8008ade:	9b02      	ldr	r3, [sp, #8]
 8008ae0:	ebb5 0803 	subs.w	r8, r5, r3
 8008ae4:	d00d      	beq.n	8008b02 <_vfiprintf_r+0xf2>
 8008ae6:	e9c6 3800 	strd	r3, r8, [r6]
 8008aea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008aec:	4443      	add	r3, r8
 8008aee:	9310      	str	r3, [sp, #64]	; 0x40
 8008af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008af2:	3301      	adds	r3, #1
 8008af4:	2b07      	cmp	r3, #7
 8008af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008af8:	dc75      	bgt.n	8008be6 <_vfiprintf_r+0x1d6>
 8008afa:	3608      	adds	r6, #8
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	4443      	add	r3, r8
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	782b      	ldrb	r3, [r5, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 83d5 	beq.w	80092b4 <_vfiprintf_r+0x8a4>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b10:	469a      	mov	sl, r3
 8008b12:	1c6a      	adds	r2, r5, #1
 8008b14:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8008b18:	9101      	str	r1, [sp, #4]
 8008b1a:	9304      	str	r3, [sp, #16]
 8008b1c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008b20:	9202      	str	r2, [sp, #8]
 8008b22:	f1a3 0220 	sub.w	r2, r3, #32
 8008b26:	2a5a      	cmp	r2, #90	; 0x5a
 8008b28:	f200 831d 	bhi.w	8009166 <_vfiprintf_r+0x756>
 8008b2c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008b30:	031b009a 	.word	0x031b009a
 8008b34:	00a2031b 	.word	0x00a2031b
 8008b38:	031b031b 	.word	0x031b031b
 8008b3c:	0082031b 	.word	0x0082031b
 8008b40:	031b031b 	.word	0x031b031b
 8008b44:	00af00a5 	.word	0x00af00a5
 8008b48:	00ac031b 	.word	0x00ac031b
 8008b4c:	031b00b1 	.word	0x031b00b1
 8008b50:	00cf00cc 	.word	0x00cf00cc
 8008b54:	00cf00cf 	.word	0x00cf00cf
 8008b58:	00cf00cf 	.word	0x00cf00cf
 8008b5c:	00cf00cf 	.word	0x00cf00cf
 8008b60:	00cf00cf 	.word	0x00cf00cf
 8008b64:	031b031b 	.word	0x031b031b
 8008b68:	031b031b 	.word	0x031b031b
 8008b6c:	031b031b 	.word	0x031b031b
 8008b70:	031b031b 	.word	0x031b031b
 8008b74:	00f9031b 	.word	0x00f9031b
 8008b78:	031b0107 	.word	0x031b0107
 8008b7c:	031b031b 	.word	0x031b031b
 8008b80:	031b031b 	.word	0x031b031b
 8008b84:	031b031b 	.word	0x031b031b
 8008b88:	031b031b 	.word	0x031b031b
 8008b8c:	0156031b 	.word	0x0156031b
 8008b90:	031b031b 	.word	0x031b031b
 8008b94:	01a0031b 	.word	0x01a0031b
 8008b98:	027d031b 	.word	0x027d031b
 8008b9c:	031b031b 	.word	0x031b031b
 8008ba0:	031b029d 	.word	0x031b029d
 8008ba4:	031b031b 	.word	0x031b031b
 8008ba8:	031b031b 	.word	0x031b031b
 8008bac:	031b031b 	.word	0x031b031b
 8008bb0:	031b031b 	.word	0x031b031b
 8008bb4:	00f9031b 	.word	0x00f9031b
 8008bb8:	031b0109 	.word	0x031b0109
 8008bbc:	031b031b 	.word	0x031b031b
 8008bc0:	010900df 	.word	0x010900df
 8008bc4:	031b00f3 	.word	0x031b00f3
 8008bc8:	031b00ec 	.word	0x031b00ec
 8008bcc:	01580134 	.word	0x01580134
 8008bd0:	00f3018d 	.word	0x00f3018d
 8008bd4:	01a0031b 	.word	0x01a0031b
 8008bd8:	027f0098 	.word	0x027f0098
 8008bdc:	031b031b 	.word	0x031b031b
 8008be0:	031b0065 	.word	0x031b0065
 8008be4:	0098      	.short	0x0098
 8008be6:	4639      	mov	r1, r7
 8008be8:	4648      	mov	r0, r9
 8008bea:	aa0e      	add	r2, sp, #56	; 0x38
 8008bec:	f7ff fede 	bl	80089ac <__sprint_r>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f040 833e 	bne.w	8009272 <_vfiprintf_r+0x862>
 8008bf6:	ae11      	add	r6, sp, #68	; 0x44
 8008bf8:	e780      	b.n	8008afc <_vfiprintf_r+0xec>
 8008bfa:	4a9c      	ldr	r2, [pc, #624]	; (8008e6c <_vfiprintf_r+0x45c>)
 8008bfc:	9206      	str	r2, [sp, #24]
 8008bfe:	f01a 0220 	ands.w	r2, sl, #32
 8008c02:	f000 8234 	beq.w	800906e <_vfiprintf_r+0x65e>
 8008c06:	3407      	adds	r4, #7
 8008c08:	f024 0207 	bic.w	r2, r4, #7
 8008c0c:	4693      	mov	fp, r2
 8008c0e:	6855      	ldr	r5, [r2, #4]
 8008c10:	f85b 4b08 	ldr.w	r4, [fp], #8
 8008c14:	f01a 0f01 	tst.w	sl, #1
 8008c18:	d009      	beq.n	8008c2e <_vfiprintf_r+0x21e>
 8008c1a:	ea54 0205 	orrs.w	r2, r4, r5
 8008c1e:	bf1f      	itttt	ne
 8008c20:	2230      	movne	r2, #48	; 0x30
 8008c22:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 8008c26:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 8008c2a:	f04a 0a02 	orrne.w	sl, sl, #2
 8008c2e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008c32:	e118      	b.n	8008e66 <_vfiprintf_r+0x456>
 8008c34:	4648      	mov	r0, r9
 8008c36:	f7fe fdb7 	bl	80077a8 <_localeconv_r>
 8008c3a:	6843      	ldr	r3, [r0, #4]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c40:	f7f7 faf2 	bl	8000228 <strlen>
 8008c44:	9008      	str	r0, [sp, #32]
 8008c46:	4648      	mov	r0, r9
 8008c48:	f7fe fdae 	bl	80077a8 <_localeconv_r>
 8008c4c:	6883      	ldr	r3, [r0, #8]
 8008c4e:	9307      	str	r3, [sp, #28]
 8008c50:	9b08      	ldr	r3, [sp, #32]
 8008c52:	b12b      	cbz	r3, 8008c60 <_vfiprintf_r+0x250>
 8008c54:	9b07      	ldr	r3, [sp, #28]
 8008c56:	b11b      	cbz	r3, 8008c60 <_vfiprintf_r+0x250>
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	b10b      	cbz	r3, 8008c60 <_vfiprintf_r+0x250>
 8008c5c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8008c60:	9a02      	ldr	r2, [sp, #8]
 8008c62:	e75b      	b.n	8008b1c <_vfiprintf_r+0x10c>
 8008c64:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1f9      	bne.n	8008c60 <_vfiprintf_r+0x250>
 8008c6c:	2320      	movs	r3, #32
 8008c6e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8008c72:	e7f5      	b.n	8008c60 <_vfiprintf_r+0x250>
 8008c74:	f04a 0a01 	orr.w	sl, sl, #1
 8008c78:	e7f2      	b.n	8008c60 <_vfiprintf_r+0x250>
 8008c7a:	f854 3b04 	ldr.w	r3, [r4], #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	daed      	bge.n	8008c60 <_vfiprintf_r+0x250>
 8008c84:	425b      	negs	r3, r3
 8008c86:	9304      	str	r3, [sp, #16]
 8008c88:	f04a 0a04 	orr.w	sl, sl, #4
 8008c8c:	e7e8      	b.n	8008c60 <_vfiprintf_r+0x250>
 8008c8e:	232b      	movs	r3, #43	; 0x2b
 8008c90:	e7ed      	b.n	8008c6e <_vfiprintf_r+0x25e>
 8008c92:	9a02      	ldr	r2, [sp, #8]
 8008c94:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008c98:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9a:	d112      	bne.n	8008cc2 <_vfiprintf_r+0x2b2>
 8008c9c:	f854 0b04 	ldr.w	r0, [r4], #4
 8008ca0:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8008ca4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ca8:	e7da      	b.n	8008c60 <_vfiprintf_r+0x250>
 8008caa:	200a      	movs	r0, #10
 8008cac:	9b01      	ldr	r3, [sp, #4]
 8008cae:	fb00 1303 	mla	r3, r0, r3, r1
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008cb8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008cbc:	2909      	cmp	r1, #9
 8008cbe:	d9f4      	bls.n	8008caa <_vfiprintf_r+0x29a>
 8008cc0:	e72e      	b.n	8008b20 <_vfiprintf_r+0x110>
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	9101      	str	r1, [sp, #4]
 8008cc6:	e7f7      	b.n	8008cb8 <_vfiprintf_r+0x2a8>
 8008cc8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8008ccc:	e7c8      	b.n	8008c60 <_vfiprintf_r+0x250>
 8008cce:	2100      	movs	r1, #0
 8008cd0:	9a02      	ldr	r2, [sp, #8]
 8008cd2:	9104      	str	r1, [sp, #16]
 8008cd4:	200a      	movs	r0, #10
 8008cd6:	9904      	ldr	r1, [sp, #16]
 8008cd8:	3b30      	subs	r3, #48	; 0x30
 8008cda:	fb00 3301 	mla	r3, r0, r1, r3
 8008cde:	9304      	str	r3, [sp, #16]
 8008ce0:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008ce4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008ce8:	2909      	cmp	r1, #9
 8008cea:	d9f3      	bls.n	8008cd4 <_vfiprintf_r+0x2c4>
 8008cec:	e718      	b.n	8008b20 <_vfiprintf_r+0x110>
 8008cee:	9b02      	ldr	r3, [sp, #8]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b68      	cmp	r3, #104	; 0x68
 8008cf4:	bf01      	itttt	eq
 8008cf6:	9b02      	ldreq	r3, [sp, #8]
 8008cf8:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8008cfc:	3301      	addeq	r3, #1
 8008cfe:	9302      	streq	r3, [sp, #8]
 8008d00:	bf18      	it	ne
 8008d02:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8008d06:	e7ab      	b.n	8008c60 <_vfiprintf_r+0x250>
 8008d08:	9b02      	ldr	r3, [sp, #8]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b6c      	cmp	r3, #108	; 0x6c
 8008d0e:	d105      	bne.n	8008d1c <_vfiprintf_r+0x30c>
 8008d10:	9b02      	ldr	r3, [sp, #8]
 8008d12:	3301      	adds	r3, #1
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	f04a 0a20 	orr.w	sl, sl, #32
 8008d1a:	e7a1      	b.n	8008c60 <_vfiprintf_r+0x250>
 8008d1c:	f04a 0a10 	orr.w	sl, sl, #16
 8008d20:	e79e      	b.n	8008c60 <_vfiprintf_r+0x250>
 8008d22:	46a3      	mov	fp, r4
 8008d24:	2100      	movs	r1, #0
 8008d26:	f85b 3b04 	ldr.w	r3, [fp], #4
 8008d2a:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 8008d2e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8008d32:	2301      	movs	r3, #1
 8008d34:	460d      	mov	r5, r1
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 8008d3c:	e0ad      	b.n	8008e9a <_vfiprintf_r+0x48a>
 8008d3e:	f04a 0a10 	orr.w	sl, sl, #16
 8008d42:	f01a 0f20 	tst.w	sl, #32
 8008d46:	d010      	beq.n	8008d6a <_vfiprintf_r+0x35a>
 8008d48:	3407      	adds	r4, #7
 8008d4a:	f024 0307 	bic.w	r3, r4, #7
 8008d4e:	469b      	mov	fp, r3
 8008d50:	685d      	ldr	r5, [r3, #4]
 8008d52:	f85b 4b08 	ldr.w	r4, [fp], #8
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	da05      	bge.n	8008d66 <_vfiprintf_r+0x356>
 8008d5a:	232d      	movs	r3, #45	; 0x2d
 8008d5c:	4264      	negs	r4, r4
 8008d5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008d62:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8008d66:	2301      	movs	r3, #1
 8008d68:	e04a      	b.n	8008e00 <_vfiprintf_r+0x3f0>
 8008d6a:	46a3      	mov	fp, r4
 8008d6c:	f01a 0f10 	tst.w	sl, #16
 8008d70:	f85b 5b04 	ldr.w	r5, [fp], #4
 8008d74:	d002      	beq.n	8008d7c <_vfiprintf_r+0x36c>
 8008d76:	462c      	mov	r4, r5
 8008d78:	17ed      	asrs	r5, r5, #31
 8008d7a:	e7ec      	b.n	8008d56 <_vfiprintf_r+0x346>
 8008d7c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008d80:	d003      	beq.n	8008d8a <_vfiprintf_r+0x37a>
 8008d82:	b22c      	sxth	r4, r5
 8008d84:	f345 35c0 	sbfx	r5, r5, #15, #1
 8008d88:	e7e5      	b.n	8008d56 <_vfiprintf_r+0x346>
 8008d8a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008d8e:	d0f2      	beq.n	8008d76 <_vfiprintf_r+0x366>
 8008d90:	b26c      	sxtb	r4, r5
 8008d92:	f345 15c0 	sbfx	r5, r5, #7, #1
 8008d96:	e7de      	b.n	8008d56 <_vfiprintf_r+0x346>
 8008d98:	f01a 0f20 	tst.w	sl, #32
 8008d9c:	f104 0b04 	add.w	fp, r4, #4
 8008da0:	d007      	beq.n	8008db2 <_vfiprintf_r+0x3a2>
 8008da2:	9a03      	ldr	r2, [sp, #12]
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	9903      	ldr	r1, [sp, #12]
 8008da8:	17d2      	asrs	r2, r2, #31
 8008daa:	e9c3 1200 	strd	r1, r2, [r3]
 8008dae:	465c      	mov	r4, fp
 8008db0:	e68e      	b.n	8008ad0 <_vfiprintf_r+0xc0>
 8008db2:	f01a 0f10 	tst.w	sl, #16
 8008db6:	d003      	beq.n	8008dc0 <_vfiprintf_r+0x3b0>
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	9a03      	ldr	r2, [sp, #12]
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	e7f6      	b.n	8008dae <_vfiprintf_r+0x39e>
 8008dc0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008dc4:	d003      	beq.n	8008dce <_vfiprintf_r+0x3be>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	9a03      	ldr	r2, [sp, #12]
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	e7ef      	b.n	8008dae <_vfiprintf_r+0x39e>
 8008dce:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008dd2:	d0f1      	beq.n	8008db8 <_vfiprintf_r+0x3a8>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	9a03      	ldr	r2, [sp, #12]
 8008dd8:	701a      	strb	r2, [r3, #0]
 8008dda:	e7e8      	b.n	8008dae <_vfiprintf_r+0x39e>
 8008ddc:	f04a 0a10 	orr.w	sl, sl, #16
 8008de0:	f01a 0320 	ands.w	r3, sl, #32
 8008de4:	d01f      	beq.n	8008e26 <_vfiprintf_r+0x416>
 8008de6:	3407      	adds	r4, #7
 8008de8:	f024 0307 	bic.w	r3, r4, #7
 8008dec:	469b      	mov	fp, r3
 8008dee:	685d      	ldr	r5, [r3, #4]
 8008df0:	f85b 4b08 	ldr.w	r4, [fp], #8
 8008df4:	2300      	movs	r3, #0
 8008df6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8008e00:	9a01      	ldr	r2, [sp, #4]
 8008e02:	3201      	adds	r2, #1
 8008e04:	f000 8263 	beq.w	80092ce <_vfiprintf_r+0x8be>
 8008e08:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8008e0c:	9205      	str	r2, [sp, #20]
 8008e0e:	ea54 0205 	orrs.w	r2, r4, r5
 8008e12:	f040 8262 	bne.w	80092da <_vfiprintf_r+0x8ca>
 8008e16:	9a01      	ldr	r2, [sp, #4]
 8008e18:	2a00      	cmp	r2, #0
 8008e1a:	f000 8199 	beq.w	8009150 <_vfiprintf_r+0x740>
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	f040 825e 	bne.w	80092e0 <_vfiprintf_r+0x8d0>
 8008e24:	e13a      	b.n	800909c <_vfiprintf_r+0x68c>
 8008e26:	46a3      	mov	fp, r4
 8008e28:	f01a 0510 	ands.w	r5, sl, #16
 8008e2c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008e30:	d001      	beq.n	8008e36 <_vfiprintf_r+0x426>
 8008e32:	461d      	mov	r5, r3
 8008e34:	e7de      	b.n	8008df4 <_vfiprintf_r+0x3e4>
 8008e36:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8008e3a:	d001      	beq.n	8008e40 <_vfiprintf_r+0x430>
 8008e3c:	b2a4      	uxth	r4, r4
 8008e3e:	e7d9      	b.n	8008df4 <_vfiprintf_r+0x3e4>
 8008e40:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8008e44:	d0d6      	beq.n	8008df4 <_vfiprintf_r+0x3e4>
 8008e46:	b2e4      	uxtb	r4, r4
 8008e48:	e7f3      	b.n	8008e32 <_vfiprintf_r+0x422>
 8008e4a:	2330      	movs	r3, #48	; 0x30
 8008e4c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8008e50:	2378      	movs	r3, #120	; 0x78
 8008e52:	46a3      	mov	fp, r4
 8008e54:	2500      	movs	r5, #0
 8008e56:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8008e5a:	4b04      	ldr	r3, [pc, #16]	; (8008e6c <_vfiprintf_r+0x45c>)
 8008e5c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008e60:	f04a 0a02 	orr.w	sl, sl, #2
 8008e64:	9306      	str	r3, [sp, #24]
 8008e66:	2302      	movs	r3, #2
 8008e68:	e7c7      	b.n	8008dfa <_vfiprintf_r+0x3ea>
 8008e6a:	bf00      	nop
 8008e6c:	0801f7c0 	.word	0x0801f7c0
 8008e70:	46a3      	mov	fp, r4
 8008e72:	2500      	movs	r5, #0
 8008e74:	9b01      	ldr	r3, [sp, #4]
 8008e76:	f85b 8b04 	ldr.w	r8, [fp], #4
 8008e7a:	1c5c      	adds	r4, r3, #1
 8008e7c:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 8008e80:	f000 80ce 	beq.w	8009020 <_vfiprintf_r+0x610>
 8008e84:	461a      	mov	r2, r3
 8008e86:	4629      	mov	r1, r5
 8008e88:	4640      	mov	r0, r8
 8008e8a:	f7fe fed1 	bl	8007c30 <memchr>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f000 8173 	beq.w	800917a <_vfiprintf_r+0x76a>
 8008e94:	eba0 0308 	sub.w	r3, r0, r8
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	9b01      	ldr	r3, [sp, #4]
 8008e9c:	42ab      	cmp	r3, r5
 8008e9e:	bfb8      	it	lt
 8008ea0:	462b      	movlt	r3, r5
 8008ea2:	9305      	str	r3, [sp, #20]
 8008ea4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008ea8:	b113      	cbz	r3, 8008eb0 <_vfiprintf_r+0x4a0>
 8008eaa:	9b05      	ldr	r3, [sp, #20]
 8008eac:	3301      	adds	r3, #1
 8008eae:	9305      	str	r3, [sp, #20]
 8008eb0:	f01a 0302 	ands.w	r3, sl, #2
 8008eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8008eb6:	bf1e      	ittt	ne
 8008eb8:	9b05      	ldrne	r3, [sp, #20]
 8008eba:	3302      	addne	r3, #2
 8008ebc:	9305      	strne	r3, [sp, #20]
 8008ebe:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8008ec2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ec4:	d11f      	bne.n	8008f06 <_vfiprintf_r+0x4f6>
 8008ec6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008eca:	1a9c      	subs	r4, r3, r2
 8008ecc:	2c00      	cmp	r4, #0
 8008ece:	dd1a      	ble.n	8008f06 <_vfiprintf_r+0x4f6>
 8008ed0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8008ed4:	48aa      	ldr	r0, [pc, #680]	; (8009180 <_vfiprintf_r+0x770>)
 8008ed6:	2c10      	cmp	r4, #16
 8008ed8:	f103 0301 	add.w	r3, r3, #1
 8008edc:	f106 0108 	add.w	r1, r6, #8
 8008ee0:	6030      	str	r0, [r6, #0]
 8008ee2:	f300 8153 	bgt.w	800918c <_vfiprintf_r+0x77c>
 8008ee6:	6074      	str	r4, [r6, #4]
 8008ee8:	2b07      	cmp	r3, #7
 8008eea:	4414      	add	r4, r2
 8008eec:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8008ef0:	f340 815e 	ble.w	80091b0 <_vfiprintf_r+0x7a0>
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	4648      	mov	r0, r9
 8008ef8:	aa0e      	add	r2, sp, #56	; 0x38
 8008efa:	f7ff fd57 	bl	80089ac <__sprint_r>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f040 81b7 	bne.w	8009272 <_vfiprintf_r+0x862>
 8008f04:	ae11      	add	r6, sp, #68	; 0x44
 8008f06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008f0a:	b173      	cbz	r3, 8008f2a <_vfiprintf_r+0x51a>
 8008f0c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008f10:	6032      	str	r2, [r6, #0]
 8008f12:	2201      	movs	r2, #1
 8008f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f16:	6072      	str	r2, [r6, #4]
 8008f18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	3201      	adds	r2, #1
 8008f1e:	2b07      	cmp	r3, #7
 8008f20:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8008f24:	f300 8146 	bgt.w	80091b4 <_vfiprintf_r+0x7a4>
 8008f28:	3608      	adds	r6, #8
 8008f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2c:	b16b      	cbz	r3, 8008f4a <_vfiprintf_r+0x53a>
 8008f2e:	aa0d      	add	r2, sp, #52	; 0x34
 8008f30:	6032      	str	r2, [r6, #0]
 8008f32:	2202      	movs	r2, #2
 8008f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f36:	6072      	str	r2, [r6, #4]
 8008f38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	3202      	adds	r2, #2
 8008f3e:	2b07      	cmp	r3, #7
 8008f40:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8008f44:	f300 813f 	bgt.w	80091c6 <_vfiprintf_r+0x7b6>
 8008f48:	3608      	adds	r6, #8
 8008f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f4c:	2b80      	cmp	r3, #128	; 0x80
 8008f4e:	d11f      	bne.n	8008f90 <_vfiprintf_r+0x580>
 8008f50:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008f54:	1a9c      	subs	r4, r3, r2
 8008f56:	2c00      	cmp	r4, #0
 8008f58:	dd1a      	ble.n	8008f90 <_vfiprintf_r+0x580>
 8008f5a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8008f5e:	4889      	ldr	r0, [pc, #548]	; (8009184 <_vfiprintf_r+0x774>)
 8008f60:	2c10      	cmp	r4, #16
 8008f62:	f103 0301 	add.w	r3, r3, #1
 8008f66:	f106 0108 	add.w	r1, r6, #8
 8008f6a:	6030      	str	r0, [r6, #0]
 8008f6c:	f300 8134 	bgt.w	80091d8 <_vfiprintf_r+0x7c8>
 8008f70:	6074      	str	r4, [r6, #4]
 8008f72:	2b07      	cmp	r3, #7
 8008f74:	4414      	add	r4, r2
 8008f76:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8008f7a:	f340 813f 	ble.w	80091fc <_vfiprintf_r+0x7ec>
 8008f7e:	4639      	mov	r1, r7
 8008f80:	4648      	mov	r0, r9
 8008f82:	aa0e      	add	r2, sp, #56	; 0x38
 8008f84:	f7ff fd12 	bl	80089ac <__sprint_r>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	f040 8172 	bne.w	8009272 <_vfiprintf_r+0x862>
 8008f8e:	ae11      	add	r6, sp, #68	; 0x44
 8008f90:	9b01      	ldr	r3, [sp, #4]
 8008f92:	1aec      	subs	r4, r5, r3
 8008f94:	2c00      	cmp	r4, #0
 8008f96:	dd1a      	ble.n	8008fce <_vfiprintf_r+0x5be>
 8008f98:	4d7a      	ldr	r5, [pc, #488]	; (8009184 <_vfiprintf_r+0x774>)
 8008f9a:	2c10      	cmp	r4, #16
 8008f9c:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 8008fa0:	f106 0208 	add.w	r2, r6, #8
 8008fa4:	f103 0301 	add.w	r3, r3, #1
 8008fa8:	6035      	str	r5, [r6, #0]
 8008faa:	f300 8129 	bgt.w	8009200 <_vfiprintf_r+0x7f0>
 8008fae:	6074      	str	r4, [r6, #4]
 8008fb0:	2b07      	cmp	r3, #7
 8008fb2:	440c      	add	r4, r1
 8008fb4:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8008fb8:	f340 8133 	ble.w	8009222 <_vfiprintf_r+0x812>
 8008fbc:	4639      	mov	r1, r7
 8008fbe:	4648      	mov	r0, r9
 8008fc0:	aa0e      	add	r2, sp, #56	; 0x38
 8008fc2:	f7ff fcf3 	bl	80089ac <__sprint_r>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f040 8153 	bne.w	8009272 <_vfiprintf_r+0x862>
 8008fcc:	ae11      	add	r6, sp, #68	; 0x44
 8008fce:	9b01      	ldr	r3, [sp, #4]
 8008fd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008fd2:	6073      	str	r3, [r6, #4]
 8008fd4:	4418      	add	r0, r3
 8008fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fd8:	f8c6 8000 	str.w	r8, [r6]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	2b07      	cmp	r3, #7
 8008fe0:	9010      	str	r0, [sp, #64]	; 0x40
 8008fe2:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fe4:	f300 811f 	bgt.w	8009226 <_vfiprintf_r+0x816>
 8008fe8:	f106 0308 	add.w	r3, r6, #8
 8008fec:	f01a 0f04 	tst.w	sl, #4
 8008ff0:	f040 8121 	bne.w	8009236 <_vfiprintf_r+0x826>
 8008ff4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008ff8:	9905      	ldr	r1, [sp, #20]
 8008ffa:	428a      	cmp	r2, r1
 8008ffc:	bfac      	ite	ge
 8008ffe:	189b      	addge	r3, r3, r2
 8009000:	185b      	addlt	r3, r3, r1
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009006:	b13b      	cbz	r3, 8009018 <_vfiprintf_r+0x608>
 8009008:	4639      	mov	r1, r7
 800900a:	4648      	mov	r0, r9
 800900c:	aa0e      	add	r2, sp, #56	; 0x38
 800900e:	f7ff fccd 	bl	80089ac <__sprint_r>
 8009012:	2800      	cmp	r0, #0
 8009014:	f040 812d 	bne.w	8009272 <_vfiprintf_r+0x862>
 8009018:	2300      	movs	r3, #0
 800901a:	ae11      	add	r6, sp, #68	; 0x44
 800901c:	930f      	str	r3, [sp, #60]	; 0x3c
 800901e:	e6c6      	b.n	8008dae <_vfiprintf_r+0x39e>
 8009020:	4640      	mov	r0, r8
 8009022:	f7f7 f901 	bl	8000228 <strlen>
 8009026:	9001      	str	r0, [sp, #4]
 8009028:	e737      	b.n	8008e9a <_vfiprintf_r+0x48a>
 800902a:	f04a 0a10 	orr.w	sl, sl, #16
 800902e:	f01a 0320 	ands.w	r3, sl, #32
 8009032:	d008      	beq.n	8009046 <_vfiprintf_r+0x636>
 8009034:	3407      	adds	r4, #7
 8009036:	f024 0307 	bic.w	r3, r4, #7
 800903a:	469b      	mov	fp, r3
 800903c:	685d      	ldr	r5, [r3, #4]
 800903e:	f85b 4b08 	ldr.w	r4, [fp], #8
 8009042:	2301      	movs	r3, #1
 8009044:	e6d9      	b.n	8008dfa <_vfiprintf_r+0x3ea>
 8009046:	46a3      	mov	fp, r4
 8009048:	f01a 0510 	ands.w	r5, sl, #16
 800904c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009050:	d001      	beq.n	8009056 <_vfiprintf_r+0x646>
 8009052:	461d      	mov	r5, r3
 8009054:	e7f5      	b.n	8009042 <_vfiprintf_r+0x632>
 8009056:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800905a:	d001      	beq.n	8009060 <_vfiprintf_r+0x650>
 800905c:	b2a4      	uxth	r4, r4
 800905e:	e7f0      	b.n	8009042 <_vfiprintf_r+0x632>
 8009060:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8009064:	d0ed      	beq.n	8009042 <_vfiprintf_r+0x632>
 8009066:	b2e4      	uxtb	r4, r4
 8009068:	e7f3      	b.n	8009052 <_vfiprintf_r+0x642>
 800906a:	4a47      	ldr	r2, [pc, #284]	; (8009188 <_vfiprintf_r+0x778>)
 800906c:	e5c6      	b.n	8008bfc <_vfiprintf_r+0x1ec>
 800906e:	46a3      	mov	fp, r4
 8009070:	f01a 0510 	ands.w	r5, sl, #16
 8009074:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009078:	d001      	beq.n	800907e <_vfiprintf_r+0x66e>
 800907a:	4615      	mov	r5, r2
 800907c:	e5ca      	b.n	8008c14 <_vfiprintf_r+0x204>
 800907e:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8009082:	d001      	beq.n	8009088 <_vfiprintf_r+0x678>
 8009084:	b2a4      	uxth	r4, r4
 8009086:	e5c5      	b.n	8008c14 <_vfiprintf_r+0x204>
 8009088:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800908c:	f43f adc2 	beq.w	8008c14 <_vfiprintf_r+0x204>
 8009090:	b2e4      	uxtb	r4, r4
 8009092:	e7f2      	b.n	800907a <_vfiprintf_r+0x66a>
 8009094:	2c0a      	cmp	r4, #10
 8009096:	f175 0300 	sbcs.w	r3, r5, #0
 800909a:	d205      	bcs.n	80090a8 <_vfiprintf_r+0x698>
 800909c:	3430      	adds	r4, #48	; 0x30
 800909e:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 80090a2:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 80090a6:	e137      	b.n	8009318 <_vfiprintf_r+0x908>
 80090a8:	f04f 0a00 	mov.w	sl, #0
 80090ac:	ab3a      	add	r3, sp, #232	; 0xe8
 80090ae:	930a      	str	r3, [sp, #40]	; 0x28
 80090b0:	9b05      	ldr	r3, [sp, #20]
 80090b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80090b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ba:	220a      	movs	r2, #10
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80090c4:	2300      	movs	r3, #0
 80090c6:	f7f7 fd6b 	bl	8000ba0 <__aeabi_uldivmod>
 80090ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090cc:	3230      	adds	r2, #48	; 0x30
 80090ce:	f803 2c01 	strb.w	r2, [r3, #-1]
 80090d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090d4:	f10a 0a01 	add.w	sl, sl, #1
 80090d8:	b1d3      	cbz	r3, 8009110 <_vfiprintf_r+0x700>
 80090da:	9b07      	ldr	r3, [sp, #28]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	4553      	cmp	r3, sl
 80090e0:	d116      	bne.n	8009110 <_vfiprintf_r+0x700>
 80090e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80090e6:	d013      	beq.n	8009110 <_vfiprintf_r+0x700>
 80090e8:	2c0a      	cmp	r4, #10
 80090ea:	f175 0300 	sbcs.w	r3, r5, #0
 80090ee:	d30f      	bcc.n	8009110 <_vfiprintf_r+0x700>
 80090f0:	9b08      	ldr	r3, [sp, #32]
 80090f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090f4:	eba8 0803 	sub.w	r8, r8, r3
 80090f8:	461a      	mov	r2, r3
 80090fa:	4640      	mov	r0, r8
 80090fc:	f7ff f938 	bl	8008370 <strncpy>
 8009100:	9b07      	ldr	r3, [sp, #28]
 8009102:	785b      	ldrb	r3, [r3, #1]
 8009104:	b1a3      	cbz	r3, 8009130 <_vfiprintf_r+0x720>
 8009106:	f04f 0a00 	mov.w	sl, #0
 800910a:	9b07      	ldr	r3, [sp, #28]
 800910c:	3301      	adds	r3, #1
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	2300      	movs	r3, #0
 8009112:	220a      	movs	r2, #10
 8009114:	4620      	mov	r0, r4
 8009116:	4629      	mov	r1, r5
 8009118:	f7f7 fd42 	bl	8000ba0 <__aeabi_uldivmod>
 800911c:	2c0a      	cmp	r4, #10
 800911e:	f175 0300 	sbcs.w	r3, r5, #0
 8009122:	f0c0 80f9 	bcc.w	8009318 <_vfiprintf_r+0x908>
 8009126:	4604      	mov	r4, r0
 8009128:	460d      	mov	r5, r1
 800912a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800912e:	e7c3      	b.n	80090b8 <_vfiprintf_r+0x6a8>
 8009130:	469a      	mov	sl, r3
 8009132:	e7ed      	b.n	8009110 <_vfiprintf_r+0x700>
 8009134:	9a06      	ldr	r2, [sp, #24]
 8009136:	f004 030f 	and.w	r3, r4, #15
 800913a:	5cd3      	ldrb	r3, [r2, r3]
 800913c:	0924      	lsrs	r4, r4, #4
 800913e:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8009142:	092d      	lsrs	r5, r5, #4
 8009144:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009148:	ea54 0305 	orrs.w	r3, r4, r5
 800914c:	d1f2      	bne.n	8009134 <_vfiprintf_r+0x724>
 800914e:	e0e3      	b.n	8009318 <_vfiprintf_r+0x908>
 8009150:	b933      	cbnz	r3, 8009160 <_vfiprintf_r+0x750>
 8009152:	f01a 0f01 	tst.w	sl, #1
 8009156:	d003      	beq.n	8009160 <_vfiprintf_r+0x750>
 8009158:	2330      	movs	r3, #48	; 0x30
 800915a:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800915e:	e7a0      	b.n	80090a2 <_vfiprintf_r+0x692>
 8009160:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 8009164:	e0d8      	b.n	8009318 <_vfiprintf_r+0x908>
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 80a4 	beq.w	80092b4 <_vfiprintf_r+0x8a4>
 800916c:	2100      	movs	r1, #0
 800916e:	46a3      	mov	fp, r4
 8009170:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8009174:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 8009178:	e5db      	b.n	8008d32 <_vfiprintf_r+0x322>
 800917a:	4605      	mov	r5, r0
 800917c:	e68d      	b.n	8008e9a <_vfiprintf_r+0x48a>
 800917e:	bf00      	nop
 8009180:	0801fa22 	.word	0x0801fa22
 8009184:	0801fa32 	.word	0x0801fa32
 8009188:	0801f7d1 	.word	0x0801f7d1
 800918c:	2010      	movs	r0, #16
 800918e:	2b07      	cmp	r3, #7
 8009190:	4402      	add	r2, r0
 8009192:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8009196:	6070      	str	r0, [r6, #4]
 8009198:	dd07      	ble.n	80091aa <_vfiprintf_r+0x79a>
 800919a:	4639      	mov	r1, r7
 800919c:	4648      	mov	r0, r9
 800919e:	aa0e      	add	r2, sp, #56	; 0x38
 80091a0:	f7ff fc04 	bl	80089ac <__sprint_r>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d164      	bne.n	8009272 <_vfiprintf_r+0x862>
 80091a8:	a911      	add	r1, sp, #68	; 0x44
 80091aa:	460e      	mov	r6, r1
 80091ac:	3c10      	subs	r4, #16
 80091ae:	e68f      	b.n	8008ed0 <_vfiprintf_r+0x4c0>
 80091b0:	460e      	mov	r6, r1
 80091b2:	e6a8      	b.n	8008f06 <_vfiprintf_r+0x4f6>
 80091b4:	4639      	mov	r1, r7
 80091b6:	4648      	mov	r0, r9
 80091b8:	aa0e      	add	r2, sp, #56	; 0x38
 80091ba:	f7ff fbf7 	bl	80089ac <__sprint_r>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d157      	bne.n	8009272 <_vfiprintf_r+0x862>
 80091c2:	ae11      	add	r6, sp, #68	; 0x44
 80091c4:	e6b1      	b.n	8008f2a <_vfiprintf_r+0x51a>
 80091c6:	4639      	mov	r1, r7
 80091c8:	4648      	mov	r0, r9
 80091ca:	aa0e      	add	r2, sp, #56	; 0x38
 80091cc:	f7ff fbee 	bl	80089ac <__sprint_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d14e      	bne.n	8009272 <_vfiprintf_r+0x862>
 80091d4:	ae11      	add	r6, sp, #68	; 0x44
 80091d6:	e6b8      	b.n	8008f4a <_vfiprintf_r+0x53a>
 80091d8:	2010      	movs	r0, #16
 80091da:	2b07      	cmp	r3, #7
 80091dc:	4402      	add	r2, r0
 80091de:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 80091e2:	6070      	str	r0, [r6, #4]
 80091e4:	dd07      	ble.n	80091f6 <_vfiprintf_r+0x7e6>
 80091e6:	4639      	mov	r1, r7
 80091e8:	4648      	mov	r0, r9
 80091ea:	aa0e      	add	r2, sp, #56	; 0x38
 80091ec:	f7ff fbde 	bl	80089ac <__sprint_r>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d13e      	bne.n	8009272 <_vfiprintf_r+0x862>
 80091f4:	a911      	add	r1, sp, #68	; 0x44
 80091f6:	460e      	mov	r6, r1
 80091f8:	3c10      	subs	r4, #16
 80091fa:	e6ae      	b.n	8008f5a <_vfiprintf_r+0x54a>
 80091fc:	460e      	mov	r6, r1
 80091fe:	e6c7      	b.n	8008f90 <_vfiprintf_r+0x580>
 8009200:	2010      	movs	r0, #16
 8009202:	2b07      	cmp	r3, #7
 8009204:	4401      	add	r1, r0
 8009206:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 800920a:	6070      	str	r0, [r6, #4]
 800920c:	dd06      	ble.n	800921c <_vfiprintf_r+0x80c>
 800920e:	4639      	mov	r1, r7
 8009210:	4648      	mov	r0, r9
 8009212:	aa0e      	add	r2, sp, #56	; 0x38
 8009214:	f7ff fbca 	bl	80089ac <__sprint_r>
 8009218:	bb58      	cbnz	r0, 8009272 <_vfiprintf_r+0x862>
 800921a:	aa11      	add	r2, sp, #68	; 0x44
 800921c:	4616      	mov	r6, r2
 800921e:	3c10      	subs	r4, #16
 8009220:	e6bb      	b.n	8008f9a <_vfiprintf_r+0x58a>
 8009222:	4616      	mov	r6, r2
 8009224:	e6d3      	b.n	8008fce <_vfiprintf_r+0x5be>
 8009226:	4639      	mov	r1, r7
 8009228:	4648      	mov	r0, r9
 800922a:	aa0e      	add	r2, sp, #56	; 0x38
 800922c:	f7ff fbbe 	bl	80089ac <__sprint_r>
 8009230:	b9f8      	cbnz	r0, 8009272 <_vfiprintf_r+0x862>
 8009232:	ab11      	add	r3, sp, #68	; 0x44
 8009234:	e6da      	b.n	8008fec <_vfiprintf_r+0x5dc>
 8009236:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800923a:	1a54      	subs	r4, r2, r1
 800923c:	2c00      	cmp	r4, #0
 800923e:	f77f aed9 	ble.w	8008ff4 <_vfiprintf_r+0x5e4>
 8009242:	2610      	movs	r6, #16
 8009244:	4d38      	ldr	r5, [pc, #224]	; (8009328 <_vfiprintf_r+0x918>)
 8009246:	2c10      	cmp	r4, #16
 8009248:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800924c:	601d      	str	r5, [r3, #0]
 800924e:	f102 0201 	add.w	r2, r2, #1
 8009252:	dc1d      	bgt.n	8009290 <_vfiprintf_r+0x880>
 8009254:	605c      	str	r4, [r3, #4]
 8009256:	2a07      	cmp	r2, #7
 8009258:	440c      	add	r4, r1
 800925a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800925e:	f77f aec9 	ble.w	8008ff4 <_vfiprintf_r+0x5e4>
 8009262:	4639      	mov	r1, r7
 8009264:	4648      	mov	r0, r9
 8009266:	aa0e      	add	r2, sp, #56	; 0x38
 8009268:	f7ff fba0 	bl	80089ac <__sprint_r>
 800926c:	2800      	cmp	r0, #0
 800926e:	f43f aec1 	beq.w	8008ff4 <_vfiprintf_r+0x5e4>
 8009272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009274:	07d9      	lsls	r1, r3, #31
 8009276:	d405      	bmi.n	8009284 <_vfiprintf_r+0x874>
 8009278:	89bb      	ldrh	r3, [r7, #12]
 800927a:	059a      	lsls	r2, r3, #22
 800927c:	d402      	bmi.n	8009284 <_vfiprintf_r+0x874>
 800927e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009280:	f7fe fa99 	bl	80077b6 <__retarget_lock_release_recursive>
 8009284:	89bb      	ldrh	r3, [r7, #12]
 8009286:	065b      	lsls	r3, r3, #25
 8009288:	f57f abf3 	bpl.w	8008a72 <_vfiprintf_r+0x62>
 800928c:	f7ff bbee 	b.w	8008a6c <_vfiprintf_r+0x5c>
 8009290:	3110      	adds	r1, #16
 8009292:	2a07      	cmp	r2, #7
 8009294:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8009298:	605e      	str	r6, [r3, #4]
 800929a:	dc02      	bgt.n	80092a2 <_vfiprintf_r+0x892>
 800929c:	3308      	adds	r3, #8
 800929e:	3c10      	subs	r4, #16
 80092a0:	e7d1      	b.n	8009246 <_vfiprintf_r+0x836>
 80092a2:	4639      	mov	r1, r7
 80092a4:	4648      	mov	r0, r9
 80092a6:	aa0e      	add	r2, sp, #56	; 0x38
 80092a8:	f7ff fb80 	bl	80089ac <__sprint_r>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d1e0      	bne.n	8009272 <_vfiprintf_r+0x862>
 80092b0:	ab11      	add	r3, sp, #68	; 0x44
 80092b2:	e7f4      	b.n	800929e <_vfiprintf_r+0x88e>
 80092b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092b6:	b913      	cbnz	r3, 80092be <_vfiprintf_r+0x8ae>
 80092b8:	2300      	movs	r3, #0
 80092ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80092bc:	e7d9      	b.n	8009272 <_vfiprintf_r+0x862>
 80092be:	4639      	mov	r1, r7
 80092c0:	4648      	mov	r0, r9
 80092c2:	aa0e      	add	r2, sp, #56	; 0x38
 80092c4:	f7ff fb72 	bl	80089ac <__sprint_r>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d0f5      	beq.n	80092b8 <_vfiprintf_r+0x8a8>
 80092cc:	e7d1      	b.n	8009272 <_vfiprintf_r+0x862>
 80092ce:	ea54 0205 	orrs.w	r2, r4, r5
 80092d2:	f8cd a014 	str.w	sl, [sp, #20]
 80092d6:	f43f ada2 	beq.w	8008e1e <_vfiprintf_r+0x40e>
 80092da:	2b01      	cmp	r3, #1
 80092dc:	f43f aeda 	beq.w	8009094 <_vfiprintf_r+0x684>
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 80092e6:	f43f af25 	beq.w	8009134 <_vfiprintf_r+0x724>
 80092ea:	f004 0307 	and.w	r3, r4, #7
 80092ee:	08e4      	lsrs	r4, r4, #3
 80092f0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80092f4:	08ed      	lsrs	r5, r5, #3
 80092f6:	3330      	adds	r3, #48	; 0x30
 80092f8:	ea54 0105 	orrs.w	r1, r4, r5
 80092fc:	4642      	mov	r2, r8
 80092fe:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009302:	d1f2      	bne.n	80092ea <_vfiprintf_r+0x8da>
 8009304:	9905      	ldr	r1, [sp, #20]
 8009306:	07c8      	lsls	r0, r1, #31
 8009308:	d506      	bpl.n	8009318 <_vfiprintf_r+0x908>
 800930a:	2b30      	cmp	r3, #48	; 0x30
 800930c:	d004      	beq.n	8009318 <_vfiprintf_r+0x908>
 800930e:	2330      	movs	r3, #48	; 0x30
 8009310:	f808 3c01 	strb.w	r3, [r8, #-1]
 8009314:	f1a2 0802 	sub.w	r8, r2, #2
 8009318:	ab3a      	add	r3, sp, #232	; 0xe8
 800931a:	eba3 0308 	sub.w	r3, r3, r8
 800931e:	9d01      	ldr	r5, [sp, #4]
 8009320:	f8dd a014 	ldr.w	sl, [sp, #20]
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	e5b8      	b.n	8008e9a <_vfiprintf_r+0x48a>
 8009328:	0801fa22 	.word	0x0801fa22

0800932c <__sbprintf>:
 800932c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800932e:	461f      	mov	r7, r3
 8009330:	898b      	ldrh	r3, [r1, #12]
 8009332:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8009336:	f023 0302 	bic.w	r3, r3, #2
 800933a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800933e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009340:	4615      	mov	r5, r2
 8009342:	9319      	str	r3, [sp, #100]	; 0x64
 8009344:	89cb      	ldrh	r3, [r1, #14]
 8009346:	4606      	mov	r6, r0
 8009348:	f8ad 300e 	strh.w	r3, [sp, #14]
 800934c:	69cb      	ldr	r3, [r1, #28]
 800934e:	a816      	add	r0, sp, #88	; 0x58
 8009350:	9307      	str	r3, [sp, #28]
 8009352:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8009354:	460c      	mov	r4, r1
 8009356:	9309      	str	r3, [sp, #36]	; 0x24
 8009358:	ab1a      	add	r3, sp, #104	; 0x68
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009362:	9302      	str	r3, [sp, #8]
 8009364:	9305      	str	r3, [sp, #20]
 8009366:	2300      	movs	r3, #0
 8009368:	9306      	str	r3, [sp, #24]
 800936a:	f7fe fa21 	bl	80077b0 <__retarget_lock_init_recursive>
 800936e:	462a      	mov	r2, r5
 8009370:	463b      	mov	r3, r7
 8009372:	4669      	mov	r1, sp
 8009374:	4630      	mov	r0, r6
 8009376:	f7ff fb4b 	bl	8008a10 <_vfiprintf_r>
 800937a:	1e05      	subs	r5, r0, #0
 800937c:	db07      	blt.n	800938e <__sbprintf+0x62>
 800937e:	4669      	mov	r1, sp
 8009380:	4630      	mov	r0, r6
 8009382:	f000 f90b 	bl	800959c <_fflush_r>
 8009386:	2800      	cmp	r0, #0
 8009388:	bf18      	it	ne
 800938a:	f04f 35ff 	movne.w	r5, #4294967295
 800938e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009392:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009394:	065b      	lsls	r3, r3, #25
 8009396:	bf42      	ittt	mi
 8009398:	89a3      	ldrhmi	r3, [r4, #12]
 800939a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800939e:	81a3      	strhmi	r3, [r4, #12]
 80093a0:	f7fe fa07 	bl	80077b2 <__retarget_lock_close_recursive>
 80093a4:	4628      	mov	r0, r5
 80093a6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80093aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093ac <__ascii_wctomb>:
 80093ac:	4603      	mov	r3, r0
 80093ae:	4608      	mov	r0, r1
 80093b0:	b141      	cbz	r1, 80093c4 <__ascii_wctomb+0x18>
 80093b2:	2aff      	cmp	r2, #255	; 0xff
 80093b4:	d904      	bls.n	80093c0 <__ascii_wctomb+0x14>
 80093b6:	228a      	movs	r2, #138	; 0x8a
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	4770      	bx	lr
 80093c0:	2001      	movs	r0, #1
 80093c2:	700a      	strb	r2, [r1, #0]
 80093c4:	4770      	bx	lr
	...

080093c8 <__swsetup_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4b2a      	ldr	r3, [pc, #168]	; (8009474 <__swsetup_r+0xac>)
 80093cc:	4605      	mov	r5, r0
 80093ce:	6818      	ldr	r0, [r3, #0]
 80093d0:	460c      	mov	r4, r1
 80093d2:	b118      	cbz	r0, 80093dc <__swsetup_r+0x14>
 80093d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80093d6:	b90b      	cbnz	r3, 80093dc <__swsetup_r+0x14>
 80093d8:	f000 f94c 	bl	8009674 <__sinit>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093e2:	0718      	lsls	r0, r3, #28
 80093e4:	d422      	bmi.n	800942c <__swsetup_r+0x64>
 80093e6:	06d9      	lsls	r1, r3, #27
 80093e8:	d407      	bmi.n	80093fa <__swsetup_r+0x32>
 80093ea:	2309      	movs	r3, #9
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093f2:	f04f 30ff 	mov.w	r0, #4294967295
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	e034      	b.n	8009464 <__swsetup_r+0x9c>
 80093fa:	0758      	lsls	r0, r3, #29
 80093fc:	d512      	bpl.n	8009424 <__swsetup_r+0x5c>
 80093fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009400:	b141      	cbz	r1, 8009414 <__swsetup_r+0x4c>
 8009402:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009406:	4299      	cmp	r1, r3
 8009408:	d002      	beq.n	8009410 <__swsetup_r+0x48>
 800940a:	4628      	mov	r0, r5
 800940c:	f7fe f90c 	bl	8007628 <_free_r>
 8009410:	2300      	movs	r3, #0
 8009412:	6323      	str	r3, [r4, #48]	; 0x30
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	2300      	movs	r3, #0
 800941e:	6063      	str	r3, [r4, #4]
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	f043 0308 	orr.w	r3, r3, #8
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	b94b      	cbnz	r3, 8009444 <__swsetup_r+0x7c>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800943a:	d003      	beq.n	8009444 <__swsetup_r+0x7c>
 800943c:	4621      	mov	r1, r4
 800943e:	4628      	mov	r0, r5
 8009440:	f000 fb3e 	bl	8009ac0 <__smakebuf_r>
 8009444:	89a0      	ldrh	r0, [r4, #12]
 8009446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800944a:	f010 0301 	ands.w	r3, r0, #1
 800944e:	d00a      	beq.n	8009466 <__swsetup_r+0x9e>
 8009450:	2300      	movs	r3, #0
 8009452:	60a3      	str	r3, [r4, #8]
 8009454:	6963      	ldr	r3, [r4, #20]
 8009456:	425b      	negs	r3, r3
 8009458:	61a3      	str	r3, [r4, #24]
 800945a:	6923      	ldr	r3, [r4, #16]
 800945c:	b943      	cbnz	r3, 8009470 <__swsetup_r+0xa8>
 800945e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009462:	d1c4      	bne.n	80093ee <__swsetup_r+0x26>
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	0781      	lsls	r1, r0, #30
 8009468:	bf58      	it	pl
 800946a:	6963      	ldrpl	r3, [r4, #20]
 800946c:	60a3      	str	r3, [r4, #8]
 800946e:	e7f4      	b.n	800945a <__swsetup_r+0x92>
 8009470:	2000      	movs	r0, #0
 8009472:	e7f7      	b.n	8009464 <__swsetup_r+0x9c>
 8009474:	20000040 	.word	0x20000040

08009478 <abort>:
 8009478:	2006      	movs	r0, #6
 800947a:	b508      	push	{r3, lr}
 800947c:	f000 fb8a 	bl	8009b94 <raise>
 8009480:	2001      	movs	r0, #1
 8009482:	f7f9 f92a 	bl	80026da <_exit>
	...

08009488 <__sflush_r>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	898b      	ldrh	r3, [r1, #12]
 800948c:	4605      	mov	r5, r0
 800948e:	0718      	lsls	r0, r3, #28
 8009490:	460c      	mov	r4, r1
 8009492:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009496:	d45e      	bmi.n	8009556 <__sflush_r+0xce>
 8009498:	684b      	ldr	r3, [r1, #4]
 800949a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800949e:	2b00      	cmp	r3, #0
 80094a0:	818a      	strh	r2, [r1, #12]
 80094a2:	dc04      	bgt.n	80094ae <__sflush_r+0x26>
 80094a4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dc01      	bgt.n	80094ae <__sflush_r+0x26>
 80094aa:	2000      	movs	r0, #0
 80094ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094b0:	2e00      	cmp	r6, #0
 80094b2:	d0fa      	beq.n	80094aa <__sflush_r+0x22>
 80094b4:	2300      	movs	r3, #0
 80094b6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094ba:	682f      	ldr	r7, [r5, #0]
 80094bc:	602b      	str	r3, [r5, #0]
 80094be:	d036      	beq.n	800952e <__sflush_r+0xa6>
 80094c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	075a      	lsls	r2, r3, #29
 80094c6:	d505      	bpl.n	80094d4 <__sflush_r+0x4c>
 80094c8:	6863      	ldr	r3, [r4, #4]
 80094ca:	1ac0      	subs	r0, r0, r3
 80094cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80094ce:	b10b      	cbz	r3, 80094d4 <__sflush_r+0x4c>
 80094d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094d2:	1ac0      	subs	r0, r0, r3
 80094d4:	2300      	movs	r3, #0
 80094d6:	4602      	mov	r2, r0
 80094d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094da:	4628      	mov	r0, r5
 80094dc:	69e1      	ldr	r1, [r4, #28]
 80094de:	47b0      	blx	r6
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	d106      	bne.n	80094f4 <__sflush_r+0x6c>
 80094e6:	6829      	ldr	r1, [r5, #0]
 80094e8:	291d      	cmp	r1, #29
 80094ea:	d830      	bhi.n	800954e <__sflush_r+0xc6>
 80094ec:	4a2a      	ldr	r2, [pc, #168]	; (8009598 <__sflush_r+0x110>)
 80094ee:	40ca      	lsrs	r2, r1
 80094f0:	07d6      	lsls	r6, r2, #31
 80094f2:	d52c      	bpl.n	800954e <__sflush_r+0xc6>
 80094f4:	2200      	movs	r2, #0
 80094f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094fa:	b21b      	sxth	r3, r3
 80094fc:	6062      	str	r2, [r4, #4]
 80094fe:	6922      	ldr	r2, [r4, #16]
 8009500:	04d9      	lsls	r1, r3, #19
 8009502:	81a3      	strh	r3, [r4, #12]
 8009504:	6022      	str	r2, [r4, #0]
 8009506:	d504      	bpl.n	8009512 <__sflush_r+0x8a>
 8009508:	1c42      	adds	r2, r0, #1
 800950a:	d101      	bne.n	8009510 <__sflush_r+0x88>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	b903      	cbnz	r3, 8009512 <__sflush_r+0x8a>
 8009510:	6520      	str	r0, [r4, #80]	; 0x50
 8009512:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009514:	602f      	str	r7, [r5, #0]
 8009516:	2900      	cmp	r1, #0
 8009518:	d0c7      	beq.n	80094aa <__sflush_r+0x22>
 800951a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800951e:	4299      	cmp	r1, r3
 8009520:	d002      	beq.n	8009528 <__sflush_r+0xa0>
 8009522:	4628      	mov	r0, r5
 8009524:	f7fe f880 	bl	8007628 <_free_r>
 8009528:	2000      	movs	r0, #0
 800952a:	6320      	str	r0, [r4, #48]	; 0x30
 800952c:	e7be      	b.n	80094ac <__sflush_r+0x24>
 800952e:	69e1      	ldr	r1, [r4, #28]
 8009530:	2301      	movs	r3, #1
 8009532:	4628      	mov	r0, r5
 8009534:	47b0      	blx	r6
 8009536:	1c41      	adds	r1, r0, #1
 8009538:	d1c3      	bne.n	80094c2 <__sflush_r+0x3a>
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0c0      	beq.n	80094c2 <__sflush_r+0x3a>
 8009540:	2b1d      	cmp	r3, #29
 8009542:	d001      	beq.n	8009548 <__sflush_r+0xc0>
 8009544:	2b16      	cmp	r3, #22
 8009546:	d101      	bne.n	800954c <__sflush_r+0xc4>
 8009548:	602f      	str	r7, [r5, #0]
 800954a:	e7ae      	b.n	80094aa <__sflush_r+0x22>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	e7aa      	b.n	80094ac <__sflush_r+0x24>
 8009556:	690f      	ldr	r7, [r1, #16]
 8009558:	2f00      	cmp	r7, #0
 800955a:	d0a6      	beq.n	80094aa <__sflush_r+0x22>
 800955c:	079b      	lsls	r3, r3, #30
 800955e:	bf18      	it	ne
 8009560:	2300      	movne	r3, #0
 8009562:	680e      	ldr	r6, [r1, #0]
 8009564:	bf08      	it	eq
 8009566:	694b      	ldreq	r3, [r1, #20]
 8009568:	1bf6      	subs	r6, r6, r7
 800956a:	600f      	str	r7, [r1, #0]
 800956c:	608b      	str	r3, [r1, #8]
 800956e:	2e00      	cmp	r6, #0
 8009570:	dd9b      	ble.n	80094aa <__sflush_r+0x22>
 8009572:	4633      	mov	r3, r6
 8009574:	463a      	mov	r2, r7
 8009576:	4628      	mov	r0, r5
 8009578:	69e1      	ldr	r1, [r4, #28]
 800957a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800957e:	47e0      	blx	ip
 8009580:	2800      	cmp	r0, #0
 8009582:	dc06      	bgt.n	8009592 <__sflush_r+0x10a>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	f04f 30ff 	mov.w	r0, #4294967295
 800958a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	e78c      	b.n	80094ac <__sflush_r+0x24>
 8009592:	4407      	add	r7, r0
 8009594:	1a36      	subs	r6, r6, r0
 8009596:	e7ea      	b.n	800956e <__sflush_r+0xe6>
 8009598:	20400001 	.word	0x20400001

0800959c <_fflush_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	460c      	mov	r4, r1
 80095a0:	4605      	mov	r5, r0
 80095a2:	b118      	cbz	r0, 80095ac <_fflush_r+0x10>
 80095a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80095a6:	b90b      	cbnz	r3, 80095ac <_fflush_r+0x10>
 80095a8:	f000 f864 	bl	8009674 <__sinit>
 80095ac:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80095b0:	b1b8      	cbz	r0, 80095e2 <_fflush_r+0x46>
 80095b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095b4:	07db      	lsls	r3, r3, #31
 80095b6:	d404      	bmi.n	80095c2 <_fflush_r+0x26>
 80095b8:	0581      	lsls	r1, r0, #22
 80095ba:	d402      	bmi.n	80095c2 <_fflush_r+0x26>
 80095bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095be:	f7fe f8f9 	bl	80077b4 <__retarget_lock_acquire_recursive>
 80095c2:	4628      	mov	r0, r5
 80095c4:	4621      	mov	r1, r4
 80095c6:	f7ff ff5f 	bl	8009488 <__sflush_r>
 80095ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095cc:	4605      	mov	r5, r0
 80095ce:	07da      	lsls	r2, r3, #31
 80095d0:	d405      	bmi.n	80095de <_fflush_r+0x42>
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	059b      	lsls	r3, r3, #22
 80095d6:	d402      	bmi.n	80095de <_fflush_r+0x42>
 80095d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095da:	f7fe f8ec 	bl	80077b6 <__retarget_lock_release_recursive>
 80095de:	4628      	mov	r0, r5
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
 80095e2:	4605      	mov	r5, r0
 80095e4:	e7fb      	b.n	80095de <_fflush_r+0x42>
	...

080095e8 <std>:
 80095e8:	2300      	movs	r3, #0
 80095ea:	b510      	push	{r4, lr}
 80095ec:	4604      	mov	r4, r0
 80095ee:	e9c0 3300 	strd	r3, r3, [r0]
 80095f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095f6:	6083      	str	r3, [r0, #8]
 80095f8:	8181      	strh	r1, [r0, #12]
 80095fa:	6643      	str	r3, [r0, #100]	; 0x64
 80095fc:	81c2      	strh	r2, [r0, #14]
 80095fe:	6183      	str	r3, [r0, #24]
 8009600:	4619      	mov	r1, r3
 8009602:	2208      	movs	r2, #8
 8009604:	305c      	adds	r0, #92	; 0x5c
 8009606:	f7fb ff5b 	bl	80054c0 <memset>
 800960a:	4b07      	ldr	r3, [pc, #28]	; (8009628 <std+0x40>)
 800960c:	61e4      	str	r4, [r4, #28]
 800960e:	6223      	str	r3, [r4, #32]
 8009610:	4b06      	ldr	r3, [pc, #24]	; (800962c <std+0x44>)
 8009612:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009616:	6263      	str	r3, [r4, #36]	; 0x24
 8009618:	4b05      	ldr	r3, [pc, #20]	; (8009630 <std+0x48>)
 800961a:	62a3      	str	r3, [r4, #40]	; 0x28
 800961c:	4b05      	ldr	r3, [pc, #20]	; (8009634 <std+0x4c>)
 800961e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009624:	f7fe b8c4 	b.w	80077b0 <__retarget_lock_init_recursive>
 8009628:	08009bcd 	.word	0x08009bcd
 800962c:	08009bef 	.word	0x08009bef
 8009630:	08009c27 	.word	0x08009c27
 8009634:	08009c4b 	.word	0x08009c4b

08009638 <_cleanup_r>:
 8009638:	4901      	ldr	r1, [pc, #4]	; (8009640 <_cleanup_r+0x8>)
 800963a:	f000 b9f5 	b.w	8009a28 <_fwalk_reent>
 800963e:	bf00      	nop
 8009640:	08009d55 	.word	0x08009d55

08009644 <__sfp_lock_acquire>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__sfp_lock_acquire+0x8>)
 8009646:	f7fe b8b5 	b.w	80077b4 <__retarget_lock_acquire_recursive>
 800964a:	bf00      	nop
 800964c:	20000b12 	.word	0x20000b12

08009650 <__sfp_lock_release>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__sfp_lock_release+0x8>)
 8009652:	f7fe b8b0 	b.w	80077b6 <__retarget_lock_release_recursive>
 8009656:	bf00      	nop
 8009658:	20000b12 	.word	0x20000b12

0800965c <__sinit_lock_acquire>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__sinit_lock_acquire+0x8>)
 800965e:	f7fe b8a9 	b.w	80077b4 <__retarget_lock_acquire_recursive>
 8009662:	bf00      	nop
 8009664:	20000b13 	.word	0x20000b13

08009668 <__sinit_lock_release>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__sinit_lock_release+0x8>)
 800966a:	f7fe b8a4 	b.w	80077b6 <__retarget_lock_release_recursive>
 800966e:	bf00      	nop
 8009670:	20000b13 	.word	0x20000b13

08009674 <__sinit>:
 8009674:	b510      	push	{r4, lr}
 8009676:	4604      	mov	r4, r0
 8009678:	f7ff fff0 	bl	800965c <__sinit_lock_acquire>
 800967c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800967e:	b11a      	cbz	r2, 8009688 <__sinit+0x14>
 8009680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009684:	f7ff bff0 	b.w	8009668 <__sinit_lock_release>
 8009688:	4b0d      	ldr	r3, [pc, #52]	; (80096c0 <__sinit+0x4c>)
 800968a:	2104      	movs	r1, #4
 800968c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800968e:	2303      	movs	r3, #3
 8009690:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8009694:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8009698:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800969c:	6860      	ldr	r0, [r4, #4]
 800969e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80096a2:	f7ff ffa1 	bl	80095e8 <std>
 80096a6:	2201      	movs	r2, #1
 80096a8:	2109      	movs	r1, #9
 80096aa:	68a0      	ldr	r0, [r4, #8]
 80096ac:	f7ff ff9c 	bl	80095e8 <std>
 80096b0:	2202      	movs	r2, #2
 80096b2:	2112      	movs	r1, #18
 80096b4:	68e0      	ldr	r0, [r4, #12]
 80096b6:	f7ff ff97 	bl	80095e8 <std>
 80096ba:	2301      	movs	r3, #1
 80096bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80096be:	e7df      	b.n	8009680 <__sinit+0xc>
 80096c0:	08009639 	.word	0x08009639

080096c4 <__fputwc>:
 80096c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096c8:	4680      	mov	r8, r0
 80096ca:	460e      	mov	r6, r1
 80096cc:	4615      	mov	r5, r2
 80096ce:	f7fe ff93 	bl	80085f8 <__locale_mb_cur_max>
 80096d2:	2801      	cmp	r0, #1
 80096d4:	4604      	mov	r4, r0
 80096d6:	d11b      	bne.n	8009710 <__fputwc+0x4c>
 80096d8:	1e73      	subs	r3, r6, #1
 80096da:	2bfe      	cmp	r3, #254	; 0xfe
 80096dc:	d818      	bhi.n	8009710 <__fputwc+0x4c>
 80096de:	f88d 6004 	strb.w	r6, [sp, #4]
 80096e2:	2700      	movs	r7, #0
 80096e4:	f10d 0904 	add.w	r9, sp, #4
 80096e8:	42a7      	cmp	r7, r4
 80096ea:	d020      	beq.n	800972e <__fputwc+0x6a>
 80096ec:	68ab      	ldr	r3, [r5, #8]
 80096ee:	f817 1009 	ldrb.w	r1, [r7, r9]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	60ab      	str	r3, [r5, #8]
 80096f8:	da04      	bge.n	8009704 <__fputwc+0x40>
 80096fa:	69aa      	ldr	r2, [r5, #24]
 80096fc:	4293      	cmp	r3, r2
 80096fe:	db1a      	blt.n	8009736 <__fputwc+0x72>
 8009700:	290a      	cmp	r1, #10
 8009702:	d018      	beq.n	8009736 <__fputwc+0x72>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	602a      	str	r2, [r5, #0]
 800970a:	7019      	strb	r1, [r3, #0]
 800970c:	3701      	adds	r7, #1
 800970e:	e7eb      	b.n	80096e8 <__fputwc+0x24>
 8009710:	4632      	mov	r2, r6
 8009712:	4640      	mov	r0, r8
 8009714:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8009718:	a901      	add	r1, sp, #4
 800971a:	f000 fae3 	bl	8009ce4 <_wcrtomb_r>
 800971e:	1c42      	adds	r2, r0, #1
 8009720:	4604      	mov	r4, r0
 8009722:	d1de      	bne.n	80096e2 <__fputwc+0x1e>
 8009724:	4606      	mov	r6, r0
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800972c:	81ab      	strh	r3, [r5, #12]
 800972e:	4630      	mov	r0, r6
 8009730:	b003      	add	sp, #12
 8009732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009736:	462a      	mov	r2, r5
 8009738:	4640      	mov	r0, r8
 800973a:	f000 fa8a 	bl	8009c52 <__swbuf_r>
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d1e4      	bne.n	800970c <__fputwc+0x48>
 8009742:	4606      	mov	r6, r0
 8009744:	e7f3      	b.n	800972e <__fputwc+0x6a>

08009746 <_fputwc_r>:
 8009746:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	07db      	lsls	r3, r3, #31
 800974c:	4605      	mov	r5, r0
 800974e:	460e      	mov	r6, r1
 8009750:	4614      	mov	r4, r2
 8009752:	d405      	bmi.n	8009760 <_fputwc_r+0x1a>
 8009754:	8993      	ldrh	r3, [r2, #12]
 8009756:	0598      	lsls	r0, r3, #22
 8009758:	d402      	bmi.n	8009760 <_fputwc_r+0x1a>
 800975a:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800975c:	f7fe f82a 	bl	80077b4 <__retarget_lock_acquire_recursive>
 8009760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009764:	0499      	lsls	r1, r3, #18
 8009766:	d406      	bmi.n	8009776 <_fputwc_r+0x30>
 8009768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009774:	6663      	str	r3, [r4, #100]	; 0x64
 8009776:	4622      	mov	r2, r4
 8009778:	4628      	mov	r0, r5
 800977a:	4631      	mov	r1, r6
 800977c:	f7ff ffa2 	bl	80096c4 <__fputwc>
 8009780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009782:	4605      	mov	r5, r0
 8009784:	07da      	lsls	r2, r3, #31
 8009786:	d405      	bmi.n	8009794 <_fputwc_r+0x4e>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	059b      	lsls	r3, r3, #22
 800978c:	d402      	bmi.n	8009794 <_fputwc_r+0x4e>
 800978e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009790:	f7fe f811 	bl	80077b6 <__retarget_lock_release_recursive>
 8009794:	4628      	mov	r0, r5
 8009796:	bd70      	pop	{r4, r5, r6, pc}

08009798 <__sfvwrite_r>:
 8009798:	6893      	ldr	r3, [r2, #8]
 800979a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979e:	4606      	mov	r6, r0
 80097a0:	460c      	mov	r4, r1
 80097a2:	4690      	mov	r8, r2
 80097a4:	b91b      	cbnz	r3, 80097ae <__sfvwrite_r+0x16>
 80097a6:	2000      	movs	r0, #0
 80097a8:	b003      	add	sp, #12
 80097aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ae:	898b      	ldrh	r3, [r1, #12]
 80097b0:	0718      	lsls	r0, r3, #28
 80097b2:	d550      	bpl.n	8009856 <__sfvwrite_r+0xbe>
 80097b4:	690b      	ldr	r3, [r1, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d04d      	beq.n	8009856 <__sfvwrite_r+0xbe>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	f8d8 7000 	ldr.w	r7, [r8]
 80097c0:	f013 0902 	ands.w	r9, r3, #2
 80097c4:	d16b      	bne.n	800989e <__sfvwrite_r+0x106>
 80097c6:	f013 0301 	ands.w	r3, r3, #1
 80097ca:	f000 809b 	beq.w	8009904 <__sfvwrite_r+0x16c>
 80097ce:	4648      	mov	r0, r9
 80097d0:	46ca      	mov	sl, r9
 80097d2:	46cb      	mov	fp, r9
 80097d4:	f1bb 0f00 	cmp.w	fp, #0
 80097d8:	f000 8102 	beq.w	80099e0 <__sfvwrite_r+0x248>
 80097dc:	b950      	cbnz	r0, 80097f4 <__sfvwrite_r+0x5c>
 80097de:	465a      	mov	r2, fp
 80097e0:	210a      	movs	r1, #10
 80097e2:	4650      	mov	r0, sl
 80097e4:	f7fe fa24 	bl	8007c30 <memchr>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	f000 80fe 	beq.w	80099ea <__sfvwrite_r+0x252>
 80097ee:	3001      	adds	r0, #1
 80097f0:	eba0 090a 	sub.w	r9, r0, sl
 80097f4:	6820      	ldr	r0, [r4, #0]
 80097f6:	6921      	ldr	r1, [r4, #16]
 80097f8:	45d9      	cmp	r9, fp
 80097fa:	464a      	mov	r2, r9
 80097fc:	bf28      	it	cs
 80097fe:	465a      	movcs	r2, fp
 8009800:	4288      	cmp	r0, r1
 8009802:	6963      	ldr	r3, [r4, #20]
 8009804:	f240 80f4 	bls.w	80099f0 <__sfvwrite_r+0x258>
 8009808:	68a5      	ldr	r5, [r4, #8]
 800980a:	441d      	add	r5, r3
 800980c:	42aa      	cmp	r2, r5
 800980e:	f340 80ef 	ble.w	80099f0 <__sfvwrite_r+0x258>
 8009812:	4651      	mov	r1, sl
 8009814:	462a      	mov	r2, r5
 8009816:	f7fe ff07 	bl	8008628 <memmove>
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	4621      	mov	r1, r4
 800981e:	442b      	add	r3, r5
 8009820:	4630      	mov	r0, r6
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	f7ff feba 	bl	800959c <_fflush_r>
 8009828:	2800      	cmp	r0, #0
 800982a:	d166      	bne.n	80098fa <__sfvwrite_r+0x162>
 800982c:	ebb9 0905 	subs.w	r9, r9, r5
 8009830:	f040 80f6 	bne.w	8009a20 <__sfvwrite_r+0x288>
 8009834:	4621      	mov	r1, r4
 8009836:	4630      	mov	r0, r6
 8009838:	f7ff feb0 	bl	800959c <_fflush_r>
 800983c:	2800      	cmp	r0, #0
 800983e:	d15c      	bne.n	80098fa <__sfvwrite_r+0x162>
 8009840:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009844:	44aa      	add	sl, r5
 8009846:	ebab 0b05 	sub.w	fp, fp, r5
 800984a:	1b55      	subs	r5, r2, r5
 800984c:	f8c8 5008 	str.w	r5, [r8, #8]
 8009850:	2d00      	cmp	r5, #0
 8009852:	d1bf      	bne.n	80097d4 <__sfvwrite_r+0x3c>
 8009854:	e7a7      	b.n	80097a6 <__sfvwrite_r+0xe>
 8009856:	4621      	mov	r1, r4
 8009858:	4630      	mov	r0, r6
 800985a:	f7ff fdb5 	bl	80093c8 <__swsetup_r>
 800985e:	2800      	cmp	r0, #0
 8009860:	d0ab      	beq.n	80097ba <__sfvwrite_r+0x22>
 8009862:	f04f 30ff 	mov.w	r0, #4294967295
 8009866:	e79f      	b.n	80097a8 <__sfvwrite_r+0x10>
 8009868:	e9d7 b500 	ldrd	fp, r5, [r7]
 800986c:	3708      	adds	r7, #8
 800986e:	2d00      	cmp	r5, #0
 8009870:	d0fa      	beq.n	8009868 <__sfvwrite_r+0xd0>
 8009872:	4555      	cmp	r5, sl
 8009874:	462b      	mov	r3, r5
 8009876:	465a      	mov	r2, fp
 8009878:	bf28      	it	cs
 800987a:	4653      	movcs	r3, sl
 800987c:	4630      	mov	r0, r6
 800987e:	69e1      	ldr	r1, [r4, #28]
 8009880:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8009884:	47e0      	blx	ip
 8009886:	2800      	cmp	r0, #0
 8009888:	dd37      	ble.n	80098fa <__sfvwrite_r+0x162>
 800988a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800988e:	4483      	add	fp, r0
 8009890:	1a2d      	subs	r5, r5, r0
 8009892:	1a18      	subs	r0, r3, r0
 8009894:	f8c8 0008 	str.w	r0, [r8, #8]
 8009898:	2800      	cmp	r0, #0
 800989a:	d1e8      	bne.n	800986e <__sfvwrite_r+0xd6>
 800989c:	e783      	b.n	80097a6 <__sfvwrite_r+0xe>
 800989e:	f04f 0b00 	mov.w	fp, #0
 80098a2:	f8df a180 	ldr.w	sl, [pc, #384]	; 8009a24 <__sfvwrite_r+0x28c>
 80098a6:	465d      	mov	r5, fp
 80098a8:	e7e1      	b.n	800986e <__sfvwrite_r+0xd6>
 80098aa:	e9d7 9a00 	ldrd	r9, sl, [r7]
 80098ae:	3708      	adds	r7, #8
 80098b0:	f1ba 0f00 	cmp.w	sl, #0
 80098b4:	d0f9      	beq.n	80098aa <__sfvwrite_r+0x112>
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	6820      	ldr	r0, [r4, #0]
 80098ba:	0599      	lsls	r1, r3, #22
 80098bc:	68a2      	ldr	r2, [r4, #8]
 80098be:	d563      	bpl.n	8009988 <__sfvwrite_r+0x1f0>
 80098c0:	4552      	cmp	r2, sl
 80098c2:	d836      	bhi.n	8009932 <__sfvwrite_r+0x19a>
 80098c4:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80098c8:	d033      	beq.n	8009932 <__sfvwrite_r+0x19a>
 80098ca:	6921      	ldr	r1, [r4, #16]
 80098cc:	6965      	ldr	r5, [r4, #20]
 80098ce:	eba0 0b01 	sub.w	fp, r0, r1
 80098d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098da:	f10b 0201 	add.w	r2, fp, #1
 80098de:	106d      	asrs	r5, r5, #1
 80098e0:	4452      	add	r2, sl
 80098e2:	4295      	cmp	r5, r2
 80098e4:	bf38      	it	cc
 80098e6:	4615      	movcc	r5, r2
 80098e8:	055b      	lsls	r3, r3, #21
 80098ea:	d53d      	bpl.n	8009968 <__sfvwrite_r+0x1d0>
 80098ec:	4629      	mov	r1, r5
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7fd ff62 	bl	80077b8 <_malloc_r>
 80098f4:	b948      	cbnz	r0, 800990a <__sfvwrite_r+0x172>
 80098f6:	230c      	movs	r3, #12
 80098f8:	6033      	str	r3, [r6, #0]
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	e7ae      	b.n	8009862 <__sfvwrite_r+0xca>
 8009904:	4699      	mov	r9, r3
 8009906:	469a      	mov	sl, r3
 8009908:	e7d2      	b.n	80098b0 <__sfvwrite_r+0x118>
 800990a:	465a      	mov	r2, fp
 800990c:	6921      	ldr	r1, [r4, #16]
 800990e:	9001      	str	r0, [sp, #4]
 8009910:	f7fe f99c 	bl	8007c4c <memcpy>
 8009914:	89a2      	ldrh	r2, [r4, #12]
 8009916:	9b01      	ldr	r3, [sp, #4]
 8009918:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800991c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009920:	81a2      	strh	r2, [r4, #12]
 8009922:	4652      	mov	r2, sl
 8009924:	6123      	str	r3, [r4, #16]
 8009926:	6165      	str	r5, [r4, #20]
 8009928:	445b      	add	r3, fp
 800992a:	eba5 050b 	sub.w	r5, r5, fp
 800992e:	6023      	str	r3, [r4, #0]
 8009930:	60a5      	str	r5, [r4, #8]
 8009932:	4552      	cmp	r2, sl
 8009934:	bf28      	it	cs
 8009936:	4652      	movcs	r2, sl
 8009938:	4655      	mov	r5, sl
 800993a:	4649      	mov	r1, r9
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	9201      	str	r2, [sp, #4]
 8009940:	f7fe fe72 	bl	8008628 <memmove>
 8009944:	68a3      	ldr	r3, [r4, #8]
 8009946:	9a01      	ldr	r2, [sp, #4]
 8009948:	1a9b      	subs	r3, r3, r2
 800994a:	60a3      	str	r3, [r4, #8]
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	441a      	add	r2, r3
 8009950:	6022      	str	r2, [r4, #0]
 8009952:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8009956:	44a9      	add	r9, r5
 8009958:	ebaa 0a05 	sub.w	sl, sl, r5
 800995c:	1b45      	subs	r5, r0, r5
 800995e:	f8c8 5008 	str.w	r5, [r8, #8]
 8009962:	2d00      	cmp	r5, #0
 8009964:	d1a4      	bne.n	80098b0 <__sfvwrite_r+0x118>
 8009966:	e71e      	b.n	80097a6 <__sfvwrite_r+0xe>
 8009968:	462a      	mov	r2, r5
 800996a:	4630      	mov	r0, r6
 800996c:	f7fe fe76 	bl	800865c <_realloc_r>
 8009970:	4603      	mov	r3, r0
 8009972:	2800      	cmp	r0, #0
 8009974:	d1d5      	bne.n	8009922 <__sfvwrite_r+0x18a>
 8009976:	4630      	mov	r0, r6
 8009978:	6921      	ldr	r1, [r4, #16]
 800997a:	f7fd fe55 	bl	8007628 <_free_r>
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	e7b6      	b.n	80098f6 <__sfvwrite_r+0x15e>
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	4283      	cmp	r3, r0
 800998c:	d302      	bcc.n	8009994 <__sfvwrite_r+0x1fc>
 800998e:	6961      	ldr	r1, [r4, #20]
 8009990:	4551      	cmp	r1, sl
 8009992:	d915      	bls.n	80099c0 <__sfvwrite_r+0x228>
 8009994:	4552      	cmp	r2, sl
 8009996:	bf28      	it	cs
 8009998:	4652      	movcs	r2, sl
 800999a:	4615      	mov	r5, r2
 800999c:	4649      	mov	r1, r9
 800999e:	f7fe fe43 	bl	8008628 <memmove>
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	1b5b      	subs	r3, r3, r5
 80099a8:	442a      	add	r2, r5
 80099aa:	60a3      	str	r3, [r4, #8]
 80099ac:	6022      	str	r2, [r4, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1cf      	bne.n	8009952 <__sfvwrite_r+0x1ba>
 80099b2:	4621      	mov	r1, r4
 80099b4:	4630      	mov	r0, r6
 80099b6:	f7ff fdf1 	bl	800959c <_fflush_r>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d0c9      	beq.n	8009952 <__sfvwrite_r+0x1ba>
 80099be:	e79c      	b.n	80098fa <__sfvwrite_r+0x162>
 80099c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80099c4:	459a      	cmp	sl, r3
 80099c6:	bf38      	it	cc
 80099c8:	4653      	movcc	r3, sl
 80099ca:	fb93 f3f1 	sdiv	r3, r3, r1
 80099ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80099d0:	434b      	muls	r3, r1
 80099d2:	464a      	mov	r2, r9
 80099d4:	4630      	mov	r0, r6
 80099d6:	69e1      	ldr	r1, [r4, #28]
 80099d8:	47a8      	blx	r5
 80099da:	1e05      	subs	r5, r0, #0
 80099dc:	dcb9      	bgt.n	8009952 <__sfvwrite_r+0x1ba>
 80099de:	e78c      	b.n	80098fa <__sfvwrite_r+0x162>
 80099e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80099e4:	2000      	movs	r0, #0
 80099e6:	3708      	adds	r7, #8
 80099e8:	e6f4      	b.n	80097d4 <__sfvwrite_r+0x3c>
 80099ea:	f10b 0901 	add.w	r9, fp, #1
 80099ee:	e701      	b.n	80097f4 <__sfvwrite_r+0x5c>
 80099f0:	4293      	cmp	r3, r2
 80099f2:	dc08      	bgt.n	8009a06 <__sfvwrite_r+0x26e>
 80099f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80099f6:	4652      	mov	r2, sl
 80099f8:	4630      	mov	r0, r6
 80099fa:	69e1      	ldr	r1, [r4, #28]
 80099fc:	47a8      	blx	r5
 80099fe:	1e05      	subs	r5, r0, #0
 8009a00:	f73f af14 	bgt.w	800982c <__sfvwrite_r+0x94>
 8009a04:	e779      	b.n	80098fa <__sfvwrite_r+0x162>
 8009a06:	4651      	mov	r1, sl
 8009a08:	9201      	str	r2, [sp, #4]
 8009a0a:	f7fe fe0d 	bl	8008628 <memmove>
 8009a0e:	9a01      	ldr	r2, [sp, #4]
 8009a10:	68a3      	ldr	r3, [r4, #8]
 8009a12:	4615      	mov	r5, r2
 8009a14:	1a9b      	subs	r3, r3, r2
 8009a16:	60a3      	str	r3, [r4, #8]
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	e705      	b.n	800982c <__sfvwrite_r+0x94>
 8009a20:	2001      	movs	r0, #1
 8009a22:	e70d      	b.n	8009840 <__sfvwrite_r+0xa8>
 8009a24:	7ffffc00 	.word	0x7ffffc00

08009a28 <_fwalk_reent>:
 8009a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	4688      	mov	r8, r1
 8009a30:	2700      	movs	r7, #0
 8009a32:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8009a36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a3a:	f1b9 0901 	subs.w	r9, r9, #1
 8009a3e:	d505      	bpl.n	8009a4c <_fwalk_reent+0x24>
 8009a40:	6824      	ldr	r4, [r4, #0]
 8009a42:	2c00      	cmp	r4, #0
 8009a44:	d1f7      	bne.n	8009a36 <_fwalk_reent+0xe>
 8009a46:	4638      	mov	r0, r7
 8009a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a4c:	89ab      	ldrh	r3, [r5, #12]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d907      	bls.n	8009a62 <_fwalk_reent+0x3a>
 8009a52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a56:	3301      	adds	r3, #1
 8009a58:	d003      	beq.n	8009a62 <_fwalk_reent+0x3a>
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	47c0      	blx	r8
 8009a60:	4307      	orrs	r7, r0
 8009a62:	3568      	adds	r5, #104	; 0x68
 8009a64:	e7e9      	b.n	8009a3a <_fwalk_reent+0x12>

08009a66 <__swhatbuf_r>:
 8009a66:	b570      	push	{r4, r5, r6, lr}
 8009a68:	460e      	mov	r6, r1
 8009a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6e:	4614      	mov	r4, r2
 8009a70:	2900      	cmp	r1, #0
 8009a72:	461d      	mov	r5, r3
 8009a74:	b096      	sub	sp, #88	; 0x58
 8009a76:	da0a      	bge.n	8009a8e <__swhatbuf_r+0x28>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8009a7e:	602b      	str	r3, [r5, #0]
 8009a80:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8009a84:	d116      	bne.n	8009ab4 <__swhatbuf_r+0x4e>
 8009a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	e015      	b.n	8009aba <__swhatbuf_r+0x54>
 8009a8e:	466a      	mov	r2, sp
 8009a90:	f000 f9b8 	bl	8009e04 <_fstat_r>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	dbef      	blt.n	8009a78 <__swhatbuf_r+0x12>
 8009a98:	9a01      	ldr	r2, [sp, #4]
 8009a9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009a9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009aa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009aa6:	425a      	negs	r2, r3
 8009aa8:	415a      	adcs	r2, r3
 8009aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aae:	602a      	str	r2, [r5, #0]
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	e002      	b.n	8009aba <__swhatbuf_r+0x54>
 8009ab4:	2240      	movs	r2, #64	; 0x40
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	6022      	str	r2, [r4, #0]
 8009aba:	b016      	add	sp, #88	; 0x58
 8009abc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ac0 <__smakebuf_r>:
 8009ac0:	898b      	ldrh	r3, [r1, #12]
 8009ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ac4:	079d      	lsls	r5, r3, #30
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460c      	mov	r4, r1
 8009aca:	d507      	bpl.n	8009adc <__smakebuf_r+0x1c>
 8009acc:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	6163      	str	r3, [r4, #20]
 8009ad8:	b002      	add	sp, #8
 8009ada:	bd70      	pop	{r4, r5, r6, pc}
 8009adc:	466a      	mov	r2, sp
 8009ade:	ab01      	add	r3, sp, #4
 8009ae0:	f7ff ffc1 	bl	8009a66 <__swhatbuf_r>
 8009ae4:	9900      	ldr	r1, [sp, #0]
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f7fd fe65 	bl	80077b8 <_malloc_r>
 8009aee:	b948      	cbnz	r0, 8009b04 <__smakebuf_r+0x44>
 8009af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af4:	059a      	lsls	r2, r3, #22
 8009af6:	d4ef      	bmi.n	8009ad8 <__smakebuf_r+0x18>
 8009af8:	f023 0303 	bic.w	r3, r3, #3
 8009afc:	f043 0302 	orr.w	r3, r3, #2
 8009b00:	81a3      	strh	r3, [r4, #12]
 8009b02:	e7e3      	b.n	8009acc <__smakebuf_r+0xc>
 8009b04:	4b0d      	ldr	r3, [pc, #52]	; (8009b3c <__smakebuf_r+0x7c>)
 8009b06:	63f3      	str	r3, [r6, #60]	; 0x3c
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	6020      	str	r0, [r4, #0]
 8009b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b10:	81a3      	strh	r3, [r4, #12]
 8009b12:	9b00      	ldr	r3, [sp, #0]
 8009b14:	6120      	str	r0, [r4, #16]
 8009b16:	6163      	str	r3, [r4, #20]
 8009b18:	9b01      	ldr	r3, [sp, #4]
 8009b1a:	b15b      	cbz	r3, 8009b34 <__smakebuf_r+0x74>
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b22:	f000 f981 	bl	8009e28 <_isatty_r>
 8009b26:	b128      	cbz	r0, 8009b34 <__smakebuf_r+0x74>
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f023 0303 	bic.w	r3, r3, #3
 8009b2e:	f043 0301 	orr.w	r3, r3, #1
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	89a0      	ldrh	r0, [r4, #12]
 8009b36:	4305      	orrs	r5, r0
 8009b38:	81a5      	strh	r5, [r4, #12]
 8009b3a:	e7cd      	b.n	8009ad8 <__smakebuf_r+0x18>
 8009b3c:	08009639 	.word	0x08009639

08009b40 <_raise_r>:
 8009b40:	291f      	cmp	r1, #31
 8009b42:	b538      	push	{r3, r4, r5, lr}
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	d904      	bls.n	8009b54 <_raise_r+0x14>
 8009b4a:	2316      	movs	r3, #22
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8009b58:	b112      	cbz	r2, 8009b60 <_raise_r+0x20>
 8009b5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b5e:	b94b      	cbnz	r3, 8009b74 <_raise_r+0x34>
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 f831 	bl	8009bc8 <_getpid_r>
 8009b66:	462a      	mov	r2, r5
 8009b68:	4601      	mov	r1, r0
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b70:	f000 b818 	b.w	8009ba4 <_kill_r>
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d00a      	beq.n	8009b8e <_raise_r+0x4e>
 8009b78:	1c59      	adds	r1, r3, #1
 8009b7a:	d103      	bne.n	8009b84 <_raise_r+0x44>
 8009b7c:	2316      	movs	r3, #22
 8009b7e:	6003      	str	r3, [r0, #0]
 8009b80:	2001      	movs	r0, #1
 8009b82:	e7e6      	b.n	8009b52 <_raise_r+0x12>
 8009b84:	2400      	movs	r4, #0
 8009b86:	4628      	mov	r0, r5
 8009b88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b8c:	4798      	blx	r3
 8009b8e:	2000      	movs	r0, #0
 8009b90:	e7df      	b.n	8009b52 <_raise_r+0x12>
	...

08009b94 <raise>:
 8009b94:	4b02      	ldr	r3, [pc, #8]	; (8009ba0 <raise+0xc>)
 8009b96:	4601      	mov	r1, r0
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	f7ff bfd1 	b.w	8009b40 <_raise_r>
 8009b9e:	bf00      	nop
 8009ba0:	20000040 	.word	0x20000040

08009ba4 <_kill_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4d06      	ldr	r5, [pc, #24]	; (8009bc4 <_kill_r+0x20>)
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	4611      	mov	r1, r2
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	f7f8 fd82 	bl	80026ba <_kill>
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	d102      	bne.n	8009bc0 <_kill_r+0x1c>
 8009bba:	682b      	ldr	r3, [r5, #0]
 8009bbc:	b103      	cbz	r3, 8009bc0 <_kill_r+0x1c>
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	bd38      	pop	{r3, r4, r5, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000b48 	.word	0x20000b48

08009bc8 <_getpid_r>:
 8009bc8:	f7f8 bd70 	b.w	80026ac <_getpid>

08009bcc <__sread>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	460c      	mov	r4, r1
 8009bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd4:	f000 f94a 	bl	8009e6c <_read_r>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	bfab      	itete	ge
 8009bdc:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8009bde:	89a3      	ldrhlt	r3, [r4, #12]
 8009be0:	181b      	addge	r3, r3, r0
 8009be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009be6:	bfac      	ite	ge
 8009be8:	6523      	strge	r3, [r4, #80]	; 0x50
 8009bea:	81a3      	strhlt	r3, [r4, #12]
 8009bec:	bd10      	pop	{r4, pc}

08009bee <__swrite>:
 8009bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf2:	461f      	mov	r7, r3
 8009bf4:	898b      	ldrh	r3, [r1, #12]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	05db      	lsls	r3, r3, #23
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	4616      	mov	r6, r2
 8009bfe:	d505      	bpl.n	8009c0c <__swrite+0x1e>
 8009c00:	2302      	movs	r3, #2
 8009c02:	2200      	movs	r2, #0
 8009c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c08:	f000 f91e 	bl	8009e48 <_lseek_r>
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	4632      	mov	r2, r6
 8009c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c14:	81a3      	strh	r3, [r4, #12]
 8009c16:	4628      	mov	r0, r5
 8009c18:	463b      	mov	r3, r7
 8009c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c22:	f000 b875 	b.w	8009d10 <_write_r>

08009c26 <__sseek>:
 8009c26:	b510      	push	{r4, lr}
 8009c28:	460c      	mov	r4, r1
 8009c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2e:	f000 f90b 	bl	8009e48 <_lseek_r>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	bf15      	itete	ne
 8009c38:	6520      	strne	r0, [r4, #80]	; 0x50
 8009c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c42:	81a3      	strheq	r3, [r4, #12]
 8009c44:	bf18      	it	ne
 8009c46:	81a3      	strhne	r3, [r4, #12]
 8009c48:	bd10      	pop	{r4, pc}

08009c4a <__sclose>:
 8009c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4e:	f000 b871 	b.w	8009d34 <_close_r>

08009c52 <__swbuf_r>:
 8009c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c54:	460e      	mov	r6, r1
 8009c56:	4614      	mov	r4, r2
 8009c58:	4605      	mov	r5, r0
 8009c5a:	b118      	cbz	r0, 8009c64 <__swbuf_r+0x12>
 8009c5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c5e:	b90b      	cbnz	r3, 8009c64 <__swbuf_r+0x12>
 8009c60:	f7ff fd08 	bl	8009674 <__sinit>
 8009c64:	69a3      	ldr	r3, [r4, #24]
 8009c66:	60a3      	str	r3, [r4, #8]
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	0719      	lsls	r1, r3, #28
 8009c6c:	d529      	bpl.n	8009cc2 <__swbuf_r+0x70>
 8009c6e:	6923      	ldr	r3, [r4, #16]
 8009c70:	b33b      	cbz	r3, 8009cc2 <__swbuf_r+0x70>
 8009c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c76:	b2f6      	uxtb	r6, r6
 8009c78:	049a      	lsls	r2, r3, #18
 8009c7a:	4637      	mov	r7, r6
 8009c7c:	d52a      	bpl.n	8009cd4 <__swbuf_r+0x82>
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	6920      	ldr	r0, [r4, #16]
 8009c82:	1a18      	subs	r0, r3, r0
 8009c84:	6963      	ldr	r3, [r4, #20]
 8009c86:	4283      	cmp	r3, r0
 8009c88:	dc04      	bgt.n	8009c94 <__swbuf_r+0x42>
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f7ff fc85 	bl	800959c <_fflush_r>
 8009c92:	b9e0      	cbnz	r0, 8009cce <__swbuf_r+0x7c>
 8009c94:	68a3      	ldr	r3, [r4, #8]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	60a3      	str	r3, [r4, #8]
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	6022      	str	r2, [r4, #0]
 8009ca0:	701e      	strb	r6, [r3, #0]
 8009ca2:	6962      	ldr	r2, [r4, #20]
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d004      	beq.n	8009cb4 <__swbuf_r+0x62>
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	07db      	lsls	r3, r3, #31
 8009cae:	d506      	bpl.n	8009cbe <__swbuf_r+0x6c>
 8009cb0:	2e0a      	cmp	r6, #10
 8009cb2:	d104      	bne.n	8009cbe <__swbuf_r+0x6c>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f7ff fc70 	bl	800959c <_fflush_r>
 8009cbc:	b938      	cbnz	r0, 8009cce <__swbuf_r+0x7c>
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f7ff fb7f 	bl	80093c8 <__swsetup_r>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d0d1      	beq.n	8009c72 <__swbuf_r+0x20>
 8009cce:	f04f 37ff 	mov.w	r7, #4294967295
 8009cd2:	e7f4      	b.n	8009cbe <__swbuf_r+0x6c>
 8009cd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ce0:	6663      	str	r3, [r4, #100]	; 0x64
 8009ce2:	e7cc      	b.n	8009c7e <__swbuf_r+0x2c>

08009ce4 <_wcrtomb_r>:
 8009ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce6:	4c09      	ldr	r4, [pc, #36]	; (8009d0c <_wcrtomb_r+0x28>)
 8009ce8:	4605      	mov	r5, r0
 8009cea:	461e      	mov	r6, r3
 8009cec:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	b909      	cbnz	r1, 8009cf8 <_wcrtomb_r+0x14>
 8009cf4:	460a      	mov	r2, r1
 8009cf6:	a901      	add	r1, sp, #4
 8009cf8:	47b8      	blx	r7
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	bf01      	itttt	eq
 8009cfe:	2300      	moveq	r3, #0
 8009d00:	6033      	streq	r3, [r6, #0]
 8009d02:	238a      	moveq	r3, #138	; 0x8a
 8009d04:	602b      	streq	r3, [r5, #0]
 8009d06:	b005      	add	sp, #20
 8009d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000884 	.word	0x20000884

08009d10 <_write_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	4611      	mov	r1, r2
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4d05      	ldr	r5, [pc, #20]	; (8009d30 <_write_r+0x20>)
 8009d1c:	602a      	str	r2, [r5, #0]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f7f8 fd02 	bl	8002728 <_write>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_write_r+0x1e>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_write_r+0x1e>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	20000b48 	.word	0x20000b48

08009d34 <_close_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	2300      	movs	r3, #0
 8009d38:	4d05      	ldr	r5, [pc, #20]	; (8009d50 <_close_r+0x1c>)
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	602b      	str	r3, [r5, #0]
 8009d40:	f7f8 fd0e 	bl	8002760 <_close>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_close_r+0x1a>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_close_r+0x1a>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	20000b48 	.word	0x20000b48

08009d54 <_fclose_r>:
 8009d54:	b570      	push	{r4, r5, r6, lr}
 8009d56:	4606      	mov	r6, r0
 8009d58:	460c      	mov	r4, r1
 8009d5a:	b911      	cbnz	r1, 8009d62 <_fclose_r+0xe>
 8009d5c:	2500      	movs	r5, #0
 8009d5e:	4628      	mov	r0, r5
 8009d60:	bd70      	pop	{r4, r5, r6, pc}
 8009d62:	b118      	cbz	r0, 8009d6c <_fclose_r+0x18>
 8009d64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009d66:	b90b      	cbnz	r3, 8009d6c <_fclose_r+0x18>
 8009d68:	f7ff fc84 	bl	8009674 <__sinit>
 8009d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d6e:	07d8      	lsls	r0, r3, #31
 8009d70:	d405      	bmi.n	8009d7e <_fclose_r+0x2a>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	0599      	lsls	r1, r3, #22
 8009d76:	d402      	bmi.n	8009d7e <_fclose_r+0x2a>
 8009d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d7a:	f7fd fd1b 	bl	80077b4 <__retarget_lock_acquire_recursive>
 8009d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d82:	b93b      	cbnz	r3, 8009d94 <_fclose_r+0x40>
 8009d84:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009d86:	f015 0501 	ands.w	r5, r5, #1
 8009d8a:	d1e7      	bne.n	8009d5c <_fclose_r+0x8>
 8009d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d8e:	f7fd fd12 	bl	80077b6 <__retarget_lock_release_recursive>
 8009d92:	e7e4      	b.n	8009d5e <_fclose_r+0xa>
 8009d94:	4621      	mov	r1, r4
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff fb76 	bl	8009488 <__sflush_r>
 8009d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d9e:	4605      	mov	r5, r0
 8009da0:	b133      	cbz	r3, 8009db0 <_fclose_r+0x5c>
 8009da2:	4630      	mov	r0, r6
 8009da4:	69e1      	ldr	r1, [r4, #28]
 8009da6:	4798      	blx	r3
 8009da8:	2800      	cmp	r0, #0
 8009daa:	bfb8      	it	lt
 8009dac:	f04f 35ff 	movlt.w	r5, #4294967295
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	061a      	lsls	r2, r3, #24
 8009db4:	d503      	bpl.n	8009dbe <_fclose_r+0x6a>
 8009db6:	4630      	mov	r0, r6
 8009db8:	6921      	ldr	r1, [r4, #16]
 8009dba:	f7fd fc35 	bl	8007628 <_free_r>
 8009dbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009dc0:	b141      	cbz	r1, 8009dd4 <_fclose_r+0x80>
 8009dc2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	d002      	beq.n	8009dd0 <_fclose_r+0x7c>
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7fd fc2c 	bl	8007628 <_free_r>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8009dd4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009dd6:	b121      	cbz	r1, 8009de2 <_fclose_r+0x8e>
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7fd fc25 	bl	8007628 <_free_r>
 8009dde:	2300      	movs	r3, #0
 8009de0:	6463      	str	r3, [r4, #68]	; 0x44
 8009de2:	f7ff fc2f 	bl	8009644 <__sfp_lock_acquire>
 8009de6:	2300      	movs	r3, #0
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dec:	07db      	lsls	r3, r3, #31
 8009dee:	d402      	bmi.n	8009df6 <_fclose_r+0xa2>
 8009df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009df2:	f7fd fce0 	bl	80077b6 <__retarget_lock_release_recursive>
 8009df6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009df8:	f7fd fcdb 	bl	80077b2 <__retarget_lock_close_recursive>
 8009dfc:	f7ff fc28 	bl	8009650 <__sfp_lock_release>
 8009e00:	e7ad      	b.n	8009d5e <_fclose_r+0xa>
	...

08009e04 <_fstat_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	2300      	movs	r3, #0
 8009e08:	4d06      	ldr	r5, [pc, #24]	; (8009e24 <_fstat_r+0x20>)
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	4611      	mov	r1, r2
 8009e10:	602b      	str	r3, [r5, #0]
 8009e12:	f7f8 fcb0 	bl	8002776 <_fstat>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	d102      	bne.n	8009e20 <_fstat_r+0x1c>
 8009e1a:	682b      	ldr	r3, [r5, #0]
 8009e1c:	b103      	cbz	r3, 8009e20 <_fstat_r+0x1c>
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
 8009e22:	bf00      	nop
 8009e24:	20000b48 	.word	0x20000b48

08009e28 <_isatty_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	4d05      	ldr	r5, [pc, #20]	; (8009e44 <_isatty_r+0x1c>)
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4608      	mov	r0, r1
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	f7f8 fcae 	bl	8002794 <_isatty>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_isatty_r+0x1a>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_isatty_r+0x1a>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	20000b48 	.word	0x20000b48

08009e48 <_lseek_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	2200      	movs	r2, #0
 8009e52:	4d05      	ldr	r5, [pc, #20]	; (8009e68 <_lseek_r+0x20>)
 8009e54:	602a      	str	r2, [r5, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f7f8 fca6 	bl	80027a8 <_lseek>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_lseek_r+0x1e>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_lseek_r+0x1e>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	20000b48 	.word	0x20000b48

08009e6c <_read_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4604      	mov	r4, r0
 8009e70:	4608      	mov	r0, r1
 8009e72:	4611      	mov	r1, r2
 8009e74:	2200      	movs	r2, #0
 8009e76:	4d05      	ldr	r5, [pc, #20]	; (8009e8c <_read_r+0x20>)
 8009e78:	602a      	str	r2, [r5, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f7f8 fc37 	bl	80026ee <_read>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d102      	bne.n	8009e8a <_read_r+0x1e>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	b103      	cbz	r3, 8009e8a <_read_r+0x1e>
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	20000b48 	.word	0x20000b48

08009e90 <_init>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	bf00      	nop
 8009e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e96:	bc08      	pop	{r3}
 8009e98:	469e      	mov	lr, r3
 8009e9a:	4770      	bx	lr

08009e9c <_fini>:
 8009e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9e:	bf00      	nop
 8009ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea2:	bc08      	pop	{r3}
 8009ea4:	469e      	mov	lr, r3
 8009ea6:	4770      	bx	lr
