
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca34  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006a6d0  0800cc20  0800cc20  0001cc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080772f0  080772f0  000900b4  2**0
                  CONTENTS
  4 .ARM          00000008  080772f0  080772f0  000872f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080772f8  080772f8  000900b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080772f8  080772f8  000872f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080772fc  080772fc  000872fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08077300  00090000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b3c  200000b4  080773b4  000900b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  080773b4  00090bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000900b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174a1  00000000  00000000  000900dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b47  00000000  00000000  000a757e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  000ac0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  000ad850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf83  00000000  00000000  000aec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d367  00000000  00000000  000cbbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad58  00000000  00000000  000e8f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006494  00000000  00000000  00173d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000b4 	.word	0x200000b4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800cc04 	.word	0x0800cc04

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000b8 	.word	0x200000b8
 8000224:	0800cc04 	.word	0x0800cc04

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b976 	b.w	8000e78 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	4688      	mov	r8, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14d      	bne.n	8000c50 <__udivmoddi4+0xac>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	d968      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	b152      	cbz	r2, 8000bd6 <__udivmoddi4+0x32>
 8000bc0:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc4:	f1c2 0120 	rsb	r1, r2, #32
 8000bc8:	fa20 f101 	lsr.w	r1, r0, r1
 8000bcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd0:	ea41 0803 	orr.w	r8, r1, r3
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bda:	fbb8 f7f1 	udiv	r7, r8, r1
 8000bde:	fa1f fe8c 	uxth.w	lr, ip
 8000be2:	fb01 8817 	mls	r8, r1, r7, r8
 8000be6:	fb07 f00e 	mul.w	r0, r7, lr
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x66>
 8000bf4:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf8:	f107 35ff 	add.w	r5, r7, #4294967295
 8000bfc:	f080 811e 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f240 811b 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c06:	3f02      	subs	r7, #2
 8000c08:	4463      	add	r3, ip
 8000c0a:	1a1b      	subs	r3, r3, r0
 8000c0c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c10:	fb01 3310 	mls	r3, r1, r0, r3
 8000c14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c18:	b2a4      	uxth	r4, r4
 8000c1a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x94>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8109 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8106 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c34:	4464      	add	r4, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	2100      	movs	r1, #0
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa8>
 8000c44:	2300      	movs	r3, #0
 8000c46:	40d4      	lsrs	r4, r2
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	f000 80ee 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	e9c6 0500 	strd	r0, r5, [r6]
 8000c60:	4608      	mov	r0, r1
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	42ab      	cmp	r3, r5
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80fc 	bhi.w	8000e70 <__udivmoddi4+0x2cc>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4698      	mov	r8, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d0e2      	beq.n	8000c4c <__udivmoddi4+0xa8>
 8000c86:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8a:	e7df      	b.n	8000c4c <__udivmoddi4+0xa8>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8091 	bne.w	8000dbc <__udivmoddi4+0x218>
 8000c9a:	eba1 000c 	sub.w	r0, r1, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cac:	fb07 0013 	mls	r0, r7, r3, r0
 8000cb0:	0c25      	lsrs	r5, r4, #16
 8000cb2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	42a8      	cmp	r0, r5
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0505 	adds.w	r5, ip, r5
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	42a8      	cmp	r0, r5
 8000cca:	f200 80ce 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a2d      	subs	r5, r5, r0
 8000cd2:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cd6:	fb07 5510 	mls	r5, r7, r0, r5
 8000cda:	fb0e fe00 	mul.w	lr, lr, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80b6 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79e      	b.n	8000c42 <__udivmoddi4+0x9e>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fbba f8f9 	udiv	r8, sl, r9
 8000d1e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d22:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d26:	408d      	lsls	r5, r1
 8000d28:	fa1f fe8c 	uxth.w	lr, ip
 8000d2c:	431d      	orrs	r5, r3
 8000d2e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d32:	fb08 f00e 	mul.w	r0, r8, lr
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d3c:	42a0      	cmp	r0, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1a24      	subs	r4, r4, r0
 8000d5e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d62:	fb09 4410 	mls	r4, r9, r0, r4
 8000d66:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6a:	b2ad      	uxth	r5, r5
 8000d6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9502 	umull	r9, r5, r0, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2d0>
 8000da0:	ebb3 0208 	subs.w	r2, r3, r8
 8000da4:	eb64 040e 	sbc.w	r4, r4, lr
 8000da8:	fa22 f301 	lsr.w	r3, r2, r1
 8000dac:	fa04 f707 	lsl.w	r7, r4, r7
 8000db0:	431f      	orrs	r7, r3
 8000db2:	40cc      	lsrs	r4, r1
 8000db4:	e9c6 7400 	strd	r7, r4, [r6]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa8>
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	f1c2 0120 	rsb	r1, r2, #32
 8000dc4:	fa25 f301 	lsr.w	r3, r5, r1
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa20 f101 	lsr.w	r1, r0, r1
 8000dd0:	4095      	lsls	r5, r2
 8000dd2:	430d      	orrs	r5, r1
 8000dd4:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dd8:	fb07 3311 	mls	r3, r7, r1, r3
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	0c28      	lsrs	r0, r5, #16
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	fb01 f30e 	mul.w	r3, r1, lr
 8000dea:	4283      	cmp	r3, r0
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0000 	adds.w	r0, ip, r0
 8000df6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	4283      	cmp	r3, r0
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3902      	subs	r1, #2
 8000e02:	4460      	add	r0, ip
 8000e04:	1ac0      	subs	r0, r0, r3
 8000e06:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e0a:	fb07 0013 	mls	r0, r7, r3, r0
 8000e0e:	b2ad      	uxth	r5, r5
 8000e10:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e14:	fb03 f00e 	mul.w	r0, r3, lr
 8000e18:	42a8      	cmp	r0, r5
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e20:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	42a8      	cmp	r0, r5
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3b02      	subs	r3, #2
 8000e2c:	4465      	add	r5, ip
 8000e2e:	1a28      	subs	r0, r5, r0
 8000e30:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e707      	b.n	8000c4c <__udivmoddi4+0xa8>
 8000e3c:	462f      	mov	r7, r5
 8000e3e:	e6e4      	b.n	8000c0a <__udivmoddi4+0x66>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f9      	b.n	8000c38 <__udivmoddi4+0x94>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4643      	mov	r3, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4628      	mov	r0, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4641      	mov	r1, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	4464      	add	r4, ip
 8000e66:	3802      	subs	r0, #2
 8000e68:	e747      	b.n	8000cfa <__udivmoddi4+0x156>
 8000e6a:	3b02      	subs	r3, #2
 8000e6c:	4465      	add	r5, ip
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e706      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e74:	4631      	mov	r1, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa8>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <Check_touchkey>:
#include "rtc.h"
#include "pet.h"
#include "alarm.h"
#include "esp8266.h"
uint8_t Check_touchkey(const int *constraints,
		strType_XPT2046_Coordinate *pDisplayCoordinate) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	8812      	ldrh	r2, [r2, #0]
			&& constraints[1] >= pDisplayCoordinate->x
			&& constraints[2] <= pDisplayCoordinate->y
			&& constraints[3] >= pDisplayCoordinate->y);
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	dc16      	bgt.n	8000ec0 <Check_touchkey+0x44>
			&& constraints[1] >= pDisplayCoordinate->x
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3304      	adds	r3, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	8812      	ldrh	r2, [r2, #0]
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	db0f      	blt.n	8000ec0 <Check_touchkey+0x44>
			&& constraints[2] <= pDisplayCoordinate->y
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	8852      	ldrh	r2, [r2, #2]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	dc08      	bgt.n	8000ec0 <Check_touchkey+0x44>
			&& constraints[3] >= pDisplayCoordinate->y);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	8852      	ldrh	r2, [r2, #2]
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	db01      	blt.n	8000ec0 <Check_touchkey+0x44>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <Check_touchkey+0x46>
 8000ec0:	2300      	movs	r3, #0
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000ec2:	73fb      	strb	r3, [r7, #15]
	return match;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <Render>:

void Render(uint8_t *mode_new, uint8_t *render_status,
		const unsigned char *petStats) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
	//Not Render if done
	if (*render_status == 1)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d033      	beq.n	8000f4c <Render+0x7c>
		return;

	//Mode 0 = Home, Mode 1 = Drink Water, Mode 2 = Toggle Dark Mode, Mode 3 = Stats,
	switch (*mode_new) {
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d82b      	bhi.n	8000f44 <Render+0x74>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <Render+0x24>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000f11 	.word	0x08000f11
 8000ef8:	08000f17 	.word	0x08000f17
 8000efc:	08000f23 	.word	0x08000f23
 8000f00:	08000f2f 	.word	0x08000f2f
 8000f04:	08000f35 	.word	0x08000f35
 8000f08:	08000f3b 	.word	0x08000f3b
 8000f0c:	08000f41 	.word	0x08000f41
	case (0):
		UI_Home();
 8000f10:	f000 f8e8 	bl	80010e4 <UI_Home>
		break;
 8000f14:	e016      	b.n	8000f44 <Render+0x74>
	case (1):
		UI_Drink_Water();
 8000f16:	f000 f81d 	bl	8000f54 <UI_Drink_Water>
		*mode_new = 0;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
		break;
 8000f20:	e010      	b.n	8000f44 <Render+0x74>
	case (2):
		LCD_Darkmode_Toggle();
 8000f22:	f001 fe81 	bl	8002c28 <LCD_Darkmode_Toggle>
		*mode_new = 0;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
		break;
 8000f2c:	e00a      	b.n	8000f44 <Render+0x74>
	case (3):
		UI_Stats();
 8000f2e:	f000 fa1f 	bl	8001370 <UI_Stats>
		break;
 8000f32:	e007      	b.n	8000f44 <Render+0x74>
	case (4):
		UI_Config();
 8000f34:	f000 fbd0 	bl	80016d8 <UI_Config>
		break;
 8000f38:	e004      	b.n	8000f44 <Render+0x74>
	case (5):
		UI_Time_set();
 8000f3a:	f000 fbe7 	bl	800170c <UI_Time_set>
		break;
 8000f3e:	e001      	b.n	8000f44 <Render+0x74>
	case (6):
		UI_Set();
 8000f40:	f000 fb28 	bl	8001594 <UI_Set>
	}
	*render_status = 1;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e000      	b.n	8000f4e <Render+0x7e>
		return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <UI_Drink_Water>:

void UI_Drink_Water() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8000f58:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f5c:	22f0      	movs	r2, #240	; 0xf0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2000      	movs	r0, #0
 8000f62:	f001 fb35 	bl	80025d0 <LCD_Clear>
	extern uint8_t darkmode_toggle;

	LCD_DrawString(10, 220, "Drinked a glass of water");
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <UI_Drink_Water+0xcc>)
 8000f68:	21dc      	movs	r1, #220	; 0xdc
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f001 fc28 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(10, 250, "Return to home in 2s");
 8000f70:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <UI_Drink_Water+0xd0>)
 8000f72:	21fa      	movs	r1, #250	; 0xfa
 8000f74:	200a      	movs	r0, #10
 8000f76:	f001 fc23 	bl	80027c0 <LCD_DrawString>
	if(!darkmode_toggle) UI_Home_Display_Pet(60,70,water1);
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <UI_Drink_Water+0xd4>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <UI_Drink_Water+0x3a>
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <UI_Drink_Water+0xd8>)
 8000f84:	2146      	movs	r1, #70	; 0x46
 8000f86:	203c      	movs	r0, #60	; 0x3c
 8000f88:	f000 f982 	bl	8001290 <UI_Home_Display_Pet>
 8000f8c:	e004      	b.n	8000f98 <UI_Drink_Water+0x44>
	else UI_Home_Display_Pet(60,70,water1_night);
 8000f8e:	4a28      	ldr	r2, [pc, #160]	; (8001030 <UI_Drink_Water+0xdc>)
 8000f90:	2146      	movs	r1, #70	; 0x46
 8000f92:	203c      	movs	r0, #60	; 0x3c
 8000f94:	f000 f97c 	bl	8001290 <UI_Home_Display_Pet>

	UI_WATER_WIFI_HANDLE(1000);
 8000f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9c:	f000 f856 	bl	800104c <UI_WATER_WIFI_HANDLE>

	LCD_Clear(10, 250, 240, 320);
 8000fa0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fa4:	22f0      	movs	r2, #240	; 0xf0
 8000fa6:	21fa      	movs	r1, #250	; 0xfa
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f001 fb11 	bl	80025d0 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 1s");
 8000fae:	4a21      	ldr	r2, [pc, #132]	; (8001034 <UI_Drink_Water+0xe0>)
 8000fb0:	21fa      	movs	r1, #250	; 0xfa
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f001 fc04 	bl	80027c0 <LCD_DrawString>
	if(!darkmode_toggle) UI_Home_Display_Pet(60,70,water2);
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <UI_Drink_Water+0xd4>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d105      	bne.n	8000fcc <UI_Drink_Water+0x78>
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <UI_Drink_Water+0xe4>)
 8000fc2:	2146      	movs	r1, #70	; 0x46
 8000fc4:	203c      	movs	r0, #60	; 0x3c
 8000fc6:	f000 f963 	bl	8001290 <UI_Home_Display_Pet>
 8000fca:	e004      	b.n	8000fd6 <UI_Drink_Water+0x82>
	else UI_Home_Display_Pet(60,70,water2_night);
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <UI_Drink_Water+0xe8>)
 8000fce:	2146      	movs	r1, #70	; 0x46
 8000fd0:	203c      	movs	r0, #60	; 0x3c
 8000fd2:	f000 f95d 	bl	8001290 <UI_Home_Display_Pet>
	UI_WATER_WIFI_HANDLE(1000);
 8000fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fda:	f000 f837 	bl	800104c <UI_WATER_WIFI_HANDLE>

	LCD_Clear(10, 250, 240, 320);
 8000fde:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fe2:	22f0      	movs	r2, #240	; 0xf0
 8000fe4:	21fa      	movs	r1, #250	; 0xfa
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f001 faf2 	bl	80025d0 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 0s");
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <UI_Drink_Water+0xec>)
 8000fee:	21fa      	movs	r1, #250	; 0xfa
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f001 fbe5 	bl	80027c0 <LCD_DrawString>
	if(!darkmode_toggle) UI_Home_Display_Pet(60,70,water3);
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <UI_Drink_Water+0xd4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d105      	bne.n	800100a <UI_Drink_Water+0xb6>
 8000ffe:	4a11      	ldr	r2, [pc, #68]	; (8001044 <UI_Drink_Water+0xf0>)
 8001000:	2146      	movs	r1, #70	; 0x46
 8001002:	203c      	movs	r0, #60	; 0x3c
 8001004:	f000 f944 	bl	8001290 <UI_Home_Display_Pet>
 8001008:	e004      	b.n	8001014 <UI_Drink_Water+0xc0>
	else UI_Home_Display_Pet(60,70,water3_night);
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <UI_Drink_Water+0xf4>)
 800100c:	2146      	movs	r1, #70	; 0x46
 800100e:	203c      	movs	r0, #60	; 0x3c
 8001010:	f000 f93e 	bl	8001290 <UI_Home_Display_Pet>
	UI_WATER_WIFI_HANDLE(1000);
 8001014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001018:	f000 f818 	bl	800104c <UI_WATER_WIFI_HANDLE>

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	0800cc20 	.word	0x0800cc20
 8001024:	0800cc3c 	.word	0x0800cc3c
 8001028:	20000150 	.word	0x20000150
 800102c:	0804cc68 	.word	0x0804cc68
 8001030:	08053cf0 	.word	0x08053cf0
 8001034:	0800cc54 	.word	0x0800cc54
 8001038:	0805ad78 	.word	0x0805ad78
 800103c:	08061e00 	.word	0x08061e00
 8001040:	0800cc6c 	.word	0x0800cc6c
 8001044:	08068e88 	.word	0x08068e88
 8001048:	0806ff10 	.word	0x0806ff10

0800104c <UI_WATER_WIFI_HANDLE>:

void UI_WATER_WIFI_HANDLE(uint8_t time_delay){
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	int i;
	extern uint8_t USART_WATER_FLAG;
	extern uint8_t USART_GET_TIME_FLAG;
	extern uint8_t esp8266_step_flag;
	extern uint8_t USART_EXERCISE_FLAG;
	for(i=0; i< time_delay; ++i){//Don't Waste Time
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e031      	b.n	80010c0 <UI_WATER_WIFI_HANDLE+0x74>
		  //Upload Exercise Data
		  if(USART_EXERCISE_FLAG && !USART_GET_TIME_FLAG){
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <UI_WATER_WIFI_HANDLE+0x88>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00f      	beq.n	8001084 <UI_WATER_WIFI_HANDLE+0x38>
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <UI_WATER_WIFI_HANDLE+0x8c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10b      	bne.n	8001084 <UI_WATER_WIFI_HANDLE+0x38>
			  if(USART_EXERCISE_FLAG==1) {esp8266_step_flag = 0; USART_EXERCISE_FLAG=2;} //Reset Step Flag
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <UI_WATER_WIFI_HANDLE+0x88>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <UI_WATER_WIFI_HANDLE+0x34>
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <UI_WATER_WIFI_HANDLE+0x90>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <UI_WATER_WIFI_HANDLE+0x88>)
 800107c:	2202      	movs	r2, #2
 800107e:	701a      	strb	r2, [r3, #0]
			  esp8266_update_exercise();
 8001080:	f001 f854 	bl	800212c <esp8266_update_exercise>
		  }

		  //Upload drink water data
		  if(USART_WATER_FLAG && !USART_GET_TIME_FLAG && !USART_EXERCISE_FLAG){
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <UI_WATER_WIFI_HANDLE+0x94>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <UI_WATER_WIFI_HANDLE+0x68>
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <UI_WATER_WIFI_HANDLE+0x8c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10f      	bne.n	80010b4 <UI_WATER_WIFI_HANDLE+0x68>
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <UI_WATER_WIFI_HANDLE+0x88>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10b      	bne.n	80010b4 <UI_WATER_WIFI_HANDLE+0x68>
			  if(USART_WATER_FLAG==1) {esp8266_step_flag = 0;USART_WATER_FLAG=2;} //Reset Step Flag
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <UI_WATER_WIFI_HANDLE+0x94>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d105      	bne.n	80010b0 <UI_WATER_WIFI_HANDLE+0x64>
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <UI_WATER_WIFI_HANDLE+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <UI_WATER_WIFI_HANDLE+0x94>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
			  esp8266_update_water();
 80010b0:	f000 fffe 	bl	80020b0 <esp8266_update_water>
		  }
	  HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f006 f983 	bl	80073c0 <HAL_Delay>
	for(i=0; i< time_delay; ++i){//Don't Waste Time
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbc9      	blt.n	800105c <UI_WATER_WIFI_HANDLE+0x10>
	}
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000392 	.word	0x20000392
 80010d8:	20000390 	.word	0x20000390
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000391 	.word	0x20000391

080010e4 <UI_Home>:

void UI_Home() {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

	extern const unsigned char *petStats;
	UI_Home_Display_Button();
 80010e8:	f000 f80e 	bl	8001108 <UI_Home_Display_Button>
	UI_Home_Display_Pet(60, 70, petStats);
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <UI_Home+0x20>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	2146      	movs	r1, #70	; 0x46
 80010f4:	203c      	movs	r0, #60	; 0x3c
 80010f6:	f000 f8cb 	bl	8001290 <UI_Home_Display_Pet>
	UI_Home_Display_DHT11();
 80010fa:	f000 f8db 	bl	80012b4 <UI_Home_Display_DHT11>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000000c 	.word	0x2000000c

08001108 <UI_Home_Display_Button>:

void UI_Home_Display_Button() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 800110c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001110:	22f0      	movs	r2, #240	; 0xf0
 8001112:	2100      	movs	r1, #0
 8001114:	2000      	movs	r0, #0
 8001116:	f001 fa5b 	bl	80025d0 <LCD_Clear>
	LCD_DrawString(2, 10, "Config");
 800111a:	4a19      	ldr	r2, [pc, #100]	; (8001180 <UI_Home_Display_Button+0x78>)
 800111c:	210a      	movs	r1, #10
 800111e:	2002      	movs	r0, #2
 8001120:	f001 fb4e 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(200, 10, "Stats");
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <UI_Home_Display_Button+0x7c>)
 8001126:	210a      	movs	r1, #10
 8001128:	20c8      	movs	r0, #200	; 0xc8
 800112a:	f001 fb49 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(40, 220, "Set");
 800112e:	4a16      	ldr	r2, [pc, #88]	; (8001188 <UI_Home_Display_Button+0x80>)
 8001130:	21dc      	movs	r1, #220	; 0xdc
 8001132:	2028      	movs	r0, #40	; 0x28
 8001134:	f001 fb44 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(40, 240, "Exercise");
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <UI_Home_Display_Button+0x84>)
 800113a:	21f0      	movs	r1, #240	; 0xf0
 800113c:	2028      	movs	r0, #40	; 0x28
 800113e:	f001 fb3f 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(40, 260, "Timer");
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <UI_Home_Display_Button+0x88>)
 8001144:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001148:	2028      	movs	r0, #40	; 0x28
 800114a:	f001 fb39 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(140, 220, "Drink");
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <UI_Home_Display_Button+0x8c>)
 8001150:	21dc      	movs	r1, #220	; 0xdc
 8001152:	208c      	movs	r0, #140	; 0x8c
 8001154:	f001 fb34 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(140, 240, "water");
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <UI_Home_Display_Button+0x90>)
 800115a:	21f0      	movs	r1, #240	; 0xf0
 800115c:	208c      	movs	r0, #140	; 0x8c
 800115e:	f001 fb2f 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(200, 260, "Dark");
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <UI_Home_Display_Button+0x94>)
 8001164:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001168:	20c8      	movs	r0, #200	; 0xc8
 800116a:	f001 fb29 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(200, 280, "mode");
 800116e:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <UI_Home_Display_Button+0x98>)
 8001170:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001174:	20c8      	movs	r0, #200	; 0xc8
 8001176:	f001 fb23 	bl	80027c0 <LCD_DrawString>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	0800cc84 	.word	0x0800cc84
 8001184:	0800cc8c 	.word	0x0800cc8c
 8001188:	0800cc94 	.word	0x0800cc94
 800118c:	0800cc98 	.word	0x0800cc98
 8001190:	0800cca4 	.word	0x0800cca4
 8001194:	0800ccac 	.word	0x0800ccac
 8001198:	0800ccb4 	.word	0x0800ccb4
 800119c:	0800ccbc 	.word	0x0800ccbc
 80011a0:	0800ccc4 	.word	0x0800ccc4

080011a4 <UI_Home_Display_Date>:

void UI_Home_Display_Date(uint16_t year, uint8_t month, uint8_t day) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
 80011ae:	460b      	mov	r3, r1
 80011b0:	717b      	strb	r3, [r7, #5]
 80011b2:	4613      	mov	r3, r2
 80011b4:	713b      	strb	r3, [r7, #4]
	char str[10];

	//Draw Year
	sprintf(str, "%04i", year);
 80011b6:	88fa      	ldrh	r2, [r7, #6]
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4915      	ldr	r1, [pc, #84]	; (8001214 <UI_Home_Display_Date+0x70>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 fa12 	bl	80055e8 <sprintf_>
	LCD_DrawString(86, 10, str);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	461a      	mov	r2, r3
 80011ca:	210a      	movs	r1, #10
 80011cc:	2056      	movs	r0, #86	; 0x56
 80011ce:	f001 faf7 	bl	80027c0 <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", month);
 80011d2:	797a      	ldrb	r2, [r7, #5]
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	490f      	ldr	r1, [pc, #60]	; (8001218 <UI_Home_Display_Date+0x74>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fa04 	bl	80055e8 <sprintf_>
	LCD_DrawString(125, 10, str);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	461a      	mov	r2, r3
 80011e6:	210a      	movs	r1, #10
 80011e8:	207d      	movs	r0, #125	; 0x7d
 80011ea:	f001 fae9 	bl	80027c0 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", day);
 80011ee:	793a      	ldrb	r2, [r7, #4]
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4908      	ldr	r1, [pc, #32]	; (8001218 <UI_Home_Display_Date+0x74>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 f9f6 	bl	80055e8 <sprintf_>
	LCD_DrawString(145, 10, str);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	461a      	mov	r2, r3
 8001202:	210a      	movs	r1, #10
 8001204:	2091      	movs	r0, #145	; 0x91
 8001206:	f001 fadb 	bl	80027c0 <LCD_DrawString>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0800cccc 	.word	0x0800cccc
 8001218:	0800ccd4 	.word	0x0800ccd4

0800121c <UI_Home_Display_Time>:

void UI_Home_Display_Time(uint8_t hour, uint8_t minute, uint8_t second) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	460b      	mov	r3, r1
 8001228:	71bb      	strb	r3, [r7, #6]
 800122a:	4613      	mov	r3, r2
 800122c:	717b      	strb	r3, [r7, #5]
	char str[10];

	//Draw Hour
	sprintf(str, "%02i", hour);
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4915      	ldr	r1, [pc, #84]	; (800128c <UI_Home_Display_Time+0x70>)
 8001236:	4618      	mov	r0, r3
 8001238:	f004 f9d6 	bl	80055e8 <sprintf_>
	LCD_DrawString(95, 30, str);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	461a      	mov	r2, r3
 8001242:	211e      	movs	r1, #30
 8001244:	205f      	movs	r0, #95	; 0x5f
 8001246:	f001 fabb 	bl	80027c0 <LCD_DrawString>

	//Draw Minute
	sprintf(str, "%02i", minute);
 800124a:	79ba      	ldrb	r2, [r7, #6]
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	490e      	ldr	r1, [pc, #56]	; (800128c <UI_Home_Display_Time+0x70>)
 8001252:	4618      	mov	r0, r3
 8001254:	f004 f9c8 	bl	80055e8 <sprintf_>
	LCD_DrawString(115, 30, str);
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	461a      	mov	r2, r3
 800125e:	211e      	movs	r1, #30
 8001260:	2073      	movs	r0, #115	; 0x73
 8001262:	f001 faad 	bl	80027c0 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", second);
 8001266:	797a      	ldrb	r2, [r7, #5]
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <UI_Home_Display_Time+0x70>)
 800126e:	4618      	mov	r0, r3
 8001270:	f004 f9ba 	bl	80055e8 <sprintf_>
	LCD_DrawString(135, 30, str);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	461a      	mov	r2, r3
 800127a:	211e      	movs	r1, #30
 800127c:	2087      	movs	r0, #135	; 0x87
 800127e:	f001 fa9f 	bl	80027c0 <LCD_DrawString>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	0800ccd4 	.word	0x0800ccd4

08001290 <UI_Home_Display_Pet>:

void UI_Home_Display_Pet(uint16_t StartX, uint16_t StartY, unsigned char *pic) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	603a      	str	r2, [r7, #0]
 800129a:	80fb      	strh	r3, [r7, #6]
 800129c:	460b      	mov	r3, r1
 800129e:	80bb      	strh	r3, [r7, #4]

	LCD_DrawPicture(StartX, StartY, pic);
 80012a0:	88b9      	ldrh	r1, [r7, #4]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fcf4 	bl	8002c94 <LCD_DrawPicture>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <UI_Home_Display_DHT11>:

void UI_Home_Display_DHT11() {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
	extern DHT11_datastruct DHT11_data;
	char Stemp[10];
	char Shum[10];
	sprintf(Stemp, "%02i", DHT11_data.temp_int);
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <UI_Home_Display_DHT11+0xa0>)
 80012bc:	789b      	ldrb	r3, [r3, #2]
 80012be:	461a      	mov	r2, r3
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4924      	ldr	r1, [pc, #144]	; (8001358 <UI_Home_Display_DHT11+0xa4>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f004 f98e 	bl	80055e8 <sprintf_>
	LCD_DrawString(10, 50, "T");
 80012cc:	4a23      	ldr	r2, [pc, #140]	; (800135c <UI_Home_Display_DHT11+0xa8>)
 80012ce:	2132      	movs	r1, #50	; 0x32
 80012d0:	200a      	movs	r0, #10
 80012d2:	f001 fa75 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(0, 70, Stemp);
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	461a      	mov	r2, r3
 80012dc:	2146      	movs	r1, #70	; 0x46
 80012de:	2000      	movs	r0, #0
 80012e0:	f001 fa6e 	bl	80027c0 <LCD_DrawString>
	if (LCD_GetPointPixel(240, 320) == 0x000000) {
 80012e4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80012e8:	20f0      	movs	r0, #240	; 0xf0
 80012ea:	f001 f9f5 	bl	80026d8 <LCD_GetPointPixel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d107      	bne.n	8001304 <UI_Home_Display_DHT11+0x50>
		LCD_DrawCircle(17, 72, 2, WHITE);
 80012f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f8:	2202      	movs	r2, #2
 80012fa:	2148      	movs	r1, #72	; 0x48
 80012fc:	2011      	movs	r0, #17
 80012fe:	f001 faaf 	bl	8002860 <LCD_DrawCircle>
 8001302:	e005      	b.n	8001310 <UI_Home_Display_DHT11+0x5c>
	} else {
		LCD_DrawCircle(17, 72, 2, BLACK);
 8001304:	2300      	movs	r3, #0
 8001306:	2202      	movs	r2, #2
 8001308:	2148      	movs	r1, #72	; 0x48
 800130a:	2011      	movs	r0, #17
 800130c:	f001 faa8 	bl	8002860 <LCD_DrawCircle>
	}
	LCD_DrawString(20, 70, "C");
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <UI_Home_Display_DHT11+0xac>)
 8001312:	2146      	movs	r1, #70	; 0x46
 8001314:	2014      	movs	r0, #20
 8001316:	f001 fa53 	bl	80027c0 <LCD_DrawString>
	sprintf(Shum, "%03i", DHT11_data.humid_int);
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <UI_Home_Display_DHT11+0xa0>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	463b      	mov	r3, r7
 8001322:	4910      	ldr	r1, [pc, #64]	; (8001364 <UI_Home_Display_DHT11+0xb0>)
 8001324:	4618      	mov	r0, r3
 8001326:	f004 f95f 	bl	80055e8 <sprintf_>
	LCD_DrawString(220, 50, "H");
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <UI_Home_Display_DHT11+0xb4>)
 800132c:	2132      	movs	r1, #50	; 0x32
 800132e:	20dc      	movs	r0, #220	; 0xdc
 8001330:	f001 fa46 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(205, 70, Shum);
 8001334:	463b      	mov	r3, r7
 8001336:	461a      	mov	r2, r3
 8001338:	2146      	movs	r1, #70	; 0x46
 800133a:	20cd      	movs	r0, #205	; 0xcd
 800133c:	f001 fa40 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(230, 70, "%");
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <UI_Home_Display_DHT11+0xb8>)
 8001342:	2146      	movs	r1, #70	; 0x46
 8001344:	20e6      	movs	r0, #230	; 0xe6
 8001346:	f001 fa3b 	bl	80027c0 <LCD_DrawString>

}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000035c 	.word	0x2000035c
 8001358:	0800ccd4 	.word	0x0800ccd4
 800135c:	0800ccdc 	.word	0x0800ccdc
 8001360:	0800cce0 	.word	0x0800cce0
 8001364:	0800cce4 	.word	0x0800cce4
 8001368:	0800ccec 	.word	0x0800ccec
 800136c:	0800ccf0 	.word	0x0800ccf0

08001370 <UI_Stats>:

void UI_Stats() {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001374:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001378:	22f0      	movs	r2, #240	; 0xf0
 800137a:	2100      	movs	r1, #0
 800137c:	2000      	movs	r0, #0
 800137e:	f001 f927 	bl	80025d0 <LCD_Clear>
	LCD_DrawString(40, 50, "Time since last drink");
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <UI_Stats+0x44>)
 8001384:	2132      	movs	r1, #50	; 0x32
 8001386:	2028      	movs	r0, #40	; 0x28
 8001388:	f001 fa1a 	bl	80027c0 <LCD_DrawString>

	UI_Stats_Update();
 800138c:	f000 f81a 	bl	80013c4 <UI_Stats_Update>
	LCD_DrawString(80, 125, "Next drink");
 8001390:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <UI_Stats+0x48>)
 8001392:	217d      	movs	r1, #125	; 0x7d
 8001394:	2050      	movs	r0, #80	; 0x50
 8001396:	f001 fa13 	bl	80027c0 <LCD_DrawString>
	//TODO: Time Of Next Water Drinking Event
	LCD_DrawString(70, 190, "Exercise Timer");
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <UI_Stats+0x4c>)
 800139c:	21be      	movs	r1, #190	; 0xbe
 800139e:	2046      	movs	r0, #70	; 0x46
 80013a0:	f001 fa0e 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(70, 280, "Back to home");
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <UI_Stats+0x50>)
 80013a6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80013aa:	2046      	movs	r0, #70	; 0x46
 80013ac:	f001 fa08 	bl	80027c0 <LCD_DrawString>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0800ccf4 	.word	0x0800ccf4
 80013b8:	0800cd0c 	.word	0x0800cd0c
 80013bc:	0800cd18 	.word	0x0800cd18
 80013c0:	0800cd28 	.word	0x0800cd28

080013c4 <UI_Stats_Update>:
void UI_Stats_Update() {
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af02      	add	r7, sp, #8
	extern uint32_t lastupdate_raw, lastdrink_raw;
	uint32_t realtime_raw = RTC_raw();
 80013ca:	f004 fd5b 	bl	8005e84 <RTC_raw>
 80013ce:	61b8      	str	r0, [r7, #24]

	if (realtime_raw == lastupdate_raw)
 80013d0:	4b66      	ldr	r3, [pc, #408]	; (800156c <UI_Stats_Update+0x1a8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	f000 80c4 	beq.w	8001564 <UI_Stats_Update+0x1a0>
		return;
	uint32_t time_diff = realtime_raw - lastdrink_raw;
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <UI_Stats_Update+0x1ac>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]

	//Update New Last Drink
	lastupdate_raw = realtime_raw;
 80013e6:	4a61      	ldr	r2, [pc, #388]	; (800156c <UI_Stats_Update+0x1a8>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6013      	str	r3, [r2, #0]

	char timestr[15];
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	4a61      	ldr	r2, [pc, #388]	; (8001574 <UI_Stats_Update+0x1b0>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	0adc      	lsrs	r4, r3, #11
			(time_diff % 3600) / 60, time_diff % 60);
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4b5e      	ldr	r3, [pc, #376]	; (8001574 <UI_Stats_Update+0x1b0>)
 80013fa:	fba3 1302 	umull	r1, r3, r3, r2
 80013fe:	0adb      	lsrs	r3, r3, #11
 8001400:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001404:	fb01 f303 	mul.w	r3, r1, r3
 8001408:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 800140a:	4a5b      	ldr	r2, [pc, #364]	; (8001578 <UI_Stats_Update+0x1b4>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	095d      	lsrs	r5, r3, #5
 8001412:	6979      	ldr	r1, [r7, #20]
 8001414:	4b58      	ldr	r3, [pc, #352]	; (8001578 <UI_Stats_Update+0x1b4>)
 8001416:	fba3 2301 	umull	r2, r3, r3, r1
 800141a:	095a      	lsrs	r2, r3, #5
 800141c:	4613      	mov	r3, r2
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	1aca      	subs	r2, r1, r3
 8001426:	1d38      	adds	r0, r7, #4
 8001428:	9200      	str	r2, [sp, #0]
 800142a:	462b      	mov	r3, r5
 800142c:	4622      	mov	r2, r4
 800142e:	4953      	ldr	r1, [pc, #332]	; (800157c <UI_Stats_Update+0x1b8>)
 8001430:	f004 f8da 	bl	80055e8 <sprintf_>
	LCD_DrawString(75, 85, timestr);
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	461a      	mov	r2, r3
 8001438:	2155      	movs	r1, #85	; 0x55
 800143a:	204b      	movs	r0, #75	; 0x4b
 800143c:	f001 f9c0 	bl	80027c0 <LCD_DrawString>
	extern DHT11_datastruct DHT11_data;
	extern int tilnext; // time till next drink
	extern uint32_t exertimer;
	extern uint8_t EXER_TIMER_SET_FLAG;

	tilnext = next - realtime_raw;
 8001440:	4b4f      	ldr	r3, [pc, #316]	; (8001580 <UI_Stats_Update+0x1bc>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <UI_Stats_Update+0x1c0>)
 800144c:	601a      	str	r2, [r3, #0]
	if (tilnext < 0) {
 800144e:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <UI_Stats_Update+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	da02      	bge.n	800145c <UI_Stats_Update+0x98>
		tilnext = 0;
 8001456:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <UI_Stats_Update+0x1c0>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
	}

	sprintf(timestr, "%02d : %02d : %02d", tilnext / 3600,
 800145c:	4b49      	ldr	r3, [pc, #292]	; (8001584 <UI_Stats_Update+0x1c0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a44      	ldr	r2, [pc, #272]	; (8001574 <UI_Stats_Update+0x1b0>)
 8001462:	fb82 1203 	smull	r1, r2, r2, r3
 8001466:	441a      	add	r2, r3
 8001468:	12d2      	asrs	r2, r2, #11
 800146a:	17db      	asrs	r3, r3, #31
 800146c:	1ad4      	subs	r4, r2, r3
			(tilnext % 3600) / 60, tilnext % 60);
 800146e:	4b45      	ldr	r3, [pc, #276]	; (8001584 <UI_Stats_Update+0x1c0>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b40      	ldr	r3, [pc, #256]	; (8001574 <UI_Stats_Update+0x1b0>)
 8001474:	fb83 1302 	smull	r1, r3, r3, r2
 8001478:	4413      	add	r3, r2
 800147a:	12d9      	asrs	r1, r3, #11
 800147c:	17d3      	asrs	r3, r2, #31
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", tilnext / 3600,
 800148a:	4a3b      	ldr	r2, [pc, #236]	; (8001578 <UI_Stats_Update+0x1b4>)
 800148c:	fb82 1203 	smull	r1, r2, r2, r3
 8001490:	441a      	add	r2, r3
 8001492:	1152      	asrs	r2, r2, #5
 8001494:	17db      	asrs	r3, r3, #31
 8001496:	1ad5      	subs	r5, r2, r3
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <UI_Stats_Update+0x1c0>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <UI_Stats_Update+0x1b4>)
 800149e:	fb83 1302 	smull	r1, r3, r3, r2
 80014a2:	4413      	add	r3, r2
 80014a4:	1159      	asrs	r1, r3, #5
 80014a6:	17d3      	asrs	r3, r2, #31
 80014a8:	1ac9      	subs	r1, r1, r3
 80014aa:	460b      	mov	r3, r1
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	1a5b      	subs	r3, r3, r1
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	1d38      	adds	r0, r7, #4
 80014b6:	9100      	str	r1, [sp, #0]
 80014b8:	462b      	mov	r3, r5
 80014ba:	4622      	mov	r2, r4
 80014bc:	492f      	ldr	r1, [pc, #188]	; (800157c <UI_Stats_Update+0x1b8>)
 80014be:	f004 f893 	bl	80055e8 <sprintf_>
	LCD_DrawString(75, 155, timestr);
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	461a      	mov	r2, r3
 80014c6:	219b      	movs	r1, #155	; 0x9b
 80014c8:	204b      	movs	r0, #75	; 0x4b
 80014ca:	f001 f979 	bl	80027c0 <LCD_DrawString>

	//tilexer: when will the clock ring next time
	int tilexer = exertimer - realtime_raw;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <UI_Stats_Update+0x1c4>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	61fb      	str	r3, [r7, #28]
	if (tilexer < 0) {
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da01      	bge.n	80014e2 <UI_Stats_Update+0x11e>
			tilexer = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
		}
	if(EXER_TIMER_SET_FLAG){
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <UI_Stats_Update+0x1c8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d036      	beq.n	8001558 <UI_Stats_Update+0x194>
		sprintf(timestr, "%02d : %02d : %02d", tilexer / 3600,
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <UI_Stats_Update+0x1b0>)
 80014ee:	fb82 1203 	smull	r1, r2, r2, r3
 80014f2:	441a      	add	r2, r3
 80014f4:	12d2      	asrs	r2, r2, #11
 80014f6:	17db      	asrs	r3, r3, #31
 80014f8:	1ad4      	subs	r4, r2, r3
					(tilexer % 3600) / 60, tilexer % 60);
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <UI_Stats_Update+0x1b0>)
 80014fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001502:	4413      	add	r3, r2
 8001504:	12d9      	asrs	r1, r3, #11
 8001506:	17d3      	asrs	r3, r2, #31
 8001508:	1acb      	subs	r3, r1, r3
 800150a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	1ad3      	subs	r3, r2, r3
		sprintf(timestr, "%02d : %02d : %02d", tilexer / 3600,
 8001514:	4a18      	ldr	r2, [pc, #96]	; (8001578 <UI_Stats_Update+0x1b4>)
 8001516:	fb82 1203 	smull	r1, r2, r2, r3
 800151a:	441a      	add	r2, r3
 800151c:	1152      	asrs	r2, r2, #5
 800151e:	17db      	asrs	r3, r3, #31
 8001520:	1ad5      	subs	r5, r2, r3
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <UI_Stats_Update+0x1b4>)
 8001526:	fb83 1302 	smull	r1, r3, r3, r2
 800152a:	4413      	add	r3, r2
 800152c:	1159      	asrs	r1, r3, #5
 800152e:	17d3      	asrs	r3, r2, #31
 8001530:	1ac9      	subs	r1, r1, r3
 8001532:	460b      	mov	r3, r1
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	1a5b      	subs	r3, r3, r1
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	1ad1      	subs	r1, r2, r3
 800153c:	1d38      	adds	r0, r7, #4
 800153e:	9100      	str	r1, [sp, #0]
 8001540:	462b      	mov	r3, r5
 8001542:	4622      	mov	r2, r4
 8001544:	490d      	ldr	r1, [pc, #52]	; (800157c <UI_Stats_Update+0x1b8>)
 8001546:	f004 f84f 	bl	80055e8 <sprintf_>
		LCD_DrawString(75, 205, timestr);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	461a      	mov	r2, r3
 800154e:	21cd      	movs	r1, #205	; 0xcd
 8001550:	204b      	movs	r0, #75	; 0x4b
 8001552:	f001 f935 	bl	80027c0 <LCD_DrawString>
 8001556:	e006      	b.n	8001566 <UI_Stats_Update+0x1a2>
	}else{//Timer not set
		LCD_DrawString(75, 205,  "-- : -- : --");
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <UI_Stats_Update+0x1cc>)
 800155a:	21cd      	movs	r1, #205	; 0xcd
 800155c:	204b      	movs	r0, #75	; 0x4b
 800155e:	f001 f92f 	bl	80027c0 <LCD_DrawString>
 8001562:	e000      	b.n	8001566 <UI_Stats_Update+0x1a2>
		return;
 8001564:	bf00      	nop
	}

}
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bdb0      	pop	{r4, r5, r7, pc}
 800156c:	20000370 	.word	0x20000370
 8001570:	20000374 	.word	0x20000374
 8001574:	91a2b3c5 	.word	0x91a2b3c5
 8001578:	88888889 	.word	0x88888889
 800157c:	0800cd38 	.word	0x0800cd38
 8001580:	20000378 	.word	0x20000378
 8001584:	2000037c 	.word	0x2000037c
 8001588:	20000388 	.word	0x20000388
 800158c:	20000394 	.word	0x20000394
 8001590:	0800cd4c 	.word	0x0800cd4c

08001594 <UI_Set>:

void UI_Set() {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 800159a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800159e:	22f0      	movs	r2, #240	; 0xf0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2000      	movs	r0, #0
 80015a4:	f001 f814 	bl	80025d0 <LCD_Clear>
	extern exertime;
	LCD_DrawString(80, 50, "Hour");
 80015a8:	4a25      	ldr	r2, [pc, #148]	; (8001640 <UI_Set+0xac>)
 80015aa:	2132      	movs	r1, #50	; 0x32
 80015ac:	2050      	movs	r0, #80	; 0x50
 80015ae:	f001 f907 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(140, 50, "Minute");
 80015b2:	4a24      	ldr	r2, [pc, #144]	; (8001644 <UI_Set+0xb0>)
 80015b4:	2132      	movs	r1, #50	; 0x32
 80015b6:	208c      	movs	r0, #140	; 0x8c
 80015b8:	f001 f902 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(80, 90, " +       + ");
 80015bc:	4a22      	ldr	r2, [pc, #136]	; (8001648 <UI_Set+0xb4>)
 80015be:	215a      	movs	r1, #90	; 0x5a
 80015c0:	2050      	movs	r0, #80	; 0x50
 80015c2:	f001 f8fd 	bl	80027c0 <LCD_DrawString>
	char time[16];
	sprintf(time, "%02d : %02d", exertime / 3600, (exertime % 3600) / 60);
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <UI_Set+0xb8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <UI_Set+0xbc>)
 80015cc:	fb82 1203 	smull	r1, r2, r2, r3
 80015d0:	441a      	add	r2, r3
 80015d2:	12d2      	asrs	r2, r2, #11
 80015d4:	17db      	asrs	r3, r3, #31
 80015d6:	1ad4      	subs	r4, r2, r3
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <UI_Set+0xb8>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <UI_Set+0xbc>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	4413      	add	r3, r2
 80015e4:	12d9      	asrs	r1, r3, #11
 80015e6:	17d3      	asrs	r3, r2, #31
 80015e8:	1acb      	subs	r3, r1, r3
 80015ea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	4a17      	ldr	r2, [pc, #92]	; (8001654 <UI_Set+0xc0>)
 80015f6:	fb82 1203 	smull	r1, r2, r2, r3
 80015fa:	441a      	add	r2, r3
 80015fc:	1152      	asrs	r2, r2, #5
 80015fe:	17db      	asrs	r3, r3, #31
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4638      	mov	r0, r7
 8001604:	4622      	mov	r2, r4
 8001606:	4914      	ldr	r1, [pc, #80]	; (8001658 <UI_Set+0xc4>)
 8001608:	f003 ffee 	bl	80055e8 <sprintf_>
	LCD_DrawString(90, 130, time);
 800160c:	463b      	mov	r3, r7
 800160e:	461a      	mov	r2, r3
 8001610:	2182      	movs	r1, #130	; 0x82
 8001612:	205a      	movs	r0, #90	; 0x5a
 8001614:	f001 f8d4 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(80, 170, " -       -");
 8001618:	4a10      	ldr	r2, [pc, #64]	; (800165c <UI_Set+0xc8>)
 800161a:	21aa      	movs	r1, #170	; 0xaa
 800161c:	2050      	movs	r0, #80	; 0x50
 800161e:	f001 f8cf 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(100, 240, "Set");
 8001622:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <UI_Set+0xcc>)
 8001624:	21f0      	movs	r1, #240	; 0xf0
 8001626:	2064      	movs	r0, #100	; 0x64
 8001628:	f001 f8ca 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(70, 280, "Back to home");
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <UI_Set+0xd0>)
 800162e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001632:	2046      	movs	r0, #70	; 0x46
 8001634:	f001 f8c4 	bl	80027c0 <LCD_DrawString>
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	0800cd5c 	.word	0x0800cd5c
 8001644:	0800cd64 	.word	0x0800cd64
 8001648:	0800cd6c 	.word	0x0800cd6c
 800164c:	20000380 	.word	0x20000380
 8001650:	91a2b3c5 	.word	0x91a2b3c5
 8001654:	88888889 	.word	0x88888889
 8001658:	0800cd78 	.word	0x0800cd78
 800165c:	0800cd84 	.word	0x0800cd84
 8001660:	0800cc94 	.word	0x0800cc94
 8001664:	0800cd28 	.word	0x0800cd28

08001668 <UI_Set_Update>:
void UI_Set_Update() {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
	extern exertime;
	char time[16];
	sprintf(time, "%02d : %02d", exertime / 3600, (exertime % 3600) / 60);
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <UI_Set_Update+0x60>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <UI_Set_Update+0x64>)
 8001674:	fb82 1203 	smull	r1, r2, r2, r3
 8001678:	441a      	add	r2, r3
 800167a:	12d2      	asrs	r2, r2, #11
 800167c:	17db      	asrs	r3, r3, #31
 800167e:	1ad4      	subs	r4, r2, r3
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <UI_Set_Update+0x60>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <UI_Set_Update+0x64>)
 8001686:	fb83 1302 	smull	r1, r3, r3, r2
 800168a:	4413      	add	r3, r2
 800168c:	12d9      	asrs	r1, r3, #11
 800168e:	17d3      	asrs	r3, r2, #31
 8001690:	1acb      	subs	r3, r1, r3
 8001692:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <UI_Set_Update+0x68>)
 800169e:	fb82 1203 	smull	r1, r2, r2, r3
 80016a2:	441a      	add	r2, r3
 80016a4:	1152      	asrs	r2, r2, #5
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4638      	mov	r0, r7
 80016ac:	4622      	mov	r2, r4
 80016ae:	4909      	ldr	r1, [pc, #36]	; (80016d4 <UI_Set_Update+0x6c>)
 80016b0:	f003 ff9a 	bl	80055e8 <sprintf_>
	LCD_DrawString(90, 130, time);
 80016b4:	463b      	mov	r3, r7
 80016b6:	461a      	mov	r2, r3
 80016b8:	2182      	movs	r1, #130	; 0x82
 80016ba:	205a      	movs	r0, #90	; 0x5a
 80016bc:	f001 f880 	bl	80027c0 <LCD_DrawString>
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	20000380 	.word	0x20000380
 80016cc:	91a2b3c5 	.word	0x91a2b3c5
 80016d0:	88888889 	.word	0x88888889
 80016d4:	0800cd78 	.word	0x0800cd78

080016d8 <UI_Config>:

void UI_Config(){
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 80016dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016e0:	22f0      	movs	r2, #240	; 0xf0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 ff73 	bl	80025d0 <LCD_Clear>
	LCD_DrawString(40, 50, "- Sync Time (Wifi)");
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <UI_Config+0x2c>)
 80016ec:	2132      	movs	r1, #50	; 0x32
 80016ee:	2028      	movs	r0, #40	; 0x28
 80016f0:	f001 f866 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(10, 280, "Back");
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <UI_Config+0x30>)
 80016f6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80016fa:	200a      	movs	r0, #10
 80016fc:	f001 f860 	bl	80027c0 <LCD_DrawString>
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0800cd90 	.word	0x0800cd90
 8001708:	0800cda4 	.word	0x0800cda4

0800170c <UI_Time_set>:

void UI_Time_set(){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8001710:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001714:	22f0      	movs	r2, #240	; 0xf0
 8001716:	2100      	movs	r1, #0
 8001718:	2000      	movs	r0, #0
 800171a:	f000 ff59 	bl	80025d0 <LCD_Clear>
	LCD_DrawString(90, 50, "Sync Time (Wifi)");
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <UI_Time_set+0x44>)
 8001720:	2132      	movs	r1, #50	; 0x32
 8001722:	205a      	movs	r0, #90	; 0x5a
 8001724:	f001 f84c 	bl	80027c0 <LCD_DrawString>
	LCD_DrawString(10, 280, "Back");
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <UI_Time_set+0x48>)
 800172a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800172e:	200a      	movs	r0, #10
 8001730:	f001 f846 	bl	80027c0 <LCD_DrawString>
	//Handle In esp8266.c
	LCD_Clear(0, 100, 250,150);
 8001734:	2396      	movs	r3, #150	; 0x96
 8001736:	22fa      	movs	r2, #250	; 0xfa
 8001738:	2164      	movs	r1, #100	; 0x64
 800173a:	2000      	movs	r0, #0
 800173c:	f000 ff48 	bl	80025d0 <LCD_Clear>
	LCD_DrawString(20, 100, "Resetting...");
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <UI_Time_set+0x4c>)
 8001742:	2164      	movs	r1, #100	; 0x64
 8001744:	2014      	movs	r0, #20
 8001746:	f001 f83b 	bl	80027c0 <LCD_DrawString>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	0800cdac 	.word	0x0800cdac
 8001754:	0800cda4 	.word	0x0800cda4
 8001758:	0800cdc0 	.word	0x0800cdc0

0800175c <alarm_update_next>:


/*
 * Call when Initialize or Times up
 */
void alarm_update_next(){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
	extern uint32_t next;
	extern DHT11_datastruct DHT11_data;

	uint32_t realtime_raw = RTC_raw();
 8001762:	f004 fb8f 	bl	8005e84 <RTC_raw>
 8001766:	6078      	str	r0, [r7, #4]
	uint8_t humid = DHT11_data.humid_int;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <alarm_update_next+0x6c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = DHT11_data.temp_int;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <alarm_update_next+0x6c>)
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	70bb      	strb	r3, [r7, #2]

	next = 2400 * (1 + (humid / 100)); //humidity
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	4a15      	ldr	r2, [pc, #84]	; (80017cc <alarm_update_next+0x70>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	b2db      	uxtb	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	461a      	mov	r2, r3
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <alarm_update_next+0x74>)
 800178e:	601a      	str	r2, [r3, #0]
	if (temp > 26) {
 8001790:	78bb      	ldrb	r3, [r7, #2]
 8001792:	2b1a      	cmp	r3, #26
 8001794:	d90e      	bls.n	80017b4 <alarm_update_next+0x58>
		next = next / (1 + (temp - 26) / 10); //temperature
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <alarm_update_next+0x74>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	78bb      	ldrb	r3, [r7, #2]
 800179c:	3b1a      	subs	r3, #26
 800179e:	490d      	ldr	r1, [pc, #52]	; (80017d4 <alarm_update_next+0x78>)
 80017a0:	fb81 0103 	smull	r0, r1, r1, r3
 80017a4:	1089      	asrs	r1, r1, #2
 80017a6:	17db      	asrs	r3, r3, #31
 80017a8:	1acb      	subs	r3, r1, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <alarm_update_next+0x74>)
 80017b2:	6013      	str	r3, [r2, #0]
	}
	next += realtime_raw;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <alarm_update_next+0x74>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <alarm_update_next+0x74>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000035c 	.word	0x2000035c
 80017cc:	51eb851f 	.word	0x51eb851f
 80017d0:	20000378 	.word	0x20000378
 80017d4:	66666667 	.word	0x66666667

080017d8 <alarm_update_last>:


void alarm_update_last(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	extern uint32_t lastdrink_raw;
	lastdrink_raw = RTC_raw();
 80017dc:	f004 fb52 	bl	8005e84 <RTC_raw>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4a02      	ldr	r2, [pc, #8]	; (80017ec <alarm_update_last+0x14>)
 80017e4:	6013      	str	r3, [r2, #0]
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000374 	.word	0x20000374

080017f0 <alarm_times_up>:

void alarm_times_up(){
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	extern uint8_t ALARM_TIMES_UP_RENDER_FLAG;
	extern const unsigned char * petStats;
	extern uint8_t darkmode_toggle;
	  ALARM_TIMES_UP_RENDER_FLAG = 1; // Prevent Keep Updating UI
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <alarm_times_up+0x28>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
	  if(!darkmode_toggle) petStats = water1;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <alarm_times_up+0x2c>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <alarm_times_up+0x1a>
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <alarm_times_up+0x30>)
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <alarm_times_up+0x34>)
 8001806:	601a      	str	r2, [r3, #0]
	  else petStats = water1_night;
}
 8001808:	e002      	b.n	8001810 <alarm_times_up+0x20>
	  else petStats = water1_night;
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <alarm_times_up+0x30>)
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <alarm_times_up+0x38>)
 800180e:	601a      	str	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000393 	.word	0x20000393
 800181c:	20000150 	.word	0x20000150
 8001820:	2000000c 	.word	0x2000000c
 8001824:	0804cc68 	.word	0x0804cc68
 8001828:	08053cf0 	.word	0x08053cf0

0800182c <alarm_release>:

void alarm_release(){ //When User Click Drink Water
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	alarm_update_next();
 8001830:	f7ff ff94 	bl	800175c <alarm_update_next>
	alarm_update_last();
 8001834:	f7ff ffd0 	bl	80017d8 <alarm_update_last>
	extern uint8_t ALARM_TIMES_UP_RENDER_FLAG;
	ALARM_TIMES_UP_RENDER_FLAG = 0;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <alarm_release+0x1c>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
	Beep_stop();
 800183e:	f000 f873 	bl	8001928 <Beep_stop>
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000393 	.word	0x20000393

0800184c <debug_alarm_set>:

void debug_alarm_set(){ //Alarm rings after 3 second (Pressing K2)
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	extern uint32_t next;

	uint32_t realtime_raw = RTC_raw();
 8001852:	f004 fb17 	bl	8005e84 <RTC_raw>
 8001856:	6078      	str	r0, [r7, #4]

	next = realtime_raw + 3;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3303      	adds	r3, #3
 800185c:	4a02      	ldr	r2, [pc, #8]	; (8001868 <debug_alarm_set+0x1c>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000378 	.word	0x20000378

0800186c <DEBUG_USART_Config>:
//WifiUart
UART_HandleTypeDef WifiUartHandle;

//配置与硬件底层无关内容：如串口协议，其中包括波特率，奇偶校验，停止位
void DEBUG_USART_Config()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    DebugUartHandle.Instance = DEBUG_USART;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <DEBUG_USART_Config+0x50>)
 8001874:	601a      	str	r2, [r3, #0]

    //波特率，8位字长，1停止位，无奇偶校验，无硬件控制，收发模式
    DebugUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
    DebugUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
    DebugUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    DebugUartHandle.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
    DebugUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
    DebugUartHandle.Init.Mode = UART_MODE_TX_RX;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 8001898:	220c      	movs	r2, #12
 800189a:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&DebugUartHandle);
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 800189e:	f008 fdd4 	bl	800a44a <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&DebugUartHandle,UART_IT_RXNE);
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <DEBUG_USART_Config+0x4c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0220 	orr.w	r2, r2, #32
 80018b0:	60da      	str	r2, [r3, #12]
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000d0 	.word	0x200000d0
 80018bc:	40013800 	.word	0x40013800

080018c0 <WIFI_USART_Config>:

//配置WiFi的通信的uart3
void WIFI_USART_Config()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    WifiUartHandle.Instance = WIFI_USART;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <WIFI_USART_Config+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <WIFI_USART_Config+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]

    WifiUartHandle.Init.BaudRate = DEBUG_USART_BAUDRATE;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <WIFI_USART_Config+0x4c>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
    WifiUartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <WIFI_USART_Config+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
    WifiUartHandle.Init.StopBits = UART_STOPBITS_1;//stm32f1xx_hal_uart.h
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <WIFI_USART_Config+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
    WifiUartHandle.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <WIFI_USART_Config+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
    WifiUartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <WIFI_USART_Config+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
    WifiUartHandle.Init.Mode = UART_MODE_TX_RX;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <WIFI_USART_Config+0x4c>)
 80018ec:	220c      	movs	r2, #12
 80018ee:	615a      	str	r2, [r3, #20]

    HAL_UART_Init(&WifiUartHandle);
 80018f0:	4806      	ldr	r0, [pc, #24]	; (800190c <WIFI_USART_Config+0x4c>)
 80018f2:	f008 fdaa 	bl	800a44a <HAL_UART_Init>

    //使能串口接收
    __HAL_UART_ENABLE_IT(&WifiUartHandle,UART_IT_RXNE);
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <WIFI_USART_Config+0x4c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <WIFI_USART_Config+0x4c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0220 	orr.w	r2, r2, #32
 8001904:	60da      	str	r2, [r3, #12]
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000110 	.word	0x20000110
 8001910:	40004800 	.word	0x40004800

08001914 <Beep_start>:

void Buzzer_INIT(){
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
}

void Beep_start(){
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim1;

	//Start Beeping
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001918:	2100      	movs	r1, #0
 800191a:	4802      	ldr	r0, [pc, #8]	; (8001924 <Beep_start+0x10>)
 800191c:	f007 fe6c 	bl	80095f8 <HAL_TIM_PWM_Start>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000198 	.word	0x20000198

08001928 <Beep_stop>:

void Beep_stop(){
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim1;
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800192c:	2100      	movs	r1, #0
 800192e:	4802      	ldr	r0, [pc, #8]	; (8001938 <Beep_stop+0x10>)
 8001930:	f007 fe96 	bl	8009660 <HAL_TIM_PWM_Stop>
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000198 	.word	0x20000198

0800193c <Beep_set>:

void Beep_set(uint16_t prescaler, uint16_t period, uint16_t pulse){
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
 8001946:	460b      	mov	r3, r1
 8001948:	80bb      	strh	r3, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	807b      	strh	r3, [r7, #2]
	extern TIM_HandleTypeDef htim1;
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800194e:	2100      	movs	r1, #0
 8001950:	4812      	ldr	r0, [pc, #72]	; (800199c <Beep_set+0x60>)
 8001952:	f007 fe85 	bl	8009660 <HAL_TIM_PWM_Stop>

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001956:	f107 030c 	add.w	r3, r7, #12
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196a:	2360      	movs	r3, #96	; 0x60
 800196c:	60fb      	str	r3, [r7, #12]

	//Change Sound (PWM)
	htim1.Init.Prescaler = 63999;// E.g. If Prescaler = 63999,  72M Hz / (63999 + 1) = 1M Hz
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <Beep_set+0x60>)
 8001970:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001974:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = 1124;// (One Period + 1) Per Second
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <Beep_set+0x60>)
 8001978:	f240 4264 	movw	r2, #1124	; 0x464
 800197c:	60da      	str	r2, [r3, #12]
	sConfigOC.Pulse = 562;// PWM = Pulse/Period
 800197e:	f240 2332 	movw	r3, #562	; 0x232
 8001982:	613b      	str	r3, [r7, #16]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	4803      	ldr	r0, [pc, #12]	; (800199c <Beep_set+0x60>)
 800198e:	f007 ffc7 	bl	8009920 <HAL_TIM_PWM_ConfigChannel>
}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	; 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000198 	.word	0x20000198

080019a0 <DHT11_IO_OUT>:
#include "dht11.h"
#include "printf.h"
#include "timer.h"

void DHT11_IO_OUT(void) //Set Pin As Output
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019a6:	463b      	mov	r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019b2:	2340      	movs	r3, #64	; 0x40
 80019b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c2:	463b      	mov	r3, r7
 80019c4:	4619      	mov	r1, r3
 80019c6:	4803      	ldr	r0, [pc, #12]	; (80019d4 <DHT11_IO_OUT+0x34>)
 80019c8:	f006 fbee 	bl	80081a8 <HAL_GPIO_Init>
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40011800 	.word	0x40011800

080019d8 <DHT11_IO_IN>:

void DHT11_IO_IN(void) //Set Pin As Input
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019de:	463b      	mov	r3, r7
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019ea:	2340      	movs	r3, #64	; 0x40
 80019ec:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f6:	463b      	mov	r3, r7
 80019f8:	4619      	mov	r1, r3
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <DHT11_IO_IN+0x30>)
 80019fc:	f006 fbd4 	bl	80081a8 <HAL_GPIO_Init>
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40011800 	.word	0x40011800

08001a0c <DHT11_RST>:

void DHT11_RST(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	DHT11_IO_OUT();
 8001a10:	f7ff ffc6 	bl	80019a0 <DHT11_IO_OUT>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2140      	movs	r1, #64	; 0x40
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <DHT11_RST+0x2c>)
 8001a1a:	f006 fd74 	bl	8008506 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001a1e:	2014      	movs	r0, #20
 8001a20:	f005 fcce 	bl	80073c0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	2140      	movs	r1, #64	; 0x40
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <DHT11_RST+0x2c>)
 8001a2a:	f006 fd6c 	bl	8008506 <HAL_GPIO_WritePin>
	delay_us(30);
 8001a2e:	201e      	movs	r0, #30
 8001a30:	f004 fdca 	bl	80065c8 <delay_us>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40011800 	.word	0x40011800

08001a3c <Dht11_Check>:

uint8_t Dht11_Check(){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	71fb      	strb	r3, [r7, #7]
	DHT11_IO_IN();
 8001a46:	f7ff ffc7 	bl	80019d8 <DHT11_IO_IN>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001a4a:	e005      	b.n	8001a58 <Dht11_Check+0x1c>
		++retry;
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f004 fdb8 	bl	80065c8 <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001a58:	2140      	movs	r1, #64	; 0x40
 8001a5a:	4815      	ldr	r0, [pc, #84]	; (8001ab0 <Dht11_Check+0x74>)
 8001a5c:	f006 fd3c 	bl	80084d8 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <Dht11_Check+0x30>
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b63      	cmp	r3, #99	; 0x63
 8001a6a:	d9ef      	bls.n	8001a4c <Dht11_Check+0x10>
	}
	if(retry>=100)return 1; else retry=0;
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b63      	cmp	r3, #99	; 0x63
 8001a70:	d901      	bls.n	8001a76 <Dht11_Check+0x3a>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e018      	b.n	8001aa8 <Dht11_Check+0x6c>
 8001a76:	2300      	movs	r3, #0
 8001a78:	71fb      	strb	r3, [r7, #7]
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001a7a:	e005      	b.n	8001a88 <Dht11_Check+0x4c>
		++retry;
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f004 fda0 	bl	80065c8 <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 8001a88:	2140      	movs	r1, #64	; 0x40
 8001a8a:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <Dht11_Check+0x74>)
 8001a8c:	f006 fd24 	bl	80084d8 <HAL_GPIO_ReadPin>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <Dht11_Check+0x60>
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b63      	cmp	r3, #99	; 0x63
 8001a9a:	d9ef      	bls.n	8001a7c <Dht11_Check+0x40>
	}
	if(retry>=100)return 1;
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b63      	cmp	r3, #99	; 0x63
 8001aa0:	d901      	bls.n	8001aa6 <Dht11_Check+0x6a>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <Dht11_Check+0x6c>
	return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40011800 	.word	0x40011800

08001ab4 <DHT11_Init>:

uint8_t DHT11_Init(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	DHT11_RST();
 8001ab8:	f7ff ffa8 	bl	8001a0c <DHT11_RST>
	return Dht11_Check();
 8001abc:	f7ff ffbe 	bl	8001a3c <Dht11_Check>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	71fb      	strb	r3, [r7, #7]
	//Wait For Last Set signal end
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001ad2:	e005      	b.n	8001ae0 <DHT11_ReadBit+0x18>
		++retry;
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f004 fd74 	bl	80065c8 <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001ae0:	2140      	movs	r1, #64	; 0x40
 8001ae2:	4816      	ldr	r0, [pc, #88]	; (8001b3c <DHT11_ReadBit+0x74>)
 8001ae4:	f006 fcf8 	bl	80084d8 <HAL_GPIO_ReadPin>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <DHT11_ReadBit+0x2c>
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b63      	cmp	r3, #99	; 0x63
 8001af2:	d9ef      	bls.n	8001ad4 <DHT11_ReadBit+0xc>
	}
	retry = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	71fb      	strb	r3, [r7, #7]
	//Wait For New Set Signal Begin
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001af8:	e005      	b.n	8001b06 <DHT11_ReadBit+0x3e>
		++retry;
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	3301      	adds	r3, #1
 8001afe:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f004 fd61 	bl	80065c8 <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001b06:	2140      	movs	r1, #64	; 0x40
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <DHT11_ReadBit+0x74>)
 8001b0a:	f006 fce5 	bl	80084d8 <HAL_GPIO_ReadPin>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <DHT11_ReadBit+0x52>
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2b63      	cmp	r3, #99	; 0x63
 8001b18:	d9ef      	bls.n	8001afa <DHT11_ReadBit+0x32>
	}
	//0: 26-28us   1:70us
	delay_us(40);
 8001b1a:	2028      	movs	r0, #40	; 0x28
 8001b1c:	f004 fd54 	bl	80065c8 <delay_us>
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)) return 1; else return 0;
 8001b20:	2140      	movs	r1, #64	; 0x40
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <DHT11_ReadBit+0x74>)
 8001b24:	f006 fcd8 	bl	80084d8 <HAL_GPIO_ReadPin>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <DHT11_ReadBit+0x6a>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <DHT11_ReadBit+0x6c>
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40011800 	.word	0x40011800

08001b40 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
	uint8_t i,dat;
	dat=0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	71fb      	strb	r3, [r7, #7]
 8001b4e:	e00c      	b.n	8001b6a <DHT11_ReadByte+0x2a>
		dat<<=1;
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	71bb      	strb	r3, [r7, #6]
		dat|=DHT11_ReadBit();
 8001b56:	f7ff ffb7 	bl	8001ac8 <DHT11_ReadBit>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	3301      	adds	r3, #1
 8001b68:	71fb      	strb	r3, [r7, #7]
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b07      	cmp	r3, #7
 8001b6e:	d9ef      	bls.n	8001b50 <DHT11_ReadByte+0x10>
	}
	return dat;
 8001b70:	79bb      	ldrb	r3, [r7, #6]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <DHT11_ReadData>:


uint8_t DHT11_ReadData(DHT11_datastruct *ds){
 8001b7a:	b590      	push	{r4, r7, lr}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
	uint8_t buf[5];
	uint8_t i;
	//Reset and Check
	if(DHT11_Init()==0){
 8001b82:	f7ff ff97 	bl	8001ab4 <DHT11_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d133      	bne.n	8001bf4 <DHT11_ReadData+0x7a>
		for(i=0;i<5;++i){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e00c      	b.n	8001bac <DHT11_ReadData+0x32>
			buf[i]=DHT11_ReadByte();
 8001b92:	7bfc      	ldrb	r4, [r7, #15]
 8001b94:	f7ff ffd4 	bl	8001b40 <DHT11_ReadByte>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f104 0310 	add.w	r3, r4, #16
 8001ba0:	443b      	add	r3, r7
 8001ba2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(i=0;i<5;++i){
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d9ef      	bls.n	8001b92 <DHT11_ReadData+0x18>
		}
	//i=0,1  = humidity  00.11
	//i=2,3  = temperature 22.33
	//i=4    = Check Sum 0+1+2+3==4
		ds->humid_int = buf[0];
 8001bb2:	7a3a      	ldrb	r2, [r7, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	701a      	strb	r2, [r3, #0]
		ds->humid_dec = buf[1];
 8001bb8:	7a7a      	ldrb	r2, [r7, #9]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	705a      	strb	r2, [r3, #1]
		ds->temp_int = buf[2];
 8001bbe:	7aba      	ldrb	r2, [r7, #10]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	709a      	strb	r2, [r3, #2]
		ds->temp_dec = buf[3];
 8001bc4:	7afa      	ldrb	r2, [r7, #11]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	70da      	strb	r2, [r3, #3]
		ds->check_sum = buf[4];
 8001bca:	7b3a      	ldrb	r2, [r7, #12]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	711a      	strb	r2, [r3, #4]
		if(ds->humid_int + ds->humid_dec + ds->temp_int + ds->temp_dec != ds->check_sum){
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	785b      	ldrb	r3, [r3, #1]
 8001bda:	4413      	add	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	7892      	ldrb	r2, [r2, #2]
 8001be0:	4413      	add	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	78d2      	ldrb	r2, [r2, #3]
 8001be6:	4413      	add	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	7912      	ldrb	r2, [r2, #4]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <DHT11_ReadData+0x7e>
			//Wrong Data
			return 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e002      	b.n	8001bfa <DHT11_ReadData+0x80>
		}
	}else return 1;//Success
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <DHT11_ReadData+0x80>
	return 0;//Not Responding
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}
	...

08001c04 <ESP8266_GPIO_Config>:
#include "ring_buffer.h"
#include "rtc.h"
uint8_t esp8266_step_flag = 9;

void ESP8266_GPIO_Config()
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
    //GPIO结构体
    GPIO_InitTypeDef  GPIO_InitStruct;
    //开启外设时钟
    ESP8266_CH_PD_CLK_ENABLE();
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <ESP8266_GPIO_Config+0x6c>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <ESP8266_GPIO_Config+0x6c>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <ESP8266_GPIO_Config+0x6c>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
    ESP8266_RST_CLK_ENABLE();
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <ESP8266_GPIO_Config+0x6c>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <ESP8266_GPIO_Config+0x6c>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6193      	str	r3, [r2, #24]
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <ESP8266_GPIO_Config+0x6c>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = ESP8266_CH_PD_PIN;
 8001c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ESP8266_CH_PD_PORT,&GPIO_InitStruct);
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4809      	ldr	r0, [pc, #36]	; (8001c74 <ESP8266_GPIO_Config+0x70>)
 8001c50:	f006 faaa 	bl	80081a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP8266_RST_PIN;
 8001c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c58:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(ESP8266_RST_PORT,&GPIO_InitStruct);
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <ESP8266_GPIO_Config+0x70>)
 8001c62:	f006 faa1 	bl	80081a8 <HAL_GPIO_Init>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010c00 	.word	0x40010c00

08001c78 <ESP8266_RESET>:


//esp8266初始化 main调用
void ESP8266_RESET(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
    ESP8266_GPIO_Config();
 8001c7c:	f7ff ffc2 	bl	8001c04 <ESP8266_GPIO_Config>
    WIFI_USART_Config();
 8001c80:	f7ff fe1e 	bl	80018c0 <WIFI_USART_Config>

    ESP8266_CH_PD_DISABLE();
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <ESP8266_RESET+0x48>)
 8001c8c:	f006 fc3b 	bl	8008506 <HAL_GPIO_WritePin>
    ESP8266_CH_PD_DISABLE();
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c96:	480a      	ldr	r0, [pc, #40]	; (8001cc0 <ESP8266_RESET+0x48>)
 8001c98:	f006 fc35 	bl	8008506 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8001c9c:	2064      	movs	r0, #100	; 0x64
 8001c9e:	f005 fb8f 	bl	80073c0 <HAL_Delay>

    ESP8266_CH_PD_ENABLE();
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <ESP8266_RESET+0x48>)
 8001caa:	f006 fc2c 	bl	8008506 <HAL_GPIO_WritePin>
    ESP8266_RST_ENABLE();
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <ESP8266_RESET+0x48>)
 8001cb6:	f006 fc26 	bl	8008506 <HAL_GPIO_WritePin>
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40010c00 	.word	0x40010c00

08001cc4 <esp8266_cmd_reset>:


void esp8266_cmd_reset(){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001cc8:	f003 fd1e 	bl	8005708 <IsDataAvailable>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00f      	beq.n	8001cf2 <esp8266_cmd_reset+0x2e>
	if(!Wait_for("ready")) return;
 8001cd2:	480a      	ldr	r0, [pc, #40]	; (8001cfc <esp8266_cmd_reset+0x38>)
 8001cd4:	f003 fd82 	bl	80057dc <Wait_for>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <esp8266_cmd_reset+0x32>
	//HAL_Delay(100);
	printf("AT+RST\r\n");
 8001cde:	4808      	ldr	r0, [pc, #32]	; (8001d00 <esp8266_cmd_reset+0x3c>)
 8001ce0:	f003 fc66 	bl	80055b0 <printf_>
	++esp8266_step_flag;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <esp8266_cmd_reset+0x40>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <esp8266_cmd_reset+0x40>)
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e002      	b.n	8001cf8 <esp8266_cmd_reset+0x34>
	if(!IsDataAvailable()) return;
 8001cf2:	bf00      	nop
 8001cf4:	e000      	b.n	8001cf8 <esp8266_cmd_reset+0x34>
	if(!Wait_for("ready")) return;
 8001cf6:	bf00      	nop
}
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	0800cdd0 	.word	0x0800cdd0
 8001d00:	0800cdd8 	.word	0x0800cdd8
 8001d04:	20000000 	.word	0x20000000

08001d08 <esp8266_cmd_set_station>:

void esp8266_cmd_set_station(){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001d0c:	f003 fcfc 	bl	8005708 <IsDataAvailable>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00f      	beq.n	8001d36 <esp8266_cmd_set_station+0x2e>
	if(!Wait_for("ready")) return;
 8001d16:	480a      	ldr	r0, [pc, #40]	; (8001d40 <esp8266_cmd_set_station+0x38>)
 8001d18:	f003 fd60 	bl	80057dc <Wait_for>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <esp8266_cmd_set_station+0x32>
	//HAL_Delay(100);
	printf("AT+CWMODE=1\r\n");
 8001d22:	4808      	ldr	r0, [pc, #32]	; (8001d44 <esp8266_cmd_set_station+0x3c>)
 8001d24:	f003 fc44 	bl	80055b0 <printf_>
	++esp8266_step_flag;
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <esp8266_cmd_set_station+0x40>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <esp8266_cmd_set_station+0x40>)
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e002      	b.n	8001d3c <esp8266_cmd_set_station+0x34>
	if(!IsDataAvailable()) return;
 8001d36:	bf00      	nop
 8001d38:	e000      	b.n	8001d3c <esp8266_cmd_set_station+0x34>
	if(!Wait_for("ready")) return;
 8001d3a:	bf00      	nop
}
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	0800cdd0 	.word	0x0800cdd0
 8001d44:	0800cde4 	.word	0x0800cde4
 8001d48:	20000000 	.word	0x20000000

08001d4c <esp8266_cmd_connectWifi>:

void esp8266_cmd_connectWifi(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001d50:	f003 fcda 	bl	8005708 <IsDataAvailable>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d014      	beq.n	8001d84 <esp8266_cmd_connectWifi+0x38>
	if(!Wait_for("OK")) return;
 8001d5a:	480c      	ldr	r0, [pc, #48]	; (8001d8c <esp8266_cmd_connectWifi+0x40>)
 8001d5c:	f003 fd3e 	bl	80057dc <Wait_for>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d010      	beq.n	8001d88 <esp8266_cmd_connectWifi+0x3c>
	//HAL_Delay(100);
	extern const char* ssid;
    extern const char* wifi_password;
	printf("AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,wifi_password);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <esp8266_cmd_connectWifi+0x44>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <esp8266_cmd_connectWifi+0x48>)
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4809      	ldr	r0, [pc, #36]	; (8001d98 <esp8266_cmd_connectWifi+0x4c>)
 8001d72:	f003 fc1d 	bl	80055b0 <printf_>
	++esp8266_step_flag;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <esp8266_cmd_connectWifi+0x50>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <esp8266_cmd_connectWifi+0x50>)
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e002      	b.n	8001d8a <esp8266_cmd_connectWifi+0x3e>
	if(!IsDataAvailable()) return;
 8001d84:	bf00      	nop
 8001d86:	e000      	b.n	8001d8a <esp8266_cmd_connectWifi+0x3e>
	if(!Wait_for("OK")) return;
 8001d88:	bf00      	nop
}
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	0800cdf4 	.word	0x0800cdf4
 8001d90:	20000004 	.word	0x20000004
 8001d94:	20000008 	.word	0x20000008
 8001d98:	0800cdf8 	.word	0x0800cdf8
 8001d9c:	20000000 	.word	0x20000000

08001da0 <esp8266_cmd_tcp>:

void esp8266_cmd_tcp(){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001da4:	f003 fcb0 	bl	8005708 <IsDataAvailable>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00f      	beq.n	8001dce <esp8266_cmd_tcp+0x2e>
	if(!Wait_for("OK")) return;
 8001dae:	480a      	ldr	r0, [pc, #40]	; (8001dd8 <esp8266_cmd_tcp+0x38>)
 8001db0:	f003 fd14 	bl	80057dc <Wait_for>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <esp8266_cmd_tcp+0x32>
	//HAL_Delay(100);
	printf("AT+CIPSTART=\"TCP\",\"marsohk.pythonanywhere.com\",80\r\n");
 8001dba:	4808      	ldr	r0, [pc, #32]	; (8001ddc <esp8266_cmd_tcp+0x3c>)
 8001dbc:	f003 fbf8 	bl	80055b0 <printf_>
	++esp8266_step_flag;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <esp8266_cmd_tcp+0x40>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <esp8266_cmd_tcp+0x40>)
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e002      	b.n	8001dd4 <esp8266_cmd_tcp+0x34>
	if(!IsDataAvailable()) return;
 8001dce:	bf00      	nop
 8001dd0:	e000      	b.n	8001dd4 <esp8266_cmd_tcp+0x34>
	if(!Wait_for("OK")) return;
 8001dd2:	bf00      	nop
}
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	0800cdf4 	.word	0x0800cdf4
 8001ddc:	0800ce10 	.word	0x0800ce10
 8001de0:	20000000 	.word	0x20000000

08001de4 <esp8266_cmd_trans_mode>:

void esp8266_cmd_trans_mode(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001de8:	f003 fc8e 	bl	8005708 <IsDataAvailable>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00f      	beq.n	8001e12 <esp8266_cmd_trans_mode+0x2e>
	if(!Wait_for("OK")) return;
 8001df2:	480a      	ldr	r0, [pc, #40]	; (8001e1c <esp8266_cmd_trans_mode+0x38>)
 8001df4:	f003 fcf2 	bl	80057dc <Wait_for>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <esp8266_cmd_trans_mode+0x32>
	//HAL_Delay(100);
	printf("AT+CIPMODE=1\r\n");
 8001dfe:	4808      	ldr	r0, [pc, #32]	; (8001e20 <esp8266_cmd_trans_mode+0x3c>)
 8001e00:	f003 fbd6 	bl	80055b0 <printf_>
	++esp8266_step_flag;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <esp8266_cmd_trans_mode+0x40>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <esp8266_cmd_trans_mode+0x40>)
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e002      	b.n	8001e18 <esp8266_cmd_trans_mode+0x34>
	if(!IsDataAvailable()) return;
 8001e12:	bf00      	nop
 8001e14:	e000      	b.n	8001e18 <esp8266_cmd_trans_mode+0x34>
	if(!Wait_for("OK")) return;
 8001e16:	bf00      	nop
}
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	0800cdf4 	.word	0x0800cdf4
 8001e20:	0800ce44 	.word	0x0800ce44
 8001e24:	20000000 	.word	0x20000000

08001e28 <esp8266_cmd_send_request>:


void esp8266_cmd_send_request(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001e2c:	f003 fc6c 	bl	8005708 <IsDataAvailable>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00f      	beq.n	8001e56 <esp8266_cmd_send_request+0x2e>
	if(!Wait_for("OK")) return;
 8001e36:	480a      	ldr	r0, [pc, #40]	; (8001e60 <esp8266_cmd_send_request+0x38>)
 8001e38:	f003 fcd0 	bl	80057dc <Wait_for>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <esp8266_cmd_send_request+0x32>
	//HAL_Delay(100);
	printf("AT+CIPSEND\r\n");
 8001e42:	4808      	ldr	r0, [pc, #32]	; (8001e64 <esp8266_cmd_send_request+0x3c>)
 8001e44:	f003 fbb4 	bl	80055b0 <printf_>
	++esp8266_step_flag;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <esp8266_cmd_send_request+0x40>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <esp8266_cmd_send_request+0x40>)
 8001e52:	701a      	strb	r2, [r3, #0]
 8001e54:	e002      	b.n	8001e5c <esp8266_cmd_send_request+0x34>
	if(!IsDataAvailable()) return;
 8001e56:	bf00      	nop
 8001e58:	e000      	b.n	8001e5c <esp8266_cmd_send_request+0x34>
	if(!Wait_for("OK")) return;
 8001e5a:	bf00      	nop
}
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	0800cdf4 	.word	0x0800cdf4
 8001e64:	0800ce54 	.word	0x0800ce54
 8001e68:	20000000 	.word	0x20000000

08001e6c <esp8266_cmd_fill_time_request>:

void esp8266_cmd_fill_time_request(){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001e70:	f003 fc4a 	bl	8005708 <IsDataAvailable>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00f      	beq.n	8001e9a <esp8266_cmd_fill_time_request+0x2e>
	if(!Wait_for("OK")) return;
 8001e7a:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <esp8266_cmd_fill_time_request+0x38>)
 8001e7c:	f003 fcae 	bl	80057dc <Wait_for>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <esp8266_cmd_fill_time_request+0x32>
	//HAL_Delay(100);
	printf("GET /date HTTP/1.1\r\nHost: marsohk.pythonanywhere.com\r\n\r\n");
 8001e86:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <esp8266_cmd_fill_time_request+0x3c>)
 8001e88:	f003 fb92 	bl	80055b0 <printf_>
	++esp8266_step_flag;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <esp8266_cmd_fill_time_request+0x40>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <esp8266_cmd_fill_time_request+0x40>)
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e002      	b.n	8001ea0 <esp8266_cmd_fill_time_request+0x34>
	if(!IsDataAvailable()) return;
 8001e9a:	bf00      	nop
 8001e9c:	e000      	b.n	8001ea0 <esp8266_cmd_fill_time_request+0x34>
	if(!Wait_for("OK")) return;
 8001e9e:	bf00      	nop
}
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	0800cdf4 	.word	0x0800cdf4
 8001ea8:	0800ce64 	.word	0x0800ce64
 8001eac:	20000000 	.word	0x20000000

08001eb0 <esp8266_cmd_fill_water_request>:

void esp8266_cmd_fill_water_request(){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001eb4:	f003 fc28 	bl	8005708 <IsDataAvailable>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00f      	beq.n	8001ede <esp8266_cmd_fill_water_request+0x2e>
	if(!Wait_for("OK")) return;
 8001ebe:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <esp8266_cmd_fill_water_request+0x38>)
 8001ec0:	f003 fc8c 	bl	80057dc <Wait_for>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <esp8266_cmd_fill_water_request+0x32>
	printf("GET /water?set=1 HTTP/1.1\r\nHost: marsohk.pythonanywhere.com\r\n\r\n");
 8001eca:	4808      	ldr	r0, [pc, #32]	; (8001eec <esp8266_cmd_fill_water_request+0x3c>)
 8001ecc:	f003 fb70 	bl	80055b0 <printf_>
	++esp8266_step_flag;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <esp8266_cmd_fill_water_request+0x40>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <esp8266_cmd_fill_water_request+0x40>)
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e002      	b.n	8001ee4 <esp8266_cmd_fill_water_request+0x34>
	if(!IsDataAvailable()) return;
 8001ede:	bf00      	nop
 8001ee0:	e000      	b.n	8001ee4 <esp8266_cmd_fill_water_request+0x34>
	if(!Wait_for("OK")) return;
 8001ee2:	bf00      	nop
}
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	0800cdf4 	.word	0x0800cdf4
 8001eec:	0800cea0 	.word	0x0800cea0
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <esp8266_cmd_fill_exercise_request>:

void esp8266_cmd_fill_exercise_request(){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001ef8:	f003 fc06 	bl	8005708 <IsDataAvailable>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d012      	beq.n	8001f28 <esp8266_cmd_fill_exercise_request+0x34>
	if(!Wait_for("OK")) return;
 8001f02:	480b      	ldr	r0, [pc, #44]	; (8001f30 <esp8266_cmd_fill_exercise_request+0x3c>)
 8001f04:	f003 fc6a 	bl	80057dc <Wait_for>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00e      	beq.n	8001f2c <esp8266_cmd_fill_exercise_request+0x38>
	extern uint32_t exertime_fixed;
	printf("GET /exercise?time=%d HTTP/1.1\r\nHost: marsohk.pythonanywhere.com\r\n\r\n", exertime_fixed);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <esp8266_cmd_fill_exercise_request+0x40>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4619      	mov	r1, r3
 8001f14:	4808      	ldr	r0, [pc, #32]	; (8001f38 <esp8266_cmd_fill_exercise_request+0x44>)
 8001f16:	f003 fb4b 	bl	80055b0 <printf_>
	++esp8266_step_flag;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <esp8266_cmd_fill_exercise_request+0x48>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <esp8266_cmd_fill_exercise_request+0x48>)
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e002      	b.n	8001f2e <esp8266_cmd_fill_exercise_request+0x3a>
	if(!IsDataAvailable()) return;
 8001f28:	bf00      	nop
 8001f2a:	e000      	b.n	8001f2e <esp8266_cmd_fill_exercise_request+0x3a>
	if(!Wait_for("OK")) return;
 8001f2c:	bf00      	nop
}
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	0800cdf4 	.word	0x0800cdf4
 8001f34:	20000384 	.word	0x20000384
 8001f38:	0800cee0 	.word	0x0800cee0
 8001f3c:	20000000 	.word	0x20000000

08001f40 <esp8266_get_time_buffer>:

void esp8266_get_time_buffer(){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001f44:	f003 fbe0 	bl	8005708 <IsDataAvailable>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d017      	beq.n	8001f7e <esp8266_get_time_buffer+0x3e>
	if(!Wait_for("OK")) return;
 8001f4e:	480e      	ldr	r0, [pc, #56]	; (8001f88 <esp8266_get_time_buffer+0x48>)
 8001f50:	f003 fc44 	bl	80057dc <Wait_for>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d013      	beq.n	8001f82 <esp8266_get_time_buffer+0x42>
	HAL_Delay(100);
 8001f5a:	2064      	movs	r0, #100	; 0x64
 8001f5c:	f005 fa30 	bl	80073c0 <HAL_Delay>
	extern char USART_DATE_BUFFER[15];

	//LCD_Clear(0, 100, 250,150);
	//LCD_DrawString(20, 100, "Done...");
	Wait_for("DATA:");
 8001f60:	480a      	ldr	r0, [pc, #40]	; (8001f8c <esp8266_get_time_buffer+0x4c>)
 8001f62:	f003 fc3b 	bl	80057dc <Wait_for>
	Get_after("DATA:",15, USART_DATE_BUFFER);
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <esp8266_get_time_buffer+0x50>)
 8001f68:	210f      	movs	r1, #15
 8001f6a:	4808      	ldr	r0, [pc, #32]	; (8001f8c <esp8266_get_time_buffer+0x4c>)
 8001f6c:	f003 fc02 	bl	8005774 <Get_after>

    ++esp8266_step_flag;//Done
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <esp8266_get_time_buffer+0x54>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <esp8266_get_time_buffer+0x54>)
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e002      	b.n	8001f84 <esp8266_get_time_buffer+0x44>
	if(!IsDataAvailable()) return;
 8001f7e:	bf00      	nop
 8001f80:	e000      	b.n	8001f84 <esp8266_get_time_buffer+0x44>
	if(!Wait_for("OK")) return;
 8001f82:	bf00      	nop
}
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0800cdf4 	.word	0x0800cdf4
 8001f8c:	0800cf28 	.word	0x0800cf28
 8001f90:	20000398 	.word	0x20000398
 8001f94:	20000000 	.word	0x20000000

08001f98 <esp8266_water_done>:

void esp8266_water_done(){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001f9c:	f003 fbb4 	bl	8005708 <IsDataAvailable>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <esp8266_water_done+0x22>
	if(!Wait_for("Drink")) return;
 8001fa6:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <esp8266_water_done+0x2c>)
 8001fa8:	f003 fc18 	bl	80057dc <Wait_for>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <esp8266_water_done+0x26>
	extern uint8_t USART_WATER_FLAG;
	USART_WATER_FLAG = 0;
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <esp8266_water_done+0x30>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	e002      	b.n	8001fc0 <esp8266_water_done+0x28>
	if(!IsDataAvailable()) return;
 8001fba:	bf00      	nop
 8001fbc:	e000      	b.n	8001fc0 <esp8266_water_done+0x28>
	if(!Wait_for("Drink")) return;
 8001fbe:	bf00      	nop
}
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	0800cf30 	.word	0x0800cf30
 8001fc8:	20000391 	.word	0x20000391

08001fcc <esp8266_exercise_done>:

void esp8266_exercise_done(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	if(!IsDataAvailable()) return;
 8001fd0:	f003 fb9a 	bl	8005708 <IsDataAvailable>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <esp8266_exercise_done+0x22>
	if(!Wait_for("Exercise")) return;
 8001fda:	4807      	ldr	r0, [pc, #28]	; (8001ff8 <esp8266_exercise_done+0x2c>)
 8001fdc:	f003 fbfe 	bl	80057dc <Wait_for>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <esp8266_exercise_done+0x26>
	extern uint8_t USART_EXERCISE_FLAG;
	USART_EXERCISE_FLAG = 0;
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <esp8266_exercise_done+0x30>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	e002      	b.n	8001ff4 <esp8266_exercise_done+0x28>
	if(!IsDataAvailable()) return;
 8001fee:	bf00      	nop
 8001ff0:	e000      	b.n	8001ff4 <esp8266_exercise_done+0x28>
	if(!Wait_for("Exercise")) return;
 8001ff2:	bf00      	nop
}
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0800cf38 	.word	0x0800cf38
 8001ffc:	20000392 	.word	0x20000392

08002000 <esp8266_get_time>:

void esp8266_get_time(){
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	switch (esp8266_step_flag){
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <esp8266_get_time+0xa4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d849      	bhi.n	80020a0 <esp8266_get_time+0xa0>
 800200c:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <esp8266_get_time+0x14>)
 800200e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002012:	bf00      	nop
 8002014:	08002095 	.word	0x08002095
 8002018:	08002039 	.word	0x08002039
 800201c:	0800203f 	.word	0x0800203f
 8002020:	08002045 	.word	0x08002045
 8002024:	08002061 	.word	0x08002061
 8002028:	08002067 	.word	0x08002067
 800202c:	0800206d 	.word	0x0800206d
 8002030:	08002089 	.word	0x08002089
 8002034:	0800208f 	.word	0x0800208f
		case 1://Reset
			esp8266_cmd_reset();
 8002038:	f7ff fe44 	bl	8001cc4 <esp8266_cmd_reset>
			break;
 800203c:	e030      	b.n	80020a0 <esp8266_get_time+0xa0>
		case 2://Set Station
			esp8266_cmd_set_station();
 800203e:	f7ff fe63 	bl	8001d08 <esp8266_cmd_set_station>
			break;
 8002042:	e02d      	b.n	80020a0 <esp8266_get_time+0xa0>
		case 3://Connect Wifi
			esp8266_cmd_connectWifi();
 8002044:	f7ff fe82 	bl	8001d4c <esp8266_cmd_connectWifi>
			LCD_Clear(0, 100, 250,150);
 8002048:	2396      	movs	r3, #150	; 0x96
 800204a:	22fa      	movs	r2, #250	; 0xfa
 800204c:	2164      	movs	r1, #100	; 0x64
 800204e:	2000      	movs	r0, #0
 8002050:	f000 fabe 	bl	80025d0 <LCD_Clear>
			LCD_DrawString(20, 100, "Connecting To Wifi...");
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <esp8266_get_time+0xa8>)
 8002056:	2164      	movs	r1, #100	; 0x64
 8002058:	2014      	movs	r0, #20
 800205a:	f000 fbb1 	bl	80027c0 <LCD_DrawString>
			break;
 800205e:	e01f      	b.n	80020a0 <esp8266_get_time+0xa0>
		case 4://Set TCP
			esp8266_cmd_tcp();
 8002060:	f7ff fe9e 	bl	8001da0 <esp8266_cmd_tcp>
			break;
 8002064:	e01c      	b.n	80020a0 <esp8266_get_time+0xa0>
		case 5://SET Trans mode
			esp8266_cmd_trans_mode();
 8002066:	f7ff febd 	bl	8001de4 <esp8266_cmd_trans_mode>
			break;
 800206a:	e019      	b.n	80020a0 <esp8266_get_time+0xa0>
		case 6://Send Request
			esp8266_cmd_send_request();
 800206c:	f7ff fedc 	bl	8001e28 <esp8266_cmd_send_request>
			LCD_Clear(0, 100, 250,150);
 8002070:	2396      	movs	r3, #150	; 0x96
 8002072:	22fa      	movs	r2, #250	; 0xfa
 8002074:	2164      	movs	r1, #100	; 0x64
 8002076:	2000      	movs	r0, #0
 8002078:	f000 faaa 	bl	80025d0 <LCD_Clear>
			LCD_DrawString(20, 100, "Sending Request To Server..");
 800207c:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <esp8266_get_time+0xac>)
 800207e:	2164      	movs	r1, #100	; 0x64
 8002080:	2014      	movs	r0, #20
 8002082:	f000 fb9d 	bl	80027c0 <LCD_DrawString>
			break;
 8002086:	e00b      	b.n	80020a0 <esp8266_get_time+0xa0>
		case 7://Fill Request
			esp8266_cmd_fill_time_request();
 8002088:	f7ff fef0 	bl	8001e6c <esp8266_cmd_fill_time_request>
			break;
 800208c:	e008      	b.n	80020a0 <esp8266_get_time+0xa0>
		case 8://Fill Data to buffer
			esp8266_get_time_buffer();
 800208e:	f7ff ff57 	bl	8001f40 <esp8266_get_time_buffer>
			break;
 8002092:	e005      	b.n	80020a0 <esp8266_get_time+0xa0>
		case 0:
			esp8266_step_flag = 1;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <esp8266_get_time+0xa4>)
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
			ESP8266_RESET();
 800209a:	f7ff fded 	bl	8001c78 <ESP8266_RESET>
			break;
 800209e:	bf00      	nop
	}
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000000 	.word	0x20000000
 80020a8:	0800cf44 	.word	0x0800cf44
 80020ac:	0800cf5c 	.word	0x0800cf5c

080020b0 <esp8266_update_water>:

void esp8266_update_water(){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	switch (esp8266_step_flag){
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <esp8266_update_water+0x78>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d833      	bhi.n	8002124 <esp8266_update_water+0x74>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <esp8266_update_water+0x14>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	08002119 	.word	0x08002119
 80020c8:	080020e9 	.word	0x080020e9
 80020cc:	080020ef 	.word	0x080020ef
 80020d0:	080020f5 	.word	0x080020f5
 80020d4:	080020fb 	.word	0x080020fb
 80020d8:	08002101 	.word	0x08002101
 80020dc:	08002107 	.word	0x08002107
 80020e0:	0800210d 	.word	0x0800210d
 80020e4:	08002113 	.word	0x08002113
		case 1://Reset
			esp8266_cmd_reset();
 80020e8:	f7ff fdec 	bl	8001cc4 <esp8266_cmd_reset>
			break;
 80020ec:	e01a      	b.n	8002124 <esp8266_update_water+0x74>
		case 2://Set Station
			esp8266_cmd_set_station();
 80020ee:	f7ff fe0b 	bl	8001d08 <esp8266_cmd_set_station>
			break;
 80020f2:	e017      	b.n	8002124 <esp8266_update_water+0x74>
		case 3://Connect Wifi
			esp8266_cmd_connectWifi();
 80020f4:	f7ff fe2a 	bl	8001d4c <esp8266_cmd_connectWifi>
			break;
 80020f8:	e014      	b.n	8002124 <esp8266_update_water+0x74>
		case 4://Set TCP
			esp8266_cmd_tcp();
 80020fa:	f7ff fe51 	bl	8001da0 <esp8266_cmd_tcp>
			break;
 80020fe:	e011      	b.n	8002124 <esp8266_update_water+0x74>
		case 5://SET Trans mode
			esp8266_cmd_trans_mode();
 8002100:	f7ff fe70 	bl	8001de4 <esp8266_cmd_trans_mode>
			break;
 8002104:	e00e      	b.n	8002124 <esp8266_update_water+0x74>
		case 6://Send Request
			esp8266_cmd_send_request();
 8002106:	f7ff fe8f 	bl	8001e28 <esp8266_cmd_send_request>
			break;
 800210a:	e00b      	b.n	8002124 <esp8266_update_water+0x74>
		case 7://Fill Request
			esp8266_cmd_fill_water_request();
 800210c:	f7ff fed0 	bl	8001eb0 <esp8266_cmd_fill_water_request>
			break;
 8002110:	e008      	b.n	8002124 <esp8266_update_water+0x74>
		case 8://Done, Reset Flag
			esp8266_water_done();
 8002112:	f7ff ff41 	bl	8001f98 <esp8266_water_done>
			break;
 8002116:	e005      	b.n	8002124 <esp8266_update_water+0x74>
		case 0:
			esp8266_step_flag = 1;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <esp8266_update_water+0x78>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
			ESP8266_RESET();
 800211e:	f7ff fdab 	bl	8001c78 <ESP8266_RESET>
			break;
 8002122:	bf00      	nop
	}
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000000 	.word	0x20000000

0800212c <esp8266_update_exercise>:


void esp8266_update_exercise(){
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	switch (esp8266_step_flag){
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <esp8266_update_exercise+0x78>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d833      	bhi.n	80021a0 <esp8266_update_exercise+0x74>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <esp8266_update_exercise+0x14>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002195 	.word	0x08002195
 8002144:	08002165 	.word	0x08002165
 8002148:	0800216b 	.word	0x0800216b
 800214c:	08002171 	.word	0x08002171
 8002150:	08002177 	.word	0x08002177
 8002154:	0800217d 	.word	0x0800217d
 8002158:	08002183 	.word	0x08002183
 800215c:	08002189 	.word	0x08002189
 8002160:	0800218f 	.word	0x0800218f
		case 1://Reset
			esp8266_cmd_reset();
 8002164:	f7ff fdae 	bl	8001cc4 <esp8266_cmd_reset>
			break;
 8002168:	e01a      	b.n	80021a0 <esp8266_update_exercise+0x74>
		case 2://Set Station
			esp8266_cmd_set_station();
 800216a:	f7ff fdcd 	bl	8001d08 <esp8266_cmd_set_station>
			break;
 800216e:	e017      	b.n	80021a0 <esp8266_update_exercise+0x74>
		case 3://Connect Wifi
			esp8266_cmd_connectWifi();
 8002170:	f7ff fdec 	bl	8001d4c <esp8266_cmd_connectWifi>
			break;
 8002174:	e014      	b.n	80021a0 <esp8266_update_exercise+0x74>
		case 4://Set TCP
			esp8266_cmd_tcp();
 8002176:	f7ff fe13 	bl	8001da0 <esp8266_cmd_tcp>
			break;
 800217a:	e011      	b.n	80021a0 <esp8266_update_exercise+0x74>
		case 5://SET Trans mode
			esp8266_cmd_trans_mode();
 800217c:	f7ff fe32 	bl	8001de4 <esp8266_cmd_trans_mode>
			break;
 8002180:	e00e      	b.n	80021a0 <esp8266_update_exercise+0x74>
		case 6://Send Request
			esp8266_cmd_send_request();
 8002182:	f7ff fe51 	bl	8001e28 <esp8266_cmd_send_request>
			break;
 8002186:	e00b      	b.n	80021a0 <esp8266_update_exercise+0x74>
		case 7://Fill Request
			esp8266_cmd_fill_exercise_request();
 8002188:	f7ff feb4 	bl	8001ef4 <esp8266_cmd_fill_exercise_request>
			break;
 800218c:	e008      	b.n	80021a0 <esp8266_update_exercise+0x74>
		case 8://Done, Reset Flag
			esp8266_exercise_done();
 800218e:	f7ff ff1d 	bl	8001fcc <esp8266_exercise_done>
			break;
 8002192:	e005      	b.n	80021a0 <esp8266_update_exercise+0x74>
		case 0:
			esp8266_step_flag = 1;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <esp8266_update_exercise+0x78>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
			ESP8266_RESET();
 800219a:	f7ff fd6d 	bl	8001c78 <ESP8266_RESET>
			break;
 800219e:	bf00      	nop
	}
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000000 	.word	0x20000000

080021a8 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	e002      	b.n	80021b8 <Delay+0x10>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f9      	bne.n	80021b2 <Delay+0xa>
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 80021ce:	2001      	movs	r0, #1
 80021d0:	f000 f826 	bl	8002220 <LCD_BackLed_Control>
	LCD_Rst();
 80021d4:	f000 f80c 	bl	80021f0 <LCD_Rst>
	LCD_REG_Config();
 80021d8:	f000 f868 	bl	80022ac <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 80021dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80021e0:	22f0      	movs	r2, #240	; 0xf0
 80021e2:	2100      	movs	r1, #0
 80021e4:	2000      	movs	r0, #0
 80021e6:	f000 f9f3 	bl	80025d0 <LCD_Clear>
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <LCD_Rst>:


void LCD_Rst ( void )
{			
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2102      	movs	r1, #2
 80021f8:	4807      	ldr	r0, [pc, #28]	; (8002218 <LCD_Rst+0x28>)
 80021fa:	f006 f984 	bl	8008506 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80021fe:	4807      	ldr	r0, [pc, #28]	; (800221c <LCD_Rst+0x2c>)
 8002200:	f7ff ffd2 	bl	80021a8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8002204:	2201      	movs	r2, #1
 8002206:	2102      	movs	r1, #2
 8002208:	4803      	ldr	r0, [pc, #12]	; (8002218 <LCD_Rst+0x28>)
 800220a:	f006 f97c 	bl	8008506 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800220e:	4803      	ldr	r0, [pc, #12]	; (800221c <LCD_Rst+0x2c>)
 8002210:	f7ff ffca 	bl	80021a8 <Delay>
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40011800 	.word	0x40011800
 800221c:	0002bffc 	.word	0x0002bffc

08002220 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8002230:	2200      	movs	r2, #0
 8002232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002236:	4807      	ldr	r0, [pc, #28]	; (8002254 <LCD_BackLed_Control+0x34>)
 8002238:	f006 f965 	bl	8008506 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 800223c:	e005      	b.n	800224a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800223e:	2201      	movs	r2, #1
 8002240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <LCD_BackLed_Control+0x34>)
 8002246:	f006 f95e 	bl	8008506 <HAL_GPIO_WritePin>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40011400 	.word	0x40011400

08002258 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8002262:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	8013      	strh	r3, [r2, #0]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <LCD_Write_Data+0x1c>)
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	8013      	strh	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	60020000 	.word	0x60020000

08002294 <LCD_Read_Data>:


uint16_t LCD_Read_Data ( void )
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <LCD_Read_Data+0x14>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	60020000 	.word	0x60020000

080022ac <LCD_REG_Config>:


void LCD_REG_Config ( void )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80022b0:	20cf      	movs	r0, #207	; 0xcf
 80022b2:	f7ff ffd1 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7ff ffdc 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80022bc:	2081      	movs	r0, #129	; 0x81
 80022be:	f7ff ffd9 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80022c2:	2030      	movs	r0, #48	; 0x30
 80022c4:	f7ff ffd6 	bl	8002274 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80022c8:	20ed      	movs	r0, #237	; 0xed
 80022ca:	f7ff ffc5 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80022ce:	2064      	movs	r0, #100	; 0x64
 80022d0:	f7ff ffd0 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80022d4:	2003      	movs	r0, #3
 80022d6:	f7ff ffcd 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80022da:	2012      	movs	r0, #18
 80022dc:	f7ff ffca 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80022e0:	2081      	movs	r0, #129	; 0x81
 80022e2:	f7ff ffc7 	bl	8002274 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80022e6:	20e8      	movs	r0, #232	; 0xe8
 80022e8:	f7ff ffb6 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80022ec:	2085      	movs	r0, #133	; 0x85
 80022ee:	f7ff ffc1 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80022f2:	2010      	movs	r0, #16
 80022f4:	f7ff ffbe 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80022f8:	2078      	movs	r0, #120	; 0x78
 80022fa:	f7ff ffbb 	bl	8002274 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80022fe:	20cb      	movs	r0, #203	; 0xcb
 8002300:	f7ff ffaa 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8002304:	2039      	movs	r0, #57	; 0x39
 8002306:	f7ff ffb5 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800230a:	202c      	movs	r0, #44	; 0x2c
 800230c:	f7ff ffb2 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff ffaf 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8002316:	2034      	movs	r0, #52	; 0x34
 8002318:	f7ff ffac 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800231c:	2002      	movs	r0, #2
 800231e:	f7ff ffa9 	bl	8002274 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8002322:	20f7      	movs	r0, #247	; 0xf7
 8002324:	f7ff ff98 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8002328:	2020      	movs	r0, #32
 800232a:	f7ff ffa3 	bl	8002274 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800232e:	20ea      	movs	r0, #234	; 0xea
 8002330:	f7ff ff92 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff ff9d 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff ff9a 	bl	8002274 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8002340:	20b1      	movs	r0, #177	; 0xb1
 8002342:	f7ff ff89 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff ff94 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800234c:	201b      	movs	r0, #27
 800234e:	f7ff ff91 	bl	8002274 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8002352:	20b6      	movs	r0, #182	; 0xb6
 8002354:	f7ff ff80 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8002358:	200a      	movs	r0, #10
 800235a:	f7ff ff8b 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800235e:	20a2      	movs	r0, #162	; 0xa2
 8002360:	f7ff ff88 	bl	8002274 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8002364:	20c0      	movs	r0, #192	; 0xc0
 8002366:	f7ff ff77 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800236a:	2035      	movs	r0, #53	; 0x35
 800236c:	f7ff ff82 	bl	8002274 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8002370:	20c1      	movs	r0, #193	; 0xc1
 8002372:	f7ff ff71 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8002376:	2011      	movs	r0, #17
 8002378:	f7ff ff7c 	bl	8002274 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800237c:	20c5      	movs	r0, #197	; 0xc5
 800237e:	f7ff ff6b 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8002382:	2045      	movs	r0, #69	; 0x45
 8002384:	f7ff ff76 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8002388:	2045      	movs	r0, #69	; 0x45
 800238a:	f7ff ff73 	bl	8002274 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800238e:	20c7      	movs	r0, #199	; 0xc7
 8002390:	f7ff ff62 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8002394:	20a2      	movs	r0, #162	; 0xa2
 8002396:	f7ff ff6d 	bl	8002274 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800239a:	20f2      	movs	r0, #242	; 0xf2
 800239c:	f7ff ff5c 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff ff67 	bl	8002274 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80023a6:	2026      	movs	r0, #38	; 0x26
 80023a8:	f7ff ff56 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff ff61 	bl	8002274 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80023b2:	20e0      	movs	r0, #224	; 0xe0
 80023b4:	f7ff ff50 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80023b8:	200f      	movs	r0, #15
 80023ba:	f7ff ff5b 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80023be:	2026      	movs	r0, #38	; 0x26
 80023c0:	f7ff ff58 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80023c4:	2024      	movs	r0, #36	; 0x24
 80023c6:	f7ff ff55 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80023ca:	200b      	movs	r0, #11
 80023cc:	f7ff ff52 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80023d0:	200e      	movs	r0, #14
 80023d2:	f7ff ff4f 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80023d6:	2009      	movs	r0, #9
 80023d8:	f7ff ff4c 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80023dc:	2054      	movs	r0, #84	; 0x54
 80023de:	f7ff ff49 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80023e2:	20a8      	movs	r0, #168	; 0xa8
 80023e4:	f7ff ff46 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80023e8:	2046      	movs	r0, #70	; 0x46
 80023ea:	f7ff ff43 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80023ee:	200c      	movs	r0, #12
 80023f0:	f7ff ff40 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80023f4:	2017      	movs	r0, #23
 80023f6:	f7ff ff3d 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80023fa:	2009      	movs	r0, #9
 80023fc:	f7ff ff3a 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8002400:	200f      	movs	r0, #15
 8002402:	f7ff ff37 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8002406:	2007      	movs	r0, #7
 8002408:	f7ff ff34 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff ff31 	bl	8002274 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8002412:	20e1      	movs	r0, #225	; 0xe1
 8002414:	f7ff ff20 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff ff2b 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800241e:	2019      	movs	r0, #25
 8002420:	f7ff ff28 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8002424:	201b      	movs	r0, #27
 8002426:	f7ff ff25 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800242a:	2004      	movs	r0, #4
 800242c:	f7ff ff22 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8002430:	2010      	movs	r0, #16
 8002432:	f7ff ff1f 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8002436:	2007      	movs	r0, #7
 8002438:	f7ff ff1c 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800243c:	202a      	movs	r0, #42	; 0x2a
 800243e:	f7ff ff19 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8002442:	2047      	movs	r0, #71	; 0x47
 8002444:	f7ff ff16 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8002448:	2039      	movs	r0, #57	; 0x39
 800244a:	f7ff ff13 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800244e:	2003      	movs	r0, #3
 8002450:	f7ff ff10 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8002454:	2006      	movs	r0, #6
 8002456:	f7ff ff0d 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800245a:	2006      	movs	r0, #6
 800245c:	f7ff ff0a 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8002460:	2030      	movs	r0, #48	; 0x30
 8002462:	f7ff ff07 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8002466:	2038      	movs	r0, #56	; 0x38
 8002468:	f7ff ff04 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800246c:	200f      	movs	r0, #15
 800246e:	f7ff ff01 	bl	8002274 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8002472:	2036      	movs	r0, #54	; 0x36
 8002474:	f7ff fef0 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8002478:	20c8      	movs	r0, #200	; 0xc8
 800247a:	f7ff fefb 	bl	8002274 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800247e:	202a      	movs	r0, #42	; 0x2a
 8002480:	f7ff feea 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8002484:	2000      	movs	r0, #0
 8002486:	f7ff fef5 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff fef2 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff feef 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8002496:	20ef      	movs	r0, #239	; 0xef
 8002498:	f7ff feec 	bl	8002274 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800249c:	202b      	movs	r0, #43	; 0x2b
 800249e:	f7ff fedb 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7ff fee6 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff fee3 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7ff fee0 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80024b4:	203f      	movs	r0, #63	; 0x3f
 80024b6:	f7ff fedd 	bl	8002274 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80024ba:	203a      	movs	r0, #58	; 0x3a
 80024bc:	f7ff fecc 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80024c0:	2055      	movs	r0, #85	; 0x55
 80024c2:	f7ff fed7 	bl	8002274 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80024c6:	2011      	movs	r0, #17
 80024c8:	f7ff fec6 	bl	8002258 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80024cc:	4803      	ldr	r0, [pc, #12]	; (80024dc <LCD_REG_Config+0x230>)
 80024ce:	f7ff fe6b 	bl	80021a8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80024d2:	2029      	movs	r0, #41	; 0x29
 80024d4:	f7ff fec0 	bl	8002258 <LCD_Write_Cmd>
	
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	0002bffc 	.word	0x0002bffc

080024e0 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4604      	mov	r4, r0
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4623      	mov	r3, r4
 80024f0:	80fb      	strh	r3, [r7, #6]
 80024f2:	4603      	mov	r3, r0
 80024f4:	80bb      	strh	r3, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	807b      	strh	r3, [r7, #2]
 80024fa:	4613      	mov	r3, r2
 80024fc:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80024fe:	202a      	movs	r0, #42	; 0x2a
 8002500:	f7ff feaa 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	b29b      	uxth	r3, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff feb2 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	b29b      	uxth	r3, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff feac 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	4413      	add	r3, r2
 8002522:	3b01      	subs	r3, #1
 8002524:	121b      	asrs	r3, r3, #8
 8002526:	b29b      	uxth	r3, r3
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fea3 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	4413      	add	r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29b      	uxth	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	b29b      	uxth	r3, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fe98 	bl	8002274 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8002544:	202b      	movs	r0, #43	; 0x2b
 8002546:	f7ff fe87 	bl	8002258 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800254a:	88bb      	ldrh	r3, [r7, #4]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29b      	uxth	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fe8f 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8002556:	88bb      	ldrh	r3, [r7, #4]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	b29b      	uxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fe89 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8002562:	88ba      	ldrh	r2, [r7, #4]
 8002564:	883b      	ldrh	r3, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	3b01      	subs	r3, #1
 800256a:	121b      	asrs	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe80 	bl	8002274 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8002574:	88ba      	ldrh	r2, [r7, #4]
 8002576:	883b      	ldrh	r3, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29b      	uxth	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fe75 	bl	8002274 <LCD_Write_Data>
	
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}

08002592 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80025a2:	202c      	movs	r0, #44	; 0x2c
 80025a4:	f7ff fe58 	bl	8002258 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e006      	b.n	80025bc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fe5f 	bl	8002274 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3301      	adds	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d3f4      	bcc.n	80025ae <LCD_FillColor+0x1c>
		
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4604      	mov	r4, r0
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4623      	mov	r3, r4
 80025e0:	80fb      	strh	r3, [r7, #6]
 80025e2:	4603      	mov	r3, r0
 80025e4:	80bb      	strh	r3, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	807b      	strh	r3, [r7, #2]
 80025ea:	4613      	mov	r3, r2
 80025ec:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <LCD_Clear+0x58>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <LCD_Clear+0x2a>
 80025f6:	2300      	movs	r3, #0
 80025f8:	e001      	b.n	80025fe <LCD_Clear+0x2e>
 80025fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025fe:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8002600:	883b      	ldrh	r3, [r7, #0]
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	88b9      	ldrh	r1, [r7, #4]
 8002606:	88f8      	ldrh	r0, [r7, #6]
 8002608:	f7ff ff6a 	bl	80024e0 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	883a      	ldrh	r2, [r7, #0]
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	461a      	mov	r2, r3
 8002616:	89fb      	ldrh	r3, [r7, #14]
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f7ff ffb9 	bl	8002592 <LCD_FillColor>
	
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	20000150 	.word	0x20000150

0800262c <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4604      	mov	r4, r0
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4623      	mov	r3, r4
 800263c:	80fb      	strh	r3, [r7, #6]
 800263e:	4603      	mov	r3, r0
 8002640:	80bb      	strh	r3, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	807b      	strh	r3, [r7, #2]
 8002646:	4613      	mov	r3, r2
 8002648:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800264a:	883b      	ldrh	r3, [r7, #0]
 800264c:	887a      	ldrh	r2, [r7, #2]
 800264e:	88b9      	ldrh	r1, [r7, #4]
 8002650:	88f8      	ldrh	r0, [r7, #6]
 8002652:	f7ff ff45 	bl	80024e0 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	883a      	ldrh	r2, [r7, #0]
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	461a      	mov	r2, r3
 8002660:	8b3b      	ldrh	r3, [r7, #24]
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f7ff ff94 	bl	8002592 <LCD_FillColor>
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bd90      	pop	{r4, r7, pc}

08002672 <LCD_Read_PixelData>:

uint16_t LCD_Read_PixelData ( void )	
{	
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
	uint16_t usR=0, usG=0, usB=0 ;
 8002678:	2300      	movs	r3, #0
 800267a:	80fb      	strh	r3, [r7, #6]
 800267c:	2300      	movs	r3, #0
 800267e:	80bb      	strh	r3, [r7, #4]
 8002680:	2300      	movs	r3, #0
 8002682:	807b      	strh	r3, [r7, #2]

	
	LCD_Write_Cmd ( 0x2E ); 
 8002684:	202e      	movs	r0, #46	; 0x2e
 8002686:	f7ff fde7 	bl	8002258 <LCD_Write_Cmd>
	
	usR = LCD_Read_Data (); 	/*FIRST READ OUT DUMMY DATA*/
 800268a:	f7ff fe03 	bl	8002294 <LCD_Read_Data>
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
	
	usR = LCD_Read_Data ();  	/*READ OUT RED DATA  */
 8002692:	f7ff fdff 	bl	8002294 <LCD_Read_Data>
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
	usB = LCD_Read_Data ();  	/*READ OUT BLUE DATA*/
 800269a:	f7ff fdfb 	bl	8002294 <LCD_Read_Data>
 800269e:	4603      	mov	r3, r0
 80026a0:	807b      	strh	r3, [r7, #2]
	usG = LCD_Read_Data ();  	/*READ OUT GREEN DATA*/	
 80026a2:	f7ff fdf7 	bl	8002294 <LCD_Read_Data>
 80026a6:	4603      	mov	r3, r0
 80026a8:	80bb      	strh	r3, [r7, #4]
	
  return ( ( ( usR >> 11 ) << 11 ) | ( ( usG >> 10 ) << 5 ) | ( usB >> 11 ) );
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	0adb      	lsrs	r3, r3, #11
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	02db      	lsls	r3, r3, #11
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	0a9b      	lsrs	r3, r3, #10
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	015b      	lsls	r3, r3, #5
 80026bc:	b21b      	sxth	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	0adb      	lsrs	r3, r3, #11
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	b29b      	uxth	r3, r3
	
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <LCD_GetPointPixel>:


uint16_t LCD_GetPointPixel ( uint16_t usCOLUMN, uint16_t usPAGE )
{ 
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	460a      	mov	r2, r1
 80026e2:	80fb      	strh	r3, [r7, #6]
 80026e4:	4613      	mov	r3, r2
 80026e6:	80bb      	strh	r3, [r7, #4]
	uint16_t usPixelData;

	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 80026e8:	88b9      	ldrh	r1, [r7, #4]
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	2301      	movs	r3, #1
 80026ee:	2201      	movs	r2, #1
 80026f0:	f7ff fef6 	bl	80024e0 <LCD_OpenWindow>
	
	usPixelData = LCD_Read_PixelData ();
 80026f4:	f7ff ffbd 	bl	8002672 <LCD_Read_PixelData>
 80026f8:	4603      	mov	r3, r0
 80026fa:	81fb      	strh	r3, [r7, #14]
	
	return usPixelData;
 80026fc:	89fb      	ldrh	r3, [r7, #14]
	
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
 8002712:	460b      	mov	r3, r1
 8002714:	80bb      	strh	r3, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 800271a:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <LCD_DrawChar+0xb0>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <LCD_DrawChar+0x20>
 8002722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002726:	e000      	b.n	800272a <LCD_DrawChar+0x22>
 8002728:	2300      	movs	r3, #0
 800272a:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 800272c:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <LCD_DrawChar+0xb0>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <LCD_DrawChar+0x30>
 8002734:	2300      	movs	r3, #0
 8002736:	e001      	b.n	800273c <LCD_DrawChar+0x34>
 8002738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800273c:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	3b20      	subs	r3, #32
 8002742:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002744:	88b9      	ldrh	r1, [r7, #4]
 8002746:	88f8      	ldrh	r0, [r7, #6]
 8002748:	2310      	movs	r3, #16
 800274a:	2208      	movs	r2, #8
 800274c:	f7ff fec8 	bl	80024e0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8002750:	202c      	movs	r0, #44	; 0x2c
 8002752:	f7ff fd81 	bl	8002258 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002756:	2300      	movs	r3, #0
 8002758:	75bb      	strb	r3, [r7, #22]
 800275a:	e024      	b.n	80027a6 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	7dbb      	ldrb	r3, [r7, #22]
 8002760:	4916      	ldr	r1, [pc, #88]	; (80027bc <LCD_DrawChar+0xb4>)
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	440a      	add	r2, r1
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800276c:	2300      	movs	r3, #0
 800276e:	757b      	strb	r3, [r7, #21]
 8002770:	e013      	b.n	800279a <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 800277c:	8a7b      	ldrh	r3, [r7, #18]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fd78 	bl	8002274 <LCD_Write_Data>
 8002784:	e003      	b.n	800278e <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 8002786:	8a3b      	ldrh	r3, [r7, #16]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fd73 	bl	8002274 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002794:	7d7b      	ldrb	r3, [r7, #21]
 8002796:	3301      	adds	r3, #1
 8002798:	757b      	strb	r3, [r7, #21]
 800279a:	7d7b      	ldrb	r3, [r7, #21]
 800279c:	2b07      	cmp	r3, #7
 800279e:	d9e8      	bls.n	8002772 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80027a0:	7dbb      	ldrb	r3, [r7, #22]
 80027a2:	3301      	adds	r3, #1
 80027a4:	75bb      	strb	r3, [r7, #22]
 80027a6:	7dbb      	ldrb	r3, [r7, #22]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d9d7      	bls.n	800275c <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000150 	.word	0x20000150
 80027bc:	0800d03c 	.word	0x0800d03c

080027c0 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	603a      	str	r2, [r7, #0]
 80027ca:	80fb      	strh	r3, [r7, #6]
 80027cc:	460b      	mov	r3, r1
 80027ce:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80027d0:	e01c      	b.n	800280c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	2be8      	cmp	r3, #232	; 0xe8
 80027d6:	d904      	bls.n	80027e2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80027d8:	2300      	movs	r3, #0
 80027da:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80027dc:	88bb      	ldrh	r3, [r7, #4]
 80027de:	3310      	adds	r3, #16
 80027e0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80027e2:	88bb      	ldrh	r3, [r7, #4]
 80027e4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80027e8:	d903      	bls.n	80027f2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80027ea:	2300      	movs	r3, #0
 80027ec:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	781a      	ldrb	r2, [r3, #0]
 80027f6:	88b9      	ldrh	r1, [r7, #4]
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff84 	bl	8002708 <LCD_DrawChar>
		
		pStr ++;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	3308      	adds	r3, #8
 800280a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1de      	bne.n	80027d2 <LCD_DrawString+0x12>
		
	}
	
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	80fb      	strh	r3, [r7, #6]
 8002828:	460b      	mov	r3, r1
 800282a:	80bb      	strh	r3, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	2bef      	cmp	r3, #239	; 0xef
 8002834:	d809      	bhi.n	800284a <LCD_DrawDot+0x2c>
 8002836:	88bb      	ldrh	r3, [r7, #4]
 8002838:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800283c:	d205      	bcs.n	800284a <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 800283e:	88b9      	ldrh	r1, [r7, #4]
 8002840:	88f8      	ldrh	r0, [r7, #6]
 8002842:	2301      	movs	r3, #1
 8002844:	2201      	movs	r2, #1
 8002846:	f7ff fe4b 	bl	80024e0 <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	4619      	mov	r1, r3
 800284e:	2001      	movs	r0, #1
 8002850:	f7ff fe9f 	bl	8002592 <LCD_FillColor>

}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	0000      	movs	r0, r0
	...

08002860 <LCD_DrawCircle>:

void LCD_DrawCircle ( uint16_t usC, uint16_t usP, uint16_t R, uint16_t usColor)
{	
 8002860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	4604      	mov	r4, r0
 800286a:	4608      	mov	r0, r1
 800286c:	4611      	mov	r1, r2
 800286e:	461a      	mov	r2, r3
 8002870:	4623      	mov	r3, r4
 8002872:	80fb      	strh	r3, [r7, #6]
 8002874:	4603      	mov	r3, r0
 8002876:	80bb      	strh	r3, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	803b      	strh	r3, [r7, #0]
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800288c:	e05a      	b.n	8002944 <LCD_DrawCircle+0xe4>
			int x = usC + R*cos(i);
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fe23 	bl	80004dc <__aeabi_i2d>
 8002896:	4604      	mov	r4, r0
 8002898:	460d      	mov	r5, r1
 800289a:	887b      	ldrh	r3, [r7, #2]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe1d 	bl	80004dc <__aeabi_i2d>
 80028a2:	4680      	mov	r8, r0
 80028a4:	4689      	mov	r9, r1
 80028a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028aa:	f009 f96b 	bl	800bb84 <cos>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4640      	mov	r0, r8
 80028b4:	4649      	mov	r1, r9
 80028b6:	f7fd fe7b 	bl	80005b0 <__aeabi_dmul>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4620      	mov	r0, r4
 80028c0:	4629      	mov	r1, r5
 80028c2:	f7fd fcbf 	bl	8000244 <__adddf3>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f7fe f909 	bl	8000ae4 <__aeabi_d2iz>
 80028d2:	4603      	mov	r3, r0
 80028d4:	60fb      	str	r3, [r7, #12]
			int y = usP + R*sin(i);
 80028d6:	88bb      	ldrh	r3, [r7, #4]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fdff 	bl	80004dc <__aeabi_i2d>
 80028de:	4604      	mov	r4, r0
 80028e0:	460d      	mov	r5, r1
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fdf9 	bl	80004dc <__aeabi_i2d>
 80028ea:	4680      	mov	r8, r0
 80028ec:	4689      	mov	r9, r1
 80028ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028f2:	f009 f98d 	bl	800bc10 <sin>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4640      	mov	r0, r8
 80028fc:	4649      	mov	r1, r9
 80028fe:	f7fd fe57 	bl	80005b0 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4620      	mov	r0, r4
 8002908:	4629      	mov	r1, r5
 800290a:	f7fd fc9b 	bl	8000244 <__adddf3>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f8e5 	bl	8000ae4 <__aeabi_d2iz>
 800291a:	4603      	mov	r3, r0
 800291c:	60bb      	str	r3, [r7, #8]
			LCD_DrawDot(x,y,usColor);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	b29b      	uxth	r3, r3
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	b291      	uxth	r1, r2
 8002926:	883a      	ldrh	r2, [r7, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff78 	bl	800281e <LCD_DrawDot>
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 800292e:	a30e      	add	r3, pc, #56	; (adr r3, 8002968 <LCD_DrawCircle+0x108>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002938:	f7fd fc84 	bl	8000244 <__adddf3>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002944:	a30a      	add	r3, pc, #40	; (adr r3, 8002970 <LCD_DrawCircle+0x110>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800294e:	f7fe f8a1 	bl	8000a94 <__aeabi_dcmplt>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d19a      	bne.n	800288e <LCD_DrawCircle+0x2e>
		}
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002964:	f3af 8000 	nop.w
 8002968:	47ae147b 	.word	0x47ae147b
 800296c:	3f847ae1 	.word	0x3f847ae1
 8002970:	54442d18 	.word	0x54442d18
 8002974:	401921fb 	.word	0x401921fb

08002978 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	4604      	mov	r4, r0
 8002980:	4608      	mov	r0, r1
 8002982:	4611      	mov	r1, r2
 8002984:	461a      	mov	r2, r3
 8002986:	4623      	mov	r3, r4
 8002988:	80fb      	strh	r3, [r7, #6]
 800298a:	4603      	mov	r3, r0
 800298c:	80bb      	strh	r3, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
 8002992:	4613      	mov	r3, r2
 8002994:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	3b20      	subs	r3, #32
 800299a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800299c:	88b9      	ldrh	r1, [r7, #4]
 800299e:	88f8      	ldrh	r0, [r7, #6]
 80029a0:	2310      	movs	r3, #16
 80029a2:	2208      	movs	r2, #8
 80029a4:	f7ff fd9c 	bl	80024e0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80029a8:	202c      	movs	r0, #44	; 0x2c
 80029aa:	f7ff fc55 	bl	8002258 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80029ae:	2300      	movs	r3, #0
 80029b0:	73bb      	strb	r3, [r7, #14]
 80029b2:	e024      	b.n	80029fe <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80029b4:	7b3a      	ldrb	r2, [r7, #12]
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	4915      	ldr	r1, [pc, #84]	; (8002a10 <LCD_DrawChar_Color+0x98>)
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	440a      	add	r2, r1
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80029c4:	2300      	movs	r3, #0
 80029c6:	737b      	strb	r3, [r7, #13]
 80029c8:	e013      	b.n	80029f2 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80029d4:	8c3b      	ldrh	r3, [r7, #32]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fc4c 	bl	8002274 <LCD_Write_Data>
 80029dc:	e003      	b.n	80029e6 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80029de:	883b      	ldrh	r3, [r7, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fc47 	bl	8002274 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80029ec:	7b7b      	ldrb	r3, [r7, #13]
 80029ee:	3301      	adds	r3, #1
 80029f0:	737b      	strb	r3, [r7, #13]
 80029f2:	7b7b      	ldrb	r3, [r7, #13]
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	d9e8      	bls.n	80029ca <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80029f8:	7bbb      	ldrb	r3, [r7, #14]
 80029fa:	3301      	adds	r3, #1
 80029fc:	73bb      	strb	r3, [r7, #14]
 80029fe:	7bbb      	ldrb	r3, [r7, #14]
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d9d7      	bls.n	80029b4 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	0800d03c 	.word	0x0800d03c

08002a14 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	80fb      	strh	r3, [r7, #6]
 8002a20:	4613      	mov	r3, r2
 8002a22:	80bb      	strh	r3, [r7, #4]
  LCD_Clear_Color ( usX - 10, usY, 20, 1, RED);
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	3b0a      	subs	r3, #10
 8002a28:	b298      	uxth	r0, r3
 8002a2a:	88b9      	ldrh	r1, [r7, #4]
 8002a2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2301      	movs	r3, #1
 8002a34:	2214      	movs	r2, #20
 8002a36:	f7ff fdf9 	bl	800262c <LCD_Clear_Color>
  LCD_Clear_Color ( usX, usY - 10, 1, 20, RED);
 8002a3a:	88bb      	ldrh	r3, [r7, #4]
 8002a3c:	3b0a      	subs	r3, #10
 8002a3e:	b299      	uxth	r1, r3
 8002a40:	88f8      	ldrh	r0, [r7, #6]
 8002a42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2314      	movs	r3, #20
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f7ff fdee 	bl	800262c <LCD_Clear_Color>
	
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60ba      	str	r2, [r7, #8]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	81fb      	strh	r3, [r7, #14]
 8002a66:	460b      	mov	r3, r1
 8002a68:	81bb      	strh	r3, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002a6e:	e01f      	b.n	8002ab0 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002a70:	89fb      	ldrh	r3, [r7, #14]
 8002a72:	2be8      	cmp	r3, #232	; 0xe8
 8002a74:	d904      	bls.n	8002a80 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002a76:	2300      	movs	r3, #0
 8002a78:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8002a7a:	89bb      	ldrh	r3, [r7, #12]
 8002a7c:	3310      	adds	r3, #16
 8002a7e:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002a80:	89bb      	ldrh	r3, [r7, #12]
 8002a82:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002a86:	d903      	bls.n	8002a90 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	88fc      	ldrh	r4, [r7, #6]
 8002a96:	89b9      	ldrh	r1, [r7, #12]
 8002a98:	89f8      	ldrh	r0, [r7, #14]
 8002a9a:	8c3b      	ldrh	r3, [r7, #32]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7ff ff6a 	bl	8002978 <LCD_DrawChar_Color>
		
		pStr ++;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	3308      	adds	r3, #8
 8002aae:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1db      	bne.n	8002a70 <LCD_DrawString_Color+0x18>
		
	}
	
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}
	...

08002ac4 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	f200 80a0 	bhi.w	8002c18 <LCD_GramScan+0x154>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <LCD_GramScan+0x1c>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002b3b 	.word	0x08002b3b
 8002ae8:	08002b85 	.word	0x08002b85
 8002aec:	08002bcf 	.word	0x08002bcf

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002af0:	2036      	movs	r0, #54	; 0x36
 8002af2:	f7ff fbb1 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 8002af6:	20c8      	movs	r0, #200	; 0xc8
 8002af8:	f7ff fbbc 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002afc:	202a      	movs	r0, #42	; 0x2a
 8002afe:	f7ff fbab 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7ff fbb6 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7ff fbb3 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7ff fbb0 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8002b14:	20ef      	movs	r0, #239	; 0xef
 8002b16:	f7ff fbad 	bl	8002274 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002b1a:	202b      	movs	r0, #43	; 0x2b
 8002b1c:	f7ff fb9c 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7ff fba7 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7ff fba4 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f7ff fba1 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8002b32:	203f      	movs	r0, #63	; 0x3f
 8002b34:	f7ff fb9e 	bl	8002274 <LCD_Write_Data>
					
		  break;
 8002b38:	e06e      	b.n	8002c18 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002b3a:	2036      	movs	r0, #54	; 0x36
 8002b3c:	f7ff fb8c 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8002b40:	2068      	movs	r0, #104	; 0x68
 8002b42:	f7ff fb97 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002b46:	202a      	movs	r0, #42	; 0x2a
 8002b48:	f7ff fb86 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7ff fb91 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002b52:	2000      	movs	r0, #0
 8002b54:	f7ff fb8e 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f7ff fb8b 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8002b5e:	203f      	movs	r0, #63	; 0x3f
 8002b60:	f7ff fb88 	bl	8002274 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002b64:	202b      	movs	r0, #43	; 0x2b
 8002b66:	f7ff fb77 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f7ff fb82 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7ff fb7f 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7ff fb7c 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8002b7c:	20ef      	movs	r0, #239	; 0xef
 8002b7e:	f7ff fb79 	bl	8002274 <LCD_Write_Data>
		
		  break;
 8002b82:	e049      	b.n	8002c18 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8002b84:	2036      	movs	r0, #54	; 0x36
 8002b86:	f7ff fb67 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8002b8a:	2028      	movs	r0, #40	; 0x28
 8002b8c:	f7ff fb72 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002b90:	202a      	movs	r0, #42	; 0x2a
 8002b92:	f7ff fb61 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7ff fb6c 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7ff fb69 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7ff fb66 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8002ba8:	203f      	movs	r0, #63	; 0x3f
 8002baa:	f7ff fb63 	bl	8002274 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002bae:	202b      	movs	r0, #43	; 0x2b
 8002bb0:	f7ff fb52 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7ff fb5d 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7ff fb5a 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7ff fb57 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 8002bc6:	20ef      	movs	r0, #239	; 0xef
 8002bc8:	f7ff fb54 	bl	8002274 <LCD_Write_Data>
		  
		  break;
 8002bcc:	e024      	b.n	8002c18 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002bce:	2036      	movs	r0, #54	; 0x36
 8002bd0:	f7ff fb42 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 8002bd4:	2048      	movs	r0, #72	; 0x48
 8002bd6:	f7ff fb4d 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002bda:	202a      	movs	r0, #42	; 0x2a
 8002bdc:	f7ff fb3c 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002be0:	2000      	movs	r0, #0
 8002be2:	f7ff fb47 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7ff fb44 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7ff fb41 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8002bf2:	20ef      	movs	r0, #239	; 0xef
 8002bf4:	f7ff fb3e 	bl	8002274 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002bf8:	202b      	movs	r0, #43	; 0x2b
 8002bfa:	f7ff fb2d 	bl	8002258 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7ff fb38 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7ff fb35 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7ff fb32 	bl	8002274 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8002c10:	203f      	movs	r0, #63	; 0x3f
 8002c12:	f7ff fb2f 	bl	8002274 <LCD_Write_Data>
		
	    break;
 8002c16:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8002c18:	202c      	movs	r0, #44	; 0x2c
 8002c1a:	f7ff fb1d 	bl	8002258 <LCD_Write_Cmd>
	
	
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop

08002c28 <LCD_Darkmode_Toggle>:

void LCD_Darkmode_Toggle(){
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
	extern unsigned char *petStats;
	extern int sec;
	if (!darkmode_toggle) {
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <LCD_Darkmode_Toggle+0x54>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d119      	bne.n	8002c68 <LCD_Darkmode_Toggle+0x40>
		darkmode_toggle = 1;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <LCD_Darkmode_Toggle+0x54>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
		if (sec % 2 == 0){
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <LCD_Darkmode_Toggle+0x58>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <LCD_Darkmode_Toggle+0x26>
			petStats = sleep1;
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <LCD_Darkmode_Toggle+0x5c>)
 8002c48:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <LCD_Darkmode_Toggle+0x60>)
 8002c4a:	601a      	str	r2, [r3, #0]
	}
	else {
		darkmode_toggle = 0;
		petStats = normal;
	}
}
 8002c4c:	e012      	b.n	8002c74 <LCD_Darkmode_Toggle+0x4c>
		else if (sec % 2 == 1){
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <LCD_Darkmode_Toggle+0x58>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	bfb8      	it	lt
 8002c5a:	425b      	neglt	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d109      	bne.n	8002c74 <LCD_Darkmode_Toggle+0x4c>
			petStats = sleep2;
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <LCD_Darkmode_Toggle+0x5c>)
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <LCD_Darkmode_Toggle+0x64>)
 8002c64:	601a      	str	r2, [r3, #0]
}
 8002c66:	e005      	b.n	8002c74 <LCD_Darkmode_Toggle+0x4c>
		darkmode_toggle = 0;
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <LCD_Darkmode_Toggle+0x54>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
		petStats = normal;
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <LCD_Darkmode_Toggle+0x5c>)
 8002c70:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <LCD_Darkmode_Toggle+0x68>)
 8002c72:	601a      	str	r2, [r3, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	20000150 	.word	0x20000150
 8002c80:	2000038c 	.word	0x2000038c
 8002c84:	2000000c 	.word	0x2000000c
 8002c88:	08037ad0 	.word	0x08037ad0
 8002c8c:	0803eb58 	.word	0x0803eb58
 8002c90:	08030a48 	.word	0x08030a48

08002c94 <LCD_DrawPicture>:

void LCD_DrawPicture(uint16_t StartX, uint16_t StartY,unsigned char *pic) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	603a      	str	r2, [r7, #0]
 8002c9e:	80fb      	strh	r3, [r7, #6]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	80bb      	strh	r3, [r7, #4]
		uint32_t i = 8, len;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	617b      	str	r3, [r7, #20]
		uint16_t temp, x, y;

		x = ((uint16_t) (pic[2] << 8) + pic[3]) - 1;	  	//get width
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	3302      	adds	r3, #2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3303      	adds	r3, #3
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	827b      	strh	r3, [r7, #18]
		y = ((uint16_t) (pic[4] << 8) + pic[5]) - 1;	  	//get height
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	3305      	adds	r3, #5
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	823b      	strh	r3, [r7, #16]

		LCD_OpenWindow ( StartX, StartY, 120,120);
 8002ce0:	88b9      	ldrh	r1, [r7, #4]
 8002ce2:	88f8      	ldrh	r0, [r7, #6]
 8002ce4:	2378      	movs	r3, #120	; 0x78
 8002ce6:	2278      	movs	r2, #120	; 0x78
 8002ce8:	f7ff fbfa 	bl	80024e0 <LCD_OpenWindow>
		//LCD_FillColor ( StartX*StartY ,0x01010);
		LCD_Write_Cmd(CMD_SetPixel);					//fillcolor
 8002cec:	202c      	movs	r0, #44	; 0x2c
 8002cee:	f7ff fab3 	bl	8002258 <LCD_Write_Cmd>
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3303      	adds	r3, #3
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4413      	add	r3, r2
				* ((uint16_t) (pic[4] << 8) + pic[5]);   	//calculate size
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	3204      	adds	r2, #4
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	0212      	lsls	r2, r2, #8
 8002d12:	b292      	uxth	r2, r2
 8002d14:	4611      	mov	r1, r2
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	3205      	adds	r2, #5
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	440a      	add	r2, r1
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	005b      	lsls	r3, r3, #1
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8002d24:	60fb      	str	r3, [r7, #12]

		while (i < (len + 8)) {							 	//start from the 9th
 8002d26:	e015      	b.n	8002d54 <LCD_DrawPicture+0xc0>
			temp = (uint16_t) (pic[i] << 8) | pic[i + 1];	//2bits once
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	6839      	ldr	r1, [r7, #0]
 8002d3c:	440b      	add	r3, r1
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	4313      	orrs	r3, r2
 8002d44:	817b      	strh	r3, [r7, #10]
			LCD_Write_Data(temp);
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fa93 	bl	8002274 <LCD_Write_Data>
			i = i + 2;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3302      	adds	r3, #2
 8002d52:	617b      	str	r3, [r7, #20]
		while (i < (len + 8)) {							 	//start from the 9th
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3308      	adds	r3, #8
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d3e4      	bcc.n	8002d28 <LCD_DrawPicture+0x94>
		}
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b08c      	sub	sp, #48	; 0x30
 8002d6c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d6e:	f004 fac5 	bl	80072fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d72:	f000 fbd7 	bl	8003524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d76:	f000 fe67 	bl	8003a48 <MX_GPIO_Init>
  MX_FSMC_Init();
 8002d7a:	f000 ff49 	bl	8003c10 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8002d7e:	f000 fdff 	bl	8003980 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002d82:	f000 fd15 	bl	80037b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d86:	f000 fd5f 	bl	8003848 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002d8a:	f000 fdab 	bl	80038e4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8002d8e:	f000 fc69 	bl	8003664 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002d92:	f000 fc29 	bl	80035e8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8002d96:	f000 fe25 	bl	80039e4 <MX_USART3_UART_Init>
  	 * XPT2046.c
  	 * LCD
  	 * ADC (Photoresistor)
  	 * ESP8266
  	 */
	RTC_Init(&hrtc);
 8002d9a:	4895      	ldr	r0, [pc, #596]	; (8002ff0 <main+0x288>)
 8002d9c:	f002 fe0a 	bl	80059b4 <RTC_Init>
	macXPT2046_CS_DISABLE();
 8002da0:	2200      	movs	r2, #0
 8002da2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002da6:	4893      	ldr	r0, [pc, #588]	; (8002ff4 <main+0x28c>)
 8002da8:	f005 fbad 	bl	8008506 <HAL_GPIO_WritePin>
	LCD_INIT();
 8002dac:	f7ff fa0d 	bl	80021ca <LCD_INIT>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002db0:	4891      	ldr	r0, [pc, #580]	; (8002ff8 <main+0x290>)
 8002db2:	f004 ff4b 	bl	8007c4c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8002db6:	4890      	ldr	r0, [pc, #576]	; (8002ff8 <main+0x290>)
 8002db8:	f004 fc10 	bl	80075dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8002dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002dc0:	488d      	ldr	r0, [pc, #564]	; (8002ff8 <main+0x290>)
 8002dc2:	f004 fcb9 	bl	8007738 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8002dc6:	488c      	ldr	r0, [pc, #560]	; (8002ff8 <main+0x290>)
 8002dc8:	f004 fdb0 	bl	800792c <HAL_ADC_GetValue>
 8002dcc:	61b8      	str	r0, [r7, #24]
	DEBUG_USART_Config();
 8002dce:	f7fe fd4d 	bl	800186c <DEBUG_USART_Config>
	extern uint8_t esp8266_step_flag;
	esp8266_step_flag = 0;
 8002dd2:	4b8a      	ldr	r3, [pc, #552]	; (8002ffc <main+0x294>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
	Ringbuf_init();
 8002dd8:	f002 fc22 	bl	8005620 <Ringbuf_init>
	RTC_Get();
 8002ddc:	f002 feca 	bl	8005b74 <RTC_Get>
	get_TimeStamp(&real_time);
 8002de0:	4887      	ldr	r0, [pc, #540]	; (8003000 <main+0x298>)
 8002de2:	f003 f865 	bl	8005eb0 <get_TimeStamp>
	sec = real_time.rsec;
 8002de6:	4b86      	ldr	r3, [pc, #536]	; (8003000 <main+0x298>)
 8002de8:	799b      	ldrb	r3, [r3, #6]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b85      	ldr	r3, [pc, #532]	; (8003004 <main+0x29c>)
 8002dee:	601a      	str	r2, [r3, #0]
	//Flow control of UI
	uint8_t mode = 0; //Current Mode: Mode 0 = Home, Mode 1 = Drink Water, Mode 3 = Pet
 8002df0:	2300      	movs	r3, #0
 8002df2:	77fb      	strb	r3, [r7, #31]
	uint8_t mode_new = 0; //To Determine Whether A Mode is Updated
 8002df4:	2300      	movs	r3, #0
 8002df6:	74fb      	strb	r3, [r7, #19]
	uint8_t render_done=0;//Set To 1 Whenever Screen Need to Update
 8002df8:	2300      	movs	r3, #0
 8002dfa:	74bb      	strb	r3, [r7, #18]
	uint8_t pet_update=0; //Set To 1 Whenever Pet Image Need to Update
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77bb      	strb	r3, [r7, #30]


	//Calibration of TouchPad
	while( ! XPT2046_Touch_Calibrate () );
 8002e00:	bf00      	nop
 8002e02:	f003 ffa7 	bl	8006d54 <XPT2046_Touch_Calibrate>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0fa      	beq.n	8002e02 <main+0x9a>
	alarm_update_next();
 8002e0c:	f7fe fca6 	bl	800175c <alarm_update_next>
	alarm_update_last();
 8002e10:	f7fe fce2 	bl	80017d8 <alarm_update_last>
	exertimer = RTC_raw();
 8002e14:	f003 f836 	bl	8005e84 <RTC_raw>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4a7b      	ldr	r2, [pc, #492]	; (8003008 <main+0x2a0>)
 8002e1c:	6013      	str	r3, [r2, #0]
	DHT11_ReadData(&DHT11_data);
 8002e1e:	487b      	ldr	r0, [pc, #492]	; (800300c <main+0x2a4>)
 8002e20:	f7fe feab 	bl	8001b7a <DHT11_ReadData>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 8002e24:	f003 fbbe 	bl	80065a4 <TIMER_INIT>
	timer_min(1);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f003 fc05 	bl	8006638 <timer_min>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8002e2e:	4978      	ldr	r1, [pc, #480]	; (8003010 <main+0x2a8>)
 8002e30:	4878      	ldr	r0, [pc, #480]	; (8003014 <main+0x2ac>)
 8002e32:	f004 f9a7 	bl	8007184 <XPT2046_Get_TouchedPoint>
	  			&strXPT2046_TouchPara);
	  HAL_ADC_Start(&hadc1);
 8002e36:	4870      	ldr	r0, [pc, #448]	; (8002ff8 <main+0x290>)
 8002e38:	f004 fbd0 	bl	80075dc <HAL_ADC_Start>
	  value = HAL_ADC_GetValue(&hadc1);
 8002e3c:	486e      	ldr	r0, [pc, #440]	; (8002ff8 <main+0x290>)
 8002e3e:	f004 fd75 	bl	800792c <HAL_ADC_GetValue>
 8002e42:	61b8      	str	r0, [r7, #24]
	  //!!Only For UI that is changing every moment, Just For Testing, Need Refactoring Later
	  if(mode==0) {
 8002e44:	7ffb      	ldrb	r3, [r7, #31]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d114      	bne.n	8002e74 <main+0x10c>
		  RTC_Get();
 8002e4a:	f002 fe93 	bl	8005b74 <RTC_Get>
		  UI_Home_Display_Date(real_time.ryear, real_time.rmon, real_time.rday);
 8002e4e:	4b6c      	ldr	r3, [pc, #432]	; (8003000 <main+0x298>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	4a6b      	ldr	r2, [pc, #428]	; (8003000 <main+0x298>)
 8002e54:	7891      	ldrb	r1, [r2, #2]
 8002e56:	4a6a      	ldr	r2, [pc, #424]	; (8003000 <main+0x298>)
 8002e58:	78d2      	ldrb	r2, [r2, #3]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe f9a2 	bl	80011a4 <UI_Home_Display_Date>
		  UI_Home_Display_Time(real_time.rhour, real_time.rmin, real_time.rsec);
 8002e60:	4b67      	ldr	r3, [pc, #412]	; (8003000 <main+0x298>)
 8002e62:	791b      	ldrb	r3, [r3, #4]
 8002e64:	4a66      	ldr	r2, [pc, #408]	; (8003000 <main+0x298>)
 8002e66:	7951      	ldrb	r1, [r2, #5]
 8002e68:	4a65      	ldr	r2, [pc, #404]	; (8003000 <main+0x298>)
 8002e6a:	7992      	ldrb	r2, [r2, #6]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe f9d5 	bl	800121c <UI_Home_Display_Time>
 8002e72:	e00c      	b.n	8002e8e <main+0x126>
	  }
	  else if (mode == 3){
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d104      	bne.n	8002e84 <main+0x11c>
		  RTC_Get();
 8002e7a:	f002 fe7b 	bl	8005b74 <RTC_Get>
		  UI_Stats_Update();
 8002e7e:	f7fe faa1 	bl	80013c4 <UI_Stats_Update>
 8002e82:	e004      	b.n	8002e8e <main+0x126>
	  }
	  else if (mode == 6){
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d101      	bne.n	8002e8e <main+0x126>
	  		  UI_Set_Update();
 8002e8a:	f7fe fbed 	bl	8001668 <UI_Set_Update>
	  	  }
	  get_TimeStamp(&real_time);
 8002e8e:	485c      	ldr	r0, [pc, #368]	; (8003000 <main+0x298>)
 8002e90:	f003 f80e 	bl	8005eb0 <get_TimeStamp>
		sec = real_time.rsec;
 8002e94:	4b5a      	ldr	r3, [pc, #360]	; (8003000 <main+0x298>)
 8002e96:	799b      	ldrb	r3, [r3, #6]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b5a      	ldr	r3, [pc, #360]	; (8003004 <main+0x29c>)
 8002e9c:	601a      	str	r2, [r3, #0]
	  if (petStats != sleep1 && petStats != sleep2 && mode==0 && next > RTC_raw() && !(exertimer <= RTC_raw() && EXER_TIMER_SET_FLAG)){
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	; (8003018 <main+0x2b0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a5e      	ldr	r2, [pc, #376]	; (800301c <main+0x2b4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d048      	beq.n	8002f3a <main+0x1d2>
 8002ea8:	4b5b      	ldr	r3, [pc, #364]	; (8003018 <main+0x2b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a5c      	ldr	r2, [pc, #368]	; (8003020 <main+0x2b8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d043      	beq.n	8002f3a <main+0x1d2>
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d140      	bne.n	8002f3a <main+0x1d2>
 8002eb8:	f002 ffe4 	bl	8005e84 <RTC_raw>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b59      	ldr	r3, [pc, #356]	; (8003024 <main+0x2bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d239      	bcs.n	8002f3a <main+0x1d2>
 8002ec6:	f002 ffdd 	bl	8005e84 <RTC_raw>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b4e      	ldr	r3, [pc, #312]	; (8003008 <main+0x2a0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d303      	bcc.n	8002edc <main+0x174>
 8002ed4:	4b54      	ldr	r3, [pc, #336]	; (8003028 <main+0x2c0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d12e      	bne.n	8002f3a <main+0x1d2>
		  if (DHT11_data.temp_int > 27){
 8002edc:	4b4b      	ldr	r3, [pc, #300]	; (800300c <main+0x2a4>)
 8002ede:	789b      	ldrb	r3, [r3, #2]
 8002ee0:	2b1b      	cmp	r3, #27
 8002ee2:	d910      	bls.n	8002f06 <main+0x19e>
			  if (real_time.rsec % 2 == 0){
 8002ee4:	4b46      	ldr	r3, [pc, #280]	; (8003000 <main+0x298>)
 8002ee6:	799b      	ldrb	r3, [r3, #6]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d103      	bne.n	8002efa <main+0x192>
				  petStats = hot1;
 8002ef2:	4b49      	ldr	r3, [pc, #292]	; (8003018 <main+0x2b0>)
 8002ef4:	4a4d      	ldr	r2, [pc, #308]	; (800302c <main+0x2c4>)
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e002      	b.n	8002f00 <main+0x198>
			  }
			  else {
				  petStats = hot2;
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <main+0x2b0>)
 8002efc:	4a4c      	ldr	r2, [pc, #304]	; (8003030 <main+0x2c8>)
 8002efe:	601a      	str	r2, [r3, #0]
			  }
			  pet_update = 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	77bb      	strb	r3, [r7, #30]
 8002f04:	e019      	b.n	8002f3a <main+0x1d2>
		  }
		  else if (DHT11_data.temp_int < 24){
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <main+0x2a4>)
 8002f08:	789b      	ldrb	r3, [r3, #2]
 8002f0a:	2b17      	cmp	r3, #23
 8002f0c:	d810      	bhi.n	8002f30 <main+0x1c8>
			  if (real_time.rsec % 2 == 0){
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <main+0x298>)
 8002f10:	799b      	ldrb	r3, [r3, #6]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d103      	bne.n	8002f24 <main+0x1bc>
				  petStats = cold1;
 8002f1c:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <main+0x2b0>)
 8002f1e:	4a45      	ldr	r2, [pc, #276]	; (8003034 <main+0x2cc>)
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e002      	b.n	8002f2a <main+0x1c2>
			  }
			  else {
				  petStats = cold2;
 8002f24:	4b3c      	ldr	r3, [pc, #240]	; (8003018 <main+0x2b0>)
 8002f26:	4a44      	ldr	r2, [pc, #272]	; (8003038 <main+0x2d0>)
 8002f28:	601a      	str	r2, [r3, #0]
			  }
			  pet_update = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	77bb      	strb	r3, [r7, #30]
 8002f2e:	e004      	b.n	8002f3a <main+0x1d2>
		  }
		  else {
			  petStats = normal;
 8002f30:	4b39      	ldr	r3, [pc, #228]	; (8003018 <main+0x2b0>)
 8002f32:	4a42      	ldr	r2, [pc, #264]	; (800303c <main+0x2d4>)
 8002f34:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	77bb      	strb	r3, [r7, #30]
		  }
	  }
	  do {
		  //Home Buttons
		  if(mode==0){
 8002f3a:	7ffb      	ldrb	r3, [r7, #31]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 80eb 	bne.w	8003118 <main+0x3b0>
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {
 8002f42:	4934      	ldr	r1, [pc, #208]	; (8003014 <main+0x2ac>)
 8002f44:	483e      	ldr	r0, [pc, #248]	; (8003040 <main+0x2d8>)
 8002f46:	f7fd ff99 	bl	8000e7c <Check_touchkey>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d017      	beq.n	8002f80 <main+0x218>
				  alarm_release(); mode_new = 1; USART_WATER_FLAG = 1;
 8002f50:	f7fe fc6c 	bl	800182c <alarm_release>
 8002f54:	2301      	movs	r3, #1
 8002f56:	74fb      	strb	r3, [r7, #19]
 8002f58:	4b3a      	ldr	r3, [pc, #232]	; (8003044 <main+0x2dc>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
				  if(EXER_TIMER_SET_FLAG && exertimer<= RTC_raw()) EXER_TIMER_SET_FLAG = 0;
 8002f5e:	4b32      	ldr	r3, [pc, #200]	; (8003028 <main+0x2c0>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8190 	beq.w	8003288 <main+0x520>
 8002f68:	f002 ff8c 	bl	8005e84 <RTC_raw>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <main+0x2a0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	f0c0 8188 	bcc.w	8003288 <main+0x520>
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <main+0x2c0>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
				  break;
 8002f7e:	e183      	b.n	8003288 <main+0x520>
			  }
			  if(Check_touchkey(&home_dark_mode,&Coordinate)) {mode_new = 2; break;}
 8002f80:	4924      	ldr	r1, [pc, #144]	; (8003014 <main+0x2ac>)
 8002f82:	4831      	ldr	r0, [pc, #196]	; (8003048 <main+0x2e0>)
 8002f84:	f7fd ff7a 	bl	8000e7c <Check_touchkey>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <main+0x22c>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	74fb      	strb	r3, [r7, #19]
 8002f92:	e1b0      	b.n	80032f6 <main+0x58e>
			  if(value > 3000 && petStats != sleep1 && petStats != sleep2  && petStats != sleep_water){mode_new = 2; break;}
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d911      	bls.n	8002fc2 <main+0x25a>
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <main+0x2b0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <main+0x2b4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00c      	beq.n	8002fc2 <main+0x25a>
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <main+0x2b0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <main+0x2b8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <main+0x25a>
 8002fb2:	4b19      	ldr	r3, [pc, #100]	; (8003018 <main+0x2b0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a25      	ldr	r2, [pc, #148]	; (800304c <main+0x2e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d002      	beq.n	8002fc2 <main+0x25a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	74fb      	strb	r3, [r7, #19]
 8002fc0:	e199      	b.n	80032f6 <main+0x58e>
			  if(value < 3000 && (petStats == sleep1 || petStats == sleep2  || petStats == sleep_water)){mode_new = 2; break;}
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d841      	bhi.n	8003050 <main+0x2e8>
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <main+0x2b0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a12      	ldr	r2, [pc, #72]	; (800301c <main+0x2b4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d009      	beq.n	8002fea <main+0x282>
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <main+0x2b0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a11      	ldr	r2, [pc, #68]	; (8003020 <main+0x2b8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <main+0x282>
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <main+0x2b0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <main+0x2e4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d132      	bne.n	8003050 <main+0x2e8>
 8002fea:	2302      	movs	r3, #2
 8002fec:	74fb      	strb	r3, [r7, #19]
 8002fee:	e182      	b.n	80032f6 <main+0x58e>
 8002ff0:	20000184 	.word	0x20000184
 8002ff4:	40011400 	.word	0x40011400
 8002ff8:	20000154 	.word	0x20000154
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000368 	.word	0x20000368
 8003004:	2000038c 	.word	0x2000038c
 8003008:	20000388 	.word	0x20000388
 800300c:	2000035c 	.word	0x2000035c
 8003010:	20000018 	.word	0x20000018
 8003014:	20000364 	.word	0x20000364
 8003018:	2000000c 	.word	0x2000000c
 800301c:	08037ad0 	.word	0x08037ad0
 8003020:	0803eb58 	.word	0x0803eb58
 8003024:	20000378 	.word	0x20000378
 8003028:	20000394 	.word	0x20000394
 800302c:	08022938 	.word	0x08022938
 8003030:	080299c0 	.word	0x080299c0
 8003034:	0800d7a0 	.word	0x0800d7a0
 8003038:	08014828 	.word	0x08014828
 800303c:	08030a48 	.word	0x08030a48
 8003040:	0800d62c 	.word	0x0800d62c
 8003044:	20000391 	.word	0x20000391
 8003048:	0800d63c 	.word	0x0800d63c
 800304c:	08045be0 	.word	0x08045be0
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep1 && petStats != sleep2  && petStats != sleep_water) {petStats = happy1;}; break;}
 8003050:	498f      	ldr	r1, [pc, #572]	; (8003290 <main+0x528>)
 8003052:	4890      	ldr	r0, [pc, #576]	; (8003294 <main+0x52c>)
 8003054:	f7fd ff12 	bl	8000e7c <Check_touchkey>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d017      	beq.n	800308e <main+0x326>
 800305e:	2301      	movs	r3, #1
 8003060:	77bb      	strb	r3, [r7, #30]
 8003062:	4b8d      	ldr	r3, [pc, #564]	; (8003298 <main+0x530>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a8d      	ldr	r2, [pc, #564]	; (800329c <main+0x534>)
 8003068:	4293      	cmp	r3, r2
 800306a:	f000 810f 	beq.w	800328c <main+0x524>
 800306e:	4b8a      	ldr	r3, [pc, #552]	; (8003298 <main+0x530>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a8b      	ldr	r2, [pc, #556]	; (80032a0 <main+0x538>)
 8003074:	4293      	cmp	r3, r2
 8003076:	f000 8109 	beq.w	800328c <main+0x524>
 800307a:	4b87      	ldr	r3, [pc, #540]	; (8003298 <main+0x530>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a89      	ldr	r2, [pc, #548]	; (80032a4 <main+0x53c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	f000 8103 	beq.w	800328c <main+0x524>
 8003086:	4b84      	ldr	r3, [pc, #528]	; (8003298 <main+0x530>)
 8003088:	4a87      	ldr	r2, [pc, #540]	; (80032a8 <main+0x540>)
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e0fe      	b.n	800328c <main+0x524>
			  if(Check_touchkey(&home_stats,&Coordinate)) {mode_new = 3; break;}
 800308e:	4980      	ldr	r1, [pc, #512]	; (8003290 <main+0x528>)
 8003090:	4886      	ldr	r0, [pc, #536]	; (80032ac <main+0x544>)
 8003092:	f7fd fef3 	bl	8000e7c <Check_touchkey>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <main+0x33a>
 800309c:	2303      	movs	r3, #3
 800309e:	74fb      	strb	r3, [r7, #19]
 80030a0:	e129      	b.n	80032f6 <main+0x58e>
			  if(Check_touchkey(&home_config,&Coordinate)) {mode_new = 4; break;}
 80030a2:	497b      	ldr	r1, [pc, #492]	; (8003290 <main+0x528>)
 80030a4:	4882      	ldr	r0, [pc, #520]	; (80032b0 <main+0x548>)
 80030a6:	f7fd fee9 	bl	8000e7c <Check_touchkey>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <main+0x34e>
 80030b0:	2304      	movs	r3, #4
 80030b2:	74fb      	strb	r3, [r7, #19]
 80030b4:	e11f      	b.n	80032f6 <main+0x58e>
			  if (Check_touchkey(&home_set, &Coordinate)) {
 80030b6:	4976      	ldr	r1, [pc, #472]	; (8003290 <main+0x528>)
 80030b8:	487e      	ldr	r0, [pc, #504]	; (80032b4 <main+0x54c>)
 80030ba:	f7fd fedf 	bl	8000e7c <Check_touchkey>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <main+0x362>
			  					mode_new = 6;
 80030c4:	2306      	movs	r3, #6
 80030c6:	74fb      	strb	r3, [r7, #19]
			  					break;
 80030c8:	e115      	b.n	80032f6 <main+0x58e>
			  				}
			  if (petStats == sleep1 && sec %2 == 0){
 80030ca:	4b73      	ldr	r3, [pc, #460]	; (8003298 <main+0x530>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a73      	ldr	r2, [pc, #460]	; (800329c <main+0x534>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d10b      	bne.n	80030ec <main+0x384>
 80030d4:	4b78      	ldr	r3, [pc, #480]	; (80032b8 <main+0x550>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <main+0x384>
			  		  		petStats = sleep2;
 80030e0:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <main+0x530>)
 80030e2:	4a6f      	ldr	r2, [pc, #444]	; (80032a0 <main+0x538>)
 80030e4:	601a      	str	r2, [r3, #0]
			  		  		pet_update = 1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	77bb      	strb	r3, [r7, #30]
 80030ea:	e104      	b.n	80032f6 <main+0x58e>
			  		  }
			  else if (petStats == sleep2 && sec %2 == 1){
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <main+0x530>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a6b      	ldr	r2, [pc, #428]	; (80032a0 <main+0x538>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	f040 80ff 	bne.w	80032f6 <main+0x58e>
 80030f8:	4b6f      	ldr	r3, [pc, #444]	; (80032b8 <main+0x550>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	bfb8      	it	lt
 8003104:	425b      	neglt	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	f040 80f5 	bne.w	80032f6 <main+0x58e>
			  		  		petStats = sleep1;
 800310c:	4b62      	ldr	r3, [pc, #392]	; (8003298 <main+0x530>)
 800310e:	4a63      	ldr	r2, [pc, #396]	; (800329c <main+0x534>)
 8003110:	601a      	str	r2, [r3, #0]
			  		  		pet_update = 1;
 8003112:	2301      	movs	r3, #1
 8003114:	77bb      	strb	r3, [r7, #30]
 8003116:	e0ee      	b.n	80032f6 <main+0x58e>
			  		  }
		  }
		  //Other Buttons In Other Screen
		  else if (mode==3){//Statistics
 8003118:	7ffb      	ldrb	r3, [r7, #31]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d10a      	bne.n	8003134 <main+0x3cc>
			  if(Check_touchkey(&stats_home,&Coordinate)) {mode_new = 0; break;}
 800311e:	495c      	ldr	r1, [pc, #368]	; (8003290 <main+0x528>)
 8003120:	4866      	ldr	r0, [pc, #408]	; (80032bc <main+0x554>)
 8003122:	f7fd feab 	bl	8000e7c <Check_touchkey>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80e4 	beq.w	80032f6 <main+0x58e>
 800312e:	2300      	movs	r3, #0
 8003130:	74fb      	strb	r3, [r7, #19]
 8003132:	e0e0      	b.n	80032f6 <main+0x58e>
		  }else if (mode==4){//Configuration
 8003134:	7ffb      	ldrb	r3, [r7, #31]
 8003136:	2b04      	cmp	r3, #4
 8003138:	d117      	bne.n	800316a <main+0x402>
			  if(Check_touchkey(&config_home,&Coordinate)) {mode_new = 0; break;}
 800313a:	4955      	ldr	r1, [pc, #340]	; (8003290 <main+0x528>)
 800313c:	4860      	ldr	r0, [pc, #384]	; (80032c0 <main+0x558>)
 800313e:	f7fd fe9d 	bl	8000e7c <Check_touchkey>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <main+0x3e6>
 8003148:	2300      	movs	r3, #0
 800314a:	74fb      	strb	r3, [r7, #19]
 800314c:	e0d3      	b.n	80032f6 <main+0x58e>
			  if(Check_touchkey(&config_set_time,&Coordinate)) {mode_new = 5; USART_GET_TIME_FLAG = 1; break;}
 800314e:	4950      	ldr	r1, [pc, #320]	; (8003290 <main+0x528>)
 8003150:	485c      	ldr	r0, [pc, #368]	; (80032c4 <main+0x55c>)
 8003152:	f7fd fe93 	bl	8000e7c <Check_touchkey>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80cc 	beq.w	80032f6 <main+0x58e>
 800315e:	2305      	movs	r3, #5
 8003160:	74fb      	strb	r3, [r7, #19]
 8003162:	4b59      	ldr	r3, [pc, #356]	; (80032c8 <main+0x560>)
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e0c5      	b.n	80032f6 <main+0x58e>
		  }else if (mode==5){
 800316a:	7ffb      	ldrb	r3, [r7, #31]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d10d      	bne.n	800318c <main+0x424>
			  if(Check_touchkey(&time_set_back,&Coordinate)) {
 8003170:	4947      	ldr	r1, [pc, #284]	; (8003290 <main+0x528>)
 8003172:	4856      	ldr	r0, [pc, #344]	; (80032cc <main+0x564>)
 8003174:	f7fd fe82 	bl	8000e7c <Check_touchkey>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80bb 	beq.w	80032f6 <main+0x58e>
				  mode_new = 4;
 8003180:	2304      	movs	r3, #4
 8003182:	74fb      	strb	r3, [r7, #19]
				  USART_GET_TIME_FLAG = 0;
 8003184:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <main+0x560>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
				  break;
 800318a:	e0b4      	b.n	80032f6 <main+0x58e>
			  }
		  }
		  else if (mode==6){
 800318c:	7ffb      	ldrb	r3, [r7, #31]
 800318e:	2b06      	cmp	r3, #6
 8003190:	f040 80b1 	bne.w	80032f6 <main+0x58e>
			  if (Check_touchkey(&stats_home, &Coordinate)) {
 8003194:	493e      	ldr	r1, [pc, #248]	; (8003290 <main+0x528>)
 8003196:	4849      	ldr	r0, [pc, #292]	; (80032bc <main+0x554>)
 8003198:	f7fd fe70 	bl	8000e7c <Check_touchkey>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <main+0x440>
			  					mode_new = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	74fb      	strb	r3, [r7, #19]
			  					break;
 80031a6:	e0a6      	b.n	80032f6 <main+0x58e>
			  				}
			  				if (Check_touchkey(&plus_hour, &Coordinate)) {
 80031a8:	4939      	ldr	r1, [pc, #228]	; (8003290 <main+0x528>)
 80031aa:	4849      	ldr	r0, [pc, #292]	; (80032d0 <main+0x568>)
 80031ac:	f7fd fe66 	bl	8000e7c <Check_touchkey>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <main+0x462>
			  					exertime += 3600;
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <main+0x56c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80031be:	4a45      	ldr	r2, [pc, #276]	; (80032d4 <main+0x56c>)
 80031c0:	6013      	str	r3, [r2, #0]
			  					HAL_Delay(100);
 80031c2:	2064      	movs	r0, #100	; 0x64
 80031c4:	f004 f8fc 	bl	80073c0 <HAL_Delay>
			  					break;
 80031c8:	e095      	b.n	80032f6 <main+0x58e>
			  				} else if (Check_touchkey(&minus_hour, &Coordinate)) {
 80031ca:	4931      	ldr	r1, [pc, #196]	; (8003290 <main+0x528>)
 80031cc:	4842      	ldr	r0, [pc, #264]	; (80032d8 <main+0x570>)
 80031ce:	f7fd fe55 	bl	8000e7c <Check_touchkey>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d012      	beq.n	80031fe <main+0x496>
			  					if (exertime > 3600) {
 80031d8:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <main+0x56c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80031e0:	d906      	bls.n	80031f0 <main+0x488>
			  						exertime -= 3600;
 80031e2:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <main+0x56c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80031ea:	4a3a      	ldr	r2, [pc, #232]	; (80032d4 <main+0x56c>)
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e002      	b.n	80031f6 <main+0x48e>
			  					} else {
			  						exertime = 0;
 80031f0:	4b38      	ldr	r3, [pc, #224]	; (80032d4 <main+0x56c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
			  					}
			  					HAL_Delay(100);
 80031f6:	2064      	movs	r0, #100	; 0x64
 80031f8:	f004 f8e2 	bl	80073c0 <HAL_Delay>
			  					break;
 80031fc:	e07b      	b.n	80032f6 <main+0x58e>
			  				} else if (Check_touchkey(&plus_min, &Coordinate)) {
 80031fe:	4924      	ldr	r1, [pc, #144]	; (8003290 <main+0x528>)
 8003200:	4836      	ldr	r0, [pc, #216]	; (80032dc <main+0x574>)
 8003202:	f7fd fe3b 	bl	8000e7c <Check_touchkey>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <main+0x4b6>
			  					exertime += 60;
 800320c:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <main+0x56c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	333c      	adds	r3, #60	; 0x3c
 8003212:	4a30      	ldr	r2, [pc, #192]	; (80032d4 <main+0x56c>)
 8003214:	6013      	str	r3, [r2, #0]
			  					HAL_Delay(100);
 8003216:	2064      	movs	r0, #100	; 0x64
 8003218:	f004 f8d2 	bl	80073c0 <HAL_Delay>
			  					break;
 800321c:	e06b      	b.n	80032f6 <main+0x58e>
			  				} else if (Check_touchkey(&minus_min, &Coordinate)) {
 800321e:	491c      	ldr	r1, [pc, #112]	; (8003290 <main+0x528>)
 8003220:	482f      	ldr	r0, [pc, #188]	; (80032e0 <main+0x578>)
 8003222:	f7fd fe2b 	bl	8000e7c <Check_touchkey>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d010      	beq.n	800324e <main+0x4e6>
			  					if (exertime > 60) {
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <main+0x56c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b3c      	cmp	r3, #60	; 0x3c
 8003232:	d905      	bls.n	8003240 <main+0x4d8>
			  						exertime -= 60;
 8003234:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <main+0x56c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3b3c      	subs	r3, #60	; 0x3c
 800323a:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <main+0x56c>)
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e002      	b.n	8003246 <main+0x4de>
			  					} else {
			  						exertime = 0;
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <main+0x56c>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
			  					}
			  					HAL_Delay(100);
 8003246:	2064      	movs	r0, #100	; 0x64
 8003248:	f004 f8ba 	bl	80073c0 <HAL_Delay>
			  					break;
 800324c:	e053      	b.n	80032f6 <main+0x58e>
			  				} else if (Check_touchkey(&set_set, &Coordinate)) {
 800324e:	4910      	ldr	r1, [pc, #64]	; (8003290 <main+0x528>)
 8003250:	4824      	ldr	r0, [pc, #144]	; (80032e4 <main+0x57c>)
 8003252:	f7fd fe13 	bl	8000e7c <Check_touchkey>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d04c      	beq.n	80032f6 <main+0x58e>
			  					if(exertime!=0){
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <main+0x56c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d047      	beq.n	80032f4 <main+0x58c>
			  						exertime_fixed = exertime;
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <main+0x56c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <main+0x580>)
 800326a:	6013      	str	r3, [r2, #0]
									exertimer = RTC_raw() + exertime;
 800326c:	f002 fe0a 	bl	8005e84 <RTC_raw>
 8003270:	4602      	mov	r2, r0
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <main+0x56c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4413      	add	r3, r2
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <main+0x584>)
 800327a:	6013      	str	r3, [r2, #0]
									EXER_TIMER_SET_FLAG = 1;
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <main+0x588>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
									mode_new = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	74fb      	strb	r3, [r7, #19]
			  					}
			  					break;
 8003286:	e035      	b.n	80032f4 <main+0x58c>
				  break;
 8003288:	bf00      	nop
 800328a:	e034      	b.n	80032f6 <main+0x58e>
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep1 && petStats != sleep2  && petStats != sleep_water) {petStats = happy1;}; break;}
 800328c:	bf00      	nop
 800328e:	e032      	b.n	80032f6 <main+0x58e>
 8003290:	20000364 	.word	0x20000364
 8003294:	0800d64c 	.word	0x0800d64c
 8003298:	2000000c 	.word	0x2000000c
 800329c:	08037ad0 	.word	0x08037ad0
 80032a0:	0803eb58 	.word	0x0803eb58
 80032a4:	08045be0 	.word	0x08045be0
 80032a8:	0801b8b0 	.word	0x0801b8b0
 80032ac:	0800d65c 	.word	0x0800d65c
 80032b0:	0800d66c 	.word	0x0800d66c
 80032b4:	0800d6bc 	.word	0x0800d6bc
 80032b8:	2000038c 	.word	0x2000038c
 80032bc:	0800d67c 	.word	0x0800d67c
 80032c0:	0800d69c 	.word	0x0800d69c
 80032c4:	0800d68c 	.word	0x0800d68c
 80032c8:	20000390 	.word	0x20000390
 80032cc:	0800d6ac 	.word	0x0800d6ac
 80032d0:	0800d6cc 	.word	0x0800d6cc
 80032d4:	20000380 	.word	0x20000380
 80032d8:	0800d6ec 	.word	0x0800d6ec
 80032dc:	0800d6dc 	.word	0x0800d6dc
 80032e0:	0800d6fc 	.word	0x0800d6fc
 80032e4:	0800d70c 	.word	0x0800d70c
 80032e8:	20000384 	.word	0x20000384
 80032ec:	20000388 	.word	0x20000388
 80032f0:	20000394 	.word	0x20000394
			  					break;
 80032f4:	bf00      	nop


	  } while (0);

	  //Reset Coordinates
	  XPT2046_Reset_TouchPoint(&Coordinate);
 80032f6:	487c      	ldr	r0, [pc, #496]	; (80034e8 <main+0x780>)
 80032f8:	f003 ffcb 	bl	8007292 <XPT2046_Reset_TouchPoint>

	  if(next<= RTC_raw() || (exertimer<= RTC_raw() && EXER_TIMER_SET_FLAG)){ //Water/ Exercise Alarm
 80032fc:	f002 fdc2 	bl	8005e84 <RTC_raw>
 8003300:	4602      	mov	r2, r0
 8003302:	4b7a      	ldr	r3, [pc, #488]	; (80034ec <main+0x784>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d20a      	bcs.n	8003320 <main+0x5b8>
 800330a:	f002 fdbb 	bl	8005e84 <RTC_raw>
 800330e:	4602      	mov	r2, r0
 8003310:	4b77      	ldr	r3, [pc, #476]	; (80034f0 <main+0x788>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d33a      	bcc.n	800338e <main+0x626>
 8003318:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <main+0x78c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d036      	beq.n	800338e <main+0x626>
		  if(mode != 1) { //Not Drinking Water
 8003320:	7ffb      	ldrb	r3, [r7, #31]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d025      	beq.n	8003372 <main+0x60a>
			  if(!ALARM_TIMES_UP_RENDER_FLAG){ //Alarm Event that do only once
 8003326:	4b74      	ldr	r3, [pc, #464]	; (80034f8 <main+0x790>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11e      	bne.n	800336c <main+0x604>
				  Beep_set(63999, 1124, 562);//2 Hz
 800332e:	f240 2232 	movw	r2, #562	; 0x232
 8003332:	f240 4164 	movw	r1, #1124	; 0x464
 8003336:	f64f 10ff 	movw	r0, #63999	; 0xf9ff
 800333a:	f7fe faff 	bl	800193c <Beep_set>
				  Beep_start();
 800333e:	f7fe fae9 	bl	8001914 <Beep_start>
				  pet_update = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	77bb      	strb	r3, [r7, #30]
				  mode_new = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	74fb      	strb	r3, [r7, #19]
				  USART_GET_TIME_FLAG = 0; //Prevent Get Time Flag causing Other ESP8266 functions get stuck
 800334a:	4b6c      	ldr	r3, [pc, #432]	; (80034fc <main+0x794>)
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
				  if((exertimer<= RTC_raw() && EXER_TIMER_SET_FLAG)){
 8003350:	f002 fd98 	bl	8005e84 <RTC_raw>
 8003354:	4602      	mov	r2, r0
 8003356:	4b66      	ldr	r3, [pc, #408]	; (80034f0 <main+0x788>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d306      	bcc.n	800336c <main+0x604>
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <main+0x78c>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <main+0x604>
					  USART_EXERCISE_FLAG = 1; //Start Sending Exercise Data
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <main+0x798>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  alarm_times_up();
 800336c:	f7fe fa40 	bl	80017f0 <alarm_times_up>
 8003370:	e00d      	b.n	800338e <main+0x626>
		  }else{//In drinking Mode, Prevent Retriggering Alarm Just after drinking
			  if((exertimer<= RTC_raw() && EXER_TIMER_SET_FLAG)){
 8003372:	f002 fd87 	bl	8005e84 <RTC_raw>
 8003376:	4602      	mov	r2, r0
 8003378:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <main+0x788>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d306      	bcc.n	800338e <main+0x626>
 8003380:	4b5c      	ldr	r3, [pc, #368]	; (80034f4 <main+0x78c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <main+0x626>
				  EXER_TIMER_SET_FLAG = 0;
 8003388:	4b5a      	ldr	r3, [pc, #360]	; (80034f4 <main+0x78c>)
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  if(mode != mode_new){
 800338e:	7cfb      	ldrb	r3, [r7, #19]
 8003390:	7ffa      	ldrb	r2, [r7, #31]
 8003392:	429a      	cmp	r2, r3
 8003394:	d003      	beq.n	800339e <main+0x636>
		  mode = mode_new;
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	77fb      	strb	r3, [r7, #31]
		  render_done = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	74bb      	strb	r3, [r7, #18]
	  }

	  //Render Pet Image If Updated
	  if(pet_update){
 800339e:	7fbb      	ldrb	r3, [r7, #30]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <main+0x64e>
		  UI_Home_Display_Pet(60,70,petStats);
 80033a4:	4b57      	ldr	r3, [pc, #348]	; (8003504 <main+0x79c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	2146      	movs	r1, #70	; 0x46
 80033ac:	203c      	movs	r0, #60	; 0x3c
 80033ae:	f7fd ff6f 	bl	8001290 <UI_Home_Display_Pet>
		  pet_update = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	77bb      	strb	r3, [r7, #30]
	  }

	  //Flag Enables Every 30 Seconds
	  if(DHT11_SCHEDULE_FLAG){
 80033b6:	4b54      	ldr	r3, [pc, #336]	; (8003508 <main+0x7a0>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <main+0x66c>
		  DHT11_ReadData(&DHT11_data);
 80033be:	4853      	ldr	r0, [pc, #332]	; (800350c <main+0x7a4>)
 80033c0:	f7fe fbdb 	bl	8001b7a <DHT11_ReadData>
		  DHT11_SCHEDULE_FLAG = 0;
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <main+0x7a0>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
		  if(mode==0) UI_Home_Display_DHT11();
 80033ca:	7ffb      	ldrb	r3, [r7, #31]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <main+0x66c>
 80033d0:	f7fd ff70 	bl	80012b4 <UI_Home_Display_DHT11>
	  }



	  //Read Buffer when flag on
	  if(USART_GET_TIME_FLAG && mode==5){
 80033d4:	4b49      	ldr	r3, [pc, #292]	; (80034fc <main+0x794>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d04e      	beq.n	800347a <main+0x712>
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d14b      	bne.n	800347a <main+0x712>
		  if(USART_GET_TIME_FLAG==1) {esp8266_step_flag = 0; USART_GET_TIME_FLAG = 2;}
 80033e2:	4b46      	ldr	r3, [pc, #280]	; (80034fc <main+0x794>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <main+0x68e>
 80033ea:	4b49      	ldr	r3, [pc, #292]	; (8003510 <main+0x7a8>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	4b42      	ldr	r3, [pc, #264]	; (80034fc <main+0x794>)
 80033f2:	2202      	movs	r2, #2
 80033f4:	701a      	strb	r2, [r3, #0]
		  esp8266_get_time(); //Do The Get Time Procedures
 80033f6:	f7fe fe03 	bl	8002000 <esp8266_get_time>

		  if (esp8266_step_flag == 9){// Reading Done
 80033fa:	4b45      	ldr	r3, [pc, #276]	; (8003510 <main+0x7a8>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b09      	cmp	r3, #9
 8003400:	d13b      	bne.n	800347a <main+0x712>
			  char* t = USART_DATE_BUFFER;
 8003402:	4b44      	ldr	r3, [pc, #272]	; (8003514 <main+0x7ac>)
 8003404:	617b      	str	r3, [r7, #20]
			  uint16_t dt[6];//yearmonth, day, hour, min, sec
			  sscanf(t, "%04d%02d%02d%02d%02d%02d", &dt[0], &dt[1],&dt[2],&dt[3],&dt[4],&dt[5]);
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	1c99      	adds	r1, r3, #2
 800340a:	1d3a      	adds	r2, r7, #4
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	330a      	adds	r3, #10
 8003410:	9303      	str	r3, [sp, #12]
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	3308      	adds	r3, #8
 8003416:	9302      	str	r3, [sp, #8]
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	3306      	adds	r3, #6
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	3304      	adds	r3, #4
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	460b      	mov	r3, r1
 8003426:	493c      	ldr	r1, [pc, #240]	; (8003518 <main+0x7b0>)
 8003428:	6978      	ldr	r0, [r7, #20]
 800342a:	f007 fda9 	bl	800af80 <siscanf>


			  //Update RTC Success
			  if(RTC_Set(dt[0],dt[1],dt[2],dt[3],dt[4],dt[5])==0){
 800342e:	88b8      	ldrh	r0, [r7, #4]
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	b259      	sxtb	r1, r3
 8003434:	893b      	ldrh	r3, [r7, #8]
 8003436:	b2dc      	uxtb	r4, r3
 8003438:	897b      	ldrh	r3, [r7, #10]
 800343a:	b2dd      	uxtb	r5, r3
 800343c:	89bb      	ldrh	r3, [r7, #12]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	89fa      	ldrh	r2, [r7, #14]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	9201      	str	r2, [sp, #4]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	462b      	mov	r3, r5
 800344a:	4622      	mov	r2, r4
 800344c:	f002 fae8 	bl	8005a20 <RTC_Set>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d111      	bne.n	800347a <main+0x712>

				  //Update Flag And UI
				  USART_GET_TIME_FLAG = 0;
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <main+0x794>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
				  LCD_Clear(0, 100, 250,150);
 800345c:	2396      	movs	r3, #150	; 0x96
 800345e:	22fa      	movs	r2, #250	; 0xfa
 8003460:	2164      	movs	r1, #100	; 0x64
 8003462:	2000      	movs	r0, #0
 8003464:	f7ff f8b4 	bl	80025d0 <LCD_Clear>
				  LCD_DrawString(30, 100, "Done...");
 8003468:	4a2c      	ldr	r2, [pc, #176]	; (800351c <main+0x7b4>)
 800346a:	2164      	movs	r1, #100	; 0x64
 800346c:	201e      	movs	r0, #30
 800346e:	f7ff f9a7 	bl	80027c0 <LCD_DrawString>
				  alarm_update_last();
 8003472:	f7fe f9b1 	bl	80017d8 <alarm_update_last>
				  alarm_update_next();
 8003476:	f7fe f971 	bl	800175c <alarm_update_next>
	  	  	  }
		  }
	  }

	  //Upload Exercise Data
	  if(USART_EXERCISE_FLAG && !USART_GET_TIME_FLAG){
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <main+0x798>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00f      	beq.n	80034a2 <main+0x73a>
 8003482:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <main+0x794>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <main+0x73a>
		  if(USART_EXERCISE_FLAG==1) {esp8266_step_flag = 0; USART_EXERCISE_FLAG=2;} //Reset Step Flag
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <main+0x798>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <main+0x736>
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <main+0x7a8>)
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <main+0x798>)
 800349a:	2202      	movs	r2, #2
 800349c:	701a      	strb	r2, [r3, #0]
		  esp8266_update_exercise();
 800349e:	f7fe fe45 	bl	800212c <esp8266_update_exercise>
	  }

	  //Upload drink water data
	  if(USART_WATER_FLAG && !USART_GET_TIME_FLAG && !USART_EXERCISE_FLAG){
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <main+0x7b8>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d013      	beq.n	80034d2 <main+0x76a>
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <main+0x794>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <main+0x76a>
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <main+0x798>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <main+0x76a>
		  if(USART_WATER_FLAG==1) {esp8266_step_flag = 0;USART_WATER_FLAG=2;} //Reset Step Flag
 80034ba:	4b19      	ldr	r3, [pc, #100]	; (8003520 <main+0x7b8>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <main+0x766>
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <main+0x7a8>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <main+0x7b8>)
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
		  esp8266_update_water();
 80034ce:	f7fe fdef 	bl	80020b0 <esp8266_update_water>
	  }


	  //Render LCD If Enter New Mode
	  Render(&mode_new, &render_done,petStats);
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <main+0x79c>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f107 0112 	add.w	r1, r7, #18
 80034da:	f107 0313 	add.w	r3, r7, #19
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fcf6 	bl	8000ed0 <Render>
	  XPT2046_Get_TouchedPoint(&Coordinate,
 80034e4:	e4a3      	b.n	8002e2e <main+0xc6>
 80034e6:	bf00      	nop
 80034e8:	20000364 	.word	0x20000364
 80034ec:	20000378 	.word	0x20000378
 80034f0:	20000388 	.word	0x20000388
 80034f4:	20000394 	.word	0x20000394
 80034f8:	20000393 	.word	0x20000393
 80034fc:	20000390 	.word	0x20000390
 8003500:	20000392 	.word	0x20000392
 8003504:	2000000c 	.word	0x2000000c
 8003508:	20000010 	.word	0x20000010
 800350c:	2000035c 	.word	0x2000035c
 8003510:	20000000 	.word	0x20000000
 8003514:	20000398 	.word	0x20000398
 8003518:	0800cf94 	.word	0x0800cf94
 800351c:	0800cfb0 	.word	0x0800cfb0
 8003520:	20000391 	.word	0x20000391

08003524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b096      	sub	sp, #88	; 0x58
 8003528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800352a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800352e:	2228      	movs	r2, #40	; 0x28
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f007 fd1c 	bl	800af70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003538:	f107 031c 	add.w	r3, r7, #28
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003548:	1d3b      	adds	r3, r7, #4
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]
 8003554:	611a      	str	r2, [r3, #16]
 8003556:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003558:	2305      	movs	r3, #5
 800355a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800355c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003560:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003562:	2300      	movs	r3, #0
 8003564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003566:	2301      	movs	r3, #1
 8003568:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800356a:	2301      	movs	r3, #1
 800356c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800356e:	2302      	movs	r3, #2
 8003570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003576:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003578:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800357c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800357e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003582:	4618      	mov	r0, r3
 8003584:	f005 f806 	bl	8008594 <HAL_RCC_OscConfig>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800358e:	f000 fba3 	bl	8003cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003592:	230f      	movs	r3, #15
 8003594:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003596:	2302      	movs	r3, #2
 8003598:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800359e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035a8:	f107 031c 	add.w	r3, r7, #28
 80035ac:	2102      	movs	r1, #2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f005 fa54 	bl	8008a5c <HAL_RCC_ClockConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80035ba:	f000 fb8d 	bl	8003cd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80035be:	2303      	movs	r3, #3
 80035c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80035c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035cc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035ce:	1d3b      	adds	r3, r7, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f005 fbff 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80035dc:	f000 fb7c 	bl	8003cd8 <Error_Handler>
  }
}
 80035e0:	bf00      	nop
 80035e2:	3758      	adds	r7, #88	; 0x58
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80035f8:	4b18      	ldr	r3, [pc, #96]	; (800365c <MX_ADC1_Init+0x74>)
 80035fa:	4a19      	ldr	r2, [pc, #100]	; (8003660 <MX_ADC1_Init+0x78>)
 80035fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035fe:	4b17      	ldr	r3, [pc, #92]	; (800365c <MX_ADC1_Init+0x74>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003604:	4b15      	ldr	r3, [pc, #84]	; (800365c <MX_ADC1_Init+0x74>)
 8003606:	2201      	movs	r2, #1
 8003608:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800360a:	4b14      	ldr	r3, [pc, #80]	; (800365c <MX_ADC1_Init+0x74>)
 800360c:	2200      	movs	r2, #0
 800360e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003610:	4b12      	ldr	r3, [pc, #72]	; (800365c <MX_ADC1_Init+0x74>)
 8003612:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003616:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <MX_ADC1_Init+0x74>)
 800361a:	2200      	movs	r2, #0
 800361c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <MX_ADC1_Init+0x74>)
 8003620:	2201      	movs	r2, #1
 8003622:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003624:	480d      	ldr	r0, [pc, #52]	; (800365c <MX_ADC1_Init+0x74>)
 8003626:	f003 feef 	bl	8007408 <HAL_ADC_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003630:	f000 fb52 	bl	8003cd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003634:	230c      	movs	r3, #12
 8003636:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003638:	2301      	movs	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800363c:	2305      	movs	r3, #5
 800363e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	4619      	mov	r1, r3
 8003644:	4805      	ldr	r0, [pc, #20]	; (800365c <MX_ADC1_Init+0x74>)
 8003646:	f004 f97d 	bl	8007944 <HAL_ADC_ConfigChannel>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003650:	f000 fb42 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000154 	.word	0x20000154
 8003660:	40012400 	.word	0x40012400

08003664 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b094      	sub	sp, #80	; 0x50
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800366a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003678:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003682:	f107 031c 	add.w	r3, r7, #28
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	609a      	str	r2, [r3, #8]
 800368e:	60da      	str	r2, [r3, #12]
 8003690:	611a      	str	r2, [r3, #16]
 8003692:	615a      	str	r2, [r3, #20]
 8003694:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003696:	463b      	mov	r3, r7
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]
 80036a4:	615a      	str	r2, [r3, #20]
 80036a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <MX_TIM1_Init+0x144>)
 80036aa:	4a40      	ldr	r2, [pc, #256]	; (80037ac <MX_TIM1_Init+0x148>)
 80036ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <MX_TIM1_Init+0x144>)
 80036b0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80036b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <MX_TIM1_Init+0x144>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1124;
 80036bc:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <MX_TIM1_Init+0x144>)
 80036be:	f240 4264 	movw	r2, #1124	; 0x464
 80036c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c4:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <MX_TIM1_Init+0x144>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <MX_TIM1_Init+0x144>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <MX_TIM1_Init+0x144>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036d6:	4834      	ldr	r0, [pc, #208]	; (80037a8 <MX_TIM1_Init+0x144>)
 80036d8:	f005 fea6 	bl	8009428 <HAL_TIM_Base_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80036e2:	f000 faf9 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ea:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036f0:	4619      	mov	r1, r3
 80036f2:	482d      	ldr	r0, [pc, #180]	; (80037a8 <MX_TIM1_Init+0x144>)
 80036f4:	f006 f9da 	bl	8009aac <HAL_TIM_ConfigClockSource>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80036fe:	f000 faeb 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003702:	4829      	ldr	r0, [pc, #164]	; (80037a8 <MX_TIM1_Init+0x144>)
 8003704:	f005 ff43 	bl	800958e <HAL_TIM_PWM_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800370e:	f000 fae3 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003712:	2300      	movs	r3, #0
 8003714:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003716:	2300      	movs	r3, #0
 8003718:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800371a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800371e:	4619      	mov	r1, r3
 8003720:	4821      	ldr	r0, [pc, #132]	; (80037a8 <MX_TIM1_Init+0x144>)
 8003722:	f006 fe3c 	bl	800a39e <HAL_TIMEx_MasterConfigSynchronization>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800372c:	f000 fad4 	bl	8003cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003730:	2360      	movs	r3, #96	; 0x60
 8003732:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 500;
 8003734:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003738:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800373e:	2300      	movs	r3, #0
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003742:	2300      	movs	r3, #0
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800374e:	f107 031c 	add.w	r3, r7, #28
 8003752:	2200      	movs	r2, #0
 8003754:	4619      	mov	r1, r3
 8003756:	4814      	ldr	r0, [pc, #80]	; (80037a8 <MX_TIM1_Init+0x144>)
 8003758:	f006 f8e2 	bl	8009920 <HAL_TIM_PWM_ConfigChannel>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8003762:	f000 fab9 	bl	8003cd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003766:	2300      	movs	r3, #0
 8003768:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800377a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800377e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003780:	2300      	movs	r3, #0
 8003782:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003784:	463b      	mov	r3, r7
 8003786:	4619      	mov	r1, r3
 8003788:	4807      	ldr	r0, [pc, #28]	; (80037a8 <MX_TIM1_Init+0x144>)
 800378a:	f006 fdb0 	bl	800a2ee <HAL_TIMEx_ConfigBreakDeadTime>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8003794:	f000 faa0 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003798:	4803      	ldr	r0, [pc, #12]	; (80037a8 <MX_TIM1_Init+0x144>)
 800379a:	f002 fcb7 	bl	800610c <HAL_TIM_MspPostInit>

}
 800379e:	bf00      	nop
 80037a0:	3750      	adds	r7, #80	; 0x50
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000198 	.word	0x20000198
 80037ac:	40012c00 	.word	0x40012c00

080037b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c4:	463b      	mov	r3, r7
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <MX_TIM2_Init+0x94>)
 80037ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <MX_TIM2_Init+0x94>)
 80037d6:	2247      	movs	r2, #71	; 0x47
 80037d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037da:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <MX_TIM2_Init+0x94>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80037e0:	4b18      	ldr	r3, [pc, #96]	; (8003844 <MX_TIM2_Init+0x94>)
 80037e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e8:	4b16      	ldr	r3, [pc, #88]	; (8003844 <MX_TIM2_Init+0x94>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ee:	4b15      	ldr	r3, [pc, #84]	; (8003844 <MX_TIM2_Init+0x94>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037f4:	4813      	ldr	r0, [pc, #76]	; (8003844 <MX_TIM2_Init+0x94>)
 80037f6:	f005 fe17 	bl	8009428 <HAL_TIM_Base_Init>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003800:	f000 fa6a 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800380a:	f107 0308 	add.w	r3, r7, #8
 800380e:	4619      	mov	r1, r3
 8003810:	480c      	ldr	r0, [pc, #48]	; (8003844 <MX_TIM2_Init+0x94>)
 8003812:	f006 f94b 	bl	8009aac <HAL_TIM_ConfigClockSource>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800381c:	f000 fa5c 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003820:	2300      	movs	r3, #0
 8003822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003824:	2300      	movs	r3, #0
 8003826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003828:	463b      	mov	r3, r7
 800382a:	4619      	mov	r1, r3
 800382c:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_TIM2_Init+0x94>)
 800382e:	f006 fdb6 	bl	800a39e <HAL_TIMEx_MasterConfigSynchronization>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003838:	f000 fa4e 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800383c:	bf00      	nop
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200001d8 	.word	0x200001d8

08003848 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800384e:	f107 0308 	add.w	r3, r7, #8
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385c:	463b      	mov	r3, r7
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <MX_TIM3_Init+0x94>)
 8003866:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <MX_TIM3_Init+0x98>)
 8003868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 800386a:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <MX_TIM3_Init+0x94>)
 800386c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003870:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <MX_TIM3_Init+0x94>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 8003878:	4b18      	ldr	r3, [pc, #96]	; (80038dc <MX_TIM3_Init+0x94>)
 800387a:	f248 32d5 	movw	r2, #33749	; 0x83d5
 800387e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003880:	4b16      	ldr	r3, [pc, #88]	; (80038dc <MX_TIM3_Init+0x94>)
 8003882:	2200      	movs	r2, #0
 8003884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <MX_TIM3_Init+0x94>)
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800388c:	4813      	ldr	r0, [pc, #76]	; (80038dc <MX_TIM3_Init+0x94>)
 800388e:	f005 fdcb 	bl	8009428 <HAL_TIM_Base_Init>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003898:	f000 fa1e 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800389c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038a2:	f107 0308 	add.w	r3, r7, #8
 80038a6:	4619      	mov	r1, r3
 80038a8:	480c      	ldr	r0, [pc, #48]	; (80038dc <MX_TIM3_Init+0x94>)
 80038aa:	f006 f8ff 	bl	8009aac <HAL_TIM_ConfigClockSource>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80038b4:	f000 fa10 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b8:	2300      	movs	r3, #0
 80038ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038c0:	463b      	mov	r3, r7
 80038c2:	4619      	mov	r1, r3
 80038c4:	4805      	ldr	r0, [pc, #20]	; (80038dc <MX_TIM3_Init+0x94>)
 80038c6:	f006 fd6a 	bl	800a39e <HAL_TIMEx_MasterConfigSynchronization>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80038d0:	f000 fa02 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038d4:	bf00      	nop
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000218 	.word	0x20000218
 80038e0:	40000400 	.word	0x40000400

080038e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ea:	f107 0308 	add.w	r3, r7, #8
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f8:	463b      	mov	r3, r7
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003900:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <MX_TIM5_Init+0x94>)
 8003902:	4a1e      	ldr	r2, [pc, #120]	; (800397c <MX_TIM5_Init+0x98>)
 8003904:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 8003906:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <MX_TIM5_Init+0x94>)
 8003908:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800390c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <MX_TIM5_Init+0x94>)
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <MX_TIM5_Init+0x94>)
 8003916:	f248 32d5 	movw	r2, #33749	; 0x83d5
 800391a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <MX_TIM5_Init+0x94>)
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <MX_TIM5_Init+0x94>)
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003928:	4813      	ldr	r0, [pc, #76]	; (8003978 <MX_TIM5_Init+0x94>)
 800392a:	f005 fd7d 	bl	8009428 <HAL_TIM_Base_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003934:	f000 f9d0 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800393e:	f107 0308 	add.w	r3, r7, #8
 8003942:	4619      	mov	r1, r3
 8003944:	480c      	ldr	r0, [pc, #48]	; (8003978 <MX_TIM5_Init+0x94>)
 8003946:	f006 f8b1 	bl	8009aac <HAL_TIM_ConfigClockSource>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003950:	f000 f9c2 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003958:	2300      	movs	r3, #0
 800395a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800395c:	463b      	mov	r3, r7
 800395e:	4619      	mov	r1, r3
 8003960:	4805      	ldr	r0, [pc, #20]	; (8003978 <MX_TIM5_Init+0x94>)
 8003962:	f006 fd1c 	bl	800a39e <HAL_TIMEx_MasterConfigSynchronization>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800396c:	f000 f9b4 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003970:	bf00      	nop
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000258 	.word	0x20000258
 800397c:	40000c00 	.word	0x40000c00

08003980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003984:	4b15      	ldr	r3, [pc, #84]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 8003986:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <MX_USART1_UART_Init+0x60>)
 8003988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 800398c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003998:	4b10      	ldr	r3, [pc, #64]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039a4:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 80039a6:	220c      	movs	r2, #12
 80039a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039b6:	4809      	ldr	r0, [pc, #36]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 80039b8:	f006 fd47 	bl	800a44a <HAL_UART_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80039c2:	f000 f989 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <MX_USART1_UART_Init+0x5c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0220 	orr.w	r2, r2, #32
 80039d4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000298 	.word	0x20000298
 80039e0:	40013800 	.word	0x40013800

080039e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <MX_USART3_UART_Init+0x60>)
 80039ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80039ee:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 80039f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039f6:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 8003a0a:	220c      	movs	r2, #12
 8003a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a1a:	4809      	ldr	r0, [pc, #36]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 8003a1c:	f006 fd15 	bl	800a44a <HAL_UART_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a26:	f000 f957 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <MX_USART3_UART_Init+0x5c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0220 	orr.w	r2, r2, #32
 8003a38:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200002d8 	.word	0x200002d8
 8003a44:	40004800 	.word	0x40004800

08003a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4e:	f107 0318 	add.w	r3, r7, #24
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a5c:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4a64      	ldr	r2, [pc, #400]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a66:	6193      	str	r3, [r2, #24]
 8003a68:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a74:	4b5f      	ldr	r3, [pc, #380]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	4a5e      	ldr	r2, [pc, #376]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003a7a:	f043 0310 	orr.w	r3, r3, #16
 8003a7e:	6193      	str	r3, [r2, #24]
 8003a80:	4b5c      	ldr	r3, [pc, #368]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8c:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	4a58      	ldr	r2, [pc, #352]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003a92:	f043 0308 	orr.w	r3, r3, #8
 8003a96:	6193      	str	r3, [r2, #24]
 8003a98:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aa4:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	4a52      	ldr	r2, [pc, #328]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003aaa:	f043 0320 	orr.w	r3, r3, #32
 8003aae:	6193      	str	r3, [r2, #24]
 8003ab0:	4b50      	ldr	r3, [pc, #320]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	4a4c      	ldr	r2, [pc, #304]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6193      	str	r3, [r2, #24]
 8003ac8:	4b4a      	ldr	r3, [pc, #296]	; (8003bf4 <MX_GPIO_Init+0x1ac>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2107      	movs	r1, #7
 8003ad8:	4847      	ldr	r0, [pc, #284]	; (8003bf8 <MX_GPIO_Init+0x1b0>)
 8003ada:	f004 fd14 	bl	8008506 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8003ade:	2201      	movs	r2, #1
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	4845      	ldr	r0, [pc, #276]	; (8003bf8 <MX_GPIO_Init+0x1b0>)
 8003ae4:	f004 fd0f 	bl	8008506 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8003ae8:	2201      	movs	r2, #1
 8003aea:	2123      	movs	r1, #35	; 0x23
 8003aec:	4843      	ldr	r0, [pc, #268]	; (8003bfc <MX_GPIO_Init+0x1b4>)
 8003aee:	f004 fd0a 	bl	8008506 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8003af2:	2200      	movs	r2, #0
 8003af4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003af8:	4841      	ldr	r0, [pc, #260]	; (8003c00 <MX_GPIO_Init+0x1b8>)
 8003afa:	f004 fd04 	bl	8008506 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003afe:	2200      	movs	r2, #0
 8003b00:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003b04:	483d      	ldr	r0, [pc, #244]	; (8003bfc <MX_GPIO_Init+0x1b4>)
 8003b06:	f004 fcfe 	bl	8008506 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 DHT11_Pin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8003b0a:	2347      	movs	r3, #71	; 0x47
 8003b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b1a:	f107 0318 	add.w	r3, r7, #24
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4835      	ldr	r0, [pc, #212]	; (8003bf8 <MX_GPIO_Init+0x1b0>)
 8003b22:	f004 fb41 	bl	80081a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b26:	2308      	movs	r3, #8
 8003b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b32:	f107 0318 	add.w	r3, r7, #24
 8003b36:	4619      	mov	r1, r3
 8003b38:	482f      	ldr	r0, [pc, #188]	; (8003bf8 <MX_GPIO_Init+0x1b0>)
 8003b3a:	f004 fb35 	bl	80081a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b3e:	2310      	movs	r3, #16
 8003b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b42:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <MX_GPIO_Init+0x1bc>)
 8003b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b46:	2301      	movs	r3, #1
 8003b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b4a:	f107 0318 	add.w	r3, r7, #24
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4829      	ldr	r0, [pc, #164]	; (8003bf8 <MX_GPIO_Init+0x1b0>)
 8003b52:	f004 fb29 	bl	80081a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : K2_Pin */
  GPIO_InitStruct.Pin = K2_Pin;
 8003b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <MX_GPIO_Init+0x1c0>)
 8003b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b60:	2302      	movs	r3, #2
 8003b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4828      	ldr	r0, [pc, #160]	; (8003c0c <MX_GPIO_Init+0x1c4>)
 8003b6c:	f004 fb1c 	bl	80081a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8;
 8003b70:	f240 1323 	movw	r3, #291	; 0x123
 8003b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b76:	2301      	movs	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b82:	f107 0318 	add.w	r3, r7, #24
 8003b86:	4619      	mov	r1, r3
 8003b88:	481c      	ldr	r0, [pc, #112]	; (8003bfc <MX_GPIO_Init+0x1b4>)
 8003b8a:	f004 fb0d 	bl	80081a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003b8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b94:	2301      	movs	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ba0:	f107 0318 	add.w	r3, r7, #24
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4816      	ldr	r0, [pc, #88]	; (8003c00 <MX_GPIO_Init+0x1b8>)
 8003ba8:	f004 fafe 	bl	80081a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbe:	f107 0318 	add.w	r3, r7, #24
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	480d      	ldr	r0, [pc, #52]	; (8003bfc <MX_GPIO_Init+0x1b4>)
 8003bc6:	f004 faef 	bl	80081a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2100      	movs	r1, #0
 8003bce:	200a      	movs	r0, #10
 8003bd0:	f004 f9ab 	bl	8007f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003bd4:	200a      	movs	r0, #10
 8003bd6:	f004 f9c4 	bl	8007f62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	2028      	movs	r0, #40	; 0x28
 8003be0:	f004 f9a3 	bl	8007f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003be4:	2028      	movs	r0, #40	; 0x28
 8003be6:	f004 f9bc 	bl	8007f62 <HAL_NVIC_EnableIRQ>

}
 8003bea:	bf00      	nop
 8003bec:	3728      	adds	r7, #40	; 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40011800 	.word	0x40011800
 8003bfc:	40010c00 	.word	0x40010c00
 8003c00:	40011400 	.word	0x40011400
 8003c04:	10210000 	.word	0x10210000
 8003c08:	10110000 	.word	0x10110000
 8003c0c:	40011000 	.word	0x40011000

08003c10 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	611a      	str	r2, [r3, #16]
 8003c24:	615a      	str	r2, [r3, #20]
 8003c26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003c28:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c2a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003c2e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003c30:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c32:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <MX_FSMC_Init+0xc0>)
 8003c34:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003c36:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003c48:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003c4e:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003c6e:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003c74:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003c80:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003c86:	230f      	movs	r3, #15
 8003c88:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003c8a:	230f      	movs	r3, #15
 8003c8c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003c8e:	23ff      	movs	r3, #255	; 0xff
 8003c90:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003c92:	230f      	movs	r3, #15
 8003c94:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003c96:	2310      	movs	r3, #16
 8003c98:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003c9a:	2311      	movs	r3, #17
 8003c9c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4808      	ldr	r0, [pc, #32]	; (8003ccc <MX_FSMC_Init+0xbc>)
 8003caa:	f005 fb79 	bl	80093a0 <HAL_SRAM_Init>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8003cb4:	f000 f810 	bl	8003cd8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <MX_FSMC_Init+0xc4>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <MX_FSMC_Init+0xc4>)
 8003cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cc2:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003cc4:	bf00      	nop
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000318 	.word	0x20000318
 8003cd0:	a0000104 	.word	0xa0000104
 8003cd4:	40010000 	.word	0x40010000

08003cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <_putchar>:
#if defined(PRINTF_SUPPORT_FLOAT)
#include <float.h>
#endif

void _putchar(char character)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
	///注意这里的输出函数需要自己修改，我这里是设置了串口输出
    HAL_UART_Transmit(&huart3 ,(uint8_t*)&character, 1, HAL_MAX_DELAY);
 8003cee:	1df9      	adds	r1, r7, #7
 8003cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4803      	ldr	r0, [pc, #12]	; (8003d04 <_putchar+0x20>)
 8003cf8:	f006 fbf4 	bl	800a4e4 <HAL_UART_Transmit>
    // send char to console etc.
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200002d8 	.word	0x200002d8

08003d08 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4603      	mov	r3, r0
 8003d16:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d204      	bcs.n	8003d2a <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	701a      	strb	r2, [r3, #0]
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4603      	mov	r3, r0
 8003d42:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <_out_char+0x1e>
    _putchar(character);
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff ffbc 	bl	8003ce4 <_putchar>
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e002      	b.n	8003d8a <_strnlen_s+0x16>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <_strnlen_s+0x28>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	603a      	str	r2, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f3      	bne.n	8003d84 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	1ad3      	subs	r3, r2, r3
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	2b2f      	cmp	r3, #47	; 0x2f
 8003dba:	d904      	bls.n	8003dc6 <_is_digit+0x1a>
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	2b39      	cmp	r3, #57	; 0x39
 8003dc0:	d801      	bhi.n	8003dc6 <_is_digit+0x1a>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <_is_digit+0x1c>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003de4:	e00e      	b.n	8003e04 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4618      	mov	r0, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1c59      	adds	r1, r3, #1
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6011      	str	r1, [r2, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	4403      	add	r3, r0
 8003e00:	3b30      	subs	r3, #48	; 0x30
 8003e02:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff ffce 	bl	8003dac <_is_digit>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e7      	bne.n	8003de6 <_atoi+0xe>
  }
  return i;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d125      	bne.n	8003e88 <_out_rev+0x68>
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d120      	bne.n	8003e88 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e00a      	b.n	8003e62 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	1c53      	adds	r3, r2, #1
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	68fc      	ldr	r4, [r7, #12]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	2020      	movs	r0, #32
 8003e5a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d3f0      	bcc.n	8003e4c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003e6a:	e00d      	b.n	8003e88 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	4413      	add	r3, r2
 8003e78:	7818      	ldrb	r0, [r3, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	1c53      	adds	r3, r2, #1
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	68fc      	ldr	r4, [r7, #12]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	47a0      	blx	r4
  while (len) {
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1ee      	bne.n	8003e6c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00e      	beq.n	8003eb6 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003e98:	e007      	b.n	8003eaa <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	1c53      	adds	r3, r2, #1
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	68fc      	ldr	r4, [r7, #12]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	2020      	movs	r0, #32
 8003ea8:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d8f1      	bhi.n	8003e9a <_out_rev+0x7a>
    }
  }

  return idx;
 8003eb6:	687b      	ldr	r3, [r7, #4]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd90      	pop	{r4, r7, pc}

08003ec0 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af04      	add	r7, sp, #16
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d136      	bne.n	8003f46 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d018      	beq.n	8003f10 <_ntoa_format+0x50>
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <_ntoa_format+0x50>
 8003ee8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <_ntoa_format+0x3a>
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <_ntoa_format+0x50>
      width--;
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	3b01      	subs	r3, #1
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003f00:	e006      	b.n	8003f10 <_ntoa_format+0x50>
      buf[len++] = '0';
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	61fa      	str	r2, [r7, #28]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	2230      	movs	r2, #48	; 0x30
 8003f0e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d20a      	bcs.n	8003f2e <_ntoa_format+0x6e>
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b1f      	cmp	r3, #31
 8003f1c:	d9f1      	bls.n	8003f02 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003f1e:	e006      	b.n	8003f2e <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	61fa      	str	r2, [r7, #28]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4413      	add	r3, r2
 8003f2a:	2230      	movs	r2, #48	; 0x30
 8003f2c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d006      	beq.n	8003f46 <_ntoa_format+0x86>
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d202      	bcs.n	8003f46 <_ntoa_format+0x86>
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b1f      	cmp	r3, #31
 8003f44:	d9ec      	bls.n	8003f20 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d058      	beq.n	8004002 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <_ntoa_format+0xc8>
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d013      	beq.n	8003f88 <_ntoa_format+0xc8>
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d003      	beq.n	8003f70 <_ntoa_format+0xb0>
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d10b      	bne.n	8003f88 <_ntoa_format+0xc8>
      len--;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <_ntoa_format+0xc8>
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d102      	bne.n	8003f88 <_ntoa_format+0xc8>
        len--;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d10f      	bne.n	8003fae <_ntoa_format+0xee>
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <_ntoa_format+0xee>
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b1f      	cmp	r3, #31
 8003f9c:	d807      	bhi.n	8003fae <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	61fa      	str	r2, [r7, #28]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	2278      	movs	r2, #120	; 0x78
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	e01f      	b.n	8003fee <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d10f      	bne.n	8003fd4 <_ntoa_format+0x114>
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <_ntoa_format+0x114>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	2b1f      	cmp	r3, #31
 8003fc2:	d807      	bhi.n	8003fd4 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	61fa      	str	r2, [r7, #28]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4413      	add	r3, r2
 8003fce:	2258      	movs	r2, #88	; 0x58
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e00c      	b.n	8003fee <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d109      	bne.n	8003fee <_ntoa_format+0x12e>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b1f      	cmp	r3, #31
 8003fde:	d806      	bhi.n	8003fee <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	61fa      	str	r2, [r7, #28]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4413      	add	r3, r2
 8003fea:	2262      	movs	r2, #98	; 0x62
 8003fec:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b1f      	cmp	r3, #31
 8003ff2:	d806      	bhi.n	8004002 <_ntoa_format+0x142>
      buf[len++] = '0';
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	61fa      	str	r2, [r7, #28]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	2230      	movs	r2, #48	; 0x30
 8004000:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b1f      	cmp	r3, #31
 8004006:	d824      	bhi.n	8004052 <_ntoa_format+0x192>
    if (negative) {
 8004008:	f897 3020 	ldrb.w	r3, [r7, #32]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <_ntoa_format+0x160>
      buf[len++] = '-';
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	61fa      	str	r2, [r7, #28]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4413      	add	r3, r2
 800401a:	222d      	movs	r2, #45	; 0x2d
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e018      	b.n	8004052 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	61fa      	str	r2, [r7, #28]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4413      	add	r3, r2
 8004034:	222b      	movs	r2, #43	; 0x2b
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e00b      	b.n	8004052 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	61fa      	str	r2, [r7, #28]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4413      	add	r3, r2
 800404e:	2220      	movs	r2, #32
 8004050:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	9302      	str	r3, [sp, #8]
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff fed9 	bl	8003e20 <_out_rev>
 800406e:	4603      	mov	r3, r0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b096      	sub	sp, #88	; 0x58
 800407c:	af08      	add	r7, sp, #32
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800408a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d103      	bne.n	8004098 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004092:	f023 0310 	bic.w	r3, r3, #16
 8004096:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <_ntoa_long+0x30>
 80040a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d032      	beq.n	800410e <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80040a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80040b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80040b2:	fb01 f202 	mul.w	r2, r1, r2
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80040bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040c0:	2b09      	cmp	r3, #9
 80040c2:	d804      	bhi.n	80040ce <_ntoa_long+0x56>
 80040c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040c8:	3330      	adds	r3, #48	; 0x30
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	e00d      	b.n	80040ea <_ntoa_long+0x72>
 80040ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <_ntoa_long+0x64>
 80040d8:	2241      	movs	r2, #65	; 0x41
 80040da:	e000      	b.n	80040de <_ntoa_long+0x66>
 80040dc:	2261      	movs	r2, #97	; 0x61
 80040de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040e2:	4413      	add	r3, r2
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	3b0a      	subs	r3, #10
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ec:	1c59      	adds	r1, r3, #1
 80040ee:	6379      	str	r1, [r7, #52]	; 0x34
 80040f0:	3338      	adds	r3, #56	; 0x38
 80040f2:	443b      	add	r3, r7
 80040f4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80040f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <_ntoa_long+0x96>
 8004108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410a:	2b1f      	cmp	r3, #31
 800410c:	d9cc      	bls.n	80040a8 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800410e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004110:	9306      	str	r3, [sp, #24]
 8004112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004114:	9305      	str	r3, [sp, #20]
 8004116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004118:	9304      	str	r3, [sp, #16]
 800411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411c:	9303      	str	r3, [sp, #12]
 800411e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	f107 0310 	add.w	r3, r7, #16
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff fec3 	bl	8003ec0 <_ntoa_format>
 800413a:	4603      	mov	r3, r0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3738      	adds	r7, #56	; 0x38
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b096      	sub	sp, #88	; 0x58
 8004148:	af08      	add	r7, sp, #32
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800415a:	4313      	orrs	r3, r2
 800415c:	d103      	bne.n	8004166 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800415e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004160:	f023 0310 	bic.w	r3, r3, #16
 8004164:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <_ntoa_long_long+0x34>
 8004170:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004174:	4313      	orrs	r3, r2
 8004176:	d037      	beq.n	80041e8 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8004178:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800417c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004180:	f7fc fcf8 	bl	8000b74 <__aeabi_uldivmod>
 8004184:	4613      	mov	r3, r2
 8004186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800418a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800418e:	2b09      	cmp	r3, #9
 8004190:	d804      	bhi.n	800419c <_ntoa_long_long+0x58>
 8004192:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004196:	3330      	adds	r3, #48	; 0x30
 8004198:	b2da      	uxtb	r2, r3
 800419a:	e00d      	b.n	80041b8 <_ntoa_long_long+0x74>
 800419c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <_ntoa_long_long+0x66>
 80041a6:	2241      	movs	r2, #65	; 0x41
 80041a8:	e000      	b.n	80041ac <_ntoa_long_long+0x68>
 80041aa:	2261      	movs	r2, #97	; 0x61
 80041ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041b0:	4413      	add	r3, r2
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3b0a      	subs	r3, #10
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ba:	1c59      	adds	r1, r3, #1
 80041bc:	6379      	str	r1, [r7, #52]	; 0x34
 80041be:	3338      	adds	r3, #56	; 0x38
 80041c0:	443b      	add	r3, r7
 80041c2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80041c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80041ce:	f7fc fcd1 	bl	8000b74 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80041da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041de:	4313      	orrs	r3, r2
 80041e0:	d002      	beq.n	80041e8 <_ntoa_long_long+0xa4>
 80041e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e4:	2b1f      	cmp	r3, #31
 80041e6:	d9c7      	bls.n	8004178 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80041e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ec:	9206      	str	r2, [sp, #24]
 80041ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041f0:	9205      	str	r2, [sp, #20]
 80041f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f4:	9204      	str	r2, [sp, #16]
 80041f6:	9303      	str	r3, [sp, #12]
 80041f8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80041fc:	9302      	str	r3, [sp, #8]
 80041fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	f107 0310 	add.w	r3, r7, #16
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff fe56 	bl	8003ec0 <_ntoa_format>
 8004214:	4603      	mov	r3, r0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3738      	adds	r7, #56	; 0x38
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b09d      	sub	sp, #116	; 0x74
 8004224:	af06      	add	r7, sp, #24
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800423e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004242:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004246:	f7fc fc1b 	bl	8000a80 <__aeabi_dcmpeq>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10f      	bne.n	8004270 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004252:	9303      	str	r3, [sp, #12]
 8004254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004256:	9302      	str	r3, [sp, #8]
 8004258:	2303      	movs	r3, #3
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	4b82      	ldr	r3, [pc, #520]	; (8004468 <_ftoa+0x248>)
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68b9      	ldr	r1, [r7, #8]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff fdda 	bl	8003e20 <_out_rev>
 800426c:	4603      	mov	r3, r0
 800426e:	e224      	b.n	80046ba <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004278:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800427c:	f7fc fc0a 	bl	8000a94 <__aeabi_dcmplt>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00f      	beq.n	80042a6 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8004286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004288:	9303      	str	r3, [sp, #12]
 800428a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800428c:	9302      	str	r3, [sp, #8]
 800428e:	2304      	movs	r3, #4
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	4b76      	ldr	r3, [pc, #472]	; (800446c <_ftoa+0x24c>)
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fdbf 	bl	8003e20 <_out_rev>
 80042a2:	4603      	mov	r3, r0
 80042a4:	e209      	b.n	80046ba <_ftoa+0x49a>
  if (value > DBL_MAX)
 80042a6:	f04f 32ff 	mov.w	r2, #4294967295
 80042aa:	4b71      	ldr	r3, [pc, #452]	; (8004470 <_ftoa+0x250>)
 80042ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042b0:	f7fc fc0e 	bl	8000ad0 <__aeabi_dcmpgt>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01d      	beq.n	80042f6 <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80042ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <_ftoa+0xa8>
 80042c4:	4b6b      	ldr	r3, [pc, #428]	; (8004474 <_ftoa+0x254>)
 80042c6:	e000      	b.n	80042ca <_ftoa+0xaa>
 80042c8:	4b6b      	ldr	r3, [pc, #428]	; (8004478 <_ftoa+0x258>)
 80042ca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042cc:	f002 0204 	and.w	r2, r2, #4
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	d001      	beq.n	80042d8 <_ftoa+0xb8>
 80042d4:	2204      	movs	r2, #4
 80042d6:	e000      	b.n	80042da <_ftoa+0xba>
 80042d8:	2203      	movs	r2, #3
 80042da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80042dc:	9103      	str	r1, [sp, #12]
 80042de:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80042e0:	9102      	str	r1, [sp, #8]
 80042e2:	9201      	str	r2, [sp, #4]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff fd97 	bl	8003e20 <_out_rev>
 80042f2:	4603      	mov	r3, r0
 80042f4:	e1e1      	b.n	80046ba <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80042f6:	a358      	add	r3, pc, #352	; (adr r3, 8004458 <_ftoa+0x238>)
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004300:	f7fc fbe6 	bl	8000ad0 <__aeabi_dcmpgt>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <_ftoa+0xfe>
 800430a:	a355      	add	r3, pc, #340	; (adr r3, 8004460 <_ftoa+0x240>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004314:	f7fc fbbe 	bl	8000a94 <__aeabi_dcmplt>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d011      	beq.n	8004342 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800431e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004320:	9304      	str	r3, [sp, #16]
 8004322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004324:	9303      	str	r3, [sp, #12]
 8004326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004328:	9302      	str	r3, [sp, #8]
 800432a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800432e:	e9cd 2300 	strd	r2, r3, [sp]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f9c9 	bl	80046d0 <_etoa>
 800433e:	4603      	mov	r3, r0
 8004340:	e1bb      	b.n	80046ba <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8004342:	2300      	movs	r3, #0
 8004344:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004354:	f7fc fb9e 	bl	8000a94 <__aeabi_dcmplt>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <_ftoa+0x15c>
    negative = true;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8004364:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004368:	f04f 0000 	mov.w	r0, #0
 800436c:	f04f 0100 	mov.w	r1, #0
 8004370:	f7fb ff66 	bl	8000240 <__aeabi_dsub>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800437c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10d      	bne.n	80043a2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004386:	2306      	movs	r3, #6
 8004388:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800438a:	e00a      	b.n	80043a2 <_ftoa+0x182>
    buf[len++] = '0';
 800438c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	657a      	str	r2, [r7, #84]	; 0x54
 8004392:	3358      	adds	r3, #88	; 0x58
 8004394:	443b      	add	r3, r7
 8004396:	2230      	movs	r2, #48	; 0x30
 8004398:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800439c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800439e:	3b01      	subs	r3, #1
 80043a0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80043a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a4:	2b1f      	cmp	r3, #31
 80043a6:	d802      	bhi.n	80043ae <_ftoa+0x18e>
 80043a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043aa:	2b09      	cmp	r3, #9
 80043ac:	d8ee      	bhi.n	800438c <_ftoa+0x16c>
  }

  int whole = (int)value;
 80043ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043b2:	f7fc fb97 	bl	8000ae4 <__aeabi_d2iz>
 80043b6:	4603      	mov	r3, r0
 80043b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 80043ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80043bc:	f7fc f88e 	bl	80004dc <__aeabi_i2d>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043c8:	f7fb ff3a 	bl	8000240 <__aeabi_dsub>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	4a29      	ldr	r2, [pc, #164]	; (800447c <_ftoa+0x25c>)
 80043d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f7fc f8e6 	bl	80005b0 <__aeabi_dmul>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 80043ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80043f0:	f7fc fba0 	bl	8000b34 <__aeabi_d2uiz>
 80043f4:	4603      	mov	r3, r0
 80043f6:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 80043f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80043fa:	f7fc f85f 	bl	80004bc <__aeabi_ui2d>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004406:	f7fb ff1b 	bl	8000240 <__aeabi_dsub>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <_ftoa+0x260>)
 8004418:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800441c:	f7fc fb58 	bl	8000ad0 <__aeabi_dcmpgt>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02e      	beq.n	8004484 <_ftoa+0x264>
    ++frac;
 8004426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004428:	3301      	adds	r3, #1
 800442a:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800442c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800442e:	f7fc f845 	bl	80004bc <__aeabi_ui2d>
 8004432:	4a12      	ldr	r2, [pc, #72]	; (800447c <_ftoa+0x25c>)
 8004434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f7fc fb3d 	bl	8000abc <__aeabi_dcmpge>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d032      	beq.n	80044ae <_ftoa+0x28e>
      frac = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 800444c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444e:	3301      	adds	r3, #1
 8004450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004452:	e02c      	b.n	80044ae <_ftoa+0x28e>
 8004454:	f3af 8000 	nop.w
 8004458:	00000000 	.word	0x00000000
 800445c:	41cdcd65 	.word	0x41cdcd65
 8004460:	00000000 	.word	0x00000000
 8004464:	c1cdcd65 	.word	0xc1cdcd65
 8004468:	0800cfb8 	.word	0x0800cfb8
 800446c:	0800cfbc 	.word	0x0800cfbc
 8004470:	7fefffff 	.word	0x7fefffff
 8004474:	0800cfc4 	.word	0x0800cfc4
 8004478:	0800cfcc 	.word	0x0800cfcc
 800447c:	0800d720 	.word	0x0800d720
 8004480:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	4b8e      	ldr	r3, [pc, #568]	; (80046c4 <_ftoa+0x4a4>)
 800448a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800448e:	f7fc fb01 	bl	8000a94 <__aeabi_dcmplt>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <_ftoa+0x288>
 800449e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80044a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044aa:	3301      	adds	r3, #1
 80044ac:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 80044ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d133      	bne.n	800451c <_ftoa+0x2fc>
    diff = value - (double)whole;
 80044b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80044b6:	f7fc f811 	bl	80004dc <__aeabi_i2d>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044c2:	f7fb febd 	bl	8000240 <__aeabi_dsub>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80044ce:	2301      	movs	r3, #1
 80044d0:	461c      	mov	r4, r3
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	4b7b      	ldr	r3, [pc, #492]	; (80046c4 <_ftoa+0x4a4>)
 80044d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80044dc:	f7fc fada 	bl	8000a94 <__aeabi_dcmplt>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <_ftoa+0x2ca>
 80044e6:	2300      	movs	r3, #0
 80044e8:	461c      	mov	r4, r3
 80044ea:	b2e3      	uxtb	r3, r4
 80044ec:	f083 0301 	eor.w	r3, r3, #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <_ftoa+0x2ea>
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	4b72      	ldr	r3, [pc, #456]	; (80046c4 <_ftoa+0x4a4>)
 80044fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004500:	f7fc fae6 	bl	8000ad0 <__aeabi_dcmpgt>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04c      	beq.n	80045a4 <_ftoa+0x384>
 800450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d069      	beq.n	80045e8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	3301      	adds	r3, #1
 8004518:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451a:	e065      	b.n	80045e8 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 800451c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004520:	e01f      	b.n	8004562 <_ftoa+0x342>
      --count;
 8004522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004524:	3b01      	subs	r3, #1
 8004526:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8004528:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800452a:	4b67      	ldr	r3, [pc, #412]	; (80046c8 <_ftoa+0x4a8>)
 800452c:	fba3 2301 	umull	r2, r3, r3, r1
 8004530:	08da      	lsrs	r2, r3, #3
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	1aca      	subs	r2, r1, r3
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	6579      	str	r1, [r7, #84]	; 0x54
 8004544:	3230      	adds	r2, #48	; 0x30
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	3358      	adds	r3, #88	; 0x58
 800454a:	443b      	add	r3, r7
 800454c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8004550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004552:	4a5d      	ldr	r2, [pc, #372]	; (80046c8 <_ftoa+0x4a8>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	64bb      	str	r3, [r7, #72]	; 0x48
 800455c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004564:	2b1f      	cmp	r3, #31
 8004566:	d9dc      	bls.n	8004522 <_ftoa+0x302>
 8004568:	e009      	b.n	800457e <_ftoa+0x35e>
        break;
 800456a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800456c:	e007      	b.n	800457e <_ftoa+0x35e>
      buf[len++] = '0';
 800456e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	657a      	str	r2, [r7, #84]	; 0x54
 8004574:	3358      	adds	r3, #88	; 0x58
 8004576:	443b      	add	r3, r7
 8004578:	2230      	movs	r2, #48	; 0x30
 800457a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800457e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004580:	2b1f      	cmp	r3, #31
 8004582:	d804      	bhi.n	800458e <_ftoa+0x36e>
 8004584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004586:	1e5a      	subs	r2, r3, #1
 8004588:	647a      	str	r2, [r7, #68]	; 0x44
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ef      	bne.n	800456e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800458e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004590:	2b1f      	cmp	r3, #31
 8004592:	d829      	bhi.n	80045e8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8004594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	657a      	str	r2, [r7, #84]	; 0x54
 800459a:	3358      	adds	r3, #88	; 0x58
 800459c:	443b      	add	r3, r7
 800459e:	222e      	movs	r2, #46	; 0x2e
 80045a0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80045a4:	e020      	b.n	80045e8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80045a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a8:	4b48      	ldr	r3, [pc, #288]	; (80046cc <_ftoa+0x4ac>)
 80045aa:	fb83 1302 	smull	r1, r3, r3, r2
 80045ae:	1099      	asrs	r1, r3, #2
 80045b0:	17d3      	asrs	r3, r2, #31
 80045b2:	1ac9      	subs	r1, r1, r3
 80045b4:	460b      	mov	r3, r1
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	1ad1      	subs	r1, r2, r3
 80045be:	b2ca      	uxtb	r2, r1
 80045c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	6579      	str	r1, [r7, #84]	; 0x54
 80045c6:	3230      	adds	r2, #48	; 0x30
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	3358      	adds	r3, #88	; 0x58
 80045cc:	443b      	add	r3, r7
 80045ce:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80045d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d4:	4a3d      	ldr	r2, [pc, #244]	; (80046cc <_ftoa+0x4ac>)
 80045d6:	fb82 1203 	smull	r1, r2, r2, r3
 80045da:	1092      	asrs	r2, r2, #2
 80045dc:	17db      	asrs	r3, r3, #31
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80045e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ea:	2b1f      	cmp	r3, #31
 80045ec:	d9db      	bls.n	80045a6 <_ftoa+0x386>
 80045ee:	e000      	b.n	80045f2 <_ftoa+0x3d2>
      break;
 80045f0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80045f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d123      	bne.n	8004644 <_ftoa+0x424>
 80045fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01e      	beq.n	8004644 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004608:	2b00      	cmp	r3, #0
 800460a:	d014      	beq.n	8004636 <_ftoa+0x416>
 800460c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <_ftoa+0x3fe>
 8004614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <_ftoa+0x416>
      width--;
 800461e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004620:	3b01      	subs	r3, #1
 8004622:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004624:	e007      	b.n	8004636 <_ftoa+0x416>
      buf[len++] = '0';
 8004626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	657a      	str	r2, [r7, #84]	; 0x54
 800462c:	3358      	adds	r3, #88	; 0x58
 800462e:	443b      	add	r3, r7
 8004630:	2230      	movs	r2, #48	; 0x30
 8004632:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004636:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800463a:	429a      	cmp	r2, r3
 800463c:	d202      	bcs.n	8004644 <_ftoa+0x424>
 800463e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004640:	2b1f      	cmp	r3, #31
 8004642:	d9f0      	bls.n	8004626 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004646:	2b1f      	cmp	r3, #31
 8004648:	d827      	bhi.n	800469a <_ftoa+0x47a>
    if (negative) {
 800464a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <_ftoa+0x444>
      buf[len++] = '-';
 8004652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	657a      	str	r2, [r7, #84]	; 0x54
 8004658:	3358      	adds	r3, #88	; 0x58
 800465a:	443b      	add	r3, r7
 800465c:	222d      	movs	r2, #45	; 0x2d
 800465e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004662:	e01a      	b.n	800469a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8004664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800466e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	657a      	str	r2, [r7, #84]	; 0x54
 8004674:	3358      	adds	r3, #88	; 0x58
 8004676:	443b      	add	r3, r7
 8004678:	222b      	movs	r2, #43	; 0x2b
 800467a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800467e:	e00c      	b.n	800469a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8004680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <_ftoa+0x47a>
      buf[len++] = ' ';
 800468a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	657a      	str	r2, [r7, #84]	; 0x54
 8004690:	3358      	adds	r3, #88	; 0x58
 8004692:	443b      	add	r3, r7
 8004694:	2220      	movs	r2, #32
 8004696:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800469a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469c:	9303      	str	r3, [sp, #12]
 800469e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a0:	9302      	str	r3, [sp, #8]
 80046a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	f107 0310 	add.w	r3, r7, #16
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fbb4 	bl	8003e20 <_out_rev>
 80046b8:	4603      	mov	r3, r0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	375c      	adds	r7, #92	; 0x5c
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	3fe00000 	.word	0x3fe00000
 80046c8:	cccccccd 	.word	0xcccccccd
 80046cc:	66666667 	.word	0x66666667

080046d0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80046d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d4:	b09d      	sub	sp, #116	; 0x74
 80046d6:	af06      	add	r7, sp, #24
 80046d8:	61f8      	str	r0, [r7, #28]
 80046da:	61b9      	str	r1, [r7, #24]
 80046dc:	617a      	str	r2, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80046e0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80046e4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046e8:	f7fc f9ca 	bl	8000a80 <__aeabi_dcmpeq>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d014      	beq.n	800471c <_etoa+0x4c>
 80046f2:	f04f 32ff 	mov.w	r2, #4294967295
 80046f6:	4bc4      	ldr	r3, [pc, #784]	; (8004a08 <_etoa+0x338>)
 80046f8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046fc:	f7fc f9e8 	bl	8000ad0 <__aeabi_dcmpgt>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <_etoa+0x4c>
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800470e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004712:	f7fc f9bf 	bl	8000a94 <__aeabi_dcmplt>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d014      	beq.n	8004746 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800471c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004726:	9303      	str	r3, [sp, #12]
 8004728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004732:	e9cd 2300 	strd	r2, r3, [sp]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	69b9      	ldr	r1, [r7, #24]
 800473c:	69f8      	ldr	r0, [r7, #28]
 800473e:	f7ff fd6f 	bl	8004220 <_ftoa>
 8004742:	4603      	mov	r3, r0
 8004744:	e247      	b.n	8004bd6 <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 8004746:	2301      	movs	r3, #1
 8004748:	461e      	mov	r6, r3
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004756:	f7fc f99d 	bl	8000a94 <__aeabi_dcmplt>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <_etoa+0x94>
 8004760:	2300      	movs	r3, #0
 8004762:	461e      	mov	r6, r3
 8004764:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8004768:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <_etoa+0xb8>
    value = -value;
 8004770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800477a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800477e:	607b      	str	r3, [r7, #4]
 8004780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004784:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004794:	2306      	movs	r3, #6
 8004796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800479a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800479e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80047a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	0d0a      	lsrs	r2, r1, #20
 80047b0:	2300      	movs	r3, #0
 80047b2:	4613      	mov	r3, r2
 80047b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80047bc:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80047be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047c2:	4690      	mov	r8, r2
 80047c4:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80047c8:	4644      	mov	r4, r8
 80047ca:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80047ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80047d2:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80047d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80047d8:	f7fb fe80 	bl	80004dc <__aeabi_i2d>
 80047dc:	a37e      	add	r3, pc, #504	; (adr r3, 80049d8 <_etoa+0x308>)
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f7fb fee5 	bl	80005b0 <__aeabi_dmul>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	a37c      	add	r3, pc, #496	; (adr r3, 80049e0 <_etoa+0x310>)
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f7fb fd26 	bl	8000244 <__adddf3>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4614      	mov	r4, r2
 80047fe:	461d      	mov	r5, r3
 8004800:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	4b80      	ldr	r3, [pc, #512]	; (8004a0c <_etoa+0x33c>)
 800480a:	f7fb fd19 	bl	8000240 <__aeabi_dsub>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	a374      	add	r3, pc, #464	; (adr r3, 80049e8 <_etoa+0x318>)
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f7fb fec8 	bl	80005b0 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4620      	mov	r0, r4
 8004826:	4629      	mov	r1, r5
 8004828:	f7fb fd0c 	bl	8000244 <__adddf3>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	f7fc f956 	bl	8000ae4 <__aeabi_d2iz>
 8004838:	4603      	mov	r3, r0
 800483a:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800483c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800483e:	f7fb fe4d 	bl	80004dc <__aeabi_i2d>
 8004842:	a36b      	add	r3, pc, #428	; (adr r3, 80049f0 <_etoa+0x320>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f7fb feb2 	bl	80005b0 <__aeabi_dmul>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	4b6d      	ldr	r3, [pc, #436]	; (8004a10 <_etoa+0x340>)
 800485a:	f7fb fcf3 	bl	8000244 <__adddf3>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4610      	mov	r0, r2
 8004864:	4619      	mov	r1, r3
 8004866:	f7fc f93d 	bl	8000ae4 <__aeabi_d2iz>
 800486a:	4603      	mov	r3, r0
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800486e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004870:	f7fb fe34 	bl	80004dc <__aeabi_i2d>
 8004874:	a360      	add	r3, pc, #384	; (adr r3, 80049f8 <_etoa+0x328>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f7fb fe99 	bl	80005b0 <__aeabi_dmul>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4614      	mov	r4, r2
 8004884:	461d      	mov	r5, r3
 8004886:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004888:	f7fb fe28 	bl	80004dc <__aeabi_i2d>
 800488c:	a35c      	add	r3, pc, #368	; (adr r3, 8004a00 <_etoa+0x330>)
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f7fb fe8d 	bl	80005b0 <__aeabi_dmul>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4620      	mov	r0, r4
 800489c:	4629      	mov	r1, r5
 800489e:	f7fb fccf 	bl	8000240 <__aeabi_dsub>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 80048aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80048b2:	f7fb fe7d 	bl	80005b0 <__aeabi_dmul>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80048c4:	17da      	asrs	r2, r3, #31
 80048c6:	469a      	mov	sl, r3
 80048c8:	4693      	mov	fp, r2
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80048d6:	2200      	movs	r2, #0
 80048d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80048dc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80048e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	f7fb fcac 	bl	8000244 <__adddf3>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4690      	mov	r8, r2
 80048f2:	4699      	mov	r9, r3
 80048f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048f8:	f04f 0000 	mov.w	r0, #0
 80048fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004900:	f7fb fc9e 	bl	8000240 <__aeabi_dsub>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4692      	mov	sl, r2
 800490a:	469b      	mov	fp, r3
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <_etoa+0x344>)
 8004912:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004916:	f7fb ff75 	bl	8000804 <__aeabi_ddiv>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4610      	mov	r0, r2
 8004920:	4619      	mov	r1, r3
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <_etoa+0x348>)
 8004928:	f7fb fc8c 	bl	8000244 <__adddf3>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004934:	f7fb ff66 	bl	8000804 <__aeabi_ddiv>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	4b35      	ldr	r3, [pc, #212]	; (8004a1c <_etoa+0x34c>)
 8004946:	f7fb fc7d 	bl	8000244 <__adddf3>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004952:	f7fb ff57 	bl	8000804 <__aeabi_ddiv>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4650      	mov	r0, sl
 800495c:	4659      	mov	r1, fp
 800495e:	f7fb fc71 	bl	8000244 <__adddf3>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4640      	mov	r0, r8
 8004968:	4649      	mov	r1, r9
 800496a:	f7fb ff4b 	bl	8000804 <__aeabi_ddiv>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	4b29      	ldr	r3, [pc, #164]	; (8004a20 <_etoa+0x350>)
 800497c:	f7fb fc62 	bl	8000244 <__adddf3>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4620      	mov	r0, r4
 8004986:	4629      	mov	r1, r5
 8004988:	f7fb fe12 	bl	80005b0 <__aeabi_dmul>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8004994:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004998:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800499c:	f7fc f87a 	bl	8000a94 <__aeabi_dcmplt>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <_etoa+0x2f2>
    expval--;
 80049a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a8:	3b01      	subs	r3, #1
 80049aa:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80049ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <_etoa+0x348>)
 80049b6:	f7fb ff25 	bl	8000804 <__aeabi_ddiv>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80049c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c4:	2b63      	cmp	r3, #99	; 0x63
 80049c6:	dc2d      	bgt.n	8004a24 <_etoa+0x354>
 80049c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ca:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80049ce:	db29      	blt.n	8004a24 <_etoa+0x354>
 80049d0:	2304      	movs	r3, #4
 80049d2:	e028      	b.n	8004a26 <_etoa+0x356>
 80049d4:	f3af 8000 	nop.w
 80049d8:	509f79fb 	.word	0x509f79fb
 80049dc:	3fd34413 	.word	0x3fd34413
 80049e0:	8b60c8b3 	.word	0x8b60c8b3
 80049e4:	3fc68a28 	.word	0x3fc68a28
 80049e8:	636f4361 	.word	0x636f4361
 80049ec:	3fd287a7 	.word	0x3fd287a7
 80049f0:	0979a371 	.word	0x0979a371
 80049f4:	400a934f 	.word	0x400a934f
 80049f8:	bbb55516 	.word	0xbbb55516
 80049fc:	40026bb1 	.word	0x40026bb1
 8004a00:	fefa39ef 	.word	0xfefa39ef
 8004a04:	3fe62e42 	.word	0x3fe62e42
 8004a08:	7fefffff 	.word	0x7fefffff
 8004a0c:	3ff80000 	.word	0x3ff80000
 8004a10:	3fe00000 	.word	0x3fe00000
 8004a14:	402c0000 	.word	0x402c0000
 8004a18:	40240000 	.word	0x40240000
 8004a1c:	40180000 	.word	0x40180000
 8004a20:	3ff00000 	.word	0x3ff00000
 8004a24:	2305      	movs	r3, #5
 8004a26:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d03d      	beq.n	8004ab0 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004a34:	a36a      	add	r3, pc, #424	; (adr r3, 8004be0 <_etoa+0x510>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a3e:	f7fc f83d 	bl	8000abc <__aeabi_dcmpge>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d024      	beq.n	8004a92 <_etoa+0x3c2>
 8004a48:	a367      	add	r3, pc, #412	; (adr r3, 8004be8 <_etoa+0x518>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a52:	f7fc f81f 	bl	8000a94 <__aeabi_dcmplt>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01a      	beq.n	8004a92 <_etoa+0x3c2>
      if ((int)prec > expval) {
 8004a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a62:	429a      	cmp	r2, r3
 8004a64:	da07      	bge.n	8004a76 <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8004a66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a74:	e002      	b.n	8004a7c <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004a7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a90:	e00e      	b.n	8004ab0 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <_etoa+0x3e0>
 8004a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <_etoa+0x3e0>
        --prec;
 8004aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8004ab6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d904      	bls.n	8004aca <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004ac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac8:	e001      	b.n	8004ace <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <_etoa+0x414>
 8004ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8004ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <_etoa+0x42e>
    value /= conv.F;
 8004aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004af2:	f7fb fe87 	bl	8000804 <__aeabi_ddiv>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004b02:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <_etoa+0x44c>
 8004b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e003      	b.n	8004b24 <_etoa+0x454>
 8004b1c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004b20:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b2c:	9304      	str	r3, [sp, #16]
 8004b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b30:	9303      	str	r3, [sp, #12]
 8004b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b36:	9302      	str	r3, [sp, #8]
 8004b38:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b3c:	e9cd 3400 	strd	r3, r4, [sp]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	69b9      	ldr	r1, [r7, #24]
 8004b46:	69f8      	ldr	r0, [r7, #28]
 8004b48:	f7ff fb6a 	bl	8004220 <_ftoa>
 8004b4c:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d03f      	beq.n	8004bd4 <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <_etoa+0x494>
 8004b60:	2045      	movs	r0, #69	; 0x45
 8004b62:	e000      	b.n	8004b66 <_etoa+0x496>
 8004b64:	2065      	movs	r0, #101	; 0x65
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	1c53      	adds	r3, r2, #1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	69fc      	ldr	r4, [r7, #28]
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	69b9      	ldr	r1, [r7, #24]
 8004b72:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bfb8      	it	lt
 8004b7a:	425b      	neglt	r3, r3
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b80:	0fdb      	lsrs	r3, r3, #31
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b86:	3a01      	subs	r2, #1
 8004b88:	2105      	movs	r1, #5
 8004b8a:	9105      	str	r1, [sp, #20]
 8004b8c:	9204      	str	r2, [sp, #16]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	9203      	str	r2, [sp, #12]
 8004b92:	220a      	movs	r2, #10
 8004b94:	9202      	str	r2, [sp, #8]
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	9000      	str	r0, [sp, #0]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	69b9      	ldr	r1, [r7, #24]
 8004ba0:	69f8      	ldr	r0, [r7, #28]
 8004ba2:	f7ff fa69 	bl	8004078 <_ntoa_long>
 8004ba6:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004ba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00f      	beq.n	8004bd4 <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004bb4:	e007      	b.n	8004bc6 <_etoa+0x4f6>
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	1c53      	adds	r3, r2, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	69fc      	ldr	r4, [r7, #28]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	2020      	movs	r0, #32
 8004bc4:	47a0      	blx	r4
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d8f0      	bhi.n	8004bb6 <_etoa+0x4e6>
    }
  }
  return idx;
 8004bd4:	697b      	ldr	r3, [r7, #20]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	375c      	adds	r7, #92	; 0x5c
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be0:	eb1c432d 	.word	0xeb1c432d
 8004be4:	3f1a36e2 	.word	0x3f1a36e2
 8004be8:	00000000 	.word	0x00000000
 8004bec:	412e8480 	.word	0x412e8480

08004bf0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	b0a3      	sub	sp, #140	; 0x8c
 8004bf6:	af0a      	add	r7, sp, #40	; 0x28
 8004bf8:	6178      	str	r0, [r7, #20]
 8004bfa:	6139      	str	r1, [r7, #16]
 8004bfc:	60fa      	str	r2, [r7, #12]
 8004bfe:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f040 84ba 	bne.w	8005580 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8004c0c:	4ba3      	ldr	r3, [pc, #652]	; (8004e9c <_vsnprintf+0x2ac>)
 8004c0e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004c10:	f000 bcb6 	b.w	8005580 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b25      	cmp	r3, #37	; 0x25
 8004c1a:	d00d      	beq.n	8004c38 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	7818      	ldrb	r0, [r3, #0]
 8004c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c22:	1c53      	adds	r3, r2, #1
 8004c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c26:	697c      	ldr	r4, [r7, #20]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6939      	ldr	r1, [r7, #16]
 8004c2c:	47a0      	blx	r4
      format++;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	3301      	adds	r3, #1
 8004c32:	60bb      	str	r3, [r7, #8]
      continue;
 8004c34:	f000 bca4 	b.w	8005580 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	3b20      	subs	r3, #32
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d857      	bhi.n	8004cfc <_vsnprintf+0x10c>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <_vsnprintf+0x64>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004cd5 	.word	0x08004cd5
 8004c58:	08004cfd 	.word	0x08004cfd
 8004c5c:	08004cfd 	.word	0x08004cfd
 8004c60:	08004ce9 	.word	0x08004ce9
 8004c64:	08004cfd 	.word	0x08004cfd
 8004c68:	08004cfd 	.word	0x08004cfd
 8004c6c:	08004cfd 	.word	0x08004cfd
 8004c70:	08004cfd 	.word	0x08004cfd
 8004c74:	08004cfd 	.word	0x08004cfd
 8004c78:	08004cfd 	.word	0x08004cfd
 8004c7c:	08004cfd 	.word	0x08004cfd
 8004c80:	08004cc1 	.word	0x08004cc1
 8004c84:	08004cfd 	.word	0x08004cfd
 8004c88:	08004cad 	.word	0x08004cad
 8004c8c:	08004cfd 	.word	0x08004cfd
 8004c90:	08004cfd 	.word	0x08004cfd
 8004c94:	08004c99 	.word	0x08004c99
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	653b      	str	r3, [r7, #80]	; 0x50
 8004caa:	e02a      	b.n	8004d02 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cae:	f043 0302 	orr.w	r3, r3, #2
 8004cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8004cbe:	e020      	b.n	8004d02 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc2:	f043 0304 	orr.w	r3, r3, #4
 8004cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd2:	e016      	b.n	8004d02 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd6:	f043 0308 	orr.w	r3, r3, #8
 8004cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ce6:	e00c      	b.n	8004d02 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cea:	f043 0310 	orr.w	r3, r3, #16
 8004cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	653b      	str	r3, [r7, #80]	; 0x50
 8004cfa:	e002      	b.n	8004d02 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004d00:	bf00      	nop
      }
    } while (n);
 8004d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d19c      	bne.n	8004c42 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff f84b 	bl	8003dac <_is_digit>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d006      	beq.n	8004d2a <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004d1c:	f107 0308 	add.w	r3, r7, #8
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff f859 	bl	8003dd8 <_atoi>
 8004d26:	65b8      	str	r0, [r7, #88]	; 0x58
 8004d28:	e01a      	b.n	8004d60 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d30:	d116      	bne.n	8004d60 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d36:	1d1a      	adds	r2, r3, #4
 8004d38:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da07      	bge.n	8004d56 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	425b      	negs	r3, r3
 8004d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d54:	e001      	b.n	8004d5a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b2e      	cmp	r3, #46	; 0x2e
 8004d6a:	d127      	bne.n	8004dbc <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8004d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d72:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff f814 	bl	8003dac <_is_digit>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8004d8a:	f107 0308 	add.w	r3, r7, #8
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff f822 	bl	8003dd8 <_atoi>
 8004d94:	6578      	str	r0, [r7, #84]	; 0x54
 8004d96:	e011      	b.n	8004dbc <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9e:	d10d      	bne.n	8004dbc <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004da4:	1d1a      	adds	r2, r3, #4
 8004da6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004db4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	3301      	adds	r3, #1
 8004dba:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	3b68      	subs	r3, #104	; 0x68
 8004dc2:	2b12      	cmp	r3, #18
 8004dc4:	d866      	bhi.n	8004e94 <_vsnprintf+0x2a4>
 8004dc6:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <_vsnprintf+0x1dc>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004e3f 	.word	0x08004e3f
 8004dd0:	08004e95 	.word	0x08004e95
 8004dd4:	08004e75 	.word	0x08004e75
 8004dd8:	08004e95 	.word	0x08004e95
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e95 	.word	0x08004e95
 8004de4:	08004e95 	.word	0x08004e95
 8004de8:	08004e95 	.word	0x08004e95
 8004dec:	08004e95 	.word	0x08004e95
 8004df0:	08004e95 	.word	0x08004e95
 8004df4:	08004e95 	.word	0x08004e95
 8004df8:	08004e95 	.word	0x08004e95
 8004dfc:	08004e65 	.word	0x08004e65
 8004e00:	08004e95 	.word	0x08004e95
 8004e04:	08004e95 	.word	0x08004e95
 8004e08:	08004e95 	.word	0x08004e95
 8004e0c:	08004e95 	.word	0x08004e95
 8004e10:	08004e95 	.word	0x08004e95
 8004e14:	08004e85 	.word	0x08004e85
      case 'l' :
        flags |= FLAGS_LONG;
 8004e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b6c      	cmp	r3, #108	; 0x6c
 8004e2c:	d134      	bne.n	8004e98 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e34:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004e3c:	e02c      	b.n	8004e98 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e44:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b68      	cmp	r3, #104	; 0x68
 8004e52:	d125      	bne.n	8004ea0 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8004e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004e62:	e01d      	b.n	8004ea0 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60bb      	str	r3, [r7, #8]
        break;
 8004e72:	e016      	b.n	8004ea2 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60bb      	str	r3, [r7, #8]
        break;
 8004e82:	e00e      	b.n	8004ea2 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60bb      	str	r3, [r7, #8]
        break;
 8004e92:	e006      	b.n	8004ea2 <_vsnprintf+0x2b2>
      default :
        break;
 8004e94:	bf00      	nop
 8004e96:	e004      	b.n	8004ea2 <_vsnprintf+0x2b2>
        break;
 8004e98:	bf00      	nop
 8004e9a:	e002      	b.n	8004ea2 <_vsnprintf+0x2b2>
 8004e9c:	08003d35 	.word	0x08003d35
        break;
 8004ea0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	3b25      	subs	r3, #37	; 0x25
 8004ea8:	2b53      	cmp	r3, #83	; 0x53
 8004eaa:	f200 835c 	bhi.w	8005566 <_vsnprintf+0x976>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <_vsnprintf+0x2c4>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	0800554f 	.word	0x0800554f
 8004eb8:	08005567 	.word	0x08005567
 8004ebc:	08005567 	.word	0x08005567
 8004ec0:	08005567 	.word	0x08005567
 8004ec4:	08005567 	.word	0x08005567
 8004ec8:	08005567 	.word	0x08005567
 8004ecc:	08005567 	.word	0x08005567
 8004ed0:	08005567 	.word	0x08005567
 8004ed4:	08005567 	.word	0x08005567
 8004ed8:	08005567 	.word	0x08005567
 8004edc:	08005567 	.word	0x08005567
 8004ee0:	08005567 	.word	0x08005567
 8004ee4:	08005567 	.word	0x08005567
 8004ee8:	08005567 	.word	0x08005567
 8004eec:	08005567 	.word	0x08005567
 8004ef0:	08005567 	.word	0x08005567
 8004ef4:	08005567 	.word	0x08005567
 8004ef8:	08005567 	.word	0x08005567
 8004efc:	08005567 	.word	0x08005567
 8004f00:	08005567 	.word	0x08005567
 8004f04:	08005567 	.word	0x08005567
 8004f08:	08005567 	.word	0x08005567
 8004f0c:	08005567 	.word	0x08005567
 8004f10:	08005567 	.word	0x08005567
 8004f14:	08005567 	.word	0x08005567
 8004f18:	08005567 	.word	0x08005567
 8004f1c:	08005567 	.word	0x08005567
 8004f20:	08005567 	.word	0x08005567
 8004f24:	08005567 	.word	0x08005567
 8004f28:	08005567 	.word	0x08005567
 8004f2c:	08005567 	.word	0x08005567
 8004f30:	08005567 	.word	0x08005567
 8004f34:	08005307 	.word	0x08005307
 8004f38:	080052bb 	.word	0x080052bb
 8004f3c:	08005307 	.word	0x08005307
 8004f40:	08005567 	.word	0x08005567
 8004f44:	08005567 	.word	0x08005567
 8004f48:	08005567 	.word	0x08005567
 8004f4c:	08005567 	.word	0x08005567
 8004f50:	08005567 	.word	0x08005567
 8004f54:	08005567 	.word	0x08005567
 8004f58:	08005567 	.word	0x08005567
 8004f5c:	08005567 	.word	0x08005567
 8004f60:	08005567 	.word	0x08005567
 8004f64:	08005567 	.word	0x08005567
 8004f68:	08005567 	.word	0x08005567
 8004f6c:	08005567 	.word	0x08005567
 8004f70:	08005567 	.word	0x08005567
 8004f74:	08005567 	.word	0x08005567
 8004f78:	08005567 	.word	0x08005567
 8004f7c:	08005567 	.word	0x08005567
 8004f80:	08005005 	.word	0x08005005
 8004f84:	08005567 	.word	0x08005567
 8004f88:	08005567 	.word	0x08005567
 8004f8c:	08005567 	.word	0x08005567
 8004f90:	08005567 	.word	0x08005567
 8004f94:	08005567 	.word	0x08005567
 8004f98:	08005567 	.word	0x08005567
 8004f9c:	08005567 	.word	0x08005567
 8004fa0:	08005567 	.word	0x08005567
 8004fa4:	08005567 	.word	0x08005567
 8004fa8:	08005005 	.word	0x08005005
 8004fac:	08005373 	.word	0x08005373
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	08005307 	.word	0x08005307
 8004fb8:	080052bb 	.word	0x080052bb
 8004fbc:	08005307 	.word	0x08005307
 8004fc0:	08005567 	.word	0x08005567
 8004fc4:	08005005 	.word	0x08005005
 8004fc8:	08005567 	.word	0x08005567
 8004fcc:	08005567 	.word	0x08005567
 8004fd0:	08005567 	.word	0x08005567
 8004fd4:	08005567 	.word	0x08005567
 8004fd8:	08005567 	.word	0x08005567
 8004fdc:	08005005 	.word	0x08005005
 8004fe0:	080054b3 	.word	0x080054b3
 8004fe4:	08005567 	.word	0x08005567
 8004fe8:	08005567 	.word	0x08005567
 8004fec:	080053eb 	.word	0x080053eb
 8004ff0:	08005567 	.word	0x08005567
 8004ff4:	08005005 	.word	0x08005005
 8004ff8:	08005567 	.word	0x08005567
 8004ffc:	08005567 	.word	0x08005567
 8005000:	08005005 	.word	0x08005005
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b78      	cmp	r3, #120	; 0x78
 800500a:	d003      	beq.n	8005014 <_vsnprintf+0x424>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b58      	cmp	r3, #88	; 0x58
 8005012:	d102      	bne.n	800501a <_vsnprintf+0x42a>
          base = 16U;
 8005014:	2310      	movs	r3, #16
 8005016:	64bb      	str	r3, [r7, #72]	; 0x48
 8005018:	e013      	b.n	8005042 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b6f      	cmp	r3, #111	; 0x6f
 8005020:	d102      	bne.n	8005028 <_vsnprintf+0x438>
          base =  8U;
 8005022:	2308      	movs	r3, #8
 8005024:	64bb      	str	r3, [r7, #72]	; 0x48
 8005026:	e00c      	b.n	8005042 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b62      	cmp	r3, #98	; 0x62
 800502e:	d102      	bne.n	8005036 <_vsnprintf+0x446>
          base =  2U;
 8005030:	2302      	movs	r3, #2
 8005032:	64bb      	str	r3, [r7, #72]	; 0x48
 8005034:	e005      	b.n	8005042 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8005036:	230a      	movs	r3, #10
 8005038:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800503a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503c:	f023 0310 	bic.w	r3, r3, #16
 8005040:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b58      	cmp	r3, #88	; 0x58
 8005048:	d103      	bne.n	8005052 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800504a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504c:	f043 0320 	orr.w	r3, r3, #32
 8005050:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b69      	cmp	r3, #105	; 0x69
 8005058:	d007      	beq.n	800506a <_vsnprintf+0x47a>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b64      	cmp	r3, #100	; 0x64
 8005060:	d003      	beq.n	800506a <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005064:	f023 030c 	bic.w	r3, r3, #12
 8005068:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800506a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800506c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8005074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b69      	cmp	r3, #105	; 0x69
 8005082:	d004      	beq.n	800508e <_vsnprintf+0x49e>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b64      	cmp	r3, #100	; 0x64
 800508a:	f040 8098 	bne.w	80051be <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800508e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005094:	2b00      	cmp	r3, #0
 8005096:	d031      	beq.n	80050fc <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800509c:	3307      	adds	r3, #7
 800509e:	f023 0307 	bic.w	r3, r3, #7
 80050a2:	f103 0208 	add.w	r2, r3, #8
 80050a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80050b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	da06      	bge.n	80050c8 <_vsnprintf+0x4d8>
 80050ba:	2100      	movs	r1, #0
 80050bc:	f1d2 0800 	rsbs	r8, r2, #0
 80050c0:	eb61 0903 	sbc.w	r9, r1, r3
 80050c4:	4642      	mov	r2, r8
 80050c6:	464b      	mov	r3, r9
 80050c8:	69f9      	ldr	r1, [r7, #28]
 80050ca:	0fc9      	lsrs	r1, r1, #31
 80050cc:	b2c9      	uxtb	r1, r1
 80050ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80050d0:	2400      	movs	r4, #0
 80050d2:	4682      	mov	sl, r0
 80050d4:	46a3      	mov	fp, r4
 80050d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80050d8:	9008      	str	r0, [sp, #32]
 80050da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80050dc:	9007      	str	r0, [sp, #28]
 80050de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80050e0:	9006      	str	r0, [sp, #24]
 80050e2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80050e6:	9102      	str	r1, [sp, #8]
 80050e8:	e9cd 2300 	strd	r2, r3, [sp]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050f0:	6939      	ldr	r1, [r7, #16]
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f7ff f826 	bl	8004144 <_ntoa_long_long>
 80050f8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80050fa:	e0da      	b.n	80052b2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80050fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d020      	beq.n	8005148 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8005106:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800510a:	1d1a      	adds	r2, r3, #4
 800510c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfb8      	it	lt
 800511a:	425b      	neglt	r3, r3
 800511c:	4619      	mov	r1, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	0fdb      	lsrs	r3, r3, #31
 8005122:	b2db      	uxtb	r3, r3
 8005124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005126:	9205      	str	r2, [sp, #20]
 8005128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800512a:	9204      	str	r2, [sp, #16]
 800512c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800512e:	9203      	str	r2, [sp, #12]
 8005130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005132:	9202      	str	r2, [sp, #8]
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	9100      	str	r1, [sp, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800513c:	6939      	ldr	r1, [r7, #16]
 800513e:	6978      	ldr	r0, [r7, #20]
 8005140:	f7fe ff9a 	bl	8004078 <_ntoa_long>
 8005144:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005146:	e0b4      	b.n	80052b2 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <_vsnprintf+0x572>
 8005152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005156:	1d1a      	adds	r2, r3, #4
 8005158:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	e012      	b.n	8005188 <_vsnprintf+0x598>
 8005162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <_vsnprintf+0x58c>
 800516c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005170:	1d1a      	adds	r2, r3, #4
 8005172:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	b21b      	sxth	r3, r3
 800517a:	e005      	b.n	8005188 <_vsnprintf+0x598>
 800517c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005180:	1d1a      	adds	r2, r3, #4
 8005182:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	2b00      	cmp	r3, #0
 800518e:	bfb8      	it	lt
 8005190:	425b      	neglt	r3, r3
 8005192:	4619      	mov	r1, r3
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	0fdb      	lsrs	r3, r3, #31
 8005198:	b2db      	uxtb	r3, r3
 800519a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800519c:	9205      	str	r2, [sp, #20]
 800519e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051a0:	9204      	str	r2, [sp, #16]
 80051a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051a4:	9203      	str	r2, [sp, #12]
 80051a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a8:	9202      	str	r2, [sp, #8]
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	9100      	str	r1, [sp, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051b2:	6939      	ldr	r1, [r7, #16]
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f7fe ff5f 	bl	8004078 <_ntoa_long>
 80051ba:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80051bc:	e079      	b.n	80052b2 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80051be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d022      	beq.n	800520e <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80051c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051cc:	3307      	adds	r3, #7
 80051ce:	f023 0307 	bic.w	r3, r3, #7
 80051d2:	f103 0208 	add.w	r2, r3, #8
 80051d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051e0:	2000      	movs	r0, #0
 80051e2:	460d      	mov	r5, r1
 80051e4:	4606      	mov	r6, r0
 80051e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80051e8:	9108      	str	r1, [sp, #32]
 80051ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051ec:	9107      	str	r1, [sp, #28]
 80051ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051f0:	9106      	str	r1, [sp, #24]
 80051f2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80051f6:	2100      	movs	r1, #0
 80051f8:	9102      	str	r1, [sp, #8]
 80051fa:	e9cd 2300 	strd	r2, r3, [sp]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005202:	6939      	ldr	r1, [r7, #16]
 8005204:	6978      	ldr	r0, [r7, #20]
 8005206:	f7fe ff9d 	bl	8004144 <_ntoa_long_long>
 800520a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800520c:	e051      	b.n	80052b2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800520e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d018      	beq.n	800524a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800521c:	1d1a      	adds	r2, r3, #4
 800521e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005226:	9205      	str	r2, [sp, #20]
 8005228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800522a:	9204      	str	r2, [sp, #16]
 800522c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800522e:	9203      	str	r2, [sp, #12]
 8005230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005232:	9202      	str	r2, [sp, #8]
 8005234:	2200      	movs	r2, #0
 8005236:	9201      	str	r2, [sp, #4]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800523e:	6939      	ldr	r1, [r7, #16]
 8005240:	6978      	ldr	r0, [r7, #20]
 8005242:	f7fe ff19 	bl	8004078 <_ntoa_long>
 8005246:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005248:	e033      	b.n	80052b2 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800524a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <_vsnprintf+0x674>
 8005254:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005258:	1d1a      	adds	r2, r3, #4
 800525a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e012      	b.n	800528a <_vsnprintf+0x69a>
 8005264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <_vsnprintf+0x68e>
 800526e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	e005      	b.n	800528a <_vsnprintf+0x69a>
 800527e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005282:	1d1a      	adds	r2, r3, #4
 8005284:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800528c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528e:	9305      	str	r3, [sp, #20]
 8005290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005296:	9303      	str	r3, [sp, #12]
 8005298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529a:	9302      	str	r3, [sp, #8]
 800529c:	2300      	movs	r3, #0
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052a8:	6939      	ldr	r1, [r7, #16]
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7fe fee4 	bl	8004078 <_ntoa_long>
 80052b0:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60bb      	str	r3, [r7, #8]
        break;
 80052b8:	e162      	b.n	8005580 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b46      	cmp	r3, #70	; 0x46
 80052c0:	d103      	bne.n	80052ca <_vsnprintf+0x6da>
 80052c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052c4:	f043 0320 	orr.w	r3, r3, #32
 80052c8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80052ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052ce:	3307      	adds	r3, #7
 80052d0:	f023 0307 	bic.w	r3, r3, #7
 80052d4:	f103 0208 	add.w	r2, r3, #8
 80052d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80052e2:	9104      	str	r1, [sp, #16]
 80052e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052e6:	9103      	str	r1, [sp, #12]
 80052e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ea:	9102      	str	r1, [sp, #8]
 80052ec:	e9cd 2300 	strd	r2, r3, [sp]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052f4:	6939      	ldr	r1, [r7, #16]
 80052f6:	6978      	ldr	r0, [r7, #20]
 80052f8:	f7fe ff92 	bl	8004220 <_ftoa>
 80052fc:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	3301      	adds	r3, #1
 8005302:	60bb      	str	r3, [r7, #8]
        break;
 8005304:	e13c      	b.n	8005580 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b67      	cmp	r3, #103	; 0x67
 800530c:	d003      	beq.n	8005316 <_vsnprintf+0x726>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b47      	cmp	r3, #71	; 0x47
 8005314:	d103      	bne.n	800531e <_vsnprintf+0x72e>
 8005316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005318:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800531c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b45      	cmp	r3, #69	; 0x45
 8005324:	d003      	beq.n	800532e <_vsnprintf+0x73e>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b47      	cmp	r3, #71	; 0x47
 800532c:	d103      	bne.n	8005336 <_vsnprintf+0x746>
 800532e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005330:	f043 0320 	orr.w	r3, r3, #32
 8005334:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005336:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800533a:	3307      	adds	r3, #7
 800533c:	f023 0307 	bic.w	r3, r3, #7
 8005340:	f103 0208 	add.w	r2, r3, #8
 8005344:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800534e:	9104      	str	r1, [sp, #16]
 8005350:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005352:	9103      	str	r1, [sp, #12]
 8005354:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005356:	9102      	str	r1, [sp, #8]
 8005358:	e9cd 2300 	strd	r2, r3, [sp]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005360:	6939      	ldr	r1, [r7, #16]
 8005362:	6978      	ldr	r0, [r7, #20]
 8005364:	f7ff f9b4 	bl	80046d0 <_etoa>
 8005368:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	3301      	adds	r3, #1
 800536e:	60bb      	str	r3, [r7, #8]
        break;
 8005370:	e106      	b.n	8005580 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8005372:	2301      	movs	r3, #1
 8005374:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8005376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10e      	bne.n	800539e <_vsnprintf+0x7ae>
          while (l++ < width) {
 8005380:	e007      	b.n	8005392 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8005382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005384:	1c53      	adds	r3, r2, #1
 8005386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005388:	697c      	ldr	r4, [r7, #20]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6939      	ldr	r1, [r7, #16]
 800538e:	2020      	movs	r0, #32
 8005390:	47a0      	blx	r4
          while (l++ < width) {
 8005392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	647a      	str	r2, [r7, #68]	; 0x44
 8005398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800539a:	429a      	cmp	r2, r3
 800539c:	d8f1      	bhi.n	8005382 <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800539e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	b2d8      	uxtb	r0, r3
 80053ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ae:	1c53      	adds	r3, r2, #1
 80053b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b2:	697c      	ldr	r4, [r7, #20]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80053ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00e      	beq.n	80053e2 <_vsnprintf+0x7f2>
          while (l++ < width) {
 80053c4:	e007      	b.n	80053d6 <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 80053c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053c8:	1c53      	adds	r3, r2, #1
 80053ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053cc:	697c      	ldr	r4, [r7, #20]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6939      	ldr	r1, [r7, #16]
 80053d2:	2020      	movs	r0, #32
 80053d4:	47a0      	blx	r4
          while (l++ < width) {
 80053d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	647a      	str	r2, [r7, #68]	; 0x44
 80053dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053de:	429a      	cmp	r2, r3
 80053e0:	d8f1      	bhi.n	80053c6 <_vsnprintf+0x7d6>
          }
        }
        format++;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	3301      	adds	r3, #1
 80053e6:	60bb      	str	r3, [r7, #8]
        break;
 80053e8:	e0ca      	b.n	8005580 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80053ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053ee:	1d1a      	adds	r2, r3, #4
 80053f0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80053f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <_vsnprintf+0x812>
 80053fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005400:	e001      	b.n	8005406 <_vsnprintf+0x816>
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	4619      	mov	r1, r3
 8005408:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800540a:	f7fe fcb3 	bl	8003d74 <_strnlen_s>
 800540e:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8005410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 800541a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800541c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800541e:	4293      	cmp	r3, r2
 8005420:	bf28      	it	cs
 8005422:	4613      	movcs	r3, r2
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8005426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11a      	bne.n	8005466 <_vsnprintf+0x876>
          while (l++ < width) {
 8005430:	e007      	b.n	8005442 <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 8005432:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005434:	1c53      	adds	r3, r2, #1
 8005436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005438:	697c      	ldr	r4, [r7, #20]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6939      	ldr	r1, [r7, #16]
 800543e:	2020      	movs	r0, #32
 8005440:	47a0      	blx	r4
          while (l++ < width) {
 8005442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800544a:	429a      	cmp	r2, r3
 800544c:	d8f1      	bhi.n	8005432 <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800544e:	e00a      	b.n	8005466 <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8005450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	643a      	str	r2, [r7, #64]	; 0x40
 8005456:	7818      	ldrb	r0, [r3, #0]
 8005458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800545a:	1c53      	adds	r3, r2, #1
 800545c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800545e:	697c      	ldr	r4, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6939      	ldr	r1, [r7, #16]
 8005464:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <_vsnprintf+0x892>
 800546e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0eb      	beq.n	8005450 <_vsnprintf+0x860>
 8005478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	657a      	str	r2, [r7, #84]	; 0x54
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e6      	bne.n	8005450 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8005482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00e      	beq.n	80054aa <_vsnprintf+0x8ba>
          while (l++ < width) {
 800548c:	e007      	b.n	800549e <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 800548e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005490:	1c53      	adds	r3, r2, #1
 8005492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005494:	697c      	ldr	r4, [r7, #20]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6939      	ldr	r1, [r7, #16]
 800549a:	2020      	movs	r0, #32
 800549c:	47a0      	blx	r4
          while (l++ < width) {
 800549e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d8f1      	bhi.n	800548e <_vsnprintf+0x89e>
          }
        }
        format++;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	3301      	adds	r3, #1
 80054ae:	60bb      	str	r3, [r7, #8]
        break;
 80054b0:	e066      	b.n	8005580 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80054b2:	2308      	movs	r3, #8
 80054b4:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80054b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80054bc:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80054be:	2300      	movs	r3, #0
 80054c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 80054c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d023      	beq.n	8005514 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80054cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d0:	1d1a      	adds	r2, r3, #4
 80054d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	2300      	movs	r3, #0
 80054dc:	603a      	str	r2, [r7, #0]
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e2:	9308      	str	r3, [sp, #32]
 80054e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e6:	9307      	str	r3, [sp, #28]
 80054e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ea:	9306      	str	r3, [sp, #24]
 80054ec:	f04f 0210 	mov.w	r2, #16
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054f8:	2300      	movs	r3, #0
 80054fa:	9302      	str	r3, [sp, #8]
 80054fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005500:	e9cd 3400 	strd	r3, r4, [sp]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005508:	6939      	ldr	r1, [r7, #16]
 800550a:	6978      	ldr	r0, [r7, #20]
 800550c:	f7fe fe1a 	bl	8004144 <_ntoa_long_long>
 8005510:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005512:	e018      	b.n	8005546 <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8005514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005518:	1d1a      	adds	r2, r3, #4
 800551a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005524:	9305      	str	r3, [sp, #20]
 8005526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552c:	9303      	str	r3, [sp, #12]
 800552e:	2310      	movs	r3, #16
 8005530:	9302      	str	r3, [sp, #8]
 8005532:	2300      	movs	r3, #0
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	9200      	str	r2, [sp, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800553c:	6939      	ldr	r1, [r7, #16]
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	f7fe fd9a 	bl	8004078 <_ntoa_long>
 8005544:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	3301      	adds	r3, #1
 800554a:	60bb      	str	r3, [r7, #8]
        break;
 800554c:	e018      	b.n	8005580 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800554e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005550:	1c53      	adds	r3, r2, #1
 8005552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005554:	697c      	ldr	r4, [r7, #20]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6939      	ldr	r1, [r7, #16]
 800555a:	2025      	movs	r0, #37	; 0x25
 800555c:	47a0      	blx	r4
        format++;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3301      	adds	r3, #1
 8005562:	60bb      	str	r3, [r7, #8]
        break;
 8005564:	e00c      	b.n	8005580 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	7818      	ldrb	r0, [r3, #0]
 800556a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800556c:	1c53      	adds	r3, r2, #1
 800556e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005570:	697c      	ldr	r4, [r7, #20]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6939      	ldr	r1, [r7, #16]
 8005576:	47a0      	blx	r4
        format++;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	3301      	adds	r3, #1
 800557c:	60bb      	str	r3, [r7, #8]
        break;
 800557e:	bf00      	nop
  while (*format)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f47f ab45 	bne.w	8004c14 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800558a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	429a      	cmp	r2, r3
 8005590:	d302      	bcc.n	8005598 <_vsnprintf+0x9a8>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1e5a      	subs	r2, r3, #1
 8005596:	e000      	b.n	800559a <_vsnprintf+0x9aa>
 8005598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800559a:	697c      	ldr	r4, [r7, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6939      	ldr	r1, [r7, #16]
 80055a0:	2000      	movs	r0, #0
 80055a2:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80055a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3764      	adds	r7, #100	; 0x64
 80055aa:	46bd      	mov	sp, r7
 80055ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080055b0 <printf_>:


///

int printf_(const char* format, ...)
{
 80055b0:	b40f      	push	{r0, r1, r2, r3}
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b086      	sub	sp, #24
 80055b6:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80055b8:	f107 031c 	add.w	r3, r7, #28
 80055bc:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80055be:	1d39      	adds	r1, r7, #4
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ca:	4806      	ldr	r0, [pc, #24]	; (80055e4 <printf_+0x34>)
 80055cc:	f7ff fb10 	bl	8004bf0 <_vsnprintf>
 80055d0:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055de:	b004      	add	sp, #16
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	08003d4f 	.word	0x08003d4f

080055e8 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 80055e8:	b40e      	push	{r1, r2, r3}
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b087      	sub	sp, #28
 80055ee:	af02      	add	r7, sp, #8
 80055f0:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80055f2:	f107 0320 	add.w	r3, r7, #32
 80055f6:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4805      	ldr	r0, [pc, #20]	; (800561c <sprintf_+0x34>)
 8005606:	f7ff faf3 	bl	8004bf0 <_vsnprintf>
 800560a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800560c:	68fb      	ldr	r3, [r7, #12]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005618:	b003      	add	sp, #12
 800561a:	4770      	bx	lr
 800561c:	08003d09 	.word	0x08003d09

08005620 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8005624:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <Ringbuf_init+0x38>)
 8005626:	4a0d      	ldr	r2, [pc, #52]	; (800565c <Ringbuf_init+0x3c>)
 8005628:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800562a:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <Ringbuf_init+0x40>)
 800562c:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <Ringbuf_init+0x44>)
 800562e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8005630:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <Ringbuf_init+0x48>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <Ringbuf_init+0x48>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8005640:	4b09      	ldr	r3, [pc, #36]	; (8005668 <Ringbuf_init+0x48>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <Ringbuf_init+0x48>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0220 	orr.w	r2, r2, #32
 800564e:	60da      	str	r2, [r3, #12]
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr
 8005658:	20000bbc 	.word	0x20000bbc
 800565c:	200003ac 	.word	0x200003ac
 8005660:	20000bc0 	.word	0x20000bc0
 8005664:	200007b4 	.word	0x200007b4
 8005668:	200002d8 	.word	0x200002d8

0800566c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	6039      	str	r1, [r7, #0]
 8005676:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800567e:	3301      	adds	r3, #1
 8005680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005684:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	429a      	cmp	r2, r3
 8005690:	d009      	beq.n	80056a6 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	79f9      	ldrb	r1, [r7, #7]
 800569c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80056b6:	4b13      	ldr	r3, [pc, #76]	; (8005704 <Uart_read+0x54>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80056be:	4b11      	ldr	r3, [pc, #68]	; (8005704 <Uart_read+0x54>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d102      	bne.n	80056d0 <Uart_read+0x20>
  {
    return -1;
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295
 80056ce:	e013      	b.n	80056f8 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <Uart_read+0x54>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <Uart_read+0x54>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056dc:	5cd3      	ldrb	r3, [r2, r3]
 80056de:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80056e0:	4b08      	ldr	r3, [pc, #32]	; (8005704 <Uart_read+0x54>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	4b06      	ldr	r3, [pc, #24]	; (8005704 <Uart_read+0x54>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80056f2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    return c;
 80056f6:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000bbc 	.word	0x20000bbc

08005708 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <IsDataAvailable+0x30>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005714:	b29a      	uxth	r2, r3
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <IsDataAvailable+0x30>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800571e:	b29b      	uxth	r3, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	b29b      	uxth	r3, r3
 8005724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005728:	b29b      	uxth	r3, r3
 800572a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000bbc 	.word	0x20000bbc

0800573c <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <Uart_peek+0x34>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005748:	4b09      	ldr	r3, [pc, #36]	; (8005770 <Uart_peek+0x34>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005750:	429a      	cmp	r2, r3
 8005752:	d102      	bne.n	800575a <Uart_peek+0x1e>
  {
    return -1;
 8005754:	f04f 33ff 	mov.w	r3, #4294967295
 8005758:	e006      	b.n	8005768 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <Uart_peek+0x34>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b04      	ldr	r3, [pc, #16]	; (8005770 <Uart_peek+0x34>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005766:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8005768:	4618      	mov	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr
 8005770:	20000bbc 	.word	0x20000bbc

08005774 <Get_after>:

/* must be used after wait_for function
 * get the entered number of characters after the entered string
 */
int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	460b      	mov	r3, r1
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	72fb      	strb	r3, [r7, #11]
	for (int indx=0; indx<numberofchars; indx++)
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e01e      	b.n	80057c6 <Get_after+0x52>
	{
		timeout_rb = TIMEOUT_DEF;
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <Get_after+0x64>)
 800578a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800578e:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout_rb);  // wait until some data is available
 8005790:	bf00      	nop
 8005792:	f7ff ffb9 	bl	8005708 <IsDataAvailable>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <Get_after+0x30>
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <Get_after+0x64>)
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1f6      	bne.n	8005792 <Get_after+0x1e>
		if (timeout_rb == 0) return 0;  // if data isn't available within time, then return 0
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <Get_after+0x64>)
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <Get_after+0x3c>
 80057ac:	2300      	movs	r3, #0
 80057ae:	e00f      	b.n	80057d0 <Get_after+0x5c>
		buffertosave[indx] = Uart_read();  // save the data into the buffer... increments the tail
 80057b0:	f7ff ff7e 	bl	80056b0 <Uart_read>
 80057b4:	4601      	mov	r1, r0
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	4413      	add	r3, r2
 80057bc:	b2ca      	uxtb	r2, r1
 80057be:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	3301      	adds	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	7afb      	ldrb	r3, [r7, #11]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	dbdc      	blt.n	8005788 <Get_after+0x14>
	}
	return 1;
 80057ce:	2301      	movs	r3, #1
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	200003a8 	.word	0x200003a8

080057dc <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7fa fd1d 	bl	8000228 <strlen>
 80057ee:	4603      	mov	r3, r0
 80057f0:	60bb      	str	r3, [r7, #8]

again:
	timeout_rb = TIMEOUT_DEF;
 80057f2:	4b3c      	ldr	r3, [pc, #240]	; (80058e4 <Wait_for+0x108>)
 80057f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80057f8:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout_rb);  // let's wait for the data to show up
 80057fa:	bf00      	nop
 80057fc:	f7ff ff84 	bl	8005708 <IsDataAvailable>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <Wait_for+0x32>
 8005806:	4b37      	ldr	r3, [pc, #220]	; (80058e4 <Wait_for+0x108>)
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f6      	bne.n	80057fc <Wait_for+0x20>
	if (timeout_rb == 0) return 0;
 800580e:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <Wait_for+0x108>)
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d119      	bne.n	800584a <Wait_for+0x6e>
 8005816:	2300      	movs	r3, #0
 8005818:	e060      	b.n	80058dc <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 800581a:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <Wait_for+0x10c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005822:	4b31      	ldr	r3, [pc, #196]	; (80058e8 <Wait_for+0x10c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800582a:	429a      	cmp	r2, r3
 800582c:	d00b      	beq.n	8005846 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800582e:	4b2e      	ldr	r3, [pc, #184]	; (80058e8 <Wait_for+0x10c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <Wait_for+0x10c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005840:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005844:	e001      	b.n	800584a <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8005846:	2300      	movs	r3, #0
 8005848:	e048      	b.n	80058dc <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800584a:	f7ff ff77 	bl	800573c <Uart_peek>
 800584e:	4601      	mov	r1, r0
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4299      	cmp	r1, r3
 800585a:	d1de      	bne.n	800581a <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800585c:	e027      	b.n	80058ae <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3301      	adds	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8005864:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <Wait_for+0x10c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	4b1e      	ldr	r3, [pc, #120]	; (80058e8 <Wait_for+0x10c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005876:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		if (so_far == len) return 1;
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	d101      	bne.n	8005886 <Wait_for+0xaa>
 8005882:	2301      	movs	r3, #1
 8005884:	e02a      	b.n	80058dc <Wait_for+0x100>
		timeout_rb = TIMEOUT_DEF;
 8005886:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <Wait_for+0x108>)
 8005888:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800588c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout_rb);
 800588e:	bf00      	nop
 8005890:	f7ff ff3a 	bl	8005708 <IsDataAvailable>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <Wait_for+0xc6>
 800589a:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <Wait_for+0x108>)
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f6      	bne.n	8005890 <Wait_for+0xb4>
		if (timeout_rb == 0) return 0;
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <Wait_for+0x108>)
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <Wait_for+0xd2>
 80058aa:	2300      	movs	r3, #0
 80058ac:	e016      	b.n	80058dc <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80058ae:	f7ff ff45 	bl	800573c <Uart_peek>
 80058b2:	4601      	mov	r1, r0
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	4299      	cmp	r1, r3
 80058be:	d0ce      	beq.n	800585e <Wait_for+0x82>
	}

	if (so_far != len)
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d002      	beq.n	80058ce <Wait_for+0xf2>
	{
		so_far = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]
		goto again;
 80058cc:	e791      	b.n	80057f2 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d101      	bne.n	80058da <Wait_for+0xfe>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <Wait_for+0x100>
	else return 0;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	200003a8 	.word	0x200003a8
 80058e8:	20000bbc 	.word	0x20000bbc

080058ec <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d017      	beq.n	800593e <Uart_isr+0x52>
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d012      	beq.n	800593e <Uart_isr+0x52>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8005926:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <Uart_isr+0xbc>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	4611      	mov	r1, r2
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fe9c 	bl	800566c <store_char>

        extern UART_HandleTypeDef DebugUartHandle;
        WRITE_REG ( DebugUartHandle.Instance->DR,c);
 8005934:	4b1d      	ldr	r3, [pc, #116]	; (80059ac <Uart_isr+0xc0>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	7bfa      	ldrb	r2, [r7, #15]
 800593a:	605a      	str	r2, [r3, #4]
        return;
 800593c:	e031      	b.n	80059a2 <Uart_isr+0xb6>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b00      	cmp	r3, #0
 8005946:	d02c      	beq.n	80059a2 <Uart_isr+0xb6>
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d027      	beq.n	80059a2 <Uart_isr+0xb6>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8005952:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <Uart_isr+0xc4>)
 8005954:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005958:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <Uart_isr+0xc4>)
 800595a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800595e:	429a      	cmp	r2, r3
 8005960:	d108      	bne.n	8005974 <Uart_isr+0x88>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005970:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8005972:	e015      	b.n	80059a0 <Uart_isr+0xb4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <Uart_isr+0xc4>)
 8005976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800597a:	4a0d      	ldr	r2, [pc, #52]	; (80059b0 <Uart_isr+0xc4>)
 800597c:	5cd3      	ldrb	r3, [r2, r3]
 800597e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <Uart_isr+0xc4>)
 8005982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005986:	3301      	adds	r3, #1
 8005988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800598c:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <Uart_isr+0xc4>)
 800598e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	7bba      	ldrb	r2, [r7, #14]
 800599e:	605a      	str	r2, [r3, #4]
    	return;
 80059a0:	bf00      	nop
    }
}
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20000bbc 	.word	0x20000bbc
 80059ac:	200000d0 	.word	0x200000d0
 80059b0:	200007b4 	.word	0x200007b4

080059b4 <RTC_Init>:
uint8_t rmon,rday,rhour,rmin,rsec,rweek;
uint8_t const table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5};
uint8_t const mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};

void RTC_Init(RTC_HandleTypeDef* hrtc)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	6078      	str	r0, [r7, #4]
	hrtc->Instance = RTC;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <RTC_Init+0x68>)
 80059c0:	601a      	str	r2, [r3, #0]
	hrtc->Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	605a      	str	r2, [r3, #4]
	hrtc->Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(hrtc) != HAL_OK)
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f003 fb9b 	bl	800910c <HAL_RTC_Init>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <RTC_Init+0x2c>
	{
		Error_Handler();
 80059dc:	f7fe f97c 	bl	8003cd8 <Error_Handler>
	}
	//Check If first time connect to power source
	if(HAL_RTCEx_BKUPRead(hrtc,RTC_BKP_DR1)!=0x5050){//Deafult Value should be 0xffff
 80059e0:	2101      	movs	r1, #1
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f003 fcc0 	bl	8009368 <HAL_RTCEx_BKUPRead>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f245 0250 	movw	r2, #20560	; 0x5050
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d010      	beq.n	8005a14 <RTC_Init+0x60>
		HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR1,0x5050);
 80059f2:	f245 0250 	movw	r2, #20560	; 0x5050
 80059f6:	2101      	movs	r1, #1
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f003 fc9b 	bl	8009334 <HAL_RTCEx_BKUPWrite>
		RTC_Set(2022,1,1,0,0,0);
 80059fe:	2300      	movs	r3, #0
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	2300      	movs	r3, #0
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	2300      	movs	r3, #0
 8005a08:	2201      	movs	r2, #1
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8005a10:	f000 f806 	bl	8005a20 <RTC_Set>
	}
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40002800 	.word	0x40002800

08005a20 <RTC_Set>:

uint8_t RTC_Set(uint16_t syear, int8_t smon, uint8_t sday,uint8_t rhour,uint8_t rmin,uint8_t rsec){
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4623      	mov	r3, r4
 8005a30:	80fb      	strh	r3, [r7, #6]
 8005a32:	4603      	mov	r3, r0
 8005a34:	717b      	strb	r3, [r7, #5]
 8005a36:	460b      	mov	r3, r1
 8005a38:	713b      	strb	r3, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set Time According To Parameters (Be Done Later Using USART)
	 */
	uint16_t t;
	uint32_t seccount=0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
	if(syear<2000||syear>2099)return 1;// Range: 1970-2099
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a48:	d304      	bcc.n	8005a54 <RTC_Set+0x34>
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	f640 0233 	movw	r2, #2099	; 0x833
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d901      	bls.n	8005a58 <RTC_Set+0x38>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e081      	b.n	8005b5c <RTC_Set+0x13c>
	for(t=1970;t<syear;++t){
 8005a58:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8005a5c:	81fb      	strh	r3, [r7, #14]
 8005a5e:	e014      	b.n	8005a8a <RTC_Set+0x6a>
		if(Is_Leap_Year(t))seccount+=31622400;
 8005a60:	89fb      	ldrh	r3, [r7, #14]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f9dc 	bl	8005e20 <Is_Leap_Year>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d006      	beq.n	8005a7c <RTC_Set+0x5c>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
 8005a74:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	e003      	b.n	8005a84 <RTC_Set+0x64>
		else seccount+=31536000;
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	4b39      	ldr	r3, [pc, #228]	; (8005b64 <RTC_Set+0x144>)
 8005a80:	4413      	add	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]
	for(t=1970;t<syear;++t){
 8005a84:	89fb      	ldrh	r3, [r7, #14]
 8005a86:	3301      	adds	r3, #1
 8005a88:	81fb      	strh	r3, [r7, #14]
 8005a8a:	89fa      	ldrh	r2, [r7, #14]
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d3e6      	bcc.n	8005a60 <RTC_Set+0x40>
	}
	smon-=1;
 8005a92:	797b      	ldrb	r3, [r7, #5]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	717b      	strb	r3, [r7, #5]
	for(t=0;t<smon;t++){
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	81fb      	strh	r3, [r7, #14]
 8005a9e:	e01c      	b.n	8005ada <RTC_Set+0xba>
		seccount+=(uint32_t)mon_table[t]*86400;
 8005aa0:	89fb      	ldrh	r3, [r7, #14]
 8005aa2:	4a31      	ldr	r2, [pc, #196]	; (8005b68 <RTC_Set+0x148>)
 8005aa4:	5cd3      	ldrb	r3, [r2, r3]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4b30      	ldr	r3, [pc, #192]	; (8005b6c <RTC_Set+0x14c>)
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]
		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f9b2 	bl	8005e20 <Is_Leap_Year>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d008      	beq.n	8005ad4 <RTC_Set+0xb4>
 8005ac2:	89fb      	ldrh	r3, [r7, #14]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d105      	bne.n	8005ad4 <RTC_Set+0xb4>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005ace:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ad2:	60bb      	str	r3, [r7, #8]
	for(t=0;t<smon;t++){
 8005ad4:	89fb      	ldrh	r3, [r7, #14]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	81fb      	strh	r3, [r7, #14]
 8005ada:	89fa      	ldrh	r2, [r7, #14]
 8005adc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	dbdd      	blt.n	8005aa0 <RTC_Set+0x80>
	}
	seccount+=(uint32_t)(sday-1)*86400;
 8005ae4:	793b      	ldrb	r3, [r7, #4]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <RTC_Set+0x14c>)
 8005aec:	fb02 f303 	mul.w	r3, r2, r3
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	4413      	add	r3, r2
 8005af4:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rhour*3600;
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005afc:	fb02 f303 	mul.w	r3, r2, r3
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	4413      	add	r3, r2
 8005b04:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rmin*60;
 8005b06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	461a      	mov	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4413      	add	r3, r2
 8005b18:	60bb      	str	r3, [r7, #8]
	seccount += rsec;
 8005b1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	4413      	add	r3, r2
 8005b22:	60bb      	str	r3, [r7, #8]

	RTC->CRL|=1<<4;
 8005b24:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <RTC_Set+0x150>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a11      	ldr	r2, [pc, #68]	; (8005b70 <RTC_Set+0x150>)
 8005b2a:	f043 0310 	orr.w	r3, r3, #16
 8005b2e:	6053      	str	r3, [r2, #4]
	RTC->CNTL=seccount&0xffff;
 8005b30:	4a0f      	ldr	r2, [pc, #60]	; (8005b70 <RTC_Set+0x150>)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	61d3      	str	r3, [r2, #28]
	RTC->CNTH=seccount>>16;
 8005b38:	4a0d      	ldr	r2, [pc, #52]	; (8005b70 <RTC_Set+0x150>)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0c1b      	lsrs	r3, r3, #16
 8005b3e:	6193      	str	r3, [r2, #24]
	RTC->CRL&=~(1<<4);
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <RTC_Set+0x150>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <RTC_Set+0x150>)
 8005b46:	f023 0310 	bic.w	r3, r3, #16
 8005b4a:	6053      	str	r3, [r2, #4]
	while(!(RTC->CRL&(1<<5)));
 8005b4c:	bf00      	nop
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <RTC_Set+0x150>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f9      	beq.n	8005b4e <RTC_Set+0x12e>

	return 0;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd90      	pop	{r4, r7, pc}
 8005b64:	01e13380 	.word	0x01e13380
 8005b68:	0800d77c 	.word	0x0800d77c
 8005b6c:	00015180 	.word	0x00015180
 8005b70:	40002800 	.word	0x40002800

08005b74 <RTC_Get>:

uint8_t RTC_Get(void){
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
	/*
	 * Refresh Time variables in rtc.c
	 */
	static uint16_t daycnt=0;
	uint32_t timecount=0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	607b      	str	r3, [r7, #4]
	uint32_t temp=0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
	uint32_t temp1=0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]

	timecount=RTC->CNTH;
 8005b86:	4b65      	ldr	r3, [pc, #404]	; (8005d1c <RTC_Get+0x1a8>)
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	607b      	str	r3, [r7, #4]
	timecount<<=16;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	607b      	str	r3, [r7, #4]
	timecount+=RTC->CNTL;
 8005b92:	4b62      	ldr	r3, [pc, #392]	; (8005d1c <RTC_Get+0x1a8>)
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	607b      	str	r3, [r7, #4]

	temp=timecount/86400;//Day
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a60      	ldr	r2, [pc, #384]	; (8005d20 <RTC_Get+0x1ac>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	0c1b      	lsrs	r3, r3, #16
 8005ba6:	60fb      	str	r3, [r7, #12]
	if(daycnt!=temp){//New Day
 8005ba8:	4b5e      	ldr	r3, [pc, #376]	; (8005d24 <RTC_Get+0x1b0>)
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d066      	beq.n	8005c82 <RTC_Get+0x10e>
		daycnt=temp;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	4b5a      	ldr	r3, [pc, #360]	; (8005d24 <RTC_Get+0x1b0>)
 8005bba:	801a      	strh	r2, [r3, #0]
		temp1=1970;
 8005bbc:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8005bc0:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8005bc2:	e01b      	b.n	8005bfc <RTC_Get+0x88>
			if(Is_Leap_Year(temp1)){
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 f929 	bl	8005e20 <Is_Leap_Year>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00c      	beq.n	8005bee <RTC_Get+0x7a>
				if(temp>=366)temp-=366;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8005bda:	d304      	bcc.n	8005be6 <RTC_Get+0x72>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	e007      	b.n	8005bf6 <RTC_Get+0x82>
				else{temp1++; break;}
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	e00a      	b.n	8005c04 <RTC_Get+0x90>
			}
			else temp-=365;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 8005bf4:	60fb      	str	r3, [r7, #12]
			temp1++;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 8005c02:	d8df      	bhi.n	8005bc4 <RTC_Get+0x50>
		}
		ryear=temp1;//Year
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	4b47      	ldr	r3, [pc, #284]	; (8005d28 <RTC_Get+0x1b4>)
 8005c0a:	801a      	strh	r2, [r3, #0]
		temp1=0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8005c10:	e024      	b.n	8005c5c <RTC_Get+0xe8>
			if(Is_Leap_Year(ryear)&&temp1==1){
 8005c12:	4b45      	ldr	r3, [pc, #276]	; (8005d28 <RTC_Get+0x1b4>)
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f902 	bl	8005e20 <Is_Leap_Year>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <RTC_Get+0xc2>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d106      	bne.n	8005c36 <RTC_Get+0xc2>
				if(temp>=29)temp-=29;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b1c      	cmp	r3, #28
 8005c2c:	d91a      	bls.n	8005c64 <RTC_Get+0xf0>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3b1d      	subs	r3, #29
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e00f      	b.n	8005c56 <RTC_Get+0xe2>
				else break;
			}else{
			if(temp>=mon_table[temp1])temp-=mon_table[temp1];
 8005c36:	4a3d      	ldr	r2, [pc, #244]	; (8005d2c <RTC_Get+0x1b8>)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d310      	bcc.n	8005c68 <RTC_Get+0xf4>
 8005c46:	4a39      	ldr	r2, [pc, #228]	; (8005d2c <RTC_Get+0x1b8>)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
			else break;
			}
			temp1++;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b1b      	cmp	r3, #27
 8005c60:	d8d7      	bhi.n	8005c12 <RTC_Get+0x9e>
 8005c62:	e002      	b.n	8005c6a <RTC_Get+0xf6>
				else break;
 8005c64:	bf00      	nop
 8005c66:	e000      	b.n	8005c6a <RTC_Get+0xf6>
			else break;
 8005c68:	bf00      	nop
		}
		rmon=temp1+1;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	3301      	adds	r3, #1
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	4b2f      	ldr	r3, [pc, #188]	; (8005d30 <RTC_Get+0x1bc>)
 8005c74:	701a      	strb	r2, [r3, #0]
		rday=temp+1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	4b2d      	ldr	r3, [pc, #180]	; (8005d34 <RTC_Get+0x1c0>)
 8005c80:	701a      	strb	r2, [r3, #0]
	}
	temp=timecount%86400;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <RTC_Get+0x1ac>)
 8005c86:	fba2 1203 	umull	r1, r2, r2, r3
 8005c8a:	0c12      	lsrs	r2, r2, #16
 8005c8c:	492a      	ldr	r1, [pc, #168]	; (8005d38 <RTC_Get+0x1c4>)
 8005c8e:	fb01 f202 	mul.w	r2, r1, r2
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
	rhour=temp/3600;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4a28      	ldr	r2, [pc, #160]	; (8005d3c <RTC_Get+0x1c8>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	0adb      	lsrs	r3, r3, #11
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	4b27      	ldr	r3, [pc, #156]	; (8005d40 <RTC_Get+0x1cc>)
 8005ca4:	701a      	strb	r2, [r3, #0]
	rmin=(temp%3600)/60;
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <RTC_Get+0x1c8>)
 8005caa:	fba3 1302 	umull	r1, r3, r3, r2
 8005cae:	0adb      	lsrs	r3, r3, #11
 8005cb0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	4a22      	ldr	r2, [pc, #136]	; (8005d44 <RTC_Get+0x1d0>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <RTC_Get+0x1d4>)
 8005cc6:	701a      	strb	r2, [r3, #0]
	rsec=(temp%3600)%60;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4a1c      	ldr	r2, [pc, #112]	; (8005d3c <RTC_Get+0x1c8>)
 8005ccc:	fba2 1203 	umull	r1, r2, r2, r3
 8005cd0:	0ad2      	lsrs	r2, r2, #11
 8005cd2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005cd6:	fb01 f202 	mul.w	r2, r1, r2
 8005cda:	1a9a      	subs	r2, r3, r2
 8005cdc:	4b19      	ldr	r3, [pc, #100]	; (8005d44 <RTC_Get+0x1d0>)
 8005cde:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce2:	0959      	lsrs	r1, r3, #5
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	1a5b      	subs	r3, r3, r1
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	1ad1      	subs	r1, r2, r3
 8005cee:	b2ca      	uxtb	r2, r1
 8005cf0:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <RTC_Get+0x1d8>)
 8005cf2:	701a      	strb	r2, [r3, #0]
	rweek=RTC_Get_Week(ryear,rmon,rday);
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <RTC_Get+0x1b4>)
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	4a0d      	ldr	r2, [pc, #52]	; (8005d30 <RTC_Get+0x1bc>)
 8005cfa:	7812      	ldrb	r2, [r2, #0]
 8005cfc:	b291      	uxth	r1, r2
 8005cfe:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <RTC_Get+0x1c0>)
 8005d00:	7812      	ldrb	r2, [r2, #0]
 8005d02:	b292      	uxth	r2, r2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f825 	bl	8005d54 <RTC_Get_Week>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <RTC_Get+0x1dc>)
 8005d10:	701a      	strb	r2, [r3, #0]
	return 0;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40002800 	.word	0x40002800
 8005d20:	c22e4507 	.word	0xc22e4507
 8005d24:	20000bcc 	.word	0x20000bcc
 8005d28:	20000bc4 	.word	0x20000bc4
 8005d2c:	0800d77c 	.word	0x0800d77c
 8005d30:	20000bc6 	.word	0x20000bc6
 8005d34:	20000bc7 	.word	0x20000bc7
 8005d38:	00015180 	.word	0x00015180
 8005d3c:	91a2b3c5 	.word	0x91a2b3c5
 8005d40:	20000bc8 	.word	0x20000bc8
 8005d44:	88888889 	.word	0x88888889
 8005d48:	20000bc9 	.word	0x20000bc9
 8005d4c:	20000bca 	.word	0x20000bca
 8005d50:	20000bcb 	.word	0x20000bcb

08005d54 <RTC_Get_Week>:

uint8_t RTC_Get_Week(uint16_t year, uint16_t month, uint16_t day){
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	80fb      	strh	r3, [r7, #6]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	80bb      	strh	r3, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	807b      	strh	r3, [r7, #2]
	uint16_t temp2;
	uint8_t yearH,yearL;
	yearH=year/100;
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	4a2a      	ldr	r2, [pc, #168]	; (8005e14 <RTC_Get_Week+0xc0>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	733b      	strb	r3, [r7, #12]
	yearL=year%100;
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <RTC_Get_Week+0xc0>)
 8005d78:	fba2 1203 	umull	r1, r2, r2, r3
 8005d7c:	0952      	lsrs	r2, r2, #5
 8005d7e:	2164      	movs	r1, #100	; 0x64
 8005d80:	fb01 f202 	mul.w	r2, r1, r2
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	737b      	strb	r3, [r7, #13]
	if (yearH>19)yearL+=100;
 8005d8a:	7b3b      	ldrb	r3, [r7, #12]
 8005d8c:	2b13      	cmp	r3, #19
 8005d8e:	d902      	bls.n	8005d96 <RTC_Get_Week+0x42>
 8005d90:	7b7b      	ldrb	r3, [r7, #13]
 8005d92:	3364      	adds	r3, #100	; 0x64
 8005d94:	737b      	strb	r3, [r7, #13]
	temp2=yearL+yearL/4;
 8005d96:	7b7b      	ldrb	r3, [r7, #13]
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	7b7b      	ldrb	r3, [r7, #13]
 8005d9c:	089b      	lsrs	r3, r3, #2
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	81fb      	strh	r3, [r7, #14]
	temp2=temp2%7;
 8005da6:	89fa      	ldrh	r2, [r7, #14]
 8005da8:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <RTC_Get_Week+0xc4>)
 8005daa:	fba3 1302 	umull	r1, r3, r3, r2
 8005dae:	1ad1      	subs	r1, r2, r3
 8005db0:	0849      	lsrs	r1, r1, #1
 8005db2:	440b      	add	r3, r1
 8005db4:	0899      	lsrs	r1, r3, #2
 8005db6:	460b      	mov	r3, r1
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	1a5b      	subs	r3, r3, r1
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	81fb      	strh	r3, [r7, #14]
	temp2=temp2+day+table_week[month-1];
 8005dc0:	89fa      	ldrh	r2, [r7, #14]
 8005dc2:	887b      	ldrh	r3, [r7, #2]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	88bb      	ldrh	r3, [r7, #4]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	4913      	ldr	r1, [pc, #76]	; (8005e1c <RTC_Get_Week+0xc8>)
 8005dce:	5ccb      	ldrb	r3, [r1, r3]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	81fb      	strh	r3, [r7, #14]
	if (yearL%4==0&&month<3)temp2--;
 8005dd6:	7b7b      	ldrb	r3, [r7, #13]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d105      	bne.n	8005dee <RTC_Get_Week+0x9a>
 8005de2:	88bb      	ldrh	r3, [r7, #4]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d802      	bhi.n	8005dee <RTC_Get_Week+0x9a>
 8005de8:	89fb      	ldrh	r3, [r7, #14]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	81fb      	strh	r3, [r7, #14]
	return(temp2%7);
 8005dee:	89fa      	ldrh	r2, [r7, #14]
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <RTC_Get_Week+0xc4>)
 8005df2:	fba3 1302 	umull	r1, r3, r3, r2
 8005df6:	1ad1      	subs	r1, r2, r3
 8005df8:	0849      	lsrs	r1, r1, #1
 8005dfa:	440b      	add	r3, r1
 8005dfc:	0899      	lsrs	r1, r3, #2
 8005dfe:	460b      	mov	r3, r1
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	b2db      	uxtb	r3, r3
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	51eb851f 	.word	0x51eb851f
 8005e18:	24924925 	.word	0x24924925
 8005e1c:	0800d770 	.word	0x0800d770

08005e20 <Is_Leap_Year>:

uint8_t Is_Leap_Year(uint16_t year){
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	80fb      	strh	r3, [r7, #6]
	if(year%4==0){
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d11e      	bne.n	8005e74 <Is_Leap_Year+0x54>
		if(year%100==0){
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	4a11      	ldr	r2, [pc, #68]	; (8005e80 <Is_Leap_Year+0x60>)
 8005e3a:	fba2 1203 	umull	r1, r2, r2, r3
 8005e3e:	0952      	lsrs	r2, r2, #5
 8005e40:	2164      	movs	r1, #100	; 0x64
 8005e42:	fb01 f202 	mul.w	r2, r1, r2
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d110      	bne.n	8005e70 <Is_Leap_Year+0x50>
			if(year%400==0)return 1;
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <Is_Leap_Year+0x60>)
 8005e52:	fba2 1203 	umull	r1, r2, r2, r3
 8005e56:	09d2      	lsrs	r2, r2, #7
 8005e58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e5c:	fb01 f202 	mul.w	r2, r1, r2
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <Is_Leap_Year+0x4c>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e004      	b.n	8005e76 <Is_Leap_Year+0x56>
			else return 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e002      	b.n	8005e76 <Is_Leap_Year+0x56>
		}else return 1;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <Is_Leap_Year+0x56>
	}else return 0;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr
 8005e80:	51eb851f 	.word	0x51eb851f

08005e84 <RTC_raw>:

uint32_t RTC_raw(){
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
	uint32_t time;
	time=RTC->CNTH;
 8005e8a:	4b08      	ldr	r3, [pc, #32]	; (8005eac <RTC_raw+0x28>)
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	607b      	str	r3, [r7, #4]
	time<<=16;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	607b      	str	r3, [r7, #4]
	time+=RTC->CNTL;
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <RTC_raw+0x28>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	607b      	str	r3, [r7, #4]

	return time;
 8005ea0:	687b      	ldr	r3, [r7, #4]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr
 8005eac:	40002800 	.word	0x40002800

08005eb0 <get_TimeStamp>:


void get_TimeStamp(TimeStamp* t){
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
	/*
	 * Store Updated Values By a TimeStamp Pointer
	 */
	t->ryear = ryear;
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <get_TimeStamp+0x4c>)
 8005eba:	881a      	ldrh	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	801a      	strh	r2, [r3, #0]
	t->rmon = rmon;
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <get_TimeStamp+0x50>)
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	709a      	strb	r2, [r3, #2]
	t->rday = rday;
 8005ec8:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <get_TimeStamp+0x54>)
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	70da      	strb	r2, [r3, #3]
	t->rhour = rhour;
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <get_TimeStamp+0x58>)
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	711a      	strb	r2, [r3, #4]
	t->rmin = rmin;
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <get_TimeStamp+0x5c>)
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	715a      	strb	r2, [r3, #5]
	t->rsec = rsec;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <get_TimeStamp+0x60>)
 8005ee2:	781a      	ldrb	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	719a      	strb	r2, [r3, #6]
	t->rweek = rweek;
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <get_TimeStamp+0x64>)
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	71da      	strb	r2, [r3, #7]
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000bc4 	.word	0x20000bc4
 8005f00:	20000bc6 	.word	0x20000bc6
 8005f04:	20000bc7 	.word	0x20000bc7
 8005f08:	20000bc8 	.word	0x20000bc8
 8005f0c:	20000bc9 	.word	0x20000bc9
 8005f10:	20000bca 	.word	0x20000bca
 8005f14:	20000bcb 	.word	0x20000bcb

08005f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005f1e:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <HAL_MspInit+0x5c>)
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	4a14      	ldr	r2, [pc, #80]	; (8005f74 <HAL_MspInit+0x5c>)
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	6193      	str	r3, [r2, #24]
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <HAL_MspInit+0x5c>)
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	60bb      	str	r3, [r7, #8]
 8005f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <HAL_MspInit+0x5c>)
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <HAL_MspInit+0x5c>)
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f40:	61d3      	str	r3, [r2, #28]
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <HAL_MspInit+0x5c>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	607b      	str	r3, [r7, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <HAL_MspInit+0x60>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	4a04      	ldr	r2, [pc, #16]	; (8005f78 <HAL_MspInit+0x60>)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40010000 	.word	0x40010000

08005f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f84:	f107 0310 	add.w	r3, r7, #16
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a14      	ldr	r2, [pc, #80]	; (8005fe8 <HAL_ADC_MspInit+0x6c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d121      	bne.n	8005fe0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005f9c:	4b13      	ldr	r3, [pc, #76]	; (8005fec <HAL_ADC_MspInit+0x70>)
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	4a12      	ldr	r2, [pc, #72]	; (8005fec <HAL_ADC_MspInit+0x70>)
 8005fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fa6:	6193      	str	r3, [r2, #24]
 8005fa8:	4b10      	ldr	r3, [pc, #64]	; (8005fec <HAL_ADC_MspInit+0x70>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <HAL_ADC_MspInit+0x70>)
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	4a0c      	ldr	r2, [pc, #48]	; (8005fec <HAL_ADC_MspInit+0x70>)
 8005fba:	f043 0310 	orr.w	r3, r3, #16
 8005fbe:	6193      	str	r3, [r2, #24]
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <HAL_ADC_MspInit+0x70>)
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005fcc:	2304      	movs	r3, #4
 8005fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fd4:	f107 0310 	add.w	r3, r7, #16
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <HAL_ADC_MspInit+0x74>)
 8005fdc:	f002 f8e4 	bl	80081a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005fe0:	bf00      	nop
 8005fe2:	3720      	adds	r7, #32
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40012400 	.word	0x40012400
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40011000 	.word	0x40011000

08005ff4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0b      	ldr	r2, [pc, #44]	; (8006030 <HAL_RTC_MspInit+0x3c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d110      	bne.n	8006028 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8006006:	f002 fab9 	bl	800857c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <HAL_RTC_MspInit+0x40>)
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	4a09      	ldr	r2, [pc, #36]	; (8006034 <HAL_RTC_MspInit+0x40>)
 8006010:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006014:	61d3      	str	r3, [r2, #28]
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <HAL_RTC_MspInit+0x40>)
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RTC_MspInit+0x44>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40002800 	.word	0x40002800
 8006034:	40021000 	.word	0x40021000
 8006038:	4242043c 	.word	0x4242043c

0800603c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <HAL_TIM_Base_MspInit+0xc0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10c      	bne.n	8006068 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800604e:	4b2c      	ldr	r3, [pc, #176]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	4a2b      	ldr	r2, [pc, #172]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 8006054:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006058:	6193      	str	r3, [r2, #24]
 800605a:	4b29      	ldr	r3, [pc, #164]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006066:	e044      	b.n	80060f2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006070:	d10c      	bne.n	800608c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006072:	4b23      	ldr	r3, [pc, #140]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	4a22      	ldr	r2, [pc, #136]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	61d3      	str	r3, [r2, #28]
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	693b      	ldr	r3, [r7, #16]
}
 800608a:	e032      	b.n	80060f2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <HAL_TIM_Base_MspInit+0xc8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d114      	bne.n	80060c0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	4a19      	ldr	r2, [pc, #100]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 800609c:	f043 0302 	orr.w	r3, r3, #2
 80060a0:	61d3      	str	r3, [r2, #28]
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80060ae:	2200      	movs	r2, #0
 80060b0:	2100      	movs	r1, #0
 80060b2:	201d      	movs	r0, #29
 80060b4:	f001 ff39 	bl	8007f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80060b8:	201d      	movs	r0, #29
 80060ba:	f001 ff52 	bl	8007f62 <HAL_NVIC_EnableIRQ>
}
 80060be:	e018      	b.n	80060f2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a10      	ldr	r2, [pc, #64]	; (8006108 <HAL_TIM_Base_MspInit+0xcc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d113      	bne.n	80060f2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	4a0c      	ldr	r2, [pc, #48]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 80060d0:	f043 0308 	orr.w	r3, r3, #8
 80060d4:	61d3      	str	r3, [r2, #28]
 80060d6:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <HAL_TIM_Base_MspInit+0xc4>)
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	60bb      	str	r3, [r7, #8]
 80060e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80060e2:	2200      	movs	r2, #0
 80060e4:	2100      	movs	r1, #0
 80060e6:	2032      	movs	r0, #50	; 0x32
 80060e8:	f001 ff1f 	bl	8007f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80060ec:	2032      	movs	r0, #50	; 0x32
 80060ee:	f001 ff38 	bl	8007f62 <HAL_NVIC_EnableIRQ>
}
 80060f2:	bf00      	nop
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40021000 	.word	0x40021000
 8006104:	40000400 	.word	0x40000400
 8006108:	40000c00 	.word	0x40000c00

0800610c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006114:	f107 0310 	add.w	r3, r7, #16
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	609a      	str	r2, [r3, #8]
 8006120:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a10      	ldr	r2, [pc, #64]	; (8006168 <HAL_TIM_MspPostInit+0x5c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d118      	bne.n	800615e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800612c:	4b0f      	ldr	r3, [pc, #60]	; (800616c <HAL_TIM_MspPostInit+0x60>)
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	4a0e      	ldr	r2, [pc, #56]	; (800616c <HAL_TIM_MspPostInit+0x60>)
 8006132:	f043 0304 	orr.w	r3, r3, #4
 8006136:	6193      	str	r3, [r2, #24]
 8006138:	4b0c      	ldr	r3, [pc, #48]	; (800616c <HAL_TIM_MspPostInit+0x60>)
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006148:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614a:	2302      	movs	r3, #2
 800614c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800614e:	2302      	movs	r3, #2
 8006150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006152:	f107 0310 	add.w	r3, r7, #16
 8006156:	4619      	mov	r1, r3
 8006158:	4805      	ldr	r0, [pc, #20]	; (8006170 <HAL_TIM_MspPostInit+0x64>)
 800615a:	f002 f825 	bl	80081a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800615e:	bf00      	nop
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40021000 	.word	0x40021000
 8006170:	40010800 	.word	0x40010800

08006174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800617c:	f107 0318 	add.w	r3, r7, #24
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a40      	ldr	r2, [pc, #256]	; (8006290 <HAL_UART_MspInit+0x11c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d13a      	bne.n	800620a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006194:	4b3f      	ldr	r3, [pc, #252]	; (8006294 <HAL_UART_MspInit+0x120>)
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	4a3e      	ldr	r2, [pc, #248]	; (8006294 <HAL_UART_MspInit+0x120>)
 800619a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800619e:	6193      	str	r3, [r2, #24]
 80061a0:	4b3c      	ldr	r3, [pc, #240]	; (8006294 <HAL_UART_MspInit+0x120>)
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ac:	4b39      	ldr	r3, [pc, #228]	; (8006294 <HAL_UART_MspInit+0x120>)
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	4a38      	ldr	r2, [pc, #224]	; (8006294 <HAL_UART_MspInit+0x120>)
 80061b2:	f043 0304 	orr.w	r3, r3, #4
 80061b6:	6193      	str	r3, [r2, #24]
 80061b8:	4b36      	ldr	r3, [pc, #216]	; (8006294 <HAL_UART_MspInit+0x120>)
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80061c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ca:	2302      	movs	r3, #2
 80061cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061ce:	2303      	movs	r3, #3
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061d2:	f107 0318 	add.w	r3, r7, #24
 80061d6:	4619      	mov	r1, r3
 80061d8:	482f      	ldr	r0, [pc, #188]	; (8006298 <HAL_UART_MspInit+0x124>)
 80061da:	f001 ffe5 	bl	80081a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80061de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ec:	f107 0318 	add.w	r3, r7, #24
 80061f0:	4619      	mov	r1, r3
 80061f2:	4829      	ldr	r0, [pc, #164]	; (8006298 <HAL_UART_MspInit+0x124>)
 80061f4:	f001 ffd8 	bl	80081a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80061f8:	2200      	movs	r2, #0
 80061fa:	2100      	movs	r1, #0
 80061fc:	2025      	movs	r0, #37	; 0x25
 80061fe:	f001 fe94 	bl	8007f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006202:	2025      	movs	r0, #37	; 0x25
 8006204:	f001 fead 	bl	8007f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006208:	e03e      	b.n	8006288 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a23      	ldr	r2, [pc, #140]	; (800629c <HAL_UART_MspInit+0x128>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d139      	bne.n	8006288 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006214:	4b1f      	ldr	r3, [pc, #124]	; (8006294 <HAL_UART_MspInit+0x120>)
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <HAL_UART_MspInit+0x120>)
 800621a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800621e:	61d3      	str	r3, [r2, #28]
 8006220:	4b1c      	ldr	r3, [pc, #112]	; (8006294 <HAL_UART_MspInit+0x120>)
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800622c:	4b19      	ldr	r3, [pc, #100]	; (8006294 <HAL_UART_MspInit+0x120>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	4a18      	ldr	r2, [pc, #96]	; (8006294 <HAL_UART_MspInit+0x120>)
 8006232:	f043 0308 	orr.w	r3, r3, #8
 8006236:	6193      	str	r3, [r2, #24]
 8006238:	4b16      	ldr	r3, [pc, #88]	; (8006294 <HAL_UART_MspInit+0x120>)
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624a:	2302      	movs	r3, #2
 800624c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800624e:	2303      	movs	r3, #3
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006252:	f107 0318 	add.w	r3, r7, #24
 8006256:	4619      	mov	r1, r3
 8006258:	4811      	ldr	r0, [pc, #68]	; (80062a0 <HAL_UART_MspInit+0x12c>)
 800625a:	f001 ffa5 	bl	80081a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800625e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006268:	2300      	movs	r3, #0
 800626a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800626c:	f107 0318 	add.w	r3, r7, #24
 8006270:	4619      	mov	r1, r3
 8006272:	480b      	ldr	r0, [pc, #44]	; (80062a0 <HAL_UART_MspInit+0x12c>)
 8006274:	f001 ff98 	bl	80081a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006278:	2200      	movs	r2, #0
 800627a:	2100      	movs	r1, #0
 800627c:	2027      	movs	r0, #39	; 0x27
 800627e:	f001 fe54 	bl	8007f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006282:	2027      	movs	r0, #39	; 0x27
 8006284:	f001 fe6d 	bl	8007f62 <HAL_NVIC_EnableIRQ>
}
 8006288:	bf00      	nop
 800628a:	3728      	adds	r7, #40	; 0x28
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40013800 	.word	0x40013800
 8006294:	40021000 	.word	0x40021000
 8006298:	40010800 	.word	0x40010800
 800629c:	40004800 	.word	0x40004800
 80062a0:	40010c00 	.word	0x40010c00

080062a4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80062aa:	f107 0308 	add.w	r3, r7, #8
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	605a      	str	r2, [r3, #4]
 80062b4:	609a      	str	r2, [r3, #8]
 80062b6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <HAL_FSMC_MspInit+0x78>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d129      	bne.n	8006314 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <HAL_FSMC_MspInit+0x78>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80062c6:	4b16      	ldr	r3, [pc, #88]	; (8006320 <HAL_FSMC_MspInit+0x7c>)
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	4a15      	ldr	r2, [pc, #84]	; (8006320 <HAL_FSMC_MspInit+0x7c>)
 80062cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d0:	6153      	str	r3, [r2, #20]
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <HAL_FSMC_MspInit+0x7c>)
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	607b      	str	r3, [r7, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80062de:	f64f 7380 	movw	r3, #65408	; 0xff80
 80062e2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e4:	2302      	movs	r3, #2
 80062e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062e8:	2303      	movs	r3, #3
 80062ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062ec:	f107 0308 	add.w	r3, r7, #8
 80062f0:	4619      	mov	r1, r3
 80062f2:	480c      	ldr	r0, [pc, #48]	; (8006324 <HAL_FSMC_MspInit+0x80>)
 80062f4:	f001 ff58 	bl	80081a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80062f8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80062fc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062fe:	2302      	movs	r3, #2
 8006300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006302:	2303      	movs	r3, #3
 8006304:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006306:	f107 0308 	add.w	r3, r7, #8
 800630a:	4619      	mov	r1, r3
 800630c:	4806      	ldr	r0, [pc, #24]	; (8006328 <HAL_FSMC_MspInit+0x84>)
 800630e:	f001 ff4b 	bl	80081a8 <HAL_GPIO_Init>
 8006312:	e000      	b.n	8006316 <HAL_FSMC_MspInit+0x72>
    return;
 8006314:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000bd0 	.word	0x20000bd0
 8006320:	40021000 	.word	0x40021000
 8006324:	40011800 	.word	0x40011800
 8006328:	40011400 	.word	0x40011400

0800632c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8006334:	f7ff ffb6 	bl	80062a4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006350:	e7fe      	b.n	8006350 <HardFault_Handler+0x4>

08006352 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006352:	b480      	push	{r7}
 8006354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006356:	e7fe      	b.n	8006356 <MemManage_Handler+0x4>

08006358 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800635c:	e7fe      	b.n	800635c <BusFault_Handler+0x4>

0800635e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800635e:	b480      	push	{r7}
 8006360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006362:	e7fe      	b.n	8006362 <UsageFault_Handler+0x4>

08006364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006380:	bf00      	nop
 8006382:	46bd      	mov	sp, r7
 8006384:	bc80      	pop	{r7}
 8006386:	4770      	bx	lr

08006388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  extern uint16_t timeout_rb;
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(timeout_rb >0)  timeout_rb--;
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <SysTick_Handler+0x20>)
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <SysTick_Handler+0x18>
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <SysTick_Handler+0x20>)
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	4b02      	ldr	r3, [pc, #8]	; (80063a8 <SysTick_Handler+0x20>)
 800639e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063a0:	f000 fff2 	bl	8007388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063a4:	bf00      	nop
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	200003a8 	.word	0x200003a8

080063ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <EXTI4_IRQHandler+0x2c>)
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 80063bc:	4b07      	ldr	r3, [pc, #28]	; (80063dc <EXTI4_IRQHandler+0x30>)
 80063be:	2201      	movs	r2, #1
 80063c0:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80063c2:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <EXTI4_IRQHandler+0x2c>)
 80063c4:	2210      	movs	r2, #16
 80063c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80063c8:	2010      	movs	r0, #16
 80063ca:	f002 f8cd 	bl	8008568 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80063ce:	2010      	movs	r0, #16
 80063d0:	f002 f8b2 	bl	8008538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80063d4:	bf00      	nop
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40010400 	.word	0x40010400
 80063dc:	20000bda 	.word	0x20000bda

080063e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 80063e4:	4b0d      	ldr	r3, [pc, #52]	; (800641c <TIM3_IRQHandler+0x3c>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <TIM3_IRQHandler+0x3c>)
 80063ee:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <TIM3_IRQHandler+0x3c>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10c      	bne.n	8006412 <TIM3_IRQHandler+0x32>
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <TIM3_IRQHandler+0x40>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d108      	bne.n	8006412 <TIM3_IRQHandler+0x32>
		//LCD_DrawString(5,5,"Hi");



		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 8006400:	4808      	ldr	r0, [pc, #32]	; (8006424 <TIM3_IRQHandler+0x44>)
 8006402:	f003 f856 	bl	80094b2 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8006406:	4807      	ldr	r0, [pc, #28]	; (8006424 <TIM3_IRQHandler+0x44>)
 8006408:	f003 f897 	bl	800953a <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 800640c:	4b04      	ldr	r3, [pc, #16]	; (8006420 <TIM3_IRQHandler+0x40>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006412:	4804      	ldr	r0, [pc, #16]	; (8006424 <TIM3_IRQHandler+0x44>)
 8006414:	f003 f97c 	bl	8009710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006418:	bf00      	nop
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20000bd8 	.word	0x20000bd8
 8006420:	20000bd9 	.word	0x20000bd9
 8006424:	20000218 	.word	0x20000218

08006428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t ch = 1;
 800642e:	2301      	movs	r3, #1
 8006430:	71fb      	strb	r3, [r7, #7]
    if (__HAL_UART_GET_FLAG( &DebugUartHandle, UART_FLAG_RXNE ) != RESET)
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <USART1_IRQHandler+0x38>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b20      	cmp	r3, #32
 800643e:	d107      	bne.n	8006450 <USART1_IRQHandler+0x28>
    {
        ch=( uint16_t)READ_REG(DebugUartHandle.Instance->DR);
 8006440:	4b07      	ldr	r3, [pc, #28]	; (8006460 <USART1_IRQHandler+0x38>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	71fb      	strb	r3, [r7, #7]

        WRITE_REG ( WifiUartHandle.Instance->DR,ch);
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <USART1_IRQHandler+0x3c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	79fa      	ldrb	r2, [r7, #7]
 800644e:	605a      	str	r2, [r3, #4]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006450:	4805      	ldr	r0, [pc, #20]	; (8006468 <USART1_IRQHandler+0x40>)
 8006452:	f004 f8e1 	bl	800a618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200000d0 	.word	0x200000d0
 8006464:	20000110 	.word	0x20000110
 8006468:	20000298 	.word	0x20000298

0800646c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	extern void Uart_isr (UART_HandleTypeDef *huart);
	Uart_isr (&huart3);
 8006470:	4802      	ldr	r0, [pc, #8]	; (800647c <USART3_IRQHandler+0x10>)
 8006472:	f7ff fa3b 	bl	80058ec <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006476:	bf00      	nop
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	200002d8 	.word	0x200002d8

08006480 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <EXTI15_10_IRQHandler+0x30>)
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <EXTI15_10_IRQHandler+0x24>
	{
		extern void debug_alarm_set();
		debug_alarm_set();
 8006490:	f7fb f9dc 	bl	800184c <debug_alarm_set>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8006494:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <EXTI15_10_IRQHandler+0x30>)
 8006496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800649a:	615a      	str	r2, [r3, #20]
	HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 800649c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80064a0:	f002 f862 	bl	8008568 <HAL_GPIO_EXTI_Callback>
	}
	/* USER
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80064a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80064a8:	f002 f846 	bl	8008538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80064ac:	bf00      	nop
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40010400 	.word	0x40010400

080064b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 80064b8:	4b03      	ldr	r3, [pc, #12]	; (80064c8 <TIM5_IRQHandler+0x14>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80064be:	4803      	ldr	r0, [pc, #12]	; (80064cc <TIM5_IRQHandler+0x18>)
 80064c0:	f003 f926 	bl	8009710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80064c4:	bf00      	nop
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000010 	.word	0x20000010
 80064cc:	20000258 	.word	0x20000258

080064d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064d8:	4a14      	ldr	r2, [pc, #80]	; (800652c <_sbrk+0x5c>)
 80064da:	4b15      	ldr	r3, [pc, #84]	; (8006530 <_sbrk+0x60>)
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064e4:	4b13      	ldr	r3, [pc, #76]	; (8006534 <_sbrk+0x64>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064ec:	4b11      	ldr	r3, [pc, #68]	; (8006534 <_sbrk+0x64>)
 80064ee:	4a12      	ldr	r2, [pc, #72]	; (8006538 <_sbrk+0x68>)
 80064f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064f2:	4b10      	ldr	r3, [pc, #64]	; (8006534 <_sbrk+0x64>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d207      	bcs.n	8006510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006500:	f004 fd0c 	bl	800af1c <__errno>
 8006504:	4603      	mov	r3, r0
 8006506:	220c      	movs	r2, #12
 8006508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800650a:	f04f 33ff 	mov.w	r3, #4294967295
 800650e:	e009      	b.n	8006524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006510:	4b08      	ldr	r3, [pc, #32]	; (8006534 <_sbrk+0x64>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <_sbrk+0x64>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	4a05      	ldr	r2, [pc, #20]	; (8006534 <_sbrk+0x64>)
 8006520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006522:	68fb      	ldr	r3, [r7, #12]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20010000 	.word	0x20010000
 8006530:	00000400 	.word	0x00000400
 8006534:	20000bd4 	.word	0x20000bd4
 8006538:	20000bf0 	.word	0x20000bf0

0800653c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006540:	4b15      	ldr	r3, [pc, #84]	; (8006598 <SystemInit+0x5c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a14      	ldr	r2, [pc, #80]	; (8006598 <SystemInit+0x5c>)
 8006546:	f043 0301 	orr.w	r3, r3, #1
 800654a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800654c:	4b12      	ldr	r3, [pc, #72]	; (8006598 <SystemInit+0x5c>)
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4911      	ldr	r1, [pc, #68]	; (8006598 <SystemInit+0x5c>)
 8006552:	4b12      	ldr	r3, [pc, #72]	; (800659c <SystemInit+0x60>)
 8006554:	4013      	ands	r3, r2
 8006556:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <SystemInit+0x5c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a0e      	ldr	r2, [pc, #56]	; (8006598 <SystemInit+0x5c>)
 800655e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006566:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <SystemInit+0x5c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <SystemInit+0x5c>)
 800656e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006572:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006574:	4b08      	ldr	r3, [pc, #32]	; (8006598 <SystemInit+0x5c>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	4a07      	ldr	r2, [pc, #28]	; (8006598 <SystemInit+0x5c>)
 800657a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800657e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <SystemInit+0x5c>)
 8006582:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006586:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006588:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <SystemInit+0x64>)
 800658a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800658e:	609a      	str	r2, [r3, #8]
#endif 
}
 8006590:	bf00      	nop
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr
 8006598:	40021000 	.word	0x40021000
 800659c:	f8ff0000 	.word	0xf8ff0000
 80065a0:	e000ed00 	.word	0xe000ed00

080065a4 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <TIMER_INIT+0x20>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0201 	mvn.w	r2, #1
 80065b0:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 80065b2:	4804      	ldr	r0, [pc, #16]	; (80065c4 <TIMER_INIT+0x20>)
 80065b4:	f002 ff63 	bl	800947e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 80065b8:	4802      	ldr	r0, [pc, #8]	; (80065c4 <TIMER_INIT+0x20>)
 80065ba:	f002 ffa4 	bl	8009506 <HAL_TIM_Base_Start_IT>
}
 80065be:	bf00      	nop
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000258 	.word	0x20000258

080065c8 <delay_us>:

void delay_us(uint16_t nus)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80065d2:	4b18      	ldr	r3, [pc, #96]	; (8006634 <delay_us+0x6c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim2);
 80065da:	4b16      	ldr	r3, [pc, #88]	; (8006634 <delay_us+0x6c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4b14      	ldr	r3, [pc, #80]	; (8006634 <delay_us+0x6c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim2) < nus)
 80065ea:	bf00      	nop
 80065ec:	4b11      	ldr	r3, [pc, #68]	; (8006634 <delay_us+0x6c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d3f9      	bcc.n	80065ec <delay_us+0x24>
	{
	}
	__HAL_TIM_DISABLE(&htim2);
 80065f8:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <delay_us+0x6c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6a1a      	ldr	r2, [r3, #32]
 80065fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8006602:	4013      	ands	r3, r2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10f      	bne.n	8006628 <delay_us+0x60>
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <delay_us+0x6c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	f240 4344 	movw	r3, #1092	; 0x444
 8006612:	4013      	ands	r3, r2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d107      	bne.n	8006628 <delay_us+0x60>
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <delay_us+0x6c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <delay_us+0x6c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	200001d8 	.word	0x200001d8

08006638 <timer_min>:

void timer_min(uint8_t min)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <timer_min+0x38>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f06f 0201 	mvn.w	r2, #1
 800664a:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	b2da      	uxtb	r2, r3
 8006652:	4b08      	ldr	r3, [pc, #32]	; (8006674 <timer_min+0x3c>)
 8006654:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <timer_min+0x40>)
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 800665c:	4804      	ldr	r0, [pc, #16]	; (8006670 <timer_min+0x38>)
 800665e:	f002 ff0e 	bl	800947e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8006662:	4803      	ldr	r0, [pc, #12]	; (8006670 <timer_min+0x38>)
 8006664:	f002 ff4f 	bl	8009506 <HAL_TIM_Base_Start_IT>
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000218 	.word	0x20000218
 8006674:	20000bd8 	.word	0x20000bd8
 8006678:	20000bd9 	.word	0x20000bd9

0800667c <XPT2046_DelayUS>:
		-4.979353, -0.001750, 0.065168, -13.318824 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e00a      	b.n	80066a0 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 800668a:	230c      	movs	r3, #12
 800668c:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 800668e:	bf00      	nop
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	1e5a      	subs	r2, r3, #1
 8006694:	72fa      	strb	r2, [r7, #11]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1fa      	bne.n	8006690 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3301      	adds	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d3f0      	bcc.n	800668a <XPT2046_DelayUS+0xe>
			;

	}

}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 80066be:	2200      	movs	r2, #0
 80066c0:	2104      	movs	r1, #4
 80066c2:	481d      	ldr	r0, [pc, #116]	; (8006738 <XPT2046_WriteCMD+0x84>)
 80066c4:	f001 ff1f 	bl	8008506 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 80066c8:	2200      	movs	r2, #0
 80066ca:	2101      	movs	r1, #1
 80066cc:	481a      	ldr	r0, [pc, #104]	; (8006738 <XPT2046_WriteCMD+0x84>)
 80066ce:	f001 ff1a 	bl	8008506 <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
 80066d6:	e027      	b.n	8006728 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 80066d8:	79fa      	ldrb	r2, [r7, #7]
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	f1c3 0307 	rsb	r3, r3, #7
 80066e0:	fa42 f303 	asr.w	r3, r2, r3
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <XPT2046_WriteCMD+0x44>
 80066ec:	2201      	movs	r2, #1
 80066ee:	2104      	movs	r1, #4
 80066f0:	4811      	ldr	r0, [pc, #68]	; (8006738 <XPT2046_WriteCMD+0x84>)
 80066f2:	f001 ff08 	bl	8008506 <HAL_GPIO_WritePin>
 80066f6:	e004      	b.n	8006702 <XPT2046_WriteCMD+0x4e>
 80066f8:	2200      	movs	r2, #0
 80066fa:	2104      	movs	r1, #4
 80066fc:	480e      	ldr	r0, [pc, #56]	; (8006738 <XPT2046_WriteCMD+0x84>)
 80066fe:	f001 ff02 	bl	8008506 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8006702:	2005      	movs	r0, #5
 8006704:	f7ff ffba 	bl	800667c <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8006708:	2201      	movs	r2, #1
 800670a:	2101      	movs	r1, #1
 800670c:	480a      	ldr	r0, [pc, #40]	; (8006738 <XPT2046_WriteCMD+0x84>)
 800670e:	f001 fefa 	bl	8008506 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8006712:	2005      	movs	r0, #5
 8006714:	f7ff ffb2 	bl	800667c <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8006718:	2200      	movs	r2, #0
 800671a:	2101      	movs	r1, #1
 800671c:	4806      	ldr	r0, [pc, #24]	; (8006738 <XPT2046_WriteCMD+0x84>)
 800671e:	f001 fef2 	bl	8008506 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	3301      	adds	r3, #1
 8006726:	73fb      	strb	r3, [r7, #15]
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	2b07      	cmp	r3, #7
 800672c:	d9d4      	bls.n	80066d8 <XPT2046_WriteCMD+0x24>
	}

}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40011800 	.word	0x40011800

0800673c <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8006742:	2300      	movs	r3, #0
 8006744:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 8006746:	2200      	movs	r2, #0
 8006748:	2104      	movs	r1, #4
 800674a:	4819      	ldr	r0, [pc, #100]	; (80067b0 <XPT2046_ReadCMD+0x74>)
 800674c:	f001 fedb 	bl	8008506 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8006750:	2201      	movs	r2, #1
 8006752:	2101      	movs	r1, #1
 8006754:	4816      	ldr	r0, [pc, #88]	; (80067b0 <XPT2046_ReadCMD+0x74>)
 8006756:	f001 fed6 	bl	8008506 <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 800675a:	2300      	movs	r3, #0
 800675c:	71fb      	strb	r3, [r7, #7]
 800675e:	e01e      	b.n	800679e <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8006760:	2200      	movs	r2, #0
 8006762:	2101      	movs	r1, #1
 8006764:	4812      	ldr	r0, [pc, #72]	; (80067b0 <XPT2046_ReadCMD+0x74>)
 8006766:	f001 fece 	bl	8008506 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 800676a:	2108      	movs	r1, #8
 800676c:	4810      	ldr	r0, [pc, #64]	; (80067b0 <XPT2046_ReadCMD+0x74>)
 800676e:	f001 feb3 	bl	80084d8 <HAL_GPIO_ReadPin>
 8006772:	4603      	mov	r3, r0
 8006774:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 8006776:	887a      	ldrh	r2, [r7, #2]
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	f1c3 030b 	rsb	r3, r3, #11
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	b21a      	sxth	r2, r3
 8006784:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006788:	4313      	orrs	r3, r2
 800678a:	b21b      	sxth	r3, r3
 800678c:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 800678e:	2201      	movs	r2, #1
 8006790:	2101      	movs	r1, #1
 8006792:	4807      	ldr	r0, [pc, #28]	; (80067b0 <XPT2046_ReadCMD+0x74>)
 8006794:	f001 feb7 	bl	8008506 <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	3301      	adds	r3, #1
 800679c:	71fb      	strb	r3, [r7, #7]
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	2b0b      	cmp	r3, #11
 80067a2:	d9dd      	bls.n	8006760 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 80067a4:	88bb      	ldrh	r3, [r7, #4]

}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40011800 	.word	0x40011800

080067b4 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff ff77 	bl	80066b4 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 80067c6:	f7ff ffb9 	bl	800673c <XPT2046_ReadCMD>
 80067ca:	4603      	mov	r3, r0

}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 80067de:	2090      	movs	r0, #144	; 0x90
 80067e0:	f7ff ffe8 	bl	80067b4 <XPT2046_ReadAdc>
 80067e4:	4603      	mov	r3, r0
 80067e6:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 80067e8:	2001      	movs	r0, #1
 80067ea:	f7ff ff47 	bl	800667c <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 80067ee:	20d0      	movs	r0, #208	; 0xd0
 80067f0:	f7ff ffe0 	bl	80067b4 <XPT2046_ReadAdc>
 80067f4:	4603      	mov	r3, r0
 80067f6:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	89fa      	ldrh	r2, [r7, #14]
 80067fc:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	89ba      	ldrh	r2, [r7, #12]
 8006802:	801a      	strh	r2, [r3, #0]

}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 800680c:	b580      	push	{r7, lr}
 800680e:	b092      	sub	sp, #72	; 0x48
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8006814:	2300      	movs	r3, #0
 8006816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 800681a:	f107 0308 	add.w	r3, r7, #8
 800681e:	2228      	movs	r2, #40	; 0x28
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f004 fba4 	bl	800af70 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8006828:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800682c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8006830:	4611      	mov	r1, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff ffce 	bl	80067d4 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8006838:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800683c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	3348      	adds	r3, #72	; 0x48
 8006844:	443b      	add	r3, r7
 8006846:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 800684a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800684e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8006852:	330a      	adds	r3, #10
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	3348      	adds	r3, #72	; 0x48
 8006858:	443b      	add	r3, r7
 800685a:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 800685e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006862:	3301      	adds	r3, #1
 8006864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 8006868:	2110      	movs	r1, #16
 800686a:	4871      	ldr	r0, [pc, #452]	; (8006a30 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 800686c:	f001 fe34 	bl	80084d8 <HAL_GPIO_ReadPin>
 8006870:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <XPT2046_ReadAdc_Smooth_XY+0x72>
 8006876:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800687a:	2b09      	cmp	r3, #9
 800687c:	d9d4      	bls.n	8006828 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 800687e:	2110      	movs	r1, #16
 8006880:	486b      	ldr	r0, [pc, #428]	; (8006a30 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8006882:	f001 fe29 	bl	80084d8 <HAL_GPIO_ReadPin>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 800688c:	4b69      	ldr	r3, [pc, #420]	; (8006a34 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8006892:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006896:	2b0a      	cmp	r3, #10
 8006898:	f040 80c4 	bne.w	8006a24 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 800689c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80068a0:	643b      	str	r3, [r7, #64]	; 0x40
 80068a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 80068a6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80068aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80068b6:	e02b      	b.n	8006910 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 80068b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	3348      	adds	r3, #72	; 0x48
 80068c0:	443b      	add	r3, r7
 80068c2:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ca:	4293      	cmp	r3, r2
 80068cc:	dd08      	ble.n	80068e0 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 80068ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	3348      	adds	r3, #72	; 0x48
 80068d6:	443b      	add	r3, r7
 80068d8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80068dc:	643b      	str	r3, [r7, #64]	; 0x40
 80068de:	e012      	b.n	8006906 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 80068e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	3348      	adds	r3, #72	; 0x48
 80068e8:	443b      	add	r3, r7
 80068ea:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f2:	4293      	cmp	r3, r2
 80068f4:	da07      	bge.n	8006906 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 80068f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	3348      	adds	r3, #72	; 0x48
 80068fe:	443b      	add	r3, r7
 8006900:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8006906:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800690a:	3301      	adds	r3, #1
 800690c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006910:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006914:	2b09      	cmp	r3, #9
 8006916:	d9cf      	bls.n	80068b8 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800691e:	e02f      	b.n	8006980 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8006920:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006924:	330a      	adds	r3, #10
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	3348      	adds	r3, #72	; 0x48
 800692a:	443b      	add	r3, r7
 800692c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006930:	461a      	mov	r2, r3
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	4293      	cmp	r3, r2
 8006936:	dd09      	ble.n	800694c <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8006938:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800693c:	330a      	adds	r3, #10
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	3348      	adds	r3, #72	; 0x48
 8006942:	443b      	add	r3, r7
 8006944:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006948:	63bb      	str	r3, [r7, #56]	; 0x38
 800694a:	e014      	b.n	8006976 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 800694c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006950:	330a      	adds	r3, #10
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	3348      	adds	r3, #72	; 0x48
 8006956:	443b      	add	r3, r7
 8006958:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800695c:	461a      	mov	r2, r3
 800695e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006960:	4293      	cmp	r3, r2
 8006962:	da08      	bge.n	8006976 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8006964:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006968:	330a      	adds	r3, #10
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	3348      	adds	r3, #72	; 0x48
 800696e:	443b      	add	r3, r7
 8006970:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 8006976:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800697a:	3301      	adds	r3, #1
 800697c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006980:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006984:	2b09      	cmp	r3, #9
 8006986:	d9cb      	bls.n	8006920 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8006988:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800698c:	461a      	mov	r2, r3
 800698e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006992:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8006994:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800699e:	4413      	add	r3, r2
 80069a0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80069a4:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 80069a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80069aa:	4413      	add	r3, r2
 80069ac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80069b0:	4413      	add	r3, r2
 80069b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80069b6:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 80069b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80069bc:	4413      	add	r3, r2
 80069be:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80069c2:	441a      	add	r2, r3
 80069c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c6:	1ad2      	subs	r2, r2, r3
 80069c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ca:	1ad3      	subs	r3, r2, r3
				>> 3;
 80069cc:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 80069d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80069d8:	461a      	mov	r2, r3
 80069da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80069de:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 80069e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80069e4:	4413      	add	r3, r2
 80069e6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80069ea:	4413      	add	r3, r2
 80069ec:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80069f0:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 80069f2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80069f6:	4413      	add	r3, r2
 80069f8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80069fc:	4413      	add	r3, r2
 80069fe:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006a02:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8006a04:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8006a08:	4413      	add	r3, r2
 8006a0a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006a0e:	441a      	add	r2, r3
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	1ad3      	subs	r3, r2, r3
				>> 3;
 8006a18:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	805a      	strh	r2, [r3, #2]

		return 1;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8006a24:	2300      	movs	r3, #0

}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3748      	adds	r7, #72	; 0x48
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40011800 	.word	0x40011800
 8006a34:	20000bda 	.word	0x20000bda

08006a38 <XPT2046_Calculate_CalibrationFactor>:
#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(
		strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_Coordinate *pScreenSample,
		strType_XPT2046_Calibration *pCalibrationFactor) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8006a44:	2301      	movs	r3, #1
 8006a46:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	3308      	adds	r3, #8
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	1ad3      	subs	r3, r2, r3
			* (pScreenSample[1].y - pScreenSample[2].y))
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	3204      	adds	r2, #4
 8006a5a:	8852      	ldrh	r2, [r2, #2]
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	3208      	adds	r2, #8
 8006a62:	8852      	ldrh	r2, [r2, #2]
 8006a64:	1a8a      	subs	r2, r1, r2
 8006a66:	fb03 f202 	mul.w	r2, r3, r2
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	4619      	mov	r1, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	3308      	adds	r3, #8
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	1acb      	subs	r3, r1, r3
					* (pScreenSample[0].y - pScreenSample[2].y));
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	8849      	ldrh	r1, [r1, #2]
 8006a7e:	4608      	mov	r0, r1
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	3108      	adds	r1, #8
 8006a84:	8849      	ldrh	r1, [r1, #2]
 8006a86:	1a41      	subs	r1, r0, r1
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8006a8c:	1ad3      	subs	r3, r2, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7f9 fd24 	bl	80004dc <__aeabi_i2d>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	f7f9 ffe8 	bl	8000a80 <__aeabi_dcmpeq>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	75fb      	strb	r3, [r7, #23]
 8006aba:	e145      	b.n	8006d48 <XPT2046_Calculate_CalibrationFactor+0x310>

	else {

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].x)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	3204      	adds	r2, #4
 8006ace:	8852      	ldrh	r2, [r2, #2]
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	3208      	adds	r2, #8
 8006ad6:	8852      	ldrh	r2, [r2, #2]
 8006ad8:	1a8a      	subs	r2, r1, r2
 8006ada:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8006aee:	68b9      	ldr	r1, [r7, #8]
 8006af0:	8849      	ldrh	r1, [r1, #2]
 8006af2:	4608      	mov	r0, r1
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	3108      	adds	r1, #8
 8006af8:	8849      	ldrh	r1, [r1, #2]
 8006afa:	1a41      	subs	r1, r0, r1
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8006b00:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7f9 fcea 	bl	80004dc <__aeabi_i2d>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x))
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	3204      	adds	r2, #4
 8006b24:	8812      	ldrh	r2, [r2, #0]
 8006b26:	4611      	mov	r1, r2
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	3208      	adds	r2, #8
 8006b2c:	8812      	ldrh	r2, [r2, #0]
 8006b2e:	1a8a      	subs	r2, r1, r2
 8006b30:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	3104      	adds	r1, #4
 8006b46:	8809      	ldrh	r1, [r1, #0]
 8006b48:	4608      	mov	r0, r1
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	3108      	adds	r1, #8
 8006b4e:	8809      	ldrh	r1, [r1, #0]
 8006b50:	1a41      	subs	r1, r0, r1
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8006b56:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7f9 fcbf 	bl	80004dc <__aeabi_i2d>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3304      	adds	r3, #4
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].x)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	4619      	mov	r1, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3308      	adds	r3, #8
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	8852      	ldrh	r2, [r2, #2]
 8006b92:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].x)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	fb00 f303 	mul.w	r3, r0, r3
 8006bb6:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	3104      	adds	r1, #4
 8006bbc:	8849      	ldrh	r1, [r1, #2]
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8006bc2:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].x)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	fb00 f303 	mul.w	r3, r0, r3
 8006be4:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	3108      	adds	r1, #8
 8006bea:	8849      	ldrh	r1, [r1, #2]
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8006bf0:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7f9 fc72 	bl	80004dc <__aeabi_i2d>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].y)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	885b      	ldrh	r3, [r3, #2]
 8006c0e:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	3204      	adds	r2, #4
 8006c14:	8852      	ldrh	r2, [r2, #2]
 8006c16:	4611      	mov	r1, r2
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	3208      	adds	r2, #8
 8006c1c:	8852      	ldrh	r2, [r2, #2]
 8006c1e:	1a8a      	subs	r2, r1, r2
 8006c20:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3304      	adds	r3, #4
 8006c28:	885b      	ldrh	r3, [r3, #2]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	885b      	ldrh	r3, [r3, #2]
 8006c32:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	8849      	ldrh	r1, [r1, #2]
 8006c38:	4608      	mov	r0, r1
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	3108      	adds	r1, #8
 8006c3e:	8849      	ldrh	r1, [r1, #2]
 8006c40:	1a41      	subs	r1, r0, r1
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8006c46:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7f9 fc47 	bl	80004dc <__aeabi_i2d>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	3308      	adds	r3, #8
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y))
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	3204      	adds	r2, #4
 8006c6a:	8852      	ldrh	r2, [r2, #2]
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	3208      	adds	r2, #8
 8006c72:	8852      	ldrh	r2, [r2, #2]
 8006c74:	1a8a      	subs	r2, r1, r2
 8006c76:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3308      	adds	r3, #8
 8006c84:	885b      	ldrh	r3, [r3, #2]
 8006c86:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	3104      	adds	r1, #4
 8006c8c:	8809      	ldrh	r1, [r1, #0]
 8006c8e:	4608      	mov	r0, r1
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	3108      	adds	r1, #8
 8006c94:	8809      	ldrh	r1, [r1, #0]
 8006c96:	1a41      	subs	r1, r0, r1
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8006c9c:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7f9 fc1c 	bl	80004dc <__aeabi_i2d>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	885b      	ldrh	r3, [r3, #2]
 8006cbc:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].y)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	885b      	ldrh	r3, [r3, #2]
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	8852      	ldrh	r2, [r2, #2]
 8006cd8:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	885b      	ldrh	r3, [r3, #2]
 8006ce8:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].y)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	3308      	adds	r3, #8
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	885b      	ldrh	r3, [r3, #2]
 8006cf8:	fb00 f303 	mul.w	r3, r0, r3
 8006cfc:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	3104      	adds	r1, #4
 8006d02:	8849      	ldrh	r1, [r1, #2]
 8006d04:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8006d08:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	4619      	mov	r1, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	885b      	ldrh	r3, [r3, #2]
 8006d16:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].y)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3304      	adds	r3, #4
 8006d24:	885b      	ldrh	r3, [r3, #2]
 8006d26:	fb00 f303 	mul.w	r3, r0, r3
 8006d2a:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	3108      	adds	r1, #8
 8006d30:	8849      	ldrh	r1, [r1, #2]
 8006d32:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8006d36:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7f9 fbcf 	bl	80004dc <__aeabi_i2d>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}

	return ucRet;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]

}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void) {
 8006d54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d58:	b0a0      	sub	sp, #128	; 0x80
 8006d5a:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8006d62:	2300      	movs	r3, #0
 8006d64:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char *pStr = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	66bb      	str	r3, [r7, #104]	; 0x68
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 8006d78:	23f0      	movs	r3, #240	; 0xf0
 8006d7a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 8006d7e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006d82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	    usScreenWidth = LCD_Default_Max_Heigth;
	    usScreenHeigth = LCD_Default_Max_Width;
	
	  #endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 8006d86:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 8006d92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006d96:	089b      	lsrs	r3, r3, #2
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8006d9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006da2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8006da6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8006daa:	4613      	mov	r3, r2
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4413      	add	r3, r2
 8006db0:	109b      	asrs	r3, r3, #2
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8006db8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	4413      	add	r3, r2
 8006dc2:	109b      	asrs	r3, r3, #2
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8006dca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006dce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8006dd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006dd6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8006dda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006dde:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	LCD_GramScan(1);
 8006de2:	2001      	movs	r0, #1
 8006de4:	f7fb fe6e 	bl	8002ac4 <LCD_GramScan>

	for (i = 0; i < 4; i++) {
 8006de8:	2300      	movs	r3, #0
 8006dea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006dee:	e047      	b.n	8006e80 <XPT2046_Touch_Calibrate+0x12c>
		LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8006df0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006df4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006df8:	2100      	movs	r1, #0
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	f7fb fbe8 	bl	80025d0 <LCD_Clear>

		pStr = "Touch Calibrate ......";
 8006e00:	4bb6      	ldr	r3, [pc, #728]	; (80070dc <XPT2046_Touch_Calibrate+0x388>)
 8006e02:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color(
				(usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1,
 8006e04:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8006e08:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8006e0a:	f7f9 fa0d 	bl	8000228 <strlen>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	3b07      	subs	r3, #7
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	1ae3      	subs	r3, r4, r3
 8006e16:	085b      	lsrs	r3, r3, #1
		LCD_DrawString_Color(
 8006e18:	b298      	uxth	r0, r3
 8006e1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006e1e:	085b      	lsrs	r3, r3, #1
 8006e20:	b299      	uxth	r1, r3
 8006e22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e2e:	f7fb fe13 	bl	8002a58 <LCD_DrawString_Color>
		/*
		sprintf(cStr, "%d", i + 1);
		LCD_DrawString_Color(usScreenWidth >> 1,
				(usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
		*/
		XPT2046_DelayUS(100000);
 8006e32:	48ab      	ldr	r0, [pc, #684]	; (80070e0 <XPT2046_Touch_Calibrate+0x38c>)
 8006e34:	f7ff fc22 	bl	800667c <XPT2046_DelayUS>

		LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8006e38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	3378      	adds	r3, #120	; 0x78
 8006e40:	443b      	add	r3, r7
 8006e42:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8006e46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	3378      	adds	r3, #120	; 0x78
 8006e4e:	443b      	add	r3, r7
 8006e50:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7fb fddc 	bl	8002a14 <LCD_DrawCross>

		while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
 8006e5c:	bf00      	nop
 8006e5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff fcce 	bl	800680c <XPT2046_ReadAdc_Smooth_XY>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0f3      	beq.n	8006e5e <XPT2046_Touch_Calibrate+0x10a>
	for (i = 0; i < 4; i++) {
 8006e76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006e80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d9b3      	bls.n	8006df0 <XPT2046_Touch_Calibrate+0x9c>
			;

	}

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample,
 8006e88:	463a      	mov	r2, r7
 8006e8a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006e8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7ff fdd0 	bl	8006a38 <XPT2046_Calculate_CalibrationFactor>
			&CalibrationFactor);

	if (CalibrationFactor.Divider == 0)
 8006e98:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	f7f9 fdec 	bl	8000a80 <__aeabi_dcmpeq>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f040 8113 	bne.w	80070d6 <XPT2046_Touch_Calibrate+0x382>
		goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8006eb0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7f9 fb0f 	bl	80004dc <__aeabi_i2d>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	f7f9 fb73 	bl	80005b0 <__aeabi_dmul>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4690      	mov	r8, r2
 8006ed0:	4699      	mov	r9, r3
			+ (CalibrationFactor.Bn * strScreenSample[3].y)
 8006ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ed6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7f9 fafe 	bl	80004dc <__aeabi_i2d>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f7f9 fb62 	bl	80005b0 <__aeabi_dmul>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	f7f9 f9a6 	bl	8000244 <__adddf3>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4610      	mov	r0, r2
 8006efe:	4619      	mov	r1, r3
			+ CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8006f00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f04:	f7f9 f99e 	bl	8000244 <__adddf3>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4619      	mov	r1, r3
 8006f10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f14:	f7f9 fc76 	bl	8000804 <__aeabi_ddiv>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	f7f9 fe08 	bl	8000b34 <__aeabi_d2uiz>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8006f2a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8006f2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7f9 fad2 	bl	80004dc <__aeabi_i2d>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	4629      	mov	r1, r5
 8006f40:	f7f9 fb36 	bl	80005b0 <__aeabi_dmul>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4690      	mov	r8, r2
 8006f4a:	4699      	mov	r9, r3
			+ (CalibrationFactor.En * strScreenSample[3].y)
 8006f4c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006f50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7f9 fac1 	bl	80004dc <__aeabi_i2d>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 fb25 	bl	80005b0 <__aeabi_dmul>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	f7f9 f969 	bl	8000244 <__adddf3>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4610      	mov	r0, r2
 8006f78:	4619      	mov	r1, r3
			+ CalibrationFactor.Fn) / CalibrationFactor.Divider;
 8006f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f7e:	f7f9 f961 	bl	8000244 <__adddf3>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f8e:	f7f9 fc39 	bl	8000804 <__aeabi_ddiv>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8006f96:	4610      	mov	r0, r2
 8006f98:	4619      	mov	r1, r3
 8006f9a:	f7f9 fdcb 	bl	8000b34 <__aeabi_d2uiz>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x =
			(usTest_x > strCrossCoordinate[3].x) ?
 8006fa4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8006fa8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d906      	bls.n	8006fbe <XPT2046_Touch_Calibrate+0x26a>
					(usTest_x - strCrossCoordinate[3].x) :
 8006fb0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8006fb4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	e005      	b.n	8006fca <XPT2046_Touch_Calibrate+0x276>
					(strCrossCoordinate[3].x - usTest_x);
 8006fbe:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	usGap_x =
 8006fc2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y =
			(usTest_y > strCrossCoordinate[3].y) ?
 8006fce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8006fd2:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d906      	bls.n	8006fe8 <XPT2046_Touch_Calibrate+0x294>
					(usTest_y - strCrossCoordinate[3].y) :
 8006fda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8006fde:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	e005      	b.n	8006ff4 <XPT2046_Touch_Calibrate+0x2a0>
					(strCrossCoordinate[3].y - usTest_y);
 8006fe8:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
	usGap_y =
 8006fec:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((usGap_x > 10) || (usGap_y > 10))
 8006ff8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8006ffc:	2b0a      	cmp	r3, #10
 8006ffe:	d877      	bhi.n	80070f0 <XPT2046_Touch_Calibrate+0x39c>
 8007000:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007004:	2b0a      	cmp	r3, #10
 8007006:	d873      	bhi.n	80070f0 <XPT2046_Touch_Calibrate+0x39c>
		goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8007008:	e9d7 0100 	ldrd	r0, r1, [r7]
			/ CalibrationFactor.Divider;
 800700c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007010:	f7f9 fbf8 	bl	8000804 <__aeabi_ddiv>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8007018:	4932      	ldr	r1, [pc, #200]	; (80070e4 <XPT2046_Touch_Calibrate+0x390>)
 800701a:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 800701e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
			/ CalibrationFactor.Divider;
 8007022:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007026:	f7f9 fbed 	bl	8000804 <__aeabi_ddiv>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 800702e:	492d      	ldr	r1, [pc, #180]	; (80070e4 <XPT2046_Touch_Calibrate+0x390>)
 8007030:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8007034:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
			/ CalibrationFactor.Divider;
 8007038:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800703c:	f7f9 fbe2 	bl	8000804 <__aeabi_ddiv>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8007044:	4927      	ldr	r1, [pc, #156]	; (80070e4 <XPT2046_Touch_Calibrate+0x390>)
 8007046:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 800704a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			/ CalibrationFactor.Divider;
 800704e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007052:	f7f9 fbd7 	bl	8000804 <__aeabi_ddiv>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 800705a:	4922      	ldr	r1, [pc, #136]	; (80070e4 <XPT2046_Touch_Calibrate+0x390>)
 800705c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8007060:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
			/ CalibrationFactor.Divider;
 8007064:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007068:	f7f9 fbcc 	bl	8000804 <__aeabi_ddiv>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8007070:	491c      	ldr	r1, [pc, #112]	; (80070e4 <XPT2046_Touch_Calibrate+0x390>)
 8007072:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8007076:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
			/ CalibrationFactor.Divider;
 800707a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800707e:	f7f9 fbc1 	bl	8000804 <__aeabi_ddiv>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8007086:	4917      	ldr	r1, [pc, #92]	; (80070e4 <XPT2046_Touch_Calibrate+0x390>)
 8007088:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

#endif

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 800708c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007090:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8007094:	2100      	movs	r1, #0
 8007096:	2000      	movs	r0, #0
 8007098:	f7fb fa9a 	bl	80025d0 <LCD_Clear>

	pStr = "Welcome !";
 800709c:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <XPT2046_Touch_Calibrate+0x394>)
 800709e:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 80070a0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80070a4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80070a6:	f7f9 f8bf 	bl	8000228 <strlen>
 80070aa:	4603      	mov	r3, r0
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	1ae3      	subs	r3, r4, r3
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	b298      	uxth	r0, r3
 80070b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	b299      	uxth	r1, r3
 80070bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070c8:	f7fb fcc6 	bl	8002a58 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(200000);
 80070cc:	4807      	ldr	r0, [pc, #28]	; (80070ec <XPT2046_Touch_Calibrate+0x398>)
 80070ce:	f7ff fad5 	bl	800667c <XPT2046_DelayUS>

	return 1;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e04b      	b.n	800716e <XPT2046_Touch_Calibrate+0x41a>
		goto Failure;
 80070d6:	bf00      	nop
 80070d8:	e00b      	b.n	80070f2 <XPT2046_Touch_Calibrate+0x39e>
 80070da:	bf00      	nop
 80070dc:	0800cfd0 	.word	0x0800cfd0
 80070e0:	000186a0 	.word	0x000186a0
 80070e4:	20000018 	.word	0x20000018
 80070e8:	0800cfe8 	.word	0x0800cfe8
 80070ec:	00030d40 	.word	0x00030d40
		goto Failure;
 80070f0:	bf00      	nop

	Failure:

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 80070f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80070f6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80070fa:	2100      	movs	r1, #0
 80070fc:	2000      	movs	r0, #0
 80070fe:	f7fb fa67 	bl	80025d0 <LCD_Clear>

	pStr = "Calibrate fail";
 8007102:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <XPT2046_Touch_Calibrate+0x424>)
 8007104:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8007106:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800710a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800710c:	f7f9 f88c 	bl	8000228 <strlen>
 8007110:	4603      	mov	r3, r0
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	1ae3      	subs	r3, r4, r3
 8007116:	085b      	lsrs	r3, r3, #1
 8007118:	b298      	uxth	r0, r3
 800711a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800711e:	085b      	lsrs	r3, r3, #1
 8007120:	b299      	uxth	r1, r3
 8007122:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800712c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800712e:	f7fb fc93 	bl	8002a58 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	pStr = "try again";
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <XPT2046_Touch_Calibrate+0x428>)
 8007134:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8007136:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800713a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800713c:	f7f9 f874 	bl	8000228 <strlen>
 8007140:	4603      	mov	r3, r0
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	1ae3      	subs	r3, r4, r3
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	b298      	uxth	r0, r3
 800714a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	b29b      	uxth	r3, r3
 8007152:	3310      	adds	r3, #16
 8007154:	b299      	uxth	r1, r3
 8007156:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007160:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007162:	f7fb fc79 	bl	8002a58 <LCD_DrawString_Color>
			(usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);
 8007166:	4806      	ldr	r0, [pc, #24]	; (8007180 <XPT2046_Touch_Calibrate+0x42c>)
 8007168:	f7ff fa88 	bl	800667c <XPT2046_DelayUS>

	return 0;
 800716c:	2300      	movs	r3, #0

}
 800716e:	4618      	mov	r0, r3
 8007170:	3778      	adds	r7, #120	; 0x78
 8007172:	46bd      	mov	sp, r7
 8007174:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007178:	0800cff4 	.word	0x0800cff4
 800717c:	0800d004 	.word	0x0800d004
 8007180:	000f4240 	.word	0x000f4240

08007184 <XPT2046_Get_TouchedPoint>:

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8007184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8007190:	2301      	movs	r3, #1
 8007192:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8007194:	f107 0308 	add.w	r3, r7, #8
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff fb37 	bl	800680c <XPT2046_ReadAdc_Smooth_XY>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d06e      	beq.n	8007282 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80071aa:	893b      	ldrh	r3, [r7, #8]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7f9 f995 	bl	80004dc <__aeabi_i2d>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7f9 f9f9 	bl	80005b0 <__aeabi_dmul>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4690      	mov	r8, r2
 80071c4:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80071cc:	897b      	ldrh	r3, [r7, #10]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7f9 f984 	bl	80004dc <__aeabi_i2d>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4620      	mov	r0, r4
 80071da:	4629      	mov	r1, r5
 80071dc:	f7f9 f9e8 	bl	80005b0 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4640      	mov	r0, r8
 80071e6:	4649      	mov	r1, r9
 80071e8:	f7f9 f82c 	bl	8000244 <__adddf3>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4610      	mov	r0, r2
 80071f2:	4619      	mov	r1, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80071fa:	f7f9 f823 	bl	8000244 <__adddf3>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	f7f9 fc95 	bl	8000b34 <__aeabi_d2uiz>
 800720a:	4603      	mov	r3, r0
 800720c:	b29a      	uxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007218:	893b      	ldrh	r3, [r7, #8]
 800721a:	4618      	mov	r0, r3
 800721c:	f7f9 f95e 	bl	80004dc <__aeabi_i2d>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4620      	mov	r0, r4
 8007226:	4629      	mov	r1, r5
 8007228:	f7f9 f9c2 	bl	80005b0 <__aeabi_dmul>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4690      	mov	r8, r2
 8007232:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800723a:	897b      	ldrh	r3, [r7, #10]
 800723c:	4618      	mov	r0, r3
 800723e:	f7f9 f94d 	bl	80004dc <__aeabi_i2d>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 f9b1 	bl	80005b0 <__aeabi_dmul>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4640      	mov	r0, r8
 8007254:	4649      	mov	r1, r9
 8007256:	f7f8 fff5 	bl	8000244 <__adddf3>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4610      	mov	r0, r2
 8007260:	4619      	mov	r1, r3
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007268:	f7f8 ffec 	bl	8000244 <__adddf3>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8007270:	4610      	mov	r0, r2
 8007272:	4619      	mov	r1, r3
 8007274:	f7f9 fc5e 	bl	8000b34 <__aeabi_d2uiz>
 8007278:	4603      	mov	r3, r0
 800727a:	b29a      	uxth	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	805a      	strh	r2, [r3, #2]
 8007280:	e001      	b.n	8007286 <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 8007286:	7bfb      	ldrb	r3, [r7, #15]

}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007292 <XPT2046_Reset_TouchPoint>:

void XPT2046_Reset_TouchPoint(strType_XPT2046_Coordinate *pDisplayCoordinate){
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
	//Reset X and Y
	pDisplayCoordinate->x = 0;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	801a      	strh	r2, [r3, #0]
	pDisplayCoordinate->y = 0;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	805a      	strh	r2, [r3, #2]
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr

080072b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80072b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80072b2:	e003      	b.n	80072bc <LoopCopyDataInit>

080072b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80072b4:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80072b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80072b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80072ba:	3104      	adds	r1, #4

080072bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80072bc:	480a      	ldr	r0, [pc, #40]	; (80072e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80072be:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80072c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80072c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80072c4:	d3f6      	bcc.n	80072b4 <CopyDataInit>
  ldr r2, =_sbss
 80072c6:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80072c8:	e002      	b.n	80072d0 <LoopFillZerobss>

080072ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80072ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80072cc:	f842 3b04 	str.w	r3, [r2], #4

080072d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80072d0:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80072d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80072d4:	d3f9      	bcc.n	80072ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80072d6:	f7ff f931 	bl	800653c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80072da:	f003 fe25 	bl	800af28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80072de:	f7fb fd43 	bl	8002d68 <main>
  bx lr
 80072e2:	4770      	bx	lr
  ldr r3, =_sidata
 80072e4:	08077300 	.word	0x08077300
  ldr r0, =_sdata
 80072e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80072ec:	200000b4 	.word	0x200000b4
  ldr r2, =_sbss
 80072f0:	200000b4 	.word	0x200000b4
  ldr r3, = _ebss
 80072f4:	20000bf0 	.word	0x20000bf0

080072f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80072f8:	e7fe      	b.n	80072f8 <ADC1_2_IRQHandler>
	...

080072fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007300:	4b08      	ldr	r3, [pc, #32]	; (8007324 <HAL_Init+0x28>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a07      	ldr	r2, [pc, #28]	; (8007324 <HAL_Init+0x28>)
 8007306:	f043 0310 	orr.w	r3, r3, #16
 800730a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800730c:	2003      	movs	r0, #3
 800730e:	f000 fe01 	bl	8007f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007312:	2000      	movs	r0, #0
 8007314:	f000 f808 	bl	8007328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007318:	f7fe fdfe 	bl	8005f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	40022000 	.word	0x40022000

08007328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007330:	4b12      	ldr	r3, [pc, #72]	; (800737c <HAL_InitTick+0x54>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	4b12      	ldr	r3, [pc, #72]	; (8007380 <HAL_InitTick+0x58>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	4619      	mov	r1, r3
 800733a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800733e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	4618      	mov	r0, r3
 8007348:	f000 fe19 	bl	8007f7e <HAL_SYSTICK_Config>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e00e      	b.n	8007374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b0f      	cmp	r3, #15
 800735a:	d80a      	bhi.n	8007372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800735c:	2200      	movs	r2, #0
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	f000 fde1 	bl	8007f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007368:	4a06      	ldr	r2, [pc, #24]	; (8007384 <HAL_InitTick+0x5c>)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	e000      	b.n	8007374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000014 	.word	0x20000014
 8007380:	2000004c 	.word	0x2000004c
 8007384:	20000048 	.word	0x20000048

08007388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <HAL_IncTick+0x1c>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <HAL_IncTick+0x20>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4413      	add	r3, r2
 8007398:	4a03      	ldr	r2, [pc, #12]	; (80073a8 <HAL_IncTick+0x20>)
 800739a:	6013      	str	r3, [r2, #0]
}
 800739c:	bf00      	nop
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr
 80073a4:	2000004c 	.word	0x2000004c
 80073a8:	20000bdc 	.word	0x20000bdc

080073ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  return uwTick;
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <HAL_GetTick+0x10>)
 80073b2:	681b      	ldr	r3, [r3, #0]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr
 80073bc:	20000bdc 	.word	0x20000bdc

080073c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073c8:	f7ff fff0 	bl	80073ac <HAL_GetTick>
 80073cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d005      	beq.n	80073e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073da:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <HAL_Delay+0x44>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80073e6:	bf00      	nop
 80073e8:	f7ff ffe0 	bl	80073ac <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d8f7      	bhi.n	80073e8 <HAL_Delay+0x28>
  {
  }
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	2000004c 	.word	0x2000004c

08007408 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e0ce      	b.n	80075c8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007434:	2b00      	cmp	r3, #0
 8007436:	d109      	bne.n	800744c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fe fd98 	bl	8005f7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fbc3 	bl	8007bd8 <ADC_ConversionStop_Disable>
 8007452:	4603      	mov	r3, r0
 8007454:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	f003 0310 	and.w	r3, r3, #16
 800745e:	2b00      	cmp	r3, #0
 8007460:	f040 80a9 	bne.w	80075b6 <HAL_ADC_Init+0x1ae>
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f040 80a5 	bne.w	80075b6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007474:	f023 0302 	bic.w	r3, r3, #2
 8007478:	f043 0202 	orr.w	r2, r3, #2
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4951      	ldr	r1, [pc, #324]	; (80075d0 <HAL_ADC_Init+0x1c8>)
 800748a:	428b      	cmp	r3, r1
 800748c:	d10a      	bne.n	80074a4 <HAL_ADC_Init+0x9c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007496:	d002      	beq.n	800749e <HAL_ADC_Init+0x96>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	e004      	b.n	80074a8 <HAL_ADC_Init+0xa0>
 800749e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074a2:	e001      	b.n	80074a8 <HAL_ADC_Init+0xa0>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80074a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80074b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c0:	d003      	beq.n	80074ca <HAL_ADC_Init+0xc2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d102      	bne.n	80074d0 <HAL_ADC_Init+0xc8>
 80074ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074ce:	e000      	b.n	80074d2 <HAL_ADC_Init+0xca>
 80074d0:	2300      	movs	r3, #0
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d119      	bne.n	8007514 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	035a      	lsls	r2, r3, #13
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80074f8:	613b      	str	r3, [r7, #16]
 80074fa:	e00b      	b.n	8007514 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	f043 0220 	orr.w	r2, r3, #32
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	f043 0201 	orr.w	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	4b29      	ldr	r3, [pc, #164]	; (80075d4 <HAL_ADC_Init+0x1cc>)
 8007530:	4013      	ands	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6812      	ldr	r2, [r2, #0]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	430b      	orrs	r3, r1
 800753a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007544:	d003      	beq.n	800754e <HAL_ADC_Init+0x146>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d104      	bne.n	8007558 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	3b01      	subs	r3, #1
 8007554:	051b      	lsls	r3, r3, #20
 8007556:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	430a      	orrs	r2, r1
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	4b19      	ldr	r3, [pc, #100]	; (80075d8 <HAL_ADC_Init+0x1d0>)
 8007574:	4013      	ands	r3, r2
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	429a      	cmp	r2, r3
 800757a:	d10b      	bne.n	8007594 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	f023 0303 	bic.w	r3, r3, #3
 800758a:	f043 0201 	orr.w	r2, r3, #1
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007592:	e018      	b.n	80075c6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	f023 0312 	bic.w	r3, r3, #18
 800759c:	f043 0210 	orr.w	r2, r3, #16
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	f043 0201 	orr.w	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80075b4:	e007      	b.n	80075c6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	f043 0210 	orr.w	r2, r3, #16
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40013c00 	.word	0x40013c00
 80075d4:	ffe1f7fd 	.word	0xffe1f7fd
 80075d8:	ff1f0efe 	.word	0xff1f0efe

080075dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HAL_ADC_Start+0x1a>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e098      	b.n	8007728 <HAL_ADC_Start+0x14c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa98 	bl	8007b34 <ADC_Enable>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f040 8087 	bne.w	800771e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a41      	ldr	r2, [pc, #260]	; (8007730 <HAL_ADC_Start+0x154>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d105      	bne.n	800763a <HAL_ADC_Start+0x5e>
 800762e:	4b41      	ldr	r3, [pc, #260]	; (8007734 <HAL_ADC_Start+0x158>)
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d115      	bne.n	8007666 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007650:	2b00      	cmp	r3, #0
 8007652:	d026      	beq.n	80076a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800765c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007664:	e01d      	b.n	80076a2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a2f      	ldr	r2, [pc, #188]	; (8007734 <HAL_ADC_Start+0x158>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d004      	beq.n	8007686 <HAL_ADC_Start+0xaa>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a2b      	ldr	r2, [pc, #172]	; (8007730 <HAL_ADC_Start+0x154>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d10d      	bne.n	80076a2 <HAL_ADC_Start+0xc6>
 8007686:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <HAL_ADC_Start+0x158>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800768e:	2b00      	cmp	r3, #0
 8007690:	d007      	beq.n	80076a2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800769a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d006      	beq.n	80076bc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	f023 0206 	bic.w	r2, r3, #6
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80076ba:	e002      	b.n	80076c2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f06f 0202 	mvn.w	r2, #2
 80076d2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80076de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80076e2:	d113      	bne.n	800770c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80076e8:	4a11      	ldr	r2, [pc, #68]	; (8007730 <HAL_ADC_Start+0x154>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d105      	bne.n	80076fa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80076ee:	4b11      	ldr	r3, [pc, #68]	; (8007734 <HAL_ADC_Start+0x158>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d108      	bne.n	800770c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007708:	609a      	str	r2, [r3, #8]
 800770a:	e00c      	b.n	8007726 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800771a:	609a      	str	r2, [r3, #8]
 800771c:	e003      	b.n	8007726 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	40012800 	.word	0x40012800
 8007734:	40012400 	.word	0x40012400

08007738 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800774e:	f7ff fe2d 	bl	80073ac <HAL_GetTick>
 8007752:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00b      	beq.n	800777a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	f043 0220 	orr.w	r2, r3, #32
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e0c8      	b.n	800790c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007784:	2b00      	cmp	r3, #0
 8007786:	d12a      	bne.n	80077de <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007792:	2b00      	cmp	r3, #0
 8007794:	d123      	bne.n	80077de <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007796:	e01a      	b.n	80077ce <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d016      	beq.n	80077ce <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d007      	beq.n	80077b6 <HAL_ADC_PollForConversion+0x7e>
 80077a6:	f7ff fe01 	bl	80073ac <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d20b      	bcs.n	80077ce <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ba:	f043 0204 	orr.w	r2, r3, #4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e09e      	b.n	800790c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0dd      	beq.n	8007798 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80077dc:	e06c      	b.n	80078b8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80077de:	4b4d      	ldr	r3, [pc, #308]	; (8007914 <HAL_ADC_PollForConversion+0x1dc>)
 80077e0:	681c      	ldr	r4, [r3, #0]
 80077e2:	2002      	movs	r0, #2
 80077e4:	f001 fbac 	bl	8008f40 <HAL_RCCEx_GetPeriphCLKFreq>
 80077e8:	4603      	mov	r3, r0
 80077ea:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6919      	ldr	r1, [r3, #16]
 80077f4:	4b48      	ldr	r3, [pc, #288]	; (8007918 <HAL_ADC_PollForConversion+0x1e0>)
 80077f6:	400b      	ands	r3, r1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d118      	bne.n	800782e <HAL_ADC_PollForConversion+0xf6>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68d9      	ldr	r1, [r3, #12]
 8007802:	4b46      	ldr	r3, [pc, #280]	; (800791c <HAL_ADC_PollForConversion+0x1e4>)
 8007804:	400b      	ands	r3, r1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d111      	bne.n	800782e <HAL_ADC_PollForConversion+0xf6>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6919      	ldr	r1, [r3, #16]
 8007810:	4b43      	ldr	r3, [pc, #268]	; (8007920 <HAL_ADC_PollForConversion+0x1e8>)
 8007812:	400b      	ands	r3, r1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d108      	bne.n	800782a <HAL_ADC_PollForConversion+0xf2>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68d9      	ldr	r1, [r3, #12]
 800781e:	4b41      	ldr	r3, [pc, #260]	; (8007924 <HAL_ADC_PollForConversion+0x1ec>)
 8007820:	400b      	ands	r3, r1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_ADC_PollForConversion+0xf2>
 8007826:	2314      	movs	r3, #20
 8007828:	e020      	b.n	800786c <HAL_ADC_PollForConversion+0x134>
 800782a:	2329      	movs	r3, #41	; 0x29
 800782c:	e01e      	b.n	800786c <HAL_ADC_PollForConversion+0x134>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6919      	ldr	r1, [r3, #16]
 8007834:	4b3a      	ldr	r3, [pc, #232]	; (8007920 <HAL_ADC_PollForConversion+0x1e8>)
 8007836:	400b      	ands	r3, r1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <HAL_ADC_PollForConversion+0x112>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68d9      	ldr	r1, [r3, #12]
 8007842:	4b38      	ldr	r3, [pc, #224]	; (8007924 <HAL_ADC_PollForConversion+0x1ec>)
 8007844:	400b      	ands	r3, r1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <HAL_ADC_PollForConversion+0x12e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6919      	ldr	r1, [r3, #16]
 8007850:	4b35      	ldr	r3, [pc, #212]	; (8007928 <HAL_ADC_PollForConversion+0x1f0>)
 8007852:	400b      	ands	r3, r1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d108      	bne.n	800786a <HAL_ADC_PollForConversion+0x132>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68d9      	ldr	r1, [r3, #12]
 800785e:	4b32      	ldr	r3, [pc, #200]	; (8007928 <HAL_ADC_PollForConversion+0x1f0>)
 8007860:	400b      	ands	r3, r1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_ADC_PollForConversion+0x132>
 8007866:	2354      	movs	r3, #84	; 0x54
 8007868:	e000      	b.n	800786c <HAL_ADC_PollForConversion+0x134>
 800786a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800786c:	fb02 f303 	mul.w	r3, r2, r3
 8007870:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007872:	e01d      	b.n	80078b0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d016      	beq.n	80078aa <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <HAL_ADC_PollForConversion+0x15a>
 8007882:	f7ff fd93 	bl	80073ac <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d20b      	bcs.n	80078aa <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007896:	f043 0204 	orr.w	r2, r3, #4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e030      	b.n	800790c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3301      	adds	r3, #1
 80078ae:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d8dd      	bhi.n	8007874 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f06f 0212 	mvn.w	r2, #18
 80078c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80078d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80078dc:	d115      	bne.n	800790a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d111      	bne.n	800790a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d105      	bne.n	800790a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	f043 0201 	orr.w	r2, r3, #1
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	bd90      	pop	{r4, r7, pc}
 8007914:	20000014 	.word	0x20000014
 8007918:	24924924 	.word	0x24924924
 800791c:	00924924 	.word	0x00924924
 8007920:	12492492 	.word	0x12492492
 8007924:	00492492 	.word	0x00492492
 8007928:	00249249 	.word	0x00249249

0800792c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr

08007944 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_ADC_ConfigChannel+0x20>
 8007960:	2302      	movs	r3, #2
 8007962:	e0dc      	b.n	8007b1e <HAL_ADC_ConfigChannel+0x1da>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b06      	cmp	r3, #6
 8007972:	d81c      	bhi.n	80079ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	3b05      	subs	r3, #5
 8007986:	221f      	movs	r2, #31
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	43db      	mvns	r3, r3
 800798e:	4019      	ands	r1, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	3b05      	subs	r3, #5
 80079a0:	fa00 f203 	lsl.w	r2, r0, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	635a      	str	r2, [r3, #52]	; 0x34
 80079ac:	e03c      	b.n	8007a28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b0c      	cmp	r3, #12
 80079b4:	d81c      	bhi.n	80079f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	3b23      	subs	r3, #35	; 0x23
 80079c8:	221f      	movs	r2, #31
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	43db      	mvns	r3, r3
 80079d0:	4019      	ands	r1, r3
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	3b23      	subs	r3, #35	; 0x23
 80079e2:	fa00 f203 	lsl.w	r2, r0, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30
 80079ee:	e01b      	b.n	8007a28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	3b41      	subs	r3, #65	; 0x41
 8007a02:	221f      	movs	r2, #31
 8007a04:	fa02 f303 	lsl.w	r3, r2, r3
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	4019      	ands	r1, r3
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	3b41      	subs	r3, #65	; 0x41
 8007a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b09      	cmp	r3, #9
 8007a2e:	d91c      	bls.n	8007a6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68d9      	ldr	r1, [r3, #12]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	4413      	add	r3, r2
 8007a40:	3b1e      	subs	r3, #30
 8007a42:	2207      	movs	r2, #7
 8007a44:	fa02 f303 	lsl.w	r3, r2, r3
 8007a48:	43db      	mvns	r3, r3
 8007a4a:	4019      	ands	r1, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	6898      	ldr	r0, [r3, #8]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	4613      	mov	r3, r2
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	3b1e      	subs	r3, #30
 8007a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	60da      	str	r2, [r3, #12]
 8007a68:	e019      	b.n	8007a9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6919      	ldr	r1, [r3, #16]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	4413      	add	r3, r2
 8007a7a:	2207      	movs	r2, #7
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	43db      	mvns	r3, r3
 8007a82:	4019      	ands	r1, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6898      	ldr	r0, [r3, #8]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	4413      	add	r3, r2
 8007a92:	fa00 f203 	lsl.w	r2, r0, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d003      	beq.n	8007aae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007aaa:	2b11      	cmp	r3, #17
 8007aac:	d132      	bne.n	8007b14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1d      	ldr	r2, [pc, #116]	; (8007b28 <HAL_ADC_ConfigChannel+0x1e4>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d125      	bne.n	8007b04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d126      	bne.n	8007b14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007ad4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b10      	cmp	r3, #16
 8007adc:	d11a      	bne.n	8007b14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007ade:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <HAL_ADC_ConfigChannel+0x1e8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a13      	ldr	r2, [pc, #76]	; (8007b30 <HAL_ADC_ConfigChannel+0x1ec>)
 8007ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae8:	0c9a      	lsrs	r2, r3, #18
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007af4:	e002      	b.n	8007afc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f9      	bne.n	8007af6 <HAL_ADC_ConfigChannel+0x1b2>
 8007b02:	e007      	b.n	8007b14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b08:	f043 0220 	orr.w	r2, r3, #32
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr
 8007b28:	40012400 	.word	0x40012400
 8007b2c:	20000014 	.word	0x20000014
 8007b30:	431bde83 	.word	0x431bde83

08007b34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d039      	beq.n	8007bc6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f042 0201 	orr.w	r2, r2, #1
 8007b60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007b62:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <ADC_Enable+0x9c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a1b      	ldr	r2, [pc, #108]	; (8007bd4 <ADC_Enable+0xa0>)
 8007b68:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6c:	0c9b      	lsrs	r3, r3, #18
 8007b6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007b70:	e002      	b.n	8007b78 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1f9      	bne.n	8007b72 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007b7e:	f7ff fc15 	bl	80073ac <HAL_GetTick>
 8007b82:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007b84:	e018      	b.n	8007bb8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007b86:	f7ff fc11 	bl	80073ac <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d911      	bls.n	8007bb8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	f043 0210 	orr.w	r2, r3, #16
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	f043 0201 	orr.w	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e007      	b.n	8007bc8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d1df      	bne.n	8007b86 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20000014 	.word	0x20000014
 8007bd4:	431bde83 	.word	0x431bde83

08007bd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d127      	bne.n	8007c42 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0201 	bic.w	r2, r2, #1
 8007c00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007c02:	f7ff fbd3 	bl	80073ac <HAL_GetTick>
 8007c06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007c08:	e014      	b.n	8007c34 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007c0a:	f7ff fbcf 	bl	80073ac <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d90d      	bls.n	8007c34 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	f043 0210 	orr.w	r2, r3, #16
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	f043 0201 	orr.w	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e007      	b.n	8007c44 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d0e3      	beq.n	8007c0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_ADCEx_Calibration_Start+0x1e>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e086      	b.n	8007d78 <HAL_ADCEx_Calibration_Start+0x12c>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff ffb0 	bl	8007bd8 <ADC_ConversionStop_Disable>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d175      	bne.n	8007d6e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007c8a:	f023 0302 	bic.w	r3, r3, #2
 8007c8e:	f043 0202 	orr.w	r2, r3, #2
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007c96:	4b3a      	ldr	r3, [pc, #232]	; (8007d80 <HAL_ADCEx_Calibration_Start+0x134>)
 8007c98:	681c      	ldr	r4, [r3, #0]
 8007c9a:	2002      	movs	r0, #2
 8007c9c:	f001 f950 	bl	8008f40 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8007ca6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8007ca8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8007caa:	e002      	b.n	8007cb2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f9      	bne.n	8007cac <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff ff3b 	bl	8007b34 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 0208 	orr.w	r2, r2, #8
 8007ccc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007cce:	f7ff fb6d 	bl	80073ac <HAL_GetTick>
 8007cd2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007cd4:	e014      	b.n	8007d00 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007cd6:	f7ff fb69 	bl	80073ac <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b0a      	cmp	r3, #10
 8007ce2:	d90d      	bls.n	8007d00 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	f023 0312 	bic.w	r3, r3, #18
 8007cec:	f043 0210 	orr.w	r2, r3, #16
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e03b      	b.n	8007d78 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 0308 	and.w	r3, r3, #8
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e3      	bne.n	8007cd6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f042 0204 	orr.w	r2, r2, #4
 8007d1c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007d1e:	f7ff fb45 	bl	80073ac <HAL_GetTick>
 8007d22:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007d24:	e014      	b.n	8007d50 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007d26:	f7ff fb41 	bl	80073ac <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b0a      	cmp	r3, #10
 8007d32:	d90d      	bls.n	8007d50 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	f023 0312 	bic.w	r3, r3, #18
 8007d3c:	f043 0210 	orr.w	r2, r3, #16
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e013      	b.n	8007d78 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0304 	and.w	r3, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e3      	bne.n	8007d26 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	f023 0303 	bic.w	r3, r3, #3
 8007d66:	f043 0201 	orr.w	r2, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	371c      	adds	r7, #28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd90      	pop	{r4, r7, pc}
 8007d80:	20000014 	.word	0x20000014

08007d84 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d94:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <NVIC_SetPriorityGrouping+0x44>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007da0:	4013      	ands	r3, r2
 8007da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007db6:	4a04      	ldr	r2, [pc, #16]	; (8007dc8 <NVIC_SetPriorityGrouping+0x44>)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	60d3      	str	r3, [r2, #12]
}
 8007dbc:	bf00      	nop
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	e000ed00 	.word	0xe000ed00

08007dcc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007dd0:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <NVIC_GetPriorityGrouping+0x18>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	0a1b      	lsrs	r3, r3, #8
 8007dd6:	f003 0307 	and.w	r3, r3, #7
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	e000ed00 	.word	0xe000ed00

08007de8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	f003 021f 	and.w	r2, r3, #31
 8007df8:	4906      	ldr	r1, [pc, #24]	; (8007e14 <NVIC_EnableIRQ+0x2c>)
 8007dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dfe:	095b      	lsrs	r3, r3, #5
 8007e00:	2001      	movs	r0, #1
 8007e02:	fa00 f202 	lsl.w	r2, r0, r2
 8007e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr
 8007e14:	e000e100 	.word	0xe000e100

08007e18 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	6039      	str	r1, [r7, #0]
 8007e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8007e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da0b      	bge.n	8007e44 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	490c      	ldr	r1, [pc, #48]	; (8007e64 <NVIC_SetPriority+0x4c>)
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	0112      	lsls	r2, r2, #4
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	440b      	add	r3, r1
 8007e40:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e42:	e009      	b.n	8007e58 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	4907      	ldr	r1, [pc, #28]	; (8007e68 <NVIC_SetPriority+0x50>)
 8007e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4e:	0112      	lsls	r2, r2, #4
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	440b      	add	r3, r1
 8007e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc80      	pop	{r7}
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	e000ed00 	.word	0xe000ed00
 8007e68:	e000e100 	.word	0xe000e100

08007e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b089      	sub	sp, #36	; 0x24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f1c3 0307 	rsb	r3, r3, #7
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	bf28      	it	cs
 8007e8a:	2304      	movcs	r3, #4
 8007e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	3304      	adds	r3, #4
 8007e92:	2b06      	cmp	r3, #6
 8007e94:	d902      	bls.n	8007e9c <NVIC_EncodePriority+0x30>
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	3b03      	subs	r3, #3
 8007e9a:	e000      	b.n	8007e9e <NVIC_EncodePriority+0x32>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	43da      	mvns	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	401a      	ands	r2, r3
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	fa01 f303 	lsl.w	r3, r1, r3
 8007ebe:	43d9      	mvns	r1, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ec4:	4313      	orrs	r3, r2
         );
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3724      	adds	r7, #36	; 0x24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr

08007ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ee0:	d301      	bcc.n	8007ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e00f      	b.n	8007f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ee6:	4a0a      	ldr	r2, [pc, #40]	; (8007f10 <SysTick_Config+0x40>)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007eee:	210f      	movs	r1, #15
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	f7ff ff90 	bl	8007e18 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ef8:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <SysTick_Config+0x40>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <SysTick_Config+0x40>)
 8007f00:	2207      	movs	r2, #7
 8007f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	e000e010 	.word	0xe000e010

08007f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff ff31 	bl	8007d84 <NVIC_SetPriorityGrouping>
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b086      	sub	sp, #24
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	4603      	mov	r3, r0
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	607a      	str	r2, [r7, #4]
 8007f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f3c:	f7ff ff46 	bl	8007dcc <NVIC_GetPriorityGrouping>
 8007f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	6978      	ldr	r0, [r7, #20]
 8007f48:	f7ff ff90 	bl	8007e6c <NVIC_EncodePriority>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f52:	4611      	mov	r1, r2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff ff5f 	bl	8007e18 <NVIC_SetPriority>
}
 8007f5a:	bf00      	nop
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	4603      	mov	r3, r0
 8007f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff ff39 	bl	8007de8 <NVIC_EnableIRQ>
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff ffa2 	bl	8007ed0 <SysTick_Config>
 8007f8c:	4603      	mov	r3, r0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d005      	beq.n	8007fba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
 8007fb8:	e0d6      	b.n	8008168 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 020e 	bic.w	r2, r2, #14
 8007fc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0201 	bic.w	r2, r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	4b64      	ldr	r3, [pc, #400]	; (8008174 <HAL_DMA_Abort_IT+0x1dc>)
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d958      	bls.n	8008098 <HAL_DMA_Abort_IT+0x100>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a63      	ldr	r2, [pc, #396]	; (8008178 <HAL_DMA_Abort_IT+0x1e0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d04f      	beq.n	8008090 <HAL_DMA_Abort_IT+0xf8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a61      	ldr	r2, [pc, #388]	; (800817c <HAL_DMA_Abort_IT+0x1e4>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d048      	beq.n	800808c <HAL_DMA_Abort_IT+0xf4>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a60      	ldr	r2, [pc, #384]	; (8008180 <HAL_DMA_Abort_IT+0x1e8>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d040      	beq.n	8008086 <HAL_DMA_Abort_IT+0xee>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a5e      	ldr	r2, [pc, #376]	; (8008184 <HAL_DMA_Abort_IT+0x1ec>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d038      	beq.n	8008080 <HAL_DMA_Abort_IT+0xe8>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a5d      	ldr	r2, [pc, #372]	; (8008188 <HAL_DMA_Abort_IT+0x1f0>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d030      	beq.n	800807a <HAL_DMA_Abort_IT+0xe2>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a5b      	ldr	r2, [pc, #364]	; (800818c <HAL_DMA_Abort_IT+0x1f4>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d028      	beq.n	8008074 <HAL_DMA_Abort_IT+0xdc>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a53      	ldr	r2, [pc, #332]	; (8008174 <HAL_DMA_Abort_IT+0x1dc>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d020      	beq.n	800806e <HAL_DMA_Abort_IT+0xd6>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a57      	ldr	r2, [pc, #348]	; (8008190 <HAL_DMA_Abort_IT+0x1f8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d019      	beq.n	800806a <HAL_DMA_Abort_IT+0xd2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a56      	ldr	r2, [pc, #344]	; (8008194 <HAL_DMA_Abort_IT+0x1fc>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d012      	beq.n	8008066 <HAL_DMA_Abort_IT+0xce>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a54      	ldr	r2, [pc, #336]	; (8008198 <HAL_DMA_Abort_IT+0x200>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00a      	beq.n	8008060 <HAL_DMA_Abort_IT+0xc8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a53      	ldr	r2, [pc, #332]	; (800819c <HAL_DMA_Abort_IT+0x204>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d102      	bne.n	800805a <HAL_DMA_Abort_IT+0xc2>
 8008054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008058:	e01b      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 800805a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800805e:	e018      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 8008060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008064:	e015      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 8008066:	2310      	movs	r3, #16
 8008068:	e013      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 800806a:	2301      	movs	r3, #1
 800806c:	e011      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 800806e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008072:	e00e      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 8008074:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008078:	e00b      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 800807a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800807e:	e008      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 8008080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008084:	e005      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 8008086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800808a:	e002      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 800808c:	2310      	movs	r3, #16
 800808e:	e000      	b.n	8008092 <HAL_DMA_Abort_IT+0xfa>
 8008090:	2301      	movs	r3, #1
 8008092:	4a43      	ldr	r2, [pc, #268]	; (80081a0 <HAL_DMA_Abort_IT+0x208>)
 8008094:	6053      	str	r3, [r2, #4]
 8008096:	e057      	b.n	8008148 <HAL_DMA_Abort_IT+0x1b0>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a36      	ldr	r2, [pc, #216]	; (8008178 <HAL_DMA_Abort_IT+0x1e0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d04f      	beq.n	8008142 <HAL_DMA_Abort_IT+0x1aa>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a35      	ldr	r2, [pc, #212]	; (800817c <HAL_DMA_Abort_IT+0x1e4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d048      	beq.n	800813e <HAL_DMA_Abort_IT+0x1a6>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a33      	ldr	r2, [pc, #204]	; (8008180 <HAL_DMA_Abort_IT+0x1e8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d040      	beq.n	8008138 <HAL_DMA_Abort_IT+0x1a0>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a32      	ldr	r2, [pc, #200]	; (8008184 <HAL_DMA_Abort_IT+0x1ec>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d038      	beq.n	8008132 <HAL_DMA_Abort_IT+0x19a>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a30      	ldr	r2, [pc, #192]	; (8008188 <HAL_DMA_Abort_IT+0x1f0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d030      	beq.n	800812c <HAL_DMA_Abort_IT+0x194>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a2f      	ldr	r2, [pc, #188]	; (800818c <HAL_DMA_Abort_IT+0x1f4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d028      	beq.n	8008126 <HAL_DMA_Abort_IT+0x18e>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a26      	ldr	r2, [pc, #152]	; (8008174 <HAL_DMA_Abort_IT+0x1dc>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d020      	beq.n	8008120 <HAL_DMA_Abort_IT+0x188>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a2b      	ldr	r2, [pc, #172]	; (8008190 <HAL_DMA_Abort_IT+0x1f8>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d019      	beq.n	800811c <HAL_DMA_Abort_IT+0x184>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a29      	ldr	r2, [pc, #164]	; (8008194 <HAL_DMA_Abort_IT+0x1fc>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d012      	beq.n	8008118 <HAL_DMA_Abort_IT+0x180>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a28      	ldr	r2, [pc, #160]	; (8008198 <HAL_DMA_Abort_IT+0x200>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00a      	beq.n	8008112 <HAL_DMA_Abort_IT+0x17a>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a26      	ldr	r2, [pc, #152]	; (800819c <HAL_DMA_Abort_IT+0x204>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d102      	bne.n	800810c <HAL_DMA_Abort_IT+0x174>
 8008106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800810a:	e01b      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 800810c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008110:	e018      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 8008112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008116:	e015      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 8008118:	2310      	movs	r3, #16
 800811a:	e013      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 800811c:	2301      	movs	r3, #1
 800811e:	e011      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 8008120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008124:	e00e      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 8008126:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800812a:	e00b      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 800812c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008130:	e008      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 8008132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008136:	e005      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 8008138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800813c:	e002      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 800813e:	2310      	movs	r3, #16
 8008140:	e000      	b.n	8008144 <HAL_DMA_Abort_IT+0x1ac>
 8008142:	2301      	movs	r3, #1
 8008144:	4a17      	ldr	r2, [pc, #92]	; (80081a4 <HAL_DMA_Abort_IT+0x20c>)
 8008146:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	4798      	blx	r3
    } 
  }
  return status;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	40020080 	.word	0x40020080
 8008178:	40020008 	.word	0x40020008
 800817c:	4002001c 	.word	0x4002001c
 8008180:	40020030 	.word	0x40020030
 8008184:	40020044 	.word	0x40020044
 8008188:	40020058 	.word	0x40020058
 800818c:	4002006c 	.word	0x4002006c
 8008190:	40020408 	.word	0x40020408
 8008194:	4002041c 	.word	0x4002041c
 8008198:	40020430 	.word	0x40020430
 800819c:	40020444 	.word	0x40020444
 80081a0:	40020400 	.word	0x40020400
 80081a4:	40020000 	.word	0x40020000

080081a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b08b      	sub	sp, #44	; 0x2c
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80081be:	2300      	movs	r3, #0
 80081c0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80081c2:	2300      	movs	r3, #0
 80081c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80081c6:	2300      	movs	r3, #0
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ca:	e179      	b.n	80084c0 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80081cc:	2201      	movs	r2, #1
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	4013      	ands	r3, r2
 80081de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	f040 8168 	bne.w	80084ba <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	4a96      	ldr	r2, [pc, #600]	; (8008448 <HAL_GPIO_Init+0x2a0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d05e      	beq.n	80082b2 <HAL_GPIO_Init+0x10a>
 80081f4:	4a94      	ldr	r2, [pc, #592]	; (8008448 <HAL_GPIO_Init+0x2a0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d875      	bhi.n	80082e6 <HAL_GPIO_Init+0x13e>
 80081fa:	4a94      	ldr	r2, [pc, #592]	; (800844c <HAL_GPIO_Init+0x2a4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d058      	beq.n	80082b2 <HAL_GPIO_Init+0x10a>
 8008200:	4a92      	ldr	r2, [pc, #584]	; (800844c <HAL_GPIO_Init+0x2a4>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d86f      	bhi.n	80082e6 <HAL_GPIO_Init+0x13e>
 8008206:	4a92      	ldr	r2, [pc, #584]	; (8008450 <HAL_GPIO_Init+0x2a8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d052      	beq.n	80082b2 <HAL_GPIO_Init+0x10a>
 800820c:	4a90      	ldr	r2, [pc, #576]	; (8008450 <HAL_GPIO_Init+0x2a8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d869      	bhi.n	80082e6 <HAL_GPIO_Init+0x13e>
 8008212:	4a90      	ldr	r2, [pc, #576]	; (8008454 <HAL_GPIO_Init+0x2ac>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d04c      	beq.n	80082b2 <HAL_GPIO_Init+0x10a>
 8008218:	4a8e      	ldr	r2, [pc, #568]	; (8008454 <HAL_GPIO_Init+0x2ac>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d863      	bhi.n	80082e6 <HAL_GPIO_Init+0x13e>
 800821e:	4a8e      	ldr	r2, [pc, #568]	; (8008458 <HAL_GPIO_Init+0x2b0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d046      	beq.n	80082b2 <HAL_GPIO_Init+0x10a>
 8008224:	4a8c      	ldr	r2, [pc, #560]	; (8008458 <HAL_GPIO_Init+0x2b0>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d85d      	bhi.n	80082e6 <HAL_GPIO_Init+0x13e>
 800822a:	2b12      	cmp	r3, #18
 800822c:	d82a      	bhi.n	8008284 <HAL_GPIO_Init+0xdc>
 800822e:	2b12      	cmp	r3, #18
 8008230:	d859      	bhi.n	80082e6 <HAL_GPIO_Init+0x13e>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <HAL_GPIO_Init+0x90>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	080082b3 	.word	0x080082b3
 800823c:	0800828d 	.word	0x0800828d
 8008240:	0800829f 	.word	0x0800829f
 8008244:	080082e1 	.word	0x080082e1
 8008248:	080082e7 	.word	0x080082e7
 800824c:	080082e7 	.word	0x080082e7
 8008250:	080082e7 	.word	0x080082e7
 8008254:	080082e7 	.word	0x080082e7
 8008258:	080082e7 	.word	0x080082e7
 800825c:	080082e7 	.word	0x080082e7
 8008260:	080082e7 	.word	0x080082e7
 8008264:	080082e7 	.word	0x080082e7
 8008268:	080082e7 	.word	0x080082e7
 800826c:	080082e7 	.word	0x080082e7
 8008270:	080082e7 	.word	0x080082e7
 8008274:	080082e7 	.word	0x080082e7
 8008278:	080082e7 	.word	0x080082e7
 800827c:	08008295 	.word	0x08008295
 8008280:	080082a9 	.word	0x080082a9
 8008284:	4a75      	ldr	r2, [pc, #468]	; (800845c <HAL_GPIO_Init+0x2b4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d013      	beq.n	80082b2 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800828a:	e02c      	b.n	80082e6 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	623b      	str	r3, [r7, #32]
          break;
 8008292:	e029      	b.n	80082e8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	3304      	adds	r3, #4
 800829a:	623b      	str	r3, [r7, #32]
          break;
 800829c:	e024      	b.n	80082e8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	3308      	adds	r3, #8
 80082a4:	623b      	str	r3, [r7, #32]
          break;
 80082a6:	e01f      	b.n	80082e8 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	330c      	adds	r3, #12
 80082ae:	623b      	str	r3, [r7, #32]
          break;
 80082b0:	e01a      	b.n	80082e8 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80082ba:	2304      	movs	r3, #4
 80082bc:	623b      	str	r3, [r7, #32]
          break;
 80082be:	e013      	b.n	80082e8 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d105      	bne.n	80082d4 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80082c8:	2308      	movs	r3, #8
 80082ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	611a      	str	r2, [r3, #16]
          break;
 80082d2:	e009      	b.n	80082e8 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80082d4:	2308      	movs	r3, #8
 80082d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	69fa      	ldr	r2, [r7, #28]
 80082dc:	615a      	str	r2, [r3, #20]
          break;
 80082de:	e003      	b.n	80082e8 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80082e0:	2300      	movs	r3, #0
 80082e2:	623b      	str	r3, [r7, #32]
          break;
 80082e4:	e000      	b.n	80082e8 <HAL_GPIO_Init+0x140>
          break;
 80082e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	2bff      	cmp	r3, #255	; 0xff
 80082ec:	d801      	bhi.n	80082f2 <HAL_GPIO_Init+0x14a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	e001      	b.n	80082f6 <HAL_GPIO_Init+0x14e>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3304      	adds	r3, #4
 80082f6:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2bff      	cmp	r3, #255	; 0xff
 80082fc:	d802      	bhi.n	8008304 <HAL_GPIO_Init+0x15c>
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	e002      	b.n	800830a <HAL_GPIO_Init+0x162>
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	3b08      	subs	r3, #8
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	210f      	movs	r1, #15
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	fa01 f303 	lsl.w	r3, r1, r3
 8008318:	43db      	mvns	r3, r3
 800831a:	401a      	ands	r2, r3
 800831c:	6a39      	ldr	r1, [r7, #32]
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	fa01 f303 	lsl.w	r3, r1, r3
 8008324:	431a      	orrs	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 80c1 	beq.w	80084ba <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008338:	4b49      	ldr	r3, [pc, #292]	; (8008460 <HAL_GPIO_Init+0x2b8>)
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	4a48      	ldr	r2, [pc, #288]	; (8008460 <HAL_GPIO_Init+0x2b8>)
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	6193      	str	r3, [r2, #24]
 8008344:	4b46      	ldr	r3, [pc, #280]	; (8008460 <HAL_GPIO_Init+0x2b8>)
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	60bb      	str	r3, [r7, #8]
 800834e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8008350:	4a44      	ldr	r2, [pc, #272]	; (8008464 <HAL_GPIO_Init+0x2bc>)
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	089b      	lsrs	r3, r3, #2
 8008356:	3302      	adds	r3, #2
 8008358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800835c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	f003 0303 	and.w	r3, r3, #3
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	220f      	movs	r2, #15
 8008368:	fa02 f303 	lsl.w	r3, r2, r3
 800836c:	43db      	mvns	r3, r3
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4013      	ands	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a3c      	ldr	r2, [pc, #240]	; (8008468 <HAL_GPIO_Init+0x2c0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d01f      	beq.n	80083bc <HAL_GPIO_Init+0x214>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a3b      	ldr	r2, [pc, #236]	; (800846c <HAL_GPIO_Init+0x2c4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d019      	beq.n	80083b8 <HAL_GPIO_Init+0x210>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a3a      	ldr	r2, [pc, #232]	; (8008470 <HAL_GPIO_Init+0x2c8>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d013      	beq.n	80083b4 <HAL_GPIO_Init+0x20c>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a39      	ldr	r2, [pc, #228]	; (8008474 <HAL_GPIO_Init+0x2cc>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d00d      	beq.n	80083b0 <HAL_GPIO_Init+0x208>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a38      	ldr	r2, [pc, #224]	; (8008478 <HAL_GPIO_Init+0x2d0>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d007      	beq.n	80083ac <HAL_GPIO_Init+0x204>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a37      	ldr	r2, [pc, #220]	; (800847c <HAL_GPIO_Init+0x2d4>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d101      	bne.n	80083a8 <HAL_GPIO_Init+0x200>
 80083a4:	2305      	movs	r3, #5
 80083a6:	e00a      	b.n	80083be <HAL_GPIO_Init+0x216>
 80083a8:	2306      	movs	r3, #6
 80083aa:	e008      	b.n	80083be <HAL_GPIO_Init+0x216>
 80083ac:	2304      	movs	r3, #4
 80083ae:	e006      	b.n	80083be <HAL_GPIO_Init+0x216>
 80083b0:	2303      	movs	r3, #3
 80083b2:	e004      	b.n	80083be <HAL_GPIO_Init+0x216>
 80083b4:	2302      	movs	r3, #2
 80083b6:	e002      	b.n	80083be <HAL_GPIO_Init+0x216>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e000      	b.n	80083be <HAL_GPIO_Init+0x216>
 80083bc:	2300      	movs	r3, #0
 80083be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c0:	f002 0203 	and.w	r2, r2, #3
 80083c4:	0092      	lsls	r2, r2, #2
 80083c6:	4093      	lsls	r3, r2
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80083ce:	4925      	ldr	r1, [pc, #148]	; (8008464 <HAL_GPIO_Init+0x2bc>)
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	089b      	lsrs	r3, r3, #2
 80083d4:	3302      	adds	r3, #2
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80083e8:	4b25      	ldr	r3, [pc, #148]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	4924      	ldr	r1, [pc, #144]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	600b      	str	r3, [r1, #0]
 80083f4:	e006      	b.n	8008404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80083f6:	4b22      	ldr	r3, [pc, #136]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	43db      	mvns	r3, r3
 80083fe:	4920      	ldr	r1, [pc, #128]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 8008400:	4013      	ands	r3, r2
 8008402:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d006      	beq.n	800841e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008410:	4b1b      	ldr	r3, [pc, #108]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	491a      	ldr	r1, [pc, #104]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	4313      	orrs	r3, r2
 800841a:	604b      	str	r3, [r1, #4]
 800841c:	e006      	b.n	800842c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800841e:	4b18      	ldr	r3, [pc, #96]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	43db      	mvns	r3, r3
 8008426:	4916      	ldr	r1, [pc, #88]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 8008428:	4013      	ands	r3, r2
 800842a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d025      	beq.n	8008484 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008438:	4b11      	ldr	r3, [pc, #68]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	4910      	ldr	r1, [pc, #64]	; (8008480 <HAL_GPIO_Init+0x2d8>)
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	4313      	orrs	r3, r2
 8008442:	608b      	str	r3, [r1, #8]
 8008444:	e025      	b.n	8008492 <HAL_GPIO_Init+0x2ea>
 8008446:	bf00      	nop
 8008448:	10320000 	.word	0x10320000
 800844c:	10310000 	.word	0x10310000
 8008450:	10220000 	.word	0x10220000
 8008454:	10210000 	.word	0x10210000
 8008458:	10120000 	.word	0x10120000
 800845c:	10110000 	.word	0x10110000
 8008460:	40021000 	.word	0x40021000
 8008464:	40010000 	.word	0x40010000
 8008468:	40010800 	.word	0x40010800
 800846c:	40010c00 	.word	0x40010c00
 8008470:	40011000 	.word	0x40011000
 8008474:	40011400 	.word	0x40011400
 8008478:	40011800 	.word	0x40011800
 800847c:	40011c00 	.word	0x40011c00
 8008480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008484:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <HAL_GPIO_Init+0x32c>)
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	43db      	mvns	r3, r3
 800848c:	4911      	ldr	r1, [pc, #68]	; (80084d4 <HAL_GPIO_Init+0x32c>)
 800848e:	4013      	ands	r3, r2
 8008490:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d006      	beq.n	80084ac <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800849e:	4b0d      	ldr	r3, [pc, #52]	; (80084d4 <HAL_GPIO_Init+0x32c>)
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	490c      	ldr	r1, [pc, #48]	; (80084d4 <HAL_GPIO_Init+0x32c>)
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60cb      	str	r3, [r1, #12]
 80084aa:	e006      	b.n	80084ba <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <HAL_GPIO_Init+0x32c>)
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	43db      	mvns	r3, r3
 80084b4:	4907      	ldr	r1, [pc, #28]	; (80084d4 <HAL_GPIO_Init+0x32c>)
 80084b6:	4013      	ands	r3, r2
 80084b8:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	3301      	adds	r3, #1
 80084be:	627b      	str	r3, [r7, #36]	; 0x24
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	2b0f      	cmp	r3, #15
 80084c4:	f67f ae82 	bls.w	80081cc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	372c      	adds	r7, #44	; 0x2c
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr
 80084d4:	40010400 	.word	0x40010400

080084d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	887b      	ldrh	r3, [r7, #2]
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
 80084f4:	e001      	b.n	80084fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	bc80      	pop	{r7}
 8008504:	4770      	bx	lr

08008506 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	460b      	mov	r3, r1
 8008510:	807b      	strh	r3, [r7, #2]
 8008512:	4613      	mov	r3, r2
 8008514:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008516:	787b      	ldrb	r3, [r7, #1]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800851c:	887a      	ldrh	r2, [r7, #2]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008522:	e003      	b.n	800852c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008524:	887b      	ldrh	r3, [r7, #2]
 8008526:	041a      	lsls	r2, r3, #16
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	611a      	str	r2, [r3, #16]
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr
	...

08008538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008542:	4b08      	ldr	r3, [pc, #32]	; (8008564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008544:	695a      	ldr	r2, [r3, #20]
 8008546:	88fb      	ldrh	r3, [r7, #6]
 8008548:	4013      	ands	r3, r2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d006      	beq.n	800855c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800854e:	4a05      	ldr	r2, [pc, #20]	; (8008564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008550:	88fb      	ldrh	r3, [r7, #6]
 8008552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f806 	bl	8008568 <HAL_GPIO_EXTI_Callback>
  }
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	40010400 	.word	0x40010400

08008568 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr

0800857c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008580:	4b03      	ldr	r3, [pc, #12]	; (8008590 <HAL_PWR_EnableBkUpAccess+0x14>)
 8008582:	2201      	movs	r2, #1
 8008584:	601a      	str	r2, [r3, #0]
}
 8008586:	bf00      	nop
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	420e0020 	.word	0x420e0020

08008594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8087 	beq.w	80086bc <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80085ae:	4b92      	ldr	r3, [pc, #584]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f003 030c 	and.w	r3, r3, #12
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d00c      	beq.n	80085d4 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80085ba:	4b8f      	ldr	r3, [pc, #572]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f003 030c 	and.w	r3, r3, #12
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	d112      	bne.n	80085ec <HAL_RCC_OscConfig+0x58>
 80085c6:	4b8c      	ldr	r3, [pc, #560]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d2:	d10b      	bne.n	80085ec <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085d4:	4b88      	ldr	r3, [pc, #544]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d06c      	beq.n	80086ba <HAL_RCC_OscConfig+0x126>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d168      	bne.n	80086ba <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e22d      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f4:	d106      	bne.n	8008604 <HAL_RCC_OscConfig+0x70>
 80085f6:	4b80      	ldr	r3, [pc, #512]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a7f      	ldr	r2, [pc, #508]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80085fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	e02e      	b.n	8008662 <HAL_RCC_OscConfig+0xce>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10c      	bne.n	8008626 <HAL_RCC_OscConfig+0x92>
 800860c:	4b7a      	ldr	r3, [pc, #488]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a79      	ldr	r2, [pc, #484]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	4b77      	ldr	r3, [pc, #476]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a76      	ldr	r2, [pc, #472]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 800861e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	e01d      	b.n	8008662 <HAL_RCC_OscConfig+0xce>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800862e:	d10c      	bne.n	800864a <HAL_RCC_OscConfig+0xb6>
 8008630:	4b71      	ldr	r3, [pc, #452]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a70      	ldr	r2, [pc, #448]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800863a:	6013      	str	r3, [r2, #0]
 800863c:	4b6e      	ldr	r3, [pc, #440]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a6d      	ldr	r2, [pc, #436]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	e00b      	b.n	8008662 <HAL_RCC_OscConfig+0xce>
 800864a:	4b6b      	ldr	r3, [pc, #428]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a6a      	ldr	r2, [pc, #424]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	4b68      	ldr	r3, [pc, #416]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a67      	ldr	r2, [pc, #412]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 800865c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008660:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d013      	beq.n	8008692 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800866a:	f7fe fe9f 	bl	80073ac <HAL_GetTick>
 800866e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008670:	e008      	b.n	8008684 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008672:	f7fe fe9b 	bl	80073ac <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b64      	cmp	r3, #100	; 0x64
 800867e:	d901      	bls.n	8008684 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e1e1      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008684:	4b5c      	ldr	r3, [pc, #368]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0f0      	beq.n	8008672 <HAL_RCC_OscConfig+0xde>
 8008690:	e014      	b.n	80086bc <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008692:	f7fe fe8b 	bl	80073ac <HAL_GetTick>
 8008696:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008698:	e008      	b.n	80086ac <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800869a:	f7fe fe87 	bl	80073ac <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b64      	cmp	r3, #100	; 0x64
 80086a6:	d901      	bls.n	80086ac <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e1cd      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ac:	4b52      	ldr	r3, [pc, #328]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1f0      	bne.n	800869a <HAL_RCC_OscConfig+0x106>
 80086b8:	e000      	b.n	80086bc <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d063      	beq.n	8008790 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80086c8:	4b4b      	ldr	r3, [pc, #300]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f003 030c 	and.w	r3, r3, #12
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80086d4:	4b48      	ldr	r3, [pc, #288]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f003 030c 	and.w	r3, r3, #12
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d11c      	bne.n	800871a <HAL_RCC_OscConfig+0x186>
 80086e0:	4b45      	ldr	r3, [pc, #276]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d116      	bne.n	800871a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ec:	4b42      	ldr	r3, [pc, #264]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <HAL_RCC_OscConfig+0x170>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d001      	beq.n	8008704 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e1a1      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008704:	4b3c      	ldr	r3, [pc, #240]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	4939      	ldr	r1, [pc, #228]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008714:	4313      	orrs	r3, r2
 8008716:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008718:	e03a      	b.n	8008790 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d020      	beq.n	8008764 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008722:	4b36      	ldr	r3, [pc, #216]	; (80087fc <HAL_RCC_OscConfig+0x268>)
 8008724:	2201      	movs	r2, #1
 8008726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008728:	f7fe fe40 	bl	80073ac <HAL_GetTick>
 800872c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800872e:	e008      	b.n	8008742 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008730:	f7fe fe3c 	bl	80073ac <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d901      	bls.n	8008742 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e182      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008742:	4b2d      	ldr	r3, [pc, #180]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0f0      	beq.n	8008730 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800874e:	4b2a      	ldr	r3, [pc, #168]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	4926      	ldr	r1, [pc, #152]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 800875e:	4313      	orrs	r3, r2
 8008760:	600b      	str	r3, [r1, #0]
 8008762:	e015      	b.n	8008790 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008764:	4b25      	ldr	r3, [pc, #148]	; (80087fc <HAL_RCC_OscConfig+0x268>)
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800876a:	f7fe fe1f 	bl	80073ac <HAL_GetTick>
 800876e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008770:	e008      	b.n	8008784 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008772:	f7fe fe1b 	bl	80073ac <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d901      	bls.n	8008784 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e161      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008784:	4b1c      	ldr	r3, [pc, #112]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f0      	bne.n	8008772 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d039      	beq.n	8008810 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d019      	beq.n	80087d8 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087a4:	4b16      	ldr	r3, [pc, #88]	; (8008800 <HAL_RCC_OscConfig+0x26c>)
 80087a6:	2201      	movs	r2, #1
 80087a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087aa:	f7fe fdff 	bl	80073ac <HAL_GetTick>
 80087ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087b0:	e008      	b.n	80087c4 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087b2:	f7fe fdfb 	bl	80073ac <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d901      	bls.n	80087c4 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e141      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <HAL_RCC_OscConfig+0x264>)
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	f003 0302 	and.w	r3, r3, #2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0f0      	beq.n	80087b2 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80087d0:	2001      	movs	r0, #1
 80087d2:	f000 fadf 	bl	8008d94 <RCC_Delay>
 80087d6:	e01b      	b.n	8008810 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087d8:	4b09      	ldr	r3, [pc, #36]	; (8008800 <HAL_RCC_OscConfig+0x26c>)
 80087da:	2200      	movs	r2, #0
 80087dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087de:	f7fe fde5 	bl	80073ac <HAL_GetTick>
 80087e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087e4:	e00e      	b.n	8008804 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087e6:	f7fe fde1 	bl	80073ac <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d907      	bls.n	8008804 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e127      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
 80087f8:	40021000 	.word	0x40021000
 80087fc:	42420000 	.word	0x42420000
 8008800:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008804:	4b92      	ldr	r3, [pc, #584]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	f003 0302 	and.w	r3, r3, #2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1ea      	bne.n	80087e6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0304 	and.w	r3, r3, #4
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80a6 	beq.w	800896a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800881e:	2300      	movs	r3, #0
 8008820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008822:	4b8b      	ldr	r3, [pc, #556]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10d      	bne.n	800884a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800882e:	4b88      	ldr	r3, [pc, #544]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	4a87      	ldr	r2, [pc, #540]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008838:	61d3      	str	r3, [r2, #28]
 800883a:	4b85      	ldr	r3, [pc, #532]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008846:	2301      	movs	r3, #1
 8008848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800884a:	4b82      	ldr	r3, [pc, #520]	; (8008a54 <HAL_RCC_OscConfig+0x4c0>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008852:	2b00      	cmp	r3, #0
 8008854:	d118      	bne.n	8008888 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008856:	4b7f      	ldr	r3, [pc, #508]	; (8008a54 <HAL_RCC_OscConfig+0x4c0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a7e      	ldr	r2, [pc, #504]	; (8008a54 <HAL_RCC_OscConfig+0x4c0>)
 800885c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008862:	f7fe fda3 	bl	80073ac <HAL_GetTick>
 8008866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800886a:	f7fe fd9f 	bl	80073ac <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b64      	cmp	r3, #100	; 0x64
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e0e5      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800887c:	4b75      	ldr	r3, [pc, #468]	; (8008a54 <HAL_RCC_OscConfig+0x4c0>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0f0      	beq.n	800886a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d106      	bne.n	800889e <HAL_RCC_OscConfig+0x30a>
 8008890:	4b6f      	ldr	r3, [pc, #444]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	4a6e      	ldr	r2, [pc, #440]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	6213      	str	r3, [r2, #32]
 800889c:	e02d      	b.n	80088fa <HAL_RCC_OscConfig+0x366>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10c      	bne.n	80088c0 <HAL_RCC_OscConfig+0x32c>
 80088a6:	4b6a      	ldr	r3, [pc, #424]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	4a69      	ldr	r2, [pc, #420]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088ac:	f023 0301 	bic.w	r3, r3, #1
 80088b0:	6213      	str	r3, [r2, #32]
 80088b2:	4b67      	ldr	r3, [pc, #412]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	4a66      	ldr	r2, [pc, #408]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088b8:	f023 0304 	bic.w	r3, r3, #4
 80088bc:	6213      	str	r3, [r2, #32]
 80088be:	e01c      	b.n	80088fa <HAL_RCC_OscConfig+0x366>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	2b05      	cmp	r3, #5
 80088c6:	d10c      	bne.n	80088e2 <HAL_RCC_OscConfig+0x34e>
 80088c8:	4b61      	ldr	r3, [pc, #388]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	4a60      	ldr	r2, [pc, #384]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088ce:	f043 0304 	orr.w	r3, r3, #4
 80088d2:	6213      	str	r3, [r2, #32]
 80088d4:	4b5e      	ldr	r3, [pc, #376]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	4a5d      	ldr	r2, [pc, #372]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088da:	f043 0301 	orr.w	r3, r3, #1
 80088de:	6213      	str	r3, [r2, #32]
 80088e0:	e00b      	b.n	80088fa <HAL_RCC_OscConfig+0x366>
 80088e2:	4b5b      	ldr	r3, [pc, #364]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	4a5a      	ldr	r2, [pc, #360]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088e8:	f023 0301 	bic.w	r3, r3, #1
 80088ec:	6213      	str	r3, [r2, #32]
 80088ee:	4b58      	ldr	r3, [pc, #352]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	4a57      	ldr	r2, [pc, #348]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80088f4:	f023 0304 	bic.w	r3, r3, #4
 80088f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d015      	beq.n	800892e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008902:	f7fe fd53 	bl	80073ac <HAL_GetTick>
 8008906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008908:	e00a      	b.n	8008920 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800890a:	f7fe fd4f 	bl	80073ac <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	f241 3288 	movw	r2, #5000	; 0x1388
 8008918:	4293      	cmp	r3, r2
 800891a:	d901      	bls.n	8008920 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e093      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008920:	4b4b      	ldr	r3, [pc, #300]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0ee      	beq.n	800890a <HAL_RCC_OscConfig+0x376>
 800892c:	e014      	b.n	8008958 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800892e:	f7fe fd3d 	bl	80073ac <HAL_GetTick>
 8008932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008934:	e00a      	b.n	800894c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008936:	f7fe fd39 	bl	80073ac <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	f241 3288 	movw	r2, #5000	; 0x1388
 8008944:	4293      	cmp	r3, r2
 8008946:	d901      	bls.n	800894c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e07d      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800894c:	4b40      	ldr	r3, [pc, #256]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1ee      	bne.n	8008936 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d105      	bne.n	800896a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800895e:	4b3c      	ldr	r3, [pc, #240]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	4a3b      	ldr	r2, [pc, #236]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008968:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d069      	beq.n	8008a46 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008972:	4b37      	ldr	r3, [pc, #220]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f003 030c 	and.w	r3, r3, #12
 800897a:	2b08      	cmp	r3, #8
 800897c:	d061      	beq.n	8008a42 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d146      	bne.n	8008a14 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008986:	4b34      	ldr	r3, [pc, #208]	; (8008a58 <HAL_RCC_OscConfig+0x4c4>)
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800898c:	f7fe fd0e 	bl	80073ac <HAL_GetTick>
 8008990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008994:	f7fe fd0a 	bl	80073ac <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e050      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089a6:	4b2a      	ldr	r3, [pc, #168]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f0      	bne.n	8008994 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ba:	d108      	bne.n	80089ce <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80089bc:	4b24      	ldr	r3, [pc, #144]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	4921      	ldr	r1, [pc, #132]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089ce:	4b20      	ldr	r3, [pc, #128]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a19      	ldr	r1, [r3, #32]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	430b      	orrs	r3, r1
 80089e0:	491b      	ldr	r1, [pc, #108]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089e6:	4b1c      	ldr	r3, [pc, #112]	; (8008a58 <HAL_RCC_OscConfig+0x4c4>)
 80089e8:	2201      	movs	r2, #1
 80089ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ec:	f7fe fcde 	bl	80073ac <HAL_GetTick>
 80089f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80089f2:	e008      	b.n	8008a06 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089f4:	f7fe fcda 	bl	80073ac <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d901      	bls.n	8008a06 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e020      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008a06:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0f0      	beq.n	80089f4 <HAL_RCC_OscConfig+0x460>
 8008a12:	e018      	b.n	8008a46 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a14:	4b10      	ldr	r3, [pc, #64]	; (8008a58 <HAL_RCC_OscConfig+0x4c4>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a1a:	f7fe fcc7 	bl	80073ac <HAL_GetTick>
 8008a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a22:	f7fe fcc3 	bl	80073ac <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e009      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a34:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <HAL_RCC_OscConfig+0x4bc>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f0      	bne.n	8008a22 <HAL_RCC_OscConfig+0x48e>
 8008a40:	e001      	b.n	8008a46 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e000      	b.n	8008a48 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	40021000 	.word	0x40021000
 8008a54:	40007000 	.word	0x40007000
 8008a58:	42420060 	.word	0x42420060

08008a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008a6a:	4b7e      	ldr	r3, [pc, #504]	; (8008c64 <HAL_RCC_ClockConfig+0x208>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d910      	bls.n	8008a9a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a78:	4b7a      	ldr	r3, [pc, #488]	; (8008c64 <HAL_RCC_ClockConfig+0x208>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f023 0207 	bic.w	r2, r3, #7
 8008a80:	4978      	ldr	r1, [pc, #480]	; (8008c64 <HAL_RCC_ClockConfig+0x208>)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a88:	4b76      	ldr	r3, [pc, #472]	; (8008c64 <HAL_RCC_ClockConfig+0x208>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d001      	beq.n	8008a9a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e0e0      	b.n	8008c5c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0302 	and.w	r3, r3, #2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d020      	beq.n	8008ae8 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ab2:	4b6d      	ldr	r3, [pc, #436]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	4a6c      	ldr	r2, [pc, #432]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008ab8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008abc:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0308 	and.w	r3, r3, #8
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008aca:	4b67      	ldr	r3, [pc, #412]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	4a66      	ldr	r2, [pc, #408]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008ad0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008ad4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ad6:	4b64      	ldr	r3, [pc, #400]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	4961      	ldr	r1, [pc, #388]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d06a      	beq.n	8008bca <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d107      	bne.n	8008b0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008afc:	4b5a      	ldr	r3, [pc, #360]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d115      	bne.n	8008b34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e0a7      	b.n	8008c5c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d107      	bne.n	8008b24 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b14:	4b54      	ldr	r3, [pc, #336]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d109      	bne.n	8008b34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e09b      	b.n	8008c5c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b24:	4b50      	ldr	r3, [pc, #320]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e093      	b.n	8008c5c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b34:	4b4c      	ldr	r3, [pc, #304]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f023 0203 	bic.w	r2, r3, #3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4949      	ldr	r1, [pc, #292]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b46:	f7fe fc31 	bl	80073ac <HAL_GetTick>
 8008b4a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d112      	bne.n	8008b7a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b54:	e00a      	b.n	8008b6c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b56:	f7fe fc29 	bl	80073ac <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d901      	bls.n	8008b6c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e077      	b.n	8008c5c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b6c:	4b3e      	ldr	r3, [pc, #248]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 030c 	and.w	r3, r3, #12
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d1ee      	bne.n	8008b56 <HAL_RCC_ClockConfig+0xfa>
 8008b78:	e027      	b.n	8008bca <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d11d      	bne.n	8008bbe <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b82:	e00a      	b.n	8008b9a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b84:	f7fe fc12 	bl	80073ac <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e060      	b.n	8008c5c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b9a:	4b33      	ldr	r3, [pc, #204]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f003 030c 	and.w	r3, r3, #12
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d1ee      	bne.n	8008b84 <HAL_RCC_ClockConfig+0x128>
 8008ba6:	e010      	b.n	8008bca <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ba8:	f7fe fc00 	bl	80073ac <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e04e      	b.n	8008c5c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bbe:	4b2a      	ldr	r3, [pc, #168]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f003 030c 	and.w	r3, r3, #12
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1ee      	bne.n	8008ba8 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008bca:	4b26      	ldr	r3, [pc, #152]	; (8008c64 <HAL_RCC_ClockConfig+0x208>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d210      	bcs.n	8008bfa <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bd8:	4b22      	ldr	r3, [pc, #136]	; (8008c64 <HAL_RCC_ClockConfig+0x208>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f023 0207 	bic.w	r2, r3, #7
 8008be0:	4920      	ldr	r1, [pc, #128]	; (8008c64 <HAL_RCC_ClockConfig+0x208>)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008be8:	4b1e      	ldr	r3, [pc, #120]	; (8008c64 <HAL_RCC_ClockConfig+0x208>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d001      	beq.n	8008bfa <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e030      	b.n	8008c5c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0304 	and.w	r3, r3, #4
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d008      	beq.n	8008c18 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	4915      	ldr	r1, [pc, #84]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d009      	beq.n	8008c38 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c24:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	490d      	ldr	r1, [pc, #52]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c38:	f000 f81c 	bl	8008c74 <HAL_RCC_GetSysClockFreq>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <HAL_RCC_ClockConfig+0x20c>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	091b      	lsrs	r3, r3, #4
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	4908      	ldr	r1, [pc, #32]	; (8008c6c <HAL_RCC_ClockConfig+0x210>)
 8008c4a:	5ccb      	ldrb	r3, [r1, r3]
 8008c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c50:	4a07      	ldr	r2, [pc, #28]	; (8008c70 <HAL_RCC_ClockConfig+0x214>)
 8008c52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008c54:	2000      	movs	r0, #0
 8008c56:	f7fe fb67 	bl	8007328 <HAL_InitTick>
  
  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	40022000 	.word	0x40022000
 8008c68:	40021000 	.word	0x40021000
 8008c6c:	0800d788 	.word	0x0800d788
 8008c70:	20000014 	.word	0x20000014

08008c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c74:	b490      	push	{r4, r7}
 8008c76:	b08a      	sub	sp, #40	; 0x28
 8008c78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008c7a:	4b29      	ldr	r3, [pc, #164]	; (8008d20 <HAL_RCC_GetSysClockFreq+0xac>)
 8008c7c:	1d3c      	adds	r4, r7, #4
 8008c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008c84:	f240 2301 	movw	r3, #513	; 0x201
 8008c88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61fb      	str	r3, [r7, #28]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	61bb      	str	r3, [r7, #24]
 8008c92:	2300      	movs	r3, #0
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008c9e:	4b21      	ldr	r3, [pc, #132]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	f003 030c 	and.w	r3, r3, #12
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d002      	beq.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d003      	beq.n	8008cba <HAL_RCC_GetSysClockFreq+0x46>
 8008cb2:	e02b      	b.n	8008d0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008cb4:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008cb6:	623b      	str	r3, [r7, #32]
      break;
 8008cb8:	e02b      	b.n	8008d12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	0c9b      	lsrs	r3, r3, #18
 8008cbe:	f003 030f 	and.w	r3, r3, #15
 8008cc2:	3328      	adds	r3, #40	; 0x28
 8008cc4:	443b      	add	r3, r7
 8008cc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008cca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d012      	beq.n	8008cfc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008cd6:	4b13      	ldr	r3, [pc, #76]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	0c5b      	lsrs	r3, r3, #17
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	3328      	adds	r3, #40	; 0x28
 8008ce2:	443b      	add	r3, r7
 8008ce4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008ce8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	4a0e      	ldr	r2, [pc, #56]	; (8008d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008cee:	fb03 f202 	mul.w	r2, r3, r2
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfa:	e004      	b.n	8008d06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	4a0b      	ldr	r2, [pc, #44]	; (8008d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d00:	fb02 f303 	mul.w	r3, r2, r3
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	623b      	str	r3, [r7, #32]
      break;
 8008d0a:	e002      	b.n	8008d12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008d0e:	623b      	str	r3, [r7, #32]
      break;
 8008d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d12:	6a3b      	ldr	r3, [r7, #32]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3728      	adds	r7, #40	; 0x28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bc90      	pop	{r4, r7}
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	0800d010 	.word	0x0800d010
 8008d24:	40021000 	.word	0x40021000
 8008d28:	007a1200 	.word	0x007a1200
 8008d2c:	003d0900 	.word	0x003d0900

08008d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d34:	4b02      	ldr	r3, [pc, #8]	; (8008d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8008d36:	681b      	ldr	r3, [r3, #0]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bc80      	pop	{r7}
 8008d3e:	4770      	bx	lr
 8008d40:	20000014 	.word	0x20000014

08008d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d48:	f7ff fff2 	bl	8008d30 <HAL_RCC_GetHCLKFreq>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	0a1b      	lsrs	r3, r3, #8
 8008d54:	f003 0307 	and.w	r3, r3, #7
 8008d58:	4903      	ldr	r1, [pc, #12]	; (8008d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d5a:	5ccb      	ldrb	r3, [r1, r3]
 8008d5c:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8008d60:	4618      	mov	r0, r3
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	40021000 	.word	0x40021000
 8008d68:	0800d798 	.word	0x0800d798

08008d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d70:	f7ff ffde 	bl	8008d30 <HAL_RCC_GetHCLKFreq>
 8008d74:	4602      	mov	r2, r0
 8008d76:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	0adb      	lsrs	r3, r3, #11
 8008d7c:	f003 0307 	and.w	r3, r3, #7
 8008d80:	4903      	ldr	r1, [pc, #12]	; (8008d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d82:	5ccb      	ldrb	r3, [r1, r3]
 8008d84:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8008d88:	4618      	mov	r0, r3
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	40021000 	.word	0x40021000
 8008d90:	0800d798 	.word	0x0800d798

08008d94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <RCC_Delay+0x38>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a0b      	ldr	r2, [pc, #44]	; (8008dd0 <RCC_Delay+0x3c>)
 8008da2:	fba2 2303 	umull	r2, r3, r2, r3
 8008da6:	0a5b      	lsrs	r3, r3, #9
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	fb02 f303 	mul.w	r3, r2, r3
 8008dae:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8008db0:	bf00      	nop
}
 8008db2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	1e5a      	subs	r2, r3, #1
 8008db8:	60fa      	str	r2, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f8      	bne.n	8008db0 <RCC_Delay+0x1c>
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20000014 	.word	0x20000014
 8008dd0:	10624dd3 	.word	0x10624dd3

08008dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d07d      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8008df0:	2300      	movs	r3, #0
 8008df2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008df4:	4b4f      	ldr	r3, [pc, #316]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10d      	bne.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e00:	4b4c      	ldr	r3, [pc, #304]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	4a4b      	ldr	r2, [pc, #300]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e0a:	61d3      	str	r3, [r2, #28]
 8008e0c:	4b49      	ldr	r3, [pc, #292]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e14:	60bb      	str	r3, [r7, #8]
 8008e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e1c:	4b46      	ldr	r3, [pc, #280]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d118      	bne.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e28:	4b43      	ldr	r3, [pc, #268]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a42      	ldr	r2, [pc, #264]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e34:	f7fe faba 	bl	80073ac <HAL_GetTick>
 8008e38:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e3a:	e008      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e3c:	f7fe fab6 	bl	80073ac <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b64      	cmp	r3, #100	; 0x64
 8008e48:	d901      	bls.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e06d      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e4e:	4b3a      	ldr	r3, [pc, #232]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0f0      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e5a:	4b36      	ldr	r3, [pc, #216]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e62:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d02e      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d027      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e78:	4b2e      	ldr	r3, [pc, #184]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e82:	4b2e      	ldr	r3, [pc, #184]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e84:	2201      	movs	r2, #1
 8008e86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e88:	4b2c      	ldr	r3, [pc, #176]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008e8e:	4a29      	ldr	r2, [pc, #164]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d014      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e9e:	f7fe fa85 	bl	80073ac <HAL_GetTick>
 8008ea2:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ea4:	e00a      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ea6:	f7fe fa81 	bl	80073ac <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e036      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ebc:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	f003 0302 	and.w	r3, r3, #2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0ee      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	4917      	ldr	r1, [pc, #92]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d105      	bne.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ee0:	4b14      	ldr	r3, [pc, #80]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	4a13      	ldr	r2, [pc, #76]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d008      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ef8:	4b0e      	ldr	r3, [pc, #56]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	490b      	ldr	r1, [pc, #44]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0310 	and.w	r3, r3, #16
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d008      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f16:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	4904      	ldr	r1, [pc, #16]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	40021000 	.word	0x40021000
 8008f38:	40007000 	.word	0x40007000
 8008f3c:	42420440 	.word	0x42420440

08008f40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008f40:	b590      	push	{r4, r7, lr}
 8008f42:	b08d      	sub	sp, #52	; 0x34
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008f48:	4b6b      	ldr	r3, [pc, #428]	; (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8008f4a:	f107 040c 	add.w	r4, r7, #12
 8008f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008f54:	f240 2301 	movw	r3, #513	; 0x201
 8008f58:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f5e:	2300      	movs	r3, #0
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f62:	2300      	movs	r3, #0
 8008f64:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	61fb      	str	r3, [r7, #28]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	2b0f      	cmp	r3, #15
 8008f74:	f200 80b7 	bhi.w	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8008f78:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8008f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7e:	bf00      	nop
 8008f80:	0800905f 	.word	0x0800905f
 8008f84:	080090cb 	.word	0x080090cb
 8008f88:	080090e7 	.word	0x080090e7
 8008f8c:	0800904f 	.word	0x0800904f
 8008f90:	080090e7 	.word	0x080090e7
 8008f94:	080090e7 	.word	0x080090e7
 8008f98:	080090e7 	.word	0x080090e7
 8008f9c:	08009057 	.word	0x08009057
 8008fa0:	080090e7 	.word	0x080090e7
 8008fa4:	080090e7 	.word	0x080090e7
 8008fa8:	080090e7 	.word	0x080090e7
 8008fac:	080090e7 	.word	0x080090e7
 8008fb0:	080090e7 	.word	0x080090e7
 8008fb4:	080090e7 	.word	0x080090e7
 8008fb8:	080090e7 	.word	0x080090e7
 8008fbc:	08008fc1 	.word	0x08008fc1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008fc0:	4b4e      	ldr	r3, [pc, #312]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8008fc6:	4b4d      	ldr	r3, [pc, #308]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 808b 	beq.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	0c9b      	lsrs	r3, r3, #18
 8008fd8:	f003 030f 	and.w	r3, r3, #15
 8008fdc:	3330      	adds	r3, #48	; 0x30
 8008fde:	443b      	add	r3, r7
 8008fe0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008fe4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d017      	beq.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ff0:	4b42      	ldr	r3, [pc, #264]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	0c5b      	lsrs	r3, r3, #17
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	3330      	adds	r3, #48	; 0x30
 8008ffc:	443b      	add	r3, r7
 8008ffe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00d      	beq.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800900e:	4a3c      	ldr	r2, [pc, #240]	; (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	fbb2 f2f3 	udiv	r2, r2, r3
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	fb02 f303 	mul.w	r3, r2, r3
 800901c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800901e:	e004      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	4a38      	ldr	r2, [pc, #224]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8009024:	fb02 f303 	mul.w	r3, r2, r3
 8009028:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800902a:	4b34      	ldr	r3, [pc, #208]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009036:	d102      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800903c:	e055      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          frequency = (pllclk * 2) / 3;
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	005b      	lsls	r3, r3, #1
 8009042:	4a31      	ldr	r2, [pc, #196]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8009044:	fba2 2303 	umull	r2, r3, r2, r3
 8009048:	085b      	lsrs	r3, r3, #1
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800904c:	e04d      	b.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800904e:	f7ff fe11 	bl	8008c74 <HAL_RCC_GetSysClockFreq>
 8009052:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009054:	e04a      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8009056:	f7ff fe0d 	bl	8008c74 <HAL_RCC_GetSysClockFreq>
 800905a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800905c:	e046      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800905e:	4b27      	ldr	r3, [pc, #156]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800906a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800906e:	d108      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d003      	beq.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 800907a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800907e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009080:	e022      	b.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800908c:	d109      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800908e:	4b1b      	ldr	r3, [pc, #108]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	f003 0302 	and.w	r3, r3, #2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 800909a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28
 80090a0:	e012      	b.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090ac:	d109      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80090ae:	4b13      	ldr	r3, [pc, #76]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = HSE_VALUE / 128U;
 80090ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80090be:	62bb      	str	r3, [r7, #40]	; 0x28
 80090c0:	e002      	b.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80090c6:	e011      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80090c8:	e010      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80090ca:	f7ff fe4f 	bl	8008d6c <HAL_RCC_GetPCLK2Freq>
 80090ce:	4602      	mov	r2, r0
 80090d0:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	0b9b      	lsrs	r3, r3, #14
 80090d6:	f003 0303 	and.w	r3, r3, #3
 80090da:	3301      	adds	r3, #1
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80090e4:	e002      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  default: 
    {
      break;
 80090e6:	bf00      	nop
 80090e8:	e000      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 80090ea:	bf00      	nop
    }
  }
  return(frequency);
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3734      	adds	r7, #52	; 0x34
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd90      	pop	{r4, r7, pc}
 80090f6:	bf00      	nop
 80090f8:	0800d020 	.word	0x0800d020
 80090fc:	40021000 	.word	0x40021000
 8009100:	007a1200 	.word	0x007a1200
 8009104:	003d0900 	.word	0x003d0900
 8009108:	aaaaaaab 	.word	0xaaaaaaab

0800910c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e084      	b.n	800922c <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	7c5b      	ldrb	r3, [r3, #17]
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	d105      	bne.n	8009138 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fc ff5e 	bl	8005ff4 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f87a 	bl	8009238 <HAL_RTC_WaitForSynchro>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d004      	beq.n	8009154 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2204      	movs	r2, #4
 800914e:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e06b      	b.n	800922c <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f89c 	bl	8009292 <RTC_EnterInitMode>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d004      	beq.n	800916a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2204      	movs	r2, #4
 8009164:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e060      	b.n	800922c <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 0207 	bic.w	r2, r2, #7
 8009178:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009182:	4b2c      	ldr	r3, [pc, #176]	; (8009234 <HAL_RTC_Init+0x128>)
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009186:	4a2b      	ldr	r2, [pc, #172]	; (8009234 <HAL_RTC_Init+0x128>)
 8009188:	f023 0301 	bic.w	r3, r3, #1
 800918c:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800918e:	4b29      	ldr	r3, [pc, #164]	; (8009234 <HAL_RTC_Init+0x128>)
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	4926      	ldr	r1, [pc, #152]	; (8009234 <HAL_RTC_Init+0x128>)
 800919c:	4313      	orrs	r3, r2
 800919e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d003      	beq.n	80091b2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	e00e      	b.n	80091d0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80091b2:	2001      	movs	r0, #1
 80091b4:	f7ff fec4 	bl	8008f40 <HAL_RCCEx_GetPeriphCLKFreq>
 80091b8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d104      	bne.n	80091ca <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2204      	movs	r2, #4
 80091c4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e030      	b.n	800922c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f023 010f 	bic.w	r1, r3, #15
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	0c1a      	lsrs	r2, r3, #16
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	0c1b      	lsrs	r3, r3, #16
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	b291      	uxth	r1, r2
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	430b      	orrs	r3, r1
 80091fa:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f870 	bl	80092e2 <RTC_ExitInitMode>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2204      	movs	r2, #4
 800920c:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e00c      	b.n	800922c <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 800922a:	2300      	movs	r3, #0
  }
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	40006c00 	.word	0x40006c00

08009238 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e01d      	b.n	800928a <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0208 	bic.w	r2, r2, #8
 800925c:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800925e:	f7fe f8a5 	bl	80073ac <HAL_GetTick>
 8009262:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009264:	e009      	b.n	800927a <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8009266:	f7fe f8a1 	bl	80073ac <HAL_GetTick>
 800926a:	4602      	mov	r2, r0
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009274:	d901      	bls.n	800927a <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e007      	b.n	800928a <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f003 0308 	and.w	r3, r3, #8
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0ee      	beq.n	8009266 <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 800929e:	f7fe f885 	bl	80073ac <HAL_GetTick>
 80092a2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80092a4:	e009      	b.n	80092ba <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80092a6:	f7fe f881 	bl	80073ac <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092b4:	d901      	bls.n	80092ba <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e00f      	b.n	80092da <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0ee      	beq.n	80092a6 <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0210 	orr.w	r2, r2, #16
 80092d6:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0210 	bic.w	r2, r2, #16
 80092fc:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 80092fe:	f7fe f855 	bl	80073ac <HAL_GetTick>
 8009302:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009304:	e009      	b.n	800931a <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009306:	f7fe f851 	bl	80073ac <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009314:	d901      	bls.n	800931a <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e007      	b.n	800932a <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0ee      	beq.n	8009306 <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 8009344:	4b07      	ldr	r3, [pc, #28]	; (8009364 <HAL_RTCEx_BKUPWrite+0x30>)
 8009346:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4413      	add	r3, r2
 8009350:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	b292      	uxth	r2, r2
 8009358:	601a      	str	r2, [r3, #0]
}
 800935a:	bf00      	nop
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	bc80      	pop	{r7}
 8009362:	4770      	bx	lr
 8009364:	40006c00 	.word	0x40006c00

08009368 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 800937a:	4b08      	ldr	r3, [pc, #32]	; (800939c <HAL_RTCEx_BKUPRead+0x34>)
 800937c:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	4413      	add	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	b29b      	uxth	r3, r3
 800938e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8009390:	68bb      	ldr	r3, [r7, #8]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	bc80      	pop	{r7}
 800939a:	4770      	bx	lr
 800939c:	40006c00 	.word	0x40006c00

080093a0 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e034      	b.n	8009420 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7fc ffae 	bl	800632c <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3308      	adds	r3, #8
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f001 fcb2 	bl	800ad44 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	461a      	mov	r2, r3
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	f001 fd2a 	bl	800ae44 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6858      	ldr	r0, [r3, #4]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	689a      	ldr	r2, [r3, #8]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	f001 fd55 	bl	800aeac <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	6892      	ldr	r2, [r2, #8]
 800940a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	6892      	ldr	r2, [r2, #8]
 8009416:	f041 0101 	orr.w	r1, r1, #1
 800941a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e01d      	b.n	8009476 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fc fdf4 	bl	800603c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3304      	adds	r3, #4
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f000 fc38 	bl	8009cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2202      	movs	r2, #2
 800948a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f042 0201 	orr.w	r2, r2, #1
 800949c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bc80      	pop	{r7}
 80094b0:	4770      	bx	lr

080094b2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2202      	movs	r2, #2
 80094be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6a1a      	ldr	r2, [r3, #32]
 80094c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80094cc:	4013      	ands	r3, r2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10f      	bne.n	80094f2 <HAL_TIM_Base_Stop+0x40>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6a1a      	ldr	r2, [r3, #32]
 80094d8:	f240 4344 	movw	r3, #1092	; 0x444
 80094dc:	4013      	ands	r3, r2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d107      	bne.n	80094f2 <HAL_TIM_Base_Stop+0x40>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f022 0201 	bic.w	r2, r2, #1
 80094f0:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	bc80      	pop	{r7}
 8009504:	4770      	bx	lr

08009506 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f042 0201 	orr.w	r2, r2, #1
 800951c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f042 0201 	orr.w	r2, r2, #1
 800952c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr

0800953a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68da      	ldr	r2, [r3, #12]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0201 	bic.w	r2, r2, #1
 8009550:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6a1a      	ldr	r2, [r3, #32]
 8009558:	f241 1311 	movw	r3, #4369	; 0x1111
 800955c:	4013      	ands	r3, r2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10f      	bne.n	8009582 <HAL_TIM_Base_Stop_IT+0x48>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6a1a      	ldr	r2, [r3, #32]
 8009568:	f240 4344 	movw	r3, #1092	; 0x444
 800956c:	4013      	ands	r3, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d107      	bne.n	8009582 <HAL_TIM_Base_Stop_IT+0x48>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0201 	bic.w	r2, r2, #1
 8009580:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr

0800958e <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e01d      	b.n	80095dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f815 	bl	80095e4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2202      	movs	r2, #2
 80095be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3304      	adds	r3, #4
 80095ca:	4619      	mov	r1, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	f000 fb85 	bl	8009cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bc80      	pop	{r7}
 80095f4:	4770      	bx	lr
	...

080095f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2201      	movs	r2, #1
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fe4d 	bl	800a2aa <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a10      	ldr	r2, [pc, #64]	; (8009658 <HAL_TIM_PWM_Start+0x60>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d004      	beq.n	8009624 <HAL_TIM_PWM_Start+0x2c>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a0f      	ldr	r2, [pc, #60]	; (800965c <HAL_TIM_PWM_Start+0x64>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d101      	bne.n	8009628 <HAL_TIM_PWM_Start+0x30>
 8009624:	2301      	movs	r3, #1
 8009626:	e000      	b.n	800962a <HAL_TIM_PWM_Start+0x32>
 8009628:	2300      	movs	r3, #0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d007      	beq.n	800963e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800963c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f042 0201 	orr.w	r2, r2, #1
 800964c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	40012c00 	.word	0x40012c00
 800965c:	40013400 	.word	0x40013400

08009660 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2200      	movs	r2, #0
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 fe19 	bl	800a2aa <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a22      	ldr	r2, [pc, #136]	; (8009708 <HAL_TIM_PWM_Stop+0xa8>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <HAL_TIM_PWM_Stop+0x2c>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a21      	ldr	r2, [pc, #132]	; (800970c <HAL_TIM_PWM_Stop+0xac>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d101      	bne.n	8009690 <HAL_TIM_PWM_Stop+0x30>
 800968c:	2301      	movs	r3, #1
 800968e:	e000      	b.n	8009692 <HAL_TIM_PWM_Stop+0x32>
 8009690:	2300      	movs	r3, #0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d017      	beq.n	80096c6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6a1a      	ldr	r2, [r3, #32]
 800969c:	f241 1311 	movw	r3, #4369	; 0x1111
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10f      	bne.n	80096c6 <HAL_TIM_PWM_Stop+0x66>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6a1a      	ldr	r2, [r3, #32]
 80096ac:	f240 4344 	movw	r3, #1092	; 0x444
 80096b0:	4013      	ands	r3, r2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d107      	bne.n	80096c6 <HAL_TIM_PWM_Stop+0x66>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6a1a      	ldr	r2, [r3, #32]
 80096cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80096d0:	4013      	ands	r3, r2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10f      	bne.n	80096f6 <HAL_TIM_PWM_Stop+0x96>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6a1a      	ldr	r2, [r3, #32]
 80096dc:	f240 4344 	movw	r3, #1092	; 0x444
 80096e0:	4013      	ands	r3, r2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d107      	bne.n	80096f6 <HAL_TIM_PWM_Stop+0x96>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0201 	bic.w	r2, r2, #1
 80096f4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	40012c00 	.word	0x40012c00
 800970c:	40013400 	.word	0x40013400

08009710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	f003 0302 	and.w	r3, r3, #2
 8009722:	2b02      	cmp	r3, #2
 8009724:	d122      	bne.n	800976c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f003 0302 	and.w	r3, r3, #2
 8009730:	2b02      	cmp	r3, #2
 8009732:	d11b      	bne.n	800976c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f06f 0202 	mvn.w	r2, #2
 800973c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	f003 0303 	and.w	r3, r3, #3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 faa7 	bl	8009ca6 <HAL_TIM_IC_CaptureCallback>
 8009758:	e005      	b.n	8009766 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fa9a 	bl	8009c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 faa9 	bl	8009cb8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	f003 0304 	and.w	r3, r3, #4
 8009776:	2b04      	cmp	r3, #4
 8009778:	d122      	bne.n	80097c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	2b04      	cmp	r3, #4
 8009786:	d11b      	bne.n	80097c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f06f 0204 	mvn.w	r2, #4
 8009790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2202      	movs	r2, #2
 8009796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa7d 	bl	8009ca6 <HAL_TIM_IC_CaptureCallback>
 80097ac:	e005      	b.n	80097ba <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fa70 	bl	8009c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fa7f 	bl	8009cb8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	2b08      	cmp	r3, #8
 80097cc:	d122      	bne.n	8009814 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f003 0308 	and.w	r3, r3, #8
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d11b      	bne.n	8009814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f06f 0208 	mvn.w	r2, #8
 80097e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2204      	movs	r2, #4
 80097ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	f003 0303 	and.w	r3, r3, #3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa53 	bl	8009ca6 <HAL_TIM_IC_CaptureCallback>
 8009800:	e005      	b.n	800980e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa46 	bl	8009c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fa55 	bl	8009cb8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	f003 0310 	and.w	r3, r3, #16
 800981e:	2b10      	cmp	r3, #16
 8009820:	d122      	bne.n	8009868 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f003 0310 	and.w	r3, r3, #16
 800982c:	2b10      	cmp	r3, #16
 800982e:	d11b      	bne.n	8009868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f06f 0210 	mvn.w	r2, #16
 8009838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2208      	movs	r2, #8
 800983e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fa29 	bl	8009ca6 <HAL_TIM_IC_CaptureCallback>
 8009854:	e005      	b.n	8009862 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa1c 	bl	8009c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fa2b 	bl	8009cb8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	2b01      	cmp	r3, #1
 8009874:	d10e      	bne.n	8009894 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b01      	cmp	r3, #1
 8009882:	d107      	bne.n	8009894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f06f 0201 	mvn.w	r2, #1
 800988c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f9f7 	bl	8009c82 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989e:	2b80      	cmp	r3, #128	; 0x80
 80098a0:	d10e      	bne.n	80098c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ac:	2b80      	cmp	r3, #128	; 0x80
 80098ae:	d107      	bne.n	80098c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fdbc 	bl	800a438 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ca:	2b40      	cmp	r3, #64	; 0x40
 80098cc:	d10e      	bne.n	80098ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	d107      	bne.n	80098ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f9ef 	bl	8009cca <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b20      	cmp	r3, #32
 80098f8:	d10e      	bne.n	8009918 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b20      	cmp	r3, #32
 8009906:	d107      	bne.n	8009918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f06f 0220 	mvn.w	r2, #32
 8009910:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fd87 	bl	800a426 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009936:	2302      	movs	r3, #2
 8009938:	e0b4      	b.n	8009aa4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2202      	movs	r2, #2
 8009946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b0c      	cmp	r3, #12
 800994e:	f200 809f 	bhi.w	8009a90 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009952:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	0800998d 	.word	0x0800998d
 800995c:	08009a91 	.word	0x08009a91
 8009960:	08009a91 	.word	0x08009a91
 8009964:	08009a91 	.word	0x08009a91
 8009968:	080099cd 	.word	0x080099cd
 800996c:	08009a91 	.word	0x08009a91
 8009970:	08009a91 	.word	0x08009a91
 8009974:	08009a91 	.word	0x08009a91
 8009978:	08009a0f 	.word	0x08009a0f
 800997c:	08009a91 	.word	0x08009a91
 8009980:	08009a91 	.word	0x08009a91
 8009984:	08009a91 	.word	0x08009a91
 8009988:	08009a4f 	.word	0x08009a4f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fa20 	bl	8009dd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f042 0208 	orr.w	r2, r2, #8
 80099a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699a      	ldr	r2, [r3, #24]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 0204 	bic.w	r2, r2, #4
 80099b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6999      	ldr	r1, [r3, #24]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	691a      	ldr	r2, [r3, #16]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	619a      	str	r2, [r3, #24]
    }
    break;
 80099ca:	e062      	b.n	8009a92 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68b9      	ldr	r1, [r7, #8]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 fa76 	bl	8009ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6999      	ldr	r1, [r3, #24]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	021a      	lsls	r2, r3, #8
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	619a      	str	r2, [r3, #24]
    }
    break;
 8009a0c:	e041      	b.n	8009a92 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 facf 	bl	8009fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69da      	ldr	r2, [r3, #28]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0208 	orr.w	r2, r2, #8
 8009a28:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	69da      	ldr	r2, [r3, #28]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 0204 	bic.w	r2, r2, #4
 8009a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69d9      	ldr	r1, [r3, #28]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	691a      	ldr	r2, [r3, #16]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	61da      	str	r2, [r3, #28]
    }
    break;
 8009a4c:	e021      	b.n	8009a92 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68b9      	ldr	r1, [r7, #8]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 fb29 	bl	800a0ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69da      	ldr	r2, [r3, #28]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a68:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69da      	ldr	r2, [r3, #28]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69d9      	ldr	r1, [r3, #28]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	021a      	lsls	r2, r3, #8
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	61da      	str	r2, [r3, #28]
    }
    break;
 8009a8e:	e000      	b.n	8009a92 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8009a90:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <HAL_TIM_ConfigClockSource+0x1c>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e0d8      	b.n	8009c7a <HAL_TIM_ConfigClockSource+0x1ce>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009aee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b00:	d052      	beq.n	8009ba8 <HAL_TIM_ConfigClockSource+0xfc>
 8009b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b06:	f200 80ae 	bhi.w	8009c66 <HAL_TIM_ConfigClockSource+0x1ba>
 8009b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b0e:	d027      	beq.n	8009b60 <HAL_TIM_ConfigClockSource+0xb4>
 8009b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b14:	f200 80a7 	bhi.w	8009c66 <HAL_TIM_ConfigClockSource+0x1ba>
 8009b18:	2b70      	cmp	r3, #112	; 0x70
 8009b1a:	d02a      	beq.n	8009b72 <HAL_TIM_ConfigClockSource+0xc6>
 8009b1c:	2b70      	cmp	r3, #112	; 0x70
 8009b1e:	f200 80a2 	bhi.w	8009c66 <HAL_TIM_ConfigClockSource+0x1ba>
 8009b22:	2b60      	cmp	r3, #96	; 0x60
 8009b24:	d063      	beq.n	8009bee <HAL_TIM_ConfigClockSource+0x142>
 8009b26:	2b60      	cmp	r3, #96	; 0x60
 8009b28:	f200 809d 	bhi.w	8009c66 <HAL_TIM_ConfigClockSource+0x1ba>
 8009b2c:	2b50      	cmp	r3, #80	; 0x50
 8009b2e:	d04e      	beq.n	8009bce <HAL_TIM_ConfigClockSource+0x122>
 8009b30:	2b50      	cmp	r3, #80	; 0x50
 8009b32:	f200 8098 	bhi.w	8009c66 <HAL_TIM_ConfigClockSource+0x1ba>
 8009b36:	2b40      	cmp	r3, #64	; 0x40
 8009b38:	d069      	beq.n	8009c0e <HAL_TIM_ConfigClockSource+0x162>
 8009b3a:	2b40      	cmp	r3, #64	; 0x40
 8009b3c:	f200 8093 	bhi.w	8009c66 <HAL_TIM_ConfigClockSource+0x1ba>
 8009b40:	2b30      	cmp	r3, #48	; 0x30
 8009b42:	f000 8089 	beq.w	8009c58 <HAL_TIM_ConfigClockSource+0x1ac>
 8009b46:	2b30      	cmp	r3, #48	; 0x30
 8009b48:	f200 808d 	bhi.w	8009c66 <HAL_TIM_ConfigClockSource+0x1ba>
 8009b4c:	2b20      	cmp	r3, #32
 8009b4e:	d07c      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0x19e>
 8009b50:	2b20      	cmp	r3, #32
 8009b52:	f200 8088 	bhi.w	8009c66 <HAL_TIM_ConfigClockSource+0x1ba>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d069      	beq.n	8009c2e <HAL_TIM_ConfigClockSource+0x182>
 8009b5a:	2b10      	cmp	r3, #16
 8009b5c:	d06e      	beq.n	8009c3c <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8009b5e:	e082      	b.n	8009c66 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f022 0207 	bic.w	r2, r2, #7
 8009b6e:	609a      	str	r2, [r3, #8]
    break;
 8009b70:	e07a      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6899      	ldr	r1, [r3, #8]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f000 fb71 	bl	800a268 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	609a      	str	r2, [r3, #8]
    break;
 8009ba6:	e05f      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	6899      	ldr	r1, [r3, #8]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f000 fb56 	bl	800a268 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bca:	609a      	str	r2, [r3, #8]
    break;
 8009bcc:	e04c      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	6859      	ldr	r1, [r3, #4]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f000 fac0 	bl	800a160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2150      	movs	r1, #80	; 0x50
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fb1f 	bl	800a22a <TIM_ITRx_SetConfig>
    break;
 8009bec:	e03c      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	6859      	ldr	r1, [r3, #4]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f000 fae2 	bl	800a1c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2160      	movs	r1, #96	; 0x60
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fb0f 	bl	800a22a <TIM_ITRx_SetConfig>
    break;
 8009c0c:	e02c      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6859      	ldr	r1, [r3, #4]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f000 faa0 	bl	800a160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2140      	movs	r1, #64	; 0x40
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 faff 	bl	800a22a <TIM_ITRx_SetConfig>
    break;
 8009c2c:	e01c      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 faf8 	bl	800a22a <TIM_ITRx_SetConfig>
    break;
 8009c3a:	e015      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2110      	movs	r1, #16
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 faf1 	bl	800a22a <TIM_ITRx_SetConfig>
    break;
 8009c48:	e00e      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2120      	movs	r1, #32
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 faea 	bl	800a22a <TIM_ITRx_SetConfig>
    break;
 8009c56:	e007      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2130      	movs	r1, #48	; 0x30
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 fae3 	bl	800a22a <TIM_ITRx_SetConfig>
    break;
 8009c64:	e000      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8009c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bc80      	pop	{r7}
 8009c92:	4770      	bx	lr

08009c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bc80      	pop	{r7}
 8009ca4:	4770      	bx	lr

08009ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b083      	sub	sp, #12
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cae:	bf00      	nop
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bc80      	pop	{r7}
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bc80      	pop	{r7}
 8009cc8:	4770      	bx	lr

08009cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc80      	pop	{r7}
 8009cda:	4770      	bx	lr

08009cdc <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a34      	ldr	r2, [pc, #208]	; (8009dc4 <TIM_Base_SetConfig+0xe8>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d013      	beq.n	8009d20 <TIM_Base_SetConfig+0x44>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a33      	ldr	r2, [pc, #204]	; (8009dc8 <TIM_Base_SetConfig+0xec>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d00f      	beq.n	8009d20 <TIM_Base_SetConfig+0x44>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d06:	d00b      	beq.n	8009d20 <TIM_Base_SetConfig+0x44>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a30      	ldr	r2, [pc, #192]	; (8009dcc <TIM_Base_SetConfig+0xf0>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d007      	beq.n	8009d20 <TIM_Base_SetConfig+0x44>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a2f      	ldr	r2, [pc, #188]	; (8009dd0 <TIM_Base_SetConfig+0xf4>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d003      	beq.n	8009d20 <TIM_Base_SetConfig+0x44>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a2e      	ldr	r2, [pc, #184]	; (8009dd4 <TIM_Base_SetConfig+0xf8>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d108      	bne.n	8009d32 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a23      	ldr	r2, [pc, #140]	; (8009dc4 <TIM_Base_SetConfig+0xe8>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d013      	beq.n	8009d62 <TIM_Base_SetConfig+0x86>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a22      	ldr	r2, [pc, #136]	; (8009dc8 <TIM_Base_SetConfig+0xec>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d00f      	beq.n	8009d62 <TIM_Base_SetConfig+0x86>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d48:	d00b      	beq.n	8009d62 <TIM_Base_SetConfig+0x86>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a1f      	ldr	r2, [pc, #124]	; (8009dcc <TIM_Base_SetConfig+0xf0>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d007      	beq.n	8009d62 <TIM_Base_SetConfig+0x86>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a1e      	ldr	r2, [pc, #120]	; (8009dd0 <TIM_Base_SetConfig+0xf4>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d003      	beq.n	8009d62 <TIM_Base_SetConfig+0x86>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a1d      	ldr	r2, [pc, #116]	; (8009dd4 <TIM_Base_SetConfig+0xf8>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d108      	bne.n	8009d74 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d7a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	695b      	ldr	r3, [r3, #20]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a09      	ldr	r2, [pc, #36]	; (8009dc4 <TIM_Base_SetConfig+0xe8>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d003      	beq.n	8009dac <TIM_Base_SetConfig+0xd0>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a08      	ldr	r2, [pc, #32]	; (8009dc8 <TIM_Base_SetConfig+0xec>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d103      	bne.n	8009db4 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	691a      	ldr	r2, [r3, #16]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	615a      	str	r2, [r3, #20]
}
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bc80      	pop	{r7}
 8009dc2:	4770      	bx	lr
 8009dc4:	40012c00 	.word	0x40012c00
 8009dc8:	40013400 	.word	0x40013400
 8009dcc:	40000400 	.word	0x40000400
 8009dd0:	40000800 	.word	0x40000800
 8009dd4:	40000c00 	.word	0x40000c00

08009dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	f023 0201 	bic.w	r2, r3, #1
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0303 	bic.w	r3, r3, #3
 8009e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f023 0302 	bic.w	r3, r3, #2
 8009e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a20      	ldr	r2, [pc, #128]	; (8009ebc <TIM_OC1_SetConfig+0xe4>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d003      	beq.n	8009e48 <TIM_OC1_SetConfig+0x70>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a1f      	ldr	r2, [pc, #124]	; (8009ec0 <TIM_OC1_SetConfig+0xe8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d10c      	bne.n	8009e62 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f023 0308 	bic.w	r3, r3, #8
 8009e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f023 0304 	bic.w	r3, r3, #4
 8009e60:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a15      	ldr	r2, [pc, #84]	; (8009ebc <TIM_OC1_SetConfig+0xe4>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d003      	beq.n	8009e72 <TIM_OC1_SetConfig+0x9a>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a14      	ldr	r2, [pc, #80]	; (8009ec0 <TIM_OC1_SetConfig+0xe8>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d111      	bne.n	8009e96 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	621a      	str	r2, [r3, #32]
}
 8009eb0:	bf00      	nop
 8009eb2:	371c      	adds	r7, #28
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bc80      	pop	{r7}
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	40012c00 	.word	0x40012c00
 8009ec0:	40013400 	.word	0x40013400

08009ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	f023 0210 	bic.w	r2, r3, #16
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f023 0320 	bic.w	r3, r3, #32
 8009f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a21      	ldr	r2, [pc, #132]	; (8009fb0 <TIM_OC2_SetConfig+0xec>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d003      	beq.n	8009f38 <TIM_OC2_SetConfig+0x74>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a20      	ldr	r2, [pc, #128]	; (8009fb4 <TIM_OC2_SetConfig+0xf0>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d10d      	bne.n	8009f54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f52:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a16      	ldr	r2, [pc, #88]	; (8009fb0 <TIM_OC2_SetConfig+0xec>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d003      	beq.n	8009f64 <TIM_OC2_SetConfig+0xa0>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a15      	ldr	r2, [pc, #84]	; (8009fb4 <TIM_OC2_SetConfig+0xf0>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d113      	bne.n	8009f8c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	621a      	str	r2, [r3, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bc80      	pop	{r7}
 8009fae:	4770      	bx	lr
 8009fb0:	40012c00 	.word	0x40012c00
 8009fb4:	40013400 	.word	0x40013400

08009fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 0303 	bic.w	r3, r3, #3
 8009ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	4313      	orrs	r3, r2
 800a004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a00c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	021b      	lsls	r3, r3, #8
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	4313      	orrs	r3, r2
 800a018:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a21      	ldr	r2, [pc, #132]	; (800a0a4 <TIM_OC3_SetConfig+0xec>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d003      	beq.n	800a02a <TIM_OC3_SetConfig+0x72>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a20      	ldr	r2, [pc, #128]	; (800a0a8 <TIM_OC3_SetConfig+0xf0>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d10d      	bne.n	800a046 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	021b      	lsls	r3, r3, #8
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a044:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a16      	ldr	r2, [pc, #88]	; (800a0a4 <TIM_OC3_SetConfig+0xec>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d003      	beq.n	800a056 <TIM_OC3_SetConfig+0x9e>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a15      	ldr	r2, [pc, #84]	; (800a0a8 <TIM_OC3_SetConfig+0xf0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d113      	bne.n	800a07e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a05c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	4313      	orrs	r3, r2
 800a070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	011b      	lsls	r3, r3, #4
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	621a      	str	r2, [r3, #32]
}
 800a098:	bf00      	nop
 800a09a:	371c      	adds	r7, #28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bc80      	pop	{r7}
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	40012c00 	.word	0x40012c00
 800a0a8:	40013400 	.word	0x40013400

0800a0ac <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ee:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	021b      	lsls	r3, r3, #8
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a102:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	031b      	lsls	r3, r3, #12
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a11      	ldr	r2, [pc, #68]	; (800a158 <TIM_OC4_SetConfig+0xac>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <TIM_OC4_SetConfig+0x74>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a10      	ldr	r2, [pc, #64]	; (800a15c <TIM_OC4_SetConfig+0xb0>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d109      	bne.n	800a134 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a126:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	019b      	lsls	r3, r3, #6
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	4313      	orrs	r3, r2
 800a132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	621a      	str	r2, [r3, #32]
}
 800a14e:	bf00      	nop
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	bc80      	pop	{r7}
 800a156:	4770      	bx	lr
 800a158:	40012c00 	.word	0x40012c00
 800a15c:	40013400 	.word	0x40013400

0800a160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a160:	b480      	push	{r7}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	f023 0201 	bic.w	r2, r3, #1
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a192:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	011b      	lsls	r3, r3, #4
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f023 030a 	bic.w	r3, r3, #10
 800a1a4:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	621a      	str	r2, [r3, #32]
}
 800a1ba:	bf00      	nop
 800a1bc:	371c      	adds	r7, #28
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc80      	pop	{r7}
 800a1c2:	4770      	bx	lr

0800a1c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6a1b      	ldr	r3, [r3, #32]
 800a1dc:	f023 0210 	bic.w	r2, r3, #16
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	031b      	lsls	r3, r3, #12
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a208:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	4313      	orrs	r3, r2
 800a212:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	621a      	str	r2, [r3, #32]
}
 800a220:	bf00      	nop
 800a222:	371c      	adds	r7, #28
 800a224:	46bd      	mov	sp, r7
 800a226:	bc80      	pop	{r7}
 800a228:	4770      	bx	lr

0800a22a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b085      	sub	sp, #20
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a246:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a248:	887b      	ldrh	r3, [r7, #2]
 800a24a:	f043 0307 	orr.w	r3, r3, #7
 800a24e:	b29b      	uxth	r3, r3
 800a250:	461a      	mov	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	609a      	str	r2, [r3, #8]
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr

0800a268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	021a      	lsls	r2, r3, #8
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	431a      	orrs	r2, r3
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	4313      	orrs	r3, r2
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	4313      	orrs	r3, r2
 800a298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	609a      	str	r2, [r3, #8]
}
 800a2a0:	bf00      	nop
 800a2a2:	371c      	adds	r7, #28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bc80      	pop	{r7}
 800a2a8:	4770      	bx	lr

0800a2aa <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b087      	sub	sp, #28
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6a1a      	ldr	r2, [r3, #32]
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	43db      	mvns	r3, r3
 800a2cc:	401a      	ands	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a1a      	ldr	r2, [r3, #32]
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	fa01 f303 	lsl.w	r3, r1, r3
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	621a      	str	r2, [r3, #32]
}
 800a2e4:	bf00      	nop
 800a2e6:	371c      	adds	r7, #28
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bc80      	pop	{r7}
 800a2ec:	4770      	bx	lr

0800a2ee <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b085      	sub	sp, #20
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a302:	2b01      	cmp	r3, #1
 800a304:	d101      	bne.n	800a30a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a306:	2302      	movs	r3, #2
 800a308:	e044      	b.n	800a394 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	4313      	orrs	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	4313      	orrs	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	bc80      	pop	{r7}
 800a39c:	4770      	bx	lr

0800a39e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b083      	sub	sp, #12
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d101      	bne.n	800a3b6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	e032      	b.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a3d4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6859      	ldr	r1, [r3, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689a      	ldr	r2, [r3, #8]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3f6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6899      	ldr	r1, [r3, #8]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	bc80      	pop	{r7}
 800a424:	4770      	bx	lr

0800a426 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800a42e:	bf00      	nop
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	bc80      	pop	{r7}
 800a436:	4770      	bx	lr

0800a438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	bc80      	pop	{r7}
 800a448:	4770      	bx	lr

0800a44a <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e03f      	b.n	800a4dc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7fb fe7f 	bl	8006174 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2224      	movs	r2, #36	; 0x24
 800a47a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68da      	ldr	r2, [r3, #12]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a48c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fb40 	bl	800ab14 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691a      	ldr	r2, [r3, #16]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	695a      	ldr	r2, [r3, #20]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4b2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68da      	ldr	r2, [r3, #12]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4c2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af02      	add	r7, sp, #8
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b20      	cmp	r3, #32
 800a502:	f040 8083 	bne.w	800a60c <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <HAL_UART_Transmit+0x2e>
 800a50c:	88fb      	ldrh	r3, [r7, #6]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e07b      	b.n	800a60e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d101      	bne.n	800a524 <HAL_UART_Transmit+0x40>
 800a520:	2302      	movs	r3, #2
 800a522:	e074      	b.n	800a60e <HAL_UART_Transmit+0x12a>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2221      	movs	r2, #33	; 0x21
 800a536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a53a:	f7fc ff37 	bl	80073ac <HAL_GetTick>
 800a53e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	88fa      	ldrh	r2, [r7, #6]
 800a544:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	88fa      	ldrh	r2, [r7, #6]
 800a54a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800a54c:	e042      	b.n	800a5d4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a552:	b29b      	uxth	r3, r3
 800a554:	3b01      	subs	r3, #1
 800a556:	b29a      	uxth	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a564:	d122      	bne.n	800a5ac <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2200      	movs	r2, #0
 800a56e:	2180      	movs	r1, #128	; 0x80
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 f966 	bl	800a842 <UART_WaitOnFlagUntilTimeout>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e046      	b.n	800a60e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a592:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d103      	bne.n	800a5a4 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	3302      	adds	r3, #2
 800a5a0:	60bb      	str	r3, [r7, #8]
 800a5a2:	e017      	b.n	800a5d4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	60bb      	str	r3, [r7, #8]
 800a5aa:	e013      	b.n	800a5d4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2180      	movs	r1, #128	; 0x80
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 f943 	bl	800a842 <UART_WaitOnFlagUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e023      	b.n	800a60e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	1c5a      	adds	r2, r3, #1
 800a5ca:	60ba      	str	r2, [r7, #8]
 800a5cc:	781a      	ldrb	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1b7      	bne.n	800a54e <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2140      	movs	r1, #64	; 0x40
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f000 f92a 	bl	800a842 <UART_WaitOnFlagUntilTimeout>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e00a      	b.n	800a60e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	e000      	b.n	800a60e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a60c:	2302      	movs	r3, #2
  }
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
	...

0800a618 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800a638:	2300      	movs	r3, #0
 800a63a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	f003 030f 	and.w	r3, r3, #15
 800a646:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10d      	bne.n	800a66a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	f003 0320 	and.w	r3, r3, #32
 800a654:	2b00      	cmp	r3, #0
 800a656:	d008      	beq.n	800a66a <HAL_UART_IRQHandler+0x52>
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	f003 0320 	and.w	r3, r3, #32
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f9d5 	bl	800aa12 <UART_Receive_IT>
      return;
 800a668:	e0cb      	b.n	800a802 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 80ab 	beq.w	800a7c8 <HAL_UART_IRQHandler+0x1b0>
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d105      	bne.n	800a688 <HAL_UART_IRQHandler+0x70>
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 80a0 	beq.w	800a7c8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00a      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x90>
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d005      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a0:	f043 0201 	orr.w	r2, r3, #1
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00a      	beq.n	800a6c8 <HAL_UART_IRQHandler+0xb0>
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c0:	f043 0202 	orr.w	r2, r3, #2
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	f003 0302 	and.w	r3, r3, #2
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00a      	beq.n	800a6e8 <HAL_UART_IRQHandler+0xd0>
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f003 0301 	and.w	r3, r3, #1
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d005      	beq.n	800a6e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e0:	f043 0204 	orr.w	r2, r3, #4
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00a      	beq.n	800a708 <HAL_UART_IRQHandler+0xf0>
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d005      	beq.n	800a708 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a700:	f043 0208 	orr.w	r2, r3, #8
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d077      	beq.n	800a800 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	f003 0320 	and.w	r3, r3, #32
 800a716:	2b00      	cmp	r3, #0
 800a718:	d007      	beq.n	800a72a <HAL_UART_IRQHandler+0x112>
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	f003 0320 	and.w	r3, r3, #32
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f974 	bl	800aa12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a734:	2b00      	cmp	r3, #0
 800a736:	bf14      	ite	ne
 800a738:	2301      	movne	r3, #1
 800a73a:	2300      	moveq	r3, #0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a744:	f003 0308 	and.w	r3, r3, #8
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d102      	bne.n	800a752 <HAL_UART_IRQHandler+0x13a>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d031      	beq.n	800a7b6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f8bf 	bl	800a8d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a762:	2b00      	cmp	r3, #0
 800a764:	d023      	beq.n	800a7ae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	695a      	ldr	r2, [r3, #20]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a774:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d013      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a782:	4a21      	ldr	r2, [pc, #132]	; (800a808 <HAL_UART_IRQHandler+0x1f0>)
 800a784:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fd fc04 	bl	8007f98 <HAL_DMA_Abort_IT>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d016      	beq.n	800a7c4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a4:	e00e      	b.n	800a7c4 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f842 	bl	800a830 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ac:	e00a      	b.n	800a7c4 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f83e 	bl	800a830 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b4:	e006      	b.n	800a7c4 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f83a 	bl	800a830 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a7c2:	e01d      	b.n	800a800 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c4:	bf00      	nop
    return;
 800a7c6:	e01b      	b.n	800a800 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d008      	beq.n	800a7e4 <HAL_UART_IRQHandler+0x1cc>
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f8ab 	bl	800a938 <UART_Transmit_IT>
    return;
 800a7e2:	e00e      	b.n	800a802 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d009      	beq.n	800a802 <HAL_UART_IRQHandler+0x1ea>
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d004      	beq.n	800a802 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f8f2 	bl	800a9e2 <UART_EndTransmit_IT>
    return;
 800a7fe:	e000      	b.n	800a802 <HAL_UART_IRQHandler+0x1ea>
    return;
 800a800:	bf00      	nop
  }
}
 800a802:	3720      	adds	r7, #32
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	0800a911 	.word	0x0800a911

0800a80c <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	bc80      	pop	{r7}
 800a81c:	4770      	bx	lr

0800a81e <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a81e:	b480      	push	{r7}
 800a820:	b083      	sub	sp, #12
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a826:	bf00      	nop
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bc80      	pop	{r7}
 800a82e:	4770      	bx	lr

0800a830 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bc80      	pop	{r7}
 800a840:	4770      	bx	lr

0800a842 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b084      	sub	sp, #16
 800a846:	af00      	add	r7, sp, #0
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	603b      	str	r3, [r7, #0]
 800a84e:	4613      	mov	r3, r2
 800a850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800a852:	e02c      	b.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85a:	d028      	beq.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d007      	beq.n	800a872 <UART_WaitOnFlagUntilTimeout+0x30>
 800a862:	f7fc fda3 	bl	80073ac <HAL_GetTick>
 800a866:	4602      	mov	r2, r0
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	69ba      	ldr	r2, [r7, #24]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d21d      	bcs.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68da      	ldr	r2, [r3, #12]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a880:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	695a      	ldr	r2, [r3, #20]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f022 0201 	bic.w	r2, r2, #1
 800a890:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2220      	movs	r2, #32
 800a896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2220      	movs	r2, #32
 800a89e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e00f      	b.n	800a8ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	bf0c      	ite	eq
 800a8be:	2301      	moveq	r3, #1
 800a8c0:	2300      	movne	r3, #0
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d0c3      	beq.n	800a854 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b083      	sub	sp, #12
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a8ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	695a      	ldr	r2, [r3, #20]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f022 0201 	bic.w	r2, r2, #1
 800a8fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2220      	movs	r2, #32
 800a902:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bc80      	pop	{r7}
 800a90e:	4770      	bx	lr

0800a910 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff ff80 	bl	800a830 <HAL_UART_ErrorCallback>
}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b21      	cmp	r3, #33	; 0x21
 800a94a:	d144      	bne.n	800a9d6 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a954:	d11a      	bne.n	800a98c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a96a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d105      	bne.n	800a980 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	1c9a      	adds	r2, r3, #2
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	621a      	str	r2, [r3, #32]
 800a97e:	e00e      	b.n	800a99e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	621a      	str	r2, [r3, #32]
 800a98a:	e008      	b.n	800a99e <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	1c59      	adds	r1, r3, #1
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	6211      	str	r1, [r2, #32]
 800a996:	781a      	ldrb	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10f      	bne.n	800a9d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68da      	ldr	r2, [r3, #12]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68da      	ldr	r2, [r3, #12]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e000      	b.n	800a9d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a9d6:	2302      	movs	r3, #2
  }
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr

0800a9e2 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b082      	sub	sp, #8
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68da      	ldr	r2, [r3, #12]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9f8:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff ff02 	bl	800a80c <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b22      	cmp	r3, #34	; 0x22
 800aa24:	d171      	bne.n	800ab0a <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2e:	d123      	bne.n	800aa78 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa34:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10e      	bne.n	800aa5c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa54:	1c9a      	adds	r2, r3, #2
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	629a      	str	r2, [r3, #40]	; 0x28
 800aa5a:	e029      	b.n	800aab0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	629a      	str	r2, [r3, #40]	; 0x28
 800aa76:	e01b      	b.n	800aab0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10a      	bne.n	800aa96 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6858      	ldr	r0, [r3, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8a:	1c59      	adds	r1, r3, #1
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6291      	str	r1, [r2, #40]	; 0x28
 800aa90:	b2c2      	uxtb	r2, r0
 800aa92:	701a      	strb	r2, [r3, #0]
 800aa94:	e00c      	b.n	800aab0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa2:	1c58      	adds	r0, r3, #1
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	6288      	str	r0, [r1, #40]	; 0x28
 800aaa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aaac:	b2d2      	uxtb	r2, r2
 800aaae:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	3b01      	subs	r3, #1
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	4619      	mov	r1, r3
 800aabe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d120      	bne.n	800ab06 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68da      	ldr	r2, [r3, #12]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f022 0220 	bic.w	r2, r2, #32
 800aad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68da      	ldr	r2, [r3, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aae2:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	695a      	ldr	r2, [r3, #20]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f022 0201 	bic.w	r2, r2, #1
 800aaf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff fe8e 	bl	800a81e <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	e002      	b.n	800ab0c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	e000      	b.n	800ab0c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ab0a:	2302      	movs	r3, #2
  }
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab14:	b5b0      	push	{r4, r5, r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68da      	ldr	r2, [r3, #12]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689a      	ldr	r2, [r3, #8]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	695b      	ldr	r3, [r3, #20]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ab56:	f023 030c 	bic.w	r3, r3, #12
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	6812      	ldr	r2, [r2, #0]
 800ab5e:	68f9      	ldr	r1, [r7, #12]
 800ab60:	430b      	orrs	r3, r1
 800ab62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a6f      	ldr	r2, [pc, #444]	; (800ad3c <UART_SetConfig+0x228>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d16b      	bne.n	800ac5c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ab84:	f7fe f8f2 	bl	8008d6c <HAL_RCC_GetPCLK2Freq>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	009a      	lsls	r2, r3, #2
 800ab92:	441a      	add	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab9e:	4a68      	ldr	r2, [pc, #416]	; (800ad40 <UART_SetConfig+0x22c>)
 800aba0:	fba2 2303 	umull	r2, r3, r2, r3
 800aba4:	095b      	lsrs	r3, r3, #5
 800aba6:	011c      	lsls	r4, r3, #4
 800aba8:	f7fe f8e0 	bl	8008d6c <HAL_RCC_GetPCLK2Freq>
 800abac:	4602      	mov	r2, r0
 800abae:	4613      	mov	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	009a      	lsls	r2, r3, #2
 800abb6:	441a      	add	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	fbb2 f5f3 	udiv	r5, r2, r3
 800abc2:	f7fe f8d3 	bl	8008d6c <HAL_RCC_GetPCLK2Freq>
 800abc6:	4602      	mov	r2, r0
 800abc8:	4613      	mov	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	009a      	lsls	r2, r3, #2
 800abd0:	441a      	add	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abdc:	4a58      	ldr	r2, [pc, #352]	; (800ad40 <UART_SetConfig+0x22c>)
 800abde:	fba2 2303 	umull	r2, r3, r2, r3
 800abe2:	095b      	lsrs	r3, r3, #5
 800abe4:	2264      	movs	r2, #100	; 0x64
 800abe6:	fb02 f303 	mul.w	r3, r2, r3
 800abea:	1aeb      	subs	r3, r5, r3
 800abec:	011b      	lsls	r3, r3, #4
 800abee:	3332      	adds	r3, #50	; 0x32
 800abf0:	4a53      	ldr	r2, [pc, #332]	; (800ad40 <UART_SetConfig+0x22c>)
 800abf2:	fba2 2303 	umull	r2, r3, r2, r3
 800abf6:	095b      	lsrs	r3, r3, #5
 800abf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abfc:	441c      	add	r4, r3
 800abfe:	f7fe f8b5 	bl	8008d6c <HAL_RCC_GetPCLK2Freq>
 800ac02:	4602      	mov	r2, r0
 800ac04:	4613      	mov	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	009a      	lsls	r2, r3, #2
 800ac0c:	441a      	add	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	fbb2 f5f3 	udiv	r5, r2, r3
 800ac18:	f7fe f8a8 	bl	8008d6c <HAL_RCC_GetPCLK2Freq>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009a      	lsls	r2, r3, #2
 800ac26:	441a      	add	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac32:	4a43      	ldr	r2, [pc, #268]	; (800ad40 <UART_SetConfig+0x22c>)
 800ac34:	fba2 2303 	umull	r2, r3, r2, r3
 800ac38:	095b      	lsrs	r3, r3, #5
 800ac3a:	2264      	movs	r2, #100	; 0x64
 800ac3c:	fb02 f303 	mul.w	r3, r2, r3
 800ac40:	1aeb      	subs	r3, r5, r3
 800ac42:	011b      	lsls	r3, r3, #4
 800ac44:	3332      	adds	r3, #50	; 0x32
 800ac46:	4a3e      	ldr	r2, [pc, #248]	; (800ad40 <UART_SetConfig+0x22c>)
 800ac48:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4c:	095b      	lsrs	r3, r3, #5
 800ac4e:	f003 020f 	and.w	r2, r3, #15
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4422      	add	r2, r4
 800ac58:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800ac5a:	e06a      	b.n	800ad32 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800ac5c:	f7fe f872 	bl	8008d44 <HAL_RCC_GetPCLK1Freq>
 800ac60:	4602      	mov	r2, r0
 800ac62:	4613      	mov	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	009a      	lsls	r2, r3, #2
 800ac6a:	441a      	add	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac76:	4a32      	ldr	r2, [pc, #200]	; (800ad40 <UART_SetConfig+0x22c>)
 800ac78:	fba2 2303 	umull	r2, r3, r2, r3
 800ac7c:	095b      	lsrs	r3, r3, #5
 800ac7e:	011c      	lsls	r4, r3, #4
 800ac80:	f7fe f860 	bl	8008d44 <HAL_RCC_GetPCLK1Freq>
 800ac84:	4602      	mov	r2, r0
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009a      	lsls	r2, r3, #2
 800ac8e:	441a      	add	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	fbb2 f5f3 	udiv	r5, r2, r3
 800ac9a:	f7fe f853 	bl	8008d44 <HAL_RCC_GetPCLK1Freq>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	009a      	lsls	r2, r3, #2
 800aca8:	441a      	add	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb4:	4a22      	ldr	r2, [pc, #136]	; (800ad40 <UART_SetConfig+0x22c>)
 800acb6:	fba2 2303 	umull	r2, r3, r2, r3
 800acba:	095b      	lsrs	r3, r3, #5
 800acbc:	2264      	movs	r2, #100	; 0x64
 800acbe:	fb02 f303 	mul.w	r3, r2, r3
 800acc2:	1aeb      	subs	r3, r5, r3
 800acc4:	011b      	lsls	r3, r3, #4
 800acc6:	3332      	adds	r3, #50	; 0x32
 800acc8:	4a1d      	ldr	r2, [pc, #116]	; (800ad40 <UART_SetConfig+0x22c>)
 800acca:	fba2 2303 	umull	r2, r3, r2, r3
 800acce:	095b      	lsrs	r3, r3, #5
 800acd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acd4:	441c      	add	r4, r3
 800acd6:	f7fe f835 	bl	8008d44 <HAL_RCC_GetPCLK1Freq>
 800acda:	4602      	mov	r2, r0
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	009a      	lsls	r2, r3, #2
 800ace4:	441a      	add	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	fbb2 f5f3 	udiv	r5, r2, r3
 800acf0:	f7fe f828 	bl	8008d44 <HAL_RCC_GetPCLK1Freq>
 800acf4:	4602      	mov	r2, r0
 800acf6:	4613      	mov	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	009a      	lsls	r2, r3, #2
 800acfe:	441a      	add	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad0a:	4a0d      	ldr	r2, [pc, #52]	; (800ad40 <UART_SetConfig+0x22c>)
 800ad0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad10:	095b      	lsrs	r3, r3, #5
 800ad12:	2264      	movs	r2, #100	; 0x64
 800ad14:	fb02 f303 	mul.w	r3, r2, r3
 800ad18:	1aeb      	subs	r3, r5, r3
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	3332      	adds	r3, #50	; 0x32
 800ad1e:	4a08      	ldr	r2, [pc, #32]	; (800ad40 <UART_SetConfig+0x22c>)
 800ad20:	fba2 2303 	umull	r2, r3, r2, r3
 800ad24:	095b      	lsrs	r3, r3, #5
 800ad26:	f003 020f 	and.w	r2, r3, #15
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4422      	add	r2, r4
 800ad30:	609a      	str	r2, [r3, #8]
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bdb0      	pop	{r4, r5, r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	40013800 	.word	0x40013800
 800ad40:	51eb851f 	.word	0x51eb851f

0800ad44 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	6812      	ldr	r2, [r2, #0]
 800ad5c:	f023 0101 	bic.w	r1, r3, #1
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	2b08      	cmp	r3, #8
 800ad6c:	d132      	bne.n	800add4 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad78:	4b31      	ldr	r3, [pc, #196]	; (800ae40 <FSMC_NORSRAM_Init+0xfc>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	6851      	ldr	r1, [r2, #4]
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	6892      	ldr	r2, [r2, #8]
 800ad84:	4311      	orrs	r1, r2
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	68d2      	ldr	r2, [r2, #12]
 800ad8a:	4311      	orrs	r1, r2
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	6912      	ldr	r2, [r2, #16]
 800ad90:	4311      	orrs	r1, r2
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	6952      	ldr	r2, [r2, #20]
 800ad96:	4311      	orrs	r1, r2
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	6992      	ldr	r2, [r2, #24]
 800ad9c:	4311      	orrs	r1, r2
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	69d2      	ldr	r2, [r2, #28]
 800ada2:	4311      	orrs	r1, r2
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	6a12      	ldr	r2, [r2, #32]
 800ada8:	4311      	orrs	r1, r2
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800adae:	4311      	orrs	r1, r2
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800adb4:	4311      	orrs	r1, r2
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800adba:	4311      	orrs	r1, r2
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800adc0:	430a      	orrs	r2, r1
 800adc2:	4313      	orrs	r3, r2
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	6812      	ldr	r2, [r2, #0]
 800adc8:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800add2:	e02f      	b.n	800ae34 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adde:	4b18      	ldr	r3, [pc, #96]	; (800ae40 <FSMC_NORSRAM_Init+0xfc>)
 800ade0:	4013      	ands	r3, r2
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	6851      	ldr	r1, [r2, #4]
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	6892      	ldr	r2, [r2, #8]
 800adea:	4311      	orrs	r1, r2
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	68d2      	ldr	r2, [r2, #12]
 800adf0:	4311      	orrs	r1, r2
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	6912      	ldr	r2, [r2, #16]
 800adf6:	4311      	orrs	r1, r2
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	6952      	ldr	r2, [r2, #20]
 800adfc:	4311      	orrs	r1, r2
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	6992      	ldr	r2, [r2, #24]
 800ae02:	4311      	orrs	r1, r2
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	69d2      	ldr	r2, [r2, #28]
 800ae08:	4311      	orrs	r1, r2
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	6a12      	ldr	r2, [r2, #32]
 800ae0e:	4311      	orrs	r1, r2
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae14:	4311      	orrs	r1, r2
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ae1a:	4311      	orrs	r1, r2
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae20:	4311      	orrs	r1, r2
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae26:	4311      	orrs	r1, r2
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	6812      	ldr	r2, [r2, #0]
 800ae2c:	4319      	orrs	r1, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bc80      	pop	{r7}
 800ae3e:	4770      	bx	lr
 800ae40:	fff70081 	.word	0xfff70081

0800ae44 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	011b      	lsls	r3, r3, #4
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	021b      	lsls	r3, r3, #8
 800ae70:	431a      	orrs	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	041b      	lsls	r3, r3, #16
 800ae78:	431a      	orrs	r2, r3
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	051b      	lsls	r3, r3, #20
 800ae82:	431a      	orrs	r2, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	3b02      	subs	r3, #2
 800ae8a:	061b      	lsls	r3, r3, #24
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	3201      	adds	r2, #1
 800ae98:	4319      	orrs	r1, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bc80      	pop	{r7}
 800aeaa:	4770      	bx	lr

0800aeac <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aec0:	d11d      	bne.n	800aefe <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aeca:	4b13      	ldr	r3, [pc, #76]	; (800af18 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800aecc:	4013      	ands	r3, r2
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	6811      	ldr	r1, [r2, #0]
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	6852      	ldr	r2, [r2, #4]
 800aed6:	0112      	lsls	r2, r2, #4
 800aed8:	4311      	orrs	r1, r2
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	6892      	ldr	r2, [r2, #8]
 800aede:	0212      	lsls	r2, r2, #8
 800aee0:	4311      	orrs	r1, r2
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	6992      	ldr	r2, [r2, #24]
 800aee6:	4311      	orrs	r1, r2
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	68d2      	ldr	r2, [r2, #12]
 800aeec:	0412      	lsls	r2, r2, #16
 800aeee:	430a      	orrs	r2, r1
 800aef0:	ea43 0102 	orr.w	r1, r3, r2
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800aefc:	e005      	b.n	800af0a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800af06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	bc80      	pop	{r7}
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	cff00000 	.word	0xcff00000

0800af1c <__errno>:
 800af1c:	4b01      	ldr	r3, [pc, #4]	; (800af24 <__errno+0x8>)
 800af1e:	6818      	ldr	r0, [r3, #0]
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	20000050 	.word	0x20000050

0800af28 <__libc_init_array>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	2600      	movs	r6, #0
 800af2c:	4d0c      	ldr	r5, [pc, #48]	; (800af60 <__libc_init_array+0x38>)
 800af2e:	4c0d      	ldr	r4, [pc, #52]	; (800af64 <__libc_init_array+0x3c>)
 800af30:	1b64      	subs	r4, r4, r5
 800af32:	10a4      	asrs	r4, r4, #2
 800af34:	42a6      	cmp	r6, r4
 800af36:	d109      	bne.n	800af4c <__libc_init_array+0x24>
 800af38:	f001 fe64 	bl	800cc04 <_init>
 800af3c:	2600      	movs	r6, #0
 800af3e:	4d0a      	ldr	r5, [pc, #40]	; (800af68 <__libc_init_array+0x40>)
 800af40:	4c0a      	ldr	r4, [pc, #40]	; (800af6c <__libc_init_array+0x44>)
 800af42:	1b64      	subs	r4, r4, r5
 800af44:	10a4      	asrs	r4, r4, #2
 800af46:	42a6      	cmp	r6, r4
 800af48:	d105      	bne.n	800af56 <__libc_init_array+0x2e>
 800af4a:	bd70      	pop	{r4, r5, r6, pc}
 800af4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af50:	4798      	blx	r3
 800af52:	3601      	adds	r6, #1
 800af54:	e7ee      	b.n	800af34 <__libc_init_array+0xc>
 800af56:	f855 3b04 	ldr.w	r3, [r5], #4
 800af5a:	4798      	blx	r3
 800af5c:	3601      	adds	r6, #1
 800af5e:	e7f2      	b.n	800af46 <__libc_init_array+0x1e>
 800af60:	080772f8 	.word	0x080772f8
 800af64:	080772f8 	.word	0x080772f8
 800af68:	080772f8 	.word	0x080772f8
 800af6c:	080772fc 	.word	0x080772fc

0800af70 <memset>:
 800af70:	4603      	mov	r3, r0
 800af72:	4402      	add	r2, r0
 800af74:	4293      	cmp	r3, r2
 800af76:	d100      	bne.n	800af7a <memset+0xa>
 800af78:	4770      	bx	lr
 800af7a:	f803 1b01 	strb.w	r1, [r3], #1
 800af7e:	e7f9      	b.n	800af74 <memset+0x4>

0800af80 <siscanf>:
 800af80:	b40e      	push	{r1, r2, r3}
 800af82:	f44f 7201 	mov.w	r2, #516	; 0x204
 800af86:	b530      	push	{r4, r5, lr}
 800af88:	b09c      	sub	sp, #112	; 0x70
 800af8a:	ac1f      	add	r4, sp, #124	; 0x7c
 800af8c:	f854 5b04 	ldr.w	r5, [r4], #4
 800af90:	f8ad 2014 	strh.w	r2, [sp, #20]
 800af94:	9002      	str	r0, [sp, #8]
 800af96:	9006      	str	r0, [sp, #24]
 800af98:	f7f5 f946 	bl	8000228 <strlen>
 800af9c:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <siscanf+0x4c>)
 800af9e:	9003      	str	r0, [sp, #12]
 800afa0:	930b      	str	r3, [sp, #44]	; 0x2c
 800afa2:	2300      	movs	r3, #0
 800afa4:	930f      	str	r3, [sp, #60]	; 0x3c
 800afa6:	9314      	str	r3, [sp, #80]	; 0x50
 800afa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afac:	9007      	str	r0, [sp, #28]
 800afae:	4808      	ldr	r0, [pc, #32]	; (800afd0 <siscanf+0x50>)
 800afb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800afb4:	462a      	mov	r2, r5
 800afb6:	4623      	mov	r3, r4
 800afb8:	a902      	add	r1, sp, #8
 800afba:	6800      	ldr	r0, [r0, #0]
 800afbc:	9401      	str	r4, [sp, #4]
 800afbe:	f000 f865 	bl	800b08c <__ssvfiscanf_r>
 800afc2:	b01c      	add	sp, #112	; 0x70
 800afc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afc8:	b003      	add	sp, #12
 800afca:	4770      	bx	lr
 800afcc:	0800afd5 	.word	0x0800afd5
 800afd0:	20000050 	.word	0x20000050

0800afd4 <__seofread>:
 800afd4:	2000      	movs	r0, #0
 800afd6:	4770      	bx	lr

0800afd8 <_sungetc_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	1c4b      	adds	r3, r1, #1
 800afdc:	4614      	mov	r4, r2
 800afde:	d103      	bne.n	800afe8 <_sungetc_r+0x10>
 800afe0:	f04f 35ff 	mov.w	r5, #4294967295
 800afe4:	4628      	mov	r0, r5
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	8993      	ldrh	r3, [r2, #12]
 800afea:	b2cd      	uxtb	r5, r1
 800afec:	f023 0320 	bic.w	r3, r3, #32
 800aff0:	8193      	strh	r3, [r2, #12]
 800aff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aff4:	6852      	ldr	r2, [r2, #4]
 800aff6:	b18b      	cbz	r3, 800b01c <_sungetc_r+0x44>
 800aff8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800affa:	4293      	cmp	r3, r2
 800affc:	dd08      	ble.n	800b010 <_sungetc_r+0x38>
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	1e5a      	subs	r2, r3, #1
 800b002:	6022      	str	r2, [r4, #0]
 800b004:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b008:	6863      	ldr	r3, [r4, #4]
 800b00a:	3301      	adds	r3, #1
 800b00c:	6063      	str	r3, [r4, #4]
 800b00e:	e7e9      	b.n	800afe4 <_sungetc_r+0xc>
 800b010:	4621      	mov	r1, r4
 800b012:	f000 fc31 	bl	800b878 <__submore>
 800b016:	2800      	cmp	r0, #0
 800b018:	d0f1      	beq.n	800affe <_sungetc_r+0x26>
 800b01a:	e7e1      	b.n	800afe0 <_sungetc_r+0x8>
 800b01c:	6921      	ldr	r1, [r4, #16]
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	b151      	cbz	r1, 800b038 <_sungetc_r+0x60>
 800b022:	4299      	cmp	r1, r3
 800b024:	d208      	bcs.n	800b038 <_sungetc_r+0x60>
 800b026:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b02a:	42a9      	cmp	r1, r5
 800b02c:	d104      	bne.n	800b038 <_sungetc_r+0x60>
 800b02e:	3b01      	subs	r3, #1
 800b030:	3201      	adds	r2, #1
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	6062      	str	r2, [r4, #4]
 800b036:	e7d5      	b.n	800afe4 <_sungetc_r+0xc>
 800b038:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b040:	6363      	str	r3, [r4, #52]	; 0x34
 800b042:	2303      	movs	r3, #3
 800b044:	63a3      	str	r3, [r4, #56]	; 0x38
 800b046:	4623      	mov	r3, r4
 800b048:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	2301      	movs	r3, #1
 800b050:	e7dc      	b.n	800b00c <_sungetc_r+0x34>

0800b052 <__ssrefill_r>:
 800b052:	b510      	push	{r4, lr}
 800b054:	460c      	mov	r4, r1
 800b056:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b058:	b169      	cbz	r1, 800b076 <__ssrefill_r+0x24>
 800b05a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b05e:	4299      	cmp	r1, r3
 800b060:	d001      	beq.n	800b066 <__ssrefill_r+0x14>
 800b062:	f000 fc5f 	bl	800b924 <_free_r>
 800b066:	2000      	movs	r0, #0
 800b068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b06a:	6360      	str	r0, [r4, #52]	; 0x34
 800b06c:	6063      	str	r3, [r4, #4]
 800b06e:	b113      	cbz	r3, 800b076 <__ssrefill_r+0x24>
 800b070:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b072:	6023      	str	r3, [r4, #0]
 800b074:	bd10      	pop	{r4, pc}
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	2300      	movs	r3, #0
 800b080:	6063      	str	r3, [r4, #4]
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	f043 0320 	orr.w	r3, r3, #32
 800b088:	81a3      	strh	r3, [r4, #12]
 800b08a:	e7f3      	b.n	800b074 <__ssrefill_r+0x22>

0800b08c <__ssvfiscanf_r>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	460c      	mov	r4, r1
 800b092:	2100      	movs	r1, #0
 800b094:	4606      	mov	r6, r0
 800b096:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b09a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b09e:	49a7      	ldr	r1, [pc, #668]	; (800b33c <__ssvfiscanf_r+0x2b0>)
 800b0a0:	f10d 0804 	add.w	r8, sp, #4
 800b0a4:	91a0      	str	r1, [sp, #640]	; 0x280
 800b0a6:	49a6      	ldr	r1, [pc, #664]	; (800b340 <__ssvfiscanf_r+0x2b4>)
 800b0a8:	4fa6      	ldr	r7, [pc, #664]	; (800b344 <__ssvfiscanf_r+0x2b8>)
 800b0aa:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b348 <__ssvfiscanf_r+0x2bc>
 800b0ae:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b0b2:	91a1      	str	r1, [sp, #644]	; 0x284
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	7813      	ldrb	r3, [r2, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 815c 	beq.w	800b376 <__ssvfiscanf_r+0x2ea>
 800b0be:	5dd9      	ldrb	r1, [r3, r7]
 800b0c0:	1c55      	adds	r5, r2, #1
 800b0c2:	f011 0108 	ands.w	r1, r1, #8
 800b0c6:	d019      	beq.n	800b0fc <__ssvfiscanf_r+0x70>
 800b0c8:	6863      	ldr	r3, [r4, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	dd0f      	ble.n	800b0ee <__ssvfiscanf_r+0x62>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	781a      	ldrb	r2, [r3, #0]
 800b0d2:	5cba      	ldrb	r2, [r7, r2]
 800b0d4:	0712      	lsls	r2, r2, #28
 800b0d6:	d401      	bmi.n	800b0dc <__ssvfiscanf_r+0x50>
 800b0d8:	462a      	mov	r2, r5
 800b0da:	e7ec      	b.n	800b0b6 <__ssvfiscanf_r+0x2a>
 800b0dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b0de:	3301      	adds	r3, #1
 800b0e0:	3201      	adds	r2, #1
 800b0e2:	9245      	str	r2, [sp, #276]	; 0x114
 800b0e4:	6862      	ldr	r2, [r4, #4]
 800b0e6:	6023      	str	r3, [r4, #0]
 800b0e8:	3a01      	subs	r2, #1
 800b0ea:	6062      	str	r2, [r4, #4]
 800b0ec:	e7ec      	b.n	800b0c8 <__ssvfiscanf_r+0x3c>
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0f4:	4798      	blx	r3
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d0e9      	beq.n	800b0ce <__ssvfiscanf_r+0x42>
 800b0fa:	e7ed      	b.n	800b0d8 <__ssvfiscanf_r+0x4c>
 800b0fc:	2b25      	cmp	r3, #37	; 0x25
 800b0fe:	d012      	beq.n	800b126 <__ssvfiscanf_r+0x9a>
 800b100:	469a      	mov	sl, r3
 800b102:	6863      	ldr	r3, [r4, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f340 8094 	ble.w	800b232 <__ssvfiscanf_r+0x1a6>
 800b10a:	6822      	ldr	r2, [r4, #0]
 800b10c:	7813      	ldrb	r3, [r2, #0]
 800b10e:	4553      	cmp	r3, sl
 800b110:	f040 8131 	bne.w	800b376 <__ssvfiscanf_r+0x2ea>
 800b114:	6863      	ldr	r3, [r4, #4]
 800b116:	3201      	adds	r2, #1
 800b118:	3b01      	subs	r3, #1
 800b11a:	6063      	str	r3, [r4, #4]
 800b11c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b11e:	6022      	str	r2, [r4, #0]
 800b120:	3301      	adds	r3, #1
 800b122:	9345      	str	r3, [sp, #276]	; 0x114
 800b124:	e7d8      	b.n	800b0d8 <__ssvfiscanf_r+0x4c>
 800b126:	9141      	str	r1, [sp, #260]	; 0x104
 800b128:	9143      	str	r1, [sp, #268]	; 0x10c
 800b12a:	7853      	ldrb	r3, [r2, #1]
 800b12c:	2b2a      	cmp	r3, #42	; 0x2a
 800b12e:	bf04      	itt	eq
 800b130:	2310      	moveq	r3, #16
 800b132:	1c95      	addeq	r5, r2, #2
 800b134:	f04f 020a 	mov.w	r2, #10
 800b138:	bf08      	it	eq
 800b13a:	9341      	streq	r3, [sp, #260]	; 0x104
 800b13c:	46aa      	mov	sl, r5
 800b13e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b142:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b146:	2b09      	cmp	r3, #9
 800b148:	d91d      	bls.n	800b186 <__ssvfiscanf_r+0xfa>
 800b14a:	2203      	movs	r2, #3
 800b14c:	487e      	ldr	r0, [pc, #504]	; (800b348 <__ssvfiscanf_r+0x2bc>)
 800b14e:	f000 fbcd 	bl	800b8ec <memchr>
 800b152:	b140      	cbz	r0, 800b166 <__ssvfiscanf_r+0xda>
 800b154:	2301      	movs	r3, #1
 800b156:	4655      	mov	r5, sl
 800b158:	eba0 0009 	sub.w	r0, r0, r9
 800b15c:	fa03 f000 	lsl.w	r0, r3, r0
 800b160:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b162:	4318      	orrs	r0, r3
 800b164:	9041      	str	r0, [sp, #260]	; 0x104
 800b166:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b16a:	2b78      	cmp	r3, #120	; 0x78
 800b16c:	d806      	bhi.n	800b17c <__ssvfiscanf_r+0xf0>
 800b16e:	2b57      	cmp	r3, #87	; 0x57
 800b170:	d810      	bhi.n	800b194 <__ssvfiscanf_r+0x108>
 800b172:	2b25      	cmp	r3, #37	; 0x25
 800b174:	d0c4      	beq.n	800b100 <__ssvfiscanf_r+0x74>
 800b176:	d857      	bhi.n	800b228 <__ssvfiscanf_r+0x19c>
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d065      	beq.n	800b248 <__ssvfiscanf_r+0x1bc>
 800b17c:	2303      	movs	r3, #3
 800b17e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b180:	230a      	movs	r3, #10
 800b182:	9342      	str	r3, [sp, #264]	; 0x108
 800b184:	e072      	b.n	800b26c <__ssvfiscanf_r+0x1e0>
 800b186:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b188:	4655      	mov	r5, sl
 800b18a:	fb02 1103 	mla	r1, r2, r3, r1
 800b18e:	3930      	subs	r1, #48	; 0x30
 800b190:	9143      	str	r1, [sp, #268]	; 0x10c
 800b192:	e7d3      	b.n	800b13c <__ssvfiscanf_r+0xb0>
 800b194:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b198:	2a20      	cmp	r2, #32
 800b19a:	d8ef      	bhi.n	800b17c <__ssvfiscanf_r+0xf0>
 800b19c:	a101      	add	r1, pc, #4	; (adr r1, 800b1a4 <__ssvfiscanf_r+0x118>)
 800b19e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b1a2:	bf00      	nop
 800b1a4:	0800b257 	.word	0x0800b257
 800b1a8:	0800b17d 	.word	0x0800b17d
 800b1ac:	0800b17d 	.word	0x0800b17d
 800b1b0:	0800b2b5 	.word	0x0800b2b5
 800b1b4:	0800b17d 	.word	0x0800b17d
 800b1b8:	0800b17d 	.word	0x0800b17d
 800b1bc:	0800b17d 	.word	0x0800b17d
 800b1c0:	0800b17d 	.word	0x0800b17d
 800b1c4:	0800b17d 	.word	0x0800b17d
 800b1c8:	0800b17d 	.word	0x0800b17d
 800b1cc:	0800b17d 	.word	0x0800b17d
 800b1d0:	0800b2cb 	.word	0x0800b2cb
 800b1d4:	0800b2a1 	.word	0x0800b2a1
 800b1d8:	0800b22f 	.word	0x0800b22f
 800b1dc:	0800b22f 	.word	0x0800b22f
 800b1e0:	0800b22f 	.word	0x0800b22f
 800b1e4:	0800b17d 	.word	0x0800b17d
 800b1e8:	0800b2a5 	.word	0x0800b2a5
 800b1ec:	0800b17d 	.word	0x0800b17d
 800b1f0:	0800b17d 	.word	0x0800b17d
 800b1f4:	0800b17d 	.word	0x0800b17d
 800b1f8:	0800b17d 	.word	0x0800b17d
 800b1fc:	0800b2db 	.word	0x0800b2db
 800b200:	0800b2ad 	.word	0x0800b2ad
 800b204:	0800b24f 	.word	0x0800b24f
 800b208:	0800b17d 	.word	0x0800b17d
 800b20c:	0800b17d 	.word	0x0800b17d
 800b210:	0800b2d7 	.word	0x0800b2d7
 800b214:	0800b17d 	.word	0x0800b17d
 800b218:	0800b2a1 	.word	0x0800b2a1
 800b21c:	0800b17d 	.word	0x0800b17d
 800b220:	0800b17d 	.word	0x0800b17d
 800b224:	0800b257 	.word	0x0800b257
 800b228:	3b45      	subs	r3, #69	; 0x45
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d8a6      	bhi.n	800b17c <__ssvfiscanf_r+0xf0>
 800b22e:	2305      	movs	r3, #5
 800b230:	e01b      	b.n	800b26a <__ssvfiscanf_r+0x1de>
 800b232:	4621      	mov	r1, r4
 800b234:	4630      	mov	r0, r6
 800b236:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b238:	4798      	blx	r3
 800b23a:	2800      	cmp	r0, #0
 800b23c:	f43f af65 	beq.w	800b10a <__ssvfiscanf_r+0x7e>
 800b240:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b242:	2800      	cmp	r0, #0
 800b244:	f040 808d 	bne.w	800b362 <__ssvfiscanf_r+0x2d6>
 800b248:	f04f 30ff 	mov.w	r0, #4294967295
 800b24c:	e08f      	b.n	800b36e <__ssvfiscanf_r+0x2e2>
 800b24e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b250:	f042 0220 	orr.w	r2, r2, #32
 800b254:	9241      	str	r2, [sp, #260]	; 0x104
 800b256:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b25c:	9241      	str	r2, [sp, #260]	; 0x104
 800b25e:	2210      	movs	r2, #16
 800b260:	2b6f      	cmp	r3, #111	; 0x6f
 800b262:	bf34      	ite	cc
 800b264:	2303      	movcc	r3, #3
 800b266:	2304      	movcs	r3, #4
 800b268:	9242      	str	r2, [sp, #264]	; 0x108
 800b26a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b26c:	6863      	ldr	r3, [r4, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	dd42      	ble.n	800b2f8 <__ssvfiscanf_r+0x26c>
 800b272:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b274:	0659      	lsls	r1, r3, #25
 800b276:	d404      	bmi.n	800b282 <__ssvfiscanf_r+0x1f6>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	781a      	ldrb	r2, [r3, #0]
 800b27c:	5cba      	ldrb	r2, [r7, r2]
 800b27e:	0712      	lsls	r2, r2, #28
 800b280:	d441      	bmi.n	800b306 <__ssvfiscanf_r+0x27a>
 800b282:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b284:	2b02      	cmp	r3, #2
 800b286:	dc50      	bgt.n	800b32a <__ssvfiscanf_r+0x29e>
 800b288:	466b      	mov	r3, sp
 800b28a:	4622      	mov	r2, r4
 800b28c:	4630      	mov	r0, r6
 800b28e:	a941      	add	r1, sp, #260	; 0x104
 800b290:	f000 f876 	bl	800b380 <_scanf_chars>
 800b294:	2801      	cmp	r0, #1
 800b296:	d06e      	beq.n	800b376 <__ssvfiscanf_r+0x2ea>
 800b298:	2802      	cmp	r0, #2
 800b29a:	f47f af1d 	bne.w	800b0d8 <__ssvfiscanf_r+0x4c>
 800b29e:	e7cf      	b.n	800b240 <__ssvfiscanf_r+0x1b4>
 800b2a0:	220a      	movs	r2, #10
 800b2a2:	e7dd      	b.n	800b260 <__ssvfiscanf_r+0x1d4>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9342      	str	r3, [sp, #264]	; 0x108
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e7de      	b.n	800b26a <__ssvfiscanf_r+0x1de>
 800b2ac:	2308      	movs	r3, #8
 800b2ae:	9342      	str	r3, [sp, #264]	; 0x108
 800b2b0:	2304      	movs	r3, #4
 800b2b2:	e7da      	b.n	800b26a <__ssvfiscanf_r+0x1de>
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	f000 f9b4 	bl	800b624 <__sccl>
 800b2bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2be:	4605      	mov	r5, r0
 800b2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c4:	9341      	str	r3, [sp, #260]	; 0x104
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e7cf      	b.n	800b26a <__ssvfiscanf_r+0x1de>
 800b2ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2d0:	9341      	str	r3, [sp, #260]	; 0x104
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e7c9      	b.n	800b26a <__ssvfiscanf_r+0x1de>
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	e7c7      	b.n	800b26a <__ssvfiscanf_r+0x1de>
 800b2da:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b2dc:	06c3      	lsls	r3, r0, #27
 800b2de:	f53f aefb 	bmi.w	800b0d8 <__ssvfiscanf_r+0x4c>
 800b2e2:	9b00      	ldr	r3, [sp, #0]
 800b2e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2e6:	1d19      	adds	r1, r3, #4
 800b2e8:	9100      	str	r1, [sp, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f010 0f01 	tst.w	r0, #1
 800b2f0:	bf14      	ite	ne
 800b2f2:	801a      	strhne	r2, [r3, #0]
 800b2f4:	601a      	streq	r2, [r3, #0]
 800b2f6:	e6ef      	b.n	800b0d8 <__ssvfiscanf_r+0x4c>
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2fe:	4798      	blx	r3
 800b300:	2800      	cmp	r0, #0
 800b302:	d0b6      	beq.n	800b272 <__ssvfiscanf_r+0x1e6>
 800b304:	e79c      	b.n	800b240 <__ssvfiscanf_r+0x1b4>
 800b306:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b308:	3201      	adds	r2, #1
 800b30a:	9245      	str	r2, [sp, #276]	; 0x114
 800b30c:	6862      	ldr	r2, [r4, #4]
 800b30e:	3a01      	subs	r2, #1
 800b310:	2a00      	cmp	r2, #0
 800b312:	6062      	str	r2, [r4, #4]
 800b314:	dd02      	ble.n	800b31c <__ssvfiscanf_r+0x290>
 800b316:	3301      	adds	r3, #1
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	e7ad      	b.n	800b278 <__ssvfiscanf_r+0x1ec>
 800b31c:	4621      	mov	r1, r4
 800b31e:	4630      	mov	r0, r6
 800b320:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b322:	4798      	blx	r3
 800b324:	2800      	cmp	r0, #0
 800b326:	d0a7      	beq.n	800b278 <__ssvfiscanf_r+0x1ec>
 800b328:	e78a      	b.n	800b240 <__ssvfiscanf_r+0x1b4>
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	dc0e      	bgt.n	800b34c <__ssvfiscanf_r+0x2c0>
 800b32e:	466b      	mov	r3, sp
 800b330:	4622      	mov	r2, r4
 800b332:	4630      	mov	r0, r6
 800b334:	a941      	add	r1, sp, #260	; 0x104
 800b336:	f000 f87d 	bl	800b434 <_scanf_i>
 800b33a:	e7ab      	b.n	800b294 <__ssvfiscanf_r+0x208>
 800b33c:	0800afd9 	.word	0x0800afd9
 800b340:	0800b053 	.word	0x0800b053
 800b344:	08076fb8 	.word	0x08076fb8
 800b348:	08076f98 	.word	0x08076f98
 800b34c:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <__ssvfiscanf_r+0x2f0>)
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f43f aec2 	beq.w	800b0d8 <__ssvfiscanf_r+0x4c>
 800b354:	466b      	mov	r3, sp
 800b356:	4622      	mov	r2, r4
 800b358:	4630      	mov	r0, r6
 800b35a:	a941      	add	r1, sp, #260	; 0x104
 800b35c:	f3af 8000 	nop.w
 800b360:	e798      	b.n	800b294 <__ssvfiscanf_r+0x208>
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b368:	bf18      	it	ne
 800b36a:	f04f 30ff 	movne.w	r0, #4294967295
 800b36e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b376:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b378:	e7f9      	b.n	800b36e <__ssvfiscanf_r+0x2e2>
 800b37a:	bf00      	nop
 800b37c:	00000000 	.word	0x00000000

0800b380 <_scanf_chars>:
 800b380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b384:	4615      	mov	r5, r2
 800b386:	688a      	ldr	r2, [r1, #8]
 800b388:	4680      	mov	r8, r0
 800b38a:	460c      	mov	r4, r1
 800b38c:	b932      	cbnz	r2, 800b39c <_scanf_chars+0x1c>
 800b38e:	698a      	ldr	r2, [r1, #24]
 800b390:	2a00      	cmp	r2, #0
 800b392:	bf0c      	ite	eq
 800b394:	2201      	moveq	r2, #1
 800b396:	f04f 32ff 	movne.w	r2, #4294967295
 800b39a:	608a      	str	r2, [r1, #8]
 800b39c:	2700      	movs	r7, #0
 800b39e:	6822      	ldr	r2, [r4, #0]
 800b3a0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b430 <_scanf_chars+0xb0>
 800b3a4:	06d1      	lsls	r1, r2, #27
 800b3a6:	bf5f      	itttt	pl
 800b3a8:	681a      	ldrpl	r2, [r3, #0]
 800b3aa:	1d11      	addpl	r1, r2, #4
 800b3ac:	6019      	strpl	r1, [r3, #0]
 800b3ae:	6816      	ldrpl	r6, [r2, #0]
 800b3b0:	69a0      	ldr	r0, [r4, #24]
 800b3b2:	b188      	cbz	r0, 800b3d8 <_scanf_chars+0x58>
 800b3b4:	2801      	cmp	r0, #1
 800b3b6:	d107      	bne.n	800b3c8 <_scanf_chars+0x48>
 800b3b8:	682b      	ldr	r3, [r5, #0]
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	6963      	ldr	r3, [r4, #20]
 800b3be:	5c9b      	ldrb	r3, [r3, r2]
 800b3c0:	b953      	cbnz	r3, 800b3d8 <_scanf_chars+0x58>
 800b3c2:	2f00      	cmp	r7, #0
 800b3c4:	d031      	beq.n	800b42a <_scanf_chars+0xaa>
 800b3c6:	e022      	b.n	800b40e <_scanf_chars+0x8e>
 800b3c8:	2802      	cmp	r0, #2
 800b3ca:	d120      	bne.n	800b40e <_scanf_chars+0x8e>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b3d4:	071b      	lsls	r3, r3, #28
 800b3d6:	d41a      	bmi.n	800b40e <_scanf_chars+0x8e>
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	3701      	adds	r7, #1
 800b3dc:	06da      	lsls	r2, r3, #27
 800b3de:	bf5e      	ittt	pl
 800b3e0:	682b      	ldrpl	r3, [r5, #0]
 800b3e2:	781b      	ldrbpl	r3, [r3, #0]
 800b3e4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b3e8:	682a      	ldr	r2, [r5, #0]
 800b3ea:	686b      	ldr	r3, [r5, #4]
 800b3ec:	3201      	adds	r2, #1
 800b3ee:	602a      	str	r2, [r5, #0]
 800b3f0:	68a2      	ldr	r2, [r4, #8]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	3a01      	subs	r2, #1
 800b3f6:	606b      	str	r3, [r5, #4]
 800b3f8:	60a2      	str	r2, [r4, #8]
 800b3fa:	b142      	cbz	r2, 800b40e <_scanf_chars+0x8e>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dcd7      	bgt.n	800b3b0 <_scanf_chars+0x30>
 800b400:	4629      	mov	r1, r5
 800b402:	4640      	mov	r0, r8
 800b404:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b408:	4798      	blx	r3
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d0d0      	beq.n	800b3b0 <_scanf_chars+0x30>
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	f013 0310 	ands.w	r3, r3, #16
 800b414:	d105      	bne.n	800b422 <_scanf_chars+0xa2>
 800b416:	68e2      	ldr	r2, [r4, #12]
 800b418:	3201      	adds	r2, #1
 800b41a:	60e2      	str	r2, [r4, #12]
 800b41c:	69a2      	ldr	r2, [r4, #24]
 800b41e:	b102      	cbz	r2, 800b422 <_scanf_chars+0xa2>
 800b420:	7033      	strb	r3, [r6, #0]
 800b422:	2000      	movs	r0, #0
 800b424:	6923      	ldr	r3, [r4, #16]
 800b426:	443b      	add	r3, r7
 800b428:	6123      	str	r3, [r4, #16]
 800b42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b42e:	bf00      	nop
 800b430:	08076fb8 	.word	0x08076fb8

0800b434 <_scanf_i>:
 800b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	460c      	mov	r4, r1
 800b43a:	4698      	mov	r8, r3
 800b43c:	4b75      	ldr	r3, [pc, #468]	; (800b614 <_scanf_i+0x1e0>)
 800b43e:	b087      	sub	sp, #28
 800b440:	4682      	mov	sl, r0
 800b442:	4616      	mov	r6, r2
 800b444:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b448:	ab03      	add	r3, sp, #12
 800b44a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b44e:	4b72      	ldr	r3, [pc, #456]	; (800b618 <_scanf_i+0x1e4>)
 800b450:	69a1      	ldr	r1, [r4, #24]
 800b452:	4a72      	ldr	r2, [pc, #456]	; (800b61c <_scanf_i+0x1e8>)
 800b454:	4627      	mov	r7, r4
 800b456:	2903      	cmp	r1, #3
 800b458:	bf18      	it	ne
 800b45a:	461a      	movne	r2, r3
 800b45c:	68a3      	ldr	r3, [r4, #8]
 800b45e:	9201      	str	r2, [sp, #4]
 800b460:	1e5a      	subs	r2, r3, #1
 800b462:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b466:	bf81      	itttt	hi
 800b468:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b46c:	eb03 0905 	addhi.w	r9, r3, r5
 800b470:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b474:	60a3      	strhi	r3, [r4, #8]
 800b476:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b47a:	bf98      	it	ls
 800b47c:	f04f 0900 	movls.w	r9, #0
 800b480:	463d      	mov	r5, r7
 800b482:	f04f 0b00 	mov.w	fp, #0
 800b486:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	6831      	ldr	r1, [r6, #0]
 800b48e:	ab03      	add	r3, sp, #12
 800b490:	2202      	movs	r2, #2
 800b492:	7809      	ldrb	r1, [r1, #0]
 800b494:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b498:	f000 fa28 	bl	800b8ec <memchr>
 800b49c:	b328      	cbz	r0, 800b4ea <_scanf_i+0xb6>
 800b49e:	f1bb 0f01 	cmp.w	fp, #1
 800b4a2:	d159      	bne.n	800b558 <_scanf_i+0x124>
 800b4a4:	6862      	ldr	r2, [r4, #4]
 800b4a6:	b92a      	cbnz	r2, 800b4b4 <_scanf_i+0x80>
 800b4a8:	2308      	movs	r3, #8
 800b4aa:	6822      	ldr	r2, [r4, #0]
 800b4ac:	6063      	str	r3, [r4, #4]
 800b4ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4b2:	6022      	str	r2, [r4, #0]
 800b4b4:	6822      	ldr	r2, [r4, #0]
 800b4b6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b4ba:	6022      	str	r2, [r4, #0]
 800b4bc:	68a2      	ldr	r2, [r4, #8]
 800b4be:	1e51      	subs	r1, r2, #1
 800b4c0:	60a1      	str	r1, [r4, #8]
 800b4c2:	b192      	cbz	r2, 800b4ea <_scanf_i+0xb6>
 800b4c4:	6832      	ldr	r2, [r6, #0]
 800b4c6:	1c51      	adds	r1, r2, #1
 800b4c8:	6031      	str	r1, [r6, #0]
 800b4ca:	7812      	ldrb	r2, [r2, #0]
 800b4cc:	f805 2b01 	strb.w	r2, [r5], #1
 800b4d0:	6872      	ldr	r2, [r6, #4]
 800b4d2:	3a01      	subs	r2, #1
 800b4d4:	2a00      	cmp	r2, #0
 800b4d6:	6072      	str	r2, [r6, #4]
 800b4d8:	dc07      	bgt.n	800b4ea <_scanf_i+0xb6>
 800b4da:	4631      	mov	r1, r6
 800b4dc:	4650      	mov	r0, sl
 800b4de:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b4e2:	4790      	blx	r2
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	f040 8085 	bne.w	800b5f4 <_scanf_i+0x1c0>
 800b4ea:	f10b 0b01 	add.w	fp, fp, #1
 800b4ee:	f1bb 0f03 	cmp.w	fp, #3
 800b4f2:	d1cb      	bne.n	800b48c <_scanf_i+0x58>
 800b4f4:	6863      	ldr	r3, [r4, #4]
 800b4f6:	b90b      	cbnz	r3, 800b4fc <_scanf_i+0xc8>
 800b4f8:	230a      	movs	r3, #10
 800b4fa:	6063      	str	r3, [r4, #4]
 800b4fc:	6863      	ldr	r3, [r4, #4]
 800b4fe:	4948      	ldr	r1, [pc, #288]	; (800b620 <_scanf_i+0x1ec>)
 800b500:	6960      	ldr	r0, [r4, #20]
 800b502:	1ac9      	subs	r1, r1, r3
 800b504:	f000 f88e 	bl	800b624 <__sccl>
 800b508:	f04f 0b00 	mov.w	fp, #0
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	6822      	ldr	r2, [r4, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d03d      	beq.n	800b590 <_scanf_i+0x15c>
 800b514:	6831      	ldr	r1, [r6, #0]
 800b516:	6960      	ldr	r0, [r4, #20]
 800b518:	f891 c000 	ldrb.w	ip, [r1]
 800b51c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b520:	2800      	cmp	r0, #0
 800b522:	d035      	beq.n	800b590 <_scanf_i+0x15c>
 800b524:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b528:	d124      	bne.n	800b574 <_scanf_i+0x140>
 800b52a:	0510      	lsls	r0, r2, #20
 800b52c:	d522      	bpl.n	800b574 <_scanf_i+0x140>
 800b52e:	f10b 0b01 	add.w	fp, fp, #1
 800b532:	f1b9 0f00 	cmp.w	r9, #0
 800b536:	d003      	beq.n	800b540 <_scanf_i+0x10c>
 800b538:	3301      	adds	r3, #1
 800b53a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b53e:	60a3      	str	r3, [r4, #8]
 800b540:	6873      	ldr	r3, [r6, #4]
 800b542:	3b01      	subs	r3, #1
 800b544:	2b00      	cmp	r3, #0
 800b546:	6073      	str	r3, [r6, #4]
 800b548:	dd1b      	ble.n	800b582 <_scanf_i+0x14e>
 800b54a:	6833      	ldr	r3, [r6, #0]
 800b54c:	3301      	adds	r3, #1
 800b54e:	6033      	str	r3, [r6, #0]
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	3b01      	subs	r3, #1
 800b554:	60a3      	str	r3, [r4, #8]
 800b556:	e7d9      	b.n	800b50c <_scanf_i+0xd8>
 800b558:	f1bb 0f02 	cmp.w	fp, #2
 800b55c:	d1ae      	bne.n	800b4bc <_scanf_i+0x88>
 800b55e:	6822      	ldr	r2, [r4, #0]
 800b560:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b564:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b568:	d1bf      	bne.n	800b4ea <_scanf_i+0xb6>
 800b56a:	2310      	movs	r3, #16
 800b56c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b570:	6063      	str	r3, [r4, #4]
 800b572:	e7a2      	b.n	800b4ba <_scanf_i+0x86>
 800b574:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b578:	6022      	str	r2, [r4, #0]
 800b57a:	780b      	ldrb	r3, [r1, #0]
 800b57c:	f805 3b01 	strb.w	r3, [r5], #1
 800b580:	e7de      	b.n	800b540 <_scanf_i+0x10c>
 800b582:	4631      	mov	r1, r6
 800b584:	4650      	mov	r0, sl
 800b586:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b58a:	4798      	blx	r3
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d0df      	beq.n	800b550 <_scanf_i+0x11c>
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	05db      	lsls	r3, r3, #23
 800b594:	d50d      	bpl.n	800b5b2 <_scanf_i+0x17e>
 800b596:	42bd      	cmp	r5, r7
 800b598:	d909      	bls.n	800b5ae <_scanf_i+0x17a>
 800b59a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b59e:	4632      	mov	r2, r6
 800b5a0:	4650      	mov	r0, sl
 800b5a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5a6:	f105 39ff 	add.w	r9, r5, #4294967295
 800b5aa:	4798      	blx	r3
 800b5ac:	464d      	mov	r5, r9
 800b5ae:	42bd      	cmp	r5, r7
 800b5b0:	d02d      	beq.n	800b60e <_scanf_i+0x1da>
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	f012 0210 	ands.w	r2, r2, #16
 800b5b8:	d113      	bne.n	800b5e2 <_scanf_i+0x1ae>
 800b5ba:	702a      	strb	r2, [r5, #0]
 800b5bc:	4639      	mov	r1, r7
 800b5be:	6863      	ldr	r3, [r4, #4]
 800b5c0:	4650      	mov	r0, sl
 800b5c2:	9e01      	ldr	r6, [sp, #4]
 800b5c4:	47b0      	blx	r6
 800b5c6:	6821      	ldr	r1, [r4, #0]
 800b5c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b5cc:	f011 0f20 	tst.w	r1, #32
 800b5d0:	d013      	beq.n	800b5fa <_scanf_i+0x1c6>
 800b5d2:	1d1a      	adds	r2, r3, #4
 800b5d4:	f8c8 2000 	str.w	r2, [r8]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6018      	str	r0, [r3, #0]
 800b5dc:	68e3      	ldr	r3, [r4, #12]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	60e3      	str	r3, [r4, #12]
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	1bed      	subs	r5, r5, r7
 800b5e6:	44ab      	add	fp, r5
 800b5e8:	6925      	ldr	r5, [r4, #16]
 800b5ea:	445d      	add	r5, fp
 800b5ec:	6125      	str	r5, [r4, #16]
 800b5ee:	b007      	add	sp, #28
 800b5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f4:	f04f 0b00 	mov.w	fp, #0
 800b5f8:	e7ca      	b.n	800b590 <_scanf_i+0x15c>
 800b5fa:	1d1a      	adds	r2, r3, #4
 800b5fc:	f8c8 2000 	str.w	r2, [r8]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f011 0f01 	tst.w	r1, #1
 800b606:	bf14      	ite	ne
 800b608:	8018      	strhne	r0, [r3, #0]
 800b60a:	6018      	streq	r0, [r3, #0]
 800b60c:	e7e6      	b.n	800b5dc <_scanf_i+0x1a8>
 800b60e:	2001      	movs	r0, #1
 800b610:	e7ed      	b.n	800b5ee <_scanf_i+0x1ba>
 800b612:	bf00      	nop
 800b614:	0800d030 	.word	0x0800d030
 800b618:	0800b875 	.word	0x0800b875
 800b61c:	0800b78d 	.word	0x0800b78d
 800b620:	08076fb5 	.word	0x08076fb5

0800b624 <__sccl>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	780b      	ldrb	r3, [r1, #0]
 800b628:	4604      	mov	r4, r0
 800b62a:	2b5e      	cmp	r3, #94	; 0x5e
 800b62c:	bf13      	iteet	ne
 800b62e:	2200      	movne	r2, #0
 800b630:	2201      	moveq	r2, #1
 800b632:	784b      	ldrbeq	r3, [r1, #1]
 800b634:	1c48      	addne	r0, r1, #1
 800b636:	bf08      	it	eq
 800b638:	1c88      	addeq	r0, r1, #2
 800b63a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b63e:	1e61      	subs	r1, r4, #1
 800b640:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b644:	42a9      	cmp	r1, r5
 800b646:	d1fb      	bne.n	800b640 <__sccl+0x1c>
 800b648:	b90b      	cbnz	r3, 800b64e <__sccl+0x2a>
 800b64a:	3801      	subs	r0, #1
 800b64c:	bd70      	pop	{r4, r5, r6, pc}
 800b64e:	f082 0201 	eor.w	r2, r2, #1
 800b652:	4605      	mov	r5, r0
 800b654:	54e2      	strb	r2, [r4, r3]
 800b656:	4628      	mov	r0, r5
 800b658:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b65c:	292d      	cmp	r1, #45	; 0x2d
 800b65e:	d006      	beq.n	800b66e <__sccl+0x4a>
 800b660:	295d      	cmp	r1, #93	; 0x5d
 800b662:	d0f3      	beq.n	800b64c <__sccl+0x28>
 800b664:	b909      	cbnz	r1, 800b66a <__sccl+0x46>
 800b666:	4628      	mov	r0, r5
 800b668:	e7f0      	b.n	800b64c <__sccl+0x28>
 800b66a:	460b      	mov	r3, r1
 800b66c:	e7f1      	b.n	800b652 <__sccl+0x2e>
 800b66e:	786e      	ldrb	r6, [r5, #1]
 800b670:	2e5d      	cmp	r6, #93	; 0x5d
 800b672:	d0fa      	beq.n	800b66a <__sccl+0x46>
 800b674:	42b3      	cmp	r3, r6
 800b676:	dcf8      	bgt.n	800b66a <__sccl+0x46>
 800b678:	4619      	mov	r1, r3
 800b67a:	3502      	adds	r5, #2
 800b67c:	3101      	adds	r1, #1
 800b67e:	428e      	cmp	r6, r1
 800b680:	5462      	strb	r2, [r4, r1]
 800b682:	dcfb      	bgt.n	800b67c <__sccl+0x58>
 800b684:	1af1      	subs	r1, r6, r3
 800b686:	3901      	subs	r1, #1
 800b688:	42b3      	cmp	r3, r6
 800b68a:	bfa8      	it	ge
 800b68c:	2100      	movge	r1, #0
 800b68e:	1c58      	adds	r0, r3, #1
 800b690:	1843      	adds	r3, r0, r1
 800b692:	e7e0      	b.n	800b656 <__sccl+0x32>

0800b694 <_strtol_l.constprop.0>:
 800b694:	2b01      	cmp	r3, #1
 800b696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b69a:	4680      	mov	r8, r0
 800b69c:	d001      	beq.n	800b6a2 <_strtol_l.constprop.0+0xe>
 800b69e:	2b24      	cmp	r3, #36	; 0x24
 800b6a0:	d906      	bls.n	800b6b0 <_strtol_l.constprop.0+0x1c>
 800b6a2:	f7ff fc3b 	bl	800af1c <__errno>
 800b6a6:	2316      	movs	r3, #22
 800b6a8:	6003      	str	r3, [r0, #0]
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b0:	460d      	mov	r5, r1
 800b6b2:	4f35      	ldr	r7, [pc, #212]	; (800b788 <_strtol_l.constprop.0+0xf4>)
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6ba:	5de6      	ldrb	r6, [r4, r7]
 800b6bc:	f016 0608 	ands.w	r6, r6, #8
 800b6c0:	d1f8      	bne.n	800b6b4 <_strtol_l.constprop.0+0x20>
 800b6c2:	2c2d      	cmp	r4, #45	; 0x2d
 800b6c4:	d12f      	bne.n	800b726 <_strtol_l.constprop.0+0x92>
 800b6c6:	2601      	movs	r6, #1
 800b6c8:	782c      	ldrb	r4, [r5, #0]
 800b6ca:	1c85      	adds	r5, r0, #2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d057      	beq.n	800b780 <_strtol_l.constprop.0+0xec>
 800b6d0:	2b10      	cmp	r3, #16
 800b6d2:	d109      	bne.n	800b6e8 <_strtol_l.constprop.0+0x54>
 800b6d4:	2c30      	cmp	r4, #48	; 0x30
 800b6d6:	d107      	bne.n	800b6e8 <_strtol_l.constprop.0+0x54>
 800b6d8:	7828      	ldrb	r0, [r5, #0]
 800b6da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b6de:	2858      	cmp	r0, #88	; 0x58
 800b6e0:	d149      	bne.n	800b776 <_strtol_l.constprop.0+0xe2>
 800b6e2:	2310      	movs	r3, #16
 800b6e4:	786c      	ldrb	r4, [r5, #1]
 800b6e6:	3502      	adds	r5, #2
 800b6e8:	2700      	movs	r7, #0
 800b6ea:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b6ee:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b6f2:	fbbe f9f3 	udiv	r9, lr, r3
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	fb03 ea19 	mls	sl, r3, r9, lr
 800b6fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b700:	f1bc 0f09 	cmp.w	ip, #9
 800b704:	d814      	bhi.n	800b730 <_strtol_l.constprop.0+0x9c>
 800b706:	4664      	mov	r4, ip
 800b708:	42a3      	cmp	r3, r4
 800b70a:	dd22      	ble.n	800b752 <_strtol_l.constprop.0+0xbe>
 800b70c:	2f00      	cmp	r7, #0
 800b70e:	db1d      	blt.n	800b74c <_strtol_l.constprop.0+0xb8>
 800b710:	4581      	cmp	r9, r0
 800b712:	d31b      	bcc.n	800b74c <_strtol_l.constprop.0+0xb8>
 800b714:	d101      	bne.n	800b71a <_strtol_l.constprop.0+0x86>
 800b716:	45a2      	cmp	sl, r4
 800b718:	db18      	blt.n	800b74c <_strtol_l.constprop.0+0xb8>
 800b71a:	2701      	movs	r7, #1
 800b71c:	fb00 4003 	mla	r0, r0, r3, r4
 800b720:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b724:	e7ea      	b.n	800b6fc <_strtol_l.constprop.0+0x68>
 800b726:	2c2b      	cmp	r4, #43	; 0x2b
 800b728:	bf04      	itt	eq
 800b72a:	782c      	ldrbeq	r4, [r5, #0]
 800b72c:	1c85      	addeq	r5, r0, #2
 800b72e:	e7cd      	b.n	800b6cc <_strtol_l.constprop.0+0x38>
 800b730:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b734:	f1bc 0f19 	cmp.w	ip, #25
 800b738:	d801      	bhi.n	800b73e <_strtol_l.constprop.0+0xaa>
 800b73a:	3c37      	subs	r4, #55	; 0x37
 800b73c:	e7e4      	b.n	800b708 <_strtol_l.constprop.0+0x74>
 800b73e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b742:	f1bc 0f19 	cmp.w	ip, #25
 800b746:	d804      	bhi.n	800b752 <_strtol_l.constprop.0+0xbe>
 800b748:	3c57      	subs	r4, #87	; 0x57
 800b74a:	e7dd      	b.n	800b708 <_strtol_l.constprop.0+0x74>
 800b74c:	f04f 37ff 	mov.w	r7, #4294967295
 800b750:	e7e6      	b.n	800b720 <_strtol_l.constprop.0+0x8c>
 800b752:	2f00      	cmp	r7, #0
 800b754:	da07      	bge.n	800b766 <_strtol_l.constprop.0+0xd2>
 800b756:	2322      	movs	r3, #34	; 0x22
 800b758:	4670      	mov	r0, lr
 800b75a:	f8c8 3000 	str.w	r3, [r8]
 800b75e:	2a00      	cmp	r2, #0
 800b760:	d0a4      	beq.n	800b6ac <_strtol_l.constprop.0+0x18>
 800b762:	1e69      	subs	r1, r5, #1
 800b764:	e005      	b.n	800b772 <_strtol_l.constprop.0+0xde>
 800b766:	b106      	cbz	r6, 800b76a <_strtol_l.constprop.0+0xd6>
 800b768:	4240      	negs	r0, r0
 800b76a:	2a00      	cmp	r2, #0
 800b76c:	d09e      	beq.n	800b6ac <_strtol_l.constprop.0+0x18>
 800b76e:	2f00      	cmp	r7, #0
 800b770:	d1f7      	bne.n	800b762 <_strtol_l.constprop.0+0xce>
 800b772:	6011      	str	r1, [r2, #0]
 800b774:	e79a      	b.n	800b6ac <_strtol_l.constprop.0+0x18>
 800b776:	2430      	movs	r4, #48	; 0x30
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1b5      	bne.n	800b6e8 <_strtol_l.constprop.0+0x54>
 800b77c:	2308      	movs	r3, #8
 800b77e:	e7b3      	b.n	800b6e8 <_strtol_l.constprop.0+0x54>
 800b780:	2c30      	cmp	r4, #48	; 0x30
 800b782:	d0a9      	beq.n	800b6d8 <_strtol_l.constprop.0+0x44>
 800b784:	230a      	movs	r3, #10
 800b786:	e7af      	b.n	800b6e8 <_strtol_l.constprop.0+0x54>
 800b788:	08076fb8 	.word	0x08076fb8

0800b78c <_strtol_r>:
 800b78c:	f7ff bf82 	b.w	800b694 <_strtol_l.constprop.0>

0800b790 <_strtoul_l.constprop.0>:
 800b790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b794:	4686      	mov	lr, r0
 800b796:	460d      	mov	r5, r1
 800b798:	4f35      	ldr	r7, [pc, #212]	; (800b870 <_strtoul_l.constprop.0+0xe0>)
 800b79a:	4628      	mov	r0, r5
 800b79c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7a0:	5de6      	ldrb	r6, [r4, r7]
 800b7a2:	f016 0608 	ands.w	r6, r6, #8
 800b7a6:	d1f8      	bne.n	800b79a <_strtoul_l.constprop.0+0xa>
 800b7a8:	2c2d      	cmp	r4, #45	; 0x2d
 800b7aa:	d12f      	bne.n	800b80c <_strtoul_l.constprop.0+0x7c>
 800b7ac:	2601      	movs	r6, #1
 800b7ae:	782c      	ldrb	r4, [r5, #0]
 800b7b0:	1c85      	adds	r5, r0, #2
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d057      	beq.n	800b866 <_strtoul_l.constprop.0+0xd6>
 800b7b6:	2b10      	cmp	r3, #16
 800b7b8:	d109      	bne.n	800b7ce <_strtoul_l.constprop.0+0x3e>
 800b7ba:	2c30      	cmp	r4, #48	; 0x30
 800b7bc:	d107      	bne.n	800b7ce <_strtoul_l.constprop.0+0x3e>
 800b7be:	7828      	ldrb	r0, [r5, #0]
 800b7c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b7c4:	2858      	cmp	r0, #88	; 0x58
 800b7c6:	d149      	bne.n	800b85c <_strtoul_l.constprop.0+0xcc>
 800b7c8:	2310      	movs	r3, #16
 800b7ca:	786c      	ldrb	r4, [r5, #1]
 800b7cc:	3502      	adds	r5, #2
 800b7ce:	f04f 38ff 	mov.w	r8, #4294967295
 800b7d2:	fbb8 f8f3 	udiv	r8, r8, r3
 800b7d6:	2700      	movs	r7, #0
 800b7d8:	fb03 f908 	mul.w	r9, r3, r8
 800b7dc:	4638      	mov	r0, r7
 800b7de:	ea6f 0909 	mvn.w	r9, r9
 800b7e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b7e6:	f1bc 0f09 	cmp.w	ip, #9
 800b7ea:	d814      	bhi.n	800b816 <_strtoul_l.constprop.0+0x86>
 800b7ec:	4664      	mov	r4, ip
 800b7ee:	42a3      	cmp	r3, r4
 800b7f0:	dd22      	ble.n	800b838 <_strtoul_l.constprop.0+0xa8>
 800b7f2:	2f00      	cmp	r7, #0
 800b7f4:	db1d      	blt.n	800b832 <_strtoul_l.constprop.0+0xa2>
 800b7f6:	4580      	cmp	r8, r0
 800b7f8:	d31b      	bcc.n	800b832 <_strtoul_l.constprop.0+0xa2>
 800b7fa:	d101      	bne.n	800b800 <_strtoul_l.constprop.0+0x70>
 800b7fc:	45a1      	cmp	r9, r4
 800b7fe:	db18      	blt.n	800b832 <_strtoul_l.constprop.0+0xa2>
 800b800:	2701      	movs	r7, #1
 800b802:	fb00 4003 	mla	r0, r0, r3, r4
 800b806:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b80a:	e7ea      	b.n	800b7e2 <_strtoul_l.constprop.0+0x52>
 800b80c:	2c2b      	cmp	r4, #43	; 0x2b
 800b80e:	bf04      	itt	eq
 800b810:	782c      	ldrbeq	r4, [r5, #0]
 800b812:	1c85      	addeq	r5, r0, #2
 800b814:	e7cd      	b.n	800b7b2 <_strtoul_l.constprop.0+0x22>
 800b816:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b81a:	f1bc 0f19 	cmp.w	ip, #25
 800b81e:	d801      	bhi.n	800b824 <_strtoul_l.constprop.0+0x94>
 800b820:	3c37      	subs	r4, #55	; 0x37
 800b822:	e7e4      	b.n	800b7ee <_strtoul_l.constprop.0+0x5e>
 800b824:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b828:	f1bc 0f19 	cmp.w	ip, #25
 800b82c:	d804      	bhi.n	800b838 <_strtoul_l.constprop.0+0xa8>
 800b82e:	3c57      	subs	r4, #87	; 0x57
 800b830:	e7dd      	b.n	800b7ee <_strtoul_l.constprop.0+0x5e>
 800b832:	f04f 37ff 	mov.w	r7, #4294967295
 800b836:	e7e6      	b.n	800b806 <_strtoul_l.constprop.0+0x76>
 800b838:	2f00      	cmp	r7, #0
 800b83a:	da07      	bge.n	800b84c <_strtoul_l.constprop.0+0xbc>
 800b83c:	2322      	movs	r3, #34	; 0x22
 800b83e:	f04f 30ff 	mov.w	r0, #4294967295
 800b842:	f8ce 3000 	str.w	r3, [lr]
 800b846:	b932      	cbnz	r2, 800b856 <_strtoul_l.constprop.0+0xc6>
 800b848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b84c:	b106      	cbz	r6, 800b850 <_strtoul_l.constprop.0+0xc0>
 800b84e:	4240      	negs	r0, r0
 800b850:	2a00      	cmp	r2, #0
 800b852:	d0f9      	beq.n	800b848 <_strtoul_l.constprop.0+0xb8>
 800b854:	b107      	cbz	r7, 800b858 <_strtoul_l.constprop.0+0xc8>
 800b856:	1e69      	subs	r1, r5, #1
 800b858:	6011      	str	r1, [r2, #0]
 800b85a:	e7f5      	b.n	800b848 <_strtoul_l.constprop.0+0xb8>
 800b85c:	2430      	movs	r4, #48	; 0x30
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1b5      	bne.n	800b7ce <_strtoul_l.constprop.0+0x3e>
 800b862:	2308      	movs	r3, #8
 800b864:	e7b3      	b.n	800b7ce <_strtoul_l.constprop.0+0x3e>
 800b866:	2c30      	cmp	r4, #48	; 0x30
 800b868:	d0a9      	beq.n	800b7be <_strtoul_l.constprop.0+0x2e>
 800b86a:	230a      	movs	r3, #10
 800b86c:	e7af      	b.n	800b7ce <_strtoul_l.constprop.0+0x3e>
 800b86e:	bf00      	nop
 800b870:	08076fb8 	.word	0x08076fb8

0800b874 <_strtoul_r>:
 800b874:	f7ff bf8c 	b.w	800b790 <_strtoul_l.constprop.0>

0800b878 <__submore>:
 800b878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87c:	460c      	mov	r4, r1
 800b87e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b884:	4299      	cmp	r1, r3
 800b886:	d11b      	bne.n	800b8c0 <__submore+0x48>
 800b888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b88c:	f000 f8b2 	bl	800b9f4 <_malloc_r>
 800b890:	b918      	cbnz	r0, 800b89a <__submore+0x22>
 800b892:	f04f 30ff 	mov.w	r0, #4294967295
 800b896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b89e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b8a4:	6360      	str	r0, [r4, #52]	; 0x34
 800b8a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b8aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b8ae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b8b2:	7043      	strb	r3, [r0, #1]
 800b8b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b8b8:	7003      	strb	r3, [r0, #0]
 800b8ba:	6020      	str	r0, [r4, #0]
 800b8bc:	2000      	movs	r0, #0
 800b8be:	e7ea      	b.n	800b896 <__submore+0x1e>
 800b8c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b8c2:	0077      	lsls	r7, r6, #1
 800b8c4:	463a      	mov	r2, r7
 800b8c6:	f000 f909 	bl	800badc <_realloc_r>
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d0e0      	beq.n	800b892 <__submore+0x1a>
 800b8d0:	eb00 0806 	add.w	r8, r0, r6
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	4632      	mov	r2, r6
 800b8d8:	4640      	mov	r0, r8
 800b8da:	f000 f815 	bl	800b908 <memcpy>
 800b8de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b8e2:	f8c4 8000 	str.w	r8, [r4]
 800b8e6:	e7e9      	b.n	800b8bc <__submore+0x44>

0800b8e8 <__retarget_lock_acquire_recursive>:
 800b8e8:	4770      	bx	lr

0800b8ea <__retarget_lock_release_recursive>:
 800b8ea:	4770      	bx	lr

0800b8ec <memchr>:
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	b510      	push	{r4, lr}
 800b8f0:	b2c9      	uxtb	r1, r1
 800b8f2:	4402      	add	r2, r0
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	d101      	bne.n	800b8fe <memchr+0x12>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	e003      	b.n	800b906 <memchr+0x1a>
 800b8fe:	7804      	ldrb	r4, [r0, #0]
 800b900:	3301      	adds	r3, #1
 800b902:	428c      	cmp	r4, r1
 800b904:	d1f6      	bne.n	800b8f4 <memchr+0x8>
 800b906:	bd10      	pop	{r4, pc}

0800b908 <memcpy>:
 800b908:	440a      	add	r2, r1
 800b90a:	4291      	cmp	r1, r2
 800b90c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b910:	d100      	bne.n	800b914 <memcpy+0xc>
 800b912:	4770      	bx	lr
 800b914:	b510      	push	{r4, lr}
 800b916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b91a:	4291      	cmp	r1, r2
 800b91c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b920:	d1f9      	bne.n	800b916 <memcpy+0xe>
 800b922:	bd10      	pop	{r4, pc}

0800b924 <_free_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4605      	mov	r5, r0
 800b928:	2900      	cmp	r1, #0
 800b92a:	d040      	beq.n	800b9ae <_free_r+0x8a>
 800b92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b930:	1f0c      	subs	r4, r1, #4
 800b932:	2b00      	cmp	r3, #0
 800b934:	bfb8      	it	lt
 800b936:	18e4      	addlt	r4, r4, r3
 800b938:	f000 f910 	bl	800bb5c <__malloc_lock>
 800b93c:	4a1c      	ldr	r2, [pc, #112]	; (800b9b0 <_free_r+0x8c>)
 800b93e:	6813      	ldr	r3, [r2, #0]
 800b940:	b933      	cbnz	r3, 800b950 <_free_r+0x2c>
 800b942:	6063      	str	r3, [r4, #4]
 800b944:	6014      	str	r4, [r2, #0]
 800b946:	4628      	mov	r0, r5
 800b948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b94c:	f000 b90c 	b.w	800bb68 <__malloc_unlock>
 800b950:	42a3      	cmp	r3, r4
 800b952:	d908      	bls.n	800b966 <_free_r+0x42>
 800b954:	6820      	ldr	r0, [r4, #0]
 800b956:	1821      	adds	r1, r4, r0
 800b958:	428b      	cmp	r3, r1
 800b95a:	bf01      	itttt	eq
 800b95c:	6819      	ldreq	r1, [r3, #0]
 800b95e:	685b      	ldreq	r3, [r3, #4]
 800b960:	1809      	addeq	r1, r1, r0
 800b962:	6021      	streq	r1, [r4, #0]
 800b964:	e7ed      	b.n	800b942 <_free_r+0x1e>
 800b966:	461a      	mov	r2, r3
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	b10b      	cbz	r3, 800b970 <_free_r+0x4c>
 800b96c:	42a3      	cmp	r3, r4
 800b96e:	d9fa      	bls.n	800b966 <_free_r+0x42>
 800b970:	6811      	ldr	r1, [r2, #0]
 800b972:	1850      	adds	r0, r2, r1
 800b974:	42a0      	cmp	r0, r4
 800b976:	d10b      	bne.n	800b990 <_free_r+0x6c>
 800b978:	6820      	ldr	r0, [r4, #0]
 800b97a:	4401      	add	r1, r0
 800b97c:	1850      	adds	r0, r2, r1
 800b97e:	4283      	cmp	r3, r0
 800b980:	6011      	str	r1, [r2, #0]
 800b982:	d1e0      	bne.n	800b946 <_free_r+0x22>
 800b984:	6818      	ldr	r0, [r3, #0]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	4401      	add	r1, r0
 800b98a:	6011      	str	r1, [r2, #0]
 800b98c:	6053      	str	r3, [r2, #4]
 800b98e:	e7da      	b.n	800b946 <_free_r+0x22>
 800b990:	d902      	bls.n	800b998 <_free_r+0x74>
 800b992:	230c      	movs	r3, #12
 800b994:	602b      	str	r3, [r5, #0]
 800b996:	e7d6      	b.n	800b946 <_free_r+0x22>
 800b998:	6820      	ldr	r0, [r4, #0]
 800b99a:	1821      	adds	r1, r4, r0
 800b99c:	428b      	cmp	r3, r1
 800b99e:	bf01      	itttt	eq
 800b9a0:	6819      	ldreq	r1, [r3, #0]
 800b9a2:	685b      	ldreq	r3, [r3, #4]
 800b9a4:	1809      	addeq	r1, r1, r0
 800b9a6:	6021      	streq	r1, [r4, #0]
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	6054      	str	r4, [r2, #4]
 800b9ac:	e7cb      	b.n	800b946 <_free_r+0x22>
 800b9ae:	bd38      	pop	{r3, r4, r5, pc}
 800b9b0:	20000be8 	.word	0x20000be8

0800b9b4 <sbrk_aligned>:
 800b9b4:	b570      	push	{r4, r5, r6, lr}
 800b9b6:	4e0e      	ldr	r6, [pc, #56]	; (800b9f0 <sbrk_aligned+0x3c>)
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	6831      	ldr	r1, [r6, #0]
 800b9bc:	4605      	mov	r5, r0
 800b9be:	b911      	cbnz	r1, 800b9c6 <sbrk_aligned+0x12>
 800b9c0:	f000 f8bc 	bl	800bb3c <_sbrk_r>
 800b9c4:	6030      	str	r0, [r6, #0]
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	f000 f8b7 	bl	800bb3c <_sbrk_r>
 800b9ce:	1c43      	adds	r3, r0, #1
 800b9d0:	d00a      	beq.n	800b9e8 <sbrk_aligned+0x34>
 800b9d2:	1cc4      	adds	r4, r0, #3
 800b9d4:	f024 0403 	bic.w	r4, r4, #3
 800b9d8:	42a0      	cmp	r0, r4
 800b9da:	d007      	beq.n	800b9ec <sbrk_aligned+0x38>
 800b9dc:	1a21      	subs	r1, r4, r0
 800b9de:	4628      	mov	r0, r5
 800b9e0:	f000 f8ac 	bl	800bb3c <_sbrk_r>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	d101      	bne.n	800b9ec <sbrk_aligned+0x38>
 800b9e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}
 800b9f0:	20000bec 	.word	0x20000bec

0800b9f4 <_malloc_r>:
 800b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f8:	1ccd      	adds	r5, r1, #3
 800b9fa:	f025 0503 	bic.w	r5, r5, #3
 800b9fe:	3508      	adds	r5, #8
 800ba00:	2d0c      	cmp	r5, #12
 800ba02:	bf38      	it	cc
 800ba04:	250c      	movcc	r5, #12
 800ba06:	2d00      	cmp	r5, #0
 800ba08:	4607      	mov	r7, r0
 800ba0a:	db01      	blt.n	800ba10 <_malloc_r+0x1c>
 800ba0c:	42a9      	cmp	r1, r5
 800ba0e:	d905      	bls.n	800ba1c <_malloc_r+0x28>
 800ba10:	230c      	movs	r3, #12
 800ba12:	2600      	movs	r6, #0
 800ba14:	603b      	str	r3, [r7, #0]
 800ba16:	4630      	mov	r0, r6
 800ba18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1c:	4e2e      	ldr	r6, [pc, #184]	; (800bad8 <_malloc_r+0xe4>)
 800ba1e:	f000 f89d 	bl	800bb5c <__malloc_lock>
 800ba22:	6833      	ldr	r3, [r6, #0]
 800ba24:	461c      	mov	r4, r3
 800ba26:	bb34      	cbnz	r4, 800ba76 <_malloc_r+0x82>
 800ba28:	4629      	mov	r1, r5
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	f7ff ffc2 	bl	800b9b4 <sbrk_aligned>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	4604      	mov	r4, r0
 800ba34:	d14d      	bne.n	800bad2 <_malloc_r+0xde>
 800ba36:	6834      	ldr	r4, [r6, #0]
 800ba38:	4626      	mov	r6, r4
 800ba3a:	2e00      	cmp	r6, #0
 800ba3c:	d140      	bne.n	800bac0 <_malloc_r+0xcc>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	4631      	mov	r1, r6
 800ba42:	4638      	mov	r0, r7
 800ba44:	eb04 0803 	add.w	r8, r4, r3
 800ba48:	f000 f878 	bl	800bb3c <_sbrk_r>
 800ba4c:	4580      	cmp	r8, r0
 800ba4e:	d13a      	bne.n	800bac6 <_malloc_r+0xd2>
 800ba50:	6821      	ldr	r1, [r4, #0]
 800ba52:	3503      	adds	r5, #3
 800ba54:	1a6d      	subs	r5, r5, r1
 800ba56:	f025 0503 	bic.w	r5, r5, #3
 800ba5a:	3508      	adds	r5, #8
 800ba5c:	2d0c      	cmp	r5, #12
 800ba5e:	bf38      	it	cc
 800ba60:	250c      	movcc	r5, #12
 800ba62:	4638      	mov	r0, r7
 800ba64:	4629      	mov	r1, r5
 800ba66:	f7ff ffa5 	bl	800b9b4 <sbrk_aligned>
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	d02b      	beq.n	800bac6 <_malloc_r+0xd2>
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	442b      	add	r3, r5
 800ba72:	6023      	str	r3, [r4, #0]
 800ba74:	e00e      	b.n	800ba94 <_malloc_r+0xa0>
 800ba76:	6822      	ldr	r2, [r4, #0]
 800ba78:	1b52      	subs	r2, r2, r5
 800ba7a:	d41e      	bmi.n	800baba <_malloc_r+0xc6>
 800ba7c:	2a0b      	cmp	r2, #11
 800ba7e:	d916      	bls.n	800baae <_malloc_r+0xba>
 800ba80:	1961      	adds	r1, r4, r5
 800ba82:	42a3      	cmp	r3, r4
 800ba84:	6025      	str	r5, [r4, #0]
 800ba86:	bf18      	it	ne
 800ba88:	6059      	strne	r1, [r3, #4]
 800ba8a:	6863      	ldr	r3, [r4, #4]
 800ba8c:	bf08      	it	eq
 800ba8e:	6031      	streq	r1, [r6, #0]
 800ba90:	5162      	str	r2, [r4, r5]
 800ba92:	604b      	str	r3, [r1, #4]
 800ba94:	4638      	mov	r0, r7
 800ba96:	f104 060b 	add.w	r6, r4, #11
 800ba9a:	f000 f865 	bl	800bb68 <__malloc_unlock>
 800ba9e:	f026 0607 	bic.w	r6, r6, #7
 800baa2:	1d23      	adds	r3, r4, #4
 800baa4:	1af2      	subs	r2, r6, r3
 800baa6:	d0b6      	beq.n	800ba16 <_malloc_r+0x22>
 800baa8:	1b9b      	subs	r3, r3, r6
 800baaa:	50a3      	str	r3, [r4, r2]
 800baac:	e7b3      	b.n	800ba16 <_malloc_r+0x22>
 800baae:	6862      	ldr	r2, [r4, #4]
 800bab0:	42a3      	cmp	r3, r4
 800bab2:	bf0c      	ite	eq
 800bab4:	6032      	streq	r2, [r6, #0]
 800bab6:	605a      	strne	r2, [r3, #4]
 800bab8:	e7ec      	b.n	800ba94 <_malloc_r+0xa0>
 800baba:	4623      	mov	r3, r4
 800babc:	6864      	ldr	r4, [r4, #4]
 800babe:	e7b2      	b.n	800ba26 <_malloc_r+0x32>
 800bac0:	4634      	mov	r4, r6
 800bac2:	6876      	ldr	r6, [r6, #4]
 800bac4:	e7b9      	b.n	800ba3a <_malloc_r+0x46>
 800bac6:	230c      	movs	r3, #12
 800bac8:	4638      	mov	r0, r7
 800baca:	603b      	str	r3, [r7, #0]
 800bacc:	f000 f84c 	bl	800bb68 <__malloc_unlock>
 800bad0:	e7a1      	b.n	800ba16 <_malloc_r+0x22>
 800bad2:	6025      	str	r5, [r4, #0]
 800bad4:	e7de      	b.n	800ba94 <_malloc_r+0xa0>
 800bad6:	bf00      	nop
 800bad8:	20000be8 	.word	0x20000be8

0800badc <_realloc_r>:
 800badc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae0:	4680      	mov	r8, r0
 800bae2:	4614      	mov	r4, r2
 800bae4:	460e      	mov	r6, r1
 800bae6:	b921      	cbnz	r1, 800baf2 <_realloc_r+0x16>
 800bae8:	4611      	mov	r1, r2
 800baea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baee:	f7ff bf81 	b.w	800b9f4 <_malloc_r>
 800baf2:	b92a      	cbnz	r2, 800bb00 <_realloc_r+0x24>
 800baf4:	f7ff ff16 	bl	800b924 <_free_r>
 800baf8:	4625      	mov	r5, r4
 800bafa:	4628      	mov	r0, r5
 800bafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb00:	f000 f838 	bl	800bb74 <_malloc_usable_size_r>
 800bb04:	4284      	cmp	r4, r0
 800bb06:	4607      	mov	r7, r0
 800bb08:	d802      	bhi.n	800bb10 <_realloc_r+0x34>
 800bb0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb0e:	d812      	bhi.n	800bb36 <_realloc_r+0x5a>
 800bb10:	4621      	mov	r1, r4
 800bb12:	4640      	mov	r0, r8
 800bb14:	f7ff ff6e 	bl	800b9f4 <_malloc_r>
 800bb18:	4605      	mov	r5, r0
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d0ed      	beq.n	800bafa <_realloc_r+0x1e>
 800bb1e:	42bc      	cmp	r4, r7
 800bb20:	4622      	mov	r2, r4
 800bb22:	4631      	mov	r1, r6
 800bb24:	bf28      	it	cs
 800bb26:	463a      	movcs	r2, r7
 800bb28:	f7ff feee 	bl	800b908 <memcpy>
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	4640      	mov	r0, r8
 800bb30:	f7ff fef8 	bl	800b924 <_free_r>
 800bb34:	e7e1      	b.n	800bafa <_realloc_r+0x1e>
 800bb36:	4635      	mov	r5, r6
 800bb38:	e7df      	b.n	800bafa <_realloc_r+0x1e>
	...

0800bb3c <_sbrk_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4d05      	ldr	r5, [pc, #20]	; (800bb58 <_sbrk_r+0x1c>)
 800bb42:	4604      	mov	r4, r0
 800bb44:	4608      	mov	r0, r1
 800bb46:	602b      	str	r3, [r5, #0]
 800bb48:	f7fa fcc2 	bl	80064d0 <_sbrk>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_sbrk_r+0x1a>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_sbrk_r+0x1a>
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	20000be0 	.word	0x20000be0

0800bb5c <__malloc_lock>:
 800bb5c:	4801      	ldr	r0, [pc, #4]	; (800bb64 <__malloc_lock+0x8>)
 800bb5e:	f7ff bec3 	b.w	800b8e8 <__retarget_lock_acquire_recursive>
 800bb62:	bf00      	nop
 800bb64:	20000be4 	.word	0x20000be4

0800bb68 <__malloc_unlock>:
 800bb68:	4801      	ldr	r0, [pc, #4]	; (800bb70 <__malloc_unlock+0x8>)
 800bb6a:	f7ff bebe 	b.w	800b8ea <__retarget_lock_release_recursive>
 800bb6e:	bf00      	nop
 800bb70:	20000be4 	.word	0x20000be4

0800bb74 <_malloc_usable_size_r>:
 800bb74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb78:	1f18      	subs	r0, r3, #4
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bfbc      	itt	lt
 800bb7e:	580b      	ldrlt	r3, [r1, r0]
 800bb80:	18c0      	addlt	r0, r0, r3
 800bb82:	4770      	bx	lr

0800bb84 <cos>:
 800bb84:	b530      	push	{r4, r5, lr}
 800bb86:	4a20      	ldr	r2, [pc, #128]	; (800bc08 <cos+0x84>)
 800bb88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	b087      	sub	sp, #28
 800bb90:	dc06      	bgt.n	800bba0 <cos+0x1c>
 800bb92:	2200      	movs	r2, #0
 800bb94:	2300      	movs	r3, #0
 800bb96:	b007      	add	sp, #28
 800bb98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb9c:	f000 ba78 	b.w	800c090 <__kernel_cos>
 800bba0:	4a1a      	ldr	r2, [pc, #104]	; (800bc0c <cos+0x88>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	dd05      	ble.n	800bbb2 <cos+0x2e>
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	f7f4 fb49 	bl	8000240 <__aeabi_dsub>
 800bbae:	b007      	add	sp, #28
 800bbb0:	bd30      	pop	{r4, r5, pc}
 800bbb2:	aa02      	add	r2, sp, #8
 800bbb4:	f000 f874 	bl	800bca0 <__ieee754_rem_pio2>
 800bbb8:	f000 0003 	and.w	r0, r0, #3
 800bbbc:	2801      	cmp	r0, #1
 800bbbe:	d009      	beq.n	800bbd4 <cos+0x50>
 800bbc0:	2802      	cmp	r0, #2
 800bbc2:	d011      	beq.n	800bbe8 <cos+0x64>
 800bbc4:	b9b8      	cbnz	r0, 800bbf6 <cos+0x72>
 800bbc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbce:	f000 fa5f 	bl	800c090 <__kernel_cos>
 800bbd2:	e7ec      	b.n	800bbae <cos+0x2a>
 800bbd4:	9000      	str	r0, [sp, #0]
 800bbd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbde:	f000 fe57 	bl	800c890 <__kernel_sin>
 800bbe2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bbe6:	e7e2      	b.n	800bbae <cos+0x2a>
 800bbe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf0:	f000 fa4e 	bl	800c090 <__kernel_cos>
 800bbf4:	e7f5      	b.n	800bbe2 <cos+0x5e>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc02:	f000 fe45 	bl	800c890 <__kernel_sin>
 800bc06:	e7d2      	b.n	800bbae <cos+0x2a>
 800bc08:	3fe921fb 	.word	0x3fe921fb
 800bc0c:	7fefffff 	.word	0x7fefffff

0800bc10 <sin>:
 800bc10:	b530      	push	{r4, r5, lr}
 800bc12:	4a20      	ldr	r2, [pc, #128]	; (800bc94 <sin+0x84>)
 800bc14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	dc06      	bgt.n	800bc2c <sin+0x1c>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	2200      	movs	r2, #0
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	2300      	movs	r3, #0
 800bc26:	f000 fe33 	bl	800c890 <__kernel_sin>
 800bc2a:	e006      	b.n	800bc3a <sin+0x2a>
 800bc2c:	4a1a      	ldr	r2, [pc, #104]	; (800bc98 <sin+0x88>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	dd05      	ble.n	800bc3e <sin+0x2e>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	f7f4 fb03 	bl	8000240 <__aeabi_dsub>
 800bc3a:	b007      	add	sp, #28
 800bc3c:	bd30      	pop	{r4, r5, pc}
 800bc3e:	aa02      	add	r2, sp, #8
 800bc40:	f000 f82e 	bl	800bca0 <__ieee754_rem_pio2>
 800bc44:	f000 0003 	and.w	r0, r0, #3
 800bc48:	2801      	cmp	r0, #1
 800bc4a:	d009      	beq.n	800bc60 <sin+0x50>
 800bc4c:	2802      	cmp	r0, #2
 800bc4e:	d00e      	beq.n	800bc6e <sin+0x5e>
 800bc50:	b9c0      	cbnz	r0, 800bc84 <sin+0x74>
 800bc52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc56:	2301      	movs	r3, #1
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc5e:	e7e2      	b.n	800bc26 <sin+0x16>
 800bc60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc68:	f000 fa12 	bl	800c090 <__kernel_cos>
 800bc6c:	e7e5      	b.n	800bc3a <sin+0x2a>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc7a:	f000 fe09 	bl	800c890 <__kernel_sin>
 800bc7e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bc82:	e7da      	b.n	800bc3a <sin+0x2a>
 800bc84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc8c:	f000 fa00 	bl	800c090 <__kernel_cos>
 800bc90:	e7f5      	b.n	800bc7e <sin+0x6e>
 800bc92:	bf00      	nop
 800bc94:	3fe921fb 	.word	0x3fe921fb
 800bc98:	7fefffff 	.word	0x7fefffff
 800bc9c:	00000000 	.word	0x00000000

0800bca0 <__ieee754_rem_pio2>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	4614      	mov	r4, r2
 800bca6:	4ac4      	ldr	r2, [pc, #784]	; (800bfb8 <__ieee754_rem_pio2+0x318>)
 800bca8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bcac:	b08d      	sub	sp, #52	; 0x34
 800bcae:	4592      	cmp	sl, r2
 800bcb0:	9104      	str	r1, [sp, #16]
 800bcb2:	dc07      	bgt.n	800bcc4 <__ieee754_rem_pio2+0x24>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e9c4 0100 	strd	r0, r1, [r4]
 800bcbc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bcc0:	2500      	movs	r5, #0
 800bcc2:	e024      	b.n	800bd0e <__ieee754_rem_pio2+0x6e>
 800bcc4:	4abd      	ldr	r2, [pc, #756]	; (800bfbc <__ieee754_rem_pio2+0x31c>)
 800bcc6:	4592      	cmp	sl, r2
 800bcc8:	dc72      	bgt.n	800bdb0 <__ieee754_rem_pio2+0x110>
 800bcca:	9b04      	ldr	r3, [sp, #16]
 800bccc:	4dbc      	ldr	r5, [pc, #752]	; (800bfc0 <__ieee754_rem_pio2+0x320>)
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	a3ab      	add	r3, pc, #684	; (adr r3, 800bf80 <__ieee754_rem_pio2+0x2e0>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	dd36      	ble.n	800bd46 <__ieee754_rem_pio2+0xa6>
 800bcd8:	f7f4 fab2 	bl	8000240 <__aeabi_dsub>
 800bcdc:	45aa      	cmp	sl, r5
 800bcde:	4606      	mov	r6, r0
 800bce0:	460f      	mov	r7, r1
 800bce2:	d018      	beq.n	800bd16 <__ieee754_rem_pio2+0x76>
 800bce4:	a3a8      	add	r3, pc, #672	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 faa9 	bl	8000240 <__aeabi_dsub>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	e9c4 2300 	strd	r2, r3, [r4]
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	f7f4 faa1 	bl	8000240 <__aeabi_dsub>
 800bcfe:	a3a2      	add	r3, pc, #648	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7f4 fa9c 	bl	8000240 <__aeabi_dsub>
 800bd08:	2501      	movs	r5, #1
 800bd0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd0e:	4628      	mov	r0, r5
 800bd10:	b00d      	add	sp, #52	; 0x34
 800bd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd16:	a39e      	add	r3, pc, #632	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2f0>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fa90 	bl	8000240 <__aeabi_dsub>
 800bd20:	a39d      	add	r3, pc, #628	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	4606      	mov	r6, r0
 800bd28:	460f      	mov	r7, r1
 800bd2a:	f7f4 fa89 	bl	8000240 <__aeabi_dsub>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4630      	mov	r0, r6
 800bd34:	e9c4 2300 	strd	r2, r3, [r4]
 800bd38:	4639      	mov	r1, r7
 800bd3a:	f7f4 fa81 	bl	8000240 <__aeabi_dsub>
 800bd3e:	a396      	add	r3, pc, #600	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	e7de      	b.n	800bd04 <__ieee754_rem_pio2+0x64>
 800bd46:	f7f4 fa7d 	bl	8000244 <__adddf3>
 800bd4a:	45aa      	cmp	sl, r5
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	460f      	mov	r7, r1
 800bd50:	d016      	beq.n	800bd80 <__ieee754_rem_pio2+0xe0>
 800bd52:	a38d      	add	r3, pc, #564	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fa74 	bl	8000244 <__adddf3>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4630      	mov	r0, r6
 800bd62:	e9c4 2300 	strd	r2, r3, [r4]
 800bd66:	4639      	mov	r1, r7
 800bd68:	f7f4 fa6a 	bl	8000240 <__aeabi_dsub>
 800bd6c:	a386      	add	r3, pc, #536	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	f7f4 fa67 	bl	8000244 <__adddf3>
 800bd76:	f04f 35ff 	mov.w	r5, #4294967295
 800bd7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd7e:	e7c6      	b.n	800bd0e <__ieee754_rem_pio2+0x6e>
 800bd80:	a383      	add	r3, pc, #524	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2f0>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fa5d 	bl	8000244 <__adddf3>
 800bd8a:	a383      	add	r3, pc, #524	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	4606      	mov	r6, r0
 800bd92:	460f      	mov	r7, r1
 800bd94:	f7f4 fa56 	bl	8000244 <__adddf3>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	e9c4 2300 	strd	r2, r3, [r4]
 800bda2:	4639      	mov	r1, r7
 800bda4:	f7f4 fa4c 	bl	8000240 <__aeabi_dsub>
 800bda8:	a37b      	add	r3, pc, #492	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	e7e0      	b.n	800bd72 <__ieee754_rem_pio2+0xd2>
 800bdb0:	4a84      	ldr	r2, [pc, #528]	; (800bfc4 <__ieee754_rem_pio2+0x324>)
 800bdb2:	4592      	cmp	sl, r2
 800bdb4:	f300 80d5 	bgt.w	800bf62 <__ieee754_rem_pio2+0x2c2>
 800bdb8:	f000 fe20 	bl	800c9fc <fabs>
 800bdbc:	a378      	add	r3, pc, #480	; (adr r3, 800bfa0 <__ieee754_rem_pio2+0x300>)
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	f7f4 fbf3 	bl	80005b0 <__aeabi_dmul>
 800bdca:	2200      	movs	r2, #0
 800bdcc:	4b7e      	ldr	r3, [pc, #504]	; (800bfc8 <__ieee754_rem_pio2+0x328>)
 800bdce:	f7f4 fa39 	bl	8000244 <__adddf3>
 800bdd2:	f7f4 fe87 	bl	8000ae4 <__aeabi_d2iz>
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	f7f4 fb80 	bl	80004dc <__aeabi_i2d>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bde4:	a366      	add	r3, pc, #408	; (adr r3, 800bf80 <__ieee754_rem_pio2+0x2e0>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	f7f4 fbe1 	bl	80005b0 <__aeabi_dmul>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	f7f4 fa23 	bl	8000240 <__aeabi_dsub>
 800bdfa:	a363      	add	r3, pc, #396	; (adr r3, 800bf88 <__ieee754_rem_pio2+0x2e8>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	4680      	mov	r8, r0
 800be02:	4689      	mov	r9, r1
 800be04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be08:	f7f4 fbd2 	bl	80005b0 <__aeabi_dmul>
 800be0c:	2d1f      	cmp	r5, #31
 800be0e:	4606      	mov	r6, r0
 800be10:	460f      	mov	r7, r1
 800be12:	dc0e      	bgt.n	800be32 <__ieee754_rem_pio2+0x192>
 800be14:	4b6d      	ldr	r3, [pc, #436]	; (800bfcc <__ieee754_rem_pio2+0x32c>)
 800be16:	1e6a      	subs	r2, r5, #1
 800be18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1c:	4553      	cmp	r3, sl
 800be1e:	d008      	beq.n	800be32 <__ieee754_rem_pio2+0x192>
 800be20:	4632      	mov	r2, r6
 800be22:	463b      	mov	r3, r7
 800be24:	4640      	mov	r0, r8
 800be26:	4649      	mov	r1, r9
 800be28:	f7f4 fa0a 	bl	8000240 <__aeabi_dsub>
 800be2c:	e9c4 0100 	strd	r0, r1, [r4]
 800be30:	e013      	b.n	800be5a <__ieee754_rem_pio2+0x1ba>
 800be32:	463b      	mov	r3, r7
 800be34:	4632      	mov	r2, r6
 800be36:	4640      	mov	r0, r8
 800be38:	4649      	mov	r1, r9
 800be3a:	f7f4 fa01 	bl	8000240 <__aeabi_dsub>
 800be3e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800be42:	9305      	str	r3, [sp, #20]
 800be44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be48:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800be4c:	f1ba 0f10 	cmp.w	sl, #16
 800be50:	dc1f      	bgt.n	800be92 <__ieee754_rem_pio2+0x1f2>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	e9c4 2300 	strd	r2, r3, [r4]
 800be5a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800be5e:	4640      	mov	r0, r8
 800be60:	4653      	mov	r3, sl
 800be62:	4649      	mov	r1, r9
 800be64:	f7f4 f9ec 	bl	8000240 <__aeabi_dsub>
 800be68:	4632      	mov	r2, r6
 800be6a:	463b      	mov	r3, r7
 800be6c:	f7f4 f9e8 	bl	8000240 <__aeabi_dsub>
 800be70:	460b      	mov	r3, r1
 800be72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800be76:	9904      	ldr	r1, [sp, #16]
 800be78:	4602      	mov	r2, r0
 800be7a:	2900      	cmp	r1, #0
 800be7c:	f6bf af47 	bge.w	800bd0e <__ieee754_rem_pio2+0x6e>
 800be80:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800be84:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800be88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be8c:	60e3      	str	r3, [r4, #12]
 800be8e:	426d      	negs	r5, r5
 800be90:	e73d      	b.n	800bd0e <__ieee754_rem_pio2+0x6e>
 800be92:	a33f      	add	r3, pc, #252	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2f0>)
 800be94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be9c:	f7f4 fb88 	bl	80005b0 <__aeabi_dmul>
 800bea0:	4606      	mov	r6, r0
 800bea2:	460f      	mov	r7, r1
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4640      	mov	r0, r8
 800beaa:	4649      	mov	r1, r9
 800beac:	f7f4 f9c8 	bl	8000240 <__aeabi_dsub>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	4682      	mov	sl, r0
 800beb6:	468b      	mov	fp, r1
 800beb8:	4640      	mov	r0, r8
 800beba:	4649      	mov	r1, r9
 800bebc:	f7f4 f9c0 	bl	8000240 <__aeabi_dsub>
 800bec0:	4632      	mov	r2, r6
 800bec2:	463b      	mov	r3, r7
 800bec4:	f7f4 f9bc 	bl	8000240 <__aeabi_dsub>
 800bec8:	a333      	add	r3, pc, #204	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2f8>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	4606      	mov	r6, r0
 800bed0:	460f      	mov	r7, r1
 800bed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bed6:	f7f4 fb6b 	bl	80005b0 <__aeabi_dmul>
 800beda:	4632      	mov	r2, r6
 800bedc:	463b      	mov	r3, r7
 800bede:	f7f4 f9af 	bl	8000240 <__aeabi_dsub>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	4606      	mov	r6, r0
 800bee8:	460f      	mov	r7, r1
 800beea:	4650      	mov	r0, sl
 800beec:	4659      	mov	r1, fp
 800beee:	f7f4 f9a7 	bl	8000240 <__aeabi_dsub>
 800bef2:	9a05      	ldr	r2, [sp, #20]
 800bef4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	2b31      	cmp	r3, #49	; 0x31
 800befc:	dc06      	bgt.n	800bf0c <__ieee754_rem_pio2+0x26c>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	46d0      	mov	r8, sl
 800bf04:	46d9      	mov	r9, fp
 800bf06:	e9c4 2300 	strd	r2, r3, [r4]
 800bf0a:	e7a6      	b.n	800be5a <__ieee754_rem_pio2+0x1ba>
 800bf0c:	a326      	add	r3, pc, #152	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x308>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf16:	f7f4 fb4b 	bl	80005b0 <__aeabi_dmul>
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4650      	mov	r0, sl
 800bf24:	4659      	mov	r1, fp
 800bf26:	f7f4 f98b 	bl	8000240 <__aeabi_dsub>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4680      	mov	r8, r0
 800bf30:	4689      	mov	r9, r1
 800bf32:	4650      	mov	r0, sl
 800bf34:	4659      	mov	r1, fp
 800bf36:	f7f4 f983 	bl	8000240 <__aeabi_dsub>
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	463b      	mov	r3, r7
 800bf3e:	f7f4 f97f 	bl	8000240 <__aeabi_dsub>
 800bf42:	a31b      	add	r3, pc, #108	; (adr r3, 800bfb0 <__ieee754_rem_pio2+0x310>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	4606      	mov	r6, r0
 800bf4a:	460f      	mov	r7, r1
 800bf4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf50:	f7f4 fb2e 	bl	80005b0 <__aeabi_dmul>
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	f7f4 f972 	bl	8000240 <__aeabi_dsub>
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	460f      	mov	r7, r1
 800bf60:	e75e      	b.n	800be20 <__ieee754_rem_pio2+0x180>
 800bf62:	4a1b      	ldr	r2, [pc, #108]	; (800bfd0 <__ieee754_rem_pio2+0x330>)
 800bf64:	4592      	cmp	sl, r2
 800bf66:	dd35      	ble.n	800bfd4 <__ieee754_rem_pio2+0x334>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	f7f4 f968 	bl	8000240 <__aeabi_dsub>
 800bf70:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf74:	e9c4 0100 	strd	r0, r1, [r4]
 800bf78:	e6a2      	b.n	800bcc0 <__ieee754_rem_pio2+0x20>
 800bf7a:	bf00      	nop
 800bf7c:	f3af 8000 	nop.w
 800bf80:	54400000 	.word	0x54400000
 800bf84:	3ff921fb 	.word	0x3ff921fb
 800bf88:	1a626331 	.word	0x1a626331
 800bf8c:	3dd0b461 	.word	0x3dd0b461
 800bf90:	1a600000 	.word	0x1a600000
 800bf94:	3dd0b461 	.word	0x3dd0b461
 800bf98:	2e037073 	.word	0x2e037073
 800bf9c:	3ba3198a 	.word	0x3ba3198a
 800bfa0:	6dc9c883 	.word	0x6dc9c883
 800bfa4:	3fe45f30 	.word	0x3fe45f30
 800bfa8:	2e000000 	.word	0x2e000000
 800bfac:	3ba3198a 	.word	0x3ba3198a
 800bfb0:	252049c1 	.word	0x252049c1
 800bfb4:	397b839a 	.word	0x397b839a
 800bfb8:	3fe921fb 	.word	0x3fe921fb
 800bfbc:	4002d97b 	.word	0x4002d97b
 800bfc0:	3ff921fb 	.word	0x3ff921fb
 800bfc4:	413921fb 	.word	0x413921fb
 800bfc8:	3fe00000 	.word	0x3fe00000
 800bfcc:	08077118 	.word	0x08077118
 800bfd0:	7fefffff 	.word	0x7fefffff
 800bfd4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bfd8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bfdc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bfe0:	460f      	mov	r7, r1
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	f7f4 fd7e 	bl	8000ae4 <__aeabi_d2iz>
 800bfe8:	f7f4 fa78 	bl	80004dc <__aeabi_i2d>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4630      	mov	r0, r6
 800bff2:	4639      	mov	r1, r7
 800bff4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bff8:	f7f4 f922 	bl	8000240 <__aeabi_dsub>
 800bffc:	2200      	movs	r2, #0
 800bffe:	4b22      	ldr	r3, [pc, #136]	; (800c088 <__ieee754_rem_pio2+0x3e8>)
 800c000:	f7f4 fad6 	bl	80005b0 <__aeabi_dmul>
 800c004:	460f      	mov	r7, r1
 800c006:	4606      	mov	r6, r0
 800c008:	f7f4 fd6c 	bl	8000ae4 <__aeabi_d2iz>
 800c00c:	f7f4 fa66 	bl	80004dc <__aeabi_i2d>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4630      	mov	r0, r6
 800c016:	4639      	mov	r1, r7
 800c018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c01c:	f7f4 f910 	bl	8000240 <__aeabi_dsub>
 800c020:	2200      	movs	r2, #0
 800c022:	4b19      	ldr	r3, [pc, #100]	; (800c088 <__ieee754_rem_pio2+0x3e8>)
 800c024:	f7f4 fac4 	bl	80005b0 <__aeabi_dmul>
 800c028:	f04f 0803 	mov.w	r8, #3
 800c02c:	2600      	movs	r6, #0
 800c02e:	2700      	movs	r7, #0
 800c030:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c034:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c038:	4632      	mov	r2, r6
 800c03a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c03e:	463b      	mov	r3, r7
 800c040:	46c2      	mov	sl, r8
 800c042:	f108 38ff 	add.w	r8, r8, #4294967295
 800c046:	f7f4 fd1b 	bl	8000a80 <__aeabi_dcmpeq>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d1f4      	bne.n	800c038 <__ieee754_rem_pio2+0x398>
 800c04e:	4b0f      	ldr	r3, [pc, #60]	; (800c08c <__ieee754_rem_pio2+0x3ec>)
 800c050:	462a      	mov	r2, r5
 800c052:	9301      	str	r3, [sp, #4]
 800c054:	2302      	movs	r3, #2
 800c056:	4621      	mov	r1, r4
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	a806      	add	r0, sp, #24
 800c05c:	4653      	mov	r3, sl
 800c05e:	f000 f8d5 	bl	800c20c <__kernel_rem_pio2>
 800c062:	9b04      	ldr	r3, [sp, #16]
 800c064:	4605      	mov	r5, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	f6bf ae51 	bge.w	800bd0e <__ieee754_rem_pio2+0x6e>
 800c06c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c070:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c074:	e9c4 2300 	strd	r2, r3, [r4]
 800c078:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c07c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c080:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c084:	e703      	b.n	800be8e <__ieee754_rem_pio2+0x1ee>
 800c086:	bf00      	nop
 800c088:	41700000 	.word	0x41700000
 800c08c:	08077198 	.word	0x08077198

0800c090 <__kernel_cos>:
 800c090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c098:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c09c:	4680      	mov	r8, r0
 800c09e:	460f      	mov	r7, r1
 800c0a0:	e9cd 2300 	strd	r2, r3, [sp]
 800c0a4:	da04      	bge.n	800c0b0 <__kernel_cos+0x20>
 800c0a6:	f7f4 fd1d 	bl	8000ae4 <__aeabi_d2iz>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	f000 8086 	beq.w	800c1bc <__kernel_cos+0x12c>
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	463b      	mov	r3, r7
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	4639      	mov	r1, r7
 800c0b8:	f7f4 fa7a 	bl	80005b0 <__aeabi_dmul>
 800c0bc:	2200      	movs	r2, #0
 800c0be:	4b4e      	ldr	r3, [pc, #312]	; (800c1f8 <__kernel_cos+0x168>)
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	f7f4 fa74 	bl	80005b0 <__aeabi_dmul>
 800c0c8:	a33f      	add	r3, pc, #252	; (adr r3, 800c1c8 <__kernel_cos+0x138>)
 800c0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ce:	4682      	mov	sl, r0
 800c0d0:	468b      	mov	fp, r1
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	f7f4 fa6b 	bl	80005b0 <__aeabi_dmul>
 800c0da:	a33d      	add	r3, pc, #244	; (adr r3, 800c1d0 <__kernel_cos+0x140>)
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	f7f4 f8b0 	bl	8000244 <__adddf3>
 800c0e4:	4622      	mov	r2, r4
 800c0e6:	462b      	mov	r3, r5
 800c0e8:	f7f4 fa62 	bl	80005b0 <__aeabi_dmul>
 800c0ec:	a33a      	add	r3, pc, #232	; (adr r3, 800c1d8 <__kernel_cos+0x148>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f7f4 f8a5 	bl	8000240 <__aeabi_dsub>
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	f7f4 fa59 	bl	80005b0 <__aeabi_dmul>
 800c0fe:	a338      	add	r3, pc, #224	; (adr r3, 800c1e0 <__kernel_cos+0x150>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	f7f4 f89e 	bl	8000244 <__adddf3>
 800c108:	4622      	mov	r2, r4
 800c10a:	462b      	mov	r3, r5
 800c10c:	f7f4 fa50 	bl	80005b0 <__aeabi_dmul>
 800c110:	a335      	add	r3, pc, #212	; (adr r3, 800c1e8 <__kernel_cos+0x158>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	f7f4 f893 	bl	8000240 <__aeabi_dsub>
 800c11a:	4622      	mov	r2, r4
 800c11c:	462b      	mov	r3, r5
 800c11e:	f7f4 fa47 	bl	80005b0 <__aeabi_dmul>
 800c122:	a333      	add	r3, pc, #204	; (adr r3, 800c1f0 <__kernel_cos+0x160>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 f88c 	bl	8000244 <__adddf3>
 800c12c:	4622      	mov	r2, r4
 800c12e:	462b      	mov	r3, r5
 800c130:	f7f4 fa3e 	bl	80005b0 <__aeabi_dmul>
 800c134:	4622      	mov	r2, r4
 800c136:	462b      	mov	r3, r5
 800c138:	f7f4 fa3a 	bl	80005b0 <__aeabi_dmul>
 800c13c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c140:	4604      	mov	r4, r0
 800c142:	460d      	mov	r5, r1
 800c144:	4640      	mov	r0, r8
 800c146:	4639      	mov	r1, r7
 800c148:	f7f4 fa32 	bl	80005b0 <__aeabi_dmul>
 800c14c:	460b      	mov	r3, r1
 800c14e:	4602      	mov	r2, r0
 800c150:	4629      	mov	r1, r5
 800c152:	4620      	mov	r0, r4
 800c154:	f7f4 f874 	bl	8000240 <__aeabi_dsub>
 800c158:	4b28      	ldr	r3, [pc, #160]	; (800c1fc <__kernel_cos+0x16c>)
 800c15a:	4680      	mov	r8, r0
 800c15c:	429e      	cmp	r6, r3
 800c15e:	4689      	mov	r9, r1
 800c160:	dc0e      	bgt.n	800c180 <__kernel_cos+0xf0>
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	4650      	mov	r0, sl
 800c168:	4659      	mov	r1, fp
 800c16a:	f7f4 f869 	bl	8000240 <__aeabi_dsub>
 800c16e:	4602      	mov	r2, r0
 800c170:	2000      	movs	r0, #0
 800c172:	460b      	mov	r3, r1
 800c174:	4922      	ldr	r1, [pc, #136]	; (800c200 <__kernel_cos+0x170>)
 800c176:	f7f4 f863 	bl	8000240 <__aeabi_dsub>
 800c17a:	b003      	add	sp, #12
 800c17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c180:	2400      	movs	r4, #0
 800c182:	4b20      	ldr	r3, [pc, #128]	; (800c204 <__kernel_cos+0x174>)
 800c184:	4622      	mov	r2, r4
 800c186:	429e      	cmp	r6, r3
 800c188:	bfcc      	ite	gt
 800c18a:	4d1f      	ldrgt	r5, [pc, #124]	; (800c208 <__kernel_cos+0x178>)
 800c18c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c190:	462b      	mov	r3, r5
 800c192:	2000      	movs	r0, #0
 800c194:	491a      	ldr	r1, [pc, #104]	; (800c200 <__kernel_cos+0x170>)
 800c196:	f7f4 f853 	bl	8000240 <__aeabi_dsub>
 800c19a:	4622      	mov	r2, r4
 800c19c:	4606      	mov	r6, r0
 800c19e:	460f      	mov	r7, r1
 800c1a0:	462b      	mov	r3, r5
 800c1a2:	4650      	mov	r0, sl
 800c1a4:	4659      	mov	r1, fp
 800c1a6:	f7f4 f84b 	bl	8000240 <__aeabi_dsub>
 800c1aa:	4642      	mov	r2, r8
 800c1ac:	464b      	mov	r3, r9
 800c1ae:	f7f4 f847 	bl	8000240 <__aeabi_dsub>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	e7dc      	b.n	800c176 <__kernel_cos+0xe6>
 800c1bc:	2000      	movs	r0, #0
 800c1be:	4910      	ldr	r1, [pc, #64]	; (800c200 <__kernel_cos+0x170>)
 800c1c0:	e7db      	b.n	800c17a <__kernel_cos+0xea>
 800c1c2:	bf00      	nop
 800c1c4:	f3af 8000 	nop.w
 800c1c8:	be8838d4 	.word	0xbe8838d4
 800c1cc:	bda8fae9 	.word	0xbda8fae9
 800c1d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c1d4:	3e21ee9e 	.word	0x3e21ee9e
 800c1d8:	809c52ad 	.word	0x809c52ad
 800c1dc:	3e927e4f 	.word	0x3e927e4f
 800c1e0:	19cb1590 	.word	0x19cb1590
 800c1e4:	3efa01a0 	.word	0x3efa01a0
 800c1e8:	16c15177 	.word	0x16c15177
 800c1ec:	3f56c16c 	.word	0x3f56c16c
 800c1f0:	5555554c 	.word	0x5555554c
 800c1f4:	3fa55555 	.word	0x3fa55555
 800c1f8:	3fe00000 	.word	0x3fe00000
 800c1fc:	3fd33332 	.word	0x3fd33332
 800c200:	3ff00000 	.word	0x3ff00000
 800c204:	3fe90000 	.word	0x3fe90000
 800c208:	3fd20000 	.word	0x3fd20000

0800c20c <__kernel_rem_pio2>:
 800c20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c210:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c214:	9308      	str	r3, [sp, #32]
 800c216:	9106      	str	r1, [sp, #24]
 800c218:	4bb6      	ldr	r3, [pc, #728]	; (800c4f4 <__kernel_rem_pio2+0x2e8>)
 800c21a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c21c:	f112 0f14 	cmn.w	r2, #20
 800c220:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c224:	bfa8      	it	ge
 800c226:	1ed4      	subge	r4, r2, #3
 800c228:	9302      	str	r3, [sp, #8]
 800c22a:	9b08      	ldr	r3, [sp, #32]
 800c22c:	bfb8      	it	lt
 800c22e:	2400      	movlt	r4, #0
 800c230:	f103 33ff 	add.w	r3, r3, #4294967295
 800c234:	9307      	str	r3, [sp, #28]
 800c236:	bfa4      	itt	ge
 800c238:	2318      	movge	r3, #24
 800c23a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c23e:	f06f 0317 	mvn.w	r3, #23
 800c242:	fb04 3303 	mla	r3, r4, r3, r3
 800c246:	eb03 0b02 	add.w	fp, r3, r2
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	9b02      	ldr	r3, [sp, #8]
 800c24e:	1aa7      	subs	r7, r4, r2
 800c250:	eb03 0802 	add.w	r8, r3, r2
 800c254:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c256:	2500      	movs	r5, #0
 800c258:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c25c:	2200      	movs	r2, #0
 800c25e:	2300      	movs	r3, #0
 800c260:	9009      	str	r0, [sp, #36]	; 0x24
 800c262:	ae20      	add	r6, sp, #128	; 0x80
 800c264:	4545      	cmp	r5, r8
 800c266:	dd14      	ble.n	800c292 <__kernel_rem_pio2+0x86>
 800c268:	f04f 0800 	mov.w	r8, #0
 800c26c:	9a08      	ldr	r2, [sp, #32]
 800c26e:	ab20      	add	r3, sp, #128	; 0x80
 800c270:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c274:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c278:	9b02      	ldr	r3, [sp, #8]
 800c27a:	4598      	cmp	r8, r3
 800c27c:	dc35      	bgt.n	800c2ea <__kernel_rem_pio2+0xde>
 800c27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c280:	2200      	movs	r2, #0
 800c282:	f1a3 0908 	sub.w	r9, r3, #8
 800c286:	2300      	movs	r3, #0
 800c288:	462f      	mov	r7, r5
 800c28a:	2600      	movs	r6, #0
 800c28c:	e9cd 2300 	strd	r2, r3, [sp]
 800c290:	e01f      	b.n	800c2d2 <__kernel_rem_pio2+0xc6>
 800c292:	42ef      	cmn	r7, r5
 800c294:	d40b      	bmi.n	800c2ae <__kernel_rem_pio2+0xa2>
 800c296:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c29a:	e9cd 2300 	strd	r2, r3, [sp]
 800c29e:	f7f4 f91d 	bl	80004dc <__aeabi_i2d>
 800c2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2a6:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c2aa:	3501      	adds	r5, #1
 800c2ac:	e7da      	b.n	800c264 <__kernel_rem_pio2+0x58>
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	e7f8      	b.n	800c2a6 <__kernel_rem_pio2+0x9a>
 800c2b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c2bc:	f7f4 f978 	bl	80005b0 <__aeabi_dmul>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2c8:	f7f3 ffbc 	bl	8000244 <__adddf3>
 800c2cc:	e9cd 0100 	strd	r0, r1, [sp]
 800c2d0:	3601      	adds	r6, #1
 800c2d2:	9b07      	ldr	r3, [sp, #28]
 800c2d4:	3f08      	subs	r7, #8
 800c2d6:	429e      	cmp	r6, r3
 800c2d8:	ddec      	ble.n	800c2b4 <__kernel_rem_pio2+0xa8>
 800c2da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2de:	f108 0801 	add.w	r8, r8, #1
 800c2e2:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c2e6:	3508      	adds	r5, #8
 800c2e8:	e7c6      	b.n	800c278 <__kernel_rem_pio2+0x6c>
 800c2ea:	9b02      	ldr	r3, [sp, #8]
 800c2ec:	aa0c      	add	r2, sp, #48	; 0x30
 800c2ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2f4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c2f6:	9e02      	ldr	r6, [sp, #8]
 800c2f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c2fc:	930a      	str	r3, [sp, #40]	; 0x28
 800c2fe:	ab98      	add	r3, sp, #608	; 0x260
 800c300:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c304:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c308:	ab70      	add	r3, sp, #448	; 0x1c0
 800c30a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c30e:	46d0      	mov	r8, sl
 800c310:	46b1      	mov	r9, r6
 800c312:	af0c      	add	r7, sp, #48	; 0x30
 800c314:	9700      	str	r7, [sp, #0]
 800c316:	f1b9 0f00 	cmp.w	r9, #0
 800c31a:	f1a8 0808 	sub.w	r8, r8, #8
 800c31e:	dc71      	bgt.n	800c404 <__kernel_rem_pio2+0x1f8>
 800c320:	465a      	mov	r2, fp
 800c322:	4620      	mov	r0, r4
 800c324:	4629      	mov	r1, r5
 800c326:	f000 fbef 	bl	800cb08 <scalbn>
 800c32a:	2200      	movs	r2, #0
 800c32c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c330:	4604      	mov	r4, r0
 800c332:	460d      	mov	r5, r1
 800c334:	f7f4 f93c 	bl	80005b0 <__aeabi_dmul>
 800c338:	f000 fb66 	bl	800ca08 <floor>
 800c33c:	2200      	movs	r2, #0
 800c33e:	4b6e      	ldr	r3, [pc, #440]	; (800c4f8 <__kernel_rem_pio2+0x2ec>)
 800c340:	f7f4 f936 	bl	80005b0 <__aeabi_dmul>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4620      	mov	r0, r4
 800c34a:	4629      	mov	r1, r5
 800c34c:	f7f3 ff78 	bl	8000240 <__aeabi_dsub>
 800c350:	460d      	mov	r5, r1
 800c352:	4604      	mov	r4, r0
 800c354:	f7f4 fbc6 	bl	8000ae4 <__aeabi_d2iz>
 800c358:	9004      	str	r0, [sp, #16]
 800c35a:	f7f4 f8bf 	bl	80004dc <__aeabi_i2d>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	f7f3 ff6b 	bl	8000240 <__aeabi_dsub>
 800c36a:	f1bb 0f00 	cmp.w	fp, #0
 800c36e:	4680      	mov	r8, r0
 800c370:	4689      	mov	r9, r1
 800c372:	dd70      	ble.n	800c456 <__kernel_rem_pio2+0x24a>
 800c374:	1e72      	subs	r2, r6, #1
 800c376:	ab0c      	add	r3, sp, #48	; 0x30
 800c378:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c37c:	9c04      	ldr	r4, [sp, #16]
 800c37e:	f1cb 0118 	rsb	r1, fp, #24
 800c382:	fa40 f301 	asr.w	r3, r0, r1
 800c386:	441c      	add	r4, r3
 800c388:	408b      	lsls	r3, r1
 800c38a:	1ac0      	subs	r0, r0, r3
 800c38c:	ab0c      	add	r3, sp, #48	; 0x30
 800c38e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c392:	f1cb 0317 	rsb	r3, fp, #23
 800c396:	9404      	str	r4, [sp, #16]
 800c398:	fa40 f303 	asr.w	r3, r0, r3
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	9b00      	ldr	r3, [sp, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	dd66      	ble.n	800c472 <__kernel_rem_pio2+0x266>
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c3aa:	4614      	mov	r4, r2
 800c3ac:	9b04      	ldr	r3, [sp, #16]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	4296      	cmp	r6, r2
 800c3b4:	f300 80ac 	bgt.w	800c510 <__kernel_rem_pio2+0x304>
 800c3b8:	f1bb 0f00 	cmp.w	fp, #0
 800c3bc:	dd07      	ble.n	800c3ce <__kernel_rem_pio2+0x1c2>
 800c3be:	f1bb 0f01 	cmp.w	fp, #1
 800c3c2:	f000 80b4 	beq.w	800c52e <__kernel_rem_pio2+0x322>
 800c3c6:	f1bb 0f02 	cmp.w	fp, #2
 800c3ca:	f000 80ba 	beq.w	800c542 <__kernel_rem_pio2+0x336>
 800c3ce:	9b00      	ldr	r3, [sp, #0]
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d14e      	bne.n	800c472 <__kernel_rem_pio2+0x266>
 800c3d4:	4642      	mov	r2, r8
 800c3d6:	464b      	mov	r3, r9
 800c3d8:	2000      	movs	r0, #0
 800c3da:	4948      	ldr	r1, [pc, #288]	; (800c4fc <__kernel_rem_pio2+0x2f0>)
 800c3dc:	f7f3 ff30 	bl	8000240 <__aeabi_dsub>
 800c3e0:	4680      	mov	r8, r0
 800c3e2:	4689      	mov	r9, r1
 800c3e4:	2c00      	cmp	r4, #0
 800c3e6:	d044      	beq.n	800c472 <__kernel_rem_pio2+0x266>
 800c3e8:	465a      	mov	r2, fp
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	4943      	ldr	r1, [pc, #268]	; (800c4fc <__kernel_rem_pio2+0x2f0>)
 800c3ee:	f000 fb8b 	bl	800cb08 <scalbn>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4640      	mov	r0, r8
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	f7f3 ff21 	bl	8000240 <__aeabi_dsub>
 800c3fe:	4680      	mov	r8, r0
 800c400:	4689      	mov	r9, r1
 800c402:	e036      	b.n	800c472 <__kernel_rem_pio2+0x266>
 800c404:	2200      	movs	r2, #0
 800c406:	4b3e      	ldr	r3, [pc, #248]	; (800c500 <__kernel_rem_pio2+0x2f4>)
 800c408:	4620      	mov	r0, r4
 800c40a:	4629      	mov	r1, r5
 800c40c:	f7f4 f8d0 	bl	80005b0 <__aeabi_dmul>
 800c410:	f7f4 fb68 	bl	8000ae4 <__aeabi_d2iz>
 800c414:	f7f4 f862 	bl	80004dc <__aeabi_i2d>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c420:	2200      	movs	r2, #0
 800c422:	4b38      	ldr	r3, [pc, #224]	; (800c504 <__kernel_rem_pio2+0x2f8>)
 800c424:	f7f4 f8c4 	bl	80005b0 <__aeabi_dmul>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4620      	mov	r0, r4
 800c42e:	4629      	mov	r1, r5
 800c430:	f7f3 ff06 	bl	8000240 <__aeabi_dsub>
 800c434:	f7f4 fb56 	bl	8000ae4 <__aeabi_d2iz>
 800c438:	9b00      	ldr	r3, [sp, #0]
 800c43a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c43e:	f843 0b04 	str.w	r0, [r3], #4
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c448:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c44c:	f7f3 fefa 	bl	8000244 <__adddf3>
 800c450:	4604      	mov	r4, r0
 800c452:	460d      	mov	r5, r1
 800c454:	e75f      	b.n	800c316 <__kernel_rem_pio2+0x10a>
 800c456:	d105      	bne.n	800c464 <__kernel_rem_pio2+0x258>
 800c458:	1e73      	subs	r3, r6, #1
 800c45a:	aa0c      	add	r2, sp, #48	; 0x30
 800c45c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c460:	15c3      	asrs	r3, r0, #23
 800c462:	e79b      	b.n	800c39c <__kernel_rem_pio2+0x190>
 800c464:	2200      	movs	r2, #0
 800c466:	4b28      	ldr	r3, [pc, #160]	; (800c508 <__kernel_rem_pio2+0x2fc>)
 800c468:	f7f4 fb28 	bl	8000abc <__aeabi_dcmpge>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d13e      	bne.n	800c4ee <__kernel_rem_pio2+0x2e2>
 800c470:	9000      	str	r0, [sp, #0]
 800c472:	2200      	movs	r2, #0
 800c474:	2300      	movs	r3, #0
 800c476:	4640      	mov	r0, r8
 800c478:	4649      	mov	r1, r9
 800c47a:	f7f4 fb01 	bl	8000a80 <__aeabi_dcmpeq>
 800c47e:	2800      	cmp	r0, #0
 800c480:	f000 80b1 	beq.w	800c5e6 <__kernel_rem_pio2+0x3da>
 800c484:	1e74      	subs	r4, r6, #1
 800c486:	4623      	mov	r3, r4
 800c488:	2200      	movs	r2, #0
 800c48a:	9902      	ldr	r1, [sp, #8]
 800c48c:	428b      	cmp	r3, r1
 800c48e:	da5f      	bge.n	800c550 <__kernel_rem_pio2+0x344>
 800c490:	2a00      	cmp	r2, #0
 800c492:	d074      	beq.n	800c57e <__kernel_rem_pio2+0x372>
 800c494:	ab0c      	add	r3, sp, #48	; 0x30
 800c496:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c49a:	f1ab 0b18 	sub.w	fp, fp, #24
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 809f 	beq.w	800c5e2 <__kernel_rem_pio2+0x3d6>
 800c4a4:	465a      	mov	r2, fp
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	4914      	ldr	r1, [pc, #80]	; (800c4fc <__kernel_rem_pio2+0x2f0>)
 800c4aa:	f000 fb2d 	bl	800cb08 <scalbn>
 800c4ae:	46a2      	mov	sl, r4
 800c4b0:	4606      	mov	r6, r0
 800c4b2:	460f      	mov	r7, r1
 800c4b4:	f04f 0800 	mov.w	r8, #0
 800c4b8:	ab70      	add	r3, sp, #448	; 0x1c0
 800c4ba:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c500 <__kernel_rem_pio2+0x2f4>
 800c4be:	00e5      	lsls	r5, r4, #3
 800c4c0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c4c4:	f1ba 0f00 	cmp.w	sl, #0
 800c4c8:	f280 80c3 	bge.w	800c652 <__kernel_rem_pio2+0x446>
 800c4cc:	4626      	mov	r6, r4
 800c4ce:	2e00      	cmp	r6, #0
 800c4d0:	f2c0 80f5 	blt.w	800c6be <__kernel_rem_pio2+0x4b2>
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <__kernel_rem_pio2+0x300>)
 800c4d6:	f04f 0a00 	mov.w	sl, #0
 800c4da:	9307      	str	r3, [sp, #28]
 800c4dc:	ab70      	add	r3, sp, #448	; 0x1c0
 800c4de:	f04f 0b00 	mov.w	fp, #0
 800c4e2:	f04f 0800 	mov.w	r8, #0
 800c4e6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c4ea:	1ba7      	subs	r7, r4, r6
 800c4ec:	e0db      	b.n	800c6a6 <__kernel_rem_pio2+0x49a>
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	e757      	b.n	800c3a4 <__kernel_rem_pio2+0x198>
 800c4f4:	080772e0 	.word	0x080772e0
 800c4f8:	40200000 	.word	0x40200000
 800c4fc:	3ff00000 	.word	0x3ff00000
 800c500:	3e700000 	.word	0x3e700000
 800c504:	41700000 	.word	0x41700000
 800c508:	3fe00000 	.word	0x3fe00000
 800c50c:	080772a0 	.word	0x080772a0
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	b944      	cbnz	r4, 800c526 <__kernel_rem_pio2+0x31a>
 800c514:	b11b      	cbz	r3, 800c51e <__kernel_rem_pio2+0x312>
 800c516:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c51a:	603b      	str	r3, [r7, #0]
 800c51c:	2301      	movs	r3, #1
 800c51e:	461c      	mov	r4, r3
 800c520:	3201      	adds	r2, #1
 800c522:	3704      	adds	r7, #4
 800c524:	e745      	b.n	800c3b2 <__kernel_rem_pio2+0x1a6>
 800c526:	1acb      	subs	r3, r1, r3
 800c528:	603b      	str	r3, [r7, #0]
 800c52a:	4623      	mov	r3, r4
 800c52c:	e7f7      	b.n	800c51e <__kernel_rem_pio2+0x312>
 800c52e:	1e72      	subs	r2, r6, #1
 800c530:	ab0c      	add	r3, sp, #48	; 0x30
 800c532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c536:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c53a:	a90c      	add	r1, sp, #48	; 0x30
 800c53c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c540:	e745      	b.n	800c3ce <__kernel_rem_pio2+0x1c2>
 800c542:	1e72      	subs	r2, r6, #1
 800c544:	ab0c      	add	r3, sp, #48	; 0x30
 800c546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c54e:	e7f4      	b.n	800c53a <__kernel_rem_pio2+0x32e>
 800c550:	a90c      	add	r1, sp, #48	; 0x30
 800c552:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c556:	3b01      	subs	r3, #1
 800c558:	430a      	orrs	r2, r1
 800c55a:	e796      	b.n	800c48a <__kernel_rem_pio2+0x27e>
 800c55c:	3401      	adds	r4, #1
 800c55e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c562:	2a00      	cmp	r2, #0
 800c564:	d0fa      	beq.n	800c55c <__kernel_rem_pio2+0x350>
 800c566:	9b08      	ldr	r3, [sp, #32]
 800c568:	f106 0801 	add.w	r8, r6, #1
 800c56c:	18f5      	adds	r5, r6, r3
 800c56e:	ab20      	add	r3, sp, #128	; 0x80
 800c570:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c574:	4434      	add	r4, r6
 800c576:	4544      	cmp	r4, r8
 800c578:	da04      	bge.n	800c584 <__kernel_rem_pio2+0x378>
 800c57a:	4626      	mov	r6, r4
 800c57c:	e6bf      	b.n	800c2fe <__kernel_rem_pio2+0xf2>
 800c57e:	2401      	movs	r4, #1
 800c580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c582:	e7ec      	b.n	800c55e <__kernel_rem_pio2+0x352>
 800c584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c586:	f04f 0900 	mov.w	r9, #0
 800c58a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c58e:	f7f3 ffa5 	bl	80004dc <__aeabi_i2d>
 800c592:	2600      	movs	r6, #0
 800c594:	2700      	movs	r7, #0
 800c596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c598:	e9c5 0100 	strd	r0, r1, [r5]
 800c59c:	3b08      	subs	r3, #8
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	9504      	str	r5, [sp, #16]
 800c5a2:	9b07      	ldr	r3, [sp, #28]
 800c5a4:	4599      	cmp	r9, r3
 800c5a6:	dd05      	ble.n	800c5b4 <__kernel_rem_pio2+0x3a8>
 800c5a8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c5ac:	f108 0801 	add.w	r8, r8, #1
 800c5b0:	3508      	adds	r5, #8
 800c5b2:	e7e0      	b.n	800c576 <__kernel_rem_pio2+0x36a>
 800c5b4:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c5b8:	9900      	ldr	r1, [sp, #0]
 800c5ba:	f109 0901 	add.w	r9, r9, #1
 800c5be:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c5c2:	9100      	str	r1, [sp, #0]
 800c5c4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c5c8:	f8cd c010 	str.w	ip, [sp, #16]
 800c5cc:	f7f3 fff0 	bl	80005b0 <__aeabi_dmul>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	4639      	mov	r1, r7
 800c5d8:	f7f3 fe34 	bl	8000244 <__adddf3>
 800c5dc:	4606      	mov	r6, r0
 800c5de:	460f      	mov	r7, r1
 800c5e0:	e7df      	b.n	800c5a2 <__kernel_rem_pio2+0x396>
 800c5e2:	3c01      	subs	r4, #1
 800c5e4:	e756      	b.n	800c494 <__kernel_rem_pio2+0x288>
 800c5e6:	f1cb 0200 	rsb	r2, fp, #0
 800c5ea:	4640      	mov	r0, r8
 800c5ec:	4649      	mov	r1, r9
 800c5ee:	f000 fa8b 	bl	800cb08 <scalbn>
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	4ba4      	ldr	r3, [pc, #656]	; (800c888 <__kernel_rem_pio2+0x67c>)
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	f7f4 fa5f 	bl	8000abc <__aeabi_dcmpge>
 800c5fe:	b1f8      	cbz	r0, 800c640 <__kernel_rem_pio2+0x434>
 800c600:	2200      	movs	r2, #0
 800c602:	4ba2      	ldr	r3, [pc, #648]	; (800c88c <__kernel_rem_pio2+0x680>)
 800c604:	4620      	mov	r0, r4
 800c606:	4629      	mov	r1, r5
 800c608:	f7f3 ffd2 	bl	80005b0 <__aeabi_dmul>
 800c60c:	f7f4 fa6a 	bl	8000ae4 <__aeabi_d2iz>
 800c610:	4607      	mov	r7, r0
 800c612:	f7f3 ff63 	bl	80004dc <__aeabi_i2d>
 800c616:	2200      	movs	r2, #0
 800c618:	4b9b      	ldr	r3, [pc, #620]	; (800c888 <__kernel_rem_pio2+0x67c>)
 800c61a:	f7f3 ffc9 	bl	80005b0 <__aeabi_dmul>
 800c61e:	460b      	mov	r3, r1
 800c620:	4602      	mov	r2, r0
 800c622:	4629      	mov	r1, r5
 800c624:	4620      	mov	r0, r4
 800c626:	f7f3 fe0b 	bl	8000240 <__aeabi_dsub>
 800c62a:	f7f4 fa5b 	bl	8000ae4 <__aeabi_d2iz>
 800c62e:	1c74      	adds	r4, r6, #1
 800c630:	ab0c      	add	r3, sp, #48	; 0x30
 800c632:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c636:	f10b 0b18 	add.w	fp, fp, #24
 800c63a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c63e:	e731      	b.n	800c4a4 <__kernel_rem_pio2+0x298>
 800c640:	4620      	mov	r0, r4
 800c642:	4629      	mov	r1, r5
 800c644:	f7f4 fa4e 	bl	8000ae4 <__aeabi_d2iz>
 800c648:	ab0c      	add	r3, sp, #48	; 0x30
 800c64a:	4634      	mov	r4, r6
 800c64c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c650:	e728      	b.n	800c4a4 <__kernel_rem_pio2+0x298>
 800c652:	ab0c      	add	r3, sp, #48	; 0x30
 800c654:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c658:	f7f3 ff40 	bl	80004dc <__aeabi_i2d>
 800c65c:	4632      	mov	r2, r6
 800c65e:	463b      	mov	r3, r7
 800c660:	f7f3 ffa6 	bl	80005b0 <__aeabi_dmul>
 800c664:	4642      	mov	r2, r8
 800c666:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c66a:	464b      	mov	r3, r9
 800c66c:	4630      	mov	r0, r6
 800c66e:	4639      	mov	r1, r7
 800c670:	f7f3 ff9e 	bl	80005b0 <__aeabi_dmul>
 800c674:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c678:	4606      	mov	r6, r0
 800c67a:	460f      	mov	r7, r1
 800c67c:	e722      	b.n	800c4c4 <__kernel_rem_pio2+0x2b8>
 800c67e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c682:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c686:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c68a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c68e:	f7f3 ff8f 	bl	80005b0 <__aeabi_dmul>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4650      	mov	r0, sl
 800c698:	4659      	mov	r1, fp
 800c69a:	f7f3 fdd3 	bl	8000244 <__adddf3>
 800c69e:	4682      	mov	sl, r0
 800c6a0:	468b      	mov	fp, r1
 800c6a2:	f108 0801 	add.w	r8, r8, #1
 800c6a6:	9b02      	ldr	r3, [sp, #8]
 800c6a8:	4598      	cmp	r8, r3
 800c6aa:	dc01      	bgt.n	800c6b0 <__kernel_rem_pio2+0x4a4>
 800c6ac:	45b8      	cmp	r8, r7
 800c6ae:	dde6      	ble.n	800c67e <__kernel_rem_pio2+0x472>
 800c6b0:	ab48      	add	r3, sp, #288	; 0x120
 800c6b2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c6b6:	e9c7 ab00 	strd	sl, fp, [r7]
 800c6ba:	3e01      	subs	r6, #1
 800c6bc:	e707      	b.n	800c4ce <__kernel_rem_pio2+0x2c2>
 800c6be:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	dc09      	bgt.n	800c6d8 <__kernel_rem_pio2+0x4cc>
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	dc32      	bgt.n	800c72e <__kernel_rem_pio2+0x522>
 800c6c8:	d05a      	beq.n	800c780 <__kernel_rem_pio2+0x574>
 800c6ca:	9b04      	ldr	r3, [sp, #16]
 800c6cc:	f003 0007 	and.w	r0, r3, #7
 800c6d0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d1f5      	bne.n	800c6ca <__kernel_rem_pio2+0x4be>
 800c6de:	ab48      	add	r3, sp, #288	; 0x120
 800c6e0:	441d      	add	r5, r3
 800c6e2:	46aa      	mov	sl, r5
 800c6e4:	46a3      	mov	fp, r4
 800c6e6:	f1bb 0f00 	cmp.w	fp, #0
 800c6ea:	dc76      	bgt.n	800c7da <__kernel_rem_pio2+0x5ce>
 800c6ec:	46aa      	mov	sl, r5
 800c6ee:	46a3      	mov	fp, r4
 800c6f0:	f1bb 0f01 	cmp.w	fp, #1
 800c6f4:	f300 8090 	bgt.w	800c818 <__kernel_rem_pio2+0x60c>
 800c6f8:	2700      	movs	r7, #0
 800c6fa:	463e      	mov	r6, r7
 800c6fc:	2c01      	cmp	r4, #1
 800c6fe:	f300 80aa 	bgt.w	800c856 <__kernel_rem_pio2+0x64a>
 800c702:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c706:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c70a:	9b00      	ldr	r3, [sp, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f040 80ac 	bne.w	800c86a <__kernel_rem_pio2+0x65e>
 800c712:	4603      	mov	r3, r0
 800c714:	462a      	mov	r2, r5
 800c716:	9806      	ldr	r0, [sp, #24]
 800c718:	e9c0 2300 	strd	r2, r3, [r0]
 800c71c:	4622      	mov	r2, r4
 800c71e:	460b      	mov	r3, r1
 800c720:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c724:	463a      	mov	r2, r7
 800c726:	4633      	mov	r3, r6
 800c728:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c72c:	e7cd      	b.n	800c6ca <__kernel_rem_pio2+0x4be>
 800c72e:	2000      	movs	r0, #0
 800c730:	46a0      	mov	r8, r4
 800c732:	4601      	mov	r1, r0
 800c734:	ab48      	add	r3, sp, #288	; 0x120
 800c736:	441d      	add	r5, r3
 800c738:	f1b8 0f00 	cmp.w	r8, #0
 800c73c:	da3a      	bge.n	800c7b4 <__kernel_rem_pio2+0x5a8>
 800c73e:	9b00      	ldr	r3, [sp, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d03e      	beq.n	800c7c2 <__kernel_rem_pio2+0x5b6>
 800c744:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c748:	4602      	mov	r2, r0
 800c74a:	462b      	mov	r3, r5
 800c74c:	9d06      	ldr	r5, [sp, #24]
 800c74e:	2601      	movs	r6, #1
 800c750:	e9c5 2300 	strd	r2, r3, [r5]
 800c754:	460b      	mov	r3, r1
 800c756:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c75a:	f7f3 fd71 	bl	8000240 <__aeabi_dsub>
 800c75e:	4684      	mov	ip, r0
 800c760:	460f      	mov	r7, r1
 800c762:	ad48      	add	r5, sp, #288	; 0x120
 800c764:	42b4      	cmp	r4, r6
 800c766:	f105 0508 	add.w	r5, r5, #8
 800c76a:	da2c      	bge.n	800c7c6 <__kernel_rem_pio2+0x5ba>
 800c76c:	9b00      	ldr	r3, [sp, #0]
 800c76e:	b10b      	cbz	r3, 800c774 <__kernel_rem_pio2+0x568>
 800c770:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c774:	4662      	mov	r2, ip
 800c776:	463b      	mov	r3, r7
 800c778:	9906      	ldr	r1, [sp, #24]
 800c77a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c77e:	e7a4      	b.n	800c6ca <__kernel_rem_pio2+0x4be>
 800c780:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c782:	ab48      	add	r3, sp, #288	; 0x120
 800c784:	4637      	mov	r7, r6
 800c786:	441d      	add	r5, r3
 800c788:	2c00      	cmp	r4, #0
 800c78a:	da09      	bge.n	800c7a0 <__kernel_rem_pio2+0x594>
 800c78c:	9b00      	ldr	r3, [sp, #0]
 800c78e:	b10b      	cbz	r3, 800c794 <__kernel_rem_pio2+0x588>
 800c790:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c794:	4632      	mov	r2, r6
 800c796:	463b      	mov	r3, r7
 800c798:	9906      	ldr	r1, [sp, #24]
 800c79a:	e9c1 2300 	strd	r2, r3, [r1]
 800c79e:	e794      	b.n	800c6ca <__kernel_rem_pio2+0x4be>
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c7a6:	4639      	mov	r1, r7
 800c7a8:	f7f3 fd4c 	bl	8000244 <__adddf3>
 800c7ac:	3c01      	subs	r4, #1
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	e7e9      	b.n	800c788 <__kernel_rem_pio2+0x57c>
 800c7b4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c7b8:	f7f3 fd44 	bl	8000244 <__adddf3>
 800c7bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7c0:	e7ba      	b.n	800c738 <__kernel_rem_pio2+0x52c>
 800c7c2:	460d      	mov	r5, r1
 800c7c4:	e7c0      	b.n	800c748 <__kernel_rem_pio2+0x53c>
 800c7c6:	4660      	mov	r0, ip
 800c7c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c7cc:	4639      	mov	r1, r7
 800c7ce:	f7f3 fd39 	bl	8000244 <__adddf3>
 800c7d2:	3601      	adds	r6, #1
 800c7d4:	4684      	mov	ip, r0
 800c7d6:	460f      	mov	r7, r1
 800c7d8:	e7c4      	b.n	800c764 <__kernel_rem_pio2+0x558>
 800c7da:	e9da 6700 	ldrd	r6, r7, [sl]
 800c7de:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800c7e2:	4632      	mov	r2, r6
 800c7e4:	463b      	mov	r3, r7
 800c7e6:	4640      	mov	r0, r8
 800c7e8:	4649      	mov	r1, r9
 800c7ea:	f7f3 fd2b 	bl	8000244 <__adddf3>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7f6:	4640      	mov	r0, r8
 800c7f8:	4649      	mov	r1, r9
 800c7fa:	f7f3 fd21 	bl	8000240 <__aeabi_dsub>
 800c7fe:	4632      	mov	r2, r6
 800c800:	463b      	mov	r3, r7
 800c802:	f7f3 fd1f 	bl	8000244 <__adddf3>
 800c806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c80a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c80e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c812:	e9ca 2300 	strd	r2, r3, [sl]
 800c816:	e766      	b.n	800c6e6 <__kernel_rem_pio2+0x4da>
 800c818:	e9da 8900 	ldrd	r8, r9, [sl]
 800c81c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c820:	4642      	mov	r2, r8
 800c822:	464b      	mov	r3, r9
 800c824:	4630      	mov	r0, r6
 800c826:	4639      	mov	r1, r7
 800c828:	f7f3 fd0c 	bl	8000244 <__adddf3>
 800c82c:	4602      	mov	r2, r0
 800c82e:	460b      	mov	r3, r1
 800c830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c834:	4630      	mov	r0, r6
 800c836:	4639      	mov	r1, r7
 800c838:	f7f3 fd02 	bl	8000240 <__aeabi_dsub>
 800c83c:	4642      	mov	r2, r8
 800c83e:	464b      	mov	r3, r9
 800c840:	f7f3 fd00 	bl	8000244 <__adddf3>
 800c844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c848:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c84c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c850:	e9ca 2300 	strd	r2, r3, [sl]
 800c854:	e74c      	b.n	800c6f0 <__kernel_rem_pio2+0x4e4>
 800c856:	4638      	mov	r0, r7
 800c858:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c85c:	4631      	mov	r1, r6
 800c85e:	f7f3 fcf1 	bl	8000244 <__adddf3>
 800c862:	3c01      	subs	r4, #1
 800c864:	4607      	mov	r7, r0
 800c866:	460e      	mov	r6, r1
 800c868:	e748      	b.n	800c6fc <__kernel_rem_pio2+0x4f0>
 800c86a:	9b06      	ldr	r3, [sp, #24]
 800c86c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c870:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c874:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c878:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c87c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c880:	601d      	str	r5, [r3, #0]
 800c882:	615e      	str	r6, [r3, #20]
 800c884:	e721      	b.n	800c6ca <__kernel_rem_pio2+0x4be>
 800c886:	bf00      	nop
 800c888:	41700000 	.word	0x41700000
 800c88c:	3e700000 	.word	0x3e700000

0800c890 <__kernel_sin>:
 800c890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c894:	b086      	sub	sp, #24
 800c896:	e9cd 2300 	strd	r2, r3, [sp]
 800c89a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c89e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c8a2:	4682      	mov	sl, r0
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c8a8:	da03      	bge.n	800c8b2 <__kernel_sin+0x22>
 800c8aa:	f7f4 f91b 	bl	8000ae4 <__aeabi_d2iz>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d050      	beq.n	800c954 <__kernel_sin+0xc4>
 800c8b2:	4652      	mov	r2, sl
 800c8b4:	4623      	mov	r3, r4
 800c8b6:	4650      	mov	r0, sl
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	f7f3 fe79 	bl	80005b0 <__aeabi_dmul>
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	4621      	mov	r1, r4
 800c8ca:	f7f3 fe71 	bl	80005b0 <__aeabi_dmul>
 800c8ce:	a33e      	add	r3, pc, #248	; (adr r3, 800c9c8 <__kernel_sin+0x138>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	4680      	mov	r8, r0
 800c8d6:	4689      	mov	r9, r1
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f3 fe68 	bl	80005b0 <__aeabi_dmul>
 800c8e0:	a33b      	add	r3, pc, #236	; (adr r3, 800c9d0 <__kernel_sin+0x140>)
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	f7f3 fcab 	bl	8000240 <__aeabi_dsub>
 800c8ea:	4632      	mov	r2, r6
 800c8ec:	463b      	mov	r3, r7
 800c8ee:	f7f3 fe5f 	bl	80005b0 <__aeabi_dmul>
 800c8f2:	a339      	add	r3, pc, #228	; (adr r3, 800c9d8 <__kernel_sin+0x148>)
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	f7f3 fca4 	bl	8000244 <__adddf3>
 800c8fc:	4632      	mov	r2, r6
 800c8fe:	463b      	mov	r3, r7
 800c900:	f7f3 fe56 	bl	80005b0 <__aeabi_dmul>
 800c904:	a336      	add	r3, pc, #216	; (adr r3, 800c9e0 <__kernel_sin+0x150>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	f7f3 fc99 	bl	8000240 <__aeabi_dsub>
 800c90e:	4632      	mov	r2, r6
 800c910:	463b      	mov	r3, r7
 800c912:	f7f3 fe4d 	bl	80005b0 <__aeabi_dmul>
 800c916:	a334      	add	r3, pc, #208	; (adr r3, 800c9e8 <__kernel_sin+0x158>)
 800c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91c:	f7f3 fc92 	bl	8000244 <__adddf3>
 800c920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c924:	b9dd      	cbnz	r5, 800c95e <__kernel_sin+0xce>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f3 fe3f 	bl	80005b0 <__aeabi_dmul>
 800c932:	a32f      	add	r3, pc, #188	; (adr r3, 800c9f0 <__kernel_sin+0x160>)
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f7f3 fc82 	bl	8000240 <__aeabi_dsub>
 800c93c:	4642      	mov	r2, r8
 800c93e:	464b      	mov	r3, r9
 800c940:	f7f3 fe36 	bl	80005b0 <__aeabi_dmul>
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	4650      	mov	r0, sl
 800c94a:	4621      	mov	r1, r4
 800c94c:	f7f3 fc7a 	bl	8000244 <__adddf3>
 800c950:	4682      	mov	sl, r0
 800c952:	460c      	mov	r4, r1
 800c954:	4650      	mov	r0, sl
 800c956:	4621      	mov	r1, r4
 800c958:	b006      	add	sp, #24
 800c95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c95e:	2200      	movs	r2, #0
 800c960:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c964:	4b24      	ldr	r3, [pc, #144]	; (800c9f8 <__kernel_sin+0x168>)
 800c966:	f7f3 fe23 	bl	80005b0 <__aeabi_dmul>
 800c96a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c96e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c972:	4640      	mov	r0, r8
 800c974:	4649      	mov	r1, r9
 800c976:	f7f3 fe1b 	bl	80005b0 <__aeabi_dmul>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c982:	f7f3 fc5d 	bl	8000240 <__aeabi_dsub>
 800c986:	4632      	mov	r2, r6
 800c988:	463b      	mov	r3, r7
 800c98a:	f7f3 fe11 	bl	80005b0 <__aeabi_dmul>
 800c98e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c992:	f7f3 fc55 	bl	8000240 <__aeabi_dsub>
 800c996:	a316      	add	r3, pc, #88	; (adr r3, 800c9f0 <__kernel_sin+0x160>)
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	4606      	mov	r6, r0
 800c99e:	460f      	mov	r7, r1
 800c9a0:	4640      	mov	r0, r8
 800c9a2:	4649      	mov	r1, r9
 800c9a4:	f7f3 fe04 	bl	80005b0 <__aeabi_dmul>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	f7f3 fc48 	bl	8000244 <__adddf3>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	4621      	mov	r1, r4
 800c9bc:	f7f3 fc40 	bl	8000240 <__aeabi_dsub>
 800c9c0:	e7c6      	b.n	800c950 <__kernel_sin+0xc0>
 800c9c2:	bf00      	nop
 800c9c4:	f3af 8000 	nop.w
 800c9c8:	5acfd57c 	.word	0x5acfd57c
 800c9cc:	3de5d93a 	.word	0x3de5d93a
 800c9d0:	8a2b9ceb 	.word	0x8a2b9ceb
 800c9d4:	3e5ae5e6 	.word	0x3e5ae5e6
 800c9d8:	57b1fe7d 	.word	0x57b1fe7d
 800c9dc:	3ec71de3 	.word	0x3ec71de3
 800c9e0:	19c161d5 	.word	0x19c161d5
 800c9e4:	3f2a01a0 	.word	0x3f2a01a0
 800c9e8:	1110f8a6 	.word	0x1110f8a6
 800c9ec:	3f811111 	.word	0x3f811111
 800c9f0:	55555549 	.word	0x55555549
 800c9f4:	3fc55555 	.word	0x3fc55555
 800c9f8:	3fe00000 	.word	0x3fe00000

0800c9fc <fabs>:
 800c9fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ca00:	4770      	bx	lr
 800ca02:	0000      	movs	r0, r0
 800ca04:	0000      	movs	r0, r0
	...

0800ca08 <floor>:
 800ca08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca0c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800ca10:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800ca14:	2e13      	cmp	r6, #19
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4607      	mov	r7, r0
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	4605      	mov	r5, r0
 800ca20:	dc33      	bgt.n	800ca8a <floor+0x82>
 800ca22:	2e00      	cmp	r6, #0
 800ca24:	da14      	bge.n	800ca50 <floor+0x48>
 800ca26:	a334      	add	r3, pc, #208	; (adr r3, 800caf8 <floor+0xf0>)
 800ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2c:	f7f3 fc0a 	bl	8000244 <__adddf3>
 800ca30:	2200      	movs	r2, #0
 800ca32:	2300      	movs	r3, #0
 800ca34:	f7f4 f84c 	bl	8000ad0 <__aeabi_dcmpgt>
 800ca38:	b138      	cbz	r0, 800ca4a <floor+0x42>
 800ca3a:	2c00      	cmp	r4, #0
 800ca3c:	da58      	bge.n	800caf0 <floor+0xe8>
 800ca3e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ca42:	431d      	orrs	r5, r3
 800ca44:	d001      	beq.n	800ca4a <floor+0x42>
 800ca46:	2500      	movs	r5, #0
 800ca48:	4c2d      	ldr	r4, [pc, #180]	; (800cb00 <floor+0xf8>)
 800ca4a:	4623      	mov	r3, r4
 800ca4c:	462f      	mov	r7, r5
 800ca4e:	e025      	b.n	800ca9c <floor+0x94>
 800ca50:	4a2c      	ldr	r2, [pc, #176]	; (800cb04 <floor+0xfc>)
 800ca52:	fa42 f806 	asr.w	r8, r2, r6
 800ca56:	ea01 0208 	and.w	r2, r1, r8
 800ca5a:	4302      	orrs	r2, r0
 800ca5c:	d01e      	beq.n	800ca9c <floor+0x94>
 800ca5e:	a326      	add	r3, pc, #152	; (adr r3, 800caf8 <floor+0xf0>)
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	f7f3 fbee 	bl	8000244 <__adddf3>
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	f7f4 f830 	bl	8000ad0 <__aeabi_dcmpgt>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d0ea      	beq.n	800ca4a <floor+0x42>
 800ca74:	2c00      	cmp	r4, #0
 800ca76:	bfbe      	ittt	lt
 800ca78:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ca7c:	fa43 f606 	asrlt.w	r6, r3, r6
 800ca80:	19a4      	addlt	r4, r4, r6
 800ca82:	2500      	movs	r5, #0
 800ca84:	ea24 0408 	bic.w	r4, r4, r8
 800ca88:	e7df      	b.n	800ca4a <floor+0x42>
 800ca8a:	2e33      	cmp	r6, #51	; 0x33
 800ca8c:	dd0a      	ble.n	800caa4 <floor+0x9c>
 800ca8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca92:	d103      	bne.n	800ca9c <floor+0x94>
 800ca94:	f7f3 fbd6 	bl	8000244 <__adddf3>
 800ca98:	4607      	mov	r7, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4638      	mov	r0, r7
 800ca9e:	4619      	mov	r1, r3
 800caa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caa4:	f04f 32ff 	mov.w	r2, #4294967295
 800caa8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800caac:	fa22 f808 	lsr.w	r8, r2, r8
 800cab0:	ea18 0f00 	tst.w	r8, r0
 800cab4:	d0f2      	beq.n	800ca9c <floor+0x94>
 800cab6:	a310      	add	r3, pc, #64	; (adr r3, 800caf8 <floor+0xf0>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	f7f3 fbc2 	bl	8000244 <__adddf3>
 800cac0:	2200      	movs	r2, #0
 800cac2:	2300      	movs	r3, #0
 800cac4:	f7f4 f804 	bl	8000ad0 <__aeabi_dcmpgt>
 800cac8:	2800      	cmp	r0, #0
 800caca:	d0be      	beq.n	800ca4a <floor+0x42>
 800cacc:	2c00      	cmp	r4, #0
 800cace:	da02      	bge.n	800cad6 <floor+0xce>
 800cad0:	2e14      	cmp	r6, #20
 800cad2:	d103      	bne.n	800cadc <floor+0xd4>
 800cad4:	3401      	adds	r4, #1
 800cad6:	ea25 0508 	bic.w	r5, r5, r8
 800cada:	e7b6      	b.n	800ca4a <floor+0x42>
 800cadc:	2301      	movs	r3, #1
 800cade:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cae2:	fa03 f606 	lsl.w	r6, r3, r6
 800cae6:	4435      	add	r5, r6
 800cae8:	42bd      	cmp	r5, r7
 800caea:	bf38      	it	cc
 800caec:	18e4      	addcc	r4, r4, r3
 800caee:	e7f2      	b.n	800cad6 <floor+0xce>
 800caf0:	2500      	movs	r5, #0
 800caf2:	462c      	mov	r4, r5
 800caf4:	e7a9      	b.n	800ca4a <floor+0x42>
 800caf6:	bf00      	nop
 800caf8:	8800759c 	.word	0x8800759c
 800cafc:	7e37e43c 	.word	0x7e37e43c
 800cb00:	bff00000 	.word	0xbff00000
 800cb04:	000fffff 	.word	0x000fffff

0800cb08 <scalbn>:
 800cb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800cb0e:	4604      	mov	r4, r0
 800cb10:	460d      	mov	r5, r1
 800cb12:	4617      	mov	r7, r2
 800cb14:	460b      	mov	r3, r1
 800cb16:	b996      	cbnz	r6, 800cb3e <scalbn+0x36>
 800cb18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb1c:	4303      	orrs	r3, r0
 800cb1e:	d039      	beq.n	800cb94 <scalbn+0x8c>
 800cb20:	4b33      	ldr	r3, [pc, #204]	; (800cbf0 <scalbn+0xe8>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	f7f3 fd44 	bl	80005b0 <__aeabi_dmul>
 800cb28:	4b32      	ldr	r3, [pc, #200]	; (800cbf4 <scalbn+0xec>)
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	429f      	cmp	r7, r3
 800cb2e:	460d      	mov	r5, r1
 800cb30:	da0f      	bge.n	800cb52 <scalbn+0x4a>
 800cb32:	a32b      	add	r3, pc, #172	; (adr r3, 800cbe0 <scalbn+0xd8>)
 800cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb38:	f7f3 fd3a 	bl	80005b0 <__aeabi_dmul>
 800cb3c:	e006      	b.n	800cb4c <scalbn+0x44>
 800cb3e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cb42:	4296      	cmp	r6, r2
 800cb44:	d10a      	bne.n	800cb5c <scalbn+0x54>
 800cb46:	4602      	mov	r2, r0
 800cb48:	f7f3 fb7c 	bl	8000244 <__adddf3>
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	460d      	mov	r5, r1
 800cb50:	e020      	b.n	800cb94 <scalbn+0x8c>
 800cb52:	460b      	mov	r3, r1
 800cb54:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cb58:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800cb5c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800cb60:	19b9      	adds	r1, r7, r6
 800cb62:	4291      	cmp	r1, r2
 800cb64:	dd0e      	ble.n	800cb84 <scalbn+0x7c>
 800cb66:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cb6a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800cb6e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cb72:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cb76:	4820      	ldr	r0, [pc, #128]	; (800cbf8 <scalbn+0xf0>)
 800cb78:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800cb7c:	a31a      	add	r3, pc, #104	; (adr r3, 800cbe8 <scalbn+0xe0>)
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	e7d9      	b.n	800cb38 <scalbn+0x30>
 800cb84:	2900      	cmp	r1, #0
 800cb86:	dd08      	ble.n	800cb9a <scalbn+0x92>
 800cb88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb90:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cb94:	4620      	mov	r0, r4
 800cb96:	4629      	mov	r1, r5
 800cb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb9a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800cb9e:	da12      	bge.n	800cbc6 <scalbn+0xbe>
 800cba0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cba4:	429f      	cmp	r7, r3
 800cba6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800cbaa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800cbae:	dcdc      	bgt.n	800cb6a <scalbn+0x62>
 800cbb0:	a30b      	add	r3, pc, #44	; (adr r3, 800cbe0 <scalbn+0xd8>)
 800cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800cbba:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800cbbe:	480f      	ldr	r0, [pc, #60]	; (800cbfc <scalbn+0xf4>)
 800cbc0:	f041 011f 	orr.w	r1, r1, #31
 800cbc4:	e7b8      	b.n	800cb38 <scalbn+0x30>
 800cbc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cbca:	3136      	adds	r1, #54	; 0x36
 800cbcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cbd0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	4629      	mov	r1, r5
 800cbd8:	2200      	movs	r2, #0
 800cbda:	4b09      	ldr	r3, [pc, #36]	; (800cc00 <scalbn+0xf8>)
 800cbdc:	e7ac      	b.n	800cb38 <scalbn+0x30>
 800cbde:	bf00      	nop
 800cbe0:	c2f8f359 	.word	0xc2f8f359
 800cbe4:	01a56e1f 	.word	0x01a56e1f
 800cbe8:	8800759c 	.word	0x8800759c
 800cbec:	7e37e43c 	.word	0x7e37e43c
 800cbf0:	43500000 	.word	0x43500000
 800cbf4:	ffff3cb0 	.word	0xffff3cb0
 800cbf8:	8800759c 	.word	0x8800759c
 800cbfc:	c2f8f359 	.word	0xc2f8f359
 800cc00:	3c900000 	.word	0x3c900000

0800cc04 <_init>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	bf00      	nop
 800cc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc0a:	bc08      	pop	{r3}
 800cc0c:	469e      	mov	lr, r3
 800cc0e:	4770      	bx	lr

0800cc10 <_fini>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	bf00      	nop
 800cc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc16:	bc08      	pop	{r3}
 800cc18:	469e      	mov	lr, r3
 800cc1a:	4770      	bx	lr
