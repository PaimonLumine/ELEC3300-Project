
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a6c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00023ce0  08008c58  08008c58  00018c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c938  0802c938  00040474  2**0
                  CONTENTS
  4 .ARM          00000008  0802c938  0802c938  0003c938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c940  0802c940  00040474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802c940  0802c940  0003c940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c948  0802c948  0003c948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  20000000  0802c94c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000474  0802cdc0  00040474  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0802cdc0  00040624  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040474  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116df  00000000  00000000  0004049d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352c  00000000  00000000  00051b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  000550a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00056280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a445  00000000  00000000  000572b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014296  00000000  00000000  000716fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008354d  00000000  00000000  00085993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108ee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee4  00000000  00000000  00108f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000474 	.word	0x20000474
 8000204:	00000000 	.word	0x00000000
 8000208:	08008c3c 	.word	0x08008c3c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000478 	.word	0x20000478
 8000224:	08008c3c 	.word	0x08008c3c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b976 	b.w	8000e78 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	4688      	mov	r8, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14d      	bne.n	8000c50 <__udivmoddi4+0xac>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	d968      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	b152      	cbz	r2, 8000bd6 <__udivmoddi4+0x32>
 8000bc0:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc4:	f1c2 0120 	rsb	r1, r2, #32
 8000bc8:	fa20 f101 	lsr.w	r1, r0, r1
 8000bcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd0:	ea41 0803 	orr.w	r8, r1, r3
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bda:	fbb8 f7f1 	udiv	r7, r8, r1
 8000bde:	fa1f fe8c 	uxth.w	lr, ip
 8000be2:	fb01 8817 	mls	r8, r1, r7, r8
 8000be6:	fb07 f00e 	mul.w	r0, r7, lr
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x66>
 8000bf4:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf8:	f107 35ff 	add.w	r5, r7, #4294967295
 8000bfc:	f080 811e 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f240 811b 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c06:	3f02      	subs	r7, #2
 8000c08:	4463      	add	r3, ip
 8000c0a:	1a1b      	subs	r3, r3, r0
 8000c0c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c10:	fb01 3310 	mls	r3, r1, r0, r3
 8000c14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c18:	b2a4      	uxth	r4, r4
 8000c1a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x94>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8109 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8106 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c34:	4464      	add	r4, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	2100      	movs	r1, #0
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa8>
 8000c44:	2300      	movs	r3, #0
 8000c46:	40d4      	lsrs	r4, r2
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	f000 80ee 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	e9c6 0500 	strd	r0, r5, [r6]
 8000c60:	4608      	mov	r0, r1
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	42ab      	cmp	r3, r5
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80fc 	bhi.w	8000e70 <__udivmoddi4+0x2cc>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	4698      	mov	r8, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d0e2      	beq.n	8000c4c <__udivmoddi4+0xa8>
 8000c86:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8a:	e7df      	b.n	8000c4c <__udivmoddi4+0xa8>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8091 	bne.w	8000dbc <__udivmoddi4+0x218>
 8000c9a:	eba1 000c 	sub.w	r0, r1, ip
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cac:	fb07 0013 	mls	r0, r7, r3, r0
 8000cb0:	0c25      	lsrs	r5, r4, #16
 8000cb2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	42a8      	cmp	r0, r5
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0505 	adds.w	r5, ip, r5
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	42a8      	cmp	r0, r5
 8000cca:	f200 80ce 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a2d      	subs	r5, r5, r0
 8000cd2:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cd6:	fb07 5510 	mls	r5, r7, r0, r5
 8000cda:	fb0e fe00 	mul.w	lr, lr, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80b6 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79e      	b.n	8000c42 <__udivmoddi4+0x9e>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fbba f8f9 	udiv	r8, sl, r9
 8000d1e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d22:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d26:	408d      	lsls	r5, r1
 8000d28:	fa1f fe8c 	uxth.w	lr, ip
 8000d2c:	431d      	orrs	r5, r3
 8000d2e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d32:	fb08 f00e 	mul.w	r0, r8, lr
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d3c:	42a0      	cmp	r0, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1a24      	subs	r4, r4, r0
 8000d5e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d62:	fb09 4410 	mls	r4, r9, r0, r4
 8000d66:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6a:	b2ad      	uxth	r5, r5
 8000d6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9502 	umull	r9, r5, r0, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2d0>
 8000da0:	ebb3 0208 	subs.w	r2, r3, r8
 8000da4:	eb64 040e 	sbc.w	r4, r4, lr
 8000da8:	fa22 f301 	lsr.w	r3, r2, r1
 8000dac:	fa04 f707 	lsl.w	r7, r4, r7
 8000db0:	431f      	orrs	r7, r3
 8000db2:	40cc      	lsrs	r4, r1
 8000db4:	e9c6 7400 	strd	r7, r4, [r6]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa8>
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	f1c2 0120 	rsb	r1, r2, #32
 8000dc4:	fa25 f301 	lsr.w	r3, r5, r1
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa20 f101 	lsr.w	r1, r0, r1
 8000dd0:	4095      	lsls	r5, r2
 8000dd2:	430d      	orrs	r5, r1
 8000dd4:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dd8:	fb07 3311 	mls	r3, r7, r1, r3
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	0c28      	lsrs	r0, r5, #16
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	fb01 f30e 	mul.w	r3, r1, lr
 8000dea:	4283      	cmp	r3, r0
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0000 	adds.w	r0, ip, r0
 8000df6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	4283      	cmp	r3, r0
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3902      	subs	r1, #2
 8000e02:	4460      	add	r0, ip
 8000e04:	1ac0      	subs	r0, r0, r3
 8000e06:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e0a:	fb07 0013 	mls	r0, r7, r3, r0
 8000e0e:	b2ad      	uxth	r5, r5
 8000e10:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e14:	fb03 f00e 	mul.w	r0, r3, lr
 8000e18:	42a8      	cmp	r0, r5
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e20:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	42a8      	cmp	r0, r5
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3b02      	subs	r3, #2
 8000e2c:	4465      	add	r5, ip
 8000e2e:	1a28      	subs	r0, r5, r0
 8000e30:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e707      	b.n	8000c4c <__udivmoddi4+0xa8>
 8000e3c:	462f      	mov	r7, r5
 8000e3e:	e6e4      	b.n	8000c0a <__udivmoddi4+0x66>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f9      	b.n	8000c38 <__udivmoddi4+0x94>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4643      	mov	r3, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4628      	mov	r0, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4641      	mov	r1, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	4464      	add	r4, ip
 8000e66:	3802      	subs	r0, #2
 8000e68:	e747      	b.n	8000cfa <__udivmoddi4+0x156>
 8000e6a:	3b02      	subs	r3, #2
 8000e6c:	4465      	add	r5, ip
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e706      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e74:	4631      	mov	r1, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa8>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <Check_touchkey>:
#include "UI.h"
#include "lcdtp.h"
#include "rtc.h"

uint8_t Check_touchkey(const int *constraints,
		strType_XPT2046_Coordinate *pDisplayCoordinate) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	8812      	ldrh	r2, [r2, #0]
			&& constraints[1] >= pDisplayCoordinate->x
			&& constraints[2] <= pDisplayCoordinate->y
			&& constraints[3] >= pDisplayCoordinate->y);
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	dc16      	bgt.n	8000ec0 <Check_touchkey+0x44>
			&& constraints[1] >= pDisplayCoordinate->x
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3304      	adds	r3, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	8812      	ldrh	r2, [r2, #0]
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	db0f      	blt.n	8000ec0 <Check_touchkey+0x44>
			&& constraints[2] <= pDisplayCoordinate->y
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	8852      	ldrh	r2, [r2, #2]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	dc08      	bgt.n	8000ec0 <Check_touchkey+0x44>
			&& constraints[3] >= pDisplayCoordinate->y);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	8852      	ldrh	r2, [r2, #2]
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	db01      	blt.n	8000ec0 <Check_touchkey+0x44>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <Check_touchkey+0x46>
 8000ec0:	2300      	movs	r3, #0
	uint8_t match = (constraints[0] <= pDisplayCoordinate->x
 8000ec2:	73fb      	strb	r3, [r7, #15]
	return match;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <Render>:

void Render(uint8_t *mode_new, uint8_t *render_status,
		const unsigned char *petStats) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
	//Not Render if done
	if (*render_status == 1)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d027      	beq.n	8000f34 <Render+0x64>
		return;

	//Mode 0 = Home, Mode 1 = Drink Water, Mode 2 = Toggle Dark Mode, Mode 3 = Stats,
	switch (*mode_new) {
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d81f      	bhi.n	8000f2c <Render+0x5c>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <Render+0x24>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000f05 	.word	0x08000f05
 8000ef8:	08000f0b 	.word	0x08000f0b
 8000efc:	08000f17 	.word	0x08000f17
 8000f00:	08000f23 	.word	0x08000f23
	case (0):
		UI_Home();
 8000f04:	f000 f862 	bl	8000fcc <UI_Home>
		break;
 8000f08:	e010      	b.n	8000f2c <Render+0x5c>
	case (1):
		UI_Drink_Water();
 8000f0a:	f000 f817 	bl	8000f3c <UI_Drink_Water>
		*mode_new = 0;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
		break;
 8000f14:	e00a      	b.n	8000f2c <Render+0x5c>
	case (2):
		LCD_Darkmode_Toggle();
 8000f16:	f001 f87b 	bl	8002010 <LCD_Darkmode_Toggle>
		*mode_new = 0;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
		break;
 8000f20:	e004      	b.n	8000f2c <Render+0x5c>
	case (3):
		UI_Stats();
 8000f22:	f000 f999 	bl	8001258 <UI_Stats>
		*mode_new = 3;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	701a      	strb	r2, [r3, #0]
	}
	*render_status = 1;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	e000      	b.n	8000f36 <Render+0x66>
		return;
 8000f34:	bf00      	nop
}
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <UI_Drink_Water>:

void UI_Drink_Water() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8000f40:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f44:	22f0      	movs	r2, #240	; 0xf0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 fd37 	bl	80019bc <LCD_Clear>

	LCD_DrawString(10, 150, "Drinked a glass of water");
 8000f4e:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <UI_Drink_Water+0x7c>)
 8000f50:	2196      	movs	r1, #150	; 0x96
 8000f52:	200a      	movs	r0, #10
 8000f54:	f000 fe2a 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(10, 250, "Return to home in 2s");
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <UI_Drink_Water+0x80>)
 8000f5a:	21fa      	movs	r1, #250	; 0xfa
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 fe25 	bl	8001bac <LCD_DrawString>
	HAL_Delay(1000);
 8000f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f66:	f004 fc8b 	bl	8005880 <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 8000f6a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f6e:	22f0      	movs	r2, #240	; 0xf0
 8000f70:	21fa      	movs	r1, #250	; 0xfa
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 fd22 	bl	80019bc <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 1s");
 8000f78:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <UI_Drink_Water+0x84>)
 8000f7a:	21fa      	movs	r1, #250	; 0xfa
 8000f7c:	200a      	movs	r0, #10
 8000f7e:	f000 fe15 	bl	8001bac <LCD_DrawString>
	HAL_Delay(1000);
 8000f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f86:	f004 fc7b 	bl	8005880 <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 8000f8a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f8e:	22f0      	movs	r2, #240	; 0xf0
 8000f90:	21fa      	movs	r1, #250	; 0xfa
 8000f92:	200a      	movs	r0, #10
 8000f94:	f000 fd12 	bl	80019bc <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 0s");
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <UI_Drink_Water+0x88>)
 8000f9a:	21fa      	movs	r1, #250	; 0xfa
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f000 fe05 	bl	8001bac <LCD_DrawString>
	HAL_Delay(1000);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa6:	f004 fc6b 	bl	8005880 <HAL_Delay>
	extern uint32_t lastdrink_raw;
	lastdrink_raw = RTC_raw();
 8000faa:	f003 fb29 	bl	8004600 <RTC_raw>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <UI_Drink_Water+0x8c>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	08008c58 	.word	0x08008c58
 8000fbc:	08008c74 	.word	0x08008c74
 8000fc0:	08008c8c 	.word	0x08008c8c
 8000fc4:	08008ca4 	.word	0x08008ca4
 8000fc8:	20000604 	.word	0x20000604

08000fcc <UI_Home>:

void UI_Home() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

	extern const unsigned char * petStats;
	UI_Home_Display_Button();
 8000fd0:	f000 f80e 	bl	8000ff0 <UI_Home_Display_Button>
	UI_Home_Display_Pet(60,70,petStats);
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <UI_Home+0x20>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2146      	movs	r1, #70	; 0x46
 8000fdc:	203c      	movs	r0, #60	; 0x3c
 8000fde:	f000 f8cb 	bl	8001178 <UI_Home_Display_Pet>
	UI_Home_Display_DHT11();
 8000fe2:	f000 f8db 	bl	800119c <UI_Home_Display_DHT11>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000

08000ff0 <UI_Home_Display_Button>:

void UI_Home_Display_Button(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8000ff4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ff8:	22f0      	movs	r2, #240	; 0xf0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 fcdd 	bl	80019bc <LCD_Clear>
	LCD_DrawString(2, 10, "Config");
 8001002:	4a19      	ldr	r2, [pc, #100]	; (8001068 <UI_Home_Display_Button+0x78>)
 8001004:	210a      	movs	r1, #10
 8001006:	2002      	movs	r0, #2
 8001008:	f000 fdd0 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(200, 10, "Stats");
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <UI_Home_Display_Button+0x7c>)
 800100e:	210a      	movs	r1, #10
 8001010:	20c8      	movs	r0, #200	; 0xc8
 8001012:	f000 fdcb 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(40, 220, "Set");
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <UI_Home_Display_Button+0x80>)
 8001018:	21dc      	movs	r1, #220	; 0xdc
 800101a:	2028      	movs	r0, #40	; 0x28
 800101c:	f000 fdc6 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(40, 240, "Exercise");
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <UI_Home_Display_Button+0x84>)
 8001022:	21f0      	movs	r1, #240	; 0xf0
 8001024:	2028      	movs	r0, #40	; 0x28
 8001026:	f000 fdc1 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(40, 260, "Timer");
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <UI_Home_Display_Button+0x88>)
 800102c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001030:	2028      	movs	r0, #40	; 0x28
 8001032:	f000 fdbb 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(140, 220, "Drink");
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <UI_Home_Display_Button+0x8c>)
 8001038:	21dc      	movs	r1, #220	; 0xdc
 800103a:	208c      	movs	r0, #140	; 0x8c
 800103c:	f000 fdb6 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(140, 240, "water");
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <UI_Home_Display_Button+0x90>)
 8001042:	21f0      	movs	r1, #240	; 0xf0
 8001044:	208c      	movs	r0, #140	; 0x8c
 8001046:	f000 fdb1 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(200, 260, "Dark");
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <UI_Home_Display_Button+0x94>)
 800104c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001050:	20c8      	movs	r0, #200	; 0xc8
 8001052:	f000 fdab 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(200, 280, "mode");
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <UI_Home_Display_Button+0x98>)
 8001058:	f44f 718c 	mov.w	r1, #280	; 0x118
 800105c:	20c8      	movs	r0, #200	; 0xc8
 800105e:	f000 fda5 	bl	8001bac <LCD_DrawString>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	08008cbc 	.word	0x08008cbc
 800106c:	08008cc4 	.word	0x08008cc4
 8001070:	08008ccc 	.word	0x08008ccc
 8001074:	08008cd0 	.word	0x08008cd0
 8001078:	08008cdc 	.word	0x08008cdc
 800107c:	08008ce4 	.word	0x08008ce4
 8001080:	08008cec 	.word	0x08008cec
 8001084:	08008cf4 	.word	0x08008cf4
 8001088:	08008cfc 	.word	0x08008cfc

0800108c <UI_Home_Display_Date>:

void UI_Home_Display_Date(uint16_t year, uint8_t month, uint8_t day) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	460b      	mov	r3, r1
 8001098:	717b      	strb	r3, [r7, #5]
 800109a:	4613      	mov	r3, r2
 800109c:	713b      	strb	r3, [r7, #4]
	char str[10];

	//Draw Year
	sprintf(str, "%04i", year);
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4915      	ldr	r1, [pc, #84]	; (80010fc <UI_Home_Display_Date+0x70>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 f826 	bl	80040f8 <sprintf_>
	LCD_DrawString(86, 10, str);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	461a      	mov	r2, r3
 80010b2:	210a      	movs	r1, #10
 80010b4:	2056      	movs	r0, #86	; 0x56
 80010b6:	f000 fd79 	bl	8001bac <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", month);
 80010ba:	797a      	ldrb	r2, [r7, #5]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	490f      	ldr	r1, [pc, #60]	; (8001100 <UI_Home_Display_Date+0x74>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 f818 	bl	80040f8 <sprintf_>
	LCD_DrawString(125, 10, str);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	461a      	mov	r2, r3
 80010ce:	210a      	movs	r1, #10
 80010d0:	207d      	movs	r0, #125	; 0x7d
 80010d2:	f000 fd6b 	bl	8001bac <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", day);
 80010d6:	793a      	ldrb	r2, [r7, #4]
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4908      	ldr	r1, [pc, #32]	; (8001100 <UI_Home_Display_Date+0x74>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 f80a 	bl	80040f8 <sprintf_>
	LCD_DrawString(145, 10, str);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	461a      	mov	r2, r3
 80010ea:	210a      	movs	r1, #10
 80010ec:	2091      	movs	r0, #145	; 0x91
 80010ee:	f000 fd5d 	bl	8001bac <LCD_DrawString>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	08008d04 	.word	0x08008d04
 8001100:	08008d0c 	.word	0x08008d0c

08001104 <UI_Home_Display_Time>:

void UI_Home_Display_Time(uint8_t hour, uint8_t minute, uint8_t second) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	460b      	mov	r3, r1
 8001110:	71bb      	strb	r3, [r7, #6]
 8001112:	4613      	mov	r3, r2
 8001114:	717b      	strb	r3, [r7, #5]
	char str[10];

	//Draw Year
	sprintf(str, "%02i", hour);
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4915      	ldr	r1, [pc, #84]	; (8001174 <UI_Home_Display_Time+0x70>)
 800111e:	4618      	mov	r0, r3
 8001120:	f002 ffea 	bl	80040f8 <sprintf_>
	LCD_DrawString(95, 30, str);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	461a      	mov	r2, r3
 800112a:	211e      	movs	r1, #30
 800112c:	205f      	movs	r0, #95	; 0x5f
 800112e:	f000 fd3d 	bl	8001bac <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", minute);
 8001132:	79ba      	ldrb	r2, [r7, #6]
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	490e      	ldr	r1, [pc, #56]	; (8001174 <UI_Home_Display_Time+0x70>)
 800113a:	4618      	mov	r0, r3
 800113c:	f002 ffdc 	bl	80040f8 <sprintf_>
	LCD_DrawString(115, 30, str);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	461a      	mov	r2, r3
 8001146:	211e      	movs	r1, #30
 8001148:	2073      	movs	r0, #115	; 0x73
 800114a:	f000 fd2f 	bl	8001bac <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", second);
 800114e:	797a      	ldrb	r2, [r7, #5]
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <UI_Home_Display_Time+0x70>)
 8001156:	4618      	mov	r0, r3
 8001158:	f002 ffce 	bl	80040f8 <sprintf_>
	LCD_DrawString(135, 30, str);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	461a      	mov	r2, r3
 8001162:	211e      	movs	r1, #30
 8001164:	2087      	movs	r0, #135	; 0x87
 8001166:	f000 fd21 	bl	8001bac <LCD_DrawString>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	08008d0c 	.word	0x08008d0c

08001178 <UI_Home_Display_Pet>:

void UI_Home_Display_Pet(uint16_t StartX, uint16_t StartY, unsigned char *pic) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	603a      	str	r2, [r7, #0]
 8001182:	80fb      	strh	r3, [r7, #6]
 8001184:	460b      	mov	r3, r1
 8001186:	80bb      	strh	r3, [r7, #4]

	LCD_DrawPicture(StartX, StartY, pic);
 8001188:	88b9      	ldrh	r1, [r7, #4]
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 ff5e 	bl	8002050 <LCD_DrawPicture>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <UI_Home_Display_DHT11>:

void UI_Home_Display_DHT11() {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
	extern DHT11_datastruct DHT11_data;
	char Stemp[10];
	char Shum[10];
	sprintf(Stemp, "%02i", DHT11_data.temp_int);
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <UI_Home_Display_DHT11+0xa0>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	461a      	mov	r2, r3
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4924      	ldr	r1, [pc, #144]	; (8001240 <UI_Home_Display_DHT11+0xa4>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 ffa2 	bl	80040f8 <sprintf_>
	LCD_DrawString(10, 50, "T");
 80011b4:	4a23      	ldr	r2, [pc, #140]	; (8001244 <UI_Home_Display_DHT11+0xa8>)
 80011b6:	2132      	movs	r1, #50	; 0x32
 80011b8:	200a      	movs	r0, #10
 80011ba:	f000 fcf7 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(0, 70, Stemp);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	461a      	mov	r2, r3
 80011c4:	2146      	movs	r1, #70	; 0x46
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 fcf0 	bl	8001bac <LCD_DrawString>
	if (LCD_GetPointPixel(240, 320) == 0x000000) {
 80011cc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80011d0:	20f0      	movs	r0, #240	; 0xf0
 80011d2:	f000 fc77 	bl	8001ac4 <LCD_GetPointPixel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d107      	bne.n	80011ec <UI_Home_Display_DHT11+0x50>
		LCD_DrawCircle(17, 72, 2, WHITE);
 80011dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e0:	2202      	movs	r2, #2
 80011e2:	2148      	movs	r1, #72	; 0x48
 80011e4:	2011      	movs	r0, #17
 80011e6:	f000 fd2f 	bl	8001c48 <LCD_DrawCircle>
 80011ea:	e005      	b.n	80011f8 <UI_Home_Display_DHT11+0x5c>
	} else {
		LCD_DrawCircle(17, 72, 2, BLACK);
 80011ec:	2300      	movs	r3, #0
 80011ee:	2202      	movs	r2, #2
 80011f0:	2148      	movs	r1, #72	; 0x48
 80011f2:	2011      	movs	r0, #17
 80011f4:	f000 fd28 	bl	8001c48 <LCD_DrawCircle>
	}
	LCD_DrawString(20, 70, "C");
 80011f8:	4a13      	ldr	r2, [pc, #76]	; (8001248 <UI_Home_Display_DHT11+0xac>)
 80011fa:	2146      	movs	r1, #70	; 0x46
 80011fc:	2014      	movs	r0, #20
 80011fe:	f000 fcd5 	bl	8001bac <LCD_DrawString>
	sprintf(Shum, "%03i", DHT11_data.humid_int);
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <UI_Home_Display_DHT11+0xa0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	463b      	mov	r3, r7
 800120a:	4910      	ldr	r1, [pc, #64]	; (800124c <UI_Home_Display_DHT11+0xb0>)
 800120c:	4618      	mov	r0, r3
 800120e:	f002 ff73 	bl	80040f8 <sprintf_>
	LCD_DrawString(220, 50, "H");
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <UI_Home_Display_DHT11+0xb4>)
 8001214:	2132      	movs	r1, #50	; 0x32
 8001216:	20dc      	movs	r0, #220	; 0xdc
 8001218:	f000 fcc8 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(205, 70, Shum);
 800121c:	463b      	mov	r3, r7
 800121e:	461a      	mov	r2, r3
 8001220:	2146      	movs	r1, #70	; 0x46
 8001222:	20cd      	movs	r0, #205	; 0xcd
 8001224:	f000 fcc2 	bl	8001bac <LCD_DrawString>
	LCD_DrawString(230, 70, "%");
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <UI_Home_Display_DHT11+0xb8>)
 800122a:	2146      	movs	r1, #70	; 0x46
 800122c:	20e6      	movs	r0, #230	; 0xe6
 800122e:	f000 fcbd 	bl	8001bac <LCD_DrawString>

}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200005ec 	.word	0x200005ec
 8001240:	08008d0c 	.word	0x08008d0c
 8001244:	08008d14 	.word	0x08008d14
 8001248:	08008d18 	.word	0x08008d18
 800124c:	08008d1c 	.word	0x08008d1c
 8001250:	08008d24 	.word	0x08008d24
 8001254:	08008d28 	.word	0x08008d28

08001258 <UI_Stats>:

void UI_Stats() {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 800125c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001260:	22f0      	movs	r2, #240	; 0xf0
 8001262:	2100      	movs	r1, #0
 8001264:	2000      	movs	r0, #0
 8001266:	f000 fba9 	bl	80019bc <LCD_Clear>
	LCD_DrawString(40, 50, "Time since last drink");
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <UI_Stats+0x38>)
 800126c:	2132      	movs	r1, #50	; 0x32
 800126e:	2028      	movs	r0, #40	; 0x28
 8001270:	f000 fc9c 	bl	8001bac <LCD_DrawString>

	UI_Stats_Update();
 8001274:	f000 f812 	bl	800129c <UI_Stats_Update>
	LCD_DrawString(80, 125, "Next drink");
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <UI_Stats+0x3c>)
 800127a:	217d      	movs	r1, #125	; 0x7d
 800127c:	2050      	movs	r0, #80	; 0x50
 800127e:	f000 fc95 	bl	8001bac <LCD_DrawString>
	//TODO: Time Of Next Water Drinking Event
	LCD_DrawString(70, 200, "Back to home");
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <UI_Stats+0x40>)
 8001284:	21c8      	movs	r1, #200	; 0xc8
 8001286:	2046      	movs	r0, #70	; 0x46
 8001288:	f000 fc90 	bl	8001bac <LCD_DrawString>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	08008d2c 	.word	0x08008d2c
 8001294:	08008d44 	.word	0x08008d44
 8001298:	08008d50 	.word	0x08008d50

0800129c <UI_Stats_Update>:
void UI_Stats_Update() {
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af02      	add	r7, sp, #8
	extern uint32_t lastupdate_raw, lastdrink_raw;
	uint32_t realtime_raw = RTC_raw();
 80012a2:	f003 f9ad 	bl	8004600 <RTC_raw>
 80012a6:	6178      	str	r0, [r7, #20]

	if(realtime_raw == lastupdate_raw) return;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <UI_Stats_Update+0x84>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d032      	beq.n	8001318 <UI_Stats_Update+0x7c>
	uint32_t time_diff = realtime_raw - lastdrink_raw;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <UI_Stats_Update+0x88>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	613b      	str	r3, [r7, #16]

	//Update New Last Drink
	lastupdate_raw = realtime_raw;
 80012bc:	4a18      	ldr	r2, [pc, #96]	; (8001320 <UI_Stats_Update+0x84>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	6013      	str	r3, [r2, #0]

	char timestr[15];
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <UI_Stats_Update+0x8c>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0adc      	lsrs	r4, r3, #11
			(time_diff % 3600) / 60, time_diff % 60);
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <UI_Stats_Update+0x8c>)
 80012d0:	fba3 1302 	umull	r1, r3, r3, r2
 80012d4:	0adb      	lsrs	r3, r3, #11
 80012d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	1ad3      	subs	r3, r2, r3
	sprintf(timestr, "%02d : %02d : %02d", time_diff / 3600,
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <UI_Stats_Update+0x90>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	095d      	lsrs	r5, r3, #5
 80012e8:	6939      	ldr	r1, [r7, #16]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <UI_Stats_Update+0x90>)
 80012ec:	fba3 2301 	umull	r2, r3, r3, r1
 80012f0:	095a      	lsrs	r2, r3, #5
 80012f2:	4613      	mov	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	1aca      	subs	r2, r1, r3
 80012fc:	4638      	mov	r0, r7
 80012fe:	9200      	str	r2, [sp, #0]
 8001300:	462b      	mov	r3, r5
 8001302:	4622      	mov	r2, r4
 8001304:	490a      	ldr	r1, [pc, #40]	; (8001330 <UI_Stats_Update+0x94>)
 8001306:	f002 fef7 	bl	80040f8 <sprintf_>
	LCD_DrawString(75, 85, timestr);
 800130a:	463b      	mov	r3, r7
 800130c:	461a      	mov	r2, r3
 800130e:	2155      	movs	r1, #85	; 0x55
 8001310:	204b      	movs	r0, #75	; 0x4b
 8001312:	f000 fc4b 	bl	8001bac <LCD_DrawString>
 8001316:	e000      	b.n	800131a <UI_Stats_Update+0x7e>
	if(realtime_raw == lastupdate_raw) return;
 8001318:	bf00      	nop
}
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bdb0      	pop	{r4, r5, r7, pc}
 8001320:	20000600 	.word	0x20000600
 8001324:	20000604 	.word	0x20000604
 8001328:	91a2b3c5 	.word	0x91a2b3c5
 800132c:	88888889 	.word	0x88888889
 8001330:	08008d60 	.word	0x08008d60

08001334 <DHT11_IO_OUT>:
#include "dht11.h"
#include "printf.h"
#include "timer.h"

void DHT11_IO_OUT(void) //Set Pin As Output
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001346:	2340      	movs	r3, #64	; 0x40
 8001348:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <DHT11_IO_OUT+0x34>)
 800135c:	f004 fbbe 	bl	8005adc <HAL_GPIO_Init>
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40011800 	.word	0x40011800

0800136c <DHT11_IO_IN>:

void DHT11_IO_IN(void) //Set Pin As Input
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800137e:	2340      	movs	r3, #64	; 0x40
 8001380:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001386:	2301      	movs	r3, #1
 8001388:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <DHT11_IO_IN+0x30>)
 8001390:	f004 fba4 	bl	8005adc <HAL_GPIO_Init>
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40011800 	.word	0x40011800

080013a0 <DHT11_RST>:

void DHT11_RST(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	DHT11_IO_OUT();
 80013a4:	f7ff ffc6 	bl	8001334 <DHT11_IO_OUT>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2140      	movs	r1, #64	; 0x40
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <DHT11_RST+0x2c>)
 80013ae:	f004 fd44 	bl	8005e3a <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80013b2:	2014      	movs	r0, #20
 80013b4:	f004 fa64 	bl	8005880 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <DHT11_RST+0x2c>)
 80013be:	f004 fd3c 	bl	8005e3a <HAL_GPIO_WritePin>
	delay_us(30);
 80013c2:	201e      	movs	r0, #30
 80013c4:	f003 fb60 	bl	8004a88 <delay_us>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40011800 	.word	0x40011800

080013d0 <Dht11_Check>:

uint8_t Dht11_Check(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
	DHT11_IO_IN();
 80013da:	f7ff ffc7 	bl	800136c <DHT11_IO_IN>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 80013de:	e005      	b.n	80013ec <Dht11_Check+0x1c>
		++retry;
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	3301      	adds	r3, #1
 80013e4:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f003 fb4e 	bl	8004a88 <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	4815      	ldr	r0, [pc, #84]	; (8001444 <Dht11_Check+0x74>)
 80013f0:	f004 fd0c 	bl	8005e0c <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <Dht11_Check+0x30>
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b63      	cmp	r3, #99	; 0x63
 80013fe:	d9ef      	bls.n	80013e0 <Dht11_Check+0x10>
	}
	if(retry>=100)return 1; else retry=0;
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b63      	cmp	r3, #99	; 0x63
 8001404:	d901      	bls.n	800140a <Dht11_Check+0x3a>
 8001406:	2301      	movs	r3, #1
 8001408:	e018      	b.n	800143c <Dht11_Check+0x6c>
 800140a:	2300      	movs	r3, #0
 800140c:	71fb      	strb	r3, [r7, #7]
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 800140e:	e005      	b.n	800141c <Dht11_Check+0x4c>
		++retry;
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	3301      	adds	r3, #1
 8001414:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f003 fb36 	bl	8004a88 <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)&&retry<100){
 800141c:	2140      	movs	r1, #64	; 0x40
 800141e:	4809      	ldr	r0, [pc, #36]	; (8001444 <Dht11_Check+0x74>)
 8001420:	f004 fcf4 	bl	8005e0c <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <Dht11_Check+0x60>
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b63      	cmp	r3, #99	; 0x63
 800142e:	d9ef      	bls.n	8001410 <Dht11_Check+0x40>
	}
	if(retry>=100)return 1;
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b63      	cmp	r3, #99	; 0x63
 8001434:	d901      	bls.n	800143a <Dht11_Check+0x6a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <Dht11_Check+0x6c>
	return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40011800 	.word	0x40011800

08001448 <DHT11_Init>:

uint8_t DHT11_Init(){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	DHT11_RST();
 800144c:	f7ff ffa8 	bl	80013a0 <DHT11_RST>
	return Dht11_Check();
 8001450:	f7ff ffbe 	bl	80013d0 <Dht11_Check>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
	//Wait For Last Set signal end
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001466:	e005      	b.n	8001474 <DHT11_ReadBit+0x18>
		++retry;
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3301      	adds	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f003 fb0a 	bl	8004a88 <delay_us>
	while(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 8001474:	2140      	movs	r1, #64	; 0x40
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <DHT11_ReadBit+0x74>)
 8001478:	f004 fcc8 	bl	8005e0c <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <DHT11_ReadBit+0x2c>
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b63      	cmp	r3, #99	; 0x63
 8001486:	d9ef      	bls.n	8001468 <DHT11_ReadBit+0xc>
	}
	retry = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	71fb      	strb	r3, [r7, #7]
	//Wait For New Set Signal Begin
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 800148c:	e005      	b.n	800149a <DHT11_ReadBit+0x3e>
		++retry;
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	3301      	adds	r3, #1
 8001492:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001494:	2001      	movs	r0, #1
 8001496:	f003 faf7 	bl	8004a88 <delay_us>
	while(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6) &&retry<100){
 800149a:	2140      	movs	r1, #64	; 0x40
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <DHT11_ReadBit+0x74>)
 800149e:	f004 fcb5 	bl	8005e0c <HAL_GPIO_ReadPin>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <DHT11_ReadBit+0x52>
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b63      	cmp	r3, #99	; 0x63
 80014ac:	d9ef      	bls.n	800148e <DHT11_ReadBit+0x32>
	}
	//0: 26-28us   1:70us
	delay_us(40);
 80014ae:	2028      	movs	r0, #40	; 0x28
 80014b0:	f003 faea 	bl	8004a88 <delay_us>
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_6)) return 1; else return 0;
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <DHT11_ReadBit+0x74>)
 80014b8:	f004 fca8 	bl	8005e0c <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <DHT11_ReadBit+0x6a>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <DHT11_ReadBit+0x6c>
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40011800 	.word	0x40011800

080014d4 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	uint8_t i,dat;
	dat=0;
 80014da:	2300      	movs	r3, #0
 80014dc:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 80014de:	2300      	movs	r3, #0
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	e00c      	b.n	80014fe <DHT11_ReadByte+0x2a>
		dat<<=1;
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	71bb      	strb	r3, [r7, #6]
		dat|=DHT11_ReadBit();
 80014ea:	f7ff ffb7 	bl	800145c <DHT11_ReadBit>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	79bb      	ldrb	r3, [r7, #6]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++){
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	3301      	adds	r3, #1
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b07      	cmp	r3, #7
 8001502:	d9ef      	bls.n	80014e4 <DHT11_ReadByte+0x10>
	}
	return dat;
 8001504:	79bb      	ldrb	r3, [r7, #6]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <DHT11_ReadData>:


uint8_t DHT11_ReadData(DHT11_datastruct *ds){
 800150e:	b590      	push	{r4, r7, lr}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	uint8_t buf[5];
	uint8_t i;
	//Reset and Check
	if(DHT11_Init()==0){
 8001516:	f7ff ff97 	bl	8001448 <DHT11_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d133      	bne.n	8001588 <DHT11_ReadData+0x7a>
		for(i=0;i<5;++i){
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e00c      	b.n	8001540 <DHT11_ReadData+0x32>
			buf[i]=DHT11_ReadByte();
 8001526:	7bfc      	ldrb	r4, [r7, #15]
 8001528:	f7ff ffd4 	bl	80014d4 <DHT11_ReadByte>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	f104 0310 	add.w	r3, r4, #16
 8001534:	443b      	add	r3, r7
 8001536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(i=0;i<5;++i){
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	3301      	adds	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2b04      	cmp	r3, #4
 8001544:	d9ef      	bls.n	8001526 <DHT11_ReadData+0x18>
		}
	//i=0,1  = humidity  00.11
	//i=2,3  = temperature 22.33
	//i=4    = Check Sum 0+1+2+3==4
		ds->humid_int = buf[0];
 8001546:	7a3a      	ldrb	r2, [r7, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	701a      	strb	r2, [r3, #0]
		ds->humid_dec = buf[1];
 800154c:	7a7a      	ldrb	r2, [r7, #9]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	705a      	strb	r2, [r3, #1]
		ds->temp_int = buf[2];
 8001552:	7aba      	ldrb	r2, [r7, #10]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	709a      	strb	r2, [r3, #2]
		ds->temp_dec = buf[3];
 8001558:	7afa      	ldrb	r2, [r7, #11]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	70da      	strb	r2, [r3, #3]
		ds->check_sum = buf[4];
 800155e:	7b3a      	ldrb	r2, [r7, #12]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	711a      	strb	r2, [r3, #4]
		if(ds->humid_int + ds->humid_dec + ds->temp_int + ds->temp_dec != ds->check_sum){
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	785b      	ldrb	r3, [r3, #1]
 800156e:	4413      	add	r3, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	7892      	ldrb	r2, [r2, #2]
 8001574:	4413      	add	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	78d2      	ldrb	r2, [r2, #3]
 800157a:	4413      	add	r3, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	7912      	ldrb	r2, [r2, #4]
 8001580:	4293      	cmp	r3, r2
 8001582:	d003      	beq.n	800158c <DHT11_ReadData+0x7e>
			//Wrong Data
			return 0;
 8001584:	2300      	movs	r3, #0
 8001586:	e002      	b.n	800158e <DHT11_ReadData+0x80>
		}
	}else return 1;//Success
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <DHT11_ReadData+0x80>
	return 0;//Not Responding
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}

08001596 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	e002      	b.n	80015a6 <Delay+0x10>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f9      	bne.n	80015a0 <Delay+0xa>
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <LCD_INIT>:
uint8_t darkmode_toggle = 0;


void LCD_INIT ( void )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 80015bc:	2001      	movs	r0, #1
 80015be:	f000 f825 	bl	800160c <LCD_BackLed_Control>
	LCD_Rst();
 80015c2:	f000 f80b 	bl	80015dc <LCD_Rst>
	LCD_REG_Config();
 80015c6:	f000 f867 	bl	8001698 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 80015ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015ce:	22f0      	movs	r2, #240	; 0xf0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f9f2 	bl	80019bc <LCD_Clear>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <LCD_Rst>:


void LCD_Rst ( void )
{			
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2102      	movs	r1, #2
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <LCD_Rst+0x28>)
 80015e6:	f004 fc28 	bl	8005e3a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <LCD_Rst+0x2c>)
 80015ec:	f7ff ffd3 	bl	8001596 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2102      	movs	r1, #2
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <LCD_Rst+0x28>)
 80015f6:	f004 fc20 	bl	8005e3a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <LCD_Rst+0x2c>)
 80015fc:	f7ff ffcb 	bl	8001596 <Delay>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40011800 	.word	0x40011800
 8001608:	0002bffc 	.word	0x0002bffc

0800160c <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <LCD_BackLed_Control+0x34>)
 8001624:	f004 fc09 	bl	8005e3a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001628:	e005      	b.n	8001636 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800162a:	2201      	movs	r2, #1
 800162c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <LCD_BackLed_Control+0x34>)
 8001632:	f004 fc02 	bl	8005e3a <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40011400 	.word	0x40011400

08001644 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800164e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	8013      	strh	r3, [r2, #0]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <LCD_Write_Data+0x1c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	8013      	strh	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	60020000 	.word	0x60020000

08001680 <LCD_Read_Data>:


uint16_t LCD_Read_Data ( void )
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <LCD_Read_Data+0x14>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	60020000 	.word	0x60020000

08001698 <LCD_REG_Config>:


void LCD_REG_Config ( void )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800169c:	20cf      	movs	r0, #207	; 0xcf
 800169e:	f7ff ffd1 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff ffdc 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80016a8:	2081      	movs	r0, #129	; 0x81
 80016aa:	f7ff ffd9 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80016ae:	2030      	movs	r0, #48	; 0x30
 80016b0:	f7ff ffd6 	bl	8001660 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80016b4:	20ed      	movs	r0, #237	; 0xed
 80016b6:	f7ff ffc5 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80016ba:	2064      	movs	r0, #100	; 0x64
 80016bc:	f7ff ffd0 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80016c0:	2003      	movs	r0, #3
 80016c2:	f7ff ffcd 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80016c6:	2012      	movs	r0, #18
 80016c8:	f7ff ffca 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80016cc:	2081      	movs	r0, #129	; 0x81
 80016ce:	f7ff ffc7 	bl	8001660 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80016d2:	20e8      	movs	r0, #232	; 0xe8
 80016d4:	f7ff ffb6 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80016d8:	2085      	movs	r0, #133	; 0x85
 80016da:	f7ff ffc1 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80016de:	2010      	movs	r0, #16
 80016e0:	f7ff ffbe 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80016e4:	2078      	movs	r0, #120	; 0x78
 80016e6:	f7ff ffbb 	bl	8001660 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80016ea:	20cb      	movs	r0, #203	; 0xcb
 80016ec:	f7ff ffaa 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80016f0:	2039      	movs	r0, #57	; 0x39
 80016f2:	f7ff ffb5 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80016f6:	202c      	movs	r0, #44	; 0x2c
 80016f8:	f7ff ffb2 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff ffaf 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001702:	2034      	movs	r0, #52	; 0x34
 8001704:	f7ff ffac 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001708:	2002      	movs	r0, #2
 800170a:	f7ff ffa9 	bl	8001660 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800170e:	20f7      	movs	r0, #247	; 0xf7
 8001710:	f7ff ff98 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001714:	2020      	movs	r0, #32
 8001716:	f7ff ffa3 	bl	8001660 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800171a:	20ea      	movs	r0, #234	; 0xea
 800171c:	f7ff ff92 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff ff9d 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff ff9a 	bl	8001660 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 800172c:	20b1      	movs	r0, #177	; 0xb1
 800172e:	f7ff ff89 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff ff94 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001738:	201b      	movs	r0, #27
 800173a:	f7ff ff91 	bl	8001660 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800173e:	20b6      	movs	r0, #182	; 0xb6
 8001740:	f7ff ff80 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001744:	200a      	movs	r0, #10
 8001746:	f7ff ff8b 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800174a:	20a2      	movs	r0, #162	; 0xa2
 800174c:	f7ff ff88 	bl	8001660 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001750:	20c0      	movs	r0, #192	; 0xc0
 8001752:	f7ff ff77 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001756:	2035      	movs	r0, #53	; 0x35
 8001758:	f7ff ff82 	bl	8001660 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 800175c:	20c1      	movs	r0, #193	; 0xc1
 800175e:	f7ff ff71 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001762:	2011      	movs	r0, #17
 8001764:	f7ff ff7c 	bl	8001660 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001768:	20c5      	movs	r0, #197	; 0xc5
 800176a:	f7ff ff6b 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800176e:	2045      	movs	r0, #69	; 0x45
 8001770:	f7ff ff76 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001774:	2045      	movs	r0, #69	; 0x45
 8001776:	f7ff ff73 	bl	8001660 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800177a:	20c7      	movs	r0, #199	; 0xc7
 800177c:	f7ff ff62 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001780:	20a2      	movs	r0, #162	; 0xa2
 8001782:	f7ff ff6d 	bl	8001660 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001786:	20f2      	movs	r0, #242	; 0xf2
 8001788:	f7ff ff5c 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff ff67 	bl	8001660 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001792:	2026      	movs	r0, #38	; 0x26
 8001794:	f7ff ff56 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff ff61 	bl	8001660 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800179e:	20e0      	movs	r0, #224	; 0xe0
 80017a0:	f7ff ff50 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80017a4:	200f      	movs	r0, #15
 80017a6:	f7ff ff5b 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80017aa:	2026      	movs	r0, #38	; 0x26
 80017ac:	f7ff ff58 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80017b0:	2024      	movs	r0, #36	; 0x24
 80017b2:	f7ff ff55 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80017b6:	200b      	movs	r0, #11
 80017b8:	f7ff ff52 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80017bc:	200e      	movs	r0, #14
 80017be:	f7ff ff4f 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80017c2:	2009      	movs	r0, #9
 80017c4:	f7ff ff4c 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80017c8:	2054      	movs	r0, #84	; 0x54
 80017ca:	f7ff ff49 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80017ce:	20a8      	movs	r0, #168	; 0xa8
 80017d0:	f7ff ff46 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80017d4:	2046      	movs	r0, #70	; 0x46
 80017d6:	f7ff ff43 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80017da:	200c      	movs	r0, #12
 80017dc:	f7ff ff40 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80017e0:	2017      	movs	r0, #23
 80017e2:	f7ff ff3d 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80017e6:	2009      	movs	r0, #9
 80017e8:	f7ff ff3a 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80017ec:	200f      	movs	r0, #15
 80017ee:	f7ff ff37 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80017f2:	2007      	movs	r0, #7
 80017f4:	f7ff ff34 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff ff31 	bl	8001660 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80017fe:	20e1      	movs	r0, #225	; 0xe1
 8001800:	f7ff ff20 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff ff2b 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800180a:	2019      	movs	r0, #25
 800180c:	f7ff ff28 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001810:	201b      	movs	r0, #27
 8001812:	f7ff ff25 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001816:	2004      	movs	r0, #4
 8001818:	f7ff ff22 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800181c:	2010      	movs	r0, #16
 800181e:	f7ff ff1f 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001822:	2007      	movs	r0, #7
 8001824:	f7ff ff1c 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001828:	202a      	movs	r0, #42	; 0x2a
 800182a:	f7ff ff19 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800182e:	2047      	movs	r0, #71	; 0x47
 8001830:	f7ff ff16 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001834:	2039      	movs	r0, #57	; 0x39
 8001836:	f7ff ff13 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800183a:	2003      	movs	r0, #3
 800183c:	f7ff ff10 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001840:	2006      	movs	r0, #6
 8001842:	f7ff ff0d 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001846:	2006      	movs	r0, #6
 8001848:	f7ff ff0a 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 800184c:	2030      	movs	r0, #48	; 0x30
 800184e:	f7ff ff07 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001852:	2038      	movs	r0, #56	; 0x38
 8001854:	f7ff ff04 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001858:	200f      	movs	r0, #15
 800185a:	f7ff ff01 	bl	8001660 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800185e:	2036      	movs	r0, #54	; 0x36
 8001860:	f7ff fef0 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001864:	20c8      	movs	r0, #200	; 0xc8
 8001866:	f7ff fefb 	bl	8001660 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800186a:	202a      	movs	r0, #42	; 0x2a
 800186c:	f7ff feea 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fef5 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff fef2 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff feef 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001882:	20ef      	movs	r0, #239	; 0xef
 8001884:	f7ff feec 	bl	8001660 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001888:	202b      	movs	r0, #43	; 0x2b
 800188a:	f7ff fedb 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff fee6 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff fee3 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff fee0 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80018a0:	203f      	movs	r0, #63	; 0x3f
 80018a2:	f7ff fedd 	bl	8001660 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80018a6:	203a      	movs	r0, #58	; 0x3a
 80018a8:	f7ff fecc 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80018ac:	2055      	movs	r0, #85	; 0x55
 80018ae:	f7ff fed7 	bl	8001660 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80018b2:	2011      	movs	r0, #17
 80018b4:	f7ff fec6 	bl	8001644 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <LCD_REG_Config+0x230>)
 80018ba:	f7ff fe6c 	bl	8001596 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80018be:	2029      	movs	r0, #41	; 0x29
 80018c0:	f7ff fec0 	bl	8001644 <LCD_Write_Cmd>
	
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	0002bffc 	.word	0x0002bffc

080018cc <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	4603      	mov	r3, r0
 80018e0:	80bb      	strh	r3, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	807b      	strh	r3, [r7, #2]
 80018e6:	4613      	mov	r3, r2
 80018e8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80018ea:	202a      	movs	r0, #42	; 0x2a
 80018ec:	f7ff feaa 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff feb2 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff feac 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	4413      	add	r3, r2
 800190e:	3b01      	subs	r3, #1
 8001910:	121b      	asrs	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fea3 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	4413      	add	r3, r2
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	b29b      	uxth	r3, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fe98 	bl	8001660 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001930:	202b      	movs	r0, #43	; 0x2b
 8001932:	f7ff fe87 	bl	8001644 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	b29b      	uxth	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fe8f 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	b29b      	uxth	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fe89 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800194e:	88ba      	ldrh	r2, [r7, #4]
 8001950:	883b      	ldrh	r3, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	3b01      	subs	r3, #1
 8001956:	121b      	asrs	r3, r3, #8
 8001958:	b29b      	uxth	r3, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fe80 	bl	8001660 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001960:	88ba      	ldrh	r2, [r7, #4]
 8001962:	883b      	ldrh	r3, [r7, #0]
 8001964:	4413      	add	r3, r2
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fe75 	bl	8001660 <LCD_Write_Data>
	
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}

0800197e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800198e:	202c      	movs	r0, #44	; 0x2c
 8001990:	f7ff fe58 	bl	8001644 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e006      	b.n	80019a8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe5f 	bl	8001660 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d3f4      	bcc.n	800199a <LCD_FillColor+0x1c>
		
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4604      	mov	r4, r0
 80019c4:	4608      	mov	r0, r1
 80019c6:	4611      	mov	r1, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	80fb      	strh	r3, [r7, #6]
 80019ce:	4603      	mov	r3, r0
 80019d0:	80bb      	strh	r3, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	807b      	strh	r3, [r7, #2]
 80019d6:	4613      	mov	r3, r2
 80019d8:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <LCD_Clear+0x58>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <LCD_Clear+0x2a>
 80019e2:	2300      	movs	r3, #0
 80019e4:	e001      	b.n	80019ea <LCD_Clear+0x2e>
 80019e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ea:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80019ec:	883b      	ldrh	r3, [r7, #0]
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	88b9      	ldrh	r1, [r7, #4]
 80019f2:	88f8      	ldrh	r0, [r7, #6]
 80019f4:	f7ff ff6a 	bl	80018cc <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	883a      	ldrh	r2, [r7, #0]
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f7ff ffb9 	bl	800197e <LCD_FillColor>
	
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd90      	pop	{r4, r7, pc}
 8001a14:	20000490 	.word	0x20000490

08001a18 <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4604      	mov	r4, r0
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4623      	mov	r3, r4
 8001a28:	80fb      	strh	r3, [r7, #6]
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80bb      	strh	r3, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	807b      	strh	r3, [r7, #2]
 8001a32:	4613      	mov	r3, r2
 8001a34:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001a36:	883b      	ldrh	r3, [r7, #0]
 8001a38:	887a      	ldrh	r2, [r7, #2]
 8001a3a:	88b9      	ldrh	r1, [r7, #4]
 8001a3c:	88f8      	ldrh	r0, [r7, #6]
 8001a3e:	f7ff ff45 	bl	80018cc <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	883a      	ldrh	r2, [r7, #0]
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	8b3b      	ldrh	r3, [r7, #24]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f7ff ff94 	bl	800197e <LCD_FillColor>
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd90      	pop	{r4, r7, pc}

08001a5e <LCD_Read_PixelData>:

uint16_t LCD_Read_PixelData ( void )	
{	
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
	uint16_t usR=0, usG=0, usB=0 ;
 8001a64:	2300      	movs	r3, #0
 8001a66:	80fb      	strh	r3, [r7, #6]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	80bb      	strh	r3, [r7, #4]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	807b      	strh	r3, [r7, #2]

	
	LCD_Write_Cmd ( 0x2E ); 
 8001a70:	202e      	movs	r0, #46	; 0x2e
 8001a72:	f7ff fde7 	bl	8001644 <LCD_Write_Cmd>
	
	usR = LCD_Read_Data (); 	/*FIRST READ OUT DUMMY DATA*/
 8001a76:	f7ff fe03 	bl	8001680 <LCD_Read_Data>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
	
	usR = LCD_Read_Data ();  	/*READ OUT RED DATA  */
 8001a7e:	f7ff fdff 	bl	8001680 <LCD_Read_Data>
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]
	usB = LCD_Read_Data ();  	/*READ OUT BLUE DATA*/
 8001a86:	f7ff fdfb 	bl	8001680 <LCD_Read_Data>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	807b      	strh	r3, [r7, #2]
	usG = LCD_Read_Data ();  	/*READ OUT GREEN DATA*/	
 8001a8e:	f7ff fdf7 	bl	8001680 <LCD_Read_Data>
 8001a92:	4603      	mov	r3, r0
 8001a94:	80bb      	strh	r3, [r7, #4]
	
  return ( ( ( usR >> 11 ) << 11 ) | ( ( usG >> 10 ) << 5 ) | ( usB >> 11 ) );
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	0adb      	lsrs	r3, r3, #11
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	02db      	lsls	r3, r3, #11
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	015b      	lsls	r3, r3, #5
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	0adb      	lsrs	r3, r3, #11
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	b29b      	uxth	r3, r3
	
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <LCD_GetPointPixel>:


uint16_t LCD_GetPointPixel ( uint16_t usCOLUMN, uint16_t usPAGE )
{ 
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	460a      	mov	r2, r1
 8001ace:	80fb      	strh	r3, [r7, #6]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	80bb      	strh	r3, [r7, #4]
	uint16_t usPixelData;

	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 8001ad4:	88b9      	ldrh	r1, [r7, #4]
 8001ad6:	88f8      	ldrh	r0, [r7, #6]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	2201      	movs	r2, #1
 8001adc:	f7ff fef6 	bl	80018cc <LCD_OpenWindow>
	
	usPixelData = LCD_Read_PixelData ();
 8001ae0:	f7ff ffbd 	bl	8001a5e <LCD_Read_PixelData>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	81fb      	strh	r3, [r7, #14]
	
	return usPixelData;
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
	
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
 8001afe:	460b      	mov	r3, r1
 8001b00:	80bb      	strh	r3, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <LCD_DrawChar+0xb0>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <LCD_DrawChar+0x20>
 8001b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b12:	e000      	b.n	8001b16 <LCD_DrawChar+0x22>
 8001b14:	2300      	movs	r3, #0
 8001b16:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <LCD_DrawChar+0xb0>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <LCD_DrawChar+0x30>
 8001b20:	2300      	movs	r3, #0
 8001b22:	e001      	b.n	8001b28 <LCD_DrawChar+0x34>
 8001b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b28:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	3b20      	subs	r3, #32
 8001b2e:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001b30:	88b9      	ldrh	r1, [r7, #4]
 8001b32:	88f8      	ldrh	r0, [r7, #6]
 8001b34:	2310      	movs	r3, #16
 8001b36:	2208      	movs	r2, #8
 8001b38:	f7ff fec8 	bl	80018cc <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001b3c:	202c      	movs	r0, #44	; 0x2c
 8001b3e:	f7ff fd81 	bl	8001644 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001b42:	2300      	movs	r3, #0
 8001b44:	75bb      	strb	r3, [r7, #22]
 8001b46:	e024      	b.n	8001b92 <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	7dbb      	ldrb	r3, [r7, #22]
 8001b4c:	4916      	ldr	r1, [pc, #88]	; (8001ba8 <LCD_DrawChar+0xb4>)
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	440a      	add	r2, r1
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001b58:	2300      	movs	r3, #0
 8001b5a:	757b      	strb	r3, [r7, #21]
 8001b5c:	e013      	b.n	8001b86 <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 8001b68:	8a7b      	ldrh	r3, [r7, #18]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fd78 	bl	8001660 <LCD_Write_Data>
 8001b70:	e003      	b.n	8001b7a <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 8001b72:	8a3b      	ldrh	r3, [r7, #16]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fd73 	bl	8001660 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001b80:	7d7b      	ldrb	r3, [r7, #21]
 8001b82:	3301      	adds	r3, #1
 8001b84:	757b      	strb	r3, [r7, #21]
 8001b86:	7d7b      	ldrb	r3, [r7, #21]
 8001b88:	2b07      	cmp	r3, #7
 8001b8a:	d9e8      	bls.n	8001b5e <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001b8c:	7dbb      	ldrb	r3, [r7, #22]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	75bb      	strb	r3, [r7, #22]
 8001b92:	7dbb      	ldrb	r3, [r7, #22]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d9d7      	bls.n	8001b48 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000490 	.word	0x20000490
 8001ba8:	08008dec 	.word	0x08008dec

08001bac <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	603a      	str	r2, [r7, #0]
 8001bb6:	80fb      	strh	r3, [r7, #6]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001bbc:	e01c      	b.n	8001bf8 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2be8      	cmp	r3, #232	; 0xe8
 8001bc2:	d904      	bls.n	8001bce <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001bc8:	88bb      	ldrh	r3, [r7, #4]
 8001bca:	3310      	adds	r3, #16
 8001bcc:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001bce:	88bb      	ldrh	r3, [r7, #4]
 8001bd0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001bd4:	d903      	bls.n	8001bde <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	88b9      	ldrh	r1, [r7, #4]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff84 	bl	8001af4 <LCD_DrawChar>
		
		pStr ++;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1de      	bne.n	8001bbe <LCD_DrawString+0x12>
		
	}
	
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	80fb      	strh	r3, [r7, #6]
 8001c14:	460b      	mov	r3, r1
 8001c16:	80bb      	strh	r3, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	2bef      	cmp	r3, #239	; 0xef
 8001c20:	d809      	bhi.n	8001c36 <LCD_DrawDot+0x2c>
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c28:	d205      	bcs.n	8001c36 <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 8001c2a:	88b9      	ldrh	r1, [r7, #4]
 8001c2c:	88f8      	ldrh	r0, [r7, #6]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	2201      	movs	r2, #1
 8001c32:	f7ff fe4b 	bl	80018cc <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f7ff fe9f 	bl	800197e <LCD_FillColor>

}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <LCD_DrawCircle>:

void LCD_DrawCircle ( uint16_t usC, uint16_t usP, uint16_t R, uint16_t usColor)
{	
 8001c48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4604      	mov	r4, r0
 8001c52:	4608      	mov	r0, r1
 8001c54:	4611      	mov	r1, r2
 8001c56:	461a      	mov	r2, r3
 8001c58:	4623      	mov	r3, r4
 8001c5a:	80fb      	strh	r3, [r7, #6]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80bb      	strh	r3, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
 8001c64:	4613      	mov	r3, r2
 8001c66:	803b      	strh	r3, [r7, #0]
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001c74:	e05a      	b.n	8001d2c <LCD_DrawCircle+0xe4>
			int x = usC + R*cos(i);
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc2f 	bl	80004dc <__aeabi_i2d>
 8001c7e:	4604      	mov	r4, r0
 8001c80:	460d      	mov	r5, r1
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc29 	bl	80004dc <__aeabi_i2d>
 8001c8a:	4680      	mov	r8, r0
 8001c8c:	4689      	mov	r9, r1
 8001c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c92:	f005 ff95 	bl	8007bc0 <cos>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4640      	mov	r0, r8
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	f7fe fc87 	bl	80005b0 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe facb 	bl	8000244 <__adddf3>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ff15 	bl	8000ae4 <__aeabi_d2iz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60fb      	str	r3, [r7, #12]
			int y = usP + R*sin(i);
 8001cbe:	88bb      	ldrh	r3, [r7, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc0b 	bl	80004dc <__aeabi_i2d>
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	460d      	mov	r5, r1
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc05 	bl	80004dc <__aeabi_i2d>
 8001cd2:	4680      	mov	r8, r0
 8001cd4:	4689      	mov	r9, r1
 8001cd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cda:	f005 ffb7 	bl	8007c4c <sin>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4640      	mov	r0, r8
 8001ce4:	4649      	mov	r1, r9
 8001ce6:	f7fe fc63 	bl	80005b0 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4620      	mov	r0, r4
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	f7fe faa7 	bl	8000244 <__adddf3>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe fef1 	bl	8000ae4 <__aeabi_d2iz>
 8001d02:	4603      	mov	r3, r0
 8001d04:	60bb      	str	r3, [r7, #8]
			LCD_DrawDot(x,y,usColor);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	b291      	uxth	r1, r2
 8001d0e:	883a      	ldrh	r2, [r7, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff7a 	bl	8001c0a <LCD_DrawDot>
	for (double i = 0; i < 2*3.14159265358979323846; i = i + 0.01){
 8001d16:	a30e      	add	r3, pc, #56	; (adr r3, 8001d50 <LCD_DrawCircle+0x108>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d20:	f7fe fa90 	bl	8000244 <__adddf3>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d2c:	a30a      	add	r3, pc, #40	; (adr r3, 8001d58 <LCD_DrawCircle+0x110>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d36:	f7fe fead 	bl	8000a94 <__aeabi_dcmplt>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d19a      	bne.n	8001c76 <LCD_DrawCircle+0x2e>
		}
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d4c:	f3af 8000 	nop.w
 8001d50:	47ae147b 	.word	0x47ae147b
 8001d54:	3f847ae1 	.word	0x3f847ae1
 8001d58:	54442d18 	.word	0x54442d18
 8001d5c:	401921fb 	.word	0x401921fb

08001d60 <LCD_DrawChar_Color>:

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4604      	mov	r4, r0
 8001d68:	4608      	mov	r0, r1
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4623      	mov	r3, r4
 8001d70:	80fb      	strh	r3, [r7, #6]
 8001d72:	4603      	mov	r3, r0
 8001d74:	80bb      	strh	r3, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	3b20      	subs	r3, #32
 8001d82:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001d84:	88b9      	ldrh	r1, [r7, #4]
 8001d86:	88f8      	ldrh	r0, [r7, #6]
 8001d88:	2310      	movs	r3, #16
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	f7ff fd9e 	bl	80018cc <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001d90:	202c      	movs	r0, #44	; 0x2c
 8001d92:	f7ff fc57 	bl	8001644 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001d96:	2300      	movs	r3, #0
 8001d98:	73bb      	strb	r3, [r7, #14]
 8001d9a:	e024      	b.n	8001de6 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001d9c:	7b3a      	ldrb	r2, [r7, #12]
 8001d9e:	7bbb      	ldrb	r3, [r7, #14]
 8001da0:	4915      	ldr	r1, [pc, #84]	; (8001df8 <LCD_DrawChar_Color+0x98>)
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	440a      	add	r2, r1
 8001da6:	4413      	add	r3, r2
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001dac:	2300      	movs	r3, #0
 8001dae:	737b      	strb	r3, [r7, #13]
 8001db0:	e013      	b.n	8001dda <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8001dbc:	8c3b      	ldrh	r3, [r7, #32]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fc4e 	bl	8001660 <LCD_Write_Data>
 8001dc4:	e003      	b.n	8001dce <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8001dc6:	883b      	ldrh	r3, [r7, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fc49 	bl	8001660 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	737b      	strb	r3, [r7, #13]
 8001dda:	7b7b      	ldrb	r3, [r7, #13]
 8001ddc:	2b07      	cmp	r3, #7
 8001dde:	d9e8      	bls.n	8001db2 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	3301      	adds	r3, #1
 8001de4:	73bb      	strb	r3, [r7, #14]
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d9d7      	bls.n	8001d9c <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08008dec 	.word	0x08008dec

08001dfc <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	4603      	mov	r3, r0
 8001e04:	460a      	mov	r2, r1
 8001e06:	80fb      	strh	r3, [r7, #6]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80bb      	strh	r3, [r7, #4]
  LCD_Clear_Color ( usX - 10, usY, 20, 1, RED);
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	3b0a      	subs	r3, #10
 8001e10:	b298      	uxth	r0, r3
 8001e12:	88b9      	ldrh	r1, [r7, #4]
 8001e14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	2214      	movs	r2, #20
 8001e1e:	f7ff fdfb 	bl	8001a18 <LCD_Clear_Color>
  LCD_Clear_Color ( usX, usY - 10, 1, 20, RED);
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	3b0a      	subs	r3, #10
 8001e26:	b299      	uxth	r1, r3
 8001e28:	88f8      	ldrh	r0, [r7, #6]
 8001e2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2314      	movs	r3, #20
 8001e32:	2201      	movs	r2, #1
 8001e34:	f7ff fdf0 	bl	8001a18 <LCD_Clear_Color>
	
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60ba      	str	r2, [r7, #8]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	81fb      	strh	r3, [r7, #14]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	81bb      	strh	r3, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001e56:	e01f      	b.n	8001e98 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001e58:	89fb      	ldrh	r3, [r7, #14]
 8001e5a:	2be8      	cmp	r3, #232	; 0xe8
 8001e5c:	d904      	bls.n	8001e68 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8001e62:	89bb      	ldrh	r3, [r7, #12]
 8001e64:	3310      	adds	r3, #16
 8001e66:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001e68:	89bb      	ldrh	r3, [r7, #12]
 8001e6a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001e6e:	d903      	bls.n	8001e78 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001e70:	2300      	movs	r3, #0
 8001e72:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	88fc      	ldrh	r4, [r7, #6]
 8001e7e:	89b9      	ldrh	r1, [r7, #12]
 8001e80:	89f8      	ldrh	r0, [r7, #14]
 8001e82:	8c3b      	ldrh	r3, [r7, #32]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	4623      	mov	r3, r4
 8001e88:	f7ff ff6a 	bl	8001d60 <LCD_DrawChar_Color>
		
		pStr ++;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	3308      	adds	r3, #8
 8001e96:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1db      	bne.n	8001e58 <LCD_DrawString_Color+0x18>
		
	}
	
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
	...

08001eac <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	f200 80a0 	bhi.w	8002000 <LCD_GramScan+0x154>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <LCD_GramScan+0x1c>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001ed9 	.word	0x08001ed9
 8001ecc:	08001f23 	.word	0x08001f23
 8001ed0:	08001f6d 	.word	0x08001f6d
 8001ed4:	08001fb7 	.word	0x08001fb7

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001ed8:	2036      	movs	r0, #54	; 0x36
 8001eda:	f7ff fbb3 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 8001ede:	20c8      	movs	r0, #200	; 0xc8
 8001ee0:	f7ff fbbe 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001ee4:	202a      	movs	r0, #42	; 0x2a
 8001ee6:	f7ff fbad 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fbb8 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fbb5 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fbb2 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8001efc:	20ef      	movs	r0, #239	; 0xef
 8001efe:	f7ff fbaf 	bl	8001660 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001f02:	202b      	movs	r0, #43	; 0x2b
 8001f04:	f7ff fb9e 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff fba9 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f7ff fba6 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7ff fba3 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8001f1a:	203f      	movs	r0, #63	; 0x3f
 8001f1c:	f7ff fba0 	bl	8001660 <LCD_Write_Data>
					
		  break;
 8001f20:	e06e      	b.n	8002000 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001f22:	2036      	movs	r0, #54	; 0x36
 8001f24:	f7ff fb8e 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8001f28:	2068      	movs	r0, #104	; 0x68
 8001f2a:	f7ff fb99 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001f2e:	202a      	movs	r0, #42	; 0x2a
 8001f30:	f7ff fb88 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff fb93 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fb90 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001f40:	2001      	movs	r0, #1
 8001f42:	f7ff fb8d 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001f46:	203f      	movs	r0, #63	; 0x3f
 8001f48:	f7ff fb8a 	bl	8001660 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001f4c:	202b      	movs	r0, #43	; 0x2b
 8001f4e:	f7ff fb79 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff fb84 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff fb81 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff fb7e 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001f64:	20ef      	movs	r0, #239	; 0xef
 8001f66:	f7ff fb7b 	bl	8001660 <LCD_Write_Data>
		
		  break;
 8001f6a:	e049      	b.n	8002000 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001f6c:	2036      	movs	r0, #54	; 0x36
 8001f6e:	f7ff fb69 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001f72:	2028      	movs	r0, #40	; 0x28
 8001f74:	f7ff fb74 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001f78:	202a      	movs	r0, #42	; 0x2a
 8001f7a:	f7ff fb63 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff fb6e 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff fb6b 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff fb68 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001f90:	203f      	movs	r0, #63	; 0x3f
 8001f92:	f7ff fb65 	bl	8001660 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001f96:	202b      	movs	r0, #43	; 0x2b
 8001f98:	f7ff fb54 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff fb5f 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff fb5c 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff fb59 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 8001fae:	20ef      	movs	r0, #239	; 0xef
 8001fb0:	f7ff fb56 	bl	8001660 <LCD_Write_Data>
		  
		  break;
 8001fb4:	e024      	b.n	8002000 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001fb6:	2036      	movs	r0, #54	; 0x36
 8001fb8:	f7ff fb44 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 8001fbc:	2048      	movs	r0, #72	; 0x48
 8001fbe:	f7ff fb4f 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001fc2:	202a      	movs	r0, #42	; 0x2a
 8001fc4:	f7ff fb3e 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fb49 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fb46 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff fb43 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8001fda:	20ef      	movs	r0, #239	; 0xef
 8001fdc:	f7ff fb40 	bl	8001660 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001fe0:	202b      	movs	r0, #43	; 0x2b
 8001fe2:	f7ff fb2f 	bl	8001644 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fb3a 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fb37 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff fb34 	bl	8001660 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8001ff8:	203f      	movs	r0, #63	; 0x3f
 8001ffa:	f7ff fb31 	bl	8001660 <LCD_Write_Data>
		
	    break;
 8001ffe:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8002000:	202c      	movs	r0, #44	; 0x2c
 8002002:	f7ff fb1f 	bl	8001644 <LCD_Write_Cmd>
	
	
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop

08002010 <LCD_Darkmode_Toggle>:

void LCD_Darkmode_Toggle(){
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
	extern unsigned char *petStats;
	if (!darkmode_toggle) {
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <LCD_Darkmode_Toggle+0x30>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d106      	bne.n	800202a <LCD_Darkmode_Toggle+0x1a>
		darkmode_toggle = 1;
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <LCD_Darkmode_Toggle+0x30>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
		petStats = sleep;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <LCD_Darkmode_Toggle+0x34>)
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <LCD_Darkmode_Toggle+0x38>)
 8002026:	601a      	str	r2, [r3, #0]
	}
	else {
		darkmode_toggle = 0;
		petStats = normal;
	}
}
 8002028:	e005      	b.n	8002036 <LCD_Darkmode_Toggle+0x26>
		darkmode_toggle = 0;
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <LCD_Darkmode_Toggle+0x30>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
		petStats = normal;
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <LCD_Darkmode_Toggle+0x34>)
 8002032:	4a06      	ldr	r2, [pc, #24]	; (800204c <LCD_Darkmode_Toggle+0x3c>)
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000490 	.word	0x20000490
 8002044:	20000000 	.word	0x20000000
 8002048:	0802564c 	.word	0x0802564c
 800204c:	0800942c 	.word	0x0800942c

08002050 <LCD_DrawPicture>:

void LCD_DrawPicture(uint16_t StartX, uint16_t StartY,unsigned char *pic) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	603a      	str	r2, [r7, #0]
 800205a:	80fb      	strh	r3, [r7, #6]
 800205c:	460b      	mov	r3, r1
 800205e:	80bb      	strh	r3, [r7, #4]
		uint32_t i = 8, len;
 8002060:	2308      	movs	r3, #8
 8002062:	617b      	str	r3, [r7, #20]
		uint16_t temp, x, y;

		x = ((uint16_t) (pic[2] << 8) + pic[3]) - 1;	  	//get width
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	3302      	adds	r3, #2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	b29a      	uxth	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	3303      	adds	r3, #3
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4413      	add	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	827b      	strh	r3, [r7, #18]
		y = ((uint16_t) (pic[4] << 8) + pic[5]) - 1;	  	//get height
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3304      	adds	r3, #4
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	b29a      	uxth	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	3305      	adds	r3, #5
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4413      	add	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	823b      	strh	r3, [r7, #16]

		LCD_OpenWindow ( StartX, StartY, 120,120 );
 800209c:	88b9      	ldrh	r1, [r7, #4]
 800209e:	88f8      	ldrh	r0, [r7, #6]
 80020a0:	2378      	movs	r3, #120	; 0x78
 80020a2:	2278      	movs	r2, #120	; 0x78
 80020a4:	f7ff fc12 	bl	80018cc <LCD_OpenWindow>
		//LCD_FillColor ( StartX*StartY ,0x01010);
		LCD_Write_Cmd(CMD_SetPixel);					//fillcolor
 80020a8:	202c      	movs	r0, #44	; 0x2c
 80020aa:	f7ff facb 	bl	8001644 <LCD_Write_Cmd>
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	3302      	adds	r3, #2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	3303      	adds	r3, #3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4413      	add	r3, r2
				* ((uint16_t) (pic[4] << 8) + pic[5]);   	//calculate size
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	3204      	adds	r2, #4
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	b292      	uxth	r2, r2
 80020cc:	0212      	lsls	r2, r2, #8
 80020ce:	b292      	uxth	r2, r2
 80020d0:	4611      	mov	r1, r2
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	3205      	adds	r2, #5
 80020d6:	7812      	ldrb	r2, [r2, #0]
 80020d8:	440a      	add	r2, r1
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	005b      	lsls	r3, r3, #1
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 80020e0:	60fb      	str	r3, [r7, #12]

		while (i < (len + 8)) {							 	//start from the 9th
 80020e2:	e015      	b.n	8002110 <LCD_DrawPicture+0xc0>
			temp = (uint16_t) (pic[i] << 8) | pic[i + 1];	//2bits once
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	440b      	add	r3, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	817b      	strh	r3, [r7, #10]
			LCD_Write_Data(temp);
 8002102:	897b      	ldrh	r3, [r7, #10]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff faab 	bl	8001660 <LCD_Write_Data>
			i = i + 2;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3302      	adds	r3, #2
 800210e:	617b      	str	r3, [r7, #20]
		while (i < (len + 8)) {							 	//start from the 9th
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3308      	adds	r3, #8
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	429a      	cmp	r2, r3
 8002118:	d3e4      	bcc.n	80020e4 <LCD_DrawPicture+0x94>
		}
}
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800212a:	f003 fb47 	bl	80057bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800212e:	f000 f913 	bl	8002358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002132:	f000 fa83 	bl	800263c <MX_GPIO_Init>
  MX_FSMC_Init();
 8002136:	f000 fb35 	bl	80027a4 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 800213a:	f000 fa55 	bl	80025e8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800213e:	f000 f96b 	bl	8002418 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002142:	f000 f9b5 	bl	80024b0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002146:	f000 fa01 	bl	800254c <MX_TIM5_Init>
  	 * Module Initializations:
  	 * rtc.c
  	 * XPT2046.c
  	 * LCD
  	 */
	RTC_Init(&hrtc);
 800214a:	4870      	ldr	r0, [pc, #448]	; (800230c <main+0x1e8>)
 800214c:	f001 fff0 	bl	8004130 <RTC_Init>
	macXPT2046_CS_DISABLE();
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002156:	486e      	ldr	r0, [pc, #440]	; (8002310 <main+0x1ec>)
 8002158:	f003 fe6f 	bl	8005e3a <HAL_GPIO_WritePin>
	LCD_INIT();
 800215c:	f7ff fa2c 	bl	80015b8 <LCD_INIT>

	RTC_Get();
 8002160:	f002 f8c6 	bl	80042f0 <RTC_Get>
	get_TimeStamp(&real_time);
 8002164:	486b      	ldr	r0, [pc, #428]	; (8002314 <main+0x1f0>)
 8002166:	f002 fa61 	bl	800462c <get_TimeStamp>
	lastdrink_raw = RTC_raw();
 800216a:	f002 fa49 	bl	8004600 <RTC_raw>
 800216e:	4603      	mov	r3, r0
 8002170:	4a69      	ldr	r2, [pc, #420]	; (8002318 <main+0x1f4>)
 8002172:	6013      	str	r3, [r2, #0]
	//Flow control of UI
	uint8_t mode = 0; //Current Mode: Mode 0 = Home, Mode 1 = Drink Water, Mode 3 = Pet
 8002174:	2300      	movs	r3, #0
 8002176:	71fb      	strb	r3, [r7, #7]
	uint8_t mode_new = 0; //To Determine Whether A Mode is Updated
 8002178:	2300      	movs	r3, #0
 800217a:	717b      	strb	r3, [r7, #5]
	uint8_t render_done=0;//Set To 1 Whenever Screen Need to Update
 800217c:	2300      	movs	r3, #0
 800217e:	713b      	strb	r3, [r7, #4]
	uint8_t pet_update=0; //Set To 1 Whenever Pet Image Need to Update
 8002180:	2300      	movs	r3, #0
 8002182:	71bb      	strb	r3, [r7, #6]

	//Calibration of TouchPad
	while( ! XPT2046_Touch_Calibrate () );
 8002184:	bf00      	nop
 8002186:	f003 f845 	bl	8005214 <XPT2046_Touch_Calibrate>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0fa      	beq.n	8002186 <main+0x62>
	DHT11_ReadData(&DHT11_data);
 8002190:	4862      	ldr	r0, [pc, #392]	; (800231c <main+0x1f8>)
 8002192:	f7ff f9bc 	bl	800150e <DHT11_ReadData>
	/*
	 * Scheduling Event
	 * Tim3: Water Alarm
	 * Tim5: Update Temperature/ Weather Data
	 */
	TIMER_INIT();
 8002196:	f002 fc65 	bl	8004a64 <TIMER_INIT>
	timer_min(1);
 800219a:	2001      	movs	r0, #1
 800219c:	f002 fcac 	bl	8004af8 <timer_min>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 80021a0:	495f      	ldr	r1, [pc, #380]	; (8002320 <main+0x1fc>)
 80021a2:	4860      	ldr	r0, [pc, #384]	; (8002324 <main+0x200>)
 80021a4:	f003 fa4e 	bl	8005644 <XPT2046_Get_TouchedPoint>
	  			&strXPT2046_TouchPara);

	  //!!Only For UI that is changing every moment, Just For Testing, Need Refactoring Later
	  if(mode==0) {
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d114      	bne.n	80021d8 <main+0xb4>
		  RTC_Get();
 80021ae:	f002 f89f 	bl	80042f0 <RTC_Get>
		  UI_Home_Display_Date(real_time.ryear, real_time.rmon, real_time.rday);
 80021b2:	4b58      	ldr	r3, [pc, #352]	; (8002314 <main+0x1f0>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	4a57      	ldr	r2, [pc, #348]	; (8002314 <main+0x1f0>)
 80021b8:	7891      	ldrb	r1, [r2, #2]
 80021ba:	4a56      	ldr	r2, [pc, #344]	; (8002314 <main+0x1f0>)
 80021bc:	78d2      	ldrb	r2, [r2, #3]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe ff64 	bl	800108c <UI_Home_Display_Date>
		  UI_Home_Display_Time(real_time.rhour, real_time.rmin, real_time.rsec);
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <main+0x1f0>)
 80021c6:	791b      	ldrb	r3, [r3, #4]
 80021c8:	4a52      	ldr	r2, [pc, #328]	; (8002314 <main+0x1f0>)
 80021ca:	7951      	ldrb	r1, [r2, #5]
 80021cc:	4a51      	ldr	r2, [pc, #324]	; (8002314 <main+0x1f0>)
 80021ce:	7992      	ldrb	r2, [r2, #6]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ff97 	bl	8001104 <UI_Home_Display_Time>
 80021d6:	e006      	b.n	80021e6 <main+0xc2>
	  }
	  else if (mode == 3){
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d103      	bne.n	80021e6 <main+0xc2>
		  RTC_Get();
 80021de:	f002 f887 	bl	80042f0 <RTC_Get>
		  UI_Stats_Update();
 80021e2:	f7ff f85b 	bl	800129c <UI_Stats_Update>
	  }
	  get_TimeStamp(&real_time);
 80021e6:	484b      	ldr	r0, [pc, #300]	; (8002314 <main+0x1f0>)
 80021e8:	f002 fa20 	bl	800462c <get_TimeStamp>
	  if (petStats != sleep && mode==0){
 80021ec:	4b4e      	ldr	r3, [pc, #312]	; (8002328 <main+0x204>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a4e      	ldr	r2, [pc, #312]	; (800232c <main+0x208>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01b      	beq.n	800222e <main+0x10a>
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d118      	bne.n	800222e <main+0x10a>
		  if (DHT11_data.temp_int > 27){
 80021fc:	4b47      	ldr	r3, [pc, #284]	; (800231c <main+0x1f8>)
 80021fe:	789b      	ldrb	r3, [r3, #2]
 8002200:	2b1b      	cmp	r3, #27
 8002202:	d905      	bls.n	8002210 <main+0xec>
			  petStats = hot;
 8002204:	4b48      	ldr	r3, [pc, #288]	; (8002328 <main+0x204>)
 8002206:	4a4a      	ldr	r2, [pc, #296]	; (8002330 <main+0x20c>)
 8002208:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	71bb      	strb	r3, [r7, #6]
 800220e:	e00e      	b.n	800222e <main+0x10a>
		  }
		  else if (DHT11_data.temp_int < 24){
 8002210:	4b42      	ldr	r3, [pc, #264]	; (800231c <main+0x1f8>)
 8002212:	789b      	ldrb	r3, [r3, #2]
 8002214:	2b17      	cmp	r3, #23
 8002216:	d805      	bhi.n	8002224 <main+0x100>
			  petStats = cold;
 8002218:	4b43      	ldr	r3, [pc, #268]	; (8002328 <main+0x204>)
 800221a:	4a46      	ldr	r2, [pc, #280]	; (8002334 <main+0x210>)
 800221c:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 800221e:	2301      	movs	r3, #1
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	e004      	b.n	800222e <main+0x10a>
		  }
		  else {
			  petStats = normal;
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <main+0x204>)
 8002226:	4a44      	ldr	r2, [pc, #272]	; (8002338 <main+0x214>)
 8002228:	601a      	str	r2, [r3, #0]
			  pet_update = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	71bb      	strb	r3, [r7, #6]
		  }
	  }

	  do {
		  //Home Buttons
		  if(mode==0){
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d12f      	bne.n	8002294 <main+0x170>
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {mode_new = 1; break;}
 8002234:	493b      	ldr	r1, [pc, #236]	; (8002324 <main+0x200>)
 8002236:	4841      	ldr	r0, [pc, #260]	; (800233c <main+0x218>)
 8002238:	f7fe fe20 	bl	8000e7c <Check_touchkey>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <main+0x124>
 8002242:	2301      	movs	r3, #1
 8002244:	717b      	strb	r3, [r7, #5]
 8002246:	e033      	b.n	80022b0 <main+0x18c>
			  if(Check_touchkey(&home_dark_mode,&Coordinate)) {mode_new = 2; break;}
 8002248:	4936      	ldr	r1, [pc, #216]	; (8002324 <main+0x200>)
 800224a:	483d      	ldr	r0, [pc, #244]	; (8002340 <main+0x21c>)
 800224c:	f7fe fe16 	bl	8000e7c <Check_touchkey>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <main+0x138>
 8002256:	2302      	movs	r3, #2
 8002258:	717b      	strb	r3, [r7, #5]
 800225a:	e029      	b.n	80022b0 <main+0x18c>
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep) {petStats = happy1;}; break;}
 800225c:	4931      	ldr	r1, [pc, #196]	; (8002324 <main+0x200>)
 800225e:	4839      	ldr	r0, [pc, #228]	; (8002344 <main+0x220>)
 8002260:	f7fe fe0c 	bl	8000e7c <Check_touchkey>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <main+0x15c>
 800226a:	2301      	movs	r3, #1
 800226c:	71bb      	strb	r3, [r7, #6]
 800226e:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <main+0x204>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2e      	ldr	r2, [pc, #184]	; (800232c <main+0x208>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01a      	beq.n	80022ae <main+0x18a>
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <main+0x204>)
 800227a:	4a33      	ldr	r2, [pc, #204]	; (8002348 <main+0x224>)
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e016      	b.n	80022ae <main+0x18a>
			  if(Check_touchkey(&home_stats,&Coordinate)) {mode_new = 3; break;}
 8002280:	4928      	ldr	r1, [pc, #160]	; (8002324 <main+0x200>)
 8002282:	4832      	ldr	r0, [pc, #200]	; (800234c <main+0x228>)
 8002284:	f7fe fdfa 	bl	8000e7c <Check_touchkey>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <main+0x18c>
 800228e:	2303      	movs	r3, #3
 8002290:	717b      	strb	r3, [r7, #5]
 8002292:	e00d      	b.n	80022b0 <main+0x18c>
		  }
		  //Other Buttons In Other Screen
		  else if (mode==3){
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d10a      	bne.n	80022b0 <main+0x18c>
			  if(Check_touchkey(&stats_home,&Coordinate)) {mode_new = 0; break;}
 800229a:	4922      	ldr	r1, [pc, #136]	; (8002324 <main+0x200>)
 800229c:	482c      	ldr	r0, [pc, #176]	; (8002350 <main+0x22c>)
 800229e:	f7fe fded 	bl	8000e7c <Check_touchkey>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <main+0x18c>
 80022a8:	2300      	movs	r3, #0
 80022aa:	717b      	strb	r3, [r7, #5]
 80022ac:	e000      	b.n	80022b0 <main+0x18c>
			  if(Check_touchkey(&home_pet,&Coordinate)) {pet_update = 1;	if (petStats != sleep) {petStats = happy1;}; break;}
 80022ae:	bf00      	nop
		  		  }

	  } while (0);

	  //Reset Coordinates
	  XPT2046_Reset_TouchPoint(&Coordinate);
 80022b0:	481c      	ldr	r0, [pc, #112]	; (8002324 <main+0x200>)
 80022b2:	f003 fa4e 	bl	8005752 <XPT2046_Reset_TouchPoint>

	  if(mode != mode_new){
 80022b6:	797b      	ldrb	r3, [r7, #5]
 80022b8:	79fa      	ldrb	r2, [r7, #7]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d003      	beq.n	80022c6 <main+0x1a2>
		  mode = mode_new;
 80022be:	797b      	ldrb	r3, [r7, #5]
 80022c0:	71fb      	strb	r3, [r7, #7]
		  render_done = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	713b      	strb	r3, [r7, #4]
	  }


	  //Render Pet Image If Updated
	  if(pet_update){
 80022c6:	79bb      	ldrb	r3, [r7, #6]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <main+0x1ba>
		  UI_Home_Display_Pet(60,70,petStats);
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <main+0x204>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	2146      	movs	r1, #70	; 0x46
 80022d4:	203c      	movs	r0, #60	; 0x3c
 80022d6:	f7fe ff4f 	bl	8001178 <UI_Home_Display_Pet>
		  pet_update = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	71bb      	strb	r3, [r7, #6]
	  }

	  //Flag Enables Every 30 Seconds
	  if(DHT11_SCHEDULE_FLAG){
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <main+0x230>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <main+0x1d8>
		  DHT11_ReadData(&DHT11_data);
 80022e6:	480d      	ldr	r0, [pc, #52]	; (800231c <main+0x1f8>)
 80022e8:	f7ff f911 	bl	800150e <DHT11_ReadData>
		  DHT11_SCHEDULE_FLAG = 0;
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <main+0x230>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
		  if(mode==0) UI_Home_Display_DHT11();
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <main+0x1d8>
 80022f8:	f7fe ff50 	bl	800119c <UI_Home_Display_DHT11>
	  }

	  //Render LCD If Enter New Mode
	  Render(&mode_new, &render_done,petStats);
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <main+0x204>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	1d39      	adds	r1, r7, #4
 8002302:	1d7b      	adds	r3, r7, #5
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fde3 	bl	8000ed0 <Render>
	  XPT2046_Get_TouchedPoint(&Coordinate,
 800230a:	e749      	b.n	80021a0 <main+0x7c>
 800230c:	20000494 	.word	0x20000494
 8002310:	40011400 	.word	0x40011400
 8002314:	200005f8 	.word	0x200005f8
 8002318:	20000604 	.word	0x20000604
 800231c:	200005ec 	.word	0x200005ec
 8002320:	20000010 	.word	0x20000010
 8002324:	200005f4 	.word	0x200005f4
 8002328:	20000000 	.word	0x20000000
 800232c:	0802564c 	.word	0x0802564c
 8002330:	080104b4 	.word	0x080104b4
 8002334:	0801e5c4 	.word	0x0801e5c4
 8002338:	0800942c 	.word	0x0800942c
 800233c:	080093dc 	.word	0x080093dc
 8002340:	080093ec 	.word	0x080093ec
 8002344:	080093fc 	.word	0x080093fc
 8002348:	0801753c 	.word	0x0801753c
 800234c:	0800940c 	.word	0x0800940c
 8002350:	0800941c 	.word	0x0800941c
 8002354:	20000004 	.word	0x20000004

08002358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b096      	sub	sp, #88	; 0x58
 800235c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002362:	2228      	movs	r2, #40	; 0x28
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f005 fbba 	bl	8007ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800238c:	2305      	movs	r3, #5
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800239a:	2301      	movs	r3, #1
 800239c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800239e:	2301      	movs	r3, #1
 80023a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a2:	2302      	movs	r3, #2
 80023a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fd86 	bl	8005ec8 <HAL_RCC_OscConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80023c2:	f000 fa53 	bl	800286c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c6:	230f      	movs	r3, #15
 80023c8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ca:	2302      	movs	r3, #2
 80023cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	2102      	movs	r1, #2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 ffd4 	bl	8006390 <HAL_RCC_ClockConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80023ee:	f000 fa3d 	bl	800286c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023f2:	2301      	movs	r3, #1
 80023f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fa:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 f982 	bl	8006708 <HAL_RCCEx_PeriphCLKConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800240a:	f000 fa2f 	bl	800286c <Error_Handler>
  }
}
 800240e:	bf00      	nop
 8002410:	3758      	adds	r7, #88	; 0x58
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242c:	463b      	mov	r3, r7
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <MX_TIM2_Init+0x94>)
 8002436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800243a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <MX_TIM2_Init+0x94>)
 800243e:	2247      	movs	r2, #71	; 0x47
 8002440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002442:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <MX_TIM2_Init+0x94>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <MX_TIM2_Init+0x94>)
 800244a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800244e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <MX_TIM2_Init+0x94>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <MX_TIM2_Init+0x94>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800245c:	4813      	ldr	r0, [pc, #76]	; (80024ac <MX_TIM2_Init+0x94>)
 800245e:	f004 fc7d 	bl	8006d5c <HAL_TIM_Base_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002468:	f000 fa00 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	4619      	mov	r1, r3
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <MX_TIM2_Init+0x94>)
 800247a:	f004 fe2a 	bl	80070d2 <HAL_TIM_ConfigClockSource>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002484:	f000 f9f2 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002490:	463b      	mov	r3, r7
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_TIM2_Init+0x94>)
 8002496:	f005 f858 	bl	800754a <HAL_TIMEx_MasterConfigSynchronization>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80024a0:	f000 f9e4 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200004a8 	.word	0x200004a8

080024b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	463b      	mov	r3, r7
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <MX_TIM3_Init+0x94>)
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <MX_TIM3_Init+0x98>)
 80024d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <MX_TIM3_Init+0x94>)
 80024d4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80024d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_TIM3_Init+0x94>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <MX_TIM3_Init+0x94>)
 80024e2:	f248 32d5 	movw	r2, #33749	; 0x83d5
 80024e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <MX_TIM3_Init+0x94>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <MX_TIM3_Init+0x94>)
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024f4:	4813      	ldr	r0, [pc, #76]	; (8002544 <MX_TIM3_Init+0x94>)
 80024f6:	f004 fc31 	bl	8006d5c <HAL_TIM_Base_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002500:	f000 f9b4 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800250a:	f107 0308 	add.w	r3, r7, #8
 800250e:	4619      	mov	r1, r3
 8002510:	480c      	ldr	r0, [pc, #48]	; (8002544 <MX_TIM3_Init+0x94>)
 8002512:	f004 fdde 	bl	80070d2 <HAL_TIM_ConfigClockSource>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800251c:	f000 f9a6 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002528:	463b      	mov	r3, r7
 800252a:	4619      	mov	r1, r3
 800252c:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_TIM3_Init+0x94>)
 800252e:	f005 f80c 	bl	800754a <HAL_TIMEx_MasterConfigSynchronization>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002538:	f000 f998 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200004e8 	.word	0x200004e8
 8002548:	40000400 	.word	0x40000400

0800254c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002560:	463b      	mov	r3, r7
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <MX_TIM5_Init+0x94>)
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <MX_TIM5_Init+0x98>)
 800256c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63999;
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <MX_TIM5_Init+0x94>)
 8002570:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002574:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <MX_TIM5_Init+0x94>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33749;
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <MX_TIM5_Init+0x94>)
 800257e:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8002582:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <MX_TIM5_Init+0x94>)
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <MX_TIM5_Init+0x94>)
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002590:	4813      	ldr	r0, [pc, #76]	; (80025e0 <MX_TIM5_Init+0x94>)
 8002592:	f004 fbe3 	bl	8006d5c <HAL_TIM_Base_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800259c:	f000 f966 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025a6:	f107 0308 	add.w	r3, r7, #8
 80025aa:	4619      	mov	r1, r3
 80025ac:	480c      	ldr	r0, [pc, #48]	; (80025e0 <MX_TIM5_Init+0x94>)
 80025ae:	f004 fd90 	bl	80070d2 <HAL_TIM_ConfigClockSource>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80025b8:	f000 f958 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025bc:	2300      	movs	r3, #0
 80025be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025c4:	463b      	mov	r3, r7
 80025c6:	4619      	mov	r1, r3
 80025c8:	4805      	ldr	r0, [pc, #20]	; (80025e0 <MX_TIM5_Init+0x94>)
 80025ca:	f004 ffbe 	bl	800754a <HAL_TIMEx_MasterConfigSynchronization>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80025d4:	f000 f94a 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000528 	.word	0x20000528
 80025e4:	40000c00 	.word	0x40000c00

080025e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <MX_USART1_UART_Init+0x50>)
 80025f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 80025f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 800260e:	220c      	movs	r2, #12
 8002610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800261e:	4805      	ldr	r0, [pc, #20]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 8002620:	f004 ffe9 	bl	80075f6 <HAL_UART_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800262a:	f000 f91f 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000568 	.word	0x20000568
 8002638:	40013800 	.word	0x40013800

0800263c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002642:	f107 0318 	add.w	r3, r7, #24
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002650:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <MX_GPIO_Init+0x154>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4a4e      	ldr	r2, [pc, #312]	; (8002790 <MX_GPIO_Init+0x154>)
 8002656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800265a:	6193      	str	r3, [r2, #24]
 800265c:	4b4c      	ldr	r3, [pc, #304]	; (8002790 <MX_GPIO_Init+0x154>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	4b49      	ldr	r3, [pc, #292]	; (8002790 <MX_GPIO_Init+0x154>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a48      	ldr	r2, [pc, #288]	; (8002790 <MX_GPIO_Init+0x154>)
 800266e:	f043 0310 	orr.w	r3, r3, #16
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b46      	ldr	r3, [pc, #280]	; (8002790 <MX_GPIO_Init+0x154>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <MX_GPIO_Init+0x154>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4a42      	ldr	r2, [pc, #264]	; (8002790 <MX_GPIO_Init+0x154>)
 8002686:	f043 0308 	orr.w	r3, r3, #8
 800268a:	6193      	str	r3, [r2, #24]
 800268c:	4b40      	ldr	r3, [pc, #256]	; (8002790 <MX_GPIO_Init+0x154>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002698:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <MX_GPIO_Init+0x154>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4a3c      	ldr	r2, [pc, #240]	; (8002790 <MX_GPIO_Init+0x154>)
 800269e:	f043 0320 	orr.w	r3, r3, #32
 80026a2:	6193      	str	r3, [r2, #24]
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <MX_GPIO_Init+0x154>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b0:	4b37      	ldr	r3, [pc, #220]	; (8002790 <MX_GPIO_Init+0x154>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a36      	ldr	r2, [pc, #216]	; (8002790 <MX_GPIO_Init+0x154>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <MX_GPIO_Init+0x154>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2107      	movs	r1, #7
 80026cc:	4831      	ldr	r0, [pc, #196]	; (8002794 <MX_GPIO_Init+0x158>)
 80026ce:	f003 fbb4 	bl	8005e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80026d2:	2201      	movs	r2, #1
 80026d4:	2140      	movs	r1, #64	; 0x40
 80026d6:	482f      	ldr	r0, [pc, #188]	; (8002794 <MX_GPIO_Init+0x158>)
 80026d8:	f003 fbaf 	bl	8005e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	2123      	movs	r1, #35	; 0x23
 80026e0:	482d      	ldr	r0, [pc, #180]	; (8002798 <MX_GPIO_Init+0x15c>)
 80026e2:	f003 fbaa 	bl	8005e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80026e6:	2200      	movs	r2, #0
 80026e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80026ec:	482b      	ldr	r0, [pc, #172]	; (800279c <MX_GPIO_Init+0x160>)
 80026ee:	f003 fba4 	bl	8005e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 DHT11_Pin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 80026f2:	2347      	movs	r3, #71	; 0x47
 80026f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002702:	f107 0318 	add.w	r3, r7, #24
 8002706:	4619      	mov	r1, r3
 8002708:	4822      	ldr	r0, [pc, #136]	; (8002794 <MX_GPIO_Init+0x158>)
 800270a:	f003 f9e7 	bl	8005adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800270e:	2308      	movs	r3, #8
 8002710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002716:	2301      	movs	r3, #1
 8002718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800271a:	f107 0318 	add.w	r3, r7, #24
 800271e:	4619      	mov	r1, r3
 8002720:	481c      	ldr	r0, [pc, #112]	; (8002794 <MX_GPIO_Init+0x158>)
 8002722:	f003 f9db 	bl	8005adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002726:	2310      	movs	r3, #16
 8002728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <MX_GPIO_Init+0x164>)
 800272c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800272e:	2301      	movs	r3, #1
 8002730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002732:	f107 0318 	add.w	r3, r7, #24
 8002736:	4619      	mov	r1, r3
 8002738:	4816      	ldr	r0, [pc, #88]	; (8002794 <MX_GPIO_Init+0x158>)
 800273a:	f003 f9cf 	bl	8005adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800273e:	2323      	movs	r3, #35	; 0x23
 8002740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	2301      	movs	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f107 0318 	add.w	r3, r7, #24
 8002752:	4619      	mov	r1, r3
 8002754:	4810      	ldr	r0, [pc, #64]	; (8002798 <MX_GPIO_Init+0x15c>)
 8002756:	f003 f9c1 	bl	8005adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800275a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800275e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	2301      	movs	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276c:	f107 0318 	add.w	r3, r7, #24
 8002770:	4619      	mov	r1, r3
 8002772:	480a      	ldr	r0, [pc, #40]	; (800279c <MX_GPIO_Init+0x160>)
 8002774:	f003 f9b2 	bl	8005adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	200a      	movs	r0, #10
 800277e:	f003 f976 	bl	8005a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002782:	200a      	movs	r0, #10
 8002784:	f003 f98f 	bl	8005aa6 <HAL_NVIC_EnableIRQ>

}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	40011800 	.word	0x40011800
 8002798:	40010c00 	.word	0x40010c00
 800279c:	40011400 	.word	0x40011400
 80027a0:	10210000 	.word	0x10210000

080027a4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	615a      	str	r2, [r3, #20]
 80027ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80027bc:	4b28      	ldr	r3, [pc, #160]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027be:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80027c2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027c6:	4a27      	ldr	r2, [pc, #156]	; (8002864 <MX_FSMC_Init+0xc0>)
 80027c8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80027d0:	4b23      	ldr	r3, [pc, #140]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027de:	2210      	movs	r2, #16
 80027e0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <MX_FSMC_Init+0xbc>)
 80027fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <MX_FSMC_Init+0xbc>)
 8002804:	2200      	movs	r2, #0
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_FSMC_Init+0xbc>)
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <MX_FSMC_Init+0xbc>)
 8002810:	2200      	movs	r2, #0
 8002812:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <MX_FSMC_Init+0xbc>)
 8002816:	2200      	movs	r2, #0
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800281a:	230f      	movs	r3, #15
 800281c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800281e:	230f      	movs	r3, #15
 8002820:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002822:	23ff      	movs	r3, #255	; 0xff
 8002824:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002826:	230f      	movs	r3, #15
 8002828:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800282a:	2310      	movs	r3, #16
 800282c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800282e:	2311      	movs	r3, #17
 8002830:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	2200      	movs	r2, #0
 800283a:	4619      	mov	r1, r3
 800283c:	4808      	ldr	r0, [pc, #32]	; (8002860 <MX_FSMC_Init+0xbc>)
 800283e:	f004 fa49 	bl	8006cd4 <HAL_SRAM_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002848:	f000 f810 	bl	800286c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_FSMC_Init+0xc4>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	4a05      	ldr	r2, [pc, #20]	; (8002868 <MX_FSMC_Init+0xc4>)
 8002852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002856:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002858:	bf00      	nop
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200005a8 	.word	0x200005a8
 8002864:	a0000104 	.word	0xa0000104
 8002868:	40010000 	.word	0x40010000

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d204      	bcs.n	800289a <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	701a      	strb	r2, [r3, #0]
  }
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e002      	b.n	80028d4 <_strnlen_s+0x16>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3301      	adds	r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <_strnlen_s+0x28>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	603a      	str	r2, [r7, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f3      	bne.n	80028ce <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	1ad3      	subs	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b2f      	cmp	r3, #47	; 0x2f
 8002904:	d904      	bls.n	8002910 <_is_digit+0x1a>
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	2b39      	cmp	r3, #57	; 0x39
 800290a:	d801      	bhi.n	8002910 <_is_digit+0x1a>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <_is_digit+0x1c>
 8002910:	2300      	movs	r3, #0
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800292e:	e00e      	b.n	800294e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4618      	mov	r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	1c59      	adds	r1, r3, #1
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6011      	str	r1, [r2, #0]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4403      	add	r3, r0
 800294a:	3b30      	subs	r3, #48	; 0x30
 800294c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ffce 	bl	80028f6 <_is_digit>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e7      	bne.n	8002930 <_atoi+0xe>
  }
  return i;
 8002960:	68fb      	ldr	r3, [r7, #12]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800296a:	b590      	push	{r4, r7, lr}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d125      	bne.n	80029d2 <_out_rev+0x68>
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d120      	bne.n	80029d2 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	e00a      	b.n	80029ac <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	1c53      	adds	r3, r2, #1
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	68fc      	ldr	r4, [r7, #12]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	2020      	movs	r0, #32
 80029a4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d3f0      	bcc.n	8002996 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80029b4:	e00d      	b.n	80029d2 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	3b01      	subs	r3, #1
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	4413      	add	r3, r2
 80029c2:	7818      	ldrb	r0, [r3, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	1c53      	adds	r3, r2, #1
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	68fc      	ldr	r4, [r7, #12]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	47a0      	blx	r4
  while (len) {
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ee      	bne.n	80029b6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00e      	beq.n	8002a00 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80029e2:	e007      	b.n	80029f4 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	1c53      	adds	r3, r2, #1
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	68fc      	ldr	r4, [r7, #12]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	2020      	movs	r0, #32
 80029f2:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d8f1      	bhi.n	80029e4 <_out_rev+0x7a>
    }
  }

  return idx;
 8002a00:	687b      	ldr	r3, [r7, #4]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd90      	pop	{r4, r7, pc}

08002a0a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b088      	sub	sp, #32
 8002a0e:	af04      	add	r7, sp, #16
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d136      	bne.n	8002a90 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d018      	beq.n	8002a5a <_ntoa_format+0x50>
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d013      	beq.n	8002a5a <_ntoa_format+0x50>
 8002a32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <_ntoa_format+0x3a>
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <_ntoa_format+0x50>
      width--;
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	3b01      	subs	r3, #1
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a4a:	e006      	b.n	8002a5a <_ntoa_format+0x50>
      buf[len++] = '0';
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	61fa      	str	r2, [r7, #28]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4413      	add	r3, r2
 8002a56:	2230      	movs	r2, #48	; 0x30
 8002a58:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d20a      	bcs.n	8002a78 <_ntoa_format+0x6e>
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	2b1f      	cmp	r3, #31
 8002a66:	d9f1      	bls.n	8002a4c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a68:	e006      	b.n	8002a78 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	61fa      	str	r2, [r7, #28]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	2230      	movs	r2, #48	; 0x30
 8002a76:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <_ntoa_format+0x86>
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d202      	bcs.n	8002a90 <_ntoa_format+0x86>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b1f      	cmp	r3, #31
 8002a8e:	d9ec      	bls.n	8002a6a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d058      	beq.n	8002b4c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d116      	bne.n	8002ad2 <_ntoa_format+0xc8>
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d013      	beq.n	8002ad2 <_ntoa_format+0xc8>
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d003      	beq.n	8002aba <_ntoa_format+0xb0>
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d10b      	bne.n	8002ad2 <_ntoa_format+0xc8>
      len--;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <_ntoa_format+0xc8>
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d102      	bne.n	8002ad2 <_ntoa_format+0xc8>
        len--;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d10f      	bne.n	8002af8 <_ntoa_format+0xee>
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <_ntoa_format+0xee>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b1f      	cmp	r3, #31
 8002ae6:	d807      	bhi.n	8002af8 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	61fa      	str	r2, [r7, #28]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4413      	add	r3, r2
 8002af2:	2278      	movs	r2, #120	; 0x78
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e01f      	b.n	8002b38 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d10f      	bne.n	8002b1e <_ntoa_format+0x114>
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <_ntoa_format+0x114>
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b1f      	cmp	r3, #31
 8002b0c:	d807      	bhi.n	8002b1e <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	61fa      	str	r2, [r7, #28]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	2258      	movs	r2, #88	; 0x58
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e00c      	b.n	8002b38 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d109      	bne.n	8002b38 <_ntoa_format+0x12e>
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b1f      	cmp	r3, #31
 8002b28:	d806      	bhi.n	8002b38 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	61fa      	str	r2, [r7, #28]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4413      	add	r3, r2
 8002b34:	2262      	movs	r2, #98	; 0x62
 8002b36:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b1f      	cmp	r3, #31
 8002b3c:	d806      	bhi.n	8002b4c <_ntoa_format+0x142>
      buf[len++] = '0';
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	61fa      	str	r2, [r7, #28]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	2230      	movs	r2, #48	; 0x30
 8002b4a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b1f      	cmp	r3, #31
 8002b50:	d824      	bhi.n	8002b9c <_ntoa_format+0x192>
    if (negative) {
 8002b52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <_ntoa_format+0x160>
      buf[len++] = '-';
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	61fa      	str	r2, [r7, #28]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	222d      	movs	r2, #45	; 0x2d
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e018      	b.n	8002b9c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	61fa      	str	r2, [r7, #28]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	222b      	movs	r2, #43	; 0x2b
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e00b      	b.n	8002b9c <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	61fa      	str	r2, [r7, #28]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4413      	add	r3, r2
 8002b98:	2220      	movs	r2, #32
 8002b9a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	9303      	str	r3, [sp, #12]
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff fed9 	bl	800296a <_out_rev>
 8002bb8:	4603      	mov	r3, r0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b096      	sub	sp, #88	; 0x58
 8002bc6:	af08      	add	r7, sp, #32
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bdc:	f023 0310 	bic.w	r3, r3, #16
 8002be0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <_ntoa_long+0x30>
 8002bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d032      	beq.n	8002c58 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bfa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002bfc:	fb01 f202 	mul.w	r2, r1, r2
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002c06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	d804      	bhi.n	8002c18 <_ntoa_long+0x56>
 8002c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c12:	3330      	adds	r3, #48	; 0x30
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	e00d      	b.n	8002c34 <_ntoa_long+0x72>
 8002c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <_ntoa_long+0x64>
 8002c22:	2241      	movs	r2, #65	; 0x41
 8002c24:	e000      	b.n	8002c28 <_ntoa_long+0x66>
 8002c26:	2261      	movs	r2, #97	; 0x61
 8002c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3b0a      	subs	r3, #10
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	6379      	str	r1, [r7, #52]	; 0x34
 8002c3a:	3338      	adds	r3, #56	; 0x38
 8002c3c:	443b      	add	r3, r7
 8002c3e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <_ntoa_long+0x96>
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	2b1f      	cmp	r3, #31
 8002c56:	d9cc      	bls.n	8002bf2 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5a:	9306      	str	r3, [sp, #24]
 8002c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5e:	9305      	str	r3, [sp, #20]
 8002c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c62:	9304      	str	r3, [sp, #16]
 8002c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c66:	9303      	str	r3, [sp, #12]
 8002c68:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	f107 0310 	add.w	r3, r7, #16
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff fec3 	bl	8002a0a <_ntoa_format>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3738      	adds	r7, #56	; 0x38
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b096      	sub	sp, #88	; 0x58
 8002c92:	af08      	add	r7, sp, #32
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002ca0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	d103      	bne.n	8002cb0 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002caa:	f023 0310 	bic.w	r3, r3, #16
 8002cae:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <_ntoa_long_long+0x34>
 8002cba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	d037      	beq.n	8002d32 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002cc2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002cc6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cca:	f7fd ff53 	bl	8000b74 <__aeabi_uldivmod>
 8002cce:	4613      	mov	r3, r2
 8002cd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002cd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cd8:	2b09      	cmp	r3, #9
 8002cda:	d804      	bhi.n	8002ce6 <_ntoa_long_long+0x58>
 8002cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ce0:	3330      	adds	r3, #48	; 0x30
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	e00d      	b.n	8002d02 <_ntoa_long_long+0x74>
 8002ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <_ntoa_long_long+0x66>
 8002cf0:	2241      	movs	r2, #65	; 0x41
 8002cf2:	e000      	b.n	8002cf6 <_ntoa_long_long+0x68>
 8002cf4:	2261      	movs	r2, #97	; 0x61
 8002cf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3b0a      	subs	r3, #10
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	1c59      	adds	r1, r3, #1
 8002d06:	6379      	str	r1, [r7, #52]	; 0x34
 8002d08:	3338      	adds	r3, #56	; 0x38
 8002d0a:	443b      	add	r3, r7
 8002d0c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d14:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002d18:	f7fd ff2c 	bl	8000b74 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002d24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	d002      	beq.n	8002d32 <_ntoa_long_long+0xa4>
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	2b1f      	cmp	r3, #31
 8002d30:	d9c7      	bls.n	8002cc2 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d36:	9206      	str	r2, [sp, #24]
 8002d38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d3a:	9205      	str	r2, [sp, #20]
 8002d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d3e:	9204      	str	r2, [sp, #16]
 8002d40:	9303      	str	r3, [sp, #12]
 8002d42:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002d46:	9302      	str	r3, [sp, #8]
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fe56 	bl	8002a0a <_ntoa_format>
 8002d5e:	4603      	mov	r3, r0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3738      	adds	r7, #56	; 0x38
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b09d      	sub	sp, #116	; 0x74
 8002d6c:	af06      	add	r7, sp, #24
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002d86:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002d8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d8e:	f7fd fe77 	bl	8000a80 <__aeabi_dcmpeq>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d9a:	9303      	str	r3, [sp, #12]
 8002d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d9e:	9302      	str	r3, [sp, #8]
 8002da0:	2303      	movs	r3, #3
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <_ftoa+0x248>)
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7ff fddb 	bl	800296a <_out_rev>
 8002db4:	4603      	mov	r3, r0
 8002db6:	e224      	b.n	8003202 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002dc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002dc4:	f7fd fe66 	bl	8000a94 <__aeabi_dcmplt>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00f      	beq.n	8002dee <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd0:	9303      	str	r3, [sp, #12]
 8002dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	4b76      	ldr	r3, [pc, #472]	; (8002fb4 <_ftoa+0x24c>)
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fdc0 	bl	800296a <_out_rev>
 8002dea:	4603      	mov	r3, r0
 8002dec:	e209      	b.n	8003202 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8002dee:	f04f 32ff 	mov.w	r2, #4294967295
 8002df2:	4b71      	ldr	r3, [pc, #452]	; (8002fb8 <_ftoa+0x250>)
 8002df4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002df8:	f7fd fe6a 	bl	8000ad0 <__aeabi_dcmpgt>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01d      	beq.n	8002e3e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <_ftoa+0xa8>
 8002e0c:	4b6b      	ldr	r3, [pc, #428]	; (8002fbc <_ftoa+0x254>)
 8002e0e:	e000      	b.n	8002e12 <_ftoa+0xaa>
 8002e10:	4b6b      	ldr	r3, [pc, #428]	; (8002fc0 <_ftoa+0x258>)
 8002e12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e14:	f002 0204 	and.w	r2, r2, #4
 8002e18:	2a00      	cmp	r2, #0
 8002e1a:	d001      	beq.n	8002e20 <_ftoa+0xb8>
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	e000      	b.n	8002e22 <_ftoa+0xba>
 8002e20:	2203      	movs	r2, #3
 8002e22:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002e24:	9103      	str	r1, [sp, #12]
 8002e26:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002e28:	9102      	str	r1, [sp, #8]
 8002e2a:	9201      	str	r2, [sp, #4]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff fd98 	bl	800296a <_out_rev>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	e1e1      	b.n	8003202 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002e3e:	a358      	add	r3, pc, #352	; (adr r3, 8002fa0 <_ftoa+0x238>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e48:	f7fd fe42 	bl	8000ad0 <__aeabi_dcmpgt>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <_ftoa+0xfe>
 8002e52:	a355      	add	r3, pc, #340	; (adr r3, 8002fa8 <_ftoa+0x240>)
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e5c:	f7fd fe1a 	bl	8000a94 <__aeabi_dcmplt>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d011      	beq.n	8002e8a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e68:	9304      	str	r3, [sp, #16]
 8002e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6c:	9303      	str	r3, [sp, #12]
 8002e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e70:	9302      	str	r3, [sp, #8]
 8002e72:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002e76:	e9cd 2300 	strd	r2, r3, [sp]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f9c9 	bl	8003218 <_etoa>
 8002e86:	4603      	mov	r3, r0
 8002e88:	e1bb      	b.n	8003202 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e9c:	f7fd fdfa 	bl	8000a94 <__aeabi_dcmplt>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00e      	beq.n	8002ec4 <_ftoa+0x15c>
    negative = true;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 8002eac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002eb0:	f04f 0000 	mov.w	r0, #0
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	f7fd f9c2 	bl	8000240 <__aeabi_dsub>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10d      	bne.n	8002eea <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002ece:	2306      	movs	r3, #6
 8002ed0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002ed2:	e00a      	b.n	8002eea <_ftoa+0x182>
    buf[len++] = '0';
 8002ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	657a      	str	r2, [r7, #84]	; 0x54
 8002eda:	3358      	adds	r3, #88	; 0x58
 8002edc:	443b      	add	r3, r7
 8002ede:	2230      	movs	r2, #48	; 0x30
 8002ee0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eec:	2b1f      	cmp	r3, #31
 8002eee:	d802      	bhi.n	8002ef6 <_ftoa+0x18e>
 8002ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ef2:	2b09      	cmp	r3, #9
 8002ef4:	d8ee      	bhi.n	8002ed4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002ef6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002efa:	f7fd fdf3 	bl	8000ae4 <__aeabi_d2iz>
 8002efe:	4603      	mov	r3, r0
 8002f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8002f02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f04:	f7fd faea 	bl	80004dc <__aeabi_i2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f10:	f7fd f996 	bl	8000240 <__aeabi_dsub>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <_ftoa+0x25c>)
 8002f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f7fd fb42 	bl	80005b0 <__aeabi_dmul>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8002f34:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f38:	f7fd fdfc 	bl	8000b34 <__aeabi_d2uiz>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8002f40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f42:	f7fd fabb 	bl	80004bc <__aeabi_ui2d>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f4e:	f7fd f977 	bl	8000240 <__aeabi_dsub>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <_ftoa+0x260>)
 8002f60:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f64:	f7fd fdb4 	bl	8000ad0 <__aeabi_dcmpgt>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d02e      	beq.n	8002fcc <_ftoa+0x264>
    ++frac;
 8002f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f70:	3301      	adds	r3, #1
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002f74:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f76:	f7fd faa1 	bl	80004bc <__aeabi_ui2d>
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <_ftoa+0x25c>)
 8002f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f7fd fd99 	bl	8000abc <__aeabi_dcmpge>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d032      	beq.n	8002ff6 <_ftoa+0x28e>
      frac = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 8002f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f96:	3301      	adds	r3, #1
 8002f98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9a:	e02c      	b.n	8002ff6 <_ftoa+0x28e>
 8002f9c:	f3af 8000 	nop.w
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	41cdcd65 	.word	0x41cdcd65
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	c1cdcd65 	.word	0xc1cdcd65
 8002fb0:	08008d74 	.word	0x08008d74
 8002fb4:	08008d78 	.word	0x08008d78
 8002fb8:	7fefffff 	.word	0x7fefffff
 8002fbc:	08008d80 	.word	0x08008d80
 8002fc0:	08008d88 	.word	0x08008d88
 8002fc4:	0802c6d8 	.word	0x0802c6d8
 8002fc8:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	4b8e      	ldr	r3, [pc, #568]	; (800320c <_ftoa+0x4a4>)
 8002fd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002fd6:	f7fd fd5d 	bl	8000a94 <__aeabi_dcmplt>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <_ftoa+0x288>
 8002fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8002ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d133      	bne.n	8003064 <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002ffc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ffe:	f7fd fa6d 	bl	80004dc <__aeabi_i2d>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800300a:	f7fd f919 	bl	8000240 <__aeabi_dsub>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003016:	2301      	movs	r3, #1
 8003018:	461c      	mov	r4, r3
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	4b7b      	ldr	r3, [pc, #492]	; (800320c <_ftoa+0x4a4>)
 8003020:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003024:	f7fd fd36 	bl	8000a94 <__aeabi_dcmplt>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <_ftoa+0x2ca>
 800302e:	2300      	movs	r3, #0
 8003030:	461c      	mov	r4, r3
 8003032:	b2e3      	uxtb	r3, r4
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <_ftoa+0x2ea>
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	4b72      	ldr	r3, [pc, #456]	; (800320c <_ftoa+0x4a4>)
 8003044:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003048:	f7fd fd42 	bl	8000ad0 <__aeabi_dcmpgt>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d04c      	beq.n	80030ec <_ftoa+0x384>
 8003052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d069      	beq.n	8003130 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800305c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305e:	3301      	adds	r3, #1
 8003060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003062:	e065      	b.n	8003130 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 8003064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003066:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003068:	e01f      	b.n	80030aa <_ftoa+0x342>
      --count;
 800306a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306c:	3b01      	subs	r3, #1
 800306e:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8003070:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003072:	4b67      	ldr	r3, [pc, #412]	; (8003210 <_ftoa+0x4a8>)
 8003074:	fba3 2301 	umull	r2, r3, r3, r1
 8003078:	08da      	lsrs	r2, r3, #3
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	1aca      	subs	r2, r1, r3
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	6579      	str	r1, [r7, #84]	; 0x54
 800308c:	3230      	adds	r2, #48	; 0x30
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	3358      	adds	r3, #88	; 0x58
 8003092:	443b      	add	r3, r7
 8003094:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309a:	4a5d      	ldr	r2, [pc, #372]	; (8003210 <_ftoa+0x4a8>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	08db      	lsrs	r3, r3, #3
 80030a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	2b1f      	cmp	r3, #31
 80030ae:	d9dc      	bls.n	800306a <_ftoa+0x302>
 80030b0:	e009      	b.n	80030c6 <_ftoa+0x35e>
        break;
 80030b2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80030b4:	e007      	b.n	80030c6 <_ftoa+0x35e>
      buf[len++] = '0';
 80030b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	657a      	str	r2, [r7, #84]	; 0x54
 80030bc:	3358      	adds	r3, #88	; 0x58
 80030be:	443b      	add	r3, r7
 80030c0:	2230      	movs	r2, #48	; 0x30
 80030c2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80030c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c8:	2b1f      	cmp	r3, #31
 80030ca:	d804      	bhi.n	80030d6 <_ftoa+0x36e>
 80030cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ce:	1e5a      	subs	r2, r3, #1
 80030d0:	647a      	str	r2, [r7, #68]	; 0x44
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ef      	bne.n	80030b6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d8:	2b1f      	cmp	r3, #31
 80030da:	d829      	bhi.n	8003130 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80030dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	657a      	str	r2, [r7, #84]	; 0x54
 80030e2:	3358      	adds	r3, #88	; 0x58
 80030e4:	443b      	add	r3, r7
 80030e6:	222e      	movs	r2, #46	; 0x2e
 80030e8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80030ec:	e020      	b.n	8003130 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80030ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030f0:	4b48      	ldr	r3, [pc, #288]	; (8003214 <_ftoa+0x4ac>)
 80030f2:	fb83 1302 	smull	r1, r3, r3, r2
 80030f6:	1099      	asrs	r1, r3, #2
 80030f8:	17d3      	asrs	r3, r2, #31
 80030fa:	1ac9      	subs	r1, r1, r3
 80030fc:	460b      	mov	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	1ad1      	subs	r1, r2, r3
 8003106:	b2ca      	uxtb	r2, r1
 8003108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310a:	1c59      	adds	r1, r3, #1
 800310c:	6579      	str	r1, [r7, #84]	; 0x54
 800310e:	3230      	adds	r2, #48	; 0x30
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	3358      	adds	r3, #88	; 0x58
 8003114:	443b      	add	r3, r7
 8003116:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311c:	4a3d      	ldr	r2, [pc, #244]	; (8003214 <_ftoa+0x4ac>)
 800311e:	fb82 1203 	smull	r1, r2, r2, r3
 8003122:	1092      	asrs	r2, r2, #2
 8003124:	17db      	asrs	r3, r3, #31
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003132:	2b1f      	cmp	r3, #31
 8003134:	d9db      	bls.n	80030ee <_ftoa+0x386>
 8003136:	e000      	b.n	800313a <_ftoa+0x3d2>
      break;
 8003138:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800313a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d123      	bne.n	800318c <_ftoa+0x424>
 8003144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d01e      	beq.n	800318c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800314e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003150:	2b00      	cmp	r3, #0
 8003152:	d014      	beq.n	800317e <_ftoa+0x416>
 8003154:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <_ftoa+0x3fe>
 800315c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <_ftoa+0x416>
      width--;
 8003166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003168:	3b01      	subs	r3, #1
 800316a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800316c:	e007      	b.n	800317e <_ftoa+0x416>
      buf[len++] = '0';
 800316e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	657a      	str	r2, [r7, #84]	; 0x54
 8003174:	3358      	adds	r3, #88	; 0x58
 8003176:	443b      	add	r3, r7
 8003178:	2230      	movs	r2, #48	; 0x30
 800317a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800317e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003182:	429a      	cmp	r2, r3
 8003184:	d202      	bcs.n	800318c <_ftoa+0x424>
 8003186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003188:	2b1f      	cmp	r3, #31
 800318a:	d9f0      	bls.n	800316e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800318c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318e:	2b1f      	cmp	r3, #31
 8003190:	d827      	bhi.n	80031e2 <_ftoa+0x47a>
    if (negative) {
 8003192:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <_ftoa+0x444>
      buf[len++] = '-';
 800319a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	657a      	str	r2, [r7, #84]	; 0x54
 80031a0:	3358      	adds	r3, #88	; 0x58
 80031a2:	443b      	add	r3, r7
 80031a4:	222d      	movs	r2, #45	; 0x2d
 80031a6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80031aa:	e01a      	b.n	80031e2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80031ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80031b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	657a      	str	r2, [r7, #84]	; 0x54
 80031bc:	3358      	adds	r3, #88	; 0x58
 80031be:	443b      	add	r3, r7
 80031c0:	222b      	movs	r2, #43	; 0x2b
 80031c2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80031c6:	e00c      	b.n	80031e2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 80031c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <_ftoa+0x47a>
      buf[len++] = ' ';
 80031d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	657a      	str	r2, [r7, #84]	; 0x54
 80031d8:	3358      	adds	r3, #88	; 0x58
 80031da:	443b      	add	r3, r7
 80031dc:	2220      	movs	r2, #32
 80031de:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80031e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031e4:	9303      	str	r3, [sp, #12]
 80031e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e8:	9302      	str	r3, [sp, #8]
 80031ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	f107 0310 	add.w	r3, r7, #16
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7ff fbb5 	bl	800296a <_out_rev>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	375c      	adds	r7, #92	; 0x5c
 8003206:	46bd      	mov	sp, r7
 8003208:	bd90      	pop	{r4, r7, pc}
 800320a:	bf00      	nop
 800320c:	3fe00000 	.word	0x3fe00000
 8003210:	cccccccd 	.word	0xcccccccd
 8003214:	66666667 	.word	0x66666667

08003218 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800321c:	b09d      	sub	sp, #116	; 0x74
 800321e:	af06      	add	r7, sp, #24
 8003220:	61f8      	str	r0, [r7, #28]
 8003222:	61b9      	str	r1, [r7, #24]
 8003224:	617a      	str	r2, [r7, #20]
 8003226:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003228:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800322c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003230:	f7fd fc26 	bl	8000a80 <__aeabi_dcmpeq>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d014      	beq.n	8003264 <_etoa+0x4c>
 800323a:	f04f 32ff 	mov.w	r2, #4294967295
 800323e:	4bc4      	ldr	r3, [pc, #784]	; (8003550 <_etoa+0x338>)
 8003240:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003244:	f7fd fc44 	bl	8000ad0 <__aeabi_dcmpgt>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <_etoa+0x4c>
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800325a:	f7fd fc1b 	bl	8000a94 <__aeabi_dcmplt>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d014      	beq.n	800328e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003268:	9304      	str	r3, [sp, #16]
 800326a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326e:	9303      	str	r3, [sp, #12]
 8003270:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003274:	9302      	str	r3, [sp, #8]
 8003276:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800327a:	e9cd 2300 	strd	r2, r3, [sp]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	69b9      	ldr	r1, [r7, #24]
 8003284:	69f8      	ldr	r0, [r7, #28]
 8003286:	f7ff fd6f 	bl	8002d68 <_ftoa>
 800328a:	4603      	mov	r3, r0
 800328c:	e247      	b.n	800371e <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 800328e:	2301      	movs	r3, #1
 8003290:	461e      	mov	r6, r3
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800329e:	f7fd fbf9 	bl	8000a94 <__aeabi_dcmplt>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <_etoa+0x94>
 80032a8:	2300      	movs	r3, #0
 80032aa:	461e      	mov	r6, r3
 80032ac:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 80032b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <_etoa+0xb8>
    value = -value;
 80032b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032cc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80032d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80032dc:	2306      	movs	r3, #6
 80032de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80032e2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80032e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80032ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	0d0a      	lsrs	r2, r1, #20
 80032f8:	2300      	movs	r3, #0
 80032fa:	4613      	mov	r3, r2
 80032fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003300:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800330a:	4690      	mov	r8, r2
 800330c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003310:	4644      	mov	r4, r8
 8003312:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003316:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800331a:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800331e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003320:	f7fd f8dc 	bl	80004dc <__aeabi_i2d>
 8003324:	a37e      	add	r3, pc, #504	; (adr r3, 8003520 <_etoa+0x308>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f7fd f941 	bl	80005b0 <__aeabi_dmul>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	a37c      	add	r3, pc, #496	; (adr r3, 8003528 <_etoa+0x310>)
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	f7fc ff82 	bl	8000244 <__adddf3>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4614      	mov	r4, r2
 8003346:	461d      	mov	r5, r3
 8003348:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	4b80      	ldr	r3, [pc, #512]	; (8003554 <_etoa+0x33c>)
 8003352:	f7fc ff75 	bl	8000240 <__aeabi_dsub>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	a374      	add	r3, pc, #464	; (adr r3, 8003530 <_etoa+0x318>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fd f924 	bl	80005b0 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fc ff68 	bl	8000244 <__adddf3>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fbb2 	bl	8000ae4 <__aeabi_d2iz>
 8003380:	4603      	mov	r3, r0
 8003382:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8003384:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003386:	f7fd f8a9 	bl	80004dc <__aeabi_i2d>
 800338a:	a36b      	add	r3, pc, #428	; (adr r3, 8003538 <_etoa+0x320>)
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f7fd f90e 	bl	80005b0 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <_etoa+0x340>)
 80033a2:	f7fc ff4f 	bl	8000244 <__adddf3>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	f7fd fb99 	bl	8000ae4 <__aeabi_d2iz>
 80033b2:	4603      	mov	r3, r0
 80033b4:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80033b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80033b8:	f7fd f890 	bl	80004dc <__aeabi_i2d>
 80033bc:	a360      	add	r3, pc, #384	; (adr r3, 8003540 <_etoa+0x328>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fd f8f5 	bl	80005b0 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4614      	mov	r4, r2
 80033cc:	461d      	mov	r5, r3
 80033ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80033d0:	f7fd f884 	bl	80004dc <__aeabi_i2d>
 80033d4:	a35c      	add	r3, pc, #368	; (adr r3, 8003548 <_etoa+0x330>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f7fd f8e9 	bl	80005b0 <__aeabi_dmul>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4620      	mov	r0, r4
 80033e4:	4629      	mov	r1, r5
 80033e6:	f7fc ff2b 	bl	8000240 <__aeabi_dsub>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 80033f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80033fa:	f7fd f8d9 	bl	80005b0 <__aeabi_dmul>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003408:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800340c:	17da      	asrs	r2, r3, #31
 800340e:	469a      	mov	sl, r3
 8003410:	4693      	mov	fp, r2
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800341e:	2200      	movs	r2, #0
 8003420:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003424:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003428:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	f7fc ff08 	bl	8000244 <__adddf3>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4690      	mov	r8, r2
 800343a:	4699      	mov	r9, r3
 800343c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003440:	f04f 0000 	mov.w	r0, #0
 8003444:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003448:	f7fc fefa 	bl	8000240 <__aeabi_dsub>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4692      	mov	sl, r2
 8003452:	469b      	mov	fp, r3
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <_etoa+0x344>)
 800345a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800345e:	f7fd f9d1 	bl	8000804 <__aeabi_ddiv>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	4b3c      	ldr	r3, [pc, #240]	; (8003560 <_etoa+0x348>)
 8003470:	f7fc fee8 	bl	8000244 <__adddf3>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800347c:	f7fd f9c2 	bl	8000804 <__aeabi_ddiv>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	4b35      	ldr	r3, [pc, #212]	; (8003564 <_etoa+0x34c>)
 800348e:	f7fc fed9 	bl	8000244 <__adddf3>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800349a:	f7fd f9b3 	bl	8000804 <__aeabi_ddiv>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4650      	mov	r0, sl
 80034a4:	4659      	mov	r1, fp
 80034a6:	f7fc fecd 	bl	8000244 <__adddf3>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4640      	mov	r0, r8
 80034b0:	4649      	mov	r1, r9
 80034b2:	f7fd f9a7 	bl	8000804 <__aeabi_ddiv>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <_etoa+0x350>)
 80034c4:	f7fc febe 	bl	8000244 <__adddf3>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fd f86e 	bl	80005b0 <__aeabi_dmul>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80034dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034e0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034e4:	f7fd fad6 	bl	8000a94 <__aeabi_dcmplt>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00d      	beq.n	800350a <_etoa+0x2f2>
    expval--;
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	3b01      	subs	r3, #1
 80034f2:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 80034f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <_etoa+0x348>)
 80034fe:	f7fd f981 	bl	8000804 <__aeabi_ddiv>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	2b63      	cmp	r3, #99	; 0x63
 800350e:	dc2d      	bgt.n	800356c <_etoa+0x354>
 8003510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003512:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003516:	db29      	blt.n	800356c <_etoa+0x354>
 8003518:	2304      	movs	r3, #4
 800351a:	e028      	b.n	800356e <_etoa+0x356>
 800351c:	f3af 8000 	nop.w
 8003520:	509f79fb 	.word	0x509f79fb
 8003524:	3fd34413 	.word	0x3fd34413
 8003528:	8b60c8b3 	.word	0x8b60c8b3
 800352c:	3fc68a28 	.word	0x3fc68a28
 8003530:	636f4361 	.word	0x636f4361
 8003534:	3fd287a7 	.word	0x3fd287a7
 8003538:	0979a371 	.word	0x0979a371
 800353c:	400a934f 	.word	0x400a934f
 8003540:	bbb55516 	.word	0xbbb55516
 8003544:	40026bb1 	.word	0x40026bb1
 8003548:	fefa39ef 	.word	0xfefa39ef
 800354c:	3fe62e42 	.word	0x3fe62e42
 8003550:	7fefffff 	.word	0x7fefffff
 8003554:	3ff80000 	.word	0x3ff80000
 8003558:	3fe00000 	.word	0x3fe00000
 800355c:	402c0000 	.word	0x402c0000
 8003560:	40240000 	.word	0x40240000
 8003564:	40180000 	.word	0x40180000
 8003568:	3ff00000 	.word	0x3ff00000
 800356c:	2305      	movs	r3, #5
 800356e:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003570:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03d      	beq.n	80035f8 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800357c:	a36a      	add	r3, pc, #424	; (adr r3, 8003728 <_etoa+0x510>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003586:	f7fd fa99 	bl	8000abc <__aeabi_dcmpge>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d024      	beq.n	80035da <_etoa+0x3c2>
 8003590:	a367      	add	r3, pc, #412	; (adr r3, 8003730 <_etoa+0x518>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800359a:	f7fd fa7b 	bl	8000a94 <__aeabi_dcmplt>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01a      	beq.n	80035da <_etoa+0x3c2>
      if ((int)prec > expval) {
 80035a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035aa:	429a      	cmp	r2, r3
 80035ac:	da07      	bge.n	80035be <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 80035ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80035b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035bc:	e002      	b.n	80035c4 <_etoa+0x3ac>
      }
      else {
        prec = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80035c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	657b      	str	r3, [r7, #84]	; 0x54
 80035d8:	e00e      	b.n	80035f8 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80035da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <_etoa+0x3e0>
 80035e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d004      	beq.n	80035f8 <_etoa+0x3e0>
        --prec;
 80035ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035f2:	3b01      	subs	r3, #1
 80035f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80035f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 80035fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003604:	429a      	cmp	r2, r3
 8003606:	d904      	bls.n	8003612 <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800360a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003610:	e001      	b.n	8003616 <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <_etoa+0x414>
 8003622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 800362c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <_etoa+0x42e>
    value /= conv.F;
 8003632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800363a:	f7fd f8e3 	bl	8000804 <__aeabi_ddiv>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800364a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <_etoa+0x44c>
 8003652:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800365c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e003      	b.n	800366c <_etoa+0x454>
 8003664:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003668:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800366c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003674:	9304      	str	r3, [sp, #16]
 8003676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003678:	9303      	str	r3, [sp, #12]
 800367a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800367e:	9302      	str	r3, [sp, #8]
 8003680:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003684:	e9cd 3400 	strd	r3, r4, [sp]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	69b9      	ldr	r1, [r7, #24]
 800368e:	69f8      	ldr	r0, [r7, #28]
 8003690:	f7ff fb6a 	bl	8002d68 <_ftoa>
 8003694:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8003696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003698:	2b00      	cmp	r3, #0
 800369a:	d03f      	beq.n	800371c <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800369c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <_etoa+0x494>
 80036a8:	2045      	movs	r0, #69	; 0x45
 80036aa:	e000      	b.n	80036ae <_etoa+0x496>
 80036ac:	2065      	movs	r0, #101	; 0x65
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	1c53      	adds	r3, r2, #1
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	69fc      	ldr	r4, [r7, #28]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	69b9      	ldr	r1, [r7, #24]
 80036ba:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80036bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bfb8      	it	lt
 80036c2:	425b      	neglt	r3, r3
 80036c4:	4618      	mov	r0, r3
 80036c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c8:	0fdb      	lsrs	r3, r3, #31
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036ce:	3a01      	subs	r2, #1
 80036d0:	2105      	movs	r1, #5
 80036d2:	9105      	str	r1, [sp, #20]
 80036d4:	9204      	str	r2, [sp, #16]
 80036d6:	2200      	movs	r2, #0
 80036d8:	9203      	str	r2, [sp, #12]
 80036da:	220a      	movs	r2, #10
 80036dc:	9202      	str	r2, [sp, #8]
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	9000      	str	r0, [sp, #0]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	69b9      	ldr	r1, [r7, #24]
 80036e8:	69f8      	ldr	r0, [r7, #28]
 80036ea:	f7ff fa6a 	bl	8002bc2 <_ntoa_long>
 80036ee:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80036f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00f      	beq.n	800371c <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80036fc:	e007      	b.n	800370e <_etoa+0x4f6>
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	1c53      	adds	r3, r2, #1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	69fc      	ldr	r4, [r7, #28]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	69b9      	ldr	r1, [r7, #24]
 800370a:	2020      	movs	r0, #32
 800370c:	47a0      	blx	r4
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003718:	429a      	cmp	r2, r3
 800371a:	d8f0      	bhi.n	80036fe <_etoa+0x4e6>
    }
  }
  return idx;
 800371c:	697b      	ldr	r3, [r7, #20]
}
 800371e:	4618      	mov	r0, r3
 8003720:	375c      	adds	r7, #92	; 0x5c
 8003722:	46bd      	mov	sp, r7
 8003724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003728:	eb1c432d 	.word	0xeb1c432d
 800372c:	3f1a36e2 	.word	0x3f1a36e2
 8003730:	00000000 	.word	0x00000000
 8003734:	412e8480 	.word	0x412e8480

08003738 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373c:	b0a3      	sub	sp, #140	; 0x8c
 800373e:	af0a      	add	r7, sp, #40	; 0x28
 8003740:	6178      	str	r0, [r7, #20]
 8003742:	6139      	str	r1, [r7, #16]
 8003744:	60fa      	str	r2, [r7, #12]
 8003746:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 84ba 	bne.w	80040c8 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8003754:	4ba3      	ldr	r3, [pc, #652]	; (80039e4 <_vsnprintf+0x2ac>)
 8003756:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003758:	f000 bcb6 	b.w	80040c8 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b25      	cmp	r3, #37	; 0x25
 8003762:	d00d      	beq.n	8003780 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	7818      	ldrb	r0, [r3, #0]
 8003768:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800376a:	1c53      	adds	r3, r2, #1
 800376c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800376e:	697c      	ldr	r4, [r7, #20]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6939      	ldr	r1, [r7, #16]
 8003774:	47a0      	blx	r4
      format++;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	3301      	adds	r3, #1
 800377a:	60bb      	str	r3, [r7, #8]
      continue;
 800377c:	f000 bca4 	b.w	80040c8 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3301      	adds	r3, #1
 8003784:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	3b20      	subs	r3, #32
 8003790:	2b10      	cmp	r3, #16
 8003792:	d857      	bhi.n	8003844 <_vsnprintf+0x10c>
 8003794:	a201      	add	r2, pc, #4	; (adr r2, 800379c <_vsnprintf+0x64>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	0800381d 	.word	0x0800381d
 80037a0:	08003845 	.word	0x08003845
 80037a4:	08003845 	.word	0x08003845
 80037a8:	08003831 	.word	0x08003831
 80037ac:	08003845 	.word	0x08003845
 80037b0:	08003845 	.word	0x08003845
 80037b4:	08003845 	.word	0x08003845
 80037b8:	08003845 	.word	0x08003845
 80037bc:	08003845 	.word	0x08003845
 80037c0:	08003845 	.word	0x08003845
 80037c4:	08003845 	.word	0x08003845
 80037c8:	08003809 	.word	0x08003809
 80037cc:	08003845 	.word	0x08003845
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	08003845 	.word	0x08003845
 80037d8:	08003845 	.word	0x08003845
 80037dc:	080037e1 	.word	0x080037e1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80037e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3301      	adds	r3, #1
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	2301      	movs	r3, #1
 80037f0:	653b      	str	r3, [r7, #80]	; 0x50
 80037f2:	e02a      	b.n	800384a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80037f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f6:	f043 0302 	orr.w	r3, r3, #2
 80037fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	3301      	adds	r3, #1
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	2301      	movs	r3, #1
 8003804:	653b      	str	r3, [r7, #80]	; 0x50
 8003806:	e020      	b.n	800384a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	3301      	adds	r3, #1
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	2301      	movs	r3, #1
 8003818:	653b      	str	r3, [r7, #80]	; 0x50
 800381a:	e016      	b.n	800384a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800381c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800381e:	f043 0308 	orr.w	r3, r3, #8
 8003822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	3301      	adds	r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	2301      	movs	r3, #1
 800382c:	653b      	str	r3, [r7, #80]	; 0x50
 800382e:	e00c      	b.n	800384a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003832:	f043 0310 	orr.w	r3, r3, #16
 8003836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	3301      	adds	r3, #1
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	2301      	movs	r3, #1
 8003840:	653b      	str	r3, [r7, #80]	; 0x50
 8003842:	e002      	b.n	800384a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8003844:	2300      	movs	r3, #0
 8003846:	653b      	str	r3, [r7, #80]	; 0x50
 8003848:	bf00      	nop
      }
    } while (n);
 800384a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384c:	2b00      	cmp	r3, #0
 800384e:	d19c      	bne.n	800378a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff f84c 	bl	80028f6 <_is_digit>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8003864:	f107 0308 	add.w	r3, r7, #8
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff f85a 	bl	8002922 <_atoi>
 800386e:	65b8      	str	r0, [r7, #88]	; 0x58
 8003870:	e01a      	b.n	80038a8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b2a      	cmp	r3, #42	; 0x2a
 8003878:	d116      	bne.n	80038a8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800387a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800387e:	1d1a      	adds	r2, r3, #4
 8003880:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	2b00      	cmp	r3, #0
 800388c:	da07      	bge.n	800389e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800388e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003890:	f043 0302 	orr.w	r3, r3, #2
 8003894:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	425b      	negs	r3, r3
 800389a:	65bb      	str	r3, [r7, #88]	; 0x58
 800389c:	e001      	b.n	80038a2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	3301      	adds	r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b2e      	cmp	r3, #46	; 0x2e
 80038b2:	d127      	bne.n	8003904 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80038b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ba:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	3301      	adds	r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f815 	bl	80028f6 <_is_digit>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80038d2:	f107 0308 	add.w	r3, r7, #8
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff f823 	bl	8002922 <_atoi>
 80038dc:	6578      	str	r0, [r7, #84]	; 0x54
 80038de:	e011      	b.n	8003904 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b2a      	cmp	r3, #42	; 0x2a
 80038e6:	d10d      	bne.n	8003904 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80038e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038ec:	1d1a      	adds	r2, r3, #4
 80038ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80038f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80038fc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3301      	adds	r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	3b68      	subs	r3, #104	; 0x68
 800390a:	2b12      	cmp	r3, #18
 800390c:	d866      	bhi.n	80039dc <_vsnprintf+0x2a4>
 800390e:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <_vsnprintf+0x1dc>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003987 	.word	0x08003987
 8003918:	080039dd 	.word	0x080039dd
 800391c:	080039bd 	.word	0x080039bd
 8003920:	080039dd 	.word	0x080039dd
 8003924:	08003961 	.word	0x08003961
 8003928:	080039dd 	.word	0x080039dd
 800392c:	080039dd 	.word	0x080039dd
 8003930:	080039dd 	.word	0x080039dd
 8003934:	080039dd 	.word	0x080039dd
 8003938:	080039dd 	.word	0x080039dd
 800393c:	080039dd 	.word	0x080039dd
 8003940:	080039dd 	.word	0x080039dd
 8003944:	080039ad 	.word	0x080039ad
 8003948:	080039dd 	.word	0x080039dd
 800394c:	080039dd 	.word	0x080039dd
 8003950:	080039dd 	.word	0x080039dd
 8003954:	080039dd 	.word	0x080039dd
 8003958:	080039dd 	.word	0x080039dd
 800395c:	080039cd 	.word	0x080039cd
      case 'l' :
        flags |= FLAGS_LONG;
 8003960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	3301      	adds	r3, #1
 800396c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b6c      	cmp	r3, #108	; 0x6c
 8003974:	d134      	bne.n	80039e0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3301      	adds	r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003984:	e02c      	b.n	80039e0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3301      	adds	r3, #1
 8003992:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b68      	cmp	r3, #104	; 0x68
 800399a:	d125      	bne.n	80039e8 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 800399c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	3301      	adds	r3, #1
 80039a8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80039aa:	e01d      	b.n	80039e8 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80039ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60bb      	str	r3, [r7, #8]
        break;
 80039ba:	e016      	b.n	80039ea <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80039bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60bb      	str	r3, [r7, #8]
        break;
 80039ca:	e00e      	b.n	80039ea <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80039cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60bb      	str	r3, [r7, #8]
        break;
 80039da:	e006      	b.n	80039ea <_vsnprintf+0x2b2>
      default :
        break;
 80039dc:	bf00      	nop
 80039de:	e004      	b.n	80039ea <_vsnprintf+0x2b2>
        break;
 80039e0:	bf00      	nop
 80039e2:	e002      	b.n	80039ea <_vsnprintf+0x2b2>
 80039e4:	080028a5 	.word	0x080028a5
        break;
 80039e8:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	3b25      	subs	r3, #37	; 0x25
 80039f0:	2b53      	cmp	r3, #83	; 0x53
 80039f2:	f200 835c 	bhi.w	80040ae <_vsnprintf+0x976>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <_vsnprintf+0x2c4>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08004097 	.word	0x08004097
 8003a00:	080040af 	.word	0x080040af
 8003a04:	080040af 	.word	0x080040af
 8003a08:	080040af 	.word	0x080040af
 8003a0c:	080040af 	.word	0x080040af
 8003a10:	080040af 	.word	0x080040af
 8003a14:	080040af 	.word	0x080040af
 8003a18:	080040af 	.word	0x080040af
 8003a1c:	080040af 	.word	0x080040af
 8003a20:	080040af 	.word	0x080040af
 8003a24:	080040af 	.word	0x080040af
 8003a28:	080040af 	.word	0x080040af
 8003a2c:	080040af 	.word	0x080040af
 8003a30:	080040af 	.word	0x080040af
 8003a34:	080040af 	.word	0x080040af
 8003a38:	080040af 	.word	0x080040af
 8003a3c:	080040af 	.word	0x080040af
 8003a40:	080040af 	.word	0x080040af
 8003a44:	080040af 	.word	0x080040af
 8003a48:	080040af 	.word	0x080040af
 8003a4c:	080040af 	.word	0x080040af
 8003a50:	080040af 	.word	0x080040af
 8003a54:	080040af 	.word	0x080040af
 8003a58:	080040af 	.word	0x080040af
 8003a5c:	080040af 	.word	0x080040af
 8003a60:	080040af 	.word	0x080040af
 8003a64:	080040af 	.word	0x080040af
 8003a68:	080040af 	.word	0x080040af
 8003a6c:	080040af 	.word	0x080040af
 8003a70:	080040af 	.word	0x080040af
 8003a74:	080040af 	.word	0x080040af
 8003a78:	080040af 	.word	0x080040af
 8003a7c:	08003e4f 	.word	0x08003e4f
 8003a80:	08003e03 	.word	0x08003e03
 8003a84:	08003e4f 	.word	0x08003e4f
 8003a88:	080040af 	.word	0x080040af
 8003a8c:	080040af 	.word	0x080040af
 8003a90:	080040af 	.word	0x080040af
 8003a94:	080040af 	.word	0x080040af
 8003a98:	080040af 	.word	0x080040af
 8003a9c:	080040af 	.word	0x080040af
 8003aa0:	080040af 	.word	0x080040af
 8003aa4:	080040af 	.word	0x080040af
 8003aa8:	080040af 	.word	0x080040af
 8003aac:	080040af 	.word	0x080040af
 8003ab0:	080040af 	.word	0x080040af
 8003ab4:	080040af 	.word	0x080040af
 8003ab8:	080040af 	.word	0x080040af
 8003abc:	080040af 	.word	0x080040af
 8003ac0:	080040af 	.word	0x080040af
 8003ac4:	080040af 	.word	0x080040af
 8003ac8:	08003b4d 	.word	0x08003b4d
 8003acc:	080040af 	.word	0x080040af
 8003ad0:	080040af 	.word	0x080040af
 8003ad4:	080040af 	.word	0x080040af
 8003ad8:	080040af 	.word	0x080040af
 8003adc:	080040af 	.word	0x080040af
 8003ae0:	080040af 	.word	0x080040af
 8003ae4:	080040af 	.word	0x080040af
 8003ae8:	080040af 	.word	0x080040af
 8003aec:	080040af 	.word	0x080040af
 8003af0:	08003b4d 	.word	0x08003b4d
 8003af4:	08003ebb 	.word	0x08003ebb
 8003af8:	08003b4d 	.word	0x08003b4d
 8003afc:	08003e4f 	.word	0x08003e4f
 8003b00:	08003e03 	.word	0x08003e03
 8003b04:	08003e4f 	.word	0x08003e4f
 8003b08:	080040af 	.word	0x080040af
 8003b0c:	08003b4d 	.word	0x08003b4d
 8003b10:	080040af 	.word	0x080040af
 8003b14:	080040af 	.word	0x080040af
 8003b18:	080040af 	.word	0x080040af
 8003b1c:	080040af 	.word	0x080040af
 8003b20:	080040af 	.word	0x080040af
 8003b24:	08003b4d 	.word	0x08003b4d
 8003b28:	08003ffb 	.word	0x08003ffb
 8003b2c:	080040af 	.word	0x080040af
 8003b30:	080040af 	.word	0x080040af
 8003b34:	08003f33 	.word	0x08003f33
 8003b38:	080040af 	.word	0x080040af
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	080040af 	.word	0x080040af
 8003b44:	080040af 	.word	0x080040af
 8003b48:	08003b4d 	.word	0x08003b4d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b78      	cmp	r3, #120	; 0x78
 8003b52:	d003      	beq.n	8003b5c <_vsnprintf+0x424>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b58      	cmp	r3, #88	; 0x58
 8003b5a:	d102      	bne.n	8003b62 <_vsnprintf+0x42a>
          base = 16U;
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b60:	e013      	b.n	8003b8a <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b6f      	cmp	r3, #111	; 0x6f
 8003b68:	d102      	bne.n	8003b70 <_vsnprintf+0x438>
          base =  8U;
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b6e:	e00c      	b.n	8003b8a <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b62      	cmp	r3, #98	; 0x62
 8003b76:	d102      	bne.n	8003b7e <_vsnprintf+0x446>
          base =  2U;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b7c:	e005      	b.n	8003b8a <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8003b7e:	230a      	movs	r3, #10
 8003b80:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b84:	f023 0310 	bic.w	r3, r3, #16
 8003b88:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b58      	cmp	r3, #88	; 0x58
 8003b90:	d103      	bne.n	8003b9a <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8003b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b94:	f043 0320 	orr.w	r3, r3, #32
 8003b98:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b69      	cmp	r3, #105	; 0x69
 8003ba0:	d007      	beq.n	8003bb2 <_vsnprintf+0x47a>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d003      	beq.n	8003bb2 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bac:	f023 030c 	bic.w	r3, r3, #12
 8003bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8003bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b69      	cmp	r3, #105	; 0x69
 8003bca:	d004      	beq.n	8003bd6 <_vsnprintf+0x49e>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b64      	cmp	r3, #100	; 0x64
 8003bd2:	f040 8098 	bne.w	8003d06 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d031      	beq.n	8003c44 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be4:	3307      	adds	r3, #7
 8003be6:	f023 0307 	bic.w	r3, r3, #7
 8003bea:	f103 0208 	add.w	r2, r3, #8
 8003bee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003bfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da06      	bge.n	8003c10 <_vsnprintf+0x4d8>
 8003c02:	2100      	movs	r1, #0
 8003c04:	f1d2 0800 	rsbs	r8, r2, #0
 8003c08:	eb61 0903 	sbc.w	r9, r1, r3
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	69f9      	ldr	r1, [r7, #28]
 8003c12:	0fc9      	lsrs	r1, r1, #31
 8003c14:	b2c9      	uxtb	r1, r1
 8003c16:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003c18:	2400      	movs	r4, #0
 8003c1a:	4682      	mov	sl, r0
 8003c1c:	46a3      	mov	fp, r4
 8003c1e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003c20:	9008      	str	r0, [sp, #32]
 8003c22:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003c24:	9007      	str	r0, [sp, #28]
 8003c26:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c28:	9006      	str	r0, [sp, #24]
 8003c2a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003c2e:	9102      	str	r1, [sp, #8]
 8003c30:	e9cd 2300 	strd	r2, r3, [sp]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c38:	6939      	ldr	r1, [r7, #16]
 8003c3a:	6978      	ldr	r0, [r7, #20]
 8003c3c:	f7ff f827 	bl	8002c8e <_ntoa_long_long>
 8003c40:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003c42:	e0da      	b.n	8003dfa <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d020      	beq.n	8003c90 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8003c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bfb8      	it	lt
 8003c62:	425b      	neglt	r3, r3
 8003c64:	4619      	mov	r1, r3
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	0fdb      	lsrs	r3, r3, #31
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c6e:	9205      	str	r2, [sp, #20]
 8003c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c72:	9204      	str	r2, [sp, #16]
 8003c74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c76:	9203      	str	r2, [sp, #12]
 8003c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7a:	9202      	str	r2, [sp, #8]
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	9100      	str	r1, [sp, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c84:	6939      	ldr	r1, [r7, #16]
 8003c86:	6978      	ldr	r0, [r7, #20]
 8003c88:	f7fe ff9b 	bl	8002bc2 <_ntoa_long>
 8003c8c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003c8e:	e0b4      	b.n	8003dfa <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <_vsnprintf+0x572>
 8003c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c9e:	1d1a      	adds	r2, r3, #4
 8003ca0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e012      	b.n	8003cd0 <_vsnprintf+0x598>
 8003caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <_vsnprintf+0x58c>
 8003cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb8:	1d1a      	adds	r2, r3, #4
 8003cba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	e005      	b.n	8003cd0 <_vsnprintf+0x598>
 8003cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bfb8      	it	lt
 8003cd8:	425b      	neglt	r3, r3
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	0fdb      	lsrs	r3, r3, #31
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ce4:	9205      	str	r2, [sp, #20]
 8003ce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ce8:	9204      	str	r2, [sp, #16]
 8003cea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cec:	9203      	str	r2, [sp, #12]
 8003cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf0:	9202      	str	r2, [sp, #8]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	9100      	str	r1, [sp, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cfa:	6939      	ldr	r1, [r7, #16]
 8003cfc:	6978      	ldr	r0, [r7, #20]
 8003cfe:	f7fe ff60 	bl	8002bc2 <_ntoa_long>
 8003d02:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003d04:	e079      	b.n	8003dfa <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d022      	beq.n	8003d56 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d14:	3307      	adds	r3, #7
 8003d16:	f023 0307 	bic.w	r3, r3, #7
 8003d1a:	f103 0208 	add.w	r2, r3, #8
 8003d1e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003d28:	2000      	movs	r0, #0
 8003d2a:	460d      	mov	r5, r1
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003d30:	9108      	str	r1, [sp, #32]
 8003d32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d34:	9107      	str	r1, [sp, #28]
 8003d36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d38:	9106      	str	r1, [sp, #24]
 8003d3a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003d3e:	2100      	movs	r1, #0
 8003d40:	9102      	str	r1, [sp, #8]
 8003d42:	e9cd 2300 	strd	r2, r3, [sp]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d4a:	6939      	ldr	r1, [r7, #16]
 8003d4c:	6978      	ldr	r0, [r7, #20]
 8003d4e:	f7fe ff9e 	bl	8002c8e <_ntoa_long_long>
 8003d52:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003d54:	e051      	b.n	8003dfa <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d018      	beq.n	8003d92 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d64:	1d1a      	adds	r2, r3, #4
 8003d66:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d6e:	9205      	str	r2, [sp, #20]
 8003d70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d72:	9204      	str	r2, [sp, #16]
 8003d74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d76:	9203      	str	r2, [sp, #12]
 8003d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7a:	9202      	str	r2, [sp, #8]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	9201      	str	r2, [sp, #4]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d86:	6939      	ldr	r1, [r7, #16]
 8003d88:	6978      	ldr	r0, [r7, #20]
 8003d8a:	f7fe ff1a 	bl	8002bc2 <_ntoa_long>
 8003d8e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003d90:	e033      	b.n	8003dfa <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <_vsnprintf+0x674>
 8003d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003da0:	1d1a      	adds	r2, r3, #4
 8003da2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e012      	b.n	8003dd2 <_vsnprintf+0x69a>
 8003dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <_vsnprintf+0x68e>
 8003db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	e005      	b.n	8003dd2 <_vsnprintf+0x69a>
 8003dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd6:	9305      	str	r3, [sp, #20]
 8003dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dda:	9304      	str	r3, [sp, #16]
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dde:	9303      	str	r3, [sp, #12]
 8003de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de2:	9302      	str	r3, [sp, #8]
 8003de4:	2300      	movs	r3, #0
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003df0:	6939      	ldr	r1, [r7, #16]
 8003df2:	6978      	ldr	r0, [r7, #20]
 8003df4:	f7fe fee5 	bl	8002bc2 <_ntoa_long>
 8003df8:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60bb      	str	r3, [r7, #8]
        break;
 8003e00:	e162      	b.n	80040c8 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b46      	cmp	r3, #70	; 0x46
 8003e08:	d103      	bne.n	8003e12 <_vsnprintf+0x6da>
 8003e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0c:	f043 0320 	orr.w	r3, r3, #32
 8003e10:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e16:	3307      	adds	r3, #7
 8003e18:	f023 0307 	bic.w	r3, r3, #7
 8003e1c:	f103 0208 	add.w	r2, r3, #8
 8003e20:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003e2a:	9104      	str	r1, [sp, #16]
 8003e2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e2e:	9103      	str	r1, [sp, #12]
 8003e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e32:	9102      	str	r1, [sp, #8]
 8003e34:	e9cd 2300 	strd	r2, r3, [sp]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e3c:	6939      	ldr	r1, [r7, #16]
 8003e3e:	6978      	ldr	r0, [r7, #20]
 8003e40:	f7fe ff92 	bl	8002d68 <_ftoa>
 8003e44:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	60bb      	str	r3, [r7, #8]
        break;
 8003e4c:	e13c      	b.n	80040c8 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b67      	cmp	r3, #103	; 0x67
 8003e54:	d003      	beq.n	8003e5e <_vsnprintf+0x726>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b47      	cmp	r3, #71	; 0x47
 8003e5c:	d103      	bne.n	8003e66 <_vsnprintf+0x72e>
 8003e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e64:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b45      	cmp	r3, #69	; 0x45
 8003e6c:	d003      	beq.n	8003e76 <_vsnprintf+0x73e>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b47      	cmp	r3, #71	; 0x47
 8003e74:	d103      	bne.n	8003e7e <_vsnprintf+0x746>
 8003e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e78:	f043 0320 	orr.w	r3, r3, #32
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e82:	3307      	adds	r3, #7
 8003e84:	f023 0307 	bic.w	r3, r3, #7
 8003e88:	f103 0208 	add.w	r2, r3, #8
 8003e8c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003e96:	9104      	str	r1, [sp, #16]
 8003e98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e9a:	9103      	str	r1, [sp, #12]
 8003e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e9e:	9102      	str	r1, [sp, #8]
 8003ea0:	e9cd 2300 	strd	r2, r3, [sp]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	6978      	ldr	r0, [r7, #20]
 8003eac:	f7ff f9b4 	bl	8003218 <_etoa>
 8003eb0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	60bb      	str	r3, [r7, #8]
        break;
 8003eb8:	e106      	b.n	80040c8 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10e      	bne.n	8003ee6 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8003ec8:	e007      	b.n	8003eda <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8003eca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ecc:	1c53      	adds	r3, r2, #1
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed0:	697c      	ldr	r4, [r7, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6939      	ldr	r1, [r7, #16]
 8003ed6:	2020      	movs	r0, #32
 8003ed8:	47a0      	blx	r4
          while (l++ < width) {
 8003eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	647a      	str	r2, [r7, #68]	; 0x44
 8003ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d8f1      	bhi.n	8003eca <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003ee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eea:	1d1a      	adds	r2, r3, #4
 8003eec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	b2d8      	uxtb	r0, r3
 8003ef4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ef6:	1c53      	adds	r3, r2, #1
 8003ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efa:	697c      	ldr	r4, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6939      	ldr	r1, [r7, #16]
 8003f00:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00e      	beq.n	8003f2a <_vsnprintf+0x7f2>
          while (l++ < width) {
 8003f0c:	e007      	b.n	8003f1e <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 8003f0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f10:	1c53      	adds	r3, r2, #1
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f14:	697c      	ldr	r4, [r7, #20]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	2020      	movs	r0, #32
 8003f1c:	47a0      	blx	r4
          while (l++ < width) {
 8003f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	647a      	str	r2, [r7, #68]	; 0x44
 8003f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d8f1      	bhi.n	8003f0e <_vsnprintf+0x7d6>
          }
        }
        format++;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60bb      	str	r3, [r7, #8]
        break;
 8003f30:	e0ca      	b.n	80040c8 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f36:	1d1a      	adds	r2, r3, #4
 8003f38:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <_vsnprintf+0x812>
 8003f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f48:	e001      	b.n	8003f4e <_vsnprintf+0x816>
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003f52:	f7fe fcb4 	bl	80028be <_strnlen_s>
 8003f56:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 8003f62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f66:	4293      	cmp	r3, r2
 8003f68:	bf28      	it	cs
 8003f6a:	4613      	movcs	r3, r2
 8003f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11a      	bne.n	8003fae <_vsnprintf+0x876>
          while (l++ < width) {
 8003f78:	e007      	b.n	8003f8a <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 8003f7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f7c:	1c53      	adds	r3, r2, #1
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f80:	697c      	ldr	r4, [r7, #20]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6939      	ldr	r1, [r7, #16]
 8003f86:	2020      	movs	r0, #32
 8003f88:	47a0      	blx	r4
          while (l++ < width) {
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d8f1      	bhi.n	8003f7a <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003f96:	e00a      	b.n	8003fae <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 8003f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	643a      	str	r2, [r7, #64]	; 0x40
 8003f9e:	7818      	ldrb	r0, [r3, #0]
 8003fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa2:	1c53      	adds	r3, r2, #1
 8003fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa6:	697c      	ldr	r4, [r7, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6939      	ldr	r1, [r7, #16]
 8003fac:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <_vsnprintf+0x892>
 8003fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0eb      	beq.n	8003f98 <_vsnprintf+0x860>
 8003fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	657a      	str	r2, [r7, #84]	; 0x54
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e6      	bne.n	8003f98 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00e      	beq.n	8003ff2 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8003fd4:	e007      	b.n	8003fe6 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8003fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fd8:	1c53      	adds	r3, r2, #1
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fdc:	697c      	ldr	r4, [r7, #20]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6939      	ldr	r1, [r7, #16]
 8003fe2:	2020      	movs	r0, #32
 8003fe4:	47a0      	blx	r4
          while (l++ < width) {
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d8f1      	bhi.n	8003fd6 <_vsnprintf+0x89e>
          }
        }
        format++;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60bb      	str	r3, [r7, #8]
        break;
 8003ff8:	e066      	b.n	80040c8 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004000:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004004:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004006:	2300      	movs	r3, #0
 8004008:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800400c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004010:	2b00      	cmp	r3, #0
 8004012:	d023      	beq.n	800405c <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004018:	1d1a      	adds	r2, r3, #4
 800401a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	603a      	str	r2, [r7, #0]
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402a:	9308      	str	r3, [sp, #32]
 800402c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800402e:	9307      	str	r3, [sp, #28]
 8004030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004032:	9306      	str	r3, [sp, #24]
 8004034:	f04f 0210 	mov.w	r2, #16
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004040:	2300      	movs	r3, #0
 8004042:	9302      	str	r3, [sp, #8]
 8004044:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004048:	e9cd 3400 	strd	r3, r4, [sp]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004050:	6939      	ldr	r1, [r7, #16]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7fe fe1b 	bl	8002c8e <_ntoa_long_long>
 8004058:	64f8      	str	r0, [r7, #76]	; 0x4c
 800405a:	e018      	b.n	800408e <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800405c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004060:	1d1a      	adds	r2, r3, #4
 8004062:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800406c:	9305      	str	r3, [sp, #20]
 800406e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004070:	9304      	str	r3, [sp, #16]
 8004072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004074:	9303      	str	r3, [sp, #12]
 8004076:	2310      	movs	r3, #16
 8004078:	9302      	str	r3, [sp, #8]
 800407a:	2300      	movs	r3, #0
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	9200      	str	r2, [sp, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004084:	6939      	ldr	r1, [r7, #16]
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f7fe fd9b 	bl	8002bc2 <_ntoa_long>
 800408c:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3301      	adds	r3, #1
 8004092:	60bb      	str	r3, [r7, #8]
        break;
 8004094:	e018      	b.n	80040c8 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004098:	1c53      	adds	r3, r2, #1
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409c:	697c      	ldr	r4, [r7, #20]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6939      	ldr	r1, [r7, #16]
 80040a2:	2025      	movs	r0, #37	; 0x25
 80040a4:	47a0      	blx	r4
        format++;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60bb      	str	r3, [r7, #8]
        break;
 80040ac:	e00c      	b.n	80040c8 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	7818      	ldrb	r0, [r3, #0]
 80040b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040b4:	1c53      	adds	r3, r2, #1
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b8:	697c      	ldr	r4, [r7, #20]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6939      	ldr	r1, [r7, #16]
 80040be:	47a0      	blx	r4
        format++;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60bb      	str	r3, [r7, #8]
        break;
 80040c6:	bf00      	nop
  while (*format)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f ab45 	bne.w	800375c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80040d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <_vsnprintf+0x9a8>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1e5a      	subs	r2, r3, #1
 80040de:	e000      	b.n	80040e2 <_vsnprintf+0x9aa>
 80040e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040e2:	697c      	ldr	r4, [r7, #20]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6939      	ldr	r1, [r7, #16]
 80040e8:	2000      	movs	r0, #0
 80040ea:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80040ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3764      	adds	r7, #100	; 0x64
 80040f2:	46bd      	mov	sp, r7
 80040f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080040f8 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80040f8:	b40e      	push	{r1, r2, r3}
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b087      	sub	sp, #28
 80040fe:	af02      	add	r7, sp, #8
 8004100:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004102:	f107 0320 	add.w	r3, r7, #32
 8004106:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f04f 32ff 	mov.w	r2, #4294967295
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4805      	ldr	r0, [pc, #20]	; (800412c <sprintf_+0x34>)
 8004116:	f7ff fb0f 	bl	8003738 <_vsnprintf>
 800411a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800411c:	68fb      	ldr	r3, [r7, #12]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004128:	b003      	add	sp, #12
 800412a:	4770      	bx	lr
 800412c:	08002879 	.word	0x08002879

08004130 <RTC_Init>:
uint8_t rmon,rday,rhour,rmin,rsec,rweek;
uint8_t const table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5};
uint8_t const mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};

void RTC_Init(RTC_HandleTypeDef* hrtc)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af02      	add	r7, sp, #8
 8004136:	6078      	str	r0, [r7, #4]
	hrtc->Instance = RTC;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a17      	ldr	r2, [pc, #92]	; (8004198 <RTC_Init+0x68>)
 800413c:	601a      	str	r2, [r3, #0]
	hrtc->Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f04f 32ff 	mov.w	r2, #4294967295
 8004144:	605a      	str	r2, [r3, #4]
	hrtc->Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(hrtc) != HAL_OK)
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f002 fc77 	bl	8006a40 <HAL_RTC_Init>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <RTC_Init+0x2c>
	{
		Error_Handler();
 8004158:	f7fe fb88 	bl	800286c <Error_Handler>
	}
	//Check If first time connect to power source
	if(HAL_RTCEx_BKUPRead(hrtc,RTC_BKP_DR1)!=0x5050){//Deafult Value should be 0xffff
 800415c:	2101      	movs	r1, #1
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f002 fd9c 	bl	8006c9c <HAL_RTCEx_BKUPRead>
 8004164:	4603      	mov	r3, r0
 8004166:	f245 0250 	movw	r2, #20560	; 0x5050
 800416a:	4293      	cmp	r3, r2
 800416c:	d010      	beq.n	8004190 <RTC_Init+0x60>
		HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR1,0x5050);
 800416e:	f245 0250 	movw	r2, #20560	; 0x5050
 8004172:	2101      	movs	r1, #1
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f002 fd77 	bl	8006c68 <HAL_RTCEx_BKUPWrite>
		RTC_Set(2022,1,1,0,0,0);
 800417a:	2300      	movs	r3, #0
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	2300      	movs	r3, #0
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	2300      	movs	r3, #0
 8004184:	2201      	movs	r2, #1
 8004186:	2101      	movs	r1, #1
 8004188:	f240 70e6 	movw	r0, #2022	; 0x7e6
 800418c:	f000 f806 	bl	800419c <RTC_Set>
	}
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40002800 	.word	0x40002800

0800419c <RTC_Set>:

uint8_t RTC_Set(uint16_t syear, int8_t smon, uint8_t sday,uint8_t rhour,uint8_t rmin,uint8_t rsec){
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4604      	mov	r4, r0
 80041a4:	4608      	mov	r0, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	461a      	mov	r2, r3
 80041aa:	4623      	mov	r3, r4
 80041ac:	80fb      	strh	r3, [r7, #6]
 80041ae:	4603      	mov	r3, r0
 80041b0:	717b      	strb	r3, [r7, #5]
 80041b2:	460b      	mov	r3, r1
 80041b4:	713b      	strb	r3, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set Time According To Parameters (Be Done Later Using USART)
	 */
	uint16_t t;
	uint32_t seccount=0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
	if(syear<2000||syear>2099)return 1;// Range: 1970-2099
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80041c4:	d304      	bcc.n	80041d0 <RTC_Set+0x34>
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	f640 0233 	movw	r2, #2099	; 0x833
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d901      	bls.n	80041d4 <RTC_Set+0x38>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e081      	b.n	80042d8 <RTC_Set+0x13c>
	for(t=1970;t<syear;++t){
 80041d4:	f240 73b2 	movw	r3, #1970	; 0x7b2
 80041d8:	81fb      	strh	r3, [r7, #14]
 80041da:	e014      	b.n	8004206 <RTC_Set+0x6a>
		if(Is_Leap_Year(t))seccount+=31622400;
 80041dc:	89fb      	ldrh	r3, [r7, #14]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f9dc 	bl	800459c <Is_Leap_Year>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <RTC_Set+0x5c>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
 80041f0:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	e003      	b.n	8004200 <RTC_Set+0x64>
		else seccount+=31536000;
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <RTC_Set+0x144>)
 80041fc:	4413      	add	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
	for(t=1970;t<syear;++t){
 8004200:	89fb      	ldrh	r3, [r7, #14]
 8004202:	3301      	adds	r3, #1
 8004204:	81fb      	strh	r3, [r7, #14]
 8004206:	89fa      	ldrh	r2, [r7, #14]
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	429a      	cmp	r2, r3
 800420c:	d3e6      	bcc.n	80041dc <RTC_Set+0x40>
	}
	smon-=1;
 800420e:	797b      	ldrb	r3, [r7, #5]
 8004210:	3b01      	subs	r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	717b      	strb	r3, [r7, #5]
	for(t=0;t<smon;t++){
 8004216:	2300      	movs	r3, #0
 8004218:	81fb      	strh	r3, [r7, #14]
 800421a:	e01c      	b.n	8004256 <RTC_Set+0xba>
		seccount+=(uint32_t)mon_table[t]*86400;
 800421c:	89fb      	ldrh	r3, [r7, #14]
 800421e:	4a31      	ldr	r2, [pc, #196]	; (80042e4 <RTC_Set+0x148>)
 8004220:	5cd3      	ldrb	r3, [r2, r3]
 8004222:	461a      	mov	r2, r3
 8004224:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <RTC_Set+0x14c>)
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4413      	add	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f9b2 	bl	800459c <Is_Leap_Year>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <RTC_Set+0xb4>
 800423e:	89fb      	ldrh	r3, [r7, #14]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <RTC_Set+0xb4>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800424a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800424e:	60bb      	str	r3, [r7, #8]
	for(t=0;t<smon;t++){
 8004250:	89fb      	ldrh	r3, [r7, #14]
 8004252:	3301      	adds	r3, #1
 8004254:	81fb      	strh	r3, [r7, #14]
 8004256:	89fa      	ldrh	r2, [r7, #14]
 8004258:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800425c:	429a      	cmp	r2, r3
 800425e:	dbdd      	blt.n	800421c <RTC_Set+0x80>
	}
	seccount+=(uint32_t)(sday-1)*86400;
 8004260:	793b      	ldrb	r3, [r7, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	461a      	mov	r2, r3
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <RTC_Set+0x14c>)
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4413      	add	r3, r2
 8004270:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rhour*3600;
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	4413      	add	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rmin*60;
 8004282:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4413      	add	r3, r2
 8004294:	60bb      	str	r3, [r7, #8]
	seccount += rsec;
 8004296:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4413      	add	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]

	RTC->CRL|=1<<4;
 80042a0:	4b12      	ldr	r3, [pc, #72]	; (80042ec <RTC_Set+0x150>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a11      	ldr	r2, [pc, #68]	; (80042ec <RTC_Set+0x150>)
 80042a6:	f043 0310 	orr.w	r3, r3, #16
 80042aa:	6053      	str	r3, [r2, #4]
	RTC->CNTL=seccount&0xffff;
 80042ac:	4a0f      	ldr	r2, [pc, #60]	; (80042ec <RTC_Set+0x150>)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	61d3      	str	r3, [r2, #28]
	RTC->CNTH=seccount>>16;
 80042b4:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <RTC_Set+0x150>)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	6193      	str	r3, [r2, #24]
	RTC->CRL&=~(1<<4);
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <RTC_Set+0x150>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <RTC_Set+0x150>)
 80042c2:	f023 0310 	bic.w	r3, r3, #16
 80042c6:	6053      	str	r3, [r2, #4]
	while(!(RTC->CRL&(1<<5)));
 80042c8:	bf00      	nop
 80042ca:	4b08      	ldr	r3, [pc, #32]	; (80042ec <RTC_Set+0x150>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f9      	beq.n	80042ca <RTC_Set+0x12e>

	return 0;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd90      	pop	{r4, r7, pc}
 80042e0:	01e13380 	.word	0x01e13380
 80042e4:	0802c734 	.word	0x0802c734
 80042e8:	00015180 	.word	0x00015180
 80042ec:	40002800 	.word	0x40002800

080042f0 <RTC_Get>:

uint8_t RTC_Get(void){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
	/*
	 * Refresh Time variables in rtc.c
	 */
	static uint16_t daycnt=0;
	uint32_t timecount=0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]
	uint32_t temp=0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
	uint32_t temp1=0;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]

	timecount=RTC->CNTH;
 8004302:	4b65      	ldr	r3, [pc, #404]	; (8004498 <RTC_Get+0x1a8>)
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	607b      	str	r3, [r7, #4]
	timecount<<=16;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	607b      	str	r3, [r7, #4]
	timecount+=RTC->CNTL;
 800430e:	4b62      	ldr	r3, [pc, #392]	; (8004498 <RTC_Get+0x1a8>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	607b      	str	r3, [r7, #4]

	temp=timecount/86400;//Day
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a60      	ldr	r2, [pc, #384]	; (800449c <RTC_Get+0x1ac>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	60fb      	str	r3, [r7, #12]
	if(daycnt!=temp){//New Day
 8004324:	4b5e      	ldr	r3, [pc, #376]	; (80044a0 <RTC_Get+0x1b0>)
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4293      	cmp	r3, r2
 800432e:	d066      	beq.n	80043fe <RTC_Get+0x10e>
		daycnt=temp;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	b29a      	uxth	r2, r3
 8004334:	4b5a      	ldr	r3, [pc, #360]	; (80044a0 <RTC_Get+0x1b0>)
 8004336:	801a      	strh	r2, [r3, #0]
		temp1=1970;
 8004338:	f240 73b2 	movw	r3, #1970	; 0x7b2
 800433c:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 800433e:	e01b      	b.n	8004378 <RTC_Get+0x88>
			if(Is_Leap_Year(temp1)){
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	b29b      	uxth	r3, r3
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f929 	bl	800459c <Is_Leap_Year>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00c      	beq.n	800436a <RTC_Get+0x7a>
				if(temp>=366)temp-=366;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8004356:	d304      	bcc.n	8004362 <RTC_Get+0x72>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e007      	b.n	8004372 <RTC_Get+0x82>
				else{temp1++; break;}
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	3301      	adds	r3, #1
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	e00a      	b.n	8004380 <RTC_Get+0x90>
			}
			else temp-=365;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 8004370:	60fb      	str	r3, [r7, #12]
			temp1++;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3301      	adds	r3, #1
 8004376:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 800437e:	d8df      	bhi.n	8004340 <RTC_Get+0x50>
		}
		ryear=temp1;//Year
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	b29a      	uxth	r2, r3
 8004384:	4b47      	ldr	r3, [pc, #284]	; (80044a4 <RTC_Get+0x1b4>)
 8004386:	801a      	strh	r2, [r3, #0]
		temp1=0;
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 800438c:	e024      	b.n	80043d8 <RTC_Get+0xe8>
			if(Is_Leap_Year(ryear)&&temp1==1){
 800438e:	4b45      	ldr	r3, [pc, #276]	; (80044a4 <RTC_Get+0x1b4>)
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f902 	bl	800459c <Is_Leap_Year>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <RTC_Get+0xc2>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d106      	bne.n	80043b2 <RTC_Get+0xc2>
				if(temp>=29)temp-=29;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b1c      	cmp	r3, #28
 80043a8:	d91a      	bls.n	80043e0 <RTC_Get+0xf0>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b1d      	subs	r3, #29
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e00f      	b.n	80043d2 <RTC_Get+0xe2>
				else break;
			}else{
			if(temp>=mon_table[temp1])temp-=mon_table[temp1];
 80043b2:	4a3d      	ldr	r2, [pc, #244]	; (80044a8 <RTC_Get+0x1b8>)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4413      	add	r3, r2
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4293      	cmp	r3, r2
 80043c0:	d310      	bcc.n	80043e4 <RTC_Get+0xf4>
 80043c2:	4a39      	ldr	r2, [pc, #228]	; (80044a8 <RTC_Get+0x1b8>)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4413      	add	r3, r2
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
			else break;
			}
			temp1++;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b1b      	cmp	r3, #27
 80043dc:	d8d7      	bhi.n	800438e <RTC_Get+0x9e>
 80043de:	e002      	b.n	80043e6 <RTC_Get+0xf6>
				else break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <RTC_Get+0xf6>
			else break;
 80043e4:	bf00      	nop
		}
		rmon=temp1+1;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <RTC_Get+0x1bc>)
 80043f0:	701a      	strb	r2, [r3, #0]
		rday=temp+1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	3301      	adds	r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b2d      	ldr	r3, [pc, #180]	; (80044b0 <RTC_Get+0x1c0>)
 80043fc:	701a      	strb	r2, [r3, #0]
	}
	temp=timecount%86400;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a26      	ldr	r2, [pc, #152]	; (800449c <RTC_Get+0x1ac>)
 8004402:	fba2 1203 	umull	r1, r2, r2, r3
 8004406:	0c12      	lsrs	r2, r2, #16
 8004408:	492a      	ldr	r1, [pc, #168]	; (80044b4 <RTC_Get+0x1c4>)
 800440a:	fb01 f202 	mul.w	r2, r1, r2
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
	rhour=temp/3600;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a28      	ldr	r2, [pc, #160]	; (80044b8 <RTC_Get+0x1c8>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	0adb      	lsrs	r3, r3, #11
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4b27      	ldr	r3, [pc, #156]	; (80044bc <RTC_Get+0x1cc>)
 8004420:	701a      	strb	r2, [r3, #0]
	rmin=(temp%3600)/60;
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <RTC_Get+0x1c8>)
 8004426:	fba3 1302 	umull	r1, r3, r3, r2
 800442a:	0adb      	lsrs	r3, r3, #11
 800442c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <RTC_Get+0x1d0>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	b2da      	uxtb	r2, r3
 8004440:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <RTC_Get+0x1d4>)
 8004442:	701a      	strb	r2, [r3, #0]
	rsec=(temp%3600)%60;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <RTC_Get+0x1c8>)
 8004448:	fba2 1203 	umull	r1, r2, r2, r3
 800444c:	0ad2      	lsrs	r2, r2, #11
 800444e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004452:	fb01 f202 	mul.w	r2, r1, r2
 8004456:	1a9a      	subs	r2, r3, r2
 8004458:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <RTC_Get+0x1d0>)
 800445a:	fba3 1302 	umull	r1, r3, r3, r2
 800445e:	0959      	lsrs	r1, r3, #5
 8004460:	460b      	mov	r3, r1
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a5b      	subs	r3, r3, r1
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	1ad1      	subs	r1, r2, r3
 800446a:	b2ca      	uxtb	r2, r1
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <RTC_Get+0x1d8>)
 800446e:	701a      	strb	r2, [r3, #0]
	rweek=RTC_Get_Week(ryear,rmon,rday);
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <RTC_Get+0x1b4>)
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	4a0d      	ldr	r2, [pc, #52]	; (80044ac <RTC_Get+0x1bc>)
 8004476:	7812      	ldrb	r2, [r2, #0]
 8004478:	b291      	uxth	r1, r2
 800447a:	4a0d      	ldr	r2, [pc, #52]	; (80044b0 <RTC_Get+0x1c0>)
 800447c:	7812      	ldrb	r2, [r2, #0]
 800447e:	b292      	uxth	r2, r2
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f825 	bl	80044d0 <RTC_Get_Week>
 8004486:	4603      	mov	r3, r0
 8004488:	461a      	mov	r2, r3
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <RTC_Get+0x1dc>)
 800448c:	701a      	strb	r2, [r3, #0]
	return 0;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40002800 	.word	0x40002800
 800449c:	c22e4507 	.word	0xc22e4507
 80044a0:	20000610 	.word	0x20000610
 80044a4:	20000608 	.word	0x20000608
 80044a8:	0802c734 	.word	0x0802c734
 80044ac:	2000060a 	.word	0x2000060a
 80044b0:	2000060b 	.word	0x2000060b
 80044b4:	00015180 	.word	0x00015180
 80044b8:	91a2b3c5 	.word	0x91a2b3c5
 80044bc:	2000060c 	.word	0x2000060c
 80044c0:	88888889 	.word	0x88888889
 80044c4:	2000060d 	.word	0x2000060d
 80044c8:	2000060e 	.word	0x2000060e
 80044cc:	2000060f 	.word	0x2000060f

080044d0 <RTC_Get_Week>:

uint8_t RTC_Get_Week(uint16_t year, uint16_t month, uint16_t day){
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	80fb      	strh	r3, [r7, #6]
 80044da:	460b      	mov	r3, r1
 80044dc:	80bb      	strh	r3, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	807b      	strh	r3, [r7, #2]
	uint16_t temp2;
	uint8_t yearH,yearL;
	yearH=year/100;
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <RTC_Get_Week+0xc0>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	733b      	strb	r3, [r7, #12]
	yearL=year%100;
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	4a27      	ldr	r2, [pc, #156]	; (8004590 <RTC_Get_Week+0xc0>)
 80044f4:	fba2 1203 	umull	r1, r2, r2, r3
 80044f8:	0952      	lsrs	r2, r2, #5
 80044fa:	2164      	movs	r1, #100	; 0x64
 80044fc:	fb01 f202 	mul.w	r2, r1, r2
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	b29b      	uxth	r3, r3
 8004504:	737b      	strb	r3, [r7, #13]
	if (yearH>19)yearL+=100;
 8004506:	7b3b      	ldrb	r3, [r7, #12]
 8004508:	2b13      	cmp	r3, #19
 800450a:	d902      	bls.n	8004512 <RTC_Get_Week+0x42>
 800450c:	7b7b      	ldrb	r3, [r7, #13]
 800450e:	3364      	adds	r3, #100	; 0x64
 8004510:	737b      	strb	r3, [r7, #13]
	temp2=yearL+yearL/4;
 8004512:	7b7b      	ldrb	r3, [r7, #13]
 8004514:	b29a      	uxth	r2, r3
 8004516:	7b7b      	ldrb	r3, [r7, #13]
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	b2db      	uxtb	r3, r3
 800451c:	b29b      	uxth	r3, r3
 800451e:	4413      	add	r3, r2
 8004520:	81fb      	strh	r3, [r7, #14]
	temp2=temp2%7;
 8004522:	89fa      	ldrh	r2, [r7, #14]
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <RTC_Get_Week+0xc4>)
 8004526:	fba3 1302 	umull	r1, r3, r3, r2
 800452a:	1ad1      	subs	r1, r2, r3
 800452c:	0849      	lsrs	r1, r1, #1
 800452e:	440b      	add	r3, r1
 8004530:	0899      	lsrs	r1, r3, #2
 8004532:	460b      	mov	r3, r1
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	1a5b      	subs	r3, r3, r1
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	81fb      	strh	r3, [r7, #14]
	temp2=temp2+day+table_week[month-1];
 800453c:	89fa      	ldrh	r2, [r7, #14]
 800453e:	887b      	ldrh	r3, [r7, #2]
 8004540:	4413      	add	r3, r2
 8004542:	b29a      	uxth	r2, r3
 8004544:	88bb      	ldrh	r3, [r7, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	4913      	ldr	r1, [pc, #76]	; (8004598 <RTC_Get_Week+0xc8>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	b29b      	uxth	r3, r3
 800454e:	4413      	add	r3, r2
 8004550:	81fb      	strh	r3, [r7, #14]
	if (yearL%4==0&&month<3)temp2--;
 8004552:	7b7b      	ldrb	r3, [r7, #13]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d105      	bne.n	800456a <RTC_Get_Week+0x9a>
 800455e:	88bb      	ldrh	r3, [r7, #4]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d802      	bhi.n	800456a <RTC_Get_Week+0x9a>
 8004564:	89fb      	ldrh	r3, [r7, #14]
 8004566:	3b01      	subs	r3, #1
 8004568:	81fb      	strh	r3, [r7, #14]
	return(temp2%7);
 800456a:	89fa      	ldrh	r2, [r7, #14]
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <RTC_Get_Week+0xc4>)
 800456e:	fba3 1302 	umull	r1, r3, r3, r2
 8004572:	1ad1      	subs	r1, r2, r3
 8004574:	0849      	lsrs	r1, r1, #1
 8004576:	440b      	add	r3, r1
 8004578:	0899      	lsrs	r1, r3, #2
 800457a:	460b      	mov	r3, r1
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	1a5b      	subs	r3, r3, r1
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	b29b      	uxth	r3, r3
 8004584:	b2db      	uxtb	r3, r3
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr
 8004590:	51eb851f 	.word	0x51eb851f
 8004594:	24924925 	.word	0x24924925
 8004598:	0802c728 	.word	0x0802c728

0800459c <Is_Leap_Year>:

uint8_t Is_Leap_Year(uint16_t year){
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	80fb      	strh	r3, [r7, #6]
	if(year%4==0){
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d11e      	bne.n	80045f0 <Is_Leap_Year+0x54>
		if(year%100==0){
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	4a11      	ldr	r2, [pc, #68]	; (80045fc <Is_Leap_Year+0x60>)
 80045b6:	fba2 1203 	umull	r1, r2, r2, r3
 80045ba:	0952      	lsrs	r2, r2, #5
 80045bc:	2164      	movs	r1, #100	; 0x64
 80045be:	fb01 f202 	mul.w	r2, r1, r2
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d110      	bne.n	80045ec <Is_Leap_Year+0x50>
			if(year%400==0)return 1;
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	4a0b      	ldr	r2, [pc, #44]	; (80045fc <Is_Leap_Year+0x60>)
 80045ce:	fba2 1203 	umull	r1, r2, r2, r3
 80045d2:	09d2      	lsrs	r2, r2, #7
 80045d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80045d8:	fb01 f202 	mul.w	r2, r1, r2
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <Is_Leap_Year+0x4c>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e004      	b.n	80045f2 <Is_Leap_Year+0x56>
			else return 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e002      	b.n	80045f2 <Is_Leap_Year+0x56>
		}else return 1;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <Is_Leap_Year+0x56>
	}else return 0;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	51eb851f 	.word	0x51eb851f

08004600 <RTC_raw>:

uint32_t RTC_raw(){
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
	uint32_t time;
	time=RTC->CNTH;
 8004606:	4b08      	ldr	r3, [pc, #32]	; (8004628 <RTC_raw+0x28>)
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	607b      	str	r3, [r7, #4]
	time<<=16;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	041b      	lsls	r3, r3, #16
 8004610:	607b      	str	r3, [r7, #4]
	time+=RTC->CNTL;
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <RTC_raw+0x28>)
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	607b      	str	r3, [r7, #4]

	return time;
 800461c:	687b      	ldr	r3, [r7, #4]
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	40002800 	.word	0x40002800

0800462c <get_TimeStamp>:


void get_TimeStamp(TimeStamp* t){
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	/*
	 * Store Updated Values By a TimeStamp Pointer
	 */
	t->ryear = ryear;
 8004634:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <get_TimeStamp+0x44>)
 8004636:	881a      	ldrh	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	801a      	strh	r2, [r3, #0]
	t->rmon = rmon;
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <get_TimeStamp+0x48>)
 800463e:	781a      	ldrb	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	709a      	strb	r2, [r3, #2]
	t->rhour = rhour;
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <get_TimeStamp+0x4c>)
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	711a      	strb	r2, [r3, #4]
	t->rmin = rmin;
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <get_TimeStamp+0x50>)
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	715a      	strb	r2, [r3, #5]
	t->rsec = rsec;
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <get_TimeStamp+0x54>)
 8004656:	781a      	ldrb	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	719a      	strb	r2, [r3, #6]
	t->rweek = rweek;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <get_TimeStamp+0x58>)
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	71da      	strb	r2, [r3, #7]
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000608 	.word	0x20000608
 8004674:	2000060a 	.word	0x2000060a
 8004678:	2000060c 	.word	0x2000060c
 800467c:	2000060d 	.word	0x2000060d
 8004680:	2000060e 	.word	0x2000060e
 8004684:	2000060f 	.word	0x2000060f

08004688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <HAL_MspInit+0x5c>)
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <HAL_MspInit+0x5c>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6193      	str	r3, [r2, #24]
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_MspInit+0x5c>)
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <HAL_MspInit+0x5c>)
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	4a0e      	ldr	r2, [pc, #56]	; (80046e4 <HAL_MspInit+0x5c>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b0:	61d3      	str	r3, [r2, #28]
 80046b2:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <HAL_MspInit+0x5c>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ba:	607b      	str	r3, [r7, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <HAL_MspInit+0x60>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <HAL_MspInit+0x60>)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40010000 	.word	0x40010000

080046ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <HAL_RTC_MspInit+0x3c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d110      	bne.n	8004720 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80046fe:	f001 fbd7 	bl	8005eb0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_RTC_MspInit+0x40>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RTC_MspInit+0x40>)
 8004708:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800470c:	61d3      	str	r3, [r2, #28]
 800470e:	4b07      	ldr	r3, [pc, #28]	; (800472c <HAL_RTC_MspInit+0x40>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RTC_MspInit+0x44>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40002800 	.word	0x40002800
 800472c:	40021000 	.word	0x40021000
 8004730:	4242043c 	.word	0x4242043c

08004734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d10c      	bne.n	8004760 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <HAL_TIM_Base_MspInit+0x9c>)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <HAL_TIM_Base_MspInit+0x9c>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	61d3      	str	r3, [r2, #28]
 8004752:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <HAL_TIM_Base_MspInit+0x9c>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800475e:	e032      	b.n	80047c6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_TIM_Base_MspInit+0xa0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d114      	bne.n	8004794 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800476a:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_TIM_Base_MspInit+0x9c>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_TIM_Base_MspInit+0x9c>)
 8004770:	f043 0302 	orr.w	r3, r3, #2
 8004774:	61d3      	str	r3, [r2, #28]
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <HAL_TIM_Base_MspInit+0x9c>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	2100      	movs	r1, #0
 8004786:	201d      	movs	r0, #29
 8004788:	f001 f971 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800478c:	201d      	movs	r0, #29
 800478e:	f001 f98a 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 8004792:	e018      	b.n	80047c6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0f      	ldr	r2, [pc, #60]	; (80047d8 <HAL_TIM_Base_MspInit+0xa4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d113      	bne.n	80047c6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <HAL_TIM_Base_MspInit+0x9c>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <HAL_TIM_Base_MspInit+0x9c>)
 80047a4:	f043 0308 	orr.w	r3, r3, #8
 80047a8:	61d3      	str	r3, [r2, #28]
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_TIM_Base_MspInit+0x9c>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	2100      	movs	r1, #0
 80047ba:	2032      	movs	r0, #50	; 0x32
 80047bc:	f001 f957 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80047c0:	2032      	movs	r0, #50	; 0x32
 80047c2:	f001 f970 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
}
 80047c6:	bf00      	nop
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000c00 	.word	0x40000c00

080047dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	f107 0310 	add.w	r3, r7, #16
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <HAL_UART_MspInit+0x8c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d131      	bne.n	8004860 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <HAL_UART_MspInit+0x90>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	4a1a      	ldr	r2, [pc, #104]	; (800486c <HAL_UART_MspInit+0x90>)
 8004802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004806:	6193      	str	r3, [r2, #24]
 8004808:	4b18      	ldr	r3, [pc, #96]	; (800486c <HAL_UART_MspInit+0x90>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004814:	4b15      	ldr	r3, [pc, #84]	; (800486c <HAL_UART_MspInit+0x90>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	4a14      	ldr	r2, [pc, #80]	; (800486c <HAL_UART_MspInit+0x90>)
 800481a:	f043 0304 	orr.w	r3, r3, #4
 800481e:	6193      	str	r3, [r2, #24]
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_UART_MspInit+0x90>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800482c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004832:	2302      	movs	r3, #2
 8004834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004836:	2303      	movs	r3, #3
 8004838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483a:	f107 0310 	add.w	r3, r7, #16
 800483e:	4619      	mov	r1, r3
 8004840:	480b      	ldr	r0, [pc, #44]	; (8004870 <HAL_UART_MspInit+0x94>)
 8004842:	f001 f94b 	bl	8005adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800484a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004854:	f107 0310 	add.w	r3, r7, #16
 8004858:	4619      	mov	r1, r3
 800485a:	4805      	ldr	r0, [pc, #20]	; (8004870 <HAL_UART_MspInit+0x94>)
 800485c:	f001 f93e 	bl	8005adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004860:	bf00      	nop
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40013800 	.word	0x40013800
 800486c:	40021000 	.word	0x40021000
 8004870:	40010800 	.word	0x40010800

08004874 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	609a      	str	r2, [r3, #8]
 8004886:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8004888:	4b18      	ldr	r3, [pc, #96]	; (80048ec <HAL_FSMC_MspInit+0x78>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d129      	bne.n	80048e4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8004890:	4b16      	ldr	r3, [pc, #88]	; (80048ec <HAL_FSMC_MspInit+0x78>)
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004896:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <HAL_FSMC_MspInit+0x7c>)
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <HAL_FSMC_MspInit+0x7c>)
 800489c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a0:	6153      	str	r3, [r2, #20]
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <HAL_FSMC_MspInit+0x7c>)
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80048ae:	f64f 7380 	movw	r3, #65408	; 0xff80
 80048b2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b4:	2302      	movs	r3, #2
 80048b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048b8:	2303      	movs	r3, #3
 80048ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048bc:	f107 0308 	add.w	r3, r7, #8
 80048c0:	4619      	mov	r1, r3
 80048c2:	480c      	ldr	r0, [pc, #48]	; (80048f4 <HAL_FSMC_MspInit+0x80>)
 80048c4:	f001 f90a 	bl	8005adc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80048c8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80048cc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	2302      	movs	r3, #2
 80048d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048d2:	2303      	movs	r3, #3
 80048d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048d6:	f107 0308 	add.w	r3, r7, #8
 80048da:	4619      	mov	r1, r3
 80048dc:	4806      	ldr	r0, [pc, #24]	; (80048f8 <HAL_FSMC_MspInit+0x84>)
 80048de:	f001 f8fd 	bl	8005adc <HAL_GPIO_Init>
 80048e2:	e000      	b.n	80048e6 <HAL_FSMC_MspInit+0x72>
    return;
 80048e4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000614 	.word	0x20000614
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40011800 	.word	0x40011800
 80048f8:	40011400 	.word	0x40011400

080048fc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004904:	f7ff ffb6 	bl	8004874 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004908:	bf00      	nop
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr

0800491c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004920:	e7fe      	b.n	8004920 <HardFault_Handler+0x4>

08004922 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004926:	e7fe      	b.n	8004926 <MemManage_Handler+0x4>

08004928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800492c:	e7fe      	b.n	800492c <BusFault_Handler+0x4>

0800492e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004932:	e7fe      	b.n	8004932 <UsageFault_Handler+0x4>

08004934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004950:	bf00      	nop
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800495c:	f000 ff74 	bl	8005848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004960:	bf00      	nop
 8004962:	bd80      	pop	{r7, pc}

08004964 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <EXTI4_IRQHandler+0x2c>)
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <EXTI4_IRQHandler+0x30>)
 8004976:	2201      	movs	r2, #1
 8004978:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <EXTI4_IRQHandler+0x2c>)
 800497c:	2210      	movs	r2, #16
 800497e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8004980:	2010      	movs	r0, #16
 8004982:	f001 fa8b 	bl	8005e9c <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004986:	2010      	movs	r0, #16
 8004988:	f001 fa70 	bl	8005e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800498c:	bf00      	nop
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40010400 	.word	0x40010400
 8004994:	2000061a 	.word	0x2000061a

08004998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <TIM3_IRQHandler+0x3c>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <TIM3_IRQHandler+0x3c>)
 80049a6:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <TIM3_IRQHandler+0x3c>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10c      	bne.n	80049ca <TIM3_IRQHandler+0x32>
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <TIM3_IRQHandler+0x40>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d108      	bne.n	80049ca <TIM3_IRQHandler+0x32>
		//LCD_DrawString(5,5,"Hi");



		/* End of Line */
		HAL_TIM_Base_Stop(&htim3);
 80049b8:	4808      	ldr	r0, [pc, #32]	; (80049dc <TIM3_IRQHandler+0x44>)
 80049ba:	f002 fa14 	bl	8006de6 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 80049be:	4807      	ldr	r0, [pc, #28]	; (80049dc <TIM3_IRQHandler+0x44>)
 80049c0:	f002 fa55 	bl	8006e6e <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <TIM3_IRQHandler+0x40>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049ca:	4804      	ldr	r0, [pc, #16]	; (80049dc <TIM3_IRQHandler+0x44>)
 80049cc:	f002 fa79 	bl	8006ec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049d0:	bf00      	nop
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000618 	.word	0x20000618
 80049d8:	20000619 	.word	0x20000619
 80049dc:	200004e8 	.word	0x200004e8

080049e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	extern uint8_t DHT11_SCHEDULE_FLAG;
	DHT11_SCHEDULE_FLAG = 1;
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <TIM5_IRQHandler+0x14>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80049ea:	4803      	ldr	r0, [pc, #12]	; (80049f8 <TIM5_IRQHandler+0x18>)
 80049ec:	f002 fa69 	bl	8006ec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80049f0:	bf00      	nop
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20000004 	.word	0x20000004
 80049f8:	20000528 	.word	0x20000528

080049fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004a00:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <SystemInit+0x5c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <SystemInit+0x5c>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <SystemInit+0x5c>)
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	4911      	ldr	r1, [pc, #68]	; (8004a58 <SystemInit+0x5c>)
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <SystemInit+0x60>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <SystemInit+0x5c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0e      	ldr	r2, [pc, #56]	; (8004a58 <SystemInit+0x5c>)
 8004a1e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a26:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <SystemInit+0x5c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <SystemInit+0x5c>)
 8004a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a32:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <SystemInit+0x5c>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <SystemInit+0x5c>)
 8004a3a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004a3e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <SystemInit+0x5c>)
 8004a42:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004a46:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <SystemInit+0x64>)
 8004a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a4e:	609a      	str	r2, [r3, #8]
#endif 
}
 8004a50:	bf00      	nop
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	f8ff0000 	.word	0xf8ff0000
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <TIMER_INIT>:
#include "timer.h"

uint8_t timer_left = 0;//30 sec for each count
uint8_t start_counting = 0;

void TIMER_INIT(){
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <TIMER_INIT+0x20>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0201 	mvn.w	r2, #1
 8004a70:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start(&htim5);
 8004a72:	4804      	ldr	r0, [pc, #16]	; (8004a84 <TIMER_INIT+0x20>)
 8004a74:	f002 f99d 	bl	8006db2 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8004a78:	4802      	ldr	r0, [pc, #8]	; (8004a84 <TIMER_INIT+0x20>)
 8004a7a:	f002 f9de 	bl	8006e3a <HAL_TIM_Base_Start_IT>
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000528 	.word	0x20000528

08004a88 <delay_us>:

void delay_us(uint16_t nus)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004a92:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <delay_us+0x6c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim2);
 8004a9a:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <delay_us+0x6c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <delay_us+0x6c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(&htim2) < nus)
 8004aaa:	bf00      	nop
 8004aac:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <delay_us+0x6c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d3f9      	bcc.n	8004aac <delay_us+0x24>
	{
	}
	__HAL_TIM_DISABLE(&htim2);
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <delay_us+0x6c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a1a      	ldr	r2, [r3, #32]
 8004abe:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10f      	bne.n	8004ae8 <delay_us+0x60>
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <delay_us+0x6c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a1a      	ldr	r2, [r3, #32]
 8004ace:	f240 4344 	movw	r3, #1092	; 0x444
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d107      	bne.n	8004ae8 <delay_us+0x60>
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <delay_us+0x6c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <delay_us+0x6c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	200004a8 	.word	0x200004a8

08004af8 <timer_min>:

void timer_min(uint8_t min)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <timer_min+0x38>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f06f 0201 	mvn.w	r2, #1
 8004b0a:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <timer_min+0x3c>)
 8004b14:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <timer_min+0x40>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8004b1c:	4804      	ldr	r0, [pc, #16]	; (8004b30 <timer_min+0x38>)
 8004b1e:	f002 f948 	bl	8006db2 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8004b22:	4803      	ldr	r0, [pc, #12]	; (8004b30 <timer_min+0x38>)
 8004b24:	f002 f989 	bl	8006e3a <HAL_TIM_Base_Start_IT>
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200004e8 	.word	0x200004e8
 8004b34:	20000618 	.word	0x20000618
 8004b38:	20000619 	.word	0x20000619

08004b3c <XPT2046_DelayUS>:
		-4.979353, -0.001750, 0.065168, -13.318824 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e00a      	b.n	8004b60 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8004b4e:	bf00      	nop
 8004b50:	7afb      	ldrb	r3, [r7, #11]
 8004b52:	1e5a      	subs	r2, r3, #1
 8004b54:	72fa      	strb	r2, [r7, #11]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1fa      	bne.n	8004b50 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3f0      	bcc.n	8004b4a <XPT2046_DelayUS+0xe>
			;

	}

}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2104      	movs	r1, #4
 8004b82:	481d      	ldr	r0, [pc, #116]	; (8004bf8 <XPT2046_WriteCMD+0x84>)
 8004b84:	f001 f959 	bl	8005e3a <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	481a      	ldr	r0, [pc, #104]	; (8004bf8 <XPT2046_WriteCMD+0x84>)
 8004b8e:	f001 f954 	bl	8005e3a <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
 8004b96:	e027      	b.n	8004be8 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8004b98:	79fa      	ldrb	r2, [r7, #7]
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	f1c3 0307 	rsb	r3, r3, #7
 8004ba0:	fa42 f303 	asr.w	r3, r2, r3
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <XPT2046_WriteCMD+0x44>
 8004bac:	2201      	movs	r2, #1
 8004bae:	2104      	movs	r1, #4
 8004bb0:	4811      	ldr	r0, [pc, #68]	; (8004bf8 <XPT2046_WriteCMD+0x84>)
 8004bb2:	f001 f942 	bl	8005e3a <HAL_GPIO_WritePin>
 8004bb6:	e004      	b.n	8004bc2 <XPT2046_WriteCMD+0x4e>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2104      	movs	r1, #4
 8004bbc:	480e      	ldr	r0, [pc, #56]	; (8004bf8 <XPT2046_WriteCMD+0x84>)
 8004bbe:	f001 f93c 	bl	8005e3a <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8004bc2:	2005      	movs	r0, #5
 8004bc4:	f7ff ffba 	bl	8004b3c <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8004bc8:	2201      	movs	r2, #1
 8004bca:	2101      	movs	r1, #1
 8004bcc:	480a      	ldr	r0, [pc, #40]	; (8004bf8 <XPT2046_WriteCMD+0x84>)
 8004bce:	f001 f934 	bl	8005e3a <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8004bd2:	2005      	movs	r0, #5
 8004bd4:	f7ff ffb2 	bl	8004b3c <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4806      	ldr	r0, [pc, #24]	; (8004bf8 <XPT2046_WriteCMD+0x84>)
 8004bde:	f001 f92c 	bl	8005e3a <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	3301      	adds	r3, #1
 8004be6:	73fb      	strb	r3, [r7, #15]
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b07      	cmp	r3, #7
 8004bec:	d9d4      	bls.n	8004b98 <XPT2046_WriteCMD+0x24>
	}

}
 8004bee:	bf00      	nop
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40011800 	.word	0x40011800

08004bfc <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8004c02:	2300      	movs	r3, #0
 8004c04:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 8004c06:	2200      	movs	r2, #0
 8004c08:	2104      	movs	r1, #4
 8004c0a:	4819      	ldr	r0, [pc, #100]	; (8004c70 <XPT2046_ReadCMD+0x74>)
 8004c0c:	f001 f915 	bl	8005e3a <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8004c10:	2201      	movs	r2, #1
 8004c12:	2101      	movs	r1, #1
 8004c14:	4816      	ldr	r0, [pc, #88]	; (8004c70 <XPT2046_ReadCMD+0x74>)
 8004c16:	f001 f910 	bl	8005e3a <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	71fb      	strb	r3, [r7, #7]
 8004c1e:	e01e      	b.n	8004c5e <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8004c20:	2200      	movs	r2, #0
 8004c22:	2101      	movs	r1, #1
 8004c24:	4812      	ldr	r0, [pc, #72]	; (8004c70 <XPT2046_ReadCMD+0x74>)
 8004c26:	f001 f908 	bl	8005e3a <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 8004c2a:	2108      	movs	r1, #8
 8004c2c:	4810      	ldr	r0, [pc, #64]	; (8004c70 <XPT2046_ReadCMD+0x74>)
 8004c2e:	f001 f8ed 	bl	8005e0c <HAL_GPIO_ReadPin>
 8004c32:	4603      	mov	r3, r0
 8004c34:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 8004c36:	887a      	ldrh	r2, [r7, #2]
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	f1c3 030b 	rsb	r3, r3, #11
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	b21a      	sxth	r2, r3
 8004c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	b21b      	sxth	r3, r3
 8004c4c:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2101      	movs	r1, #1
 8004c52:	4807      	ldr	r0, [pc, #28]	; (8004c70 <XPT2046_ReadCMD+0x74>)
 8004c54:	f001 f8f1 	bl	8005e3a <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	71fb      	strb	r3, [r7, #7]
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	2b0b      	cmp	r3, #11
 8004c62:	d9dd      	bls.n	8004c20 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8004c64:	88bb      	ldrh	r3, [r7, #4]

}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40011800 	.word	0x40011800

08004c74 <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ff77 	bl	8004b74 <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 8004c86:	f7ff ffb9 	bl	8004bfc <XPT2046_ReadCMD>
 8004c8a:	4603      	mov	r3, r0

}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 8004c9e:	2090      	movs	r0, #144	; 0x90
 8004ca0:	f7ff ffe8 	bl	8004c74 <XPT2046_ReadAdc>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8004ca8:	2001      	movs	r0, #1
 8004caa:	f7ff ff47 	bl	8004b3c <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 8004cae:	20d0      	movs	r0, #208	; 0xd0
 8004cb0:	f7ff ffe0 	bl	8004c74 <XPT2046_ReadAdc>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	89fa      	ldrh	r2, [r7, #14]
 8004cbc:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	89ba      	ldrh	r2, [r7, #12]
 8004cc2:	801a      	strh	r2, [r3, #0]

}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b092      	sub	sp, #72	; 0x48
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	2228      	movs	r2, #40	; 0x28
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f002 fefc 	bl	8007ae0 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8004ce8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004cec:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ffce 	bl	8004c94 <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8004cf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004cfc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	3348      	adds	r3, #72	; 0x48
 8004d04:	443b      	add	r3, r7
 8004d06:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 8004d0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d0e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004d12:	330a      	adds	r3, #10
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	3348      	adds	r3, #72	; 0x48
 8004d18:	443b      	add	r3, r7
 8004d1a:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 8004d1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d22:	3301      	adds	r3, #1
 8004d24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 8004d28:	2110      	movs	r1, #16
 8004d2a:	4871      	ldr	r0, [pc, #452]	; (8004ef0 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8004d2c:	f001 f86e 	bl	8005e0c <HAL_GPIO_ReadPin>
 8004d30:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <XPT2046_ReadAdc_Smooth_XY+0x72>
 8004d36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d9d4      	bls.n	8004ce8 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8004d3e:	2110      	movs	r1, #16
 8004d40:	486b      	ldr	r0, [pc, #428]	; (8004ef0 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8004d42:	f001 f863 	bl	8005e0c <HAL_GPIO_ReadPin>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8004d4c:	4b69      	ldr	r3, [pc, #420]	; (8004ef4 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8004d52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d56:	2b0a      	cmp	r3, #10
 8004d58:	f040 80c4 	bne.w	8004ee4 <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8004d5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004d60:	643b      	str	r3, [r7, #64]	; 0x40
 8004d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8004d66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004d76:	e02b      	b.n	8004dd0 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8004d78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	3348      	adds	r3, #72	; 0x48
 8004d80:	443b      	add	r3, r7
 8004d82:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004d86:	461a      	mov	r2, r3
 8004d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	dd08      	ble.n	8004da0 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8004d8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	3348      	adds	r3, #72	; 0x48
 8004d96:	443b      	add	r3, r7
 8004d98:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d9e:	e012      	b.n	8004dc6 <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8004da0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	3348      	adds	r3, #72	; 0x48
 8004da8:	443b      	add	r3, r7
 8004daa:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004dae:	461a      	mov	r2, r3
 8004db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db2:	4293      	cmp	r3, r2
 8004db4:	da07      	bge.n	8004dc6 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8004db6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	3348      	adds	r3, #72	; 0x48
 8004dbe:	443b      	add	r3, r7
 8004dc0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8004dc6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004dca:	3301      	adds	r3, #1
 8004dcc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004dd0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004dd4:	2b09      	cmp	r3, #9
 8004dd6:	d9cf      	bls.n	8004d78 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004dde:	e02f      	b.n	8004e40 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8004de0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004de4:	330a      	adds	r3, #10
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	3348      	adds	r3, #72	; 0x48
 8004dea:	443b      	add	r3, r7
 8004dec:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df4:	4293      	cmp	r3, r2
 8004df6:	dd09      	ble.n	8004e0c <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8004df8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004dfc:	330a      	adds	r3, #10
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	3348      	adds	r3, #72	; 0x48
 8004e02:	443b      	add	r3, r7
 8004e04:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e0a:	e014      	b.n	8004e36 <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 8004e0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e10:	330a      	adds	r3, #10
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	3348      	adds	r3, #72	; 0x48
 8004e16:	443b      	add	r3, r7
 8004e18:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	4293      	cmp	r3, r2
 8004e22:	da08      	bge.n	8004e36 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8004e24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e28:	330a      	adds	r3, #10
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	3348      	adds	r3, #72	; 0x48
 8004e2e:	443b      	add	r3, r7
 8004e30:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 8004e36:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004e40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d9cb      	bls.n	8004de0 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8004e48:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004e52:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8004e54:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004e64:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8004e66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004e70:	4413      	add	r3, r2
 8004e72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004e76:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8004e78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004e82:	441a      	add	r2, r3
 8004e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8a:	1ad3      	subs	r3, r2, r3
				>> 3;
 8004e8c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8004e94:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004e9e:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8004ea0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004eaa:	4413      	add	r3, r2
 8004eac:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004eb0:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8004eb2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8004ec2:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8004ec4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8004ec8:	4413      	add	r3, r2
 8004eca:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8004ece:	441a      	add	r2, r3
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	1ad3      	subs	r3, r2, r3
				>> 3;
 8004ed8:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	805a      	strh	r2, [r3, #2]

		return 1;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8004ee4:	2300      	movs	r3, #0

}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3748      	adds	r7, #72	; 0x48
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40011800 	.word	0x40011800
 8004ef4:	2000061a 	.word	0x2000061a

08004ef8 <XPT2046_Calculate_CalibrationFactor>:
#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(
		strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_Coordinate *pScreenSample,
		strType_XPT2046_Calibration *pCalibrationFactor) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8004f04:	2301      	movs	r3, #1
 8004f06:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	3308      	adds	r3, #8
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	1ad3      	subs	r3, r2, r3
			* (pScreenSample[1].y - pScreenSample[2].y))
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	3204      	adds	r2, #4
 8004f1a:	8852      	ldrh	r2, [r2, #2]
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	3208      	adds	r2, #8
 8004f22:	8852      	ldrh	r2, [r2, #2]
 8004f24:	1a8a      	subs	r2, r1, r2
 8004f26:	fb03 f202 	mul.w	r2, r3, r2
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	4619      	mov	r1, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	3308      	adds	r3, #8
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	1acb      	subs	r3, r1, r3
					* (pScreenSample[0].y - pScreenSample[2].y));
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	8849      	ldrh	r1, [r1, #2]
 8004f3e:	4608      	mov	r0, r1
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	3108      	adds	r1, #8
 8004f44:	8849      	ldrh	r1, [r1, #2]
 8004f46:	1a41      	subs	r1, r0, r1
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8004f4c:	1ad3      	subs	r3, r2, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fb fac4 	bl	80004dc <__aeabi_i2d>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	f7fb fd88 	bl	8000a80 <__aeabi_dcmpeq>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
 8004f7a:	e145      	b.n	8005208 <XPT2046_Calculate_CalibrationFactor+0x310>

	else {

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].x)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3308      	adds	r3, #8
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	3204      	adds	r2, #4
 8004f8e:	8852      	ldrh	r2, [r2, #2]
 8004f90:	4611      	mov	r1, r2
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	3208      	adds	r2, #8
 8004f96:	8852      	ldrh	r2, [r2, #2]
 8004f98:	1a8a      	subs	r2, r1, r2
 8004f9a:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	8849      	ldrh	r1, [r1, #2]
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	3108      	adds	r1, #8
 8004fb8:	8849      	ldrh	r1, [r1, #2]
 8004fba:	1a41      	subs	r1, r0, r1
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8004fc0:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fb fa8a 	bl	80004dc <__aeabi_i2d>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x))
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	3204      	adds	r2, #4
 8004fe4:	8812      	ldrh	r2, [r2, #0]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	3208      	adds	r2, #8
 8004fec:	8812      	ldrh	r2, [r2, #0]
 8004fee:	1a8a      	subs	r2, r1, r2
 8004ff0:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	3104      	adds	r1, #4
 8005006:	8809      	ldrh	r1, [r1, #0]
 8005008:	4608      	mov	r0, r1
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	3108      	adds	r1, #8
 800500e:	8809      	ldrh	r1, [r1, #0]
 8005010:	1a41      	subs	r1, r0, r1
 8005012:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 8005016:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8005018:	4618      	mov	r0, r3
 800501a:	f7fb fa5f 	bl	80004dc <__aeabi_i2d>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	3308      	adds	r3, #8
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3304      	adds	r3, #4
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].x)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3304      	adds	r3, #4
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	4619      	mov	r1, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3308      	adds	r3, #8
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	8852      	ldrh	r2, [r2, #2]
 8005052:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	4619      	mov	r1, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3308      	adds	r3, #8
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].x)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	3308      	adds	r3, #8
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	fb00 f303 	mul.w	r3, r0, r3
 8005076:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	3104      	adds	r1, #4
 800507c:	8849      	ldrh	r1, [r1, #2]
 800507e:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 8005082:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	3304      	adds	r3, #4
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	4619      	mov	r1, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].x)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3304      	adds	r3, #4
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	fb00 f303 	mul.w	r3, r0, r3
 80050a4:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	3108      	adds	r1, #8
 80050aa:	8849      	ldrh	r1, [r1, #2]
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 80050b0:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fb fa12 	bl	80004dc <__aeabi_i2d>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	885b      	ldrh	r3, [r3, #2]
 80050c6:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].y)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3308      	adds	r3, #8
 80050cc:	885b      	ldrh	r3, [r3, #2]
 80050ce:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	3204      	adds	r2, #4
 80050d4:	8852      	ldrh	r2, [r2, #2]
 80050d6:	4611      	mov	r1, r2
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	3208      	adds	r2, #8
 80050dc:	8852      	ldrh	r2, [r2, #2]
 80050de:	1a8a      	subs	r2, r1, r2
 80050e0:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3304      	adds	r3, #4
 80050e8:	885b      	ldrh	r3, [r3, #2]
 80050ea:	4619      	mov	r1, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3308      	adds	r3, #8
 80050f0:	885b      	ldrh	r3, [r3, #2]
 80050f2:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	8849      	ldrh	r1, [r1, #2]
 80050f8:	4608      	mov	r0, r1
 80050fa:	68b9      	ldr	r1, [r7, #8]
 80050fc:	3108      	adds	r1, #8
 80050fe:	8849      	ldrh	r1, [r1, #2]
 8005100:	1a41      	subs	r1, r0, r1
 8005102:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 8005106:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8005108:	4618      	mov	r0, r3
 800510a:	f7fb f9e7 	bl	80004dc <__aeabi_i2d>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	3308      	adds	r3, #8
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y))
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	3204      	adds	r2, #4
 800512a:	8852      	ldrh	r2, [r2, #2]
 800512c:	4611      	mov	r1, r2
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	3208      	adds	r2, #8
 8005132:	8852      	ldrh	r2, [r2, #2]
 8005134:	1a8a      	subs	r2, r1, r2
 8005136:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	885b      	ldrh	r3, [r3, #2]
 800513e:	4619      	mov	r1, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3308      	adds	r3, #8
 8005144:	885b      	ldrh	r3, [r3, #2]
 8005146:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	3104      	adds	r1, #4
 800514c:	8809      	ldrh	r1, [r1, #0]
 800514e:	4608      	mov	r0, r1
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	3108      	adds	r1, #8
 8005154:	8809      	ldrh	r1, [r1, #0]
 8005156:	1a41      	subs	r1, r0, r1
 8005158:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 800515c:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb f9bc 	bl	80004dc <__aeabi_i2d>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	3308      	adds	r3, #8
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3304      	adds	r3, #4
 800517a:	885b      	ldrh	r3, [r3, #2]
 800517c:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].y)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	3304      	adds	r3, #4
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	4619      	mov	r1, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3308      	adds	r3, #8
 800518c:	885b      	ldrh	r3, [r3, #2]
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	8852      	ldrh	r2, [r2, #2]
 8005198:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	4619      	mov	r1, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3308      	adds	r3, #8
 80051a6:	885b      	ldrh	r3, [r3, #2]
 80051a8:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].y)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	3308      	adds	r3, #8
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	885b      	ldrh	r3, [r3, #2]
 80051b8:	fb00 f303 	mul.w	r3, r0, r3
 80051bc:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	3104      	adds	r1, #4
 80051c2:	8849      	ldrh	r1, [r1, #2]
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 80051c8:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	3304      	adds	r3, #4
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	4619      	mov	r1, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	885b      	ldrh	r3, [r3, #2]
 80051d6:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].y)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3304      	adds	r3, #4
 80051e4:	885b      	ldrh	r3, [r3, #2]
 80051e6:	fb00 f303 	mul.w	r3, r0, r3
 80051ea:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	3108      	adds	r1, #8
 80051f0:	8849      	ldrh	r1, [r1, #2]
 80051f2:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 80051f6:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fb f96f 	bl	80004dc <__aeabi_i2d>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}

	return ucRet;
 8005208:	7dfb      	ldrb	r3, [r7, #23]

}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void) {
 8005214:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005218:	b0a0      	sub	sp, #128	; 0x80
 800521a:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8005222:	2300      	movs	r3, #0
 8005224:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8005228:	2300      	movs	r3, #0
 800522a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800522e:	2300      	movs	r3, #0
 8005230:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char *pStr = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	66bb      	str	r3, [r7, #104]	; 0x68
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 8005238:	23f0      	movs	r3, #240	; 0xf0
 800523a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 800523e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005242:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	    usScreenWidth = LCD_Default_Max_Heigth;
	    usScreenHeigth = LCD_Default_Max_Width;
	
	  #endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 8005246:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800524a:	089b      	lsrs	r3, r3, #2
 800524c:	b29b      	uxth	r3, r3
 800524e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 8005252:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005256:	089b      	lsrs	r3, r3, #2
 8005258:	b29b      	uxth	r3, r3
 800525a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 800525e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005262:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8005266:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800526a:	4613      	mov	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	109b      	asrs	r3, r3, #2
 8005272:	b29b      	uxth	r3, r3
 8005274:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8005278:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800527c:	4613      	mov	r3, r2
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4413      	add	r3, r2
 8005282:	109b      	asrs	r3, r3, #2
 8005284:	b29b      	uxth	r3, r3
 8005286:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 800528a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800528e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8005292:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005296:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 800529a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800529e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	LCD_GramScan(1);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f7fc fe02 	bl	8001eac <LCD_GramScan>

	for (i = 0; i < 4; i++) {
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80052ae:	e047      	b.n	8005340 <XPT2046_Touch_Calibrate+0x12c>
		LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 80052b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052b4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80052b8:	2100      	movs	r1, #0
 80052ba:	2000      	movs	r0, #0
 80052bc:	f7fc fb7e 	bl	80019bc <LCD_Clear>

		pStr = "Touch Calibrate ......";
 80052c0:	4bb6      	ldr	r3, [pc, #728]	; (800559c <XPT2046_Touch_Calibrate+0x388>)
 80052c2:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color(
				(usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1,
 80052c4:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80052c8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80052ca:	f7fa ffad 	bl	8000228 <strlen>
 80052ce:	4603      	mov	r3, r0
 80052d0:	3b07      	subs	r3, #7
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	1ae3      	subs	r3, r4, r3
 80052d6:	085b      	lsrs	r3, r3, #1
		LCD_DrawString_Color(
 80052d8:	b298      	uxth	r0, r3
 80052da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	b299      	uxth	r1, r3
 80052e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052ee:	f7fc fda7 	bl	8001e40 <LCD_DrawString_Color>
		/*
		sprintf(cStr, "%d", i + 1);
		LCD_DrawString_Color(usScreenWidth >> 1,
				(usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
		*/
		XPT2046_DelayUS(100000);
 80052f2:	48ab      	ldr	r0, [pc, #684]	; (80055a0 <XPT2046_Touch_Calibrate+0x38c>)
 80052f4:	f7ff fc22 	bl	8004b3c <XPT2046_DelayUS>

		LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 80052f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	3378      	adds	r3, #120	; 0x78
 8005300:	443b      	add	r3, r7
 8005302:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005306:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	3378      	adds	r3, #120	; 0x78
 800530e:	443b      	add	r3, r7
 8005310:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f7fc fd70 	bl	8001dfc <LCD_DrawCross>

		while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
 800531c:	bf00      	nop
 800531e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005322:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fcce 	bl	8004ccc <XPT2046_ReadAdc_Smooth_XY>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f3      	beq.n	800531e <XPT2046_Touch_Calibrate+0x10a>
	for (i = 0; i < 4; i++) {
 8005336:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800533a:	3301      	adds	r3, #1
 800533c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005340:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005344:	2b03      	cmp	r3, #3
 8005346:	d9b3      	bls.n	80052b0 <XPT2046_Touch_Calibrate+0x9c>
			;

	}

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample,
 8005348:	463a      	mov	r2, r7
 800534a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800534e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fdd0 	bl	8004ef8 <XPT2046_Calculate_CalibrationFactor>
			&CalibrationFactor);

	if (CalibrationFactor.Divider == 0)
 8005358:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	f7fb fb8c 	bl	8000a80 <__aeabi_dcmpeq>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 8113 	bne.w	8005596 <XPT2046_Touch_Calibrate+0x382>
		goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8005370:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005374:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb f8af 	bl	80004dc <__aeabi_i2d>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	f7fb f913 	bl	80005b0 <__aeabi_dmul>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4690      	mov	r8, r2
 8005390:	4699      	mov	r9, r3
			+ (CalibrationFactor.Bn * strScreenSample[3].y)
 8005392:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005396:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800539a:	4618      	mov	r0, r3
 800539c:	f7fb f89e 	bl	80004dc <__aeabi_i2d>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4620      	mov	r0, r4
 80053a6:	4629      	mov	r1, r5
 80053a8:	f7fb f902 	bl	80005b0 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4640      	mov	r0, r8
 80053b2:	4649      	mov	r1, r9
 80053b4:	f7fa ff46 	bl	8000244 <__adddf3>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4610      	mov	r0, r2
 80053be:	4619      	mov	r1, r3
			+ CalibrationFactor.Cn) / CalibrationFactor.Divider;
 80053c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053c4:	f7fa ff3e 	bl	8000244 <__adddf3>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4610      	mov	r0, r2
 80053ce:	4619      	mov	r1, r3
 80053d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053d4:	f7fb fa16 	bl	8000804 <__aeabi_ddiv>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	f7fb fba8 	bl	8000b34 <__aeabi_d2uiz>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 80053ea:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80053ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fb f872 	bl	80004dc <__aeabi_i2d>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4620      	mov	r0, r4
 80053fe:	4629      	mov	r1, r5
 8005400:	f7fb f8d6 	bl	80005b0 <__aeabi_dmul>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4690      	mov	r8, r2
 800540a:	4699      	mov	r9, r3
			+ (CalibrationFactor.En * strScreenSample[3].y)
 800540c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005410:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005414:	4618      	mov	r0, r3
 8005416:	f7fb f861 	bl	80004dc <__aeabi_i2d>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fb f8c5 	bl	80005b0 <__aeabi_dmul>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4640      	mov	r0, r8
 800542c:	4649      	mov	r1, r9
 800542e:	f7fa ff09 	bl	8000244 <__adddf3>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
			+ CalibrationFactor.Fn) / CalibrationFactor.Divider;
 800543a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800543e:	f7fa ff01 	bl	8000244 <__adddf3>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800544e:	f7fb f9d9 	bl	8000804 <__aeabi_ddiv>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8005456:	4610      	mov	r0, r2
 8005458:	4619      	mov	r1, r3
 800545a:	f7fb fb6b 	bl	8000b34 <__aeabi_d2uiz>
 800545e:	4603      	mov	r3, r0
 8005460:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x =
			(usTest_x > strCrossCoordinate[3].x) ?
 8005464:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8005468:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800546c:	429a      	cmp	r2, r3
 800546e:	d906      	bls.n	800547e <XPT2046_Touch_Calibrate+0x26a>
					(usTest_x - strCrossCoordinate[3].x) :
 8005470:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 8005474:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	b29b      	uxth	r3, r3
 800547c:	e005      	b.n	800548a <XPT2046_Touch_Calibrate+0x276>
					(strCrossCoordinate[3].x - usTest_x);
 800547e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	usGap_x =
 8005482:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	b29b      	uxth	r3, r3
 800548a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y =
			(usTest_y > strCrossCoordinate[3].y) ?
 800548e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 8005492:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8005496:	429a      	cmp	r2, r3
 8005498:	d906      	bls.n	80054a8 <XPT2046_Touch_Calibrate+0x294>
					(usTest_y - strCrossCoordinate[3].y) :
 800549a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 800549e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	e005      	b.n	80054b4 <XPT2046_Touch_Calibrate+0x2a0>
					(strCrossCoordinate[3].y - usTest_y);
 80054a8:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
	usGap_y =
 80054ac:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((usGap_x > 10) || (usGap_y > 10))
 80054b8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80054bc:	2b0a      	cmp	r3, #10
 80054be:	d877      	bhi.n	80055b0 <XPT2046_Touch_Calibrate+0x39c>
 80054c0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80054c4:	2b0a      	cmp	r3, #10
 80054c6:	d873      	bhi.n	80055b0 <XPT2046_Touch_Calibrate+0x39c>
		goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 80054c8:	e9d7 0100 	ldrd	r0, r1, [r7]
			/ CalibrationFactor.Divider;
 80054cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054d0:	f7fb f998 	bl	8000804 <__aeabi_ddiv>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 80054d8:	4932      	ldr	r1, [pc, #200]	; (80055a4 <XPT2046_Touch_Calibrate+0x390>)
 80054da:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 80054de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
			/ CalibrationFactor.Divider;
 80054e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054e6:	f7fb f98d 	bl	8000804 <__aeabi_ddiv>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 80054ee:	492d      	ldr	r1, [pc, #180]	; (80055a4 <XPT2046_Touch_Calibrate+0x390>)
 80054f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 80054f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
			/ CalibrationFactor.Divider;
 80054f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054fc:	f7fb f982 	bl	8000804 <__aeabi_ddiv>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 8005504:	4927      	ldr	r1, [pc, #156]	; (80055a4 <XPT2046_Touch_Calibrate+0x390>)
 8005506:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 800550a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			/ CalibrationFactor.Divider;
 800550e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005512:	f7fb f977 	bl	8000804 <__aeabi_ddiv>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 800551a:	4922      	ldr	r1, [pc, #136]	; (80055a4 <XPT2046_Touch_Calibrate+0x390>)
 800551c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8005520:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
			/ CalibrationFactor.Divider;
 8005524:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005528:	f7fb f96c 	bl	8000804 <__aeabi_ddiv>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8005530:	491c      	ldr	r1, [pc, #112]	; (80055a4 <XPT2046_Touch_Calibrate+0x390>)
 8005532:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8005536:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
			/ CalibrationFactor.Divider;
 800553a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800553e:	f7fb f961 	bl	8000804 <__aeabi_ddiv>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 8005546:	4917      	ldr	r1, [pc, #92]	; (80055a4 <XPT2046_Touch_Calibrate+0x390>)
 8005548:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

#endif

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 800554c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005550:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005554:	2100      	movs	r1, #0
 8005556:	2000      	movs	r0, #0
 8005558:	f7fc fa30 	bl	80019bc <LCD_Clear>

	pStr = "Welcome !";
 800555c:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <XPT2046_Touch_Calibrate+0x394>)
 800555e:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8005560:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8005564:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005566:	f7fa fe5f 	bl	8000228 <strlen>
 800556a:	4603      	mov	r3, r0
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	1ae3      	subs	r3, r4, r3
 8005570:	085b      	lsrs	r3, r3, #1
 8005572:	b298      	uxth	r0, r3
 8005574:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	b299      	uxth	r1, r3
 800557c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005588:	f7fc fc5a 	bl	8001e40 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(200000);
 800558c:	4807      	ldr	r0, [pc, #28]	; (80055ac <XPT2046_Touch_Calibrate+0x398>)
 800558e:	f7ff fad5 	bl	8004b3c <XPT2046_DelayUS>

	return 1;
 8005592:	2301      	movs	r3, #1
 8005594:	e04b      	b.n	800562e <XPT2046_Touch_Calibrate+0x41a>
		goto Failure;
 8005596:	bf00      	nop
 8005598:	e00b      	b.n	80055b2 <XPT2046_Touch_Calibrate+0x39e>
 800559a:	bf00      	nop
 800559c:	08008d8c 	.word	0x08008d8c
 80055a0:	000186a0 	.word	0x000186a0
 80055a4:	20000010 	.word	0x20000010
 80055a8:	08008da4 	.word	0x08008da4
 80055ac:	00030d40 	.word	0x00030d40
		goto Failure;
 80055b0:	bf00      	nop

	Failure:

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 80055b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80055b6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80055ba:	2100      	movs	r1, #0
 80055bc:	2000      	movs	r0, #0
 80055be:	f7fc f9fd 	bl	80019bc <LCD_Clear>

	pStr = "Calibrate fail";
 80055c2:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <XPT2046_Touch_Calibrate+0x424>)
 80055c4:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 80055c6:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80055ca:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80055cc:	f7fa fe2c 	bl	8000228 <strlen>
 80055d0:	4603      	mov	r3, r0
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	1ae3      	subs	r3, r4, r3
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	b298      	uxth	r0, r3
 80055da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80055de:	085b      	lsrs	r3, r3, #1
 80055e0:	b299      	uxth	r1, r3
 80055e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055ee:	f7fc fc27 	bl	8001e40 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	pStr = "try again";
 80055f2:	4b12      	ldr	r3, [pc, #72]	; (800563c <XPT2046_Touch_Calibrate+0x428>)
 80055f4:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 80055f6:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80055fa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80055fc:	f7fa fe14 	bl	8000228 <strlen>
 8005600:	4603      	mov	r3, r0
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	1ae3      	subs	r3, r4, r3
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	b298      	uxth	r0, r3
 800560a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	b29b      	uxth	r3, r3
 8005612:	3310      	adds	r3, #16
 8005614:	b299      	uxth	r1, r3
 8005616:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005620:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005622:	f7fc fc0d 	bl	8001e40 <LCD_DrawString_Color>
			(usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);
 8005626:	4806      	ldr	r0, [pc, #24]	; (8005640 <XPT2046_Touch_Calibrate+0x42c>)
 8005628:	f7ff fa88 	bl	8004b3c <XPT2046_DelayUS>

	return 0;
 800562c:	2300      	movs	r3, #0

}
 800562e:	4618      	mov	r0, r3
 8005630:	3778      	adds	r7, #120	; 0x78
 8005632:	46bd      	mov	sp, r7
 8005634:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005638:	08008db0 	.word	0x08008db0
 800563c:	08008dc0 	.word	0x08008dc0
 8005640:	000f4240 	.word	0x000f4240

08005644 <XPT2046_Get_TouchedPoint>:

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 8005644:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 8005654:	f107 0308 	add.w	r3, r7, #8
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fb37 	bl	8004ccc <XPT2046_ReadAdc_Smooth_XY>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d06e      	beq.n	8005742 <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	e9d3 4500 	ldrd	r4, r5, [r3]
 800566a:	893b      	ldrh	r3, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f7fa ff35 	bl	80004dc <__aeabi_i2d>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4620      	mov	r0, r4
 8005678:	4629      	mov	r1, r5
 800567a:	f7fa ff99 	bl	80005b0 <__aeabi_dmul>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4690      	mov	r8, r2
 8005684:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800568c:	897b      	ldrh	r3, [r7, #10]
 800568e:	4618      	mov	r0, r3
 8005690:	f7fa ff24 	bl	80004dc <__aeabi_i2d>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	f7fa ff88 	bl	80005b0 <__aeabi_dmul>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4640      	mov	r0, r8
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fa fdcc 	bl	8000244 <__adddf3>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4610      	mov	r0, r2
 80056b2:	4619      	mov	r1, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80056ba:	f7fa fdc3 	bl	8000244 <__adddf3>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	f7fb fa35 	bl	8000b34 <__aeabi_d2uiz>
 80056ca:	4603      	mov	r3, r0
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80056d8:	893b      	ldrh	r3, [r7, #8]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fa fefe 	bl	80004dc <__aeabi_i2d>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4620      	mov	r0, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	f7fa ff62 	bl	80005b0 <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4690      	mov	r8, r2
 80056f2:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80056fa:	897b      	ldrh	r3, [r7, #10]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fa feed 	bl	80004dc <__aeabi_i2d>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4620      	mov	r0, r4
 8005708:	4629      	mov	r1, r5
 800570a:	f7fa ff51 	bl	80005b0 <__aeabi_dmul>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4640      	mov	r0, r8
 8005714:	4649      	mov	r1, r9
 8005716:	f7fa fd95 	bl	8000244 <__adddf3>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005728:	f7fa fd8c 	bl	8000244 <__adddf3>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8005730:	4610      	mov	r0, r2
 8005732:	4619      	mov	r1, r3
 8005734:	f7fb f9fe 	bl	8000b34 <__aeabi_d2uiz>
 8005738:	4603      	mov	r3, r0
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	805a      	strh	r2, [r3, #2]
 8005740:	e001      	b.n	8005746 <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 8005746:	7bfb      	ldrb	r3, [r7, #15]

}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005752 <XPT2046_Reset_TouchPoint>:

void XPT2046_Reset_TouchPoint(strType_XPT2046_Coordinate *pDisplayCoordinate){
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
	//Reset X and Y
	pDisplayCoordinate->x = 0;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	801a      	strh	r2, [r3, #0]
	pDisplayCoordinate->y = 0;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	805a      	strh	r2, [r3, #2]
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005770:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005772:	e003      	b.n	800577c <LoopCopyDataInit>

08005774 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005776:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005778:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800577a:	3104      	adds	r1, #4

0800577c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800577c:	480a      	ldr	r0, [pc, #40]	; (80057a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800577e:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005780:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005782:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005784:	d3f6      	bcc.n	8005774 <CopyDataInit>
  ldr r2, =_sbss
 8005786:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005788:	e002      	b.n	8005790 <LoopFillZerobss>

0800578a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800578a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800578c:	f842 3b04 	str.w	r3, [r2], #4

08005790 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005790:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005792:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005794:	d3f9      	bcc.n	800578a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005796:	f7ff f931 	bl	80049fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800579a:	f002 f97d 	bl	8007a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800579e:	f7fc fcc1 	bl	8002124 <main>
  bx lr
 80057a2:	4770      	bx	lr
  ldr r3, =_sidata
 80057a4:	0802c94c 	.word	0x0802c94c
  ldr r0, =_sdata
 80057a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80057ac:	20000474 	.word	0x20000474
  ldr r2, =_sbss
 80057b0:	20000474 	.word	0x20000474
  ldr r3, = _ebss
 80057b4:	20000624 	.word	0x20000624

080057b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80057b8:	e7fe      	b.n	80057b8 <ADC1_2_IRQHandler>
	...

080057bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057c0:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <HAL_Init+0x28>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a07      	ldr	r2, [pc, #28]	; (80057e4 <HAL_Init+0x28>)
 80057c6:	f043 0310 	orr.w	r3, r3, #16
 80057ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057cc:	2003      	movs	r0, #3
 80057ce:	f000 f943 	bl	8005a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057d2:	2000      	movs	r0, #0
 80057d4:	f000 f808 	bl	80057e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057d8:	f7fe ff56 	bl	8004688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40022000 	.word	0x40022000

080057e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057f0:	4b12      	ldr	r3, [pc, #72]	; (800583c <HAL_InitTick+0x54>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_InitTick+0x58>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	4619      	mov	r1, r3
 80057fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f95b 	bl	8005ac2 <HAL_SYSTICK_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e00e      	b.n	8005834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b0f      	cmp	r3, #15
 800581a:	d80a      	bhi.n	8005832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800581c:	2200      	movs	r2, #0
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	f04f 30ff 	mov.w	r0, #4294967295
 8005824:	f000 f923 	bl	8005a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005828:	4a06      	ldr	r2, [pc, #24]	; (8005844 <HAL_InitTick+0x5c>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e000      	b.n	8005834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
}
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000008 	.word	0x20000008
 8005840:	20000044 	.word	0x20000044
 8005844:	20000040 	.word	0x20000040

08005848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800584c:	4b05      	ldr	r3, [pc, #20]	; (8005864 <HAL_IncTick+0x1c>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_IncTick+0x20>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4413      	add	r3, r2
 8005858:	4a03      	ldr	r2, [pc, #12]	; (8005868 <HAL_IncTick+0x20>)
 800585a:	6013      	str	r3, [r2, #0]
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr
 8005864:	20000044 	.word	0x20000044
 8005868:	2000061c 	.word	0x2000061c

0800586c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  return uwTick;
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <HAL_GetTick+0x10>)
 8005872:	681b      	ldr	r3, [r3, #0]
}
 8005874:	4618      	mov	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr
 800587c:	2000061c 	.word	0x2000061c

08005880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005888:	f7ff fff0 	bl	800586c <HAL_GetTick>
 800588c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005898:	d005      	beq.n	80058a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800589a:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <HAL_Delay+0x44>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058a6:	bf00      	nop
 80058a8:	f7ff ffe0 	bl	800586c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d8f7      	bhi.n	80058a8 <HAL_Delay+0x28>
  {
  }
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000044 	.word	0x20000044

080058c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <NVIC_SetPriorityGrouping+0x44>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058e4:	4013      	ands	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058fa:	4a04      	ldr	r2, [pc, #16]	; (800590c <NVIC_SetPriorityGrouping+0x44>)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	60d3      	str	r3, [r2, #12]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	e000ed00 	.word	0xe000ed00

08005910 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <NVIC_GetPriorityGrouping+0x18>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	f003 0307 	and.w	r3, r3, #7
}
 800591e:	4618      	mov	r0, r3
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	e000ed00 	.word	0xe000ed00

0800592c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	f003 021f 	and.w	r2, r3, #31
 800593c:	4906      	ldr	r1, [pc, #24]	; (8005958 <NVIC_EnableIRQ+0x2c>)
 800593e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	2001      	movs	r0, #1
 8005946:	fa00 f202 	lsl.w	r2, r0, r2
 800594a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr
 8005958:	e000e100 	.word	0xe000e100

0800595c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	6039      	str	r1, [r7, #0]
 8005966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596c:	2b00      	cmp	r3, #0
 800596e:	da0b      	bge.n	8005988 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	490c      	ldr	r1, [pc, #48]	; (80059a8 <NVIC_SetPriority+0x4c>)
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	3b04      	subs	r3, #4
 800597e:	0112      	lsls	r2, r2, #4
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	440b      	add	r3, r1
 8005984:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005986:	e009      	b.n	800599c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	4907      	ldr	r1, [pc, #28]	; (80059ac <NVIC_SetPriority+0x50>)
 800598e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005992:	0112      	lsls	r2, r2, #4
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	440b      	add	r3, r1
 8005998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	e000ed00 	.word	0xe000ed00
 80059ac:	e000e100 	.word	0xe000e100

080059b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b089      	sub	sp, #36	; 0x24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f1c3 0307 	rsb	r3, r3, #7
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	bf28      	it	cs
 80059ce:	2304      	movcs	r3, #4
 80059d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3304      	adds	r3, #4
 80059d6:	2b06      	cmp	r3, #6
 80059d8:	d902      	bls.n	80059e0 <NVIC_EncodePriority+0x30>
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	3b03      	subs	r3, #3
 80059de:	e000      	b.n	80059e2 <NVIC_EncodePriority+0x32>
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43da      	mvns	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	401a      	ands	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059f8:	f04f 31ff 	mov.w	r1, #4294967295
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005a02:	43d9      	mvns	r1, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a08:	4313      	orrs	r3, r2
         );
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3724      	adds	r7, #36	; 0x24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr

08005a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a24:	d301      	bcc.n	8005a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a26:	2301      	movs	r3, #1
 8005a28:	e00f      	b.n	8005a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <SysTick_Config+0x40>)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a32:	210f      	movs	r1, #15
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	f7ff ff90 	bl	800595c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <SysTick_Config+0x40>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a42:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <SysTick_Config+0x40>)
 8005a44:	2207      	movs	r2, #7
 8005a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	e000e010 	.word	0xe000e010

08005a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff ff31 	bl	80058c8 <NVIC_SetPriorityGrouping>
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	4603      	mov	r3, r0
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a80:	f7ff ff46 	bl	8005910 <NVIC_GetPriorityGrouping>
 8005a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	6978      	ldr	r0, [r7, #20]
 8005a8c:	f7ff ff90 	bl	80059b0 <NVIC_EncodePriority>
 8005a90:	4602      	mov	r2, r0
 8005a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff ff5f 	bl	800595c <NVIC_SetPriority>
}
 8005a9e:	bf00      	nop
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	4603      	mov	r3, r0
 8005aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff39 	bl	800592c <NVIC_EnableIRQ>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff ffa2 	bl	8005a14 <SysTick_Config>
 8005ad0:	4603      	mov	r3, r0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b08b      	sub	sp, #44	; 0x2c
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8005af6:	2300      	movs	r3, #0
 8005af8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
 8005afe:	e179      	b.n	8005df4 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8005b00:	2201      	movs	r2, #1
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	f040 8168 	bne.w	8005dee <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4a96      	ldr	r2, [pc, #600]	; (8005d7c <HAL_GPIO_Init+0x2a0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d05e      	beq.n	8005be6 <HAL_GPIO_Init+0x10a>
 8005b28:	4a94      	ldr	r2, [pc, #592]	; (8005d7c <HAL_GPIO_Init+0x2a0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d875      	bhi.n	8005c1a <HAL_GPIO_Init+0x13e>
 8005b2e:	4a94      	ldr	r2, [pc, #592]	; (8005d80 <HAL_GPIO_Init+0x2a4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d058      	beq.n	8005be6 <HAL_GPIO_Init+0x10a>
 8005b34:	4a92      	ldr	r2, [pc, #584]	; (8005d80 <HAL_GPIO_Init+0x2a4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d86f      	bhi.n	8005c1a <HAL_GPIO_Init+0x13e>
 8005b3a:	4a92      	ldr	r2, [pc, #584]	; (8005d84 <HAL_GPIO_Init+0x2a8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d052      	beq.n	8005be6 <HAL_GPIO_Init+0x10a>
 8005b40:	4a90      	ldr	r2, [pc, #576]	; (8005d84 <HAL_GPIO_Init+0x2a8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d869      	bhi.n	8005c1a <HAL_GPIO_Init+0x13e>
 8005b46:	4a90      	ldr	r2, [pc, #576]	; (8005d88 <HAL_GPIO_Init+0x2ac>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d04c      	beq.n	8005be6 <HAL_GPIO_Init+0x10a>
 8005b4c:	4a8e      	ldr	r2, [pc, #568]	; (8005d88 <HAL_GPIO_Init+0x2ac>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d863      	bhi.n	8005c1a <HAL_GPIO_Init+0x13e>
 8005b52:	4a8e      	ldr	r2, [pc, #568]	; (8005d8c <HAL_GPIO_Init+0x2b0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d046      	beq.n	8005be6 <HAL_GPIO_Init+0x10a>
 8005b58:	4a8c      	ldr	r2, [pc, #560]	; (8005d8c <HAL_GPIO_Init+0x2b0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d85d      	bhi.n	8005c1a <HAL_GPIO_Init+0x13e>
 8005b5e:	2b12      	cmp	r3, #18
 8005b60:	d82a      	bhi.n	8005bb8 <HAL_GPIO_Init+0xdc>
 8005b62:	2b12      	cmp	r3, #18
 8005b64:	d859      	bhi.n	8005c1a <HAL_GPIO_Init+0x13e>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <HAL_GPIO_Init+0x90>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005be7 	.word	0x08005be7
 8005b70:	08005bc1 	.word	0x08005bc1
 8005b74:	08005bd3 	.word	0x08005bd3
 8005b78:	08005c15 	.word	0x08005c15
 8005b7c:	08005c1b 	.word	0x08005c1b
 8005b80:	08005c1b 	.word	0x08005c1b
 8005b84:	08005c1b 	.word	0x08005c1b
 8005b88:	08005c1b 	.word	0x08005c1b
 8005b8c:	08005c1b 	.word	0x08005c1b
 8005b90:	08005c1b 	.word	0x08005c1b
 8005b94:	08005c1b 	.word	0x08005c1b
 8005b98:	08005c1b 	.word	0x08005c1b
 8005b9c:	08005c1b 	.word	0x08005c1b
 8005ba0:	08005c1b 	.word	0x08005c1b
 8005ba4:	08005c1b 	.word	0x08005c1b
 8005ba8:	08005c1b 	.word	0x08005c1b
 8005bac:	08005c1b 	.word	0x08005c1b
 8005bb0:	08005bc9 	.word	0x08005bc9
 8005bb4:	08005bdd 	.word	0x08005bdd
 8005bb8:	4a75      	ldr	r2, [pc, #468]	; (8005d90 <HAL_GPIO_Init+0x2b4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005bbe:	e02c      	b.n	8005c1a <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	623b      	str	r3, [r7, #32]
          break;
 8005bc6:	e029      	b.n	8005c1c <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	623b      	str	r3, [r7, #32]
          break;
 8005bd0:	e024      	b.n	8005c1c <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	623b      	str	r3, [r7, #32]
          break;
 8005bda:	e01f      	b.n	8005c1c <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	330c      	adds	r3, #12
 8005be2:	623b      	str	r3, [r7, #32]
          break;
 8005be4:	e01a      	b.n	8005c1c <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005bee:	2304      	movs	r3, #4
 8005bf0:	623b      	str	r3, [r7, #32]
          break;
 8005bf2:	e013      	b.n	8005c1c <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d105      	bne.n	8005c08 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	611a      	str	r2, [r3, #16]
          break;
 8005c06:	e009      	b.n	8005c1c <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c08:	2308      	movs	r3, #8
 8005c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	615a      	str	r2, [r3, #20]
          break;
 8005c12:	e003      	b.n	8005c1c <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005c14:	2300      	movs	r3, #0
 8005c16:	623b      	str	r3, [r7, #32]
          break;
 8005c18:	e000      	b.n	8005c1c <HAL_GPIO_Init+0x140>
          break;
 8005c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2bff      	cmp	r3, #255	; 0xff
 8005c20:	d801      	bhi.n	8005c26 <HAL_GPIO_Init+0x14a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	e001      	b.n	8005c2a <HAL_GPIO_Init+0x14e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	2bff      	cmp	r3, #255	; 0xff
 8005c30:	d802      	bhi.n	8005c38 <HAL_GPIO_Init+0x15c>
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	e002      	b.n	8005c3e <HAL_GPIO_Init+0x162>
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	3b08      	subs	r3, #8
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	210f      	movs	r1, #15
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	6a39      	ldr	r1, [r7, #32]
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	fa01 f303 	lsl.w	r3, r1, r3
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 80c1 	beq.w	8005dee <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005c6c:	4b49      	ldr	r3, [pc, #292]	; (8005d94 <HAL_GPIO_Init+0x2b8>)
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	4a48      	ldr	r2, [pc, #288]	; (8005d94 <HAL_GPIO_Init+0x2b8>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6193      	str	r3, [r2, #24]
 8005c78:	4b46      	ldr	r3, [pc, #280]	; (8005d94 <HAL_GPIO_Init+0x2b8>)
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	60bb      	str	r3, [r7, #8]
 8005c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8005c84:	4a44      	ldr	r2, [pc, #272]	; (8005d98 <HAL_GPIO_Init+0x2bc>)
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	089b      	lsrs	r3, r3, #2
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c90:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	220f      	movs	r2, #15
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a3c      	ldr	r2, [pc, #240]	; (8005d9c <HAL_GPIO_Init+0x2c0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d01f      	beq.n	8005cf0 <HAL_GPIO_Init+0x214>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a3b      	ldr	r2, [pc, #236]	; (8005da0 <HAL_GPIO_Init+0x2c4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d019      	beq.n	8005cec <HAL_GPIO_Init+0x210>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a3a      	ldr	r2, [pc, #232]	; (8005da4 <HAL_GPIO_Init+0x2c8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d013      	beq.n	8005ce8 <HAL_GPIO_Init+0x20c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a39      	ldr	r2, [pc, #228]	; (8005da8 <HAL_GPIO_Init+0x2cc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00d      	beq.n	8005ce4 <HAL_GPIO_Init+0x208>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a38      	ldr	r2, [pc, #224]	; (8005dac <HAL_GPIO_Init+0x2d0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <HAL_GPIO_Init+0x204>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a37      	ldr	r2, [pc, #220]	; (8005db0 <HAL_GPIO_Init+0x2d4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_GPIO_Init+0x200>
 8005cd8:	2305      	movs	r3, #5
 8005cda:	e00a      	b.n	8005cf2 <HAL_GPIO_Init+0x216>
 8005cdc:	2306      	movs	r3, #6
 8005cde:	e008      	b.n	8005cf2 <HAL_GPIO_Init+0x216>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	e006      	b.n	8005cf2 <HAL_GPIO_Init+0x216>
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e004      	b.n	8005cf2 <HAL_GPIO_Init+0x216>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e002      	b.n	8005cf2 <HAL_GPIO_Init+0x216>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <HAL_GPIO_Init+0x216>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf4:	f002 0203 	and.w	r2, r2, #3
 8005cf8:	0092      	lsls	r2, r2, #2
 8005cfa:	4093      	lsls	r3, r2
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8005d02:	4925      	ldr	r1, [pc, #148]	; (8005d98 <HAL_GPIO_Init+0x2bc>)
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	3302      	adds	r3, #2
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005d1c:	4b25      	ldr	r3, [pc, #148]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	4924      	ldr	r1, [pc, #144]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]
 8005d28:	e006      	b.n	8005d38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d2a:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	4920      	ldr	r1, [pc, #128]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d006      	beq.n	8005d52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	491a      	ldr	r1, [pc, #104]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	604b      	str	r3, [r1, #4]
 8005d50:	e006      	b.n	8005d60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005d52:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	4916      	ldr	r1, [pc, #88]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d025      	beq.n	8005db8 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005d6c:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	4910      	ldr	r1, [pc, #64]	; (8005db4 <HAL_GPIO_Init+0x2d8>)
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	608b      	str	r3, [r1, #8]
 8005d78:	e025      	b.n	8005dc6 <HAL_GPIO_Init+0x2ea>
 8005d7a:	bf00      	nop
 8005d7c:	10320000 	.word	0x10320000
 8005d80:	10310000 	.word	0x10310000
 8005d84:	10220000 	.word	0x10220000
 8005d88:	10210000 	.word	0x10210000
 8005d8c:	10120000 	.word	0x10120000
 8005d90:	10110000 	.word	0x10110000
 8005d94:	40021000 	.word	0x40021000
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40010800 	.word	0x40010800
 8005da0:	40010c00 	.word	0x40010c00
 8005da4:	40011000 	.word	0x40011000
 8005da8:	40011400 	.word	0x40011400
 8005dac:	40011800 	.word	0x40011800
 8005db0:	40011c00 	.word	0x40011c00
 8005db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005db8:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <HAL_GPIO_Init+0x32c>)
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	4911      	ldr	r1, [pc, #68]	; (8005e08 <HAL_GPIO_Init+0x32c>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d006      	beq.n	8005de0 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <HAL_GPIO_Init+0x32c>)
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	490c      	ldr	r1, [pc, #48]	; (8005e08 <HAL_GPIO_Init+0x32c>)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60cb      	str	r3, [r1, #12]
 8005dde:	e006      	b.n	8005dee <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005de0:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <HAL_GPIO_Init+0x32c>)
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	43db      	mvns	r3, r3
 8005de8:	4907      	ldr	r1, [pc, #28]	; (8005e08 <HAL_GPIO_Init+0x32c>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	3301      	adds	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	f67f ae82 	bls.w	8005b00 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	372c      	adds	r7, #44	; 0x2c
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr
 8005e08:	40010400 	.word	0x40010400

08005e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	887b      	ldrh	r3, [r7, #2]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
 8005e28:	e001      	b.n	8005e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	807b      	strh	r3, [r7, #2]
 8005e46:	4613      	mov	r3, r2
 8005e48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e4a:	787b      	ldrb	r3, [r7, #1]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e56:	e003      	b.n	8005e60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	041a      	lsls	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	611a      	str	r2, [r3, #16]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr
	...

08005e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005e76:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e82:	4a05      	ldr	r2, [pc, #20]	; (8005e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f806 	bl	8005e9c <HAL_GPIO_EXTI_Callback>
  }
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40010400 	.word	0x40010400

08005e9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005eb4:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	420e0020 	.word	0x420e0020

08005ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8087 	beq.w	8005ff0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005ee2:	4b92      	ldr	r3, [pc, #584]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d00c      	beq.n	8005f08 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005eee:	4b8f      	ldr	r3, [pc, #572]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d112      	bne.n	8005f20 <HAL_RCC_OscConfig+0x58>
 8005efa:	4b8c      	ldr	r3, [pc, #560]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f06:	d10b      	bne.n	8005f20 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f08:	4b88      	ldr	r3, [pc, #544]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d06c      	beq.n	8005fee <HAL_RCC_OscConfig+0x126>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d168      	bne.n	8005fee <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e22d      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f28:	d106      	bne.n	8005f38 <HAL_RCC_OscConfig+0x70>
 8005f2a:	4b80      	ldr	r3, [pc, #512]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a7f      	ldr	r2, [pc, #508]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e02e      	b.n	8005f96 <HAL_RCC_OscConfig+0xce>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10c      	bne.n	8005f5a <HAL_RCC_OscConfig+0x92>
 8005f40:	4b7a      	ldr	r3, [pc, #488]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a79      	ldr	r2, [pc, #484]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	4b77      	ldr	r3, [pc, #476]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a76      	ldr	r2, [pc, #472]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	e01d      	b.n	8005f96 <HAL_RCC_OscConfig+0xce>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCC_OscConfig+0xb6>
 8005f64:	4b71      	ldr	r3, [pc, #452]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a70      	ldr	r2, [pc, #448]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	4b6e      	ldr	r3, [pc, #440]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a6d      	ldr	r2, [pc, #436]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	e00b      	b.n	8005f96 <HAL_RCC_OscConfig+0xce>
 8005f7e:	4b6b      	ldr	r3, [pc, #428]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a6a      	ldr	r2, [pc, #424]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	4b68      	ldr	r3, [pc, #416]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a67      	ldr	r2, [pc, #412]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f94:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d013      	beq.n	8005fc6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f9e:	f7ff fc65 	bl	800586c <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fa6:	f7ff fc61 	bl	800586c <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b64      	cmp	r3, #100	; 0x64
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e1e1      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb8:	4b5c      	ldr	r3, [pc, #368]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0xde>
 8005fc4:	e014      	b.n	8005ff0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc6:	f7ff fc51 	bl	800586c <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fce:	f7ff fc4d 	bl	800586c <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b64      	cmp	r3, #100	; 0x64
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e1cd      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe0:	4b52      	ldr	r3, [pc, #328]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f0      	bne.n	8005fce <HAL_RCC_OscConfig+0x106>
 8005fec:	e000      	b.n	8005ff0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d063      	beq.n	80060c4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005ffc:	4b4b      	ldr	r3, [pc, #300]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f003 030c 	and.w	r3, r3, #12
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006008:	4b48      	ldr	r3, [pc, #288]	; (800612c <HAL_RCC_OscConfig+0x264>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f003 030c 	and.w	r3, r3, #12
 8006010:	2b08      	cmp	r3, #8
 8006012:	d11c      	bne.n	800604e <HAL_RCC_OscConfig+0x186>
 8006014:	4b45      	ldr	r3, [pc, #276]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d116      	bne.n	800604e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006020:	4b42      	ldr	r3, [pc, #264]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_RCC_OscConfig+0x170>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d001      	beq.n	8006038 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e1a1      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006038:	4b3c      	ldr	r3, [pc, #240]	; (800612c <HAL_RCC_OscConfig+0x264>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4939      	ldr	r1, [pc, #228]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8006048:	4313      	orrs	r3, r2
 800604a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800604c:	e03a      	b.n	80060c4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d020      	beq.n	8006098 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <HAL_RCC_OscConfig+0x268>)
 8006058:	2201      	movs	r2, #1
 800605a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605c:	f7ff fc06 	bl	800586c <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006064:	f7ff fc02 	bl	800586c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e182      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006076:	4b2d      	ldr	r3, [pc, #180]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006082:	4b2a      	ldr	r3, [pc, #168]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4926      	ldr	r1, [pc, #152]	; (800612c <HAL_RCC_OscConfig+0x264>)
 8006092:	4313      	orrs	r3, r2
 8006094:	600b      	str	r3, [r1, #0]
 8006096:	e015      	b.n	80060c4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <HAL_RCC_OscConfig+0x268>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609e:	f7ff fbe5 	bl	800586c <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060a6:	f7ff fbe1 	bl	800586c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e161      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060b8:	4b1c      	ldr	r3, [pc, #112]	; (800612c <HAL_RCC_OscConfig+0x264>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f0      	bne.n	80060a6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d039      	beq.n	8006144 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d019      	beq.n	800610c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d8:	4b16      	ldr	r3, [pc, #88]	; (8006134 <HAL_RCC_OscConfig+0x26c>)
 80060da:	2201      	movs	r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060de:	f7ff fbc5 	bl	800586c <HAL_GetTick>
 80060e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060e6:	f7ff fbc1 	bl	800586c <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e141      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <HAL_RCC_OscConfig+0x264>)
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8006104:	2001      	movs	r0, #1
 8006106:	f000 fadf 	bl	80066c8 <RCC_Delay>
 800610a:	e01b      	b.n	8006144 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <HAL_RCC_OscConfig+0x26c>)
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006112:	f7ff fbab 	bl	800586c <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006118:	e00e      	b.n	8006138 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800611a:	f7ff fba7 	bl	800586c <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d907      	bls.n	8006138 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e127      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
 800612c:	40021000 	.word	0x40021000
 8006130:	42420000 	.word	0x42420000
 8006134:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006138:	4b92      	ldr	r3, [pc, #584]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1ea      	bne.n	800611a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80a6 	beq.w	800629e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006152:	2300      	movs	r3, #0
 8006154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006156:	4b8b      	ldr	r3, [pc, #556]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10d      	bne.n	800617e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006162:	4b88      	ldr	r3, [pc, #544]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	4a87      	ldr	r2, [pc, #540]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616c:	61d3      	str	r3, [r2, #28]
 800616e:	4b85      	ldr	r3, [pc, #532]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617e:	4b82      	ldr	r3, [pc, #520]	; (8006388 <HAL_RCC_OscConfig+0x4c0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006186:	2b00      	cmp	r3, #0
 8006188:	d118      	bne.n	80061bc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800618a:	4b7f      	ldr	r3, [pc, #508]	; (8006388 <HAL_RCC_OscConfig+0x4c0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a7e      	ldr	r2, [pc, #504]	; (8006388 <HAL_RCC_OscConfig+0x4c0>)
 8006190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006196:	f7ff fb69 	bl	800586c <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619e:	f7ff fb65 	bl	800586c <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b64      	cmp	r3, #100	; 0x64
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0e5      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b0:	4b75      	ldr	r3, [pc, #468]	; (8006388 <HAL_RCC_OscConfig+0x4c0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0f0      	beq.n	800619e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d106      	bne.n	80061d2 <HAL_RCC_OscConfig+0x30a>
 80061c4:	4b6f      	ldr	r3, [pc, #444]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	4a6e      	ldr	r2, [pc, #440]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	6213      	str	r3, [r2, #32]
 80061d0:	e02d      	b.n	800622e <HAL_RCC_OscConfig+0x366>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10c      	bne.n	80061f4 <HAL_RCC_OscConfig+0x32c>
 80061da:	4b6a      	ldr	r3, [pc, #424]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	4a69      	ldr	r2, [pc, #420]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	6213      	str	r3, [r2, #32]
 80061e6:	4b67      	ldr	r3, [pc, #412]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	4a66      	ldr	r2, [pc, #408]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80061ec:	f023 0304 	bic.w	r3, r3, #4
 80061f0:	6213      	str	r3, [r2, #32]
 80061f2:	e01c      	b.n	800622e <HAL_RCC_OscConfig+0x366>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	d10c      	bne.n	8006216 <HAL_RCC_OscConfig+0x34e>
 80061fc:	4b61      	ldr	r3, [pc, #388]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	4a60      	ldr	r2, [pc, #384]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006202:	f043 0304 	orr.w	r3, r3, #4
 8006206:	6213      	str	r3, [r2, #32]
 8006208:	4b5e      	ldr	r3, [pc, #376]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	4a5d      	ldr	r2, [pc, #372]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6213      	str	r3, [r2, #32]
 8006214:	e00b      	b.n	800622e <HAL_RCC_OscConfig+0x366>
 8006216:	4b5b      	ldr	r3, [pc, #364]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	4a5a      	ldr	r2, [pc, #360]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	6213      	str	r3, [r2, #32]
 8006222:	4b58      	ldr	r3, [pc, #352]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	4a57      	ldr	r2, [pc, #348]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006228:	f023 0304 	bic.w	r3, r3, #4
 800622c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d015      	beq.n	8006262 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006236:	f7ff fb19 	bl	800586c <HAL_GetTick>
 800623a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800623c:	e00a      	b.n	8006254 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800623e:	f7ff fb15 	bl	800586c <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	f241 3288 	movw	r2, #5000	; 0x1388
 800624c:	4293      	cmp	r3, r2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e093      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006254:	4b4b      	ldr	r3, [pc, #300]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ee      	beq.n	800623e <HAL_RCC_OscConfig+0x376>
 8006260:	e014      	b.n	800628c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006262:	f7ff fb03 	bl	800586c <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006268:	e00a      	b.n	8006280 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800626a:	f7ff faff 	bl	800586c <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f241 3288 	movw	r2, #5000	; 0x1388
 8006278:	4293      	cmp	r3, r2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e07d      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006280:	4b40      	ldr	r3, [pc, #256]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1ee      	bne.n	800626a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d105      	bne.n	800629e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006292:	4b3c      	ldr	r3, [pc, #240]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	4a3b      	ldr	r2, [pc, #236]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800629c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d069      	beq.n	800637a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062a6:	4b37      	ldr	r3, [pc, #220]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 030c 	and.w	r3, r3, #12
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d061      	beq.n	8006376 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d146      	bne.n	8006348 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ba:	4b34      	ldr	r3, [pc, #208]	; (800638c <HAL_RCC_OscConfig+0x4c4>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c0:	f7ff fad4 	bl	800586c <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c8:	f7ff fad0 	bl	800586c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e050      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062da:	4b2a      	ldr	r3, [pc, #168]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ee:	d108      	bne.n	8006302 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80062f0:	4b24      	ldr	r3, [pc, #144]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4921      	ldr	r1, [pc, #132]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006302:	4b20      	ldr	r3, [pc, #128]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a19      	ldr	r1, [r3, #32]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	430b      	orrs	r3, r1
 8006314:	491b      	ldr	r1, [pc, #108]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 8006316:	4313      	orrs	r3, r2
 8006318:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800631a:	4b1c      	ldr	r3, [pc, #112]	; (800638c <HAL_RCC_OscConfig+0x4c4>)
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7ff faa4 	bl	800586c <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006328:	f7ff faa0 	bl	800586c <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e020      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800633a:	4b12      	ldr	r3, [pc, #72]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0x460>
 8006346:	e018      	b.n	800637a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006348:	4b10      	ldr	r3, [pc, #64]	; (800638c <HAL_RCC_OscConfig+0x4c4>)
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634e:	f7ff fa8d 	bl	800586c <HAL_GetTick>
 8006352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006356:	f7ff fa89 	bl	800586c <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e009      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006368:	4b06      	ldr	r3, [pc, #24]	; (8006384 <HAL_RCC_OscConfig+0x4bc>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1f0      	bne.n	8006356 <HAL_RCC_OscConfig+0x48e>
 8006374:	e001      	b.n	800637a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40021000 	.word	0x40021000
 8006388:	40007000 	.word	0x40007000
 800638c:	42420060 	.word	0x42420060

08006390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800639e:	4b7e      	ldr	r3, [pc, #504]	; (8006598 <HAL_RCC_ClockConfig+0x208>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d910      	bls.n	80063ce <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ac:	4b7a      	ldr	r3, [pc, #488]	; (8006598 <HAL_RCC_ClockConfig+0x208>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f023 0207 	bic.w	r2, r3, #7
 80063b4:	4978      	ldr	r1, [pc, #480]	; (8006598 <HAL_RCC_ClockConfig+0x208>)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80063bc:	4b76      	ldr	r3, [pc, #472]	; (8006598 <HAL_RCC_ClockConfig+0x208>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d001      	beq.n	80063ce <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e0e0      	b.n	8006590 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d020      	beq.n	800641c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e6:	4b6d      	ldr	r3, [pc, #436]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4a6c      	ldr	r2, [pc, #432]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 80063ec:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063f0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063fe:	4b67      	ldr	r3, [pc, #412]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4a66      	ldr	r2, [pc, #408]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 8006404:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006408:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800640a:	4b64      	ldr	r3, [pc, #400]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	4961      	ldr	r1, [pc, #388]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 8006418:	4313      	orrs	r3, r2
 800641a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d06a      	beq.n	80064fe <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d107      	bne.n	8006440 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006430:	4b5a      	ldr	r3, [pc, #360]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d115      	bne.n	8006468 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e0a7      	b.n	8006590 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d107      	bne.n	8006458 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006448:	4b54      	ldr	r3, [pc, #336]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e09b      	b.n	8006590 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006458:	4b50      	ldr	r3, [pc, #320]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e093      	b.n	8006590 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006468:	4b4c      	ldr	r3, [pc, #304]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f023 0203 	bic.w	r2, r3, #3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4949      	ldr	r1, [pc, #292]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 8006476:	4313      	orrs	r3, r2
 8006478:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800647a:	f7ff f9f7 	bl	800586c <HAL_GetTick>
 800647e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d112      	bne.n	80064ae <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006488:	e00a      	b.n	80064a0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800648a:	f7ff f9ef 	bl	800586c <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f241 3288 	movw	r2, #5000	; 0x1388
 8006498:	4293      	cmp	r3, r2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e077      	b.n	8006590 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80064a0:	4b3e      	ldr	r3, [pc, #248]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f003 030c 	and.w	r3, r3, #12
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d1ee      	bne.n	800648a <HAL_RCC_ClockConfig+0xfa>
 80064ac:	e027      	b.n	80064fe <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d11d      	bne.n	80064f2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064b6:	e00a      	b.n	80064ce <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b8:	f7ff f9d8 	bl	800586c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e060      	b.n	8006590 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064ce:	4b33      	ldr	r3, [pc, #204]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d1ee      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x128>
 80064da:	e010      	b.n	80064fe <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064dc:	f7ff f9c6 	bl	800586c <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e04e      	b.n	8006590 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80064f2:	4b2a      	ldr	r3, [pc, #168]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1ee      	bne.n	80064dc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80064fe:	4b26      	ldr	r3, [pc, #152]	; (8006598 <HAL_RCC_ClockConfig+0x208>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d210      	bcs.n	800652e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650c:	4b22      	ldr	r3, [pc, #136]	; (8006598 <HAL_RCC_ClockConfig+0x208>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 0207 	bic.w	r2, r3, #7
 8006514:	4920      	ldr	r1, [pc, #128]	; (8006598 <HAL_RCC_ClockConfig+0x208>)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	4313      	orrs	r3, r2
 800651a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800651c:	4b1e      	ldr	r3, [pc, #120]	; (8006598 <HAL_RCC_ClockConfig+0x208>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d001      	beq.n	800652e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e030      	b.n	8006590 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d008      	beq.n	800654c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800653a:	4b18      	ldr	r3, [pc, #96]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	4915      	ldr	r1, [pc, #84]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 8006548:	4313      	orrs	r3, r2
 800654a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006558:	4b10      	ldr	r3, [pc, #64]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	490d      	ldr	r1, [pc, #52]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 8006568:	4313      	orrs	r3, r2
 800656a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800656c:	f000 f81c 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 8006570:	4602      	mov	r2, r0
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <HAL_RCC_ClockConfig+0x20c>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	091b      	lsrs	r3, r3, #4
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	4908      	ldr	r1, [pc, #32]	; (80065a0 <HAL_RCC_ClockConfig+0x210>)
 800657e:	5ccb      	ldrb	r3, [r1, r3]
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
 8006584:	4a07      	ldr	r2, [pc, #28]	; (80065a4 <HAL_RCC_ClockConfig+0x214>)
 8006586:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006588:	2000      	movs	r0, #0
 800658a:	f7ff f92d 	bl	80057e8 <HAL_InitTick>
  
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40022000 	.word	0x40022000
 800659c:	40021000 	.word	0x40021000
 80065a0:	0802c740 	.word	0x0802c740
 80065a4:	20000008 	.word	0x20000008

080065a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a8:	b490      	push	{r4, r7}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80065ae:	4b29      	ldr	r3, [pc, #164]	; (8006654 <HAL_RCC_GetSysClockFreq+0xac>)
 80065b0:	1d3c      	adds	r4, r7, #4
 80065b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80065b8:	f240 2301 	movw	r3, #513	; 0x201
 80065bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	2300      	movs	r3, #0
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80065d2:	4b21      	ldr	r3, [pc, #132]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb0>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f003 030c 	and.w	r3, r3, #12
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d002      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x40>
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d003      	beq.n	80065ee <HAL_RCC_GetSysClockFreq+0x46>
 80065e6:	e02b      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065e8:	4b1c      	ldr	r3, [pc, #112]	; (800665c <HAL_RCC_GetSysClockFreq+0xb4>)
 80065ea:	623b      	str	r3, [r7, #32]
      break;
 80065ec:	e02b      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	0c9b      	lsrs	r3, r3, #18
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	3328      	adds	r3, #40	; 0x28
 80065f8:	443b      	add	r3, r7
 80065fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80065fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d012      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800660a:	4b13      	ldr	r3, [pc, #76]	; (8006658 <HAL_RCC_GetSysClockFreq+0xb0>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	0c5b      	lsrs	r3, r3, #17
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	3328      	adds	r3, #40	; 0x28
 8006616:	443b      	add	r3, r7
 8006618:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800661c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	4a0e      	ldr	r2, [pc, #56]	; (800665c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006622:	fb03 f202 	mul.w	r2, r3, r2
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	fbb2 f3f3 	udiv	r3, r2, r3
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
 800662e:	e004      	b.n	800663a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	4a0b      	ldr	r2, [pc, #44]	; (8006660 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	623b      	str	r3, [r7, #32]
      break;
 800663e:	e002      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006642:	623b      	str	r3, [r7, #32]
      break;
 8006644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006646:	6a3b      	ldr	r3, [r7, #32]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3728      	adds	r7, #40	; 0x28
 800664c:	46bd      	mov	sp, r7
 800664e:	bc90      	pop	{r4, r7}
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	08008dcc 	.word	0x08008dcc
 8006658:	40021000 	.word	0x40021000
 800665c:	007a1200 	.word	0x007a1200
 8006660:	003d0900 	.word	0x003d0900

08006664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <HAL_RCC_GetHCLKFreq+0x10>)
 800666a:	681b      	ldr	r3, [r3, #0]
}
 800666c:	4618      	mov	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	20000008 	.word	0x20000008

08006678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800667c:	f7ff fff2 	bl	8006664 <HAL_RCC_GetHCLKFreq>
 8006680:	4602      	mov	r2, r0
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	4903      	ldr	r1, [pc, #12]	; (800669c <HAL_RCC_GetPCLK1Freq+0x24>)
 800668e:	5ccb      	ldrb	r3, [r1, r3]
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40021000 	.word	0x40021000
 800669c:	0802c750 	.word	0x0802c750

080066a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066a4:	f7ff ffde 	bl	8006664 <HAL_RCC_GetHCLKFreq>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	0adb      	lsrs	r3, r3, #11
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4903      	ldr	r1, [pc, #12]	; (80066c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066b6:	5ccb      	ldrb	r3, [r1, r3]
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80066bc:	4618      	mov	r0, r3
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40021000 	.word	0x40021000
 80066c4:	0802c750 	.word	0x0802c750

080066c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <RCC_Delay+0x38>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a0b      	ldr	r2, [pc, #44]	; (8006704 <RCC_Delay+0x3c>)
 80066d6:	fba2 2303 	umull	r2, r3, r2, r3
 80066da:	0a5b      	lsrs	r3, r3, #9
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80066e4:	bf00      	nop
}
 80066e6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	1e5a      	subs	r2, r3, #1
 80066ec:	60fa      	str	r2, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f8      	bne.n	80066e4 <RCC_Delay+0x1c>
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000008 	.word	0x20000008
 8006704:	10624dd3 	.word	0x10624dd3

08006708 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d07d      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006724:	2300      	movs	r3, #0
 8006726:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006728:	4b4f      	ldr	r3, [pc, #316]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10d      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006734:	4b4c      	ldr	r3, [pc, #304]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	4a4b      	ldr	r2, [pc, #300]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800673a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800673e:	61d3      	str	r3, [r2, #28]
 8006740:	4b49      	ldr	r3, [pc, #292]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800674c:	2301      	movs	r3, #1
 800674e:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006750:	4b46      	ldr	r3, [pc, #280]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006758:	2b00      	cmp	r3, #0
 800675a:	d118      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800675c:	4b43      	ldr	r3, [pc, #268]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a42      	ldr	r2, [pc, #264]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006766:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006768:	f7ff f880 	bl	800586c <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676e:	e008      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006770:	f7ff f87c 	bl	800586c <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b64      	cmp	r3, #100	; 0x64
 800677c:	d901      	bls.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e06d      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006782:	4b3a      	ldr	r3, [pc, #232]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f0      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800678e:	4b36      	ldr	r3, [pc, #216]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006796:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d02e      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d027      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067ac:	4b2e      	ldr	r3, [pc, #184]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067b6:	4b2e      	ldr	r3, [pc, #184]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067b8:	2201      	movs	r2, #1
 80067ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067bc:	4b2c      	ldr	r3, [pc, #176]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067c2:	4a29      	ldr	r2, [pc, #164]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d014      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d2:	f7ff f84b 	bl	800586c <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067da:	f7ff f847 	bl	800586c <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e036      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f0:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0ee      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80067fc:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4917      	ldr	r1, [pc, #92]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800680a:	4313      	orrs	r3, r2
 800680c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d105      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006814:	4b14      	ldr	r3, [pc, #80]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	4a13      	ldr	r2, [pc, #76]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800681a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800681e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800682c:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	490b      	ldr	r1, [pc, #44]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800683a:	4313      	orrs	r3, r2
 800683c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b00      	cmp	r3, #0
 8006848:	d008      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800684a:	4b07      	ldr	r3, [pc, #28]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	4904      	ldr	r1, [pc, #16]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006858:	4313      	orrs	r3, r2
 800685a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40021000 	.word	0x40021000
 800686c:	40007000 	.word	0x40007000
 8006870:	42420440 	.word	0x42420440

08006874 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006874:	b590      	push	{r4, r7, lr}
 8006876:	b08d      	sub	sp, #52	; 0x34
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800687c:	4b6b      	ldr	r3, [pc, #428]	; (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800687e:	f107 040c 	add.w	r4, r7, #12
 8006882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006888:	f240 2301 	movw	r3, #513	; 0x201
 800688c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
 8006892:	2300      	movs	r3, #0
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006896:	2300      	movs	r3, #0
 8006898:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	2300      	movs	r3, #0
 80068a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	2b0f      	cmp	r3, #15
 80068a8:	f200 80b7 	bhi.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	08006993 	.word	0x08006993
 80068b8:	080069ff 	.word	0x080069ff
 80068bc:	08006a1b 	.word	0x08006a1b
 80068c0:	08006983 	.word	0x08006983
 80068c4:	08006a1b 	.word	0x08006a1b
 80068c8:	08006a1b 	.word	0x08006a1b
 80068cc:	08006a1b 	.word	0x08006a1b
 80068d0:	0800698b 	.word	0x0800698b
 80068d4:	08006a1b 	.word	0x08006a1b
 80068d8:	08006a1b 	.word	0x08006a1b
 80068dc:	08006a1b 	.word	0x08006a1b
 80068e0:	08006a1b 	.word	0x08006a1b
 80068e4:	08006a1b 	.word	0x08006a1b
 80068e8:	08006a1b 	.word	0x08006a1b
 80068ec:	08006a1b 	.word	0x08006a1b
 80068f0:	080068f5 	.word	0x080068f5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80068f4:	4b4e      	ldr	r3, [pc, #312]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80068fa:	4b4d      	ldr	r3, [pc, #308]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 808b 	beq.w	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	0c9b      	lsrs	r3, r3, #18
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	3330      	adds	r3, #48	; 0x30
 8006912:	443b      	add	r3, r7
 8006914:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006918:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d017      	beq.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006924:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	0c5b      	lsrs	r3, r3, #17
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	3330      	adds	r3, #48	; 0x30
 8006930:	443b      	add	r3, r7
 8006932:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006942:	4a3c      	ldr	r2, [pc, #240]	; (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	fbb2 f2f3 	udiv	r2, r2, r3
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006952:	e004      	b.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	4a38      	ldr	r2, [pc, #224]	; (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8006958:	fb02 f303 	mul.w	r3, r2, r3
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800695e:	4b34      	ldr	r3, [pc, #208]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800696a:	d102      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006970:	e055      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          frequency = (pllclk * 2) / 3;
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4a31      	ldr	r2, [pc, #196]	; (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8006978:	fba2 2303 	umull	r2, r3, r2, r3
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006980:	e04d      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006982:	f7ff fe11 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 8006986:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006988:	e04a      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800698a:	f7ff fe0d 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 800698e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006990:	e046      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006992:	4b27      	ldr	r3, [pc, #156]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a2:	d108      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80069ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b4:	e022      	b.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c0:	d109      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80069c2:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80069ce:	f649 4340 	movw	r3, #40000	; 0x9c40
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d4:	e012      	b.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069e0:	d109      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80069e2:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = HSE_VALUE / 128U;
 80069ee:	f24f 4324 	movw	r3, #62500	; 0xf424
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f4:	e002      	b.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80069fa:	e011      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80069fc:	e010      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80069fe:	f7ff fe4f 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	0b9b      	lsrs	r3, r3, #14
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	3301      	adds	r3, #1
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006a18:	e002      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  default: 
    {
      break;
 8006a1a:	bf00      	nop
 8006a1c:	e000      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 8006a1e:	bf00      	nop
    }
  }
  return(frequency);
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3734      	adds	r7, #52	; 0x34
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd90      	pop	{r4, r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08008ddc 	.word	0x08008ddc
 8006a30:	40021000 	.word	0x40021000
 8006a34:	007a1200 	.word	0x007a1200
 8006a38:	003d0900 	.word	0x003d0900
 8006a3c:	aaaaaaab 	.word	0xaaaaaaab

08006a40 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e084      	b.n	8006b60 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	7c5b      	ldrb	r3, [r3, #17]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fd fe40 	bl	80046ec <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f87a 	bl	8006b6c <HAL_RTC_WaitForSynchro>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2204      	movs	r2, #4
 8006a82:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e06b      	b.n	8006b60 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f89c 	bl	8006bc6 <RTC_EnterInitMode>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2204      	movs	r2, #4
 8006a98:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e060      	b.n	8006b60 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0207 	bic.w	r2, r2, #7
 8006aac:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006ab6:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <HAL_RTC_Init+0x128>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	4a2b      	ldr	r2, [pc, #172]	; (8006b68 <HAL_RTC_Init+0x128>)
 8006abc:	f023 0301 	bic.w	r3, r3, #1
 8006ac0:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006ac2:	4b29      	ldr	r3, [pc, #164]	; (8006b68 <HAL_RTC_Init+0x128>)
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	4926      	ldr	r1, [pc, #152]	; (8006b68 <HAL_RTC_Init+0x128>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d003      	beq.n	8006ae6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e00e      	b.n	8006b04 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	f7ff fec4 	bl	8006874 <HAL_RCCEx_GetPeriphCLKFreq>
 8006aec:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d104      	bne.n	8006afe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2204      	movs	r2, #4
 8006af8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e030      	b.n	8006b60 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f023 010f 	bic.w	r1, r3, #15
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	0c1a      	lsrs	r2, r3, #16
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	b291      	uxth	r1, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6812      	ldr	r2, [r2, #0]
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f870 	bl	8006c16 <RTC_ExitInitMode>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2204      	movs	r2, #4
 8006b40:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e00c      	b.n	8006b60 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
  }
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40006c00 	.word	0x40006c00

08006b6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e01d      	b.n	8006bbe <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0208 	bic.w	r2, r2, #8
 8006b90:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8006b92:	f7fe fe6b 	bl	800586c <HAL_GetTick>
 8006b96:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006b98:	e009      	b.n	8006bae <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8006b9a:	f7fe fe67 	bl	800586c <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ba8:	d901      	bls.n	8006bae <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e007      	b.n	8006bbe <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0ee      	beq.n	8006b9a <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8006bd2:	f7fe fe4b 	bl	800586c <HAL_GetTick>
 8006bd6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006bd8:	e009      	b.n	8006bee <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006bda:	f7fe fe47 	bl	800586c <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006be8:	d901      	bls.n	8006bee <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e00f      	b.n	8006c0e <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0ee      	beq.n	8006bda <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0210 	orr.w	r2, r2, #16
 8006c0a:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0210 	bic.w	r2, r2, #16
 8006c30:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8006c32:	f7fe fe1b 	bl	800586c <HAL_GetTick>
 8006c36:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006c38:	e009      	b.n	8006c4e <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006c3a:	f7fe fe17 	bl	800586c <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c48:	d901      	bls.n	8006c4e <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e007      	b.n	8006c5e <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0ee      	beq.n	8006c3a <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 8006c78:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <HAL_RTCEx_BKUPWrite+0x30>)
 8006c7a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4413      	add	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	601a      	str	r2, [r3, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr
 8006c98:	40006c00 	.word	0x40006c00

08006c9c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 8006cae:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <HAL_RTCEx_BKUPRead+0x34>)
 8006cb0:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr
 8006cd0:	40006c00 	.word	0x40006c00

08006cd4 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e034      	b.n	8006d54 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7fd fdfc 	bl	80048fc <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f000 fdd6 	bl	80078c0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	f000 fe4e 	bl	80079c0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6858      	ldr	r0, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	f000 fe79 	bl	8007a28 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	6892      	ldr	r2, [r2, #8]
 8006d3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	6892      	ldr	r2, [r2, #8]
 8006d4a:	f041 0101 	orr.w	r1, r1, #1
 8006d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e01d      	b.n	8006daa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d106      	bne.n	8006d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7fd fcd6 	bl	8004734 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	f000 fab2 	bl	8007304 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0201 	orr.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr

08006de6 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e00:	4013      	ands	r3, r2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10f      	bne.n	8006e26 <HAL_TIM_Base_Stop+0x40>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	f240 4344 	movw	r3, #1092	; 0x444
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d107      	bne.n	8006e26 <HAL_TIM_Base_Stop+0x40>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr

08006e3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr

08006e6e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0201 	bic.w	r2, r2, #1
 8006e84:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a1a      	ldr	r2, [r3, #32]
 8006e8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10f      	bne.n	8006eb6 <HAL_TIM_Base_Stop_IT+0x48>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6a1a      	ldr	r2, [r3, #32]
 8006e9c:	f240 4344 	movw	r3, #1092	; 0x444
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d107      	bne.n	8006eb6 <HAL_TIM_Base_Stop_IT+0x48>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0201 	bic.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr

08006ec2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d122      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d11b      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f06f 0202 	mvn.w	r2, #2
 8006eee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f003 0303 	and.w	r3, r3, #3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f9e1 	bl	80072cc <HAL_TIM_IC_CaptureCallback>
 8006f0a:	e005      	b.n	8006f18 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9d4 	bl	80072ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f9e3 	bl	80072de <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d122      	bne.n	8006f72 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d11b      	bne.n	8006f72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f06f 0204 	mvn.w	r2, #4
 8006f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f9b7 	bl	80072cc <HAL_TIM_IC_CaptureCallback>
 8006f5e:	e005      	b.n	8006f6c <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f9aa 	bl	80072ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9b9 	bl	80072de <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d122      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d11b      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f06f 0208 	mvn.w	r2, #8
 8006f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	f003 0303 	and.w	r3, r3, #3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f98d 	bl	80072cc <HAL_TIM_IC_CaptureCallback>
 8006fb2:	e005      	b.n	8006fc0 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f980 	bl	80072ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f98f 	bl	80072de <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	d122      	bne.n	800701a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f003 0310 	and.w	r3, r3, #16
 8006fde:	2b10      	cmp	r3, #16
 8006fe0:	d11b      	bne.n	800701a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f06f 0210 	mvn.w	r2, #16
 8006fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2208      	movs	r2, #8
 8006ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f963 	bl	80072cc <HAL_TIM_IC_CaptureCallback>
 8007006:	e005      	b.n	8007014 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f956 	bl	80072ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f965 	bl	80072de <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b01      	cmp	r3, #1
 8007026:	d10e      	bne.n	8007046 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b01      	cmp	r3, #1
 8007034:	d107      	bne.n	8007046 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f06f 0201 	mvn.w	r2, #1
 800703e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f931 	bl	80072a8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007050:	2b80      	cmp	r3, #128	; 0x80
 8007052:	d10e      	bne.n	8007072 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705e:	2b80      	cmp	r3, #128	; 0x80
 8007060:	d107      	bne.n	8007072 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800706a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fab9 	bl	80075e4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	d10e      	bne.n	800709e <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	d107      	bne.n	800709e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007096:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f929 	bl	80072f0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d10e      	bne.n	80070ca <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	d107      	bne.n	80070ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f06f 0220 	mvn.w	r2, #32
 80070c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa84 	bl	80075d2 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <HAL_TIM_ConfigClockSource+0x1c>
 80070ea:	2302      	movs	r3, #2
 80070ec:	e0d8      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x1ce>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800710c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007114:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007126:	d052      	beq.n	80071ce <HAL_TIM_ConfigClockSource+0xfc>
 8007128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800712c:	f200 80ae 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x1ba>
 8007130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007134:	d027      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0xb4>
 8007136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713a:	f200 80a7 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x1ba>
 800713e:	2b70      	cmp	r3, #112	; 0x70
 8007140:	d02a      	beq.n	8007198 <HAL_TIM_ConfigClockSource+0xc6>
 8007142:	2b70      	cmp	r3, #112	; 0x70
 8007144:	f200 80a2 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x1ba>
 8007148:	2b60      	cmp	r3, #96	; 0x60
 800714a:	d063      	beq.n	8007214 <HAL_TIM_ConfigClockSource+0x142>
 800714c:	2b60      	cmp	r3, #96	; 0x60
 800714e:	f200 809d 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x1ba>
 8007152:	2b50      	cmp	r3, #80	; 0x50
 8007154:	d04e      	beq.n	80071f4 <HAL_TIM_ConfigClockSource+0x122>
 8007156:	2b50      	cmp	r3, #80	; 0x50
 8007158:	f200 8098 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x1ba>
 800715c:	2b40      	cmp	r3, #64	; 0x40
 800715e:	d069      	beq.n	8007234 <HAL_TIM_ConfigClockSource+0x162>
 8007160:	2b40      	cmp	r3, #64	; 0x40
 8007162:	f200 8093 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x1ba>
 8007166:	2b30      	cmp	r3, #48	; 0x30
 8007168:	f000 8089 	beq.w	800727e <HAL_TIM_ConfigClockSource+0x1ac>
 800716c:	2b30      	cmp	r3, #48	; 0x30
 800716e:	f200 808d 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x1ba>
 8007172:	2b20      	cmp	r3, #32
 8007174:	d07c      	beq.n	8007270 <HAL_TIM_ConfigClockSource+0x19e>
 8007176:	2b20      	cmp	r3, #32
 8007178:	f200 8088 	bhi.w	800728c <HAL_TIM_ConfigClockSource+0x1ba>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d069      	beq.n	8007254 <HAL_TIM_ConfigClockSource+0x182>
 8007180:	2b10      	cmp	r3, #16
 8007182:	d06e      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8007184:	e082      	b.n	800728c <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0207 	bic.w	r2, r2, #7
 8007194:	609a      	str	r2, [r3, #8]
    break;
 8007196:	e07a      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6899      	ldr	r1, [r3, #8]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f000 f9ae 	bl	8007508 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	609a      	str	r2, [r3, #8]
    break;
 80071cc:	e05f      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6899      	ldr	r1, [r3, #8]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f000 f993 	bl	8007508 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071f0:	609a      	str	r2, [r3, #8]
    break;
 80071f2:	e04c      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	6859      	ldr	r1, [r3, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	461a      	mov	r2, r3
 8007202:	f000 f8fd 	bl	8007400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2150      	movs	r1, #80	; 0x50
 800720c:	4618      	mov	r0, r3
 800720e:	f000 f95c 	bl	80074ca <TIM_ITRx_SetConfig>
    break;
 8007212:	e03c      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	6859      	ldr	r1, [r3, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	461a      	mov	r2, r3
 8007222:	f000 f91f 	bl	8007464 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2160      	movs	r1, #96	; 0x60
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f94c 	bl	80074ca <TIM_ITRx_SetConfig>
    break;
 8007232:	e02c      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	6859      	ldr	r1, [r3, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	461a      	mov	r2, r3
 8007242:	f000 f8dd 	bl	8007400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2140      	movs	r1, #64	; 0x40
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f93c 	bl	80074ca <TIM_ITRx_SetConfig>
    break;
 8007252:	e01c      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f935 	bl	80074ca <TIM_ITRx_SetConfig>
    break;
 8007260:	e015      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2110      	movs	r1, #16
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f92e 	bl	80074ca <TIM_ITRx_SetConfig>
    break;
 800726e:	e00e      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2120      	movs	r1, #32
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f927 	bl	80074ca <TIM_ITRx_SetConfig>
    break;
 800727c:	e007      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2130      	movs	r1, #48	; 0x30
 8007284:	4618      	mov	r0, r3
 8007286:	f000 f920 	bl	80074ca <TIM_ITRx_SetConfig>
    break;
 800728a:	e000      	b.n	800728e <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 800728c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr

080072ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr

080072cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	bc80      	pop	{r7}
 80072dc:	4770      	bx	lr

080072de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr
	...

08007304 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a34      	ldr	r2, [pc, #208]	; (80073ec <TIM_Base_SetConfig+0xe8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d013      	beq.n	8007348 <TIM_Base_SetConfig+0x44>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a33      	ldr	r2, [pc, #204]	; (80073f0 <TIM_Base_SetConfig+0xec>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00f      	beq.n	8007348 <TIM_Base_SetConfig+0x44>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732e:	d00b      	beq.n	8007348 <TIM_Base_SetConfig+0x44>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a30      	ldr	r2, [pc, #192]	; (80073f4 <TIM_Base_SetConfig+0xf0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <TIM_Base_SetConfig+0x44>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <TIM_Base_SetConfig+0xf4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_Base_SetConfig+0x44>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a2e      	ldr	r2, [pc, #184]	; (80073fc <TIM_Base_SetConfig+0xf8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d108      	bne.n	800735a <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a23      	ldr	r2, [pc, #140]	; (80073ec <TIM_Base_SetConfig+0xe8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <TIM_Base_SetConfig+0x86>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a22      	ldr	r2, [pc, #136]	; (80073f0 <TIM_Base_SetConfig+0xec>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00f      	beq.n	800738a <TIM_Base_SetConfig+0x86>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007370:	d00b      	beq.n	800738a <TIM_Base_SetConfig+0x86>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a1f      	ldr	r2, [pc, #124]	; (80073f4 <TIM_Base_SetConfig+0xf0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d007      	beq.n	800738a <TIM_Base_SetConfig+0x86>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <TIM_Base_SetConfig+0xf4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d003      	beq.n	800738a <TIM_Base_SetConfig+0x86>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a1d      	ldr	r2, [pc, #116]	; (80073fc <TIM_Base_SetConfig+0xf8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d108      	bne.n	800739c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4313      	orrs	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <TIM_Base_SetConfig+0xe8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_Base_SetConfig+0xd0>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a08      	ldr	r2, [pc, #32]	; (80073f0 <TIM_Base_SetConfig+0xec>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d103      	bne.n	80073dc <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	691a      	ldr	r2, [r3, #16]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	615a      	str	r2, [r3, #20]
}
 80073e2:	bf00      	nop
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr
 80073ec:	40012c00 	.word	0x40012c00
 80073f0:	40013400 	.word	0x40013400
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00

08007400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f023 0201 	bic.w	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f023 030a 	bic.w	r3, r3, #10
 8007444:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	621a      	str	r2, [r3, #32]
}
 800745a:	bf00      	nop
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr

08007464 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	f023 0210 	bic.w	r2, r3, #16
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007496:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	031b      	lsls	r3, r3, #12
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr

080074ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80074e8:	887b      	ldrh	r3, [r7, #2]
 80074ea:	f043 0307 	orr.w	r3, r3, #7
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	609a      	str	r2, [r3, #8]
}
 80074fe:	bf00      	nop
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr

08007508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	021a      	lsls	r2, r3, #8
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	431a      	orrs	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4313      	orrs	r3, r2
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	609a      	str	r2, [r3, #8]
}
 8007540:	bf00      	nop
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr

0800754a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d101      	bne.n	8007562 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800755e:	2302      	movs	r3, #2
 8007560:	e032      	b.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2202      	movs	r2, #2
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007580:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6859      	ldr	r1, [r3, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075a2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6899      	ldr	r1, [r3, #8]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr

080075d2 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr

080075f6 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e03f      	b.n	8007688 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d106      	bne.n	8007622 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7fd f8dd 	bl	80047dc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2224      	movs	r2, #36	; 0x24
 8007626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007638:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f828 	bl	8007690 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691a      	ldr	r2, [r3, #16]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800764e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695a      	ldr	r2, [r3, #20]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800765e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800766e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007690:	b5b0      	push	{r4, r5, r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80076d2:	f023 030c 	bic.w	r3, r3, #12
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	68f9      	ldr	r1, [r7, #12]
 80076dc:	430b      	orrs	r3, r1
 80076de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a6f      	ldr	r2, [pc, #444]	; (80078b8 <UART_SetConfig+0x228>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d16b      	bne.n	80077d8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007700:	f7fe ffce 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 8007704:	4602      	mov	r2, r0
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009a      	lsls	r2, r3, #2
 800770e:	441a      	add	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	4a68      	ldr	r2, [pc, #416]	; (80078bc <UART_SetConfig+0x22c>)
 800771c:	fba2 2303 	umull	r2, r3, r2, r3
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	011c      	lsls	r4, r3, #4
 8007724:	f7fe ffbc 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 8007728:	4602      	mov	r2, r0
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009a      	lsls	r2, r3, #2
 8007732:	441a      	add	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	fbb2 f5f3 	udiv	r5, r2, r3
 800773e:	f7fe ffaf 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 8007742:	4602      	mov	r2, r0
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009a      	lsls	r2, r3, #2
 800774c:	441a      	add	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	fbb2 f3f3 	udiv	r3, r2, r3
 8007758:	4a58      	ldr	r2, [pc, #352]	; (80078bc <UART_SetConfig+0x22c>)
 800775a:	fba2 2303 	umull	r2, r3, r2, r3
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	2264      	movs	r2, #100	; 0x64
 8007762:	fb02 f303 	mul.w	r3, r2, r3
 8007766:	1aeb      	subs	r3, r5, r3
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	3332      	adds	r3, #50	; 0x32
 800776c:	4a53      	ldr	r2, [pc, #332]	; (80078bc <UART_SetConfig+0x22c>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007778:	441c      	add	r4, r3
 800777a:	f7fe ff91 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 800777e:	4602      	mov	r2, r0
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	009a      	lsls	r2, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	fbb2 f5f3 	udiv	r5, r2, r3
 8007794:	f7fe ff84 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 8007798:	4602      	mov	r2, r0
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009a      	lsls	r2, r3, #2
 80077a2:	441a      	add	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ae:	4a43      	ldr	r2, [pc, #268]	; (80078bc <UART_SetConfig+0x22c>)
 80077b0:	fba2 2303 	umull	r2, r3, r2, r3
 80077b4:	095b      	lsrs	r3, r3, #5
 80077b6:	2264      	movs	r2, #100	; 0x64
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	1aeb      	subs	r3, r5, r3
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	3332      	adds	r3, #50	; 0x32
 80077c2:	4a3e      	ldr	r2, [pc, #248]	; (80078bc <UART_SetConfig+0x22c>)
 80077c4:	fba2 2303 	umull	r2, r3, r2, r3
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	f003 020f 	and.w	r2, r3, #15
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4422      	add	r2, r4
 80077d4:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80077d6:	e06a      	b.n	80078ae <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80077d8:	f7fe ff4e 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 80077dc:	4602      	mov	r2, r0
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009a      	lsls	r2, r3, #2
 80077e6:	441a      	add	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f2:	4a32      	ldr	r2, [pc, #200]	; (80078bc <UART_SetConfig+0x22c>)
 80077f4:	fba2 2303 	umull	r2, r3, r2, r3
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	011c      	lsls	r4, r3, #4
 80077fc:	f7fe ff3c 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 8007800:	4602      	mov	r2, r0
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009a      	lsls	r2, r3, #2
 800780a:	441a      	add	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	fbb2 f5f3 	udiv	r5, r2, r3
 8007816:	f7fe ff2f 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 800781a:	4602      	mov	r2, r0
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009a      	lsls	r2, r3, #2
 8007824:	441a      	add	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007830:	4a22      	ldr	r2, [pc, #136]	; (80078bc <UART_SetConfig+0x22c>)
 8007832:	fba2 2303 	umull	r2, r3, r2, r3
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	2264      	movs	r2, #100	; 0x64
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	1aeb      	subs	r3, r5, r3
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	3332      	adds	r3, #50	; 0x32
 8007844:	4a1d      	ldr	r2, [pc, #116]	; (80078bc <UART_SetConfig+0x22c>)
 8007846:	fba2 2303 	umull	r2, r3, r2, r3
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007850:	441c      	add	r4, r3
 8007852:	f7fe ff11 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 8007856:	4602      	mov	r2, r0
 8007858:	4613      	mov	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	009a      	lsls	r2, r3, #2
 8007860:	441a      	add	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	fbb2 f5f3 	udiv	r5, r2, r3
 800786c:	f7fe ff04 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 8007870:	4602      	mov	r2, r0
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009a      	lsls	r2, r3, #2
 800787a:	441a      	add	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	fbb2 f3f3 	udiv	r3, r2, r3
 8007886:	4a0d      	ldr	r2, [pc, #52]	; (80078bc <UART_SetConfig+0x22c>)
 8007888:	fba2 2303 	umull	r2, r3, r2, r3
 800788c:	095b      	lsrs	r3, r3, #5
 800788e:	2264      	movs	r2, #100	; 0x64
 8007890:	fb02 f303 	mul.w	r3, r2, r3
 8007894:	1aeb      	subs	r3, r5, r3
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	3332      	adds	r3, #50	; 0x32
 800789a:	4a08      	ldr	r2, [pc, #32]	; (80078bc <UART_SetConfig+0x22c>)
 800789c:	fba2 2303 	umull	r2, r3, r2, r3
 80078a0:	095b      	lsrs	r3, r3, #5
 80078a2:	f003 020f 	and.w	r2, r3, #15
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4422      	add	r2, r4
 80078ac:	609a      	str	r2, [r3, #8]
}
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bdb0      	pop	{r4, r5, r7, pc}
 80078b6:	bf00      	nop
 80078b8:	40013800 	.word	0x40013800
 80078bc:	51eb851f 	.word	0x51eb851f

080078c0 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	6812      	ldr	r2, [r2, #0]
 80078d8:	f023 0101 	bic.w	r1, r3, #1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	d132      	bne.n	8007950 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078f4:	4b31      	ldr	r3, [pc, #196]	; (80079bc <FSMC_NORSRAM_Init+0xfc>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	6851      	ldr	r1, [r2, #4]
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	6892      	ldr	r2, [r2, #8]
 8007900:	4311      	orrs	r1, r2
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	68d2      	ldr	r2, [r2, #12]
 8007906:	4311      	orrs	r1, r2
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	6912      	ldr	r2, [r2, #16]
 800790c:	4311      	orrs	r1, r2
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	6952      	ldr	r2, [r2, #20]
 8007912:	4311      	orrs	r1, r2
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	6992      	ldr	r2, [r2, #24]
 8007918:	4311      	orrs	r1, r2
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	69d2      	ldr	r2, [r2, #28]
 800791e:	4311      	orrs	r1, r2
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	6a12      	ldr	r2, [r2, #32]
 8007924:	4311      	orrs	r1, r2
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800792a:	4311      	orrs	r1, r2
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007930:	4311      	orrs	r1, r2
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007936:	4311      	orrs	r1, r2
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800793c:	430a      	orrs	r2, r1
 800793e:	4313      	orrs	r3, r2
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800794e:	e02f      	b.n	80079b0 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800795a:	4b18      	ldr	r3, [pc, #96]	; (80079bc <FSMC_NORSRAM_Init+0xfc>)
 800795c:	4013      	ands	r3, r2
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	6851      	ldr	r1, [r2, #4]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	6892      	ldr	r2, [r2, #8]
 8007966:	4311      	orrs	r1, r2
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	68d2      	ldr	r2, [r2, #12]
 800796c:	4311      	orrs	r1, r2
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	6912      	ldr	r2, [r2, #16]
 8007972:	4311      	orrs	r1, r2
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	6952      	ldr	r2, [r2, #20]
 8007978:	4311      	orrs	r1, r2
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	6992      	ldr	r2, [r2, #24]
 800797e:	4311      	orrs	r1, r2
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	69d2      	ldr	r2, [r2, #28]
 8007984:	4311      	orrs	r1, r2
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	6a12      	ldr	r2, [r2, #32]
 800798a:	4311      	orrs	r1, r2
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007990:	4311      	orrs	r1, r2
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007996:	4311      	orrs	r1, r2
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800799c:	4311      	orrs	r1, r2
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079a2:	4311      	orrs	r1, r2
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	4319      	orrs	r1, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr
 80079bc:	fff70081 	.word	0xfff70081

080079c0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	431a      	orrs	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	431a      	orrs	r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	041b      	lsls	r3, r3, #16
 80079f4:	431a      	orrs	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	051b      	lsls	r3, r3, #20
 80079fe:	431a      	orrs	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	3b02      	subs	r3, #2
 8007a06:	061b      	lsls	r3, r3, #24
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	3201      	adds	r2, #1
 8007a14:	4319      	orrs	r1, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bc80      	pop	{r7}
 8007a26:	4770      	bx	lr

08007a28 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a3c:	d11d      	bne.n	8007a7a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a46:	4b13      	ldr	r3, [pc, #76]	; (8007a94 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	6811      	ldr	r1, [r2, #0]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	6852      	ldr	r2, [r2, #4]
 8007a52:	0112      	lsls	r2, r2, #4
 8007a54:	4311      	orrs	r1, r2
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	6892      	ldr	r2, [r2, #8]
 8007a5a:	0212      	lsls	r2, r2, #8
 8007a5c:	4311      	orrs	r1, r2
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	6992      	ldr	r2, [r2, #24]
 8007a62:	4311      	orrs	r1, r2
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	68d2      	ldr	r2, [r2, #12]
 8007a68:	0412      	lsls	r2, r2, #16
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	ea43 0102 	orr.w	r1, r3, r2
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a78:	e005      	b.n	8007a86 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	cff00000 	.word	0xcff00000

08007a98 <__libc_init_array>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	4d0c      	ldr	r5, [pc, #48]	; (8007ad0 <__libc_init_array+0x38>)
 8007a9e:	4c0d      	ldr	r4, [pc, #52]	; (8007ad4 <__libc_init_array+0x3c>)
 8007aa0:	1b64      	subs	r4, r4, r5
 8007aa2:	10a4      	asrs	r4, r4, #2
 8007aa4:	42a6      	cmp	r6, r4
 8007aa6:	d109      	bne.n	8007abc <__libc_init_array+0x24>
 8007aa8:	f001 f8c8 	bl	8008c3c <_init>
 8007aac:	2600      	movs	r6, #0
 8007aae:	4d0a      	ldr	r5, [pc, #40]	; (8007ad8 <__libc_init_array+0x40>)
 8007ab0:	4c0a      	ldr	r4, [pc, #40]	; (8007adc <__libc_init_array+0x44>)
 8007ab2:	1b64      	subs	r4, r4, r5
 8007ab4:	10a4      	asrs	r4, r4, #2
 8007ab6:	42a6      	cmp	r6, r4
 8007ab8:	d105      	bne.n	8007ac6 <__libc_init_array+0x2e>
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac0:	4798      	blx	r3
 8007ac2:	3601      	adds	r6, #1
 8007ac4:	e7ee      	b.n	8007aa4 <__libc_init_array+0xc>
 8007ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aca:	4798      	blx	r3
 8007acc:	3601      	adds	r6, #1
 8007ace:	e7f2      	b.n	8007ab6 <__libc_init_array+0x1e>
 8007ad0:	0802c940 	.word	0x0802c940
 8007ad4:	0802c940 	.word	0x0802c940
 8007ad8:	0802c940 	.word	0x0802c940
 8007adc:	0802c948 	.word	0x0802c948

08007ae0 <memset>:
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	4402      	add	r2, r0
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d100      	bne.n	8007aea <memset+0xa>
 8007ae8:	4770      	bx	lr
 8007aea:	f803 1b01 	strb.w	r1, [r3], #1
 8007aee:	e7f9      	b.n	8007ae4 <memset+0x4>

08007af0 <register_fini>:
 8007af0:	4b02      	ldr	r3, [pc, #8]	; (8007afc <register_fini+0xc>)
 8007af2:	b113      	cbz	r3, 8007afa <register_fini+0xa>
 8007af4:	4802      	ldr	r0, [pc, #8]	; (8007b00 <register_fini+0x10>)
 8007af6:	f000 b805 	b.w	8007b04 <atexit>
 8007afa:	4770      	bx	lr
 8007afc:	00000000 	.word	0x00000000
 8007b00:	08007b11 	.word	0x08007b11

08007b04 <atexit>:
 8007b04:	2300      	movs	r3, #0
 8007b06:	4601      	mov	r1, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 b816 	b.w	8007b3c <__register_exitproc>

08007b10 <__libc_fini_array>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d07      	ldr	r5, [pc, #28]	; (8007b30 <__libc_fini_array+0x20>)
 8007b14:	4c07      	ldr	r4, [pc, #28]	; (8007b34 <__libc_fini_array+0x24>)
 8007b16:	1b64      	subs	r4, r4, r5
 8007b18:	10a4      	asrs	r4, r4, #2
 8007b1a:	b91c      	cbnz	r4, 8007b24 <__libc_fini_array+0x14>
 8007b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b20:	f001 b892 	b.w	8008c48 <_fini>
 8007b24:	3c01      	subs	r4, #1
 8007b26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007b2a:	4798      	blx	r3
 8007b2c:	e7f5      	b.n	8007b1a <__libc_fini_array+0xa>
 8007b2e:	bf00      	nop
 8007b30:	0802c948 	.word	0x0802c948
 8007b34:	0802c94c 	.word	0x0802c94c

08007b38 <__retarget_lock_acquire_recursive>:
 8007b38:	4770      	bx	lr

08007b3a <__retarget_lock_release_recursive>:
 8007b3a:	4770      	bx	lr

08007b3c <__register_exitproc>:
 8007b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b40:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007bb8 <__register_exitproc+0x7c>
 8007b44:	4606      	mov	r6, r0
 8007b46:	f8da 0000 	ldr.w	r0, [sl]
 8007b4a:	4698      	mov	r8, r3
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	4691      	mov	r9, r2
 8007b50:	f7ff fff2 	bl	8007b38 <__retarget_lock_acquire_recursive>
 8007b54:	4b19      	ldr	r3, [pc, #100]	; (8007bbc <__register_exitproc+0x80>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8007b5c:	b91c      	cbnz	r4, 8007b66 <__register_exitproc+0x2a>
 8007b5e:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8007b62:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8007b66:	6865      	ldr	r5, [r4, #4]
 8007b68:	f8da 0000 	ldr.w	r0, [sl]
 8007b6c:	2d1f      	cmp	r5, #31
 8007b6e:	dd05      	ble.n	8007b7c <__register_exitproc+0x40>
 8007b70:	f7ff ffe3 	bl	8007b3a <__retarget_lock_release_recursive>
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295
 8007b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b7c:	b19e      	cbz	r6, 8007ba6 <__register_exitproc+0x6a>
 8007b7e:	2201      	movs	r2, #1
 8007b80:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8007b84:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8007b88:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8007b8c:	40aa      	lsls	r2, r5
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8007b94:	2e02      	cmp	r6, #2
 8007b96:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8007b9a:	bf02      	ittt	eq
 8007b9c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8007ba0:	4313      	orreq	r3, r2
 8007ba2:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8007ba6:	1c6b      	adds	r3, r5, #1
 8007ba8:	3502      	adds	r5, #2
 8007baa:	6063      	str	r3, [r4, #4]
 8007bac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8007bb0:	f7ff ffc3 	bl	8007b3a <__retarget_lock_release_recursive>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e7df      	b.n	8007b78 <__register_exitproc+0x3c>
 8007bb8:	20000470 	.word	0x20000470
 8007bbc:	0802c758 	.word	0x0802c758

08007bc0 <cos>:
 8007bc0:	b530      	push	{r4, r5, lr}
 8007bc2:	4a20      	ldr	r2, [pc, #128]	; (8007c44 <cos+0x84>)
 8007bc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	b087      	sub	sp, #28
 8007bcc:	dc06      	bgt.n	8007bdc <cos+0x1c>
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	b007      	add	sp, #28
 8007bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bd8:	f000 ba76 	b.w	80080c8 <__kernel_cos>
 8007bdc:	4a1a      	ldr	r2, [pc, #104]	; (8007c48 <cos+0x88>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	dd05      	ble.n	8007bee <cos+0x2e>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	f7f8 fb2b 	bl	8000240 <__aeabi_dsub>
 8007bea:	b007      	add	sp, #28
 8007bec:	bd30      	pop	{r4, r5, pc}
 8007bee:	aa02      	add	r2, sp, #8
 8007bf0:	f000 f872 	bl	8007cd8 <__ieee754_rem_pio2>
 8007bf4:	f000 0003 	and.w	r0, r0, #3
 8007bf8:	2801      	cmp	r0, #1
 8007bfa:	d009      	beq.n	8007c10 <cos+0x50>
 8007bfc:	2802      	cmp	r0, #2
 8007bfe:	d011      	beq.n	8007c24 <cos+0x64>
 8007c00:	b9b8      	cbnz	r0, 8007c32 <cos+0x72>
 8007c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c0a:	f000 fa5d 	bl	80080c8 <__kernel_cos>
 8007c0e:	e7ec      	b.n	8007bea <cos+0x2a>
 8007c10:	9000      	str	r0, [sp, #0]
 8007c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c1a:	f000 fe55 	bl	80088c8 <__kernel_sin>
 8007c1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007c22:	e7e2      	b.n	8007bea <cos+0x2a>
 8007c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2c:	f000 fa4c 	bl	80080c8 <__kernel_cos>
 8007c30:	e7f5      	b.n	8007c1e <cos+0x5e>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c3e:	f000 fe43 	bl	80088c8 <__kernel_sin>
 8007c42:	e7d2      	b.n	8007bea <cos+0x2a>
 8007c44:	3fe921fb 	.word	0x3fe921fb
 8007c48:	7fefffff 	.word	0x7fefffff

08007c4c <sin>:
 8007c4c:	b530      	push	{r4, r5, lr}
 8007c4e:	4a20      	ldr	r2, [pc, #128]	; (8007cd0 <sin+0x84>)
 8007c50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c54:	4293      	cmp	r3, r2
 8007c56:	b087      	sub	sp, #28
 8007c58:	dc06      	bgt.n	8007c68 <sin+0x1c>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	2300      	movs	r3, #0
 8007c62:	f000 fe31 	bl	80088c8 <__kernel_sin>
 8007c66:	e006      	b.n	8007c76 <sin+0x2a>
 8007c68:	4a1a      	ldr	r2, [pc, #104]	; (8007cd4 <sin+0x88>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	dd05      	ble.n	8007c7a <sin+0x2e>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	f7f8 fae5 	bl	8000240 <__aeabi_dsub>
 8007c76:	b007      	add	sp, #28
 8007c78:	bd30      	pop	{r4, r5, pc}
 8007c7a:	aa02      	add	r2, sp, #8
 8007c7c:	f000 f82c 	bl	8007cd8 <__ieee754_rem_pio2>
 8007c80:	f000 0003 	and.w	r0, r0, #3
 8007c84:	2801      	cmp	r0, #1
 8007c86:	d009      	beq.n	8007c9c <sin+0x50>
 8007c88:	2802      	cmp	r0, #2
 8007c8a:	d00e      	beq.n	8007caa <sin+0x5e>
 8007c8c:	b9c0      	cbnz	r0, 8007cc0 <sin+0x74>
 8007c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c92:	2301      	movs	r3, #1
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c9a:	e7e2      	b.n	8007c62 <sin+0x16>
 8007c9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca4:	f000 fa10 	bl	80080c8 <__kernel_cos>
 8007ca8:	e7e5      	b.n	8007c76 <sin+0x2a>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb6:	f000 fe07 	bl	80088c8 <__kernel_sin>
 8007cba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007cbe:	e7da      	b.n	8007c76 <sin+0x2a>
 8007cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc8:	f000 f9fe 	bl	80080c8 <__kernel_cos>
 8007ccc:	e7f5      	b.n	8007cba <sin+0x6e>
 8007cce:	bf00      	nop
 8007cd0:	3fe921fb 	.word	0x3fe921fb
 8007cd4:	7fefffff 	.word	0x7fefffff

08007cd8 <__ieee754_rem_pio2>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	4614      	mov	r4, r2
 8007cde:	4ac4      	ldr	r2, [pc, #784]	; (8007ff0 <__ieee754_rem_pio2+0x318>)
 8007ce0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007ce4:	b08d      	sub	sp, #52	; 0x34
 8007ce6:	4592      	cmp	sl, r2
 8007ce8:	9104      	str	r1, [sp, #16]
 8007cea:	dc07      	bgt.n	8007cfc <__ieee754_rem_pio2+0x24>
 8007cec:	2200      	movs	r2, #0
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e9c4 0100 	strd	r0, r1, [r4]
 8007cf4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007cf8:	2500      	movs	r5, #0
 8007cfa:	e024      	b.n	8007d46 <__ieee754_rem_pio2+0x6e>
 8007cfc:	4abd      	ldr	r2, [pc, #756]	; (8007ff4 <__ieee754_rem_pio2+0x31c>)
 8007cfe:	4592      	cmp	sl, r2
 8007d00:	dc72      	bgt.n	8007de8 <__ieee754_rem_pio2+0x110>
 8007d02:	9b04      	ldr	r3, [sp, #16]
 8007d04:	4dbc      	ldr	r5, [pc, #752]	; (8007ff8 <__ieee754_rem_pio2+0x320>)
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	a3ab      	add	r3, pc, #684	; (adr r3, 8007fb8 <__ieee754_rem_pio2+0x2e0>)
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	dd36      	ble.n	8007d7e <__ieee754_rem_pio2+0xa6>
 8007d10:	f7f8 fa96 	bl	8000240 <__aeabi_dsub>
 8007d14:	45aa      	cmp	sl, r5
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	d018      	beq.n	8007d4e <__ieee754_rem_pio2+0x76>
 8007d1c:	a3a8      	add	r3, pc, #672	; (adr r3, 8007fc0 <__ieee754_rem_pio2+0x2e8>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	f7f8 fa8d 	bl	8000240 <__aeabi_dsub>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	e9c4 2300 	strd	r2, r3, [r4]
 8007d30:	4639      	mov	r1, r7
 8007d32:	f7f8 fa85 	bl	8000240 <__aeabi_dsub>
 8007d36:	a3a2      	add	r3, pc, #648	; (adr r3, 8007fc0 <__ieee754_rem_pio2+0x2e8>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f7f8 fa80 	bl	8000240 <__aeabi_dsub>
 8007d40:	2501      	movs	r5, #1
 8007d42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d46:	4628      	mov	r0, r5
 8007d48:	b00d      	add	sp, #52	; 0x34
 8007d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4e:	a39e      	add	r3, pc, #632	; (adr r3, 8007fc8 <__ieee754_rem_pio2+0x2f0>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f7f8 fa74 	bl	8000240 <__aeabi_dsub>
 8007d58:	a39d      	add	r3, pc, #628	; (adr r3, 8007fd0 <__ieee754_rem_pio2+0x2f8>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460f      	mov	r7, r1
 8007d62:	f7f8 fa6d 	bl	8000240 <__aeabi_dsub>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	e9c4 2300 	strd	r2, r3, [r4]
 8007d70:	4639      	mov	r1, r7
 8007d72:	f7f8 fa65 	bl	8000240 <__aeabi_dsub>
 8007d76:	a396      	add	r3, pc, #600	; (adr r3, 8007fd0 <__ieee754_rem_pio2+0x2f8>)
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	e7de      	b.n	8007d3c <__ieee754_rem_pio2+0x64>
 8007d7e:	f7f8 fa61 	bl	8000244 <__adddf3>
 8007d82:	45aa      	cmp	sl, r5
 8007d84:	4606      	mov	r6, r0
 8007d86:	460f      	mov	r7, r1
 8007d88:	d016      	beq.n	8007db8 <__ieee754_rem_pio2+0xe0>
 8007d8a:	a38d      	add	r3, pc, #564	; (adr r3, 8007fc0 <__ieee754_rem_pio2+0x2e8>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fa58 	bl	8000244 <__adddf3>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4630      	mov	r0, r6
 8007d9a:	e9c4 2300 	strd	r2, r3, [r4]
 8007d9e:	4639      	mov	r1, r7
 8007da0:	f7f8 fa4e 	bl	8000240 <__aeabi_dsub>
 8007da4:	a386      	add	r3, pc, #536	; (adr r3, 8007fc0 <__ieee754_rem_pio2+0x2e8>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 fa4b 	bl	8000244 <__adddf3>
 8007dae:	f04f 35ff 	mov.w	r5, #4294967295
 8007db2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007db6:	e7c6      	b.n	8007d46 <__ieee754_rem_pio2+0x6e>
 8007db8:	a383      	add	r3, pc, #524	; (adr r3, 8007fc8 <__ieee754_rem_pio2+0x2f0>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f7f8 fa41 	bl	8000244 <__adddf3>
 8007dc2:	a383      	add	r3, pc, #524	; (adr r3, 8007fd0 <__ieee754_rem_pio2+0x2f8>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	4606      	mov	r6, r0
 8007dca:	460f      	mov	r7, r1
 8007dcc:	f7f8 fa3a 	bl	8000244 <__adddf3>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	e9c4 2300 	strd	r2, r3, [r4]
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fa30 	bl	8000240 <__aeabi_dsub>
 8007de0:	a37b      	add	r3, pc, #492	; (adr r3, 8007fd0 <__ieee754_rem_pio2+0x2f8>)
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	e7e0      	b.n	8007daa <__ieee754_rem_pio2+0xd2>
 8007de8:	4a84      	ldr	r2, [pc, #528]	; (8007ffc <__ieee754_rem_pio2+0x324>)
 8007dea:	4592      	cmp	sl, r2
 8007dec:	f300 80d5 	bgt.w	8007f9a <__ieee754_rem_pio2+0x2c2>
 8007df0:	f000 fe20 	bl	8008a34 <fabs>
 8007df4:	a378      	add	r3, pc, #480	; (adr r3, 8007fd8 <__ieee754_rem_pio2+0x300>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	460f      	mov	r7, r1
 8007dfe:	f7f8 fbd7 	bl	80005b0 <__aeabi_dmul>
 8007e02:	2200      	movs	r2, #0
 8007e04:	4b7e      	ldr	r3, [pc, #504]	; (8008000 <__ieee754_rem_pio2+0x328>)
 8007e06:	f7f8 fa1d 	bl	8000244 <__adddf3>
 8007e0a:	f7f8 fe6b 	bl	8000ae4 <__aeabi_d2iz>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	f7f8 fb64 	bl	80004dc <__aeabi_i2d>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e1c:	a366      	add	r3, pc, #408	; (adr r3, 8007fb8 <__ieee754_rem_pio2+0x2e0>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f7f8 fbc5 	bl	80005b0 <__aeabi_dmul>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	f7f8 fa07 	bl	8000240 <__aeabi_dsub>
 8007e32:	a363      	add	r3, pc, #396	; (adr r3, 8007fc0 <__ieee754_rem_pio2+0x2e8>)
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4689      	mov	r9, r1
 8007e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e40:	f7f8 fbb6 	bl	80005b0 <__aeabi_dmul>
 8007e44:	2d1f      	cmp	r5, #31
 8007e46:	4606      	mov	r6, r0
 8007e48:	460f      	mov	r7, r1
 8007e4a:	dc0e      	bgt.n	8007e6a <__ieee754_rem_pio2+0x192>
 8007e4c:	4b6d      	ldr	r3, [pc, #436]	; (8008004 <__ieee754_rem_pio2+0x32c>)
 8007e4e:	1e6a      	subs	r2, r5, #1
 8007e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e54:	4553      	cmp	r3, sl
 8007e56:	d008      	beq.n	8007e6a <__ieee754_rem_pio2+0x192>
 8007e58:	4632      	mov	r2, r6
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	4649      	mov	r1, r9
 8007e60:	f7f8 f9ee 	bl	8000240 <__aeabi_dsub>
 8007e64:	e9c4 0100 	strd	r0, r1, [r4]
 8007e68:	e013      	b.n	8007e92 <__ieee754_rem_pio2+0x1ba>
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	4640      	mov	r0, r8
 8007e70:	4649      	mov	r1, r9
 8007e72:	f7f8 f9e5 	bl	8000240 <__aeabi_dsub>
 8007e76:	ea4f 532a 	mov.w	r3, sl, asr #20
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e80:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8007e84:	f1ba 0f10 	cmp.w	sl, #16
 8007e88:	dc1f      	bgt.n	8007eca <__ieee754_rem_pio2+0x1f2>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	e9c4 2300 	strd	r2, r3, [r4]
 8007e92:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8007e96:	4640      	mov	r0, r8
 8007e98:	4653      	mov	r3, sl
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	f7f8 f9d0 	bl	8000240 <__aeabi_dsub>
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	f7f8 f9cc 	bl	8000240 <__aeabi_dsub>
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007eae:	9904      	ldr	r1, [sp, #16]
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	2900      	cmp	r1, #0
 8007eb4:	f6bf af47 	bge.w	8007d46 <__ieee754_rem_pio2+0x6e>
 8007eb8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8007ebc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007ec0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ec4:	60e3      	str	r3, [r4, #12]
 8007ec6:	426d      	negs	r5, r5
 8007ec8:	e73d      	b.n	8007d46 <__ieee754_rem_pio2+0x6e>
 8007eca:	a33f      	add	r3, pc, #252	; (adr r3, 8007fc8 <__ieee754_rem_pio2+0x2f0>)
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed4:	f7f8 fb6c 	bl	80005b0 <__aeabi_dmul>
 8007ed8:	4606      	mov	r6, r0
 8007eda:	460f      	mov	r7, r1
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 f9ac 	bl	8000240 <__aeabi_dsub>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4682      	mov	sl, r0
 8007eee:	468b      	mov	fp, r1
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 f9a4 	bl	8000240 <__aeabi_dsub>
 8007ef8:	4632      	mov	r2, r6
 8007efa:	463b      	mov	r3, r7
 8007efc:	f7f8 f9a0 	bl	8000240 <__aeabi_dsub>
 8007f00:	a333      	add	r3, pc, #204	; (adr r3, 8007fd0 <__ieee754_rem_pio2+0x2f8>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	4606      	mov	r6, r0
 8007f08:	460f      	mov	r7, r1
 8007f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f0e:	f7f8 fb4f 	bl	80005b0 <__aeabi_dmul>
 8007f12:	4632      	mov	r2, r6
 8007f14:	463b      	mov	r3, r7
 8007f16:	f7f8 f993 	bl	8000240 <__aeabi_dsub>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4606      	mov	r6, r0
 8007f20:	460f      	mov	r7, r1
 8007f22:	4650      	mov	r0, sl
 8007f24:	4659      	mov	r1, fp
 8007f26:	f7f8 f98b 	bl	8000240 <__aeabi_dsub>
 8007f2a:	9a05      	ldr	r2, [sp, #20]
 8007f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b31      	cmp	r3, #49	; 0x31
 8007f34:	dc06      	bgt.n	8007f44 <__ieee754_rem_pio2+0x26c>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	46d0      	mov	r8, sl
 8007f3c:	46d9      	mov	r9, fp
 8007f3e:	e9c4 2300 	strd	r2, r3, [r4]
 8007f42:	e7a6      	b.n	8007e92 <__ieee754_rem_pio2+0x1ba>
 8007f44:	a326      	add	r3, pc, #152	; (adr r3, 8007fe0 <__ieee754_rem_pio2+0x308>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f4e:	f7f8 fb2f 	bl	80005b0 <__aeabi_dmul>
 8007f52:	4606      	mov	r6, r0
 8007f54:	460f      	mov	r7, r1
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4650      	mov	r0, sl
 8007f5c:	4659      	mov	r1, fp
 8007f5e:	f7f8 f96f 	bl	8000240 <__aeabi_dsub>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4680      	mov	r8, r0
 8007f68:	4689      	mov	r9, r1
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	4659      	mov	r1, fp
 8007f6e:	f7f8 f967 	bl	8000240 <__aeabi_dsub>
 8007f72:	4632      	mov	r2, r6
 8007f74:	463b      	mov	r3, r7
 8007f76:	f7f8 f963 	bl	8000240 <__aeabi_dsub>
 8007f7a:	a31b      	add	r3, pc, #108	; (adr r3, 8007fe8 <__ieee754_rem_pio2+0x310>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	4606      	mov	r6, r0
 8007f82:	460f      	mov	r7, r1
 8007f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f88:	f7f8 fb12 	bl	80005b0 <__aeabi_dmul>
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	463b      	mov	r3, r7
 8007f90:	f7f8 f956 	bl	8000240 <__aeabi_dsub>
 8007f94:	4606      	mov	r6, r0
 8007f96:	460f      	mov	r7, r1
 8007f98:	e75e      	b.n	8007e58 <__ieee754_rem_pio2+0x180>
 8007f9a:	4a1b      	ldr	r2, [pc, #108]	; (8008008 <__ieee754_rem_pio2+0x330>)
 8007f9c:	4592      	cmp	sl, r2
 8007f9e:	dd35      	ble.n	800800c <__ieee754_rem_pio2+0x334>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	f7f8 f94c 	bl	8000240 <__aeabi_dsub>
 8007fa8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007fac:	e9c4 0100 	strd	r0, r1, [r4]
 8007fb0:	e6a2      	b.n	8007cf8 <__ieee754_rem_pio2+0x20>
 8007fb2:	bf00      	nop
 8007fb4:	f3af 8000 	nop.w
 8007fb8:	54400000 	.word	0x54400000
 8007fbc:	3ff921fb 	.word	0x3ff921fb
 8007fc0:	1a626331 	.word	0x1a626331
 8007fc4:	3dd0b461 	.word	0x3dd0b461
 8007fc8:	1a600000 	.word	0x1a600000
 8007fcc:	3dd0b461 	.word	0x3dd0b461
 8007fd0:	2e037073 	.word	0x2e037073
 8007fd4:	3ba3198a 	.word	0x3ba3198a
 8007fd8:	6dc9c883 	.word	0x6dc9c883
 8007fdc:	3fe45f30 	.word	0x3fe45f30
 8007fe0:	2e000000 	.word	0x2e000000
 8007fe4:	3ba3198a 	.word	0x3ba3198a
 8007fe8:	252049c1 	.word	0x252049c1
 8007fec:	397b839a 	.word	0x397b839a
 8007ff0:	3fe921fb 	.word	0x3fe921fb
 8007ff4:	4002d97b 	.word	0x4002d97b
 8007ff8:	3ff921fb 	.word	0x3ff921fb
 8007ffc:	413921fb 	.word	0x413921fb
 8008000:	3fe00000 	.word	0x3fe00000
 8008004:	0802c75c 	.word	0x0802c75c
 8008008:	7fefffff 	.word	0x7fefffff
 800800c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008010:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008014:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008018:	460f      	mov	r7, r1
 800801a:	4606      	mov	r6, r0
 800801c:	f7f8 fd62 	bl	8000ae4 <__aeabi_d2iz>
 8008020:	f7f8 fa5c 	bl	80004dc <__aeabi_i2d>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008030:	f7f8 f906 	bl	8000240 <__aeabi_dsub>
 8008034:	2200      	movs	r2, #0
 8008036:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <__ieee754_rem_pio2+0x3e8>)
 8008038:	f7f8 faba 	bl	80005b0 <__aeabi_dmul>
 800803c:	460f      	mov	r7, r1
 800803e:	4606      	mov	r6, r0
 8008040:	f7f8 fd50 	bl	8000ae4 <__aeabi_d2iz>
 8008044:	f7f8 fa4a 	bl	80004dc <__aeabi_i2d>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4630      	mov	r0, r6
 800804e:	4639      	mov	r1, r7
 8008050:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008054:	f7f8 f8f4 	bl	8000240 <__aeabi_dsub>
 8008058:	2200      	movs	r2, #0
 800805a:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <__ieee754_rem_pio2+0x3e8>)
 800805c:	f7f8 faa8 	bl	80005b0 <__aeabi_dmul>
 8008060:	f04f 0803 	mov.w	r8, #3
 8008064:	2600      	movs	r6, #0
 8008066:	2700      	movs	r7, #0
 8008068:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800806c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008070:	4632      	mov	r2, r6
 8008072:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008076:	463b      	mov	r3, r7
 8008078:	46c2      	mov	sl, r8
 800807a:	f108 38ff 	add.w	r8, r8, #4294967295
 800807e:	f7f8 fcff 	bl	8000a80 <__aeabi_dcmpeq>
 8008082:	2800      	cmp	r0, #0
 8008084:	d1f4      	bne.n	8008070 <__ieee754_rem_pio2+0x398>
 8008086:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <__ieee754_rem_pio2+0x3ec>)
 8008088:	462a      	mov	r2, r5
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	2302      	movs	r3, #2
 800808e:	4621      	mov	r1, r4
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	a806      	add	r0, sp, #24
 8008094:	4653      	mov	r3, sl
 8008096:	f000 f8d5 	bl	8008244 <__kernel_rem_pio2>
 800809a:	9b04      	ldr	r3, [sp, #16]
 800809c:	4605      	mov	r5, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f6bf ae51 	bge.w	8007d46 <__ieee754_rem_pio2+0x6e>
 80080a4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80080a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080ac:	e9c4 2300 	strd	r2, r3, [r4]
 80080b0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80080b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80080bc:	e703      	b.n	8007ec6 <__ieee754_rem_pio2+0x1ee>
 80080be:	bf00      	nop
 80080c0:	41700000 	.word	0x41700000
 80080c4:	0802c7dc 	.word	0x0802c7dc

080080c8 <__kernel_cos>:
 80080c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80080d0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80080d4:	4680      	mov	r8, r0
 80080d6:	460f      	mov	r7, r1
 80080d8:	e9cd 2300 	strd	r2, r3, [sp]
 80080dc:	da04      	bge.n	80080e8 <__kernel_cos+0x20>
 80080de:	f7f8 fd01 	bl	8000ae4 <__aeabi_d2iz>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f000 8086 	beq.w	80081f4 <__kernel_cos+0x12c>
 80080e8:	4642      	mov	r2, r8
 80080ea:	463b      	mov	r3, r7
 80080ec:	4640      	mov	r0, r8
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 fa5e 	bl	80005b0 <__aeabi_dmul>
 80080f4:	2200      	movs	r2, #0
 80080f6:	4b4e      	ldr	r3, [pc, #312]	; (8008230 <__kernel_cos+0x168>)
 80080f8:	4604      	mov	r4, r0
 80080fa:	460d      	mov	r5, r1
 80080fc:	f7f8 fa58 	bl	80005b0 <__aeabi_dmul>
 8008100:	a33f      	add	r3, pc, #252	; (adr r3, 8008200 <__kernel_cos+0x138>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	4682      	mov	sl, r0
 8008108:	468b      	mov	fp, r1
 800810a:	4620      	mov	r0, r4
 800810c:	4629      	mov	r1, r5
 800810e:	f7f8 fa4f 	bl	80005b0 <__aeabi_dmul>
 8008112:	a33d      	add	r3, pc, #244	; (adr r3, 8008208 <__kernel_cos+0x140>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 f894 	bl	8000244 <__adddf3>
 800811c:	4622      	mov	r2, r4
 800811e:	462b      	mov	r3, r5
 8008120:	f7f8 fa46 	bl	80005b0 <__aeabi_dmul>
 8008124:	a33a      	add	r3, pc, #232	; (adr r3, 8008210 <__kernel_cos+0x148>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 f889 	bl	8000240 <__aeabi_dsub>
 800812e:	4622      	mov	r2, r4
 8008130:	462b      	mov	r3, r5
 8008132:	f7f8 fa3d 	bl	80005b0 <__aeabi_dmul>
 8008136:	a338      	add	r3, pc, #224	; (adr r3, 8008218 <__kernel_cos+0x150>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f882 	bl	8000244 <__adddf3>
 8008140:	4622      	mov	r2, r4
 8008142:	462b      	mov	r3, r5
 8008144:	f7f8 fa34 	bl	80005b0 <__aeabi_dmul>
 8008148:	a335      	add	r3, pc, #212	; (adr r3, 8008220 <__kernel_cos+0x158>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 f877 	bl	8000240 <__aeabi_dsub>
 8008152:	4622      	mov	r2, r4
 8008154:	462b      	mov	r3, r5
 8008156:	f7f8 fa2b 	bl	80005b0 <__aeabi_dmul>
 800815a:	a333      	add	r3, pc, #204	; (adr r3, 8008228 <__kernel_cos+0x160>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f7f8 f870 	bl	8000244 <__adddf3>
 8008164:	4622      	mov	r2, r4
 8008166:	462b      	mov	r3, r5
 8008168:	f7f8 fa22 	bl	80005b0 <__aeabi_dmul>
 800816c:	4622      	mov	r2, r4
 800816e:	462b      	mov	r3, r5
 8008170:	f7f8 fa1e 	bl	80005b0 <__aeabi_dmul>
 8008174:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008178:	4604      	mov	r4, r0
 800817a:	460d      	mov	r5, r1
 800817c:	4640      	mov	r0, r8
 800817e:	4639      	mov	r1, r7
 8008180:	f7f8 fa16 	bl	80005b0 <__aeabi_dmul>
 8008184:	460b      	mov	r3, r1
 8008186:	4602      	mov	r2, r0
 8008188:	4629      	mov	r1, r5
 800818a:	4620      	mov	r0, r4
 800818c:	f7f8 f858 	bl	8000240 <__aeabi_dsub>
 8008190:	4b28      	ldr	r3, [pc, #160]	; (8008234 <__kernel_cos+0x16c>)
 8008192:	4680      	mov	r8, r0
 8008194:	429e      	cmp	r6, r3
 8008196:	4689      	mov	r9, r1
 8008198:	dc0e      	bgt.n	80081b8 <__kernel_cos+0xf0>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4650      	mov	r0, sl
 80081a0:	4659      	mov	r1, fp
 80081a2:	f7f8 f84d 	bl	8000240 <__aeabi_dsub>
 80081a6:	4602      	mov	r2, r0
 80081a8:	2000      	movs	r0, #0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4922      	ldr	r1, [pc, #136]	; (8008238 <__kernel_cos+0x170>)
 80081ae:	f7f8 f847 	bl	8000240 <__aeabi_dsub>
 80081b2:	b003      	add	sp, #12
 80081b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b8:	2400      	movs	r4, #0
 80081ba:	4b20      	ldr	r3, [pc, #128]	; (800823c <__kernel_cos+0x174>)
 80081bc:	4622      	mov	r2, r4
 80081be:	429e      	cmp	r6, r3
 80081c0:	bfcc      	ite	gt
 80081c2:	4d1f      	ldrgt	r5, [pc, #124]	; (8008240 <__kernel_cos+0x178>)
 80081c4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80081c8:	462b      	mov	r3, r5
 80081ca:	2000      	movs	r0, #0
 80081cc:	491a      	ldr	r1, [pc, #104]	; (8008238 <__kernel_cos+0x170>)
 80081ce:	f7f8 f837 	bl	8000240 <__aeabi_dsub>
 80081d2:	4622      	mov	r2, r4
 80081d4:	4606      	mov	r6, r0
 80081d6:	460f      	mov	r7, r1
 80081d8:	462b      	mov	r3, r5
 80081da:	4650      	mov	r0, sl
 80081dc:	4659      	mov	r1, fp
 80081de:	f7f8 f82f 	bl	8000240 <__aeabi_dsub>
 80081e2:	4642      	mov	r2, r8
 80081e4:	464b      	mov	r3, r9
 80081e6:	f7f8 f82b 	bl	8000240 <__aeabi_dsub>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	e7dc      	b.n	80081ae <__kernel_cos+0xe6>
 80081f4:	2000      	movs	r0, #0
 80081f6:	4910      	ldr	r1, [pc, #64]	; (8008238 <__kernel_cos+0x170>)
 80081f8:	e7db      	b.n	80081b2 <__kernel_cos+0xea>
 80081fa:	bf00      	nop
 80081fc:	f3af 8000 	nop.w
 8008200:	be8838d4 	.word	0xbe8838d4
 8008204:	bda8fae9 	.word	0xbda8fae9
 8008208:	bdb4b1c4 	.word	0xbdb4b1c4
 800820c:	3e21ee9e 	.word	0x3e21ee9e
 8008210:	809c52ad 	.word	0x809c52ad
 8008214:	3e927e4f 	.word	0x3e927e4f
 8008218:	19cb1590 	.word	0x19cb1590
 800821c:	3efa01a0 	.word	0x3efa01a0
 8008220:	16c15177 	.word	0x16c15177
 8008224:	3f56c16c 	.word	0x3f56c16c
 8008228:	5555554c 	.word	0x5555554c
 800822c:	3fa55555 	.word	0x3fa55555
 8008230:	3fe00000 	.word	0x3fe00000
 8008234:	3fd33332 	.word	0x3fd33332
 8008238:	3ff00000 	.word	0x3ff00000
 800823c:	3fe90000 	.word	0x3fe90000
 8008240:	3fd20000 	.word	0x3fd20000

08008244 <__kernel_rem_pio2>:
 8008244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008248:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800824c:	9308      	str	r3, [sp, #32]
 800824e:	9106      	str	r1, [sp, #24]
 8008250:	4bb6      	ldr	r3, [pc, #728]	; (800852c <__kernel_rem_pio2+0x2e8>)
 8008252:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008254:	f112 0f14 	cmn.w	r2, #20
 8008258:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800825c:	bfa8      	it	ge
 800825e:	1ed4      	subge	r4, r2, #3
 8008260:	9302      	str	r3, [sp, #8]
 8008262:	9b08      	ldr	r3, [sp, #32]
 8008264:	bfb8      	it	lt
 8008266:	2400      	movlt	r4, #0
 8008268:	f103 33ff 	add.w	r3, r3, #4294967295
 800826c:	9307      	str	r3, [sp, #28]
 800826e:	bfa4      	itt	ge
 8008270:	2318      	movge	r3, #24
 8008272:	fb94 f4f3 	sdivge	r4, r4, r3
 8008276:	f06f 0317 	mvn.w	r3, #23
 800827a:	fb04 3303 	mla	r3, r4, r3, r3
 800827e:	eb03 0b02 	add.w	fp, r3, r2
 8008282:	9a07      	ldr	r2, [sp, #28]
 8008284:	9b02      	ldr	r3, [sp, #8]
 8008286:	1aa7      	subs	r7, r4, r2
 8008288:	eb03 0802 	add.w	r8, r3, r2
 800828c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800828e:	2500      	movs	r5, #0
 8008290:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008294:	2200      	movs	r2, #0
 8008296:	2300      	movs	r3, #0
 8008298:	9009      	str	r0, [sp, #36]	; 0x24
 800829a:	ae20      	add	r6, sp, #128	; 0x80
 800829c:	4545      	cmp	r5, r8
 800829e:	dd14      	ble.n	80082ca <__kernel_rem_pio2+0x86>
 80082a0:	f04f 0800 	mov.w	r8, #0
 80082a4:	9a08      	ldr	r2, [sp, #32]
 80082a6:	ab20      	add	r3, sp, #128	; 0x80
 80082a8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80082ac:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	4598      	cmp	r8, r3
 80082b4:	dc35      	bgt.n	8008322 <__kernel_rem_pio2+0xde>
 80082b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b8:	2200      	movs	r2, #0
 80082ba:	f1a3 0908 	sub.w	r9, r3, #8
 80082be:	2300      	movs	r3, #0
 80082c0:	462f      	mov	r7, r5
 80082c2:	2600      	movs	r6, #0
 80082c4:	e9cd 2300 	strd	r2, r3, [sp]
 80082c8:	e01f      	b.n	800830a <__kernel_rem_pio2+0xc6>
 80082ca:	42ef      	cmn	r7, r5
 80082cc:	d40b      	bmi.n	80082e6 <__kernel_rem_pio2+0xa2>
 80082ce:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80082d2:	e9cd 2300 	strd	r2, r3, [sp]
 80082d6:	f7f8 f901 	bl	80004dc <__aeabi_i2d>
 80082da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082de:	e8e6 0102 	strd	r0, r1, [r6], #8
 80082e2:	3501      	adds	r5, #1
 80082e4:	e7da      	b.n	800829c <__kernel_rem_pio2+0x58>
 80082e6:	4610      	mov	r0, r2
 80082e8:	4619      	mov	r1, r3
 80082ea:	e7f8      	b.n	80082de <__kernel_rem_pio2+0x9a>
 80082ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082f0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80082f4:	f7f8 f95c 	bl	80005b0 <__aeabi_dmul>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008300:	f7f7 ffa0 	bl	8000244 <__adddf3>
 8008304:	e9cd 0100 	strd	r0, r1, [sp]
 8008308:	3601      	adds	r6, #1
 800830a:	9b07      	ldr	r3, [sp, #28]
 800830c:	3f08      	subs	r7, #8
 800830e:	429e      	cmp	r6, r3
 8008310:	ddec      	ble.n	80082ec <__kernel_rem_pio2+0xa8>
 8008312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008316:	f108 0801 	add.w	r8, r8, #1
 800831a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800831e:	3508      	adds	r5, #8
 8008320:	e7c6      	b.n	80082b0 <__kernel_rem_pio2+0x6c>
 8008322:	9b02      	ldr	r3, [sp, #8]
 8008324:	aa0c      	add	r2, sp, #48	; 0x30
 8008326:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800832a:	930b      	str	r3, [sp, #44]	; 0x2c
 800832c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800832e:	9e02      	ldr	r6, [sp, #8]
 8008330:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008334:	930a      	str	r3, [sp, #40]	; 0x28
 8008336:	ab98      	add	r3, sp, #608	; 0x260
 8008338:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800833c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008340:	ab70      	add	r3, sp, #448	; 0x1c0
 8008342:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8008346:	46d0      	mov	r8, sl
 8008348:	46b1      	mov	r9, r6
 800834a:	af0c      	add	r7, sp, #48	; 0x30
 800834c:	9700      	str	r7, [sp, #0]
 800834e:	f1b9 0f00 	cmp.w	r9, #0
 8008352:	f1a8 0808 	sub.w	r8, r8, #8
 8008356:	dc71      	bgt.n	800843c <__kernel_rem_pio2+0x1f8>
 8008358:	465a      	mov	r2, fp
 800835a:	4620      	mov	r0, r4
 800835c:	4629      	mov	r1, r5
 800835e:	f000 fbef 	bl	8008b40 <scalbn>
 8008362:	2200      	movs	r2, #0
 8008364:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008368:	4604      	mov	r4, r0
 800836a:	460d      	mov	r5, r1
 800836c:	f7f8 f920 	bl	80005b0 <__aeabi_dmul>
 8008370:	f000 fb66 	bl	8008a40 <floor>
 8008374:	2200      	movs	r2, #0
 8008376:	4b6e      	ldr	r3, [pc, #440]	; (8008530 <__kernel_rem_pio2+0x2ec>)
 8008378:	f7f8 f91a 	bl	80005b0 <__aeabi_dmul>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4620      	mov	r0, r4
 8008382:	4629      	mov	r1, r5
 8008384:	f7f7 ff5c 	bl	8000240 <__aeabi_dsub>
 8008388:	460d      	mov	r5, r1
 800838a:	4604      	mov	r4, r0
 800838c:	f7f8 fbaa 	bl	8000ae4 <__aeabi_d2iz>
 8008390:	9004      	str	r0, [sp, #16]
 8008392:	f7f8 f8a3 	bl	80004dc <__aeabi_i2d>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4620      	mov	r0, r4
 800839c:	4629      	mov	r1, r5
 800839e:	f7f7 ff4f 	bl	8000240 <__aeabi_dsub>
 80083a2:	f1bb 0f00 	cmp.w	fp, #0
 80083a6:	4680      	mov	r8, r0
 80083a8:	4689      	mov	r9, r1
 80083aa:	dd70      	ble.n	800848e <__kernel_rem_pio2+0x24a>
 80083ac:	1e72      	subs	r2, r6, #1
 80083ae:	ab0c      	add	r3, sp, #48	; 0x30
 80083b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80083b4:	9c04      	ldr	r4, [sp, #16]
 80083b6:	f1cb 0118 	rsb	r1, fp, #24
 80083ba:	fa40 f301 	asr.w	r3, r0, r1
 80083be:	441c      	add	r4, r3
 80083c0:	408b      	lsls	r3, r1
 80083c2:	1ac0      	subs	r0, r0, r3
 80083c4:	ab0c      	add	r3, sp, #48	; 0x30
 80083c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80083ca:	f1cb 0317 	rsb	r3, fp, #23
 80083ce:	9404      	str	r4, [sp, #16]
 80083d0:	fa40 f303 	asr.w	r3, r0, r3
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	9b00      	ldr	r3, [sp, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	dd66      	ble.n	80084aa <__kernel_rem_pio2+0x266>
 80083dc:	2200      	movs	r2, #0
 80083de:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80083e2:	4614      	mov	r4, r2
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	3301      	adds	r3, #1
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	4296      	cmp	r6, r2
 80083ec:	f300 80ac 	bgt.w	8008548 <__kernel_rem_pio2+0x304>
 80083f0:	f1bb 0f00 	cmp.w	fp, #0
 80083f4:	dd07      	ble.n	8008406 <__kernel_rem_pio2+0x1c2>
 80083f6:	f1bb 0f01 	cmp.w	fp, #1
 80083fa:	f000 80b4 	beq.w	8008566 <__kernel_rem_pio2+0x322>
 80083fe:	f1bb 0f02 	cmp.w	fp, #2
 8008402:	f000 80ba 	beq.w	800857a <__kernel_rem_pio2+0x336>
 8008406:	9b00      	ldr	r3, [sp, #0]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d14e      	bne.n	80084aa <__kernel_rem_pio2+0x266>
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	2000      	movs	r0, #0
 8008412:	4948      	ldr	r1, [pc, #288]	; (8008534 <__kernel_rem_pio2+0x2f0>)
 8008414:	f7f7 ff14 	bl	8000240 <__aeabi_dsub>
 8008418:	4680      	mov	r8, r0
 800841a:	4689      	mov	r9, r1
 800841c:	2c00      	cmp	r4, #0
 800841e:	d044      	beq.n	80084aa <__kernel_rem_pio2+0x266>
 8008420:	465a      	mov	r2, fp
 8008422:	2000      	movs	r0, #0
 8008424:	4943      	ldr	r1, [pc, #268]	; (8008534 <__kernel_rem_pio2+0x2f0>)
 8008426:	f000 fb8b 	bl	8008b40 <scalbn>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4640      	mov	r0, r8
 8008430:	4649      	mov	r1, r9
 8008432:	f7f7 ff05 	bl	8000240 <__aeabi_dsub>
 8008436:	4680      	mov	r8, r0
 8008438:	4689      	mov	r9, r1
 800843a:	e036      	b.n	80084aa <__kernel_rem_pio2+0x266>
 800843c:	2200      	movs	r2, #0
 800843e:	4b3e      	ldr	r3, [pc, #248]	; (8008538 <__kernel_rem_pio2+0x2f4>)
 8008440:	4620      	mov	r0, r4
 8008442:	4629      	mov	r1, r5
 8008444:	f7f8 f8b4 	bl	80005b0 <__aeabi_dmul>
 8008448:	f7f8 fb4c 	bl	8000ae4 <__aeabi_d2iz>
 800844c:	f7f8 f846 	bl	80004dc <__aeabi_i2d>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008458:	2200      	movs	r2, #0
 800845a:	4b38      	ldr	r3, [pc, #224]	; (800853c <__kernel_rem_pio2+0x2f8>)
 800845c:	f7f8 f8a8 	bl	80005b0 <__aeabi_dmul>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4620      	mov	r0, r4
 8008466:	4629      	mov	r1, r5
 8008468:	f7f7 feea 	bl	8000240 <__aeabi_dsub>
 800846c:	f7f8 fb3a 	bl	8000ae4 <__aeabi_d2iz>
 8008470:	9b00      	ldr	r3, [sp, #0]
 8008472:	f109 39ff 	add.w	r9, r9, #4294967295
 8008476:	f843 0b04 	str.w	r0, [r3], #4
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008480:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008484:	f7f7 fede 	bl	8000244 <__adddf3>
 8008488:	4604      	mov	r4, r0
 800848a:	460d      	mov	r5, r1
 800848c:	e75f      	b.n	800834e <__kernel_rem_pio2+0x10a>
 800848e:	d105      	bne.n	800849c <__kernel_rem_pio2+0x258>
 8008490:	1e73      	subs	r3, r6, #1
 8008492:	aa0c      	add	r2, sp, #48	; 0x30
 8008494:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008498:	15c3      	asrs	r3, r0, #23
 800849a:	e79b      	b.n	80083d4 <__kernel_rem_pio2+0x190>
 800849c:	2200      	movs	r2, #0
 800849e:	4b28      	ldr	r3, [pc, #160]	; (8008540 <__kernel_rem_pio2+0x2fc>)
 80084a0:	f7f8 fb0c 	bl	8000abc <__aeabi_dcmpge>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d13e      	bne.n	8008526 <__kernel_rem_pio2+0x2e2>
 80084a8:	9000      	str	r0, [sp, #0]
 80084aa:	2200      	movs	r2, #0
 80084ac:	2300      	movs	r3, #0
 80084ae:	4640      	mov	r0, r8
 80084b0:	4649      	mov	r1, r9
 80084b2:	f7f8 fae5 	bl	8000a80 <__aeabi_dcmpeq>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f000 80b1 	beq.w	800861e <__kernel_rem_pio2+0x3da>
 80084bc:	1e74      	subs	r4, r6, #1
 80084be:	4623      	mov	r3, r4
 80084c0:	2200      	movs	r2, #0
 80084c2:	9902      	ldr	r1, [sp, #8]
 80084c4:	428b      	cmp	r3, r1
 80084c6:	da5f      	bge.n	8008588 <__kernel_rem_pio2+0x344>
 80084c8:	2a00      	cmp	r2, #0
 80084ca:	d074      	beq.n	80085b6 <__kernel_rem_pio2+0x372>
 80084cc:	ab0c      	add	r3, sp, #48	; 0x30
 80084ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80084d2:	f1ab 0b18 	sub.w	fp, fp, #24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 809f 	beq.w	800861a <__kernel_rem_pio2+0x3d6>
 80084dc:	465a      	mov	r2, fp
 80084de:	2000      	movs	r0, #0
 80084e0:	4914      	ldr	r1, [pc, #80]	; (8008534 <__kernel_rem_pio2+0x2f0>)
 80084e2:	f000 fb2d 	bl	8008b40 <scalbn>
 80084e6:	46a2      	mov	sl, r4
 80084e8:	4606      	mov	r6, r0
 80084ea:	460f      	mov	r7, r1
 80084ec:	f04f 0800 	mov.w	r8, #0
 80084f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80084f2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008538 <__kernel_rem_pio2+0x2f4>
 80084f6:	00e5      	lsls	r5, r4, #3
 80084f8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80084fc:	f1ba 0f00 	cmp.w	sl, #0
 8008500:	f280 80c3 	bge.w	800868a <__kernel_rem_pio2+0x446>
 8008504:	4626      	mov	r6, r4
 8008506:	2e00      	cmp	r6, #0
 8008508:	f2c0 80f5 	blt.w	80086f6 <__kernel_rem_pio2+0x4b2>
 800850c:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <__kernel_rem_pio2+0x300>)
 800850e:	f04f 0a00 	mov.w	sl, #0
 8008512:	9307      	str	r3, [sp, #28]
 8008514:	ab70      	add	r3, sp, #448	; 0x1c0
 8008516:	f04f 0b00 	mov.w	fp, #0
 800851a:	f04f 0800 	mov.w	r8, #0
 800851e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008522:	1ba7      	subs	r7, r4, r6
 8008524:	e0db      	b.n	80086de <__kernel_rem_pio2+0x49a>
 8008526:	2302      	movs	r3, #2
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	e757      	b.n	80083dc <__kernel_rem_pio2+0x198>
 800852c:	0802c928 	.word	0x0802c928
 8008530:	40200000 	.word	0x40200000
 8008534:	3ff00000 	.word	0x3ff00000
 8008538:	3e700000 	.word	0x3e700000
 800853c:	41700000 	.word	0x41700000
 8008540:	3fe00000 	.word	0x3fe00000
 8008544:	0802c8e8 	.word	0x0802c8e8
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	b944      	cbnz	r4, 800855e <__kernel_rem_pio2+0x31a>
 800854c:	b11b      	cbz	r3, 8008556 <__kernel_rem_pio2+0x312>
 800854e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	2301      	movs	r3, #1
 8008556:	461c      	mov	r4, r3
 8008558:	3201      	adds	r2, #1
 800855a:	3704      	adds	r7, #4
 800855c:	e745      	b.n	80083ea <__kernel_rem_pio2+0x1a6>
 800855e:	1acb      	subs	r3, r1, r3
 8008560:	603b      	str	r3, [r7, #0]
 8008562:	4623      	mov	r3, r4
 8008564:	e7f7      	b.n	8008556 <__kernel_rem_pio2+0x312>
 8008566:	1e72      	subs	r2, r6, #1
 8008568:	ab0c      	add	r3, sp, #48	; 0x30
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008572:	a90c      	add	r1, sp, #48	; 0x30
 8008574:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008578:	e745      	b.n	8008406 <__kernel_rem_pio2+0x1c2>
 800857a:	1e72      	subs	r2, r6, #1
 800857c:	ab0c      	add	r3, sp, #48	; 0x30
 800857e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008582:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008586:	e7f4      	b.n	8008572 <__kernel_rem_pio2+0x32e>
 8008588:	a90c      	add	r1, sp, #48	; 0x30
 800858a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800858e:	3b01      	subs	r3, #1
 8008590:	430a      	orrs	r2, r1
 8008592:	e796      	b.n	80084c2 <__kernel_rem_pio2+0x27e>
 8008594:	3401      	adds	r4, #1
 8008596:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800859a:	2a00      	cmp	r2, #0
 800859c:	d0fa      	beq.n	8008594 <__kernel_rem_pio2+0x350>
 800859e:	9b08      	ldr	r3, [sp, #32]
 80085a0:	f106 0801 	add.w	r8, r6, #1
 80085a4:	18f5      	adds	r5, r6, r3
 80085a6:	ab20      	add	r3, sp, #128	; 0x80
 80085a8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80085ac:	4434      	add	r4, r6
 80085ae:	4544      	cmp	r4, r8
 80085b0:	da04      	bge.n	80085bc <__kernel_rem_pio2+0x378>
 80085b2:	4626      	mov	r6, r4
 80085b4:	e6bf      	b.n	8008336 <__kernel_rem_pio2+0xf2>
 80085b6:	2401      	movs	r4, #1
 80085b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ba:	e7ec      	b.n	8008596 <__kernel_rem_pio2+0x352>
 80085bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085be:	f04f 0900 	mov.w	r9, #0
 80085c2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80085c6:	f7f7 ff89 	bl	80004dc <__aeabi_i2d>
 80085ca:	2600      	movs	r6, #0
 80085cc:	2700      	movs	r7, #0
 80085ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d0:	e9c5 0100 	strd	r0, r1, [r5]
 80085d4:	3b08      	subs	r3, #8
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	9504      	str	r5, [sp, #16]
 80085da:	9b07      	ldr	r3, [sp, #28]
 80085dc:	4599      	cmp	r9, r3
 80085de:	dd05      	ble.n	80085ec <__kernel_rem_pio2+0x3a8>
 80085e0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80085e4:	f108 0801 	add.w	r8, r8, #1
 80085e8:	3508      	adds	r5, #8
 80085ea:	e7e0      	b.n	80085ae <__kernel_rem_pio2+0x36a>
 80085ec:	f8dd c010 	ldr.w	ip, [sp, #16]
 80085f0:	9900      	ldr	r1, [sp, #0]
 80085f2:	f109 0901 	add.w	r9, r9, #1
 80085f6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80085fa:	9100      	str	r1, [sp, #0]
 80085fc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8008600:	f8cd c010 	str.w	ip, [sp, #16]
 8008604:	f7f7 ffd4 	bl	80005b0 <__aeabi_dmul>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	f7f7 fe18 	bl	8000244 <__adddf3>
 8008614:	4606      	mov	r6, r0
 8008616:	460f      	mov	r7, r1
 8008618:	e7df      	b.n	80085da <__kernel_rem_pio2+0x396>
 800861a:	3c01      	subs	r4, #1
 800861c:	e756      	b.n	80084cc <__kernel_rem_pio2+0x288>
 800861e:	f1cb 0200 	rsb	r2, fp, #0
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	f000 fa8b 	bl	8008b40 <scalbn>
 800862a:	2200      	movs	r2, #0
 800862c:	4ba4      	ldr	r3, [pc, #656]	; (80088c0 <__kernel_rem_pio2+0x67c>)
 800862e:	4604      	mov	r4, r0
 8008630:	460d      	mov	r5, r1
 8008632:	f7f8 fa43 	bl	8000abc <__aeabi_dcmpge>
 8008636:	b1f8      	cbz	r0, 8008678 <__kernel_rem_pio2+0x434>
 8008638:	2200      	movs	r2, #0
 800863a:	4ba2      	ldr	r3, [pc, #648]	; (80088c4 <__kernel_rem_pio2+0x680>)
 800863c:	4620      	mov	r0, r4
 800863e:	4629      	mov	r1, r5
 8008640:	f7f7 ffb6 	bl	80005b0 <__aeabi_dmul>
 8008644:	f7f8 fa4e 	bl	8000ae4 <__aeabi_d2iz>
 8008648:	4607      	mov	r7, r0
 800864a:	f7f7 ff47 	bl	80004dc <__aeabi_i2d>
 800864e:	2200      	movs	r2, #0
 8008650:	4b9b      	ldr	r3, [pc, #620]	; (80088c0 <__kernel_rem_pio2+0x67c>)
 8008652:	f7f7 ffad 	bl	80005b0 <__aeabi_dmul>
 8008656:	460b      	mov	r3, r1
 8008658:	4602      	mov	r2, r0
 800865a:	4629      	mov	r1, r5
 800865c:	4620      	mov	r0, r4
 800865e:	f7f7 fdef 	bl	8000240 <__aeabi_dsub>
 8008662:	f7f8 fa3f 	bl	8000ae4 <__aeabi_d2iz>
 8008666:	1c74      	adds	r4, r6, #1
 8008668:	ab0c      	add	r3, sp, #48	; 0x30
 800866a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800866e:	f10b 0b18 	add.w	fp, fp, #24
 8008672:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8008676:	e731      	b.n	80084dc <__kernel_rem_pio2+0x298>
 8008678:	4620      	mov	r0, r4
 800867a:	4629      	mov	r1, r5
 800867c:	f7f8 fa32 	bl	8000ae4 <__aeabi_d2iz>
 8008680:	ab0c      	add	r3, sp, #48	; 0x30
 8008682:	4634      	mov	r4, r6
 8008684:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008688:	e728      	b.n	80084dc <__kernel_rem_pio2+0x298>
 800868a:	ab0c      	add	r3, sp, #48	; 0x30
 800868c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008690:	f7f7 ff24 	bl	80004dc <__aeabi_i2d>
 8008694:	4632      	mov	r2, r6
 8008696:	463b      	mov	r3, r7
 8008698:	f7f7 ff8a 	bl	80005b0 <__aeabi_dmul>
 800869c:	4642      	mov	r2, r8
 800869e:	e86b 0102 	strd	r0, r1, [fp], #-8
 80086a2:	464b      	mov	r3, r9
 80086a4:	4630      	mov	r0, r6
 80086a6:	4639      	mov	r1, r7
 80086a8:	f7f7 ff82 	bl	80005b0 <__aeabi_dmul>
 80086ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086b0:	4606      	mov	r6, r0
 80086b2:	460f      	mov	r7, r1
 80086b4:	e722      	b.n	80084fc <__kernel_rem_pio2+0x2b8>
 80086b6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80086ba:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80086be:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80086c2:	f8cd c01c 	str.w	ip, [sp, #28]
 80086c6:	f7f7 ff73 	bl	80005b0 <__aeabi_dmul>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4650      	mov	r0, sl
 80086d0:	4659      	mov	r1, fp
 80086d2:	f7f7 fdb7 	bl	8000244 <__adddf3>
 80086d6:	4682      	mov	sl, r0
 80086d8:	468b      	mov	fp, r1
 80086da:	f108 0801 	add.w	r8, r8, #1
 80086de:	9b02      	ldr	r3, [sp, #8]
 80086e0:	4598      	cmp	r8, r3
 80086e2:	dc01      	bgt.n	80086e8 <__kernel_rem_pio2+0x4a4>
 80086e4:	45b8      	cmp	r8, r7
 80086e6:	dde6      	ble.n	80086b6 <__kernel_rem_pio2+0x472>
 80086e8:	ab48      	add	r3, sp, #288	; 0x120
 80086ea:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80086ee:	e9c7 ab00 	strd	sl, fp, [r7]
 80086f2:	3e01      	subs	r6, #1
 80086f4:	e707      	b.n	8008506 <__kernel_rem_pio2+0x2c2>
 80086f6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	dc09      	bgt.n	8008710 <__kernel_rem_pio2+0x4cc>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dc32      	bgt.n	8008766 <__kernel_rem_pio2+0x522>
 8008700:	d05a      	beq.n	80087b8 <__kernel_rem_pio2+0x574>
 8008702:	9b04      	ldr	r3, [sp, #16]
 8008704:	f003 0007 	and.w	r0, r3, #7
 8008708:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008710:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008712:	2b03      	cmp	r3, #3
 8008714:	d1f5      	bne.n	8008702 <__kernel_rem_pio2+0x4be>
 8008716:	ab48      	add	r3, sp, #288	; 0x120
 8008718:	441d      	add	r5, r3
 800871a:	46aa      	mov	sl, r5
 800871c:	46a3      	mov	fp, r4
 800871e:	f1bb 0f00 	cmp.w	fp, #0
 8008722:	dc76      	bgt.n	8008812 <__kernel_rem_pio2+0x5ce>
 8008724:	46aa      	mov	sl, r5
 8008726:	46a3      	mov	fp, r4
 8008728:	f1bb 0f01 	cmp.w	fp, #1
 800872c:	f300 8090 	bgt.w	8008850 <__kernel_rem_pio2+0x60c>
 8008730:	2700      	movs	r7, #0
 8008732:	463e      	mov	r6, r7
 8008734:	2c01      	cmp	r4, #1
 8008736:	f300 80aa 	bgt.w	800888e <__kernel_rem_pio2+0x64a>
 800873a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800873e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008742:	9b00      	ldr	r3, [sp, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f040 80ac 	bne.w	80088a2 <__kernel_rem_pio2+0x65e>
 800874a:	4603      	mov	r3, r0
 800874c:	462a      	mov	r2, r5
 800874e:	9806      	ldr	r0, [sp, #24]
 8008750:	e9c0 2300 	strd	r2, r3, [r0]
 8008754:	4622      	mov	r2, r4
 8008756:	460b      	mov	r3, r1
 8008758:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800875c:	463a      	mov	r2, r7
 800875e:	4633      	mov	r3, r6
 8008760:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008764:	e7cd      	b.n	8008702 <__kernel_rem_pio2+0x4be>
 8008766:	2000      	movs	r0, #0
 8008768:	46a0      	mov	r8, r4
 800876a:	4601      	mov	r1, r0
 800876c:	ab48      	add	r3, sp, #288	; 0x120
 800876e:	441d      	add	r5, r3
 8008770:	f1b8 0f00 	cmp.w	r8, #0
 8008774:	da3a      	bge.n	80087ec <__kernel_rem_pio2+0x5a8>
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d03e      	beq.n	80087fa <__kernel_rem_pio2+0x5b6>
 800877c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008780:	4602      	mov	r2, r0
 8008782:	462b      	mov	r3, r5
 8008784:	9d06      	ldr	r5, [sp, #24]
 8008786:	2601      	movs	r6, #1
 8008788:	e9c5 2300 	strd	r2, r3, [r5]
 800878c:	460b      	mov	r3, r1
 800878e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008792:	f7f7 fd55 	bl	8000240 <__aeabi_dsub>
 8008796:	4684      	mov	ip, r0
 8008798:	460f      	mov	r7, r1
 800879a:	ad48      	add	r5, sp, #288	; 0x120
 800879c:	42b4      	cmp	r4, r6
 800879e:	f105 0508 	add.w	r5, r5, #8
 80087a2:	da2c      	bge.n	80087fe <__kernel_rem_pio2+0x5ba>
 80087a4:	9b00      	ldr	r3, [sp, #0]
 80087a6:	b10b      	cbz	r3, 80087ac <__kernel_rem_pio2+0x568>
 80087a8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80087ac:	4662      	mov	r2, ip
 80087ae:	463b      	mov	r3, r7
 80087b0:	9906      	ldr	r1, [sp, #24]
 80087b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80087b6:	e7a4      	b.n	8008702 <__kernel_rem_pio2+0x4be>
 80087b8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80087ba:	ab48      	add	r3, sp, #288	; 0x120
 80087bc:	4637      	mov	r7, r6
 80087be:	441d      	add	r5, r3
 80087c0:	2c00      	cmp	r4, #0
 80087c2:	da09      	bge.n	80087d8 <__kernel_rem_pio2+0x594>
 80087c4:	9b00      	ldr	r3, [sp, #0]
 80087c6:	b10b      	cbz	r3, 80087cc <__kernel_rem_pio2+0x588>
 80087c8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80087cc:	4632      	mov	r2, r6
 80087ce:	463b      	mov	r3, r7
 80087d0:	9906      	ldr	r1, [sp, #24]
 80087d2:	e9c1 2300 	strd	r2, r3, [r1]
 80087d6:	e794      	b.n	8008702 <__kernel_rem_pio2+0x4be>
 80087d8:	4630      	mov	r0, r6
 80087da:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f7 fd30 	bl	8000244 <__adddf3>
 80087e4:	3c01      	subs	r4, #1
 80087e6:	4606      	mov	r6, r0
 80087e8:	460f      	mov	r7, r1
 80087ea:	e7e9      	b.n	80087c0 <__kernel_rem_pio2+0x57c>
 80087ec:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80087f0:	f7f7 fd28 	bl	8000244 <__adddf3>
 80087f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80087f8:	e7ba      	b.n	8008770 <__kernel_rem_pio2+0x52c>
 80087fa:	460d      	mov	r5, r1
 80087fc:	e7c0      	b.n	8008780 <__kernel_rem_pio2+0x53c>
 80087fe:	4660      	mov	r0, ip
 8008800:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008804:	4639      	mov	r1, r7
 8008806:	f7f7 fd1d 	bl	8000244 <__adddf3>
 800880a:	3601      	adds	r6, #1
 800880c:	4684      	mov	ip, r0
 800880e:	460f      	mov	r7, r1
 8008810:	e7c4      	b.n	800879c <__kernel_rem_pio2+0x558>
 8008812:	e9da 6700 	ldrd	r6, r7, [sl]
 8008816:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800881a:	4632      	mov	r2, r6
 800881c:	463b      	mov	r3, r7
 800881e:	4640      	mov	r0, r8
 8008820:	4649      	mov	r1, r9
 8008822:	f7f7 fd0f 	bl	8000244 <__adddf3>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800882e:	4640      	mov	r0, r8
 8008830:	4649      	mov	r1, r9
 8008832:	f7f7 fd05 	bl	8000240 <__aeabi_dsub>
 8008836:	4632      	mov	r2, r6
 8008838:	463b      	mov	r3, r7
 800883a:	f7f7 fd03 	bl	8000244 <__adddf3>
 800883e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008842:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008846:	f10b 3bff 	add.w	fp, fp, #4294967295
 800884a:	e9ca 2300 	strd	r2, r3, [sl]
 800884e:	e766      	b.n	800871e <__kernel_rem_pio2+0x4da>
 8008850:	e9da 8900 	ldrd	r8, r9, [sl]
 8008854:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8008858:	4642      	mov	r2, r8
 800885a:	464b      	mov	r3, r9
 800885c:	4630      	mov	r0, r6
 800885e:	4639      	mov	r1, r7
 8008860:	f7f7 fcf0 	bl	8000244 <__adddf3>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800886c:	4630      	mov	r0, r6
 800886e:	4639      	mov	r1, r7
 8008870:	f7f7 fce6 	bl	8000240 <__aeabi_dsub>
 8008874:	4642      	mov	r2, r8
 8008876:	464b      	mov	r3, r9
 8008878:	f7f7 fce4 	bl	8000244 <__adddf3>
 800887c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008880:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008884:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008888:	e9ca 2300 	strd	r2, r3, [sl]
 800888c:	e74c      	b.n	8008728 <__kernel_rem_pio2+0x4e4>
 800888e:	4638      	mov	r0, r7
 8008890:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008894:	4631      	mov	r1, r6
 8008896:	f7f7 fcd5 	bl	8000244 <__adddf3>
 800889a:	3c01      	subs	r4, #1
 800889c:	4607      	mov	r7, r0
 800889e:	460e      	mov	r6, r1
 80088a0:	e748      	b.n	8008734 <__kernel_rem_pio2+0x4f0>
 80088a2:	9b06      	ldr	r3, [sp, #24]
 80088a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80088a8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80088ac:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80088b0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80088b4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80088b8:	601d      	str	r5, [r3, #0]
 80088ba:	615e      	str	r6, [r3, #20]
 80088bc:	e721      	b.n	8008702 <__kernel_rem_pio2+0x4be>
 80088be:	bf00      	nop
 80088c0:	41700000 	.word	0x41700000
 80088c4:	3e700000 	.word	0x3e700000

080088c8 <__kernel_sin>:
 80088c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088cc:	b086      	sub	sp, #24
 80088ce:	e9cd 2300 	strd	r2, r3, [sp]
 80088d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80088da:	4682      	mov	sl, r0
 80088dc:	460c      	mov	r4, r1
 80088de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80088e0:	da03      	bge.n	80088ea <__kernel_sin+0x22>
 80088e2:	f7f8 f8ff 	bl	8000ae4 <__aeabi_d2iz>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d050      	beq.n	800898c <__kernel_sin+0xc4>
 80088ea:	4652      	mov	r2, sl
 80088ec:	4623      	mov	r3, r4
 80088ee:	4650      	mov	r0, sl
 80088f0:	4621      	mov	r1, r4
 80088f2:	f7f7 fe5d 	bl	80005b0 <__aeabi_dmul>
 80088f6:	4606      	mov	r6, r0
 80088f8:	460f      	mov	r7, r1
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4650      	mov	r0, sl
 8008900:	4621      	mov	r1, r4
 8008902:	f7f7 fe55 	bl	80005b0 <__aeabi_dmul>
 8008906:	a33e      	add	r3, pc, #248	; (adr r3, 8008a00 <__kernel_sin+0x138>)
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	4680      	mov	r8, r0
 800890e:	4689      	mov	r9, r1
 8008910:	4630      	mov	r0, r6
 8008912:	4639      	mov	r1, r7
 8008914:	f7f7 fe4c 	bl	80005b0 <__aeabi_dmul>
 8008918:	a33b      	add	r3, pc, #236	; (adr r3, 8008a08 <__kernel_sin+0x140>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f7f7 fc8f 	bl	8000240 <__aeabi_dsub>
 8008922:	4632      	mov	r2, r6
 8008924:	463b      	mov	r3, r7
 8008926:	f7f7 fe43 	bl	80005b0 <__aeabi_dmul>
 800892a:	a339      	add	r3, pc, #228	; (adr r3, 8008a10 <__kernel_sin+0x148>)
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f7f7 fc88 	bl	8000244 <__adddf3>
 8008934:	4632      	mov	r2, r6
 8008936:	463b      	mov	r3, r7
 8008938:	f7f7 fe3a 	bl	80005b0 <__aeabi_dmul>
 800893c:	a336      	add	r3, pc, #216	; (adr r3, 8008a18 <__kernel_sin+0x150>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 fc7d 	bl	8000240 <__aeabi_dsub>
 8008946:	4632      	mov	r2, r6
 8008948:	463b      	mov	r3, r7
 800894a:	f7f7 fe31 	bl	80005b0 <__aeabi_dmul>
 800894e:	a334      	add	r3, pc, #208	; (adr r3, 8008a20 <__kernel_sin+0x158>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f7 fc76 	bl	8000244 <__adddf3>
 8008958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800895c:	b9dd      	cbnz	r5, 8008996 <__kernel_sin+0xce>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	f7f7 fe23 	bl	80005b0 <__aeabi_dmul>
 800896a:	a32f      	add	r3, pc, #188	; (adr r3, 8008a28 <__kernel_sin+0x160>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	f7f7 fc66 	bl	8000240 <__aeabi_dsub>
 8008974:	4642      	mov	r2, r8
 8008976:	464b      	mov	r3, r9
 8008978:	f7f7 fe1a 	bl	80005b0 <__aeabi_dmul>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4650      	mov	r0, sl
 8008982:	4621      	mov	r1, r4
 8008984:	f7f7 fc5e 	bl	8000244 <__adddf3>
 8008988:	4682      	mov	sl, r0
 800898a:	460c      	mov	r4, r1
 800898c:	4650      	mov	r0, sl
 800898e:	4621      	mov	r1, r4
 8008990:	b006      	add	sp, #24
 8008992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008996:	2200      	movs	r2, #0
 8008998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800899c:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <__kernel_sin+0x168>)
 800899e:	f7f7 fe07 	bl	80005b0 <__aeabi_dmul>
 80089a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089aa:	4640      	mov	r0, r8
 80089ac:	4649      	mov	r1, r9
 80089ae:	f7f7 fdff 	bl	80005b0 <__aeabi_dmul>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089ba:	f7f7 fc41 	bl	8000240 <__aeabi_dsub>
 80089be:	4632      	mov	r2, r6
 80089c0:	463b      	mov	r3, r7
 80089c2:	f7f7 fdf5 	bl	80005b0 <__aeabi_dmul>
 80089c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ca:	f7f7 fc39 	bl	8000240 <__aeabi_dsub>
 80089ce:	a316      	add	r3, pc, #88	; (adr r3, 8008a28 <__kernel_sin+0x160>)
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	4606      	mov	r6, r0
 80089d6:	460f      	mov	r7, r1
 80089d8:	4640      	mov	r0, r8
 80089da:	4649      	mov	r1, r9
 80089dc:	f7f7 fde8 	bl	80005b0 <__aeabi_dmul>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4630      	mov	r0, r6
 80089e6:	4639      	mov	r1, r7
 80089e8:	f7f7 fc2c 	bl	8000244 <__adddf3>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4650      	mov	r0, sl
 80089f2:	4621      	mov	r1, r4
 80089f4:	f7f7 fc24 	bl	8000240 <__aeabi_dsub>
 80089f8:	e7c6      	b.n	8008988 <__kernel_sin+0xc0>
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w
 8008a00:	5acfd57c 	.word	0x5acfd57c
 8008a04:	3de5d93a 	.word	0x3de5d93a
 8008a08:	8a2b9ceb 	.word	0x8a2b9ceb
 8008a0c:	3e5ae5e6 	.word	0x3e5ae5e6
 8008a10:	57b1fe7d 	.word	0x57b1fe7d
 8008a14:	3ec71de3 	.word	0x3ec71de3
 8008a18:	19c161d5 	.word	0x19c161d5
 8008a1c:	3f2a01a0 	.word	0x3f2a01a0
 8008a20:	1110f8a6 	.word	0x1110f8a6
 8008a24:	3f811111 	.word	0x3f811111
 8008a28:	55555549 	.word	0x55555549
 8008a2c:	3fc55555 	.word	0x3fc55555
 8008a30:	3fe00000 	.word	0x3fe00000

08008a34 <fabs>:
 8008a34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008a38:	4770      	bx	lr
 8008a3a:	0000      	movs	r0, r0
 8008a3c:	0000      	movs	r0, r0
	...

08008a40 <floor>:
 8008a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a44:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008a48:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008a4c:	2e13      	cmp	r6, #19
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4607      	mov	r7, r0
 8008a54:	460c      	mov	r4, r1
 8008a56:	4605      	mov	r5, r0
 8008a58:	dc33      	bgt.n	8008ac2 <floor+0x82>
 8008a5a:	2e00      	cmp	r6, #0
 8008a5c:	da14      	bge.n	8008a88 <floor+0x48>
 8008a5e:	a334      	add	r3, pc, #208	; (adr r3, 8008b30 <floor+0xf0>)
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	f7f7 fbee 	bl	8000244 <__adddf3>
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f7f8 f830 	bl	8000ad0 <__aeabi_dcmpgt>
 8008a70:	b138      	cbz	r0, 8008a82 <floor+0x42>
 8008a72:	2c00      	cmp	r4, #0
 8008a74:	da58      	bge.n	8008b28 <floor+0xe8>
 8008a76:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008a7a:	431d      	orrs	r5, r3
 8008a7c:	d001      	beq.n	8008a82 <floor+0x42>
 8008a7e:	2500      	movs	r5, #0
 8008a80:	4c2d      	ldr	r4, [pc, #180]	; (8008b38 <floor+0xf8>)
 8008a82:	4623      	mov	r3, r4
 8008a84:	462f      	mov	r7, r5
 8008a86:	e025      	b.n	8008ad4 <floor+0x94>
 8008a88:	4a2c      	ldr	r2, [pc, #176]	; (8008b3c <floor+0xfc>)
 8008a8a:	fa42 f806 	asr.w	r8, r2, r6
 8008a8e:	ea01 0208 	and.w	r2, r1, r8
 8008a92:	4302      	orrs	r2, r0
 8008a94:	d01e      	beq.n	8008ad4 <floor+0x94>
 8008a96:	a326      	add	r3, pc, #152	; (adr r3, 8008b30 <floor+0xf0>)
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	f7f7 fbd2 	bl	8000244 <__adddf3>
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f7f8 f814 	bl	8000ad0 <__aeabi_dcmpgt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d0ea      	beq.n	8008a82 <floor+0x42>
 8008aac:	2c00      	cmp	r4, #0
 8008aae:	bfbe      	ittt	lt
 8008ab0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008ab4:	fa43 f606 	asrlt.w	r6, r3, r6
 8008ab8:	19a4      	addlt	r4, r4, r6
 8008aba:	2500      	movs	r5, #0
 8008abc:	ea24 0408 	bic.w	r4, r4, r8
 8008ac0:	e7df      	b.n	8008a82 <floor+0x42>
 8008ac2:	2e33      	cmp	r6, #51	; 0x33
 8008ac4:	dd0a      	ble.n	8008adc <floor+0x9c>
 8008ac6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008aca:	d103      	bne.n	8008ad4 <floor+0x94>
 8008acc:	f7f7 fbba 	bl	8000244 <__adddf3>
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008adc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008ae4:	fa22 f808 	lsr.w	r8, r2, r8
 8008ae8:	ea18 0f00 	tst.w	r8, r0
 8008aec:	d0f2      	beq.n	8008ad4 <floor+0x94>
 8008aee:	a310      	add	r3, pc, #64	; (adr r3, 8008b30 <floor+0xf0>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f7f7 fba6 	bl	8000244 <__adddf3>
 8008af8:	2200      	movs	r2, #0
 8008afa:	2300      	movs	r3, #0
 8008afc:	f7f7 ffe8 	bl	8000ad0 <__aeabi_dcmpgt>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d0be      	beq.n	8008a82 <floor+0x42>
 8008b04:	2c00      	cmp	r4, #0
 8008b06:	da02      	bge.n	8008b0e <floor+0xce>
 8008b08:	2e14      	cmp	r6, #20
 8008b0a:	d103      	bne.n	8008b14 <floor+0xd4>
 8008b0c:	3401      	adds	r4, #1
 8008b0e:	ea25 0508 	bic.w	r5, r5, r8
 8008b12:	e7b6      	b.n	8008a82 <floor+0x42>
 8008b14:	2301      	movs	r3, #1
 8008b16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008b1a:	fa03 f606 	lsl.w	r6, r3, r6
 8008b1e:	4435      	add	r5, r6
 8008b20:	42bd      	cmp	r5, r7
 8008b22:	bf38      	it	cc
 8008b24:	18e4      	addcc	r4, r4, r3
 8008b26:	e7f2      	b.n	8008b0e <floor+0xce>
 8008b28:	2500      	movs	r5, #0
 8008b2a:	462c      	mov	r4, r5
 8008b2c:	e7a9      	b.n	8008a82 <floor+0x42>
 8008b2e:	bf00      	nop
 8008b30:	8800759c 	.word	0x8800759c
 8008b34:	7e37e43c 	.word	0x7e37e43c
 8008b38:	bff00000 	.word	0xbff00000
 8008b3c:	000fffff 	.word	0x000fffff

08008b40 <scalbn>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008b46:	4604      	mov	r4, r0
 8008b48:	460d      	mov	r5, r1
 8008b4a:	4617      	mov	r7, r2
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	b996      	cbnz	r6, 8008b76 <scalbn+0x36>
 8008b50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b54:	4303      	orrs	r3, r0
 8008b56:	d039      	beq.n	8008bcc <scalbn+0x8c>
 8008b58:	4b33      	ldr	r3, [pc, #204]	; (8008c28 <scalbn+0xe8>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f7f7 fd28 	bl	80005b0 <__aeabi_dmul>
 8008b60:	4b32      	ldr	r3, [pc, #200]	; (8008c2c <scalbn+0xec>)
 8008b62:	4604      	mov	r4, r0
 8008b64:	429f      	cmp	r7, r3
 8008b66:	460d      	mov	r5, r1
 8008b68:	da0f      	bge.n	8008b8a <scalbn+0x4a>
 8008b6a:	a32b      	add	r3, pc, #172	; (adr r3, 8008c18 <scalbn+0xd8>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	f7f7 fd1e 	bl	80005b0 <__aeabi_dmul>
 8008b74:	e006      	b.n	8008b84 <scalbn+0x44>
 8008b76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008b7a:	4296      	cmp	r6, r2
 8008b7c:	d10a      	bne.n	8008b94 <scalbn+0x54>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	f7f7 fb60 	bl	8000244 <__adddf3>
 8008b84:	4604      	mov	r4, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	e020      	b.n	8008bcc <scalbn+0x8c>
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008b90:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008b94:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008b98:	19b9      	adds	r1, r7, r6
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	dd0e      	ble.n	8008bbc <scalbn+0x7c>
 8008b9e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008ba2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008ba6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008baa:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008bae:	4820      	ldr	r0, [pc, #128]	; (8008c30 <scalbn+0xf0>)
 8008bb0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008bb4:	a31a      	add	r3, pc, #104	; (adr r3, 8008c20 <scalbn+0xe0>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	e7d9      	b.n	8008b70 <scalbn+0x30>
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	dd08      	ble.n	8008bd2 <scalbn+0x92>
 8008bc0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bc8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4629      	mov	r1, r5
 8008bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008bd6:	da12      	bge.n	8008bfe <scalbn+0xbe>
 8008bd8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008bdc:	429f      	cmp	r7, r3
 8008bde:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008be2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008be6:	dcdc      	bgt.n	8008ba2 <scalbn+0x62>
 8008be8:	a30b      	add	r3, pc, #44	; (adr r3, 8008c18 <scalbn+0xd8>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008bf2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008bf6:	480f      	ldr	r0, [pc, #60]	; (8008c34 <scalbn+0xf4>)
 8008bf8:	f041 011f 	orr.w	r1, r1, #31
 8008bfc:	e7b8      	b.n	8008b70 <scalbn+0x30>
 8008bfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c02:	3136      	adds	r1, #54	; 0x36
 8008c04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c08:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	4629      	mov	r1, r5
 8008c10:	2200      	movs	r2, #0
 8008c12:	4b09      	ldr	r3, [pc, #36]	; (8008c38 <scalbn+0xf8>)
 8008c14:	e7ac      	b.n	8008b70 <scalbn+0x30>
 8008c16:	bf00      	nop
 8008c18:	c2f8f359 	.word	0xc2f8f359
 8008c1c:	01a56e1f 	.word	0x01a56e1f
 8008c20:	8800759c 	.word	0x8800759c
 8008c24:	7e37e43c 	.word	0x7e37e43c
 8008c28:	43500000 	.word	0x43500000
 8008c2c:	ffff3cb0 	.word	0xffff3cb0
 8008c30:	8800759c 	.word	0x8800759c
 8008c34:	c2f8f359 	.word	0xc2f8f359
 8008c38:	3c900000 	.word	0x3c900000

08008c3c <_init>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr

08008c48 <_fini>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr
