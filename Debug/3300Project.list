
3300Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a328  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015c9c  0800a510  0800a510  0001a510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080201ac  080201ac  000409f0  2**0
                  CONTENTS
  4 .ARM          00000008  080201ac  080201ac  000301ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080201b4  080201b4  000409f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080201b4  080201b4  000301b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080201bc  080201bc  000301bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009f0  20000000  080201c0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200009f0  08020bb0  000409f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b80  08020bb0  00040b80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000409f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103c6  00000000  00000000  00040a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003179  00000000  00000000  00050ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00053f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00055098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a548  00000000  00000000  00056038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e2a  00000000  00000000  00070580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841df  00000000  00000000  000833aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107589  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c4  00000000  00000000  001075dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200009f0 	.word	0x200009f0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a4f8 	.word	0x0800a4f8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200009f4 	.word	0x200009f4
 8000224:	0800a4f8 	.word	0x0800a4f8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b976 	b.w	8000ea4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	4688      	mov	r8, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14d      	bne.n	8000c7c <__udivmoddi4+0xac>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4694      	mov	ip, r2
 8000be4:	d968      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	b152      	cbz	r2, 8000c02 <__udivmoddi4+0x32>
 8000bec:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf0:	f1c2 0120 	rsb	r1, r2, #32
 8000bf4:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	ea41 0803 	orr.w	r8, r1, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c06:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	fb01 8817 	mls	r8, r1, r7, r8
 8000c12:	fb07 f00e 	mul.w	r0, r7, lr
 8000c16:	0c23      	lsrs	r3, r4, #16
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	4298      	cmp	r0, r3
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x66>
 8000c20:	eb1c 0303 	adds.w	r3, ip, r3
 8000c24:	f107 35ff 	add.w	r5, r7, #4294967295
 8000c28:	f080 811e 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2c:	4298      	cmp	r0, r3
 8000c2e:	f240 811b 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c32:	3f02      	subs	r7, #2
 8000c34:	4463      	add	r3, ip
 8000c36:	1a1b      	subs	r3, r3, r0
 8000c38:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c3c:	fb01 3310 	mls	r3, r1, r0, r3
 8000c40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c44:	b2a4      	uxth	r4, r4
 8000c46:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8109 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8106 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	2100      	movs	r1, #0
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa8>
 8000c70:	2300      	movs	r3, #0
 8000c72:	40d4      	lsrs	r4, r2
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	f000 80ee 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c86:	2100      	movs	r1, #0
 8000c88:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	42ab      	cmp	r3, r5
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80fc 	bhi.w	8000e9c <__udivmoddi4+0x2cc>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb65 0303 	sbc.w	r3, r5, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4698      	mov	r8, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d0e2      	beq.n	8000c78 <__udivmoddi4+0xa8>
 8000cb2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb6:	e7df      	b.n	8000c78 <__udivmoddi4+0xa8>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8091 	bne.w	8000de8 <__udivmoddi4+0x218>
 8000cc6:	eba1 000c 	sub.w	r0, r1, ip
 8000cca:	2101      	movs	r1, #1
 8000ccc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd0:	fa1f fe8c 	uxth.w	lr, ip
 8000cd4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cd8:	fb07 0013 	mls	r0, r7, r3, r0
 8000cdc:	0c25      	lsrs	r5, r4, #16
 8000cde:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	42a8      	cmp	r0, r5
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0505 	adds.w	r5, ip, r5
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	42a8      	cmp	r0, r5
 8000cf6:	f200 80ce 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a2d      	subs	r5, r5, r0
 8000cfe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d02:	fb07 5510 	mls	r5, r7, r0, r5
 8000d06:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80b6 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000d24:	4628      	mov	r0, r5
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79e      	b.n	8000c6e <__udivmoddi4+0x9e>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fbba f8f9 	udiv	r8, sl, r9
 8000d4a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d52:	408d      	lsls	r5, r1
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	431d      	orrs	r5, r3
 8000d5a:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d68:	42a0      	cmp	r0, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	42a0      	cmp	r0, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1a24      	subs	r4, r4, r0
 8000d8a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d8e:	fb09 4410 	mls	r4, r9, r0, r4
 8000d92:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d96:	b2ad      	uxth	r5, r5
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9502 	umull	r9, r5, r0, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2d0>
 8000dcc:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd0:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd4:	fa22 f301 	lsr.w	r3, r2, r1
 8000dd8:	fa04 f707 	lsl.w	r7, r4, r7
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa8>
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	f1c2 0120 	rsb	r1, r2, #32
 8000df0:	fa25 f301 	lsr.w	r3, r5, r1
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfc:	4095      	lsls	r5, r2
 8000dfe:	430d      	orrs	r5, r1
 8000e00:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e04:	fb07 3311 	mls	r3, r7, r1, r3
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	0c28      	lsrs	r0, r5, #16
 8000e0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e12:	fb01 f30e 	mul.w	r3, r1, lr
 8000e16:	4283      	cmp	r3, r0
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0000 	adds.w	r0, ip, r0
 8000e22:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	4283      	cmp	r3, r0
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3902      	subs	r1, #2
 8000e2e:	4460      	add	r0, ip
 8000e30:	1ac0      	subs	r0, r0, r3
 8000e32:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e36:	fb07 0013 	mls	r0, r7, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e40:	fb03 f00e 	mul.w	r0, r3, lr
 8000e44:	42a8      	cmp	r0, r5
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0505 	adds.w	r5, ip, r5
 8000e4c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	42a8      	cmp	r0, r5
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	4465      	add	r5, ip
 8000e5a:	1a28      	subs	r0, r5, r0
 8000e5c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e707      	b.n	8000c78 <__udivmoddi4+0xa8>
 8000e68:	462f      	mov	r7, r5
 8000e6a:	e6e4      	b.n	8000c36 <__udivmoddi4+0x66>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f9      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4643      	mov	r3, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4628      	mov	r0, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4641      	mov	r1, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	4464      	add	r4, ip
 8000e92:	3802      	subs	r0, #2
 8000e94:	e747      	b.n	8000d26 <__udivmoddi4+0x156>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	4465      	add	r5, ip
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e706      	b.n	8000cae <__udivmoddi4+0xde>
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa8>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <Check_touchkey>:
#include "UI.h"
#include "lcdtp.h"

uint8_t Check_touchkey(const int* constraints ,strType_XPT2046_Coordinate *pDisplayCoordinate) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	uint8_t match = (constraints[0]<= pDisplayCoordinate->x && constraints[1]>= pDisplayCoordinate->x
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	8812      	ldrh	r2, [r2, #0]
			 && constraints[2]<= pDisplayCoordinate->y && constraints[3]>= pDisplayCoordinate->y);
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	dc16      	bgt.n	8000eec <Check_touchkey+0x44>
	uint8_t match = (constraints[0]<= pDisplayCoordinate->x && constraints[1]>= pDisplayCoordinate->x
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	8812      	ldrh	r2, [r2, #0]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	db0f      	blt.n	8000eec <Check_touchkey+0x44>
			 && constraints[2]<= pDisplayCoordinate->y && constraints[3]>= pDisplayCoordinate->y);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3308      	adds	r3, #8
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	8852      	ldrh	r2, [r2, #2]
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	dc08      	bgt.n	8000eec <Check_touchkey+0x44>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	330c      	adds	r3, #12
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	8852      	ldrh	r2, [r2, #2]
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	db01      	blt.n	8000eec <Check_touchkey+0x44>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <Check_touchkey+0x46>
 8000eec:	2300      	movs	r3, #0
	uint8_t match = (constraints[0]<= pDisplayCoordinate->x && constraints[1]>= pDisplayCoordinate->x
 8000eee:	73fb      	strb	r3, [r7, #15]
	 return match;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <Render>:

void Render(uint8_t* mode_new, uint8_t* render_status,unsigned char *petStats){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
	//Not Render if done
	if(*render_status==1) return;
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d01e      	beq.n	8000f4e <Render+0x52>

	//Mode 0 = Home, Mode 1 = Drink Water, Mode 2 = Toggle Dark Mode, Mode 3 = Pet
	switch(*mode_new){
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d00f      	beq.n	8000f38 <Render+0x3c>
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	dc14      	bgt.n	8000f46 <Render+0x4a>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <Render+0x2a>
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d003      	beq.n	8000f2c <Render+0x30>
 8000f24:	e00f      	b.n	8000f46 <Render+0x4a>
		case(0):
			UI_Home();
 8000f26:	f000 f859 	bl	8000fdc <UI_Home>
			break;
 8000f2a:	e00c      	b.n	8000f46 <Render+0x4a>
		case(1):
			UI_Drink_Water();
 8000f2c:	f000 f814 	bl	8000f58 <UI_Drink_Water>
			*mode_new = 0;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
			break;
 8000f36:	e006      	b.n	8000f46 <Render+0x4a>
		case(2):
			LCD_Darkmode_Toggle(petStats);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 fd63 	bl	8001a04 <LCD_Darkmode_Toggle>
			*mode_new = 0;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
			break;
 8000f44:	bf00      	nop

	}
	*render_status = 1;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e000      	b.n	8000f50 <Render+0x54>
	if(*render_status==1) return;
 8000f4e:	bf00      	nop
}
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <UI_Drink_Water>:

void UI_Drink_Water(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	LCD_Clear(0, 0, 240, 320);
 8000f5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f60:	22f0      	movs	r2, #240	; 0xf0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 fb17 	bl	8001598 <LCD_Clear>

	LCD_DrawString(10, 150, "Drinked a glass of water");
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <UI_Drink_Water+0x74>)
 8000f6c:	2196      	movs	r1, #150	; 0x96
 8000f6e:	200a      	movs	r0, #10
 8000f70:	f000 fbc0 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(10, 250, "Return to home in 2s");
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <UI_Drink_Water+0x78>)
 8000f76:	21fa      	movs	r1, #250	; 0xfa
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f000 fbbb 	bl	80016f4 <LCD_DrawString>
	HAL_Delay(1000);
 8000f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f82:	f002 fc99 	bl	80038b8 <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 8000f86:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f8a:	22f0      	movs	r2, #240	; 0xf0
 8000f8c:	21fa      	movs	r1, #250	; 0xfa
 8000f8e:	200a      	movs	r0, #10
 8000f90:	f000 fb02 	bl	8001598 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 1s");
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <UI_Drink_Water+0x7c>)
 8000f96:	21fa      	movs	r1, #250	; 0xfa
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f000 fbab 	bl	80016f4 <LCD_DrawString>
	HAL_Delay(1000);
 8000f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa2:	f002 fc89 	bl	80038b8 <HAL_Delay>
	LCD_Clear(10, 250, 240, 320);
 8000fa6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000faa:	22f0      	movs	r2, #240	; 0xf0
 8000fac:	21fa      	movs	r1, #250	; 0xfa
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f000 faf2 	bl	8001598 <LCD_Clear>
	LCD_DrawString(10, 250, "Return to home in 0s");
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <UI_Drink_Water+0x80>)
 8000fb6:	21fa      	movs	r1, #250	; 0xfa
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f000 fb9b 	bl	80016f4 <LCD_DrawString>
	HAL_Delay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc2:	f002 fc79 	bl	80038b8 <HAL_Delay>

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	0800a510 	.word	0x0800a510
 8000fd0:	0800a52c 	.word	0x0800a52c
 8000fd4:	0800a544 	.word	0x0800a544
 8000fd8:	0800a55c 	.word	0x0800a55c

08000fdc <UI_Home>:

void UI_Home(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	LCD_Clear ( 0, 0, 240, 320);
 8000fe0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fe4:	22f0      	movs	r2, #240	; 0xf0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 fad5 	bl	8001598 <LCD_Clear>
	LCD_DrawString(2, 10, "Config");
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <UI_Home+0x78>)
 8000ff0:	210a      	movs	r1, #10
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f000 fb7e 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(200, 10, "Stats");
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <UI_Home+0x7c>)
 8000ffa:	210a      	movs	r1, #10
 8000ffc:	20c8      	movs	r0, #200	; 0xc8
 8000ffe:	f000 fb79 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(40, 220, "Set");
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <UI_Home+0x80>)
 8001004:	21dc      	movs	r1, #220	; 0xdc
 8001006:	2028      	movs	r0, #40	; 0x28
 8001008:	f000 fb74 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(40, 240, "Exercise");
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <UI_Home+0x84>)
 800100e:	21f0      	movs	r1, #240	; 0xf0
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f000 fb6f 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(40, 260, "Timer");
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <UI_Home+0x88>)
 8001018:	f44f 7182 	mov.w	r1, #260	; 0x104
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f000 fb69 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(140, 220, "Drink");
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <UI_Home+0x8c>)
 8001024:	21dc      	movs	r1, #220	; 0xdc
 8001026:	208c      	movs	r0, #140	; 0x8c
 8001028:	f000 fb64 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(140, 240, "water");
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <UI_Home+0x90>)
 800102e:	21f0      	movs	r1, #240	; 0xf0
 8001030:	208c      	movs	r0, #140	; 0x8c
 8001032:	f000 fb5f 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(200, 260, "Dark");
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <UI_Home+0x94>)
 8001038:	f44f 7182 	mov.w	r1, #260	; 0x104
 800103c:	20c8      	movs	r0, #200	; 0xc8
 800103e:	f000 fb59 	bl	80016f4 <LCD_DrawString>
	LCD_DrawString(200, 280, "mode");
 8001042:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <UI_Home+0x98>)
 8001044:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001048:	20c8      	movs	r0, #200	; 0xc8
 800104a:	f000 fb53 	bl	80016f4 <LCD_DrawString>

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	0800a574 	.word	0x0800a574
 8001058:	0800a57c 	.word	0x0800a57c
 800105c:	0800a584 	.word	0x0800a584
 8001060:	0800a588 	.word	0x0800a588
 8001064:	0800a594 	.word	0x0800a594
 8001068:	0800a59c 	.word	0x0800a59c
 800106c:	0800a5a4 	.word	0x0800a5a4
 8001070:	0800a5ac 	.word	0x0800a5ac
 8001074:	0800a5b4 	.word	0x0800a5b4

08001078 <UI_Home_Display_Date>:

void UI_Home_Display_Date(uint16_t year, uint8_t month, uint8_t day){
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	460b      	mov	r3, r1
 8001084:	717b      	strb	r3, [r7, #5]
 8001086:	4613      	mov	r3, r2
 8001088:	713b      	strb	r3, [r7, #4]
	char str[10];

	//Draw Year
	sprintf(str, "%04i", year);
 800108a:	88fa      	ldrh	r2, [r7, #6]
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4915      	ldr	r1, [pc, #84]	; (80010e8 <UI_Home_Display_Date+0x70>)
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fd4e 	bl	8005b34 <sprintf>
	LCD_DrawString(86, 10, str);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	461a      	mov	r2, r3
 800109e:	210a      	movs	r1, #10
 80010a0:	2056      	movs	r0, #86	; 0x56
 80010a2:	f000 fb27 	bl	80016f4 <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", month);
 80010a6:	797a      	ldrb	r2, [r7, #5]
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <UI_Home_Display_Date+0x74>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fd40 	bl	8005b34 <sprintf>
	LCD_DrawString(125, 10, str);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	461a      	mov	r2, r3
 80010ba:	210a      	movs	r1, #10
 80010bc:	207d      	movs	r0, #125	; 0x7d
 80010be:	f000 fb19 	bl	80016f4 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", day);
 80010c2:	793a      	ldrb	r2, [r7, #4]
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4908      	ldr	r1, [pc, #32]	; (80010ec <UI_Home_Display_Date+0x74>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 fd32 	bl	8005b34 <sprintf>
	LCD_DrawString(145, 10, str);
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	461a      	mov	r2, r3
 80010d6:	210a      	movs	r1, #10
 80010d8:	2091      	movs	r0, #145	; 0x91
 80010da:	f000 fb0b 	bl	80016f4 <LCD_DrawString>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	0800a5bc 	.word	0x0800a5bc
 80010ec:	0800a5c4 	.word	0x0800a5c4

080010f0 <UI_Home_Display_Time>:

void UI_Home_Display_Time(uint8_t hour, uint8_t minute, uint8_t second){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	460b      	mov	r3, r1
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	4613      	mov	r3, r2
 8001100:	717b      	strb	r3, [r7, #5]
	char str[10];

	//Draw Year
	sprintf(str, "%02i", hour);
 8001102:	79fa      	ldrb	r2, [r7, #7]
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4915      	ldr	r1, [pc, #84]	; (8001160 <UI_Home_Display_Time+0x70>)
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fd12 	bl	8005b34 <sprintf>
	LCD_DrawString(95, 30, str);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	461a      	mov	r2, r3
 8001116:	211e      	movs	r1, #30
 8001118:	205f      	movs	r0, #95	; 0x5f
 800111a:	f000 faeb 	bl	80016f4 <LCD_DrawString>

	//Draw Month
	sprintf(str, "%02i", minute);
 800111e:	79ba      	ldrb	r2, [r7, #6]
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <UI_Home_Display_Time+0x70>)
 8001126:	4618      	mov	r0, r3
 8001128:	f004 fd04 	bl	8005b34 <sprintf>
	LCD_DrawString(115, 30, str);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	461a      	mov	r2, r3
 8001132:	211e      	movs	r1, #30
 8001134:	2073      	movs	r0, #115	; 0x73
 8001136:	f000 fadd 	bl	80016f4 <LCD_DrawString>

	//Draw Day
	sprintf(str, "%02i", second);
 800113a:	797a      	ldrb	r2, [r7, #5]
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <UI_Home_Display_Time+0x70>)
 8001142:	4618      	mov	r0, r3
 8001144:	f004 fcf6 	bl	8005b34 <sprintf>
	LCD_DrawString(135, 30, str);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	461a      	mov	r2, r3
 800114e:	211e      	movs	r1, #30
 8001150:	2087      	movs	r0, #135	; 0x87
 8001152:	f000 facf 	bl	80016f4 <LCD_DrawString>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0800a5c4 	.word	0x0800a5c4

08001164 <UI_Home_Display_Pet>:

void UI_Home_Display_Pet(uint16_t StartX, uint16_t StartY,unsigned char *pic){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	603a      	str	r2, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
 8001170:	460b      	mov	r3, r1
 8001172:	80bb      	strh	r3, [r7, #4]

	LCD_DrawPicture(StartX,StartY,pic);
 8001174:	88b9      	ldrh	r1, [r7, #4]
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fc60 	bl	8001a40 <LCD_DrawPicture>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	e002      	b.n	8001198 <Delay+0x10>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3b01      	subs	r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <Delay+0xa>
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <LCD_INIT>:
int darkmode_toggle = 0;


void LCD_INIT ( void )
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
	LCD_BackLed_Control(ENABLE);      
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 f826 	bl	8001200 <LCD_BackLed_Control>
	LCD_Rst();
 80011b4:	f000 f80c 	bl	80011d0 <LCD_Rst>
	LCD_REG_Config();
 80011b8:	f000 f85c 	bl	8001274 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320);
 80011bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011c0:	22f0      	movs	r2, #240	; 0xf0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 f9e7 	bl	8001598 <LCD_Clear>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <LCD_Rst>:


void LCD_Rst ( void )
{			
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2102      	movs	r1, #2
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <LCD_Rst+0x28>)
 80011da:	f002 fe4a 	bl	8003e72 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <LCD_Rst+0x2c>)
 80011e0:	f7ff ffd2 	bl	8001188 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2102      	movs	r1, #2
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <LCD_Rst+0x28>)
 80011ea:	f002 fe42 	bl	8003e72 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <LCD_Rst+0x2c>)
 80011f0:	f7ff ffca 	bl	8001188 <Delay>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40011800 	.word	0x40011800
 80011fc:	0002bffc 	.word	0x0002bffc

08001200 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <LCD_BackLed_Control+0x34>)
 8001218:	f002 fe2b 	bl	8003e72 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 800121c:	e005      	b.n	800122a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <LCD_BackLed_Control+0x34>)
 8001226:	f002 fe24 	bl	8003e72 <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40011400 	.word	0x40011400

08001238 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001242:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	8013      	strh	r3, [r2, #0]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <LCD_Write_Data+0x1c>)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	8013      	strh	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	60020000 	.word	0x60020000

08001274 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001278:	20cf      	movs	r0, #207	; 0xcf
 800127a:	f7ff ffdd 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff ffe8 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001284:	2081      	movs	r0, #129	; 0x81
 8001286:	f7ff ffe5 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800128a:	2030      	movs	r0, #48	; 0x30
 800128c:	f7ff ffe2 	bl	8001254 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001290:	20ed      	movs	r0, #237	; 0xed
 8001292:	f7ff ffd1 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001296:	2064      	movs	r0, #100	; 0x64
 8001298:	f7ff ffdc 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800129c:	2003      	movs	r0, #3
 800129e:	f7ff ffd9 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80012a2:	2012      	movs	r0, #18
 80012a4:	f7ff ffd6 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80012a8:	2081      	movs	r0, #129	; 0x81
 80012aa:	f7ff ffd3 	bl	8001254 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80012ae:	20e8      	movs	r0, #232	; 0xe8
 80012b0:	f7ff ffc2 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80012b4:	2085      	movs	r0, #133	; 0x85
 80012b6:	f7ff ffcd 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80012ba:	2010      	movs	r0, #16
 80012bc:	f7ff ffca 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80012c0:	2078      	movs	r0, #120	; 0x78
 80012c2:	f7ff ffc7 	bl	8001254 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80012c6:	20cb      	movs	r0, #203	; 0xcb
 80012c8:	f7ff ffb6 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80012cc:	2039      	movs	r0, #57	; 0x39
 80012ce:	f7ff ffc1 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80012d2:	202c      	movs	r0, #44	; 0x2c
 80012d4:	f7ff ffbe 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff ffbb 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80012de:	2034      	movs	r0, #52	; 0x34
 80012e0:	f7ff ffb8 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80012e4:	2002      	movs	r0, #2
 80012e6:	f7ff ffb5 	bl	8001254 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80012ea:	20f7      	movs	r0, #247	; 0xf7
 80012ec:	f7ff ffa4 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80012f0:	2020      	movs	r0, #32
 80012f2:	f7ff ffaf 	bl	8001254 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80012f6:	20ea      	movs	r0, #234	; 0xea
 80012f8:	f7ff ff9e 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ffa9 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff ffa6 	bl	8001254 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001308:	20b1      	movs	r0, #177	; 0xb1
 800130a:	f7ff ff95 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff ffa0 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001314:	201b      	movs	r0, #27
 8001316:	f7ff ff9d 	bl	8001254 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800131a:	20b6      	movs	r0, #182	; 0xb6
 800131c:	f7ff ff8c 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001320:	200a      	movs	r0, #10
 8001322:	f7ff ff97 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001326:	20a2      	movs	r0, #162	; 0xa2
 8001328:	f7ff ff94 	bl	8001254 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800132c:	20c0      	movs	r0, #192	; 0xc0
 800132e:	f7ff ff83 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001332:	2035      	movs	r0, #53	; 0x35
 8001334:	f7ff ff8e 	bl	8001254 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001338:	20c1      	movs	r0, #193	; 0xc1
 800133a:	f7ff ff7d 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800133e:	2011      	movs	r0, #17
 8001340:	f7ff ff88 	bl	8001254 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001344:	20c5      	movs	r0, #197	; 0xc5
 8001346:	f7ff ff77 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800134a:	2045      	movs	r0, #69	; 0x45
 800134c:	f7ff ff82 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001350:	2045      	movs	r0, #69	; 0x45
 8001352:	f7ff ff7f 	bl	8001254 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001356:	20c7      	movs	r0, #199	; 0xc7
 8001358:	f7ff ff6e 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 800135c:	20a2      	movs	r0, #162	; 0xa2
 800135e:	f7ff ff79 	bl	8001254 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001362:	20f2      	movs	r0, #242	; 0xf2
 8001364:	f7ff ff68 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff ff73 	bl	8001254 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800136e:	2026      	movs	r0, #38	; 0x26
 8001370:	f7ff ff62 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff ff6d 	bl	8001254 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800137a:	20e0      	movs	r0, #224	; 0xe0
 800137c:	f7ff ff5c 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001380:	200f      	movs	r0, #15
 8001382:	f7ff ff67 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001386:	2026      	movs	r0, #38	; 0x26
 8001388:	f7ff ff64 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 800138c:	2024      	movs	r0, #36	; 0x24
 800138e:	f7ff ff61 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001392:	200b      	movs	r0, #11
 8001394:	f7ff ff5e 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001398:	200e      	movs	r0, #14
 800139a:	f7ff ff5b 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800139e:	2009      	movs	r0, #9
 80013a0:	f7ff ff58 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80013a4:	2054      	movs	r0, #84	; 0x54
 80013a6:	f7ff ff55 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80013aa:	20a8      	movs	r0, #168	; 0xa8
 80013ac:	f7ff ff52 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80013b0:	2046      	movs	r0, #70	; 0x46
 80013b2:	f7ff ff4f 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80013b6:	200c      	movs	r0, #12
 80013b8:	f7ff ff4c 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80013bc:	2017      	movs	r0, #23
 80013be:	f7ff ff49 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80013c2:	2009      	movs	r0, #9
 80013c4:	f7ff ff46 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80013c8:	200f      	movs	r0, #15
 80013ca:	f7ff ff43 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80013ce:	2007      	movs	r0, #7
 80013d0:	f7ff ff40 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff ff3d 	bl	8001254 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80013da:	20e1      	movs	r0, #225	; 0xe1
 80013dc:	f7ff ff2c 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff ff37 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80013e6:	2019      	movs	r0, #25
 80013e8:	f7ff ff34 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80013ec:	201b      	movs	r0, #27
 80013ee:	f7ff ff31 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80013f2:	2004      	movs	r0, #4
 80013f4:	f7ff ff2e 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80013f8:	2010      	movs	r0, #16
 80013fa:	f7ff ff2b 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80013fe:	2007      	movs	r0, #7
 8001400:	f7ff ff28 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001404:	202a      	movs	r0, #42	; 0x2a
 8001406:	f7ff ff25 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800140a:	2047      	movs	r0, #71	; 0x47
 800140c:	f7ff ff22 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001410:	2039      	movs	r0, #57	; 0x39
 8001412:	f7ff ff1f 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001416:	2003      	movs	r0, #3
 8001418:	f7ff ff1c 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800141c:	2006      	movs	r0, #6
 800141e:	f7ff ff19 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001422:	2006      	movs	r0, #6
 8001424:	f7ff ff16 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001428:	2030      	movs	r0, #48	; 0x30
 800142a:	f7ff ff13 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800142e:	2038      	movs	r0, #56	; 0x38
 8001430:	f7ff ff10 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001434:	200f      	movs	r0, #15
 8001436:	f7ff ff0d 	bl	8001254 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800143a:	2036      	movs	r0, #54	; 0x36
 800143c:	f7ff fefc 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001440:	20c8      	movs	r0, #200	; 0xc8
 8001442:	f7ff ff07 	bl	8001254 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001446:	202a      	movs	r0, #42	; 0x2a
 8001448:	f7ff fef6 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff ff01 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fefe 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff fefb 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800145e:	20ef      	movs	r0, #239	; 0xef
 8001460:	f7ff fef8 	bl	8001254 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001464:	202b      	movs	r0, #43	; 0x2b
 8001466:	f7ff fee7 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fef2 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff feef 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff feec 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 800147c:	203f      	movs	r0, #63	; 0x3f
 800147e:	f7ff fee9 	bl	8001254 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001482:	203a      	movs	r0, #58	; 0x3a
 8001484:	f7ff fed8 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001488:	2055      	movs	r0, #85	; 0x55
 800148a:	f7ff fee3 	bl	8001254 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800148e:	2011      	movs	r0, #17
 8001490:	f7ff fed2 	bl	8001238 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <LCD_REG_Config+0x230>)
 8001496:	f7ff fe77 	bl	8001188 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800149a:	2029      	movs	r0, #41	; 0x29
 800149c:	f7ff fecc 	bl	8001238 <LCD_Write_Cmd>
	
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	0002bffc 	.word	0x0002bffc

080014a8 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4604      	mov	r4, r0
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4623      	mov	r3, r4
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	4603      	mov	r3, r0
 80014bc:	80bb      	strh	r3, [r7, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	807b      	strh	r3, [r7, #2]
 80014c2:	4613      	mov	r3, r2
 80014c4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80014c6:	202a      	movs	r0, #42	; 0x2a
 80014c8:	f7ff feb6 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff febe 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff feb8 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	4413      	add	r3, r2
 80014ea:	3b01      	subs	r3, #1
 80014ec:	121b      	asrs	r3, r3, #8
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff feaf 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80014f6:	88fa      	ldrh	r2, [r7, #6]
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	4413      	add	r3, r2
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fea4 	bl	8001254 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800150c:	202b      	movs	r0, #43	; 0x2b
 800150e:	f7ff fe93 	bl	8001238 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fe9b 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe95 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800152a:	88ba      	ldrh	r2, [r7, #4]
 800152c:	883b      	ldrh	r3, [r7, #0]
 800152e:	4413      	add	r3, r2
 8001530:	3b01      	subs	r3, #1
 8001532:	121b      	asrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fe8c 	bl	8001254 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800153c:	88ba      	ldrh	r2, [r7, #4]
 800153e:	883b      	ldrh	r3, [r7, #0]
 8001540:	4413      	add	r3, r2
 8001542:	b29b      	uxth	r3, r3
 8001544:	3b01      	subs	r3, #1
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fe81 	bl	8001254 <LCD_Write_Data>
	
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}

0800155a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800156a:	202c      	movs	r0, #44	; 0x2c
 800156c:	f7ff fe64 	bl	8001238 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	e006      	b.n	8001584 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fe6b 	bl	8001254 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3301      	adds	r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3f4      	bcc.n	8001576 <LCD_FillColor+0x1c>
		
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	4604      	mov	r4, r0
 80015a0:	4608      	mov	r0, r1
 80015a2:	4611      	mov	r1, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	4623      	mov	r3, r4
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	4603      	mov	r3, r0
 80015ac:	80bb      	strh	r3, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	807b      	strh	r3, [r7, #2]
 80015b2:	4613      	mov	r3, r2
 80015b4:	803b      	strh	r3, [r7, #0]
	//Check Dark Mode Is Toggle
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <LCD_Clear+0x58>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <LCD_Clear+0x2a>
 80015be:	2300      	movs	r3, #0
 80015c0:	e001      	b.n	80015c6 <LCD_Clear+0x2e>
 80015c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c6:	81fb      	strh	r3, [r7, #14]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80015c8:	883b      	ldrh	r3, [r7, #0]
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	88b9      	ldrh	r1, [r7, #4]
 80015ce:	88f8      	ldrh	r0, [r7, #6]
 80015d0:	f7ff ff6a 	bl	80014a8 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, bg_color );
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	883a      	ldrh	r2, [r7, #0]
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f7ff ffb9 	bl	800155a <LCD_FillColor>
	
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	20000a0c 	.word	0x20000a0c

080015f4 <LCD_Clear_Color>:

void LCD_Clear_Color ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor){
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4623      	mov	r3, r4
 8001604:	80fb      	strh	r3, [r7, #6]
 8001606:	4603      	mov	r3, r0
 8001608:	80bb      	strh	r3, [r7, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	807b      	strh	r3, [r7, #2]
 800160e:	4613      	mov	r3, r2
 8001610:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001612:	883b      	ldrh	r3, [r7, #0]
 8001614:	887a      	ldrh	r2, [r7, #2]
 8001616:	88b9      	ldrh	r1, [r7, #4]
 8001618:	88f8      	ldrh	r0, [r7, #6]
 800161a:	f7ff ff45 	bl	80014a8 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	883a      	ldrh	r2, [r7, #0]
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	461a      	mov	r2, r3
 8001628:	8b3b      	ldrh	r3, [r7, #24]
 800162a:	4619      	mov	r1, r3
 800162c:	4610      	mov	r0, r2
 800162e:	f7ff ff94 	bl	800155a <LCD_FillColor>
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
	...

0800163c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	460b      	mov	r3, r1
 8001648:	80bb      	strh	r3, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	//Invert Color If Darkmode is Toggle
	uint16_t ft_color = darkmode_toggle?WHITE:BLACK;
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <LCD_DrawChar+0xb0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <LCD_DrawChar+0x20>
 8001656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165a:	e000      	b.n	800165e <LCD_DrawChar+0x22>
 800165c:	2300      	movs	r3, #0
 800165e:	827b      	strh	r3, [r7, #18]
	uint16_t bg_color = darkmode_toggle?BLACK:WHITE;
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <LCD_DrawChar+0xb0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <LCD_DrawChar+0x30>
 8001668:	2300      	movs	r3, #0
 800166a:	e001      	b.n	8001670 <LCD_DrawChar+0x34>
 800166c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001670:	823b      	strh	r3, [r7, #16]

	ucRelativePositon = cChar - ' ';
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	3b20      	subs	r3, #32
 8001676:	73fb      	strb	r3, [r7, #15]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001678:	88b9      	ldrh	r1, [r7, #4]
 800167a:	88f8      	ldrh	r0, [r7, #6]
 800167c:	2310      	movs	r3, #16
 800167e:	2208      	movs	r2, #8
 8001680:	f7ff ff12 	bl	80014a8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001684:	202c      	movs	r0, #44	; 0x2c
 8001686:	f7ff fdd7 	bl	8001238 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800168a:	2300      	movs	r3, #0
 800168c:	75bb      	strb	r3, [r7, #22]
 800168e:	e024      	b.n	80016da <LCD_DrawChar+0x9e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	7dbb      	ldrb	r3, [r7, #22]
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <LCD_DrawChar+0xb4>)
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	440a      	add	r2, r1
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	75fb      	strb	r3, [r7, #23]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80016a0:	2300      	movs	r3, #0
 80016a2:	757b      	strb	r3, [r7, #21]
 80016a4:	e013      	b.n	80016ce <LCD_DrawChar+0x92>
		{
			if ( ucTemp & 0x01 )
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <LCD_DrawChar+0x7e>
				LCD_Write_Data ( ft_color );
 80016b0:	8a7b      	ldrh	r3, [r7, #18]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fdce 	bl	8001254 <LCD_Write_Data>
 80016b8:	e003      	b.n	80016c2 <LCD_DrawChar+0x86>
			
			else
				LCD_Write_Data (  bg_color );
 80016ba:	8a3b      	ldrh	r3, [r7, #16]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fdc9 	bl	8001254 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	75fb      	strb	r3, [r7, #23]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80016c8:	7d7b      	ldrb	r3, [r7, #21]
 80016ca:	3301      	adds	r3, #1
 80016cc:	757b      	strb	r3, [r7, #21]
 80016ce:	7d7b      	ldrb	r3, [r7, #21]
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	d9e8      	bls.n	80016a6 <LCD_DrawChar+0x6a>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80016d4:	7dbb      	ldrb	r3, [r7, #22]
 80016d6:	3301      	adds	r3, #1
 80016d8:	75bb      	strb	r3, [r7, #22]
 80016da:	7dbb      	ldrb	r3, [r7, #22]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d9d7      	bls.n	8001690 <LCD_DrawChar+0x54>
			
		}
		
	}
	
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000a0c 	.word	0x20000a0c
 80016f0:	0800a62c 	.word	0x0800a62c

080016f4 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	603a      	str	r2, [r7, #0]
 80016fe:	80fb      	strh	r3, [r7, #6]
 8001700:	460b      	mov	r3, r1
 8001702:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001704:	e01c      	b.n	8001740 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	2be8      	cmp	r3, #232	; 0xe8
 800170a:	d904      	bls.n	8001716 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800170c:	2300      	movs	r3, #0
 800170e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	3310      	adds	r3, #16
 8001714:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800171c:	d903      	bls.n	8001726 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800171e:	2300      	movs	r3, #0
 8001720:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001722:	2300      	movs	r3, #0
 8001724:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	88b9      	ldrh	r1, [r7, #4]
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff84 	bl	800163c <LCD_DrawChar>
		
		pStr ++;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	3308      	adds	r3, #8
 800173e:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1de      	bne.n	8001706 <LCD_DrawString+0x12>
		
	}
	
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	4604      	mov	r4, r0
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4623      	mov	r3, r4
 8001764:	80fb      	strh	r3, [r7, #6]
 8001766:	4603      	mov	r3, r0
 8001768:	80bb      	strh	r3, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	70fb      	strb	r3, [r7, #3]
 800176e:	4613      	mov	r3, r2
 8001770:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	3b20      	subs	r3, #32
 8001776:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001778:	88b9      	ldrh	r1, [r7, #4]
 800177a:	88f8      	ldrh	r0, [r7, #6]
 800177c:	2310      	movs	r3, #16
 800177e:	2208      	movs	r2, #8
 8001780:	f7ff fe92 	bl	80014a8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001784:	202c      	movs	r0, #44	; 0x2c
 8001786:	f7ff fd57 	bl	8001238 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800178a:	2300      	movs	r3, #0
 800178c:	73bb      	strb	r3, [r7, #14]
 800178e:	e024      	b.n	80017da <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001790:	7b3a      	ldrb	r2, [r7, #12]
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	4915      	ldr	r1, [pc, #84]	; (80017ec <LCD_DrawChar_Color+0x98>)
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	440a      	add	r2, r1
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80017a0:	2300      	movs	r3, #0
 80017a2:	737b      	strb	r3, [r7, #13]
 80017a4:	e013      	b.n	80017ce <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80017b0:	8c3b      	ldrh	r3, [r7, #32]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fd4e 	bl	8001254 <LCD_Write_Data>
 80017b8:	e003      	b.n	80017c2 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80017ba:	883b      	ldrh	r3, [r7, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fd49 	bl	8001254 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80017c8:	7b7b      	ldrb	r3, [r7, #13]
 80017ca:	3301      	adds	r3, #1
 80017cc:	737b      	strb	r3, [r7, #13]
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d9e8      	bls.n	80017a6 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80017d4:	7bbb      	ldrb	r3, [r7, #14]
 80017d6:	3301      	adds	r3, #1
 80017d8:	73bb      	strb	r3, [r7, #14]
 80017da:	7bbb      	ldrb	r3, [r7, #14]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d9d7      	bls.n	8001790 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd90      	pop	{r4, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	0800a62c 	.word	0x0800a62c

080017f0 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	4613      	mov	r3, r2
 80017fe:	80bb      	strh	r3, [r7, #4]
  LCD_Clear_Color ( usX - 10, usY, 20, 1, RED);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3b0a      	subs	r3, #10
 8001804:	b298      	uxth	r0, r3
 8001806:	88b9      	ldrh	r1, [r7, #4]
 8001808:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	2214      	movs	r2, #20
 8001812:	f7ff feef 	bl	80015f4 <LCD_Clear_Color>
  LCD_Clear_Color ( usX, usY - 10, 1, 20, RED);
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	3b0a      	subs	r3, #10
 800181a:	b299      	uxth	r1, r3
 800181c:	88f8      	ldrh	r0, [r7, #6]
 800181e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2314      	movs	r3, #20
 8001826:	2201      	movs	r2, #1
 8001828:	f7ff fee4 	bl	80015f4 <LCD_Clear_Color>
	
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b087      	sub	sp, #28
 8001838:	af02      	add	r7, sp, #8
 800183a:	60ba      	str	r2, [r7, #8]
 800183c:	461a      	mov	r2, r3
 800183e:	4603      	mov	r3, r0
 8001840:	81fb      	strh	r3, [r7, #14]
 8001842:	460b      	mov	r3, r1
 8001844:	81bb      	strh	r3, [r7, #12]
 8001846:	4613      	mov	r3, r2
 8001848:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800184a:	e01f      	b.n	800188c <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800184c:	89fb      	ldrh	r3, [r7, #14]
 800184e:	2be8      	cmp	r3, #232	; 0xe8
 8001850:	d904      	bls.n	800185c <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001852:	2300      	movs	r3, #0
 8001854:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 8001856:	89bb      	ldrh	r3, [r7, #12]
 8001858:	3310      	adds	r3, #16
 800185a:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800185c:	89bb      	ldrh	r3, [r7, #12]
 800185e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001862:	d903      	bls.n	800186c <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001864:	2300      	movs	r3, #0
 8001866:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 8001868:	2300      	movs	r3, #0
 800186a:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	88fc      	ldrh	r4, [r7, #6]
 8001872:	89b9      	ldrh	r1, [r7, #12]
 8001874:	89f8      	ldrh	r0, [r7, #14]
 8001876:	8c3b      	ldrh	r3, [r7, #32]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	4623      	mov	r3, r4
 800187c:	f7ff ff6a 	bl	8001754 <LCD_DrawChar_Color>
		
		pStr ++;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3301      	adds	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	3308      	adds	r3, #8
 800188a:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1db      	bne.n	800184c <LCD_DrawString_Color+0x18>
		
	}
	
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bd90      	pop	{r4, r7, pc}
	...

080018a0 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	f200 80a0 	bhi.w	80019f4 <LCD_GramScan+0x154>
 80018b4:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <LCD_GramScan+0x1c>)
 80018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	08001917 	.word	0x08001917
 80018c4:	08001961 	.word	0x08001961
 80018c8:	080019ab 	.word	0x080019ab

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 80018cc:	2036      	movs	r0, #54	; 0x36
 80018ce:	f7ff fcb3 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 80018d2:	20c8      	movs	r0, #200	; 0xc8
 80018d4:	f7ff fcbe 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80018d8:	202a      	movs	r0, #42	; 0x2a
 80018da:	f7ff fcad 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fcb8 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fcb5 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fcb2 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 80018f0:	20ef      	movs	r0, #239	; 0xef
 80018f2:	f7ff fcaf 	bl	8001254 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80018f6:	202b      	movs	r0, #43	; 0x2b
 80018f8:	f7ff fc9e 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff fca9 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff fca6 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff fca3 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 800190e:	203f      	movs	r0, #63	; 0x3f
 8001910:	f7ff fca0 	bl	8001254 <LCD_Write_Data>
					
		  break;
 8001914:	e06e      	b.n	80019f4 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001916:	2036      	movs	r0, #54	; 0x36
 8001918:	f7ff fc8e 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 800191c:	2068      	movs	r0, #104	; 0x68
 800191e:	f7ff fc99 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001922:	202a      	movs	r0, #42	; 0x2a
 8001924:	f7ff fc88 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fc93 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fc90 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001934:	2001      	movs	r0, #1
 8001936:	f7ff fc8d 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 800193a:	203f      	movs	r0, #63	; 0x3f
 800193c:	f7ff fc8a 	bl	8001254 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001940:	202b      	movs	r0, #43	; 0x2b
 8001942:	f7ff fc79 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff fc84 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff fc81 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fc7e 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001958:	20ef      	movs	r0, #239	; 0xef
 800195a:	f7ff fc7b 	bl	8001254 <LCD_Write_Data>
		
		  break;
 800195e:	e049      	b.n	80019f4 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001960:	2036      	movs	r0, #54	; 0x36
 8001962:	f7ff fc69 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001966:	2028      	movs	r0, #40	; 0x28
 8001968:	f7ff fc74 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 800196c:	202a      	movs	r0, #42	; 0x2a
 800196e:	f7ff fc63 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff fc6e 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fc6b 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff fc68 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001984:	203f      	movs	r0, #63	; 0x3f
 8001986:	f7ff fc65 	bl	8001254 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800198a:	202b      	movs	r0, #43	; 0x2b
 800198c:	f7ff fc54 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fc5f 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fc5c 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fc59 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 80019a2:	20ef      	movs	r0, #239	; 0xef
 80019a4:	f7ff fc56 	bl	8001254 <LCD_Write_Data>
		  
		  break;
 80019a8:	e024      	b.n	80019f4 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 80019aa:	2036      	movs	r0, #54	; 0x36
 80019ac:	f7ff fc44 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 80019b0:	2048      	movs	r0, #72	; 0x48
 80019b2:	f7ff fc4f 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80019b6:	202a      	movs	r0, #42	; 0x2a
 80019b8:	f7ff fc3e 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fc49 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fc46 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fc43 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 80019ce:	20ef      	movs	r0, #239	; 0xef
 80019d0:	f7ff fc40 	bl	8001254 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80019d4:	202b      	movs	r0, #43	; 0x2b
 80019d6:	f7ff fc2f 	bl	8001238 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fc3a 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fc37 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff fc34 	bl	8001254 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 80019ec:	203f      	movs	r0, #63	; 0x3f
 80019ee:	f7ff fc31 	bl	8001254 <LCD_Write_Data>
		
	    break;
 80019f2:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 80019f4:	202c      	movs	r0, #44	; 0x2c
 80019f6:	f7ff fc1f 	bl	8001238 <LCD_Write_Cmd>
	
	
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop

08001a04 <LCD_Darkmode_Toggle>:

void LCD_Darkmode_Toggle(unsigned char *petStats){
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	if (!darkmode_toggle) {
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <LCD_Darkmode_Toggle+0x30>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <LCD_Darkmode_Toggle+0x1c>
		darkmode_toggle = 1;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <LCD_Darkmode_Toggle+0x30>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
		petStats = sleep;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <LCD_Darkmode_Toggle+0x34>)
 8001a1c:	607b      	str	r3, [r7, #4]
	}
	else {
		darkmode_toggle = 0;
		petStats = normal;
	}
}
 8001a1e:	e004      	b.n	8001a2a <LCD_Darkmode_Toggle+0x26>
		darkmode_toggle = 0;
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <LCD_Darkmode_Toggle+0x30>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
		petStats = normal;
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <LCD_Darkmode_Toggle+0x38>)
 8001a28:	607b      	str	r3, [r7, #4]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000a0c 	.word	0x20000a0c
 8001a38:	08018d5c 	.word	0x08018d5c
 8001a3c:	0800ac4c 	.word	0x0800ac4c

08001a40 <LCD_DrawPicture>:

void LCD_DrawPicture(uint16_t StartX, uint16_t StartY,unsigned char *pic) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	603a      	str	r2, [r7, #0]
 8001a4a:	80fb      	strh	r3, [r7, #6]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	80bb      	strh	r3, [r7, #4]
		uint32_t i = 8, len;
 8001a50:	2308      	movs	r3, #8
 8001a52:	617b      	str	r3, [r7, #20]
		uint16_t temp, x, y;

		x = ((uint16_t) (pic[2] << 8) + pic[3]) - 1;	  	//get width
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3302      	adds	r3, #2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	3303      	adds	r3, #3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	827b      	strh	r3, [r7, #18]
		y = ((uint16_t) (pic[4] << 8) + pic[5]) - 1;	  	//get height
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	3304      	adds	r3, #4
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	3305      	adds	r3, #5
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	823b      	strh	r3, [r7, #16]

		LCD_OpenWindow ( StartX, StartY, 120,120 );
 8001a8c:	88b9      	ldrh	r1, [r7, #4]
 8001a8e:	88f8      	ldrh	r0, [r7, #6]
 8001a90:	2378      	movs	r3, #120	; 0x78
 8001a92:	2278      	movs	r2, #120	; 0x78
 8001a94:	f7ff fd08 	bl	80014a8 <LCD_OpenWindow>
		//LCD_FillColor ( StartX*StartY ,0x01010);
		LCD_Write_Cmd(CMD_SetPixel);					//fillcolor
 8001a98:	202c      	movs	r0, #44	; 0x2c
 8001a9a:	f7ff fbcd 	bl	8001238 <LCD_Write_Cmd>
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
				* ((uint16_t) (pic[4] << 8) + pic[5]);   	//calculate size
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	3204      	adds	r2, #4
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	b292      	uxth	r2, r2
 8001abc:	0212      	lsls	r2, r2, #8
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	3205      	adds	r2, #5
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	440a      	add	r2, r1
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	005b      	lsls	r3, r3, #1
		len = 2 * ((uint16_t) (pic[2] << 8) + pic[3])
 8001ad0:	60fb      	str	r3, [r7, #12]

		while (i < (len + 8)) {							 	//start from the 9th
 8001ad2:	e015      	b.n	8001b00 <LCD_DrawPicture+0xc0>
			temp = (uint16_t) (pic[i] << 8) | pic[i + 1];	//2bits once
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	440b      	add	r3, r1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4313      	orrs	r3, r2
 8001af0:	817b      	strh	r3, [r7, #10]
			LCD_Write_Data(temp);
 8001af2:	897b      	ldrh	r3, [r7, #10]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fbad 	bl	8001254 <LCD_Write_Data>
			i = i + 2;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3302      	adds	r3, #2
 8001afe:	617b      	str	r3, [r7, #20]
		while (i < (len + 8)) {							 	//start from the 9th
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3308      	adds	r3, #8
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d3e4      	bcc.n	8001ad4 <LCD_DrawPicture+0x94>
		}
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1a:	f001 fe6b 	bl	80037f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1e:	f000 f8ab 	bl	8001c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b22:	f000 f9cd 	bl	8001ec0 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001b26:	f000 fa7f 	bl	8002028 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001b2a:	f000 f99f 	bl	8001e6c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001b2e:	f000 f903 	bl	8001d38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b32:	f000 f94d 	bl	8001dd0 <MX_TIM3_Init>
  	 * Module Initializations:
  	 * rtc.c
  	 * XPT2046.c
  	 * LCD
  	 */
	RTC_Init(&hrtc);
 8001b36:	4847      	ldr	r0, [pc, #284]	; (8001c54 <main+0x140>)
 8001b38:	f000 fae0 	bl	80020fc <RTC_Init>
	macXPT2046_CS_DISABLE();
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b42:	4845      	ldr	r0, [pc, #276]	; (8001c58 <main+0x144>)
 8001b44:	f002 f995 	bl	8003e72 <HAL_GPIO_WritePin>
	LCD_INIT();
 8001b48:	f7ff fb2f 	bl	80011aa <LCD_INIT>
	DHT11_datastruct DHT11_data; // read data by calling -  DHT11_ReadData(&DHT11_data);
	strType_XPT2046_Coordinate Coordinate; //Coordinate of LCD
	TimeStamp real_time; //read real time data by calling - get_TimeStamp(&real_time);

	//Flow control of UI
	uint8_t mode = 0; //Current Mode: Mode 0 = Home, Mode 1 = Drink Water, Mode 3 = Pet
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77fb      	strb	r3, [r7, #31]
	uint8_t mode_new = 0; //To Determine Whether A Mode is Updated
 8001b50:	2300      	movs	r3, #0
 8001b52:	70fb      	strb	r3, [r7, #3]
	uint8_t render_done=0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	70bb      	strb	r3, [r7, #2]
	const unsigned char * petStats = normal;
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <main+0x148>)
 8001b5a:	61bb      	str	r3, [r7, #24]
	//Calibration of TouchPad
	while( ! XPT2046_Touch_Calibrate () );
 8001b5c:	bf00      	nop
 8001b5e:	f001 fb75 	bl	800324c <XPT2046_Touch_Calibrate>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0fa      	beq.n	8001b5e <main+0x4a>
	timer_min(1);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f000 ffe1 	bl	8002b30 <timer_min>
  /* USER CODE BEGIN WHILE */

	
  while (1)
  {
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	493b      	ldr	r1, [pc, #236]	; (8001c60 <main+0x14c>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 fd81 	bl	800367c <XPT2046_Get_TouchedPoint>
	  			&strXPT2046_TouchPara);

	  //!!Just For Testing, Need Refactoring Later
	  if(mode==0) {
 8001b7a:	7ffb      	ldrb	r3, [r7, #31]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d112      	bne.n	8001ba6 <main+0x92>
		  RTC_Get();
 8001b80:	f000 fb9c 	bl	80022bc <RTC_Get>
		  UI_Home_Display_Date(real_time.ryear, real_time.rmon, real_time.rday);
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	79b9      	ldrb	r1, [r7, #6]
 8001b88:	79fa      	ldrb	r2, [r7, #7]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fa74 	bl	8001078 <UI_Home_Display_Date>
		  UI_Home_Display_Time(real_time.rhour, real_time.rmin, real_time.rsec);
 8001b90:	7a3b      	ldrb	r3, [r7, #8]
 8001b92:	7a79      	ldrb	r1, [r7, #9]
 8001b94:	7aba      	ldrb	r2, [r7, #10]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff faaa 	bl	80010f0 <UI_Home_Display_Time>
		  UI_Home_Display_Pet(60,70,petStats);
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	2146      	movs	r1, #70	; 0x46
 8001ba0:	203c      	movs	r0, #60	; 0x3c
 8001ba2:	f7ff fadf 	bl	8001164 <UI_Home_Display_Pet>
	  }
	  get_TimeStamp(&real_time);
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fd0f 	bl	80025cc <get_TimeStamp>
	  if (petStats != sleep){
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4a2c      	ldr	r2, [pc, #176]	; (8001c64 <main+0x150>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d001      	beq.n	8001bba <main+0xa6>
		  petStats = normal;
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <main+0x148>)
 8001bb8:	61bb      	str	r3, [r7, #24]
	  }

	  do {
		  //Home Buttons
		  if(mode==0){
 8001bba:	7ffb      	ldrb	r3, [r7, #31]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d129      	bne.n	8001c14 <main+0x100>
			  if(Check_touchkey(&home_drink_water,&Coordinate)) {mode_new = 1; break;}
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4828      	ldr	r0, [pc, #160]	; (8001c68 <main+0x154>)
 8001bc8:	f7ff f96e 	bl	8000ea8 <Check_touchkey>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <main+0xc4>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	70fb      	strb	r3, [r7, #3]
 8001bd6:	e01d      	b.n	8001c14 <main+0x100>
			  if(Check_touchkey(&home_dark_mode,&Coordinate)) {mode_new = 2; break;}
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4823      	ldr	r0, [pc, #140]	; (8001c6c <main+0x158>)
 8001be0:	f7ff f962 	bl	8000ea8 <Check_touchkey>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <main+0xdc>
 8001bea:	2302      	movs	r3, #2
 8001bec:	70fb      	strb	r3, [r7, #3]
 8001bee:	e011      	b.n	8001c14 <main+0x100>
			  if(Check_touchkey(&home_pet,&Coordinate)) {mode_new = 0;	if (petStats != sleep) {petStats = happy1;}; break;}
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	481e      	ldr	r0, [pc, #120]	; (8001c70 <main+0x15c>)
 8001bf8:	f7ff f956 	bl	8000ea8 <Check_touchkey>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <main+0x100>
 8001c02:	2300      	movs	r3, #0
 8001c04:	70fb      	strb	r3, [r7, #3]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <main+0x150>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d001      	beq.n	8001c12 <main+0xfe>
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <main+0x160>)
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	bf00      	nop
		  //Other Buttons In Other Screen

	  } while (0);

	  //Reset Coordinates
	  XPT2046_Reset_TouchPoint(&Coordinate);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 fdb6 	bl	800378a <XPT2046_Reset_TouchPoint>

	  if(mode != mode_new){
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	7ffa      	ldrb	r2, [r7, #31]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d00f      	beq.n	8001c46 <main+0x132>
		  mode = mode_new;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	77fb      	strb	r3, [r7, #31]
		  render_done = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	70bb      	strb	r3, [r7, #2]
		  if (mode_new == 2){
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d108      	bne.n	8001c46 <main+0x132>
			  if (petStats == sleep){
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <main+0x150>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d102      	bne.n	8001c42 <main+0x12e>
				  petStats = normal;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <main+0x148>)
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	e001      	b.n	8001c46 <main+0x132>
			  }
			  else {
				  petStats = sleep;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <main+0x150>)
 8001c44:	61bb      	str	r3, [r7, #24]
			  }
		  }
	  }
	  //Render LCD If Enter New Mode
	  Render(&mode_new, &render_done,petStats);
 8001c46:	1cb9      	adds	r1, r7, #2
 8001c48:	1cfb      	adds	r3, r7, #3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f955 	bl	8000efc <Render>
	  XPT2046_Get_TouchedPoint(&Coordinate,
 8001c52:	e78c      	b.n	8001b6e <main+0x5a>
 8001c54:	20000a10 	.word	0x20000a10
 8001c58:	40011400 	.word	0x40011400
 8001c5c:	0800ac4c 	.word	0x0800ac4c
 8001c60:	20000008 	.word	0x20000008
 8001c64:	08018d5c 	.word	0x08018d5c
 8001c68:	0800ac1c 	.word	0x0800ac1c
 8001c6c:	0800ac2c 	.word	0x0800ac2c
 8001c70:	0800ac3c 	.word	0x0800ac3c
 8001c74:	08011cd4 	.word	0x08011cd4

08001c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b096      	sub	sp, #88	; 0x58
 8001c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c82:	2228      	movs	r2, #40	; 0x28
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 ff4c 	bl	8005b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001cac:	2305      	movs	r3, #5
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ccc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 f912 	bl	8003f00 <HAL_RCC_OscConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001ce2:	f000 fa05 	bl	80020f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce6:	230f      	movs	r3, #15
 8001ce8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cea:	2302      	movs	r3, #2
 8001cec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	2102      	movs	r1, #2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 fb60 	bl	80043c8 <HAL_RCC_ClockConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d0e:	f000 f9ef 	bl	80020f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d12:	2301      	movs	r3, #1
 8001d14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 fd0e 	bl	8004740 <HAL_RCCEx_PeriphCLKConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d2a:	f000 f9e1 	bl	80020f0 <Error_Handler>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3758      	adds	r7, #88	; 0x58
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_TIM2_Init+0x94>)
 8001d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <MX_TIM2_Init+0x94>)
 8001d5e:	2247      	movs	r2, #71	; 0x47
 8001d60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_TIM2_Init+0x94>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <MX_TIM2_Init+0x94>)
 8001d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <MX_TIM2_Init+0x94>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <MX_TIM2_Init+0x94>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d7c:	4813      	ldr	r0, [pc, #76]	; (8001dcc <MX_TIM2_Init+0x94>)
 8001d7e:	f003 f809 	bl	8004d94 <HAL_TIM_Base_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d88:	f000 f9b2 	bl	80020f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d92:	f107 0308 	add.w	r3, r7, #8
 8001d96:	4619      	mov	r1, r3
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <MX_TIM2_Init+0x94>)
 8001d9a:	f003 f9b6 	bl	800510a <HAL_TIM_ConfigClockSource>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001da4:	f000 f9a4 	bl	80020f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_TIM2_Init+0x94>)
 8001db6:	f003 fbe4 	bl	8005582 <HAL_TIMEx_MasterConfigSynchronization>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001dc0:	f000 f996 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000a24 	.word	0x20000a24

08001dd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	463b      	mov	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <MX_TIM3_Init+0x94>)
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <MX_TIM3_Init+0x98>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <MX_TIM3_Init+0x94>)
 8001df4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001df8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <MX_TIM3_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33749;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <MX_TIM3_Init+0x94>)
 8001e02:	f248 32d5 	movw	r2, #33749	; 0x83d5
 8001e06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <MX_TIM3_Init+0x94>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <MX_TIM3_Init+0x94>)
 8001e10:	2280      	movs	r2, #128	; 0x80
 8001e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e14:	4813      	ldr	r0, [pc, #76]	; (8001e64 <MX_TIM3_Init+0x94>)
 8001e16:	f002 ffbd 	bl	8004d94 <HAL_TIM_Base_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e20:	f000 f966 	bl	80020f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480c      	ldr	r0, [pc, #48]	; (8001e64 <MX_TIM3_Init+0x94>)
 8001e32:	f003 f96a 	bl	800510a <HAL_TIM_ConfigClockSource>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e3c:	f000 f958 	bl	80020f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <MX_TIM3_Init+0x94>)
 8001e4e:	f003 fb98 	bl	8005582 <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e58:	f000 f94a 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000a64 	.word	0x20000a64
 8001e68:	40000400 	.word	0x40000400

08001e6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <MX_USART1_UART_Init+0x50>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	f003 fbc3 	bl	800562e <HAL_UART_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eae:	f000 f91f 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000aa4 	.word	0x20000aa4
 8001ebc:	40013800 	.word	0x40013800

08001ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec6:	f107 0318 	add.w	r3, r7, #24
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <MX_GPIO_Init+0x154>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a4e      	ldr	r2, [pc, #312]	; (8002014 <MX_GPIO_Init+0x154>)
 8001eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ede:	6193      	str	r3, [r2, #24]
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <MX_GPIO_Init+0x154>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eec:	4b49      	ldr	r3, [pc, #292]	; (8002014 <MX_GPIO_Init+0x154>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <MX_GPIO_Init+0x154>)
 8001ef2:	f043 0310 	orr.w	r3, r3, #16
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <MX_GPIO_Init+0x154>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <MX_GPIO_Init+0x154>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a42      	ldr	r2, [pc, #264]	; (8002014 <MX_GPIO_Init+0x154>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b40      	ldr	r3, [pc, #256]	; (8002014 <MX_GPIO_Init+0x154>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <MX_GPIO_Init+0x154>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a3c      	ldr	r2, [pc, #240]	; (8002014 <MX_GPIO_Init+0x154>)
 8001f22:	f043 0320 	orr.w	r3, r3, #32
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <MX_GPIO_Init+0x154>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	4b37      	ldr	r3, [pc, #220]	; (8002014 <MX_GPIO_Init+0x154>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a36      	ldr	r2, [pc, #216]	; (8002014 <MX_GPIO_Init+0x154>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b34      	ldr	r3, [pc, #208]	; (8002014 <MX_GPIO_Init+0x154>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2107      	movs	r1, #7
 8001f50:	4831      	ldr	r0, [pc, #196]	; (8002018 <MX_GPIO_Init+0x158>)
 8001f52:	f001 ff8e 	bl	8003e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	2140      	movs	r1, #64	; 0x40
 8001f5a:	482f      	ldr	r0, [pc, #188]	; (8002018 <MX_GPIO_Init+0x158>)
 8001f5c:	f001 ff89 	bl	8003e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	2123      	movs	r1, #35	; 0x23
 8001f64:	482d      	ldr	r0, [pc, #180]	; (800201c <MX_GPIO_Init+0x15c>)
 8001f66:	f001 ff84 	bl	8003e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001f70:	482b      	ldr	r0, [pc, #172]	; (8002020 <MX_GPIO_Init+0x160>)
 8001f72:	f001 ff7e 	bl	8003e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 DHT11_Pin PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|DHT11_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001f76:	2347      	movs	r3, #71	; 0x47
 8001f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f86:	f107 0318 	add.w	r3, r7, #24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4822      	ldr	r0, [pc, #136]	; (8002018 <MX_GPIO_Init+0x158>)
 8001f8e:	f001 fdc1 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f92:	2308      	movs	r3, #8
 8001f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9e:	f107 0318 	add.w	r3, r7, #24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	481c      	ldr	r0, [pc, #112]	; (8002018 <MX_GPIO_Init+0x158>)
 8001fa6:	f001 fdb5 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001faa:	2310      	movs	r3, #16
 8001fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <MX_GPIO_Init+0x164>)
 8001fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fb6:	f107 0318 	add.w	r3, r7, #24
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4816      	ldr	r0, [pc, #88]	; (8002018 <MX_GPIO_Init+0x158>)
 8001fbe:	f001 fda9 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001fc2:	2323      	movs	r3, #35	; 0x23
 8001fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd2:	f107 0318 	add.w	r3, r7, #24
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4810      	ldr	r0, [pc, #64]	; (800201c <MX_GPIO_Init+0x15c>)
 8001fda:	f001 fd9b 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001fde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff0:	f107 0318 	add.w	r3, r7, #24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480a      	ldr	r0, [pc, #40]	; (8002020 <MX_GPIO_Init+0x160>)
 8001ff8:	f001 fd8c 	bl	8003b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	200a      	movs	r0, #10
 8002002:	f001 fd50 	bl	8003aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002006:	200a      	movs	r0, #10
 8002008:	f001 fd69 	bl	8003ade <HAL_NVIC_EnableIRQ>

}
 800200c:	bf00      	nop
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40011800 	.word	0x40011800
 800201c:	40010c00 	.word	0x40010c00
 8002020:	40011400 	.word	0x40011400
 8002024:	10210000 	.word	0x10210000

08002028 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
 800203c:	615a      	str	r2, [r3, #20]
 800203e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <MX_FSMC_Init+0xbc>)
 8002042:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002046:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <MX_FSMC_Init+0xbc>)
 800204a:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <MX_FSMC_Init+0xc0>)
 800204c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <MX_FSMC_Init+0xbc>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <MX_FSMC_Init+0xbc>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <MX_FSMC_Init+0xbc>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <MX_FSMC_Init+0xbc>)
 8002062:	2210      	movs	r2, #16
 8002064:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <MX_FSMC_Init+0xbc>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <MX_FSMC_Init+0xbc>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <MX_FSMC_Init+0xbc>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_FSMC_Init+0xbc>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <MX_FSMC_Init+0xbc>)
 8002080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <MX_FSMC_Init+0xbc>)
 8002088:	2200      	movs	r2, #0
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_FSMC_Init+0xbc>)
 800208e:	2200      	movs	r2, #0
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <MX_FSMC_Init+0xbc>)
 8002094:	2200      	movs	r2, #0
 8002096:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <MX_FSMC_Init+0xbc>)
 800209a:	2200      	movs	r2, #0
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800209e:	230f      	movs	r3, #15
 80020a0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80020a2:	230f      	movs	r3, #15
 80020a4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80020a6:	23ff      	movs	r3, #255	; 0xff
 80020a8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80020aa:	230f      	movs	r3, #15
 80020ac:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80020ae:	2310      	movs	r3, #16
 80020b0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80020b2:	2311      	movs	r3, #17
 80020b4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	2200      	movs	r2, #0
 80020be:	4619      	mov	r1, r3
 80020c0:	4808      	ldr	r0, [pc, #32]	; (80020e4 <MX_FSMC_Init+0xbc>)
 80020c2:	f002 fe23 	bl	8004d0c <HAL_SRAM_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80020cc:	f000 f810 	bl	80020f0 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_FSMC_Init+0xc4>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	4a05      	ldr	r2, [pc, #20]	; (80020ec <MX_FSMC_Init+0xc4>)
 80020d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020da:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80020dc:	bf00      	nop
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000ae4 	.word	0x20000ae4
 80020e8:	a0000104 	.word	0xa0000104
 80020ec:	40010000 	.word	0x40010000

080020f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <RTC_Init>:
uint8_t rmon,rday,rhour,rmin,rsec,rweek;
uint8_t const table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5};
uint8_t const mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};

void RTC_Init(RTC_HandleTypeDef* hrtc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af02      	add	r7, sp, #8
 8002102:	6078      	str	r0, [r7, #4]
	hrtc->Instance = RTC;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <RTC_Init+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
	hrtc->Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	605a      	str	r2, [r3, #4]
	hrtc->Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(hrtc) != HAL_OK)
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f002 fcad 	bl	8004a78 <HAL_RTC_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <RTC_Init+0x2c>
	{
		Error_Handler();
 8002124:	f7ff ffe4 	bl	80020f0 <Error_Handler>
	}
	//Check If first time connect to power source
	if(HAL_RTCEx_BKUPRead(hrtc,RTC_BKP_DR1)!=0x5050){//Deafult Value should be 0xffff
 8002128:	2101      	movs	r1, #1
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f002 fdd2 	bl	8004cd4 <HAL_RTCEx_BKUPRead>
 8002130:	4603      	mov	r3, r0
 8002132:	f245 0250 	movw	r2, #20560	; 0x5050
 8002136:	4293      	cmp	r3, r2
 8002138:	d010      	beq.n	800215c <RTC_Init+0x60>
		HAL_RTCEx_BKUPWrite(hrtc,RTC_BKP_DR1,0x5050);
 800213a:	f245 0250 	movw	r2, #20560	; 0x5050
 800213e:	2101      	movs	r1, #1
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f002 fdad 	bl	8004ca0 <HAL_RTCEx_BKUPWrite>
		RTC_Set(2022,1,1,0,0,0);
 8002146:	2300      	movs	r3, #0
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2300      	movs	r3, #0
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	2201      	movs	r2, #1
 8002152:	2101      	movs	r1, #1
 8002154:	f240 70e6 	movw	r0, #2022	; 0x7e6
 8002158:	f000 f806 	bl	8002168 <RTC_Set>
	}
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40002800 	.word	0x40002800

08002168 <RTC_Set>:

uint8_t RTC_Set(uint16_t syear, int8_t smon, uint8_t sday,uint8_t rhour,uint8_t rmin,uint8_t rsec){
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	4604      	mov	r4, r0
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4623      	mov	r3, r4
 8002178:	80fb      	strh	r3, [r7, #6]
 800217a:	4603      	mov	r3, r0
 800217c:	717b      	strb	r3, [r7, #5]
 800217e:	460b      	mov	r3, r1
 8002180:	713b      	strb	r3, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set Time According To Parameters (Be Done Later Using USART)
	 */
	uint16_t t;
	uint32_t seccount=0;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
	if(syear<2000||syear>2099)return 1;// Range: 1970-2099
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002190:	d304      	bcc.n	800219c <RTC_Set+0x34>
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	f640 0233 	movw	r2, #2099	; 0x833
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <RTC_Set+0x38>
 800219c:	2301      	movs	r3, #1
 800219e:	e081      	b.n	80022a4 <RTC_Set+0x13c>
	for(t=1970;t<syear;++t){
 80021a0:	f240 73b2 	movw	r3, #1970	; 0x7b2
 80021a4:	81fb      	strh	r3, [r7, #14]
 80021a6:	e014      	b.n	80021d2 <RTC_Set+0x6a>
		if(Is_Leap_Year(t))seccount+=31622400;
 80021a8:	89fb      	ldrh	r3, [r7, #14]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f9dc 	bl	8002568 <Is_Leap_Year>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <RTC_Set+0x5c>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
 80021bc:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	e003      	b.n	80021cc <RTC_Set+0x64>
		else seccount+=31536000;
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <RTC_Set+0x144>)
 80021c8:	4413      	add	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
	for(t=1970;t<syear;++t){
 80021cc:	89fb      	ldrh	r3, [r7, #14]
 80021ce:	3301      	adds	r3, #1
 80021d0:	81fb      	strh	r3, [r7, #14]
 80021d2:	89fa      	ldrh	r2, [r7, #14]
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d3e6      	bcc.n	80021a8 <RTC_Set+0x40>
	}
	smon-=1;
 80021da:	797b      	ldrb	r3, [r7, #5]
 80021dc:	3b01      	subs	r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	717b      	strb	r3, [r7, #5]
	for(t=0;t<smon;t++){
 80021e2:	2300      	movs	r3, #0
 80021e4:	81fb      	strh	r3, [r7, #14]
 80021e6:	e01c      	b.n	8002222 <RTC_Set+0xba>
		seccount+=(uint32_t)mon_table[t]*86400;
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	4a31      	ldr	r2, [pc, #196]	; (80022b0 <RTC_Set+0x148>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <RTC_Set+0x14c>)
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4413      	add	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f9b2 	bl	8002568 <Is_Leap_Year>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <RTC_Set+0xb4>
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <RTC_Set+0xb4>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002216:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800221a:	60bb      	str	r3, [r7, #8]
	for(t=0;t<smon;t++){
 800221c:	89fb      	ldrh	r3, [r7, #14]
 800221e:	3301      	adds	r3, #1
 8002220:	81fb      	strh	r3, [r7, #14]
 8002222:	89fa      	ldrh	r2, [r7, #14]
 8002224:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002228:	429a      	cmp	r2, r3
 800222a:	dbdd      	blt.n	80021e8 <RTC_Set+0x80>
	}
	seccount+=(uint32_t)(sday-1)*86400;
 800222c:	793b      	ldrb	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	461a      	mov	r2, r3
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <RTC_Set+0x14c>)
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	4413      	add	r3, r2
 800223c:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rhour*3600;
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4413      	add	r3, r2
 800224c:	60bb      	str	r3, [r7, #8]
	seccount += (uint32_t)rmin*60;
 800224e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4413      	add	r3, r2
 8002260:	60bb      	str	r3, [r7, #8]
	seccount += rsec;
 8002262:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4413      	add	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]

	RTC->CRL|=1<<4;
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <RTC_Set+0x150>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <RTC_Set+0x150>)
 8002272:	f043 0310 	orr.w	r3, r3, #16
 8002276:	6053      	str	r3, [r2, #4]
	RTC->CNTL=seccount&0xffff;
 8002278:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <RTC_Set+0x150>)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	b29b      	uxth	r3, r3
 800227e:	61d3      	str	r3, [r2, #28]
	RTC->CNTH=seccount>>16;
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <RTC_Set+0x150>)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	6193      	str	r3, [r2, #24]
	RTC->CRL&=~(1<<4);
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <RTC_Set+0x150>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <RTC_Set+0x150>)
 800228e:	f023 0310 	bic.w	r3, r3, #16
 8002292:	6053      	str	r3, [r2, #4]
	while(!(RTC->CRL&(1<<5)));
 8002294:	bf00      	nop
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <RTC_Set+0x150>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f9      	beq.n	8002296 <RTC_Set+0x12e>

	return 0;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}
 80022ac:	01e13380 	.word	0x01e13380
 80022b0:	0801fdf0 	.word	0x0801fdf0
 80022b4:	00015180 	.word	0x00015180
 80022b8:	40002800 	.word	0x40002800

080022bc <RTC_Get>:

uint8_t RTC_Get(void){
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
	/*
	 * Refresh Time variables in rtc.c
	 */
	static uint16_t daycnt=0;
	uint32_t timecount=0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
	uint32_t temp=0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
	uint32_t temp1=0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]

	timecount=RTC->CNTH;
 80022ce:	4b65      	ldr	r3, [pc, #404]	; (8002464 <RTC_Get+0x1a8>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	607b      	str	r3, [r7, #4]
	timecount<<=16;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	607b      	str	r3, [r7, #4]
	timecount+=RTC->CNTL;
 80022da:	4b62      	ldr	r3, [pc, #392]	; (8002464 <RTC_Get+0x1a8>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	607b      	str	r3, [r7, #4]

	temp=timecount/86400;//Day
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a60      	ldr	r2, [pc, #384]	; (8002468 <RTC_Get+0x1ac>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	60fb      	str	r3, [r7, #12]
	if(daycnt!=temp){//New Day
 80022f0:	4b5e      	ldr	r3, [pc, #376]	; (800246c <RTC_Get+0x1b0>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d066      	beq.n	80023ca <RTC_Get+0x10e>
		daycnt=temp;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b5a      	ldr	r3, [pc, #360]	; (800246c <RTC_Get+0x1b0>)
 8002302:	801a      	strh	r2, [r3, #0]
		temp1=1970;
 8002304:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8002308:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 800230a:	e01b      	b.n	8002344 <RTC_Get+0x88>
			if(Is_Leap_Year(temp1)){
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f929 	bl	8002568 <Is_Leap_Year>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00c      	beq.n	8002336 <RTC_Get+0x7a>
				if(temp>=366)temp-=366;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8002322:	d304      	bcc.n	800232e <RTC_Get+0x72>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e007      	b.n	800233e <RTC_Get+0x82>
				else{temp1++; break;}
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3301      	adds	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	e00a      	b.n	800234c <RTC_Get+0x90>
			}
			else temp-=365;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 800233c:	60fb      	str	r3, [r7, #12]
			temp1++;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3301      	adds	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
		while(temp>=365){
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
 800234a:	d8df      	bhi.n	800230c <RTC_Get+0x50>
		}
		ryear=temp1;//Year
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b47      	ldr	r3, [pc, #284]	; (8002470 <RTC_Get+0x1b4>)
 8002352:	801a      	strh	r2, [r3, #0]
		temp1=0;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 8002358:	e024      	b.n	80023a4 <RTC_Get+0xe8>
			if(Is_Leap_Year(ryear)&&temp1==1){
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <RTC_Get+0x1b4>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f902 	bl	8002568 <Is_Leap_Year>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <RTC_Get+0xc2>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d106      	bne.n	800237e <RTC_Get+0xc2>
				if(temp>=29)temp-=29;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b1c      	cmp	r3, #28
 8002374:	d91a      	bls.n	80023ac <RTC_Get+0xf0>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b1d      	subs	r3, #29
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e00f      	b.n	800239e <RTC_Get+0xe2>
				else break;
			}else{
			if(temp>=mon_table[temp1])temp-=mon_table[temp1];
 800237e:	4a3d      	ldr	r2, [pc, #244]	; (8002474 <RTC_Get+0x1b8>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4413      	add	r3, r2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4293      	cmp	r3, r2
 800238c:	d310      	bcc.n	80023b0 <RTC_Get+0xf4>
 800238e:	4a39      	ldr	r2, [pc, #228]	; (8002474 <RTC_Get+0x1b8>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4413      	add	r3, r2
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
			else break;
			}
			temp1++;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3301      	adds	r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
		while(temp>=28){
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b1b      	cmp	r3, #27
 80023a8:	d8d7      	bhi.n	800235a <RTC_Get+0x9e>
 80023aa:	e002      	b.n	80023b2 <RTC_Get+0xf6>
				else break;
 80023ac:	bf00      	nop
 80023ae:	e000      	b.n	80023b2 <RTC_Get+0xf6>
			else break;
 80023b0:	bf00      	nop
		}
		rmon=temp1+1;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <RTC_Get+0x1bc>)
 80023bc:	701a      	strb	r2, [r3, #0]
		rday=temp+1;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <RTC_Get+0x1c0>)
 80023c8:	701a      	strb	r2, [r3, #0]
	}
	temp=timecount%86400;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a26      	ldr	r2, [pc, #152]	; (8002468 <RTC_Get+0x1ac>)
 80023ce:	fba2 1203 	umull	r1, r2, r2, r3
 80023d2:	0c12      	lsrs	r2, r2, #16
 80023d4:	492a      	ldr	r1, [pc, #168]	; (8002480 <RTC_Get+0x1c4>)
 80023d6:	fb01 f202 	mul.w	r2, r1, r2
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
	rhour=temp/3600;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a28      	ldr	r2, [pc, #160]	; (8002484 <RTC_Get+0x1c8>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0adb      	lsrs	r3, r3, #11
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b27      	ldr	r3, [pc, #156]	; (8002488 <RTC_Get+0x1cc>)
 80023ec:	701a      	strb	r2, [r3, #0]
	rmin=(temp%3600)/60;
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <RTC_Get+0x1c8>)
 80023f2:	fba3 1302 	umull	r1, r3, r3, r2
 80023f6:	0adb      	lsrs	r3, r3, #11
 80023f8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	4a22      	ldr	r2, [pc, #136]	; (800248c <RTC_Get+0x1d0>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <RTC_Get+0x1d4>)
 800240e:	701a      	strb	r2, [r3, #0]
	rsec=(temp%3600)%60;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <RTC_Get+0x1c8>)
 8002414:	fba2 1203 	umull	r1, r2, r2, r3
 8002418:	0ad2      	lsrs	r2, r2, #11
 800241a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800241e:	fb01 f202 	mul.w	r2, r1, r2
 8002422:	1a9a      	subs	r2, r3, r2
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <RTC_Get+0x1d0>)
 8002426:	fba3 1302 	umull	r1, r3, r3, r2
 800242a:	0959      	lsrs	r1, r3, #5
 800242c:	460b      	mov	r3, r1
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a5b      	subs	r3, r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	1ad1      	subs	r1, r2, r3
 8002436:	b2ca      	uxtb	r2, r1
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <RTC_Get+0x1d8>)
 800243a:	701a      	strb	r2, [r3, #0]
	rweek=RTC_Get_Week(ryear,rmon,rday);
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <RTC_Get+0x1b4>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <RTC_Get+0x1bc>)
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	b291      	uxth	r1, r2
 8002446:	4a0d      	ldr	r2, [pc, #52]	; (800247c <RTC_Get+0x1c0>)
 8002448:	7812      	ldrb	r2, [r2, #0]
 800244a:	b292      	uxth	r2, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f825 	bl	800249c <RTC_Get_Week>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <RTC_Get+0x1dc>)
 8002458:	701a      	strb	r2, [r3, #0]
	return 0;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40002800 	.word	0x40002800
 8002468:	c22e4507 	.word	0xc22e4507
 800246c:	20000b30 	.word	0x20000b30
 8002470:	20000b28 	.word	0x20000b28
 8002474:	0801fdf0 	.word	0x0801fdf0
 8002478:	20000b2a 	.word	0x20000b2a
 800247c:	20000b2b 	.word	0x20000b2b
 8002480:	00015180 	.word	0x00015180
 8002484:	91a2b3c5 	.word	0x91a2b3c5
 8002488:	20000b2c 	.word	0x20000b2c
 800248c:	88888889 	.word	0x88888889
 8002490:	20000b2d 	.word	0x20000b2d
 8002494:	20000b2e 	.word	0x20000b2e
 8002498:	20000b2f 	.word	0x20000b2f

0800249c <RTC_Get_Week>:

uint8_t RTC_Get_Week(uint16_t year, uint16_t month, uint16_t day){
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
 80024a6:	460b      	mov	r3, r1
 80024a8:	80bb      	strh	r3, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	807b      	strh	r3, [r7, #2]
	uint16_t temp2;
	uint8_t yearH,yearL;
	yearH=year/100;
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	4a2a      	ldr	r2, [pc, #168]	; (800255c <RTC_Get_Week+0xc0>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	733b      	strb	r3, [r7, #12]
	yearL=year%100;
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	4a27      	ldr	r2, [pc, #156]	; (800255c <RTC_Get_Week+0xc0>)
 80024c0:	fba2 1203 	umull	r1, r2, r2, r3
 80024c4:	0952      	lsrs	r2, r2, #5
 80024c6:	2164      	movs	r1, #100	; 0x64
 80024c8:	fb01 f202 	mul.w	r2, r1, r2
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	737b      	strb	r3, [r7, #13]
	if (yearH>19)yearL+=100;
 80024d2:	7b3b      	ldrb	r3, [r7, #12]
 80024d4:	2b13      	cmp	r3, #19
 80024d6:	d902      	bls.n	80024de <RTC_Get_Week+0x42>
 80024d8:	7b7b      	ldrb	r3, [r7, #13]
 80024da:	3364      	adds	r3, #100	; 0x64
 80024dc:	737b      	strb	r3, [r7, #13]
	temp2=yearL+yearL/4;
 80024de:	7b7b      	ldrb	r3, [r7, #13]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	7b7b      	ldrb	r3, [r7, #13]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	81fb      	strh	r3, [r7, #14]
	temp2=temp2%7;
 80024ee:	89fa      	ldrh	r2, [r7, #14]
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <RTC_Get_Week+0xc4>)
 80024f2:	fba3 1302 	umull	r1, r3, r3, r2
 80024f6:	1ad1      	subs	r1, r2, r3
 80024f8:	0849      	lsrs	r1, r1, #1
 80024fa:	440b      	add	r3, r1
 80024fc:	0899      	lsrs	r1, r3, #2
 80024fe:	460b      	mov	r3, r1
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a5b      	subs	r3, r3, r1
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	81fb      	strh	r3, [r7, #14]
	temp2=temp2+day+table_week[month-1];
 8002508:	89fa      	ldrh	r2, [r7, #14]
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	4413      	add	r3, r2
 800250e:	b29a      	uxth	r2, r3
 8002510:	88bb      	ldrh	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	4913      	ldr	r1, [pc, #76]	; (8002564 <RTC_Get_Week+0xc8>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	b29b      	uxth	r3, r3
 800251a:	4413      	add	r3, r2
 800251c:	81fb      	strh	r3, [r7, #14]
	if (yearL%4==0&&month<3)temp2--;
 800251e:	7b7b      	ldrb	r3, [r7, #13]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <RTC_Get_Week+0x9a>
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d802      	bhi.n	8002536 <RTC_Get_Week+0x9a>
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	3b01      	subs	r3, #1
 8002534:	81fb      	strh	r3, [r7, #14]
	return(temp2%7);
 8002536:	89fa      	ldrh	r2, [r7, #14]
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <RTC_Get_Week+0xc4>)
 800253a:	fba3 1302 	umull	r1, r3, r3, r2
 800253e:	1ad1      	subs	r1, r2, r3
 8002540:	0849      	lsrs	r1, r1, #1
 8002542:	440b      	add	r3, r1
 8002544:	0899      	lsrs	r1, r3, #2
 8002546:	460b      	mov	r3, r1
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a5b      	subs	r3, r3, r1
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	b29b      	uxth	r3, r3
 8002550:	b2db      	uxtb	r3, r3
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	51eb851f 	.word	0x51eb851f
 8002560:	24924925 	.word	0x24924925
 8002564:	0801fde4 	.word	0x0801fde4

08002568 <Is_Leap_Year>:

uint8_t Is_Leap_Year(uint16_t year){
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
	if(year%4==0){
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11e      	bne.n	80025bc <Is_Leap_Year+0x54>
		if(year%100==0){
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <Is_Leap_Year+0x60>)
 8002582:	fba2 1203 	umull	r1, r2, r2, r3
 8002586:	0952      	lsrs	r2, r2, #5
 8002588:	2164      	movs	r1, #100	; 0x64
 800258a:	fb01 f202 	mul.w	r2, r1, r2
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d110      	bne.n	80025b8 <Is_Leap_Year+0x50>
			if(year%400==0)return 1;
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <Is_Leap_Year+0x60>)
 800259a:	fba2 1203 	umull	r1, r2, r2, r3
 800259e:	09d2      	lsrs	r2, r2, #7
 80025a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80025a4:	fb01 f202 	mul.w	r2, r1, r2
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <Is_Leap_Year+0x4c>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e004      	b.n	80025be <Is_Leap_Year+0x56>
			else return 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e002      	b.n	80025be <Is_Leap_Year+0x56>
		}else return 1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <Is_Leap_Year+0x56>
	}else return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	51eb851f 	.word	0x51eb851f

080025cc <get_TimeStamp>:




void get_TimeStamp(TimeStamp* t){
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	/*
	 * Store Updated Values By a TimeStamp Pointer
	 */
	t->ryear = ryear;
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <get_TimeStamp+0x44>)
 80025d6:	881a      	ldrh	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	801a      	strh	r2, [r3, #0]
	t->rmon = rmon;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <get_TimeStamp+0x48>)
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	709a      	strb	r2, [r3, #2]
	t->rhour = rhour;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <get_TimeStamp+0x4c>)
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	711a      	strb	r2, [r3, #4]
	t->rmin = rmin;
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <get_TimeStamp+0x50>)
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	715a      	strb	r2, [r3, #5]
	t->rsec = rsec;
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <get_TimeStamp+0x54>)
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	719a      	strb	r2, [r3, #6]
	t->rweek = rweek;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <get_TimeStamp+0x58>)
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	71da      	strb	r2, [r3, #7]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000b28 	.word	0x20000b28
 8002614:	20000b2a 	.word	0x20000b2a
 8002618:	20000b2c 	.word	0x20000b2c
 800261c:	20000b2d 	.word	0x20000b2d
 8002620:	20000b2e 	.word	0x20000b2e
 8002624:	20000b2f 	.word	0x20000b2f

08002628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <HAL_MspInit+0x5c>)
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	4a14      	ldr	r2, [pc, #80]	; (8002684 <HAL_MspInit+0x5c>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6193      	str	r3, [r2, #24]
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_MspInit+0x5c>)
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_MspInit+0x5c>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_MspInit+0x5c>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002650:	61d3      	str	r3, [r2, #28]
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_MspInit+0x5c>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_MspInit+0x60>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_MspInit+0x60>)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	40021000 	.word	0x40021000
 8002688:	40010000 	.word	0x40010000

0800268c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <HAL_RTC_MspInit+0x3c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d110      	bne.n	80026c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800269e:	f001 fc23 	bl	8003ee8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_RTC_MspInit+0x40>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <HAL_RTC_MspInit+0x40>)
 80026a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026ac:	61d3      	str	r3, [r2, #28]
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_RTC_MspInit+0x40>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RTC_MspInit+0x44>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40002800 	.word	0x40002800
 80026cc:	40021000 	.word	0x40021000
 80026d0:	4242043c 	.word	0x4242043c

080026d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e4:	d10c      	bne.n	8002700 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	4a14      	ldr	r2, [pc, #80]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	61d3      	str	r3, [r2, #28]
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026fe:	e018      	b.n	8002732 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <HAL_TIM_Base_MspInit+0x6c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d113      	bne.n	8002732 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	61d3      	str	r3, [r2, #28]
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	201d      	movs	r0, #29
 8002728:	f001 f9bd 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800272c:	201d      	movs	r0, #29
 800272e:	f001 f9d6 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40000400 	.word	0x40000400

08002744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <HAL_UART_MspInit+0x8c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d131      	bne.n	80027c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_UART_MspInit+0x90>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <HAL_UART_MspInit+0x90>)
 800276a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276e:	6193      	str	r3, [r2, #24]
 8002770:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_UART_MspInit+0x90>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_UART_MspInit+0x90>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_UART_MspInit+0x90>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_UART_MspInit+0x90>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002794:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	4619      	mov	r1, r3
 80027a8:	480b      	ldr	r0, [pc, #44]	; (80027d8 <HAL_UART_MspInit+0x94>)
 80027aa:	f001 f9b3 	bl	8003b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	4619      	mov	r1, r3
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <HAL_UART_MspInit+0x94>)
 80027c4:	f001 f9a6 	bl	8003b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027c8:	bf00      	nop
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40013800 	.word	0x40013800
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010800 	.word	0x40010800

080027dc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_FSMC_MspInit+0x78>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d129      	bne.n	800284c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_FSMC_MspInit+0x78>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_FSMC_MspInit+0x7c>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4a15      	ldr	r2, [pc, #84]	; (8002858 <HAL_FSMC_MspInit+0x7c>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002808:	6153      	str	r3, [r2, #20]
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_FSMC_MspInit+0x7c>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002816:	f64f 7380 	movw	r3, #65408	; 0xff80
 800281a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002824:	f107 0308 	add.w	r3, r7, #8
 8002828:	4619      	mov	r1, r3
 800282a:	480c      	ldr	r0, [pc, #48]	; (800285c <HAL_FSMC_MspInit+0x80>)
 800282c:	f001 f972 	bl	8003b14 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002830:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002834:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	4619      	mov	r1, r3
 8002844:	4806      	ldr	r0, [pc, #24]	; (8002860 <HAL_FSMC_MspInit+0x84>)
 8002846:	f001 f965 	bl	8003b14 <HAL_GPIO_Init>
 800284a:	e000      	b.n	800284e <HAL_FSMC_MspInit+0x72>
    return;
 800284c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000b34 	.word	0x20000b34
 8002858:	40021000 	.word	0x40021000
 800285c:	40011800 	.word	0x40011800
 8002860:	40011400 	.word	0x40011400

08002864 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800286c:	f7ff ffb6 	bl	80027dc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <HardFault_Handler+0x4>

0800288a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288e:	e7fe      	b.n	800288e <MemManage_Handler+0x4>

08002890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002894:	e7fe      	b.n	8002894 <BusFault_Handler+0x4>

08002896 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <UsageFault_Handler+0x4>

0800289c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c4:	f000 ffdc 	bl	8003880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}

080028cc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <EXTI4_IRQHandler+0x2c>)
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <EXTI4_IRQHandler+0x22>
  {
		  ucXPT2046_TouchFlag = 1;
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <EXTI4_IRQHandler+0x30>)
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <EXTI4_IRQHandler+0x2c>)
 80028e4:	2210      	movs	r2, #16
 80028e6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80028e8:	2010      	movs	r0, #16
 80028ea:	f001 faf3 	bl	8003ed4 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80028ee:	2010      	movs	r0, #16
 80028f0:	f001 fad8 	bl	8003ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40010400 	.word	0x40010400
 80028fc:	20000b3e 	.word	0x20000b3e

08002900 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	extern uint8_t timer_left, start_counting;
	--timer_left;
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <TIM3_IRQHandler+0x3c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	3b01      	subs	r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <TIM3_IRQHandler+0x3c>)
 800290e:	701a      	strb	r2, [r3, #0]
	if(timer_left==0 && start_counting==1){
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <TIM3_IRQHandler+0x3c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10c      	bne.n	8002932 <TIM3_IRQHandler+0x32>
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <TIM3_IRQHandler+0x40>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <TIM3_IRQHandler+0x32>



		/* End of Line */
		extern TIM_HandleTypeDef htim3;
		HAL_TIM_Base_Stop(&htim3);
 8002920:	4808      	ldr	r0, [pc, #32]	; (8002944 <TIM3_IRQHandler+0x44>)
 8002922:	f002 fa7c 	bl	8004e1e <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop_IT(&htim3);
 8002926:	4807      	ldr	r0, [pc, #28]	; (8002944 <TIM3_IRQHandler+0x44>)
 8002928:	f002 fabd 	bl	8004ea6 <HAL_TIM_Base_Stop_IT>
		start_counting = 0;
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <TIM3_IRQHandler+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002932:	4804      	ldr	r0, [pc, #16]	; (8002944 <TIM3_IRQHandler+0x44>)
 8002934:	f002 fae1 	bl	8004efa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000b3c 	.word	0x20000b3c
 8002940:	20000b3d 	.word	0x20000b3d
 8002944:	20000a64 	.word	0x20000a64

08002948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	return 1;
 800294c:	2301      	movs	r3, #1
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <_kill>:

int _kill(int pid, int sig)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002960:	f003 f8b6 	bl	8005ad0 <__errno>
 8002964:	4603      	mov	r3, r0
 8002966:	2216      	movs	r2, #22
 8002968:	601a      	str	r2, [r3, #0]
	return -1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <_exit>:

void _exit (int status)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800297e:	f04f 31ff 	mov.w	r1, #4294967295
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ffe7 	bl	8002956 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002988:	e7fe      	b.n	8002988 <_exit+0x12>

0800298a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	e00a      	b.n	80029b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800299c:	f3af 8000 	nop.w
 80029a0:	4601      	mov	r1, r0
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	60ba      	str	r2, [r7, #8]
 80029a8:	b2ca      	uxtb	r2, r1
 80029aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3301      	adds	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	dbf0      	blt.n	800299c <_read+0x12>
	}

return len;
 80029ba:	687b      	ldr	r3, [r7, #4]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e009      	b.n	80029ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	60ba      	str	r2, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	dbf1      	blt.n	80029d6 <_write+0x12>
	}
	return len;
 80029f2:	687b      	ldr	r3, [r7, #4]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_close>:

int _close(int file)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a22:	605a      	str	r2, [r3, #4]
	return 0;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <_isatty>:

int _isatty(int file)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	return 1;
 8002a38:	2301      	movs	r3, #1
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <_sbrk+0x5c>)
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <_sbrk+0x60>)
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <_sbrk+0x64>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <_sbrk+0x64>)
 8002a7a:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <_sbrk+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <_sbrk+0x64>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d207      	bcs.n	8002a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a8c:	f003 f820 	bl	8005ad0 <__errno>
 8002a90:	4603      	mov	r3, r0
 8002a92:	220c      	movs	r2, #12
 8002a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	e009      	b.n	8002ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <_sbrk+0x64>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <_sbrk+0x64>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <_sbrk+0x64>)
 8002aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20010000 	.word	0x20010000
 8002abc:	00000400 	.word	0x00000400
 8002ac0:	20000b38 	.word	0x20000b38
 8002ac4:	20000b80 	.word	0x20000b80

08002ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <SystemInit+0x5c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <SystemInit+0x5c>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <SystemInit+0x5c>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4911      	ldr	r1, [pc, #68]	; (8002b24 <SystemInit+0x5c>)
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <SystemInit+0x60>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <SystemInit+0x5c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <SystemInit+0x5c>)
 8002aea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <SystemInit+0x5c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <SystemInit+0x5c>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <SystemInit+0x5c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <SystemInit+0x5c>)
 8002b06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002b0a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <SystemInit+0x5c>)
 8002b0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b12:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <SystemInit+0x64>)
 8002b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40021000 	.word	0x40021000
 8002b28:	f8ff0000 	.word	0xf8ff0000
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <timer_min>:
	}
	__HAL_TIM_DISABLE(&htim2);
}

void timer_min(uint8_t min)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <timer_min+0x38>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0201 	mvn.w	r2, #1
 8002b42:	611a      	str	r2, [r3, #16]
	timer_left = min*2;
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <timer_min+0x3c>)
 8002b4c:	701a      	strb	r2, [r3, #0]
	start_counting = 1;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <timer_min+0x40>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8002b54:	4804      	ldr	r0, [pc, #16]	; (8002b68 <timer_min+0x38>)
 8002b56:	f002 f948 	bl	8004dea <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002b5a:	4803      	ldr	r0, [pc, #12]	; (8002b68 <timer_min+0x38>)
 8002b5c:	f002 f989 	bl	8004e72 <HAL_TIM_Base_Start_IT>
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000a64 	.word	0x20000a64
 8002b6c:	20000b3c 	.word	0x20000b3c
 8002b70:	20000b3d 	.word	0x20000b3d

08002b74 <XPT2046_DelayUS>:
		-4.979353, -0.001750, 0.065168, -13.318824 };
// { 0.001030, 0.064188, -10.804098, -0.085584, 0.001420, 324.127036 };

volatile uint8_t ucXPT2046_TouchFlag = 0;

static void XPT2046_DelayUS( __IO uint32_t ulCount) {
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < ulCount; i++) {
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e00a      	b.n	8002b98 <XPT2046_DelayUS+0x24>
		uint8_t uc = 12;
 8002b82:	230c      	movs	r3, #12
 8002b84:	72fb      	strb	r3, [r7, #11]

		while (uc--)
 8002b86:	bf00      	nop
 8002b88:	7afb      	ldrb	r3, [r7, #11]
 8002b8a:	1e5a      	subs	r2, r3, #1
 8002b8c:	72fa      	strb	r2, [r7, #11]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1fa      	bne.n	8002b88 <XPT2046_DelayUS+0x14>
	for (i = 0; i < ulCount; i++) {
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3301      	adds	r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3f0      	bcc.n	8002b82 <XPT2046_DelayUS+0xe>
			;

	}

}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <XPT2046_WriteCMD>:

static void XPT2046_WriteCMD(uint8_t ucCmd) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	macXPT2046_MOSI_0();
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2104      	movs	r1, #4
 8002bba:	481d      	ldr	r0, [pc, #116]	; (8002c30 <XPT2046_WriteCMD+0x84>)
 8002bbc:	f001 f959 	bl	8003e72 <HAL_GPIO_WritePin>

	macXPT2046_CLK_LOW();
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	481a      	ldr	r0, [pc, #104]	; (8002c30 <XPT2046_WriteCMD+0x84>)
 8002bc6:	f001 f954 	bl	8003e72 <HAL_GPIO_WritePin>

	for (i = 0; i < 8; i++) {
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	e027      	b.n	8002c20 <XPT2046_WriteCMD+0x74>
		((ucCmd >> (7 - i)) & 0x01) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002bd0:	79fa      	ldrb	r2, [r7, #7]
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	f1c3 0307 	rsb	r3, r3, #7
 8002bd8:	fa42 f303 	asr.w	r3, r2, r3
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <XPT2046_WriteCMD+0x44>
 8002be4:	2201      	movs	r2, #1
 8002be6:	2104      	movs	r1, #4
 8002be8:	4811      	ldr	r0, [pc, #68]	; (8002c30 <XPT2046_WriteCMD+0x84>)
 8002bea:	f001 f942 	bl	8003e72 <HAL_GPIO_WritePin>
 8002bee:	e004      	b.n	8002bfa <XPT2046_WriteCMD+0x4e>
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	480e      	ldr	r0, [pc, #56]	; (8002c30 <XPT2046_WriteCMD+0x84>)
 8002bf6:	f001 f93c 	bl	8003e72 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8002bfa:	2005      	movs	r0, #5
 8002bfc:	f7ff ffba 	bl	8002b74 <XPT2046_DelayUS>

		macXPT2046_CLK_HIGH();
 8002c00:	2201      	movs	r2, #1
 8002c02:	2101      	movs	r1, #1
 8002c04:	480a      	ldr	r0, [pc, #40]	; (8002c30 <XPT2046_WriteCMD+0x84>)
 8002c06:	f001 f934 	bl	8003e72 <HAL_GPIO_WritePin>

		XPT2046_DelayUS(5);
 8002c0a:	2005      	movs	r0, #5
 8002c0c:	f7ff ffb2 	bl	8002b74 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8002c10:	2200      	movs	r2, #0
 8002c12:	2101      	movs	r1, #1
 8002c14:	4806      	ldr	r0, [pc, #24]	; (8002c30 <XPT2046_WriteCMD+0x84>)
 8002c16:	f001 f92c 	bl	8003e72 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b07      	cmp	r3, #7
 8002c24:	d9d4      	bls.n	8002bd0 <XPT2046_WriteCMD+0x24>
	}

}
 8002c26:	bf00      	nop
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40011800 	.word	0x40011800

08002c34 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD(void) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf = 0, usTemp;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	80bb      	strh	r3, [r7, #4]

	macXPT2046_MOSI_0();
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2104      	movs	r1, #4
 8002c42:	4819      	ldr	r0, [pc, #100]	; (8002ca8 <XPT2046_ReadCMD+0x74>)
 8002c44:	f001 f915 	bl	8003e72 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4816      	ldr	r0, [pc, #88]	; (8002ca8 <XPT2046_ReadCMD+0x74>)
 8002c4e:	f001 f910 	bl	8003e72 <HAL_GPIO_WritePin>

	for (i = 0; i < 12; i++) {
 8002c52:	2300      	movs	r3, #0
 8002c54:	71fb      	strb	r3, [r7, #7]
 8002c56:	e01e      	b.n	8002c96 <XPT2046_ReadCMD+0x62>
		macXPT2046_CLK_LOW();
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	4812      	ldr	r0, [pc, #72]	; (8002ca8 <XPT2046_ReadCMD+0x74>)
 8002c5e:	f001 f908 	bl	8003e72 <HAL_GPIO_WritePin>

		usTemp = macXPT2046_MISO();
 8002c62:	2108      	movs	r1, #8
 8002c64:	4810      	ldr	r0, [pc, #64]	; (8002ca8 <XPT2046_ReadCMD+0x74>)
 8002c66:	f001 f8ed 	bl	8003e44 <HAL_GPIO_ReadPin>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	807b      	strh	r3, [r7, #2]

		usBuf |= usTemp << (11 - i);
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	f1c3 030b 	rsb	r3, r3, #11
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	80bb      	strh	r3, [r7, #4]

		macXPT2046_CLK_HIGH();
 8002c86:	2201      	movs	r2, #1
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <XPT2046_ReadCMD+0x74>)
 8002c8c:	f001 f8f1 	bl	8003e72 <HAL_GPIO_WritePin>
	for (i = 0; i < 12; i++) {
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	3301      	adds	r3, #1
 8002c94:	71fb      	strb	r3, [r7, #7]
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2b0b      	cmp	r3, #11
 8002c9a:	d9dd      	bls.n	8002c58 <XPT2046_ReadCMD+0x24>

	}

	return usBuf;
 8002c9c:	88bb      	ldrh	r3, [r7, #4]

}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40011800 	.word	0x40011800

08002cac <XPT2046_ReadAdc>:

static uint16_t XPT2046_ReadAdc(uint8_t ucChannel) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD(ucChannel);
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff77 	bl	8002bac <XPT2046_WriteCMD>

	return XPT2046_ReadCMD();
 8002cbe:	f7ff ffb9 	bl	8002c34 <XPT2046_ReadCMD>
 8002cc2:	4603      	mov	r3, r0

}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <XPT2046_ReadAdc_XY>:

static void XPT2046_ReadAdc_XY(int16_t *sX_Ad, int16_t *sY_Ad) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp;

	sX_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_X);
 8002cd6:	2090      	movs	r0, #144	; 0x90
 8002cd8:	f7ff ffe8 	bl	8002cac <XPT2046_ReadAdc>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS(1);
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7ff ff47 	bl	8002b74 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc( macXPT2046_CHANNEL_Y);
 8002ce6:	20d0      	movs	r0, #208	; 0xd0
 8002ce8:	f7ff ffe0 	bl	8002cac <XPT2046_ReadAdc>
 8002cec:	4603      	mov	r3, r0
 8002cee:	81bb      	strh	r3, [r7, #12]

	*sX_Ad = sX_Ad_Temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	89fa      	ldrh	r2, [r7, #14]
 8002cf4:	801a      	strh	r2, [r3, #0]
	*sY_Ad = sY_Ad_Temp;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	89ba      	ldrh	r2, [r7, #12]
 8002cfa:	801a      	strh	r2, [r3, #0]

}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY(
		strType_XPT2046_Coordinate *pScreenCoordinate) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b092      	sub	sp, #72	; 0x48
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray[2][10] = { { 0 }, { 0 } };
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	2228      	movs	r2, #40	; 0x28
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 ff02 	bl	8005b24 <memset>

	int32_t lX_Min, lX_Max, lY_Min, lY_Max;

	do {
		XPT2046_ReadAdc_XY(&sAD_X, &sAD_Y);
 8002d20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d24:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ffce 	bl	8002ccc <XPT2046_ReadAdc_XY>

		sBufferArray[0][ucCount] = sAD_X;
 8002d30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d34:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	3348      	adds	r3, #72	; 0x48
 8002d3c:	443b      	add	r3, r7
 8002d3e:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray[1][ucCount] = sAD_Y;
 8002d42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d46:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002d4a:	330a      	adds	r3, #10
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	3348      	adds	r3, #72	; 0x48
 8002d50:	443b      	add	r3, r7
 8002d52:	f823 2c40 	strh.w	r2, [r3, #-64]

		ucCount++;
 8002d56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	} while (( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel)
 8002d60:	2110      	movs	r1, #16
 8002d62:	4871      	ldr	r0, [pc, #452]	; (8002f28 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002d64:	f001 f86e 	bl	8003e44 <HAL_GPIO_ReadPin>
 8002d68:	4603      	mov	r3, r0
			&& (ucCount < 10));
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <XPT2046_ReadAdc_Smooth_XY+0x72>
 8002d6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d72:	2b09      	cmp	r3, #9
 8002d74:	d9d4      	bls.n	8002d20 <XPT2046_ReadAdc_Smooth_XY+0x1c>

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel)
 8002d76:	2110      	movs	r1, #16
 8002d78:	486b      	ldr	r0, [pc, #428]	; (8002f28 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002d7a:	f001 f863 	bl	8003e44 <HAL_GPIO_ReadPin>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;
 8002d84:	4b69      	ldr	r3, [pc, #420]	; (8002f2c <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]

	if (ucCount == 10) {
 8002d8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d8e:	2b0a      	cmp	r3, #10
 8002d90:	f040 80c4 	bne.w	8002f1c <XPT2046_ReadAdc_Smooth_XY+0x218>
		lX_Max = lX_Min = sBufferArray[0][0];
 8002d94:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d98:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray[1][0];
 8002d9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34

		for (i = 1; i < 10; i++) {
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002dae:	e02b      	b.n	8002e08 <XPT2046_ReadAdc_Smooth_XY+0x104>
			if (sBufferArray[0][i] < lX_Min)
 8002db0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	3348      	adds	r3, #72	; 0x48
 8002db8:	443b      	add	r3, r7
 8002dba:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	dd08      	ble.n	8002dd8 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray[0][i];
 8002dc6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	3348      	adds	r3, #72	; 0x48
 8002dce:	443b      	add	r3, r7
 8002dd0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8002dd6:	e012      	b.n	8002dfe <XPT2046_ReadAdc_Smooth_XY+0xfa>

			else if (sBufferArray[0][i] > lX_Max)
 8002dd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	3348      	adds	r3, #72	; 0x48
 8002de0:	443b      	add	r3, r7
 8002de2:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002de6:	461a      	mov	r2, r3
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	4293      	cmp	r3, r2
 8002dec:	da07      	bge.n	8002dfe <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray[0][i];
 8002dee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	3348      	adds	r3, #72	; 0x48
 8002df6:	443b      	add	r3, r7
 8002df8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (i = 1; i < 10; i++) {
 8002dfe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e02:	3301      	adds	r3, #1
 8002e04:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d9cf      	bls.n	8002db0 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}

		for (i = 1; i < 10; i++) {
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e16:	e02f      	b.n	8002e78 <XPT2046_ReadAdc_Smooth_XY+0x174>
			if (sBufferArray[1][i] < lY_Min)
 8002e18:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e1c:	330a      	adds	r3, #10
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	3348      	adds	r3, #72	; 0x48
 8002e22:	443b      	add	r3, r7
 8002e24:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	dd09      	ble.n	8002e44 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray[1][i];
 8002e30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e34:	330a      	adds	r3, #10
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	3348      	adds	r3, #72	; 0x48
 8002e3a:	443b      	add	r3, r7
 8002e3c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e42:	e014      	b.n	8002e6e <XPT2046_ReadAdc_Smooth_XY+0x16a>

			else if (sBufferArray[1][i] > lY_Max)
 8002e44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e48:	330a      	adds	r3, #10
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	3348      	adds	r3, #72	; 0x48
 8002e4e:	443b      	add	r3, r7
 8002e50:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e54:	461a      	mov	r2, r3
 8002e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	da08      	bge.n	8002e6e <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray[1][i];
 8002e5c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e60:	330a      	adds	r3, #10
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	3348      	adds	r3, #72	; 0x48
 8002e66:	443b      	add	r3, r7
 8002e68:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
		for (i = 1; i < 10; i++) {
 8002e6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e72:	3301      	adds	r3, #1
 8002e74:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e7c:	2b09      	cmp	r3, #9
 8002e7e:	d9cb      	bls.n	8002e18 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}

		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8002e80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e8a:	4413      	add	r3, r2
				+ sBufferArray[0][2] + sBufferArray[0][3] + sBufferArray[0][4]
 8002e8c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e96:	4413      	add	r3, r2
 8002e98:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002e9c:	4413      	add	r3, r2
				+ sBufferArray[0][5] + sBufferArray[0][6] + sBufferArray[0][7]
 8002e9e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002eae:	4413      	add	r3, r2
				+ sBufferArray[0][8] + sBufferArray[0][9] - lX_Min - lX_Max)
 8002eb0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002eba:	441a      	add	r2, r3
 8002ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebe:	1ad2      	subs	r2, r2, r3
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec2:	1ad3      	subs	r3, r2, r3
				>> 3;
 8002ec4:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->x = (sBufferArray[0][0] + sBufferArray[0][1]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	801a      	strh	r2, [r3, #0]

		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8002ecc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ed6:	4413      	add	r3, r2
				+ sBufferArray[1][2] + sBufferArray[1][3] + sBufferArray[1][4]
 8002ed8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002edc:	4413      	add	r3, r2
 8002ede:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002ee8:	4413      	add	r3, r2
				+ sBufferArray[1][5] + sBufferArray[1][6] + sBufferArray[1][7]
 8002eea:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002eee:	4413      	add	r3, r2
 8002ef0:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8002efa:	4413      	add	r3, r2
				+ sBufferArray[1][8] + sBufferArray[1][9] - lY_Min - lY_Max)
 8002efc:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002f00:	4413      	add	r3, r2
 8002f02:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002f06:	441a      	add	r2, r3
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	1ad2      	subs	r2, r2, r3
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0e:	1ad3      	subs	r3, r2, r3
				>> 3;
 8002f10:	10db      	asrs	r3, r3, #3
		pScreenCoordinate->y = (sBufferArray[1][0] + sBufferArray[1][1]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	805a      	strh	r2, [r3, #2]

		return 1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <XPT2046_ReadAdc_Smooth_XY+0x21a>

	}

	return 0;
 8002f1c:	2300      	movs	r3, #0

}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3748      	adds	r7, #72	; 0x48
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40011800 	.word	0x40011800
 8002f2c:	20000b3e 	.word	0x20000b3e

08002f30 <XPT2046_Calculate_CalibrationFactor>:
#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(
		strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_Coordinate *pScreenSample,
		strType_XPT2046_Calibration *pCalibrationFactor) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	1ad3      	subs	r3, r2, r3
			* (pScreenSample[1].y - pScreenSample[2].y))
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	3204      	adds	r2, #4
 8002f52:	8852      	ldrh	r2, [r2, #2]
 8002f54:	4611      	mov	r1, r2
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	3208      	adds	r2, #8
 8002f5a:	8852      	ldrh	r2, [r2, #2]
 8002f5c:	1a8a      	subs	r2, r1, r2
 8002f5e:	fb03 f202 	mul.w	r2, r3, r2
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3304      	adds	r3, #4
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	1acb      	subs	r3, r1, r3
					* (pScreenSample[0].y - pScreenSample[2].y));
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	8849      	ldrh	r1, [r1, #2]
 8002f76:	4608      	mov	r0, r1
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	3108      	adds	r1, #8
 8002f7c:	8849      	ldrh	r1, [r1, #2]
 8002f7e:	1a41      	subs	r1, r0, r1
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
			- ((pScreenSample[1].x - pScreenSample[2].x)
 8002f84:	1ad3      	subs	r3, r2, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd faa8 	bl	80004dc <__aeabi_i2d>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	f7fd fd6c 	bl	8000a80 <__aeabi_dcmpeq>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]
 8002fb2:	e145      	b.n	8003240 <XPT2046_Calculate_CalibrationFactor+0x310>

	else {

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].x)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	3204      	adds	r2, #4
 8002fc6:	8852      	ldrh	r2, [r2, #2]
 8002fc8:	4611      	mov	r1, r2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	3208      	adds	r2, #8
 8002fce:	8852      	ldrh	r2, [r2, #2]
 8002fd0:	1a8a      	subs	r2, r1, r2
 8002fd2:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	8849      	ldrh	r1, [r1, #2]
 8002fea:	4608      	mov	r0, r1
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	3108      	adds	r1, #8
 8002ff0:	8849      	ldrh	r1, [r1, #2]
 8002ff2:	1a41      	subs	r1, r0, r1
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)
 8002ff8:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa6e 	bl	80004dc <__aeabi_i2d>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3308      	adds	r3, #8
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x))
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	3204      	adds	r2, #4
 800301c:	8812      	ldrh	r2, [r2, #0]
 800301e:	4611      	mov	r1, r2
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	3208      	adds	r2, #8
 8003024:	8812      	ldrh	r2, [r2, #0]
 8003026:	1a8a      	subs	r2, r1, r2
 8003028:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3308      	adds	r3, #8
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	3104      	adds	r1, #4
 800303e:	8809      	ldrh	r1, [r1, #0]
 8003040:	4608      	mov	r0, r1
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	3108      	adds	r1, #8
 8003046:	8809      	ldrh	r1, [r1, #0]
 8003048:	1a41      	subs	r1, r0, r1
 800304a:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x)
 800304e:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x)
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fa43 	bl	80004dc <__aeabi_i2d>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	3308      	adds	r3, #8
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3304      	adds	r3, #4
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].x)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	3304      	adds	r3, #4
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3308      	adds	r3, #8
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	8852      	ldrh	r2, [r2, #2]
 800308a:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3308      	adds	r3, #8
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].x)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3308      	adds	r3, #8
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	fb00 f303 	mul.w	r3, r0, r3
 80030ae:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	3104      	adds	r1, #4
 80030b4:	8849      	ldrh	r1, [r1, #2]
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].x
 80030ba:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3304      	adds	r3, #4
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	4619      	mov	r1, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].x)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3304      	adds	r3, #4
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	fb00 f303 	mul.w	r3, r0, r3
 80030dc:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	3108      	adds	r1, #8
 80030e2:	8849      	ldrh	r1, [r1, #2]
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].x
 80030e8:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f9f6 	bl	80004dc <__aeabi_i2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	885b      	ldrh	r3, [r3, #2]
 80030fe:	461a      	mov	r2, r3
				- pDisplayCoordinate[2].y)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3308      	adds	r3, #8
 8003104:	885b      	ldrh	r3, [r3, #2]
 8003106:	1ad3      	subs	r3, r2, r3
				* (pScreenSample[1].y - pScreenSample[2].y))
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	3204      	adds	r2, #4
 800310c:	8852      	ldrh	r2, [r2, #2]
 800310e:	4611      	mov	r1, r2
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	3208      	adds	r2, #8
 8003114:	8852      	ldrh	r2, [r2, #2]
 8003116:	1a8a      	subs	r2, r1, r2
 8003118:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3304      	adds	r3, #4
 8003120:	885b      	ldrh	r3, [r3, #2]
 8003122:	4619      	mov	r1, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3308      	adds	r3, #8
 8003128:	885b      	ldrh	r3, [r3, #2]
 800312a:	1acb      	subs	r3, r1, r3
						* (pScreenSample[0].y - pScreenSample[2].y));
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	8849      	ldrh	r1, [r1, #2]
 8003130:	4608      	mov	r0, r1
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	3108      	adds	r1, #8
 8003136:	8849      	ldrh	r1, [r1, #2]
 8003138:	1a41      	subs	r1, r0, r1
 800313a:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)
 800313e:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd f9cb 	bl	80004dc <__aeabi_i2d>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3308      	adds	r3, #8
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	1ad3      	subs	r3, r2, r3
				* (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y))
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	3204      	adds	r2, #4
 8003162:	8852      	ldrh	r2, [r2, #2]
 8003164:	4611      	mov	r1, r2
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	3208      	adds	r2, #8
 800316a:	8852      	ldrh	r2, [r2, #2]
 800316c:	1a8a      	subs	r2, r1, r2
 800316e:	fb03 f202 	mul.w	r2, r3, r2
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	885b      	ldrh	r3, [r3, #2]
 8003176:	4619      	mov	r1, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3308      	adds	r3, #8
 800317c:	885b      	ldrh	r3, [r3, #2]
 800317e:	1acb      	subs	r3, r1, r3
						* (pScreenSample[1].x - pScreenSample[2].x));
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	3104      	adds	r1, #4
 8003184:	8809      	ldrh	r1, [r1, #0]
 8003186:	4608      	mov	r0, r1
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	3108      	adds	r1, #8
 800318c:	8809      	ldrh	r1, [r1, #0]
 800318e:	1a41      	subs	r1, r0, r1
 8003190:	fb01 f303 	mul.w	r3, r1, r3
				- ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y)
 8003194:	1ad3      	subs	r3, r2, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x)
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd f9a0 	bl	80004dc <__aeabi_i2d>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3308      	adds	r3, #8
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3304      	adds	r3, #4
 80031b2:	885b      	ldrh	r3, [r3, #2]
 80031b4:	fb03 f202 	mul.w	r2, r3, r2
				- pScreenSample[1].x * pDisplayCoordinate[2].y)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	3304      	adds	r3, #4
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	4619      	mov	r1, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3308      	adds	r3, #8
 80031c4:	885b      	ldrh	r3, [r3, #2]
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	1ad3      	subs	r3, r2, r3
				* pScreenSample[0].y
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	8852      	ldrh	r2, [r2, #2]
 80031d0:	fb03 f202 	mul.w	r2, r3, r2
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3308      	adds	r3, #8
 80031de:	885b      	ldrh	r3, [r3, #2]
 80031e0:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[2].x * pDisplayCoordinate[0].y)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3308      	adds	r3, #8
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	885b      	ldrh	r3, [r3, #2]
 80031f0:	fb00 f303 	mul.w	r3, r0, r3
 80031f4:	1acb      	subs	r3, r1, r3
						* pScreenSample[1].y
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	3104      	adds	r1, #4
 80031fa:	8849      	ldrh	r1, [r1, #2]
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[0].x * pDisplayCoordinate[2].y
 8003200:	441a      	add	r2, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3304      	adds	r3, #4
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	885b      	ldrh	r3, [r3, #2]
 800320e:	fb03 f101 	mul.w	r1, r3, r1
						- pScreenSample[0].x * pDisplayCoordinate[1].y)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3304      	adds	r3, #4
 800321c:	885b      	ldrh	r3, [r3, #2]
 800321e:	fb00 f303 	mul.w	r3, r0, r3
 8003222:	1acb      	subs	r3, r1, r3
						* pScreenSample[2].y;
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	3108      	adds	r1, #8
 8003228:	8849      	ldrh	r1, [r1, #2]
 800322a:	fb01 f303 	mul.w	r3, r1, r3
				+ (pScreenSample[1].x * pDisplayCoordinate[0].y
 800322e:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd f953 	bl	80004dc <__aeabi_i2d>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	}

	return ucRet;
 8003240:	7dfb      	ldrb	r3, [r7, #23]

}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void) {
 800324c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003250:	b0a0      	sub	sp, #128	; 0x80
 8003252:	af02      	add	r7, sp, #8
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800325a:	2300      	movs	r3, #0
 800325c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8003260:	2300      	movs	r3, #0
 8003262:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8003266:	2300      	movs	r3, #0
 8003268:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	char *pStr = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	66bb      	str	r3, [r7, #104]	; 0x68
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	usScreenWidth = LCD_Default_Max_Width;
 8003270:	23f0      	movs	r3, #240	; 0xf0
 8003272:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	usScreenHeigth = LCD_Default_Max_Heigth;
 8003276:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800327a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	    usScreenWidth = LCD_Default_Max_Heigth;
	    usScreenHeigth = LCD_Default_Max_Width;
	
	  #endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 800327e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	b29b      	uxth	r3, r3
 8003286:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 800328a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	b29b      	uxth	r3, r3
 8003292:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8003296:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800329a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 800329e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	109b      	asrs	r3, r3, #2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 80032b0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	109b      	asrs	r3, r3, #2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 80032c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032c6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 80032ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 80032d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	LCD_GramScan(1);
 80032da:	2001      	movs	r0, #1
 80032dc:	f7fe fae0 	bl	80018a0 <LCD_GramScan>

	for (i = 0; i < 4; i++) {
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032e6:	e047      	b.n	8003378 <XPT2046_Touch_Calibrate+0x12c>
		LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 80032e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032ec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80032f0:	2100      	movs	r1, #0
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fe f950 	bl	8001598 <LCD_Clear>

		pStr = "Touch Calibrate ......";
 80032f8:	4bb6      	ldr	r3, [pc, #728]	; (80035d4 <XPT2046_Touch_Calibrate+0x388>)
 80032fa:	66bb      	str	r3, [r7, #104]	; 0x68
		LCD_DrawString_Color(
				(usScreenWidth - (strlen(pStr) - 7) * WIDTH_EN_CHAR) >> 1,
 80032fc:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003300:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003302:	f7fc ff91 	bl	8000228 <strlen>
 8003306:	4603      	mov	r3, r0
 8003308:	3b07      	subs	r3, #7
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1ae3      	subs	r3, r4, r3
 800330e:	085b      	lsrs	r3, r3, #1
		LCD_DrawString_Color(
 8003310:	b298      	uxth	r0, r3
 8003312:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	b299      	uxth	r1, r3
 800331a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003324:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003326:	f7fe fa85 	bl	8001834 <LCD_DrawString_Color>
		/*
		sprintf(cStr, "%d", i + 1);
		LCD_DrawString_Color(usScreenWidth >> 1,
				(usScreenHeigth >> 1) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED);
		*/
		XPT2046_DelayUS(100000);
 800332a:	48ab      	ldr	r0, [pc, #684]	; (80035d8 <XPT2046_Touch_Calibrate+0x38c>)
 800332c:	f7ff fc22 	bl	8002b74 <XPT2046_DelayUS>

		LCD_DrawCross(strCrossCoordinate[i].x, strCrossCoordinate[i].y);
 8003330:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	3378      	adds	r3, #120	; 0x78
 8003338:	443b      	add	r3, r7
 800333a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800333e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	3378      	adds	r3, #120	; 0x78
 8003346:	443b      	add	r3, r7
 8003348:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f7fe fa4e 	bl	80017f0 <LCD_DrawCross>

		while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
 8003354:	bf00      	nop
 8003356:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800335a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fcce 	bl	8002d04 <XPT2046_ReadAdc_Smooth_XY>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f3      	beq.n	8003356 <XPT2046_Touch_Calibrate+0x10a>
	for (i = 0; i < 4; i++) {
 800336e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003372:	3301      	adds	r3, #1
 8003374:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003378:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800337c:	2b03      	cmp	r3, #3
 800337e:	d9b3      	bls.n	80032e8 <XPT2046_Touch_Calibrate+0x9c>
			;

	}

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample,
 8003380:	463a      	mov	r2, r7
 8003382:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fdd0 	bl	8002f30 <XPT2046_Calculate_CalibrationFactor>
			&CalibrationFactor);

	if (CalibrationFactor.Divider == 0)
 8003390:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	f7fd fb70 	bl	8000a80 <__aeabi_dcmpeq>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 8113 	bne.w	80035ce <XPT2046_Touch_Calibrate+0x382>
		goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 80033a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd f893 	bl	80004dc <__aeabi_i2d>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fd f8f7 	bl	80005b0 <__aeabi_dmul>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4690      	mov	r8, r2
 80033c8:	4699      	mov	r9, r3
			+ (CalibrationFactor.Bn * strScreenSample[3].y)
 80033ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd f882 	bl	80004dc <__aeabi_i2d>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4620      	mov	r0, r4
 80033de:	4629      	mov	r1, r5
 80033e0:	f7fd f8e6 	bl	80005b0 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4640      	mov	r0, r8
 80033ea:	4649      	mov	r1, r9
 80033ec:	f7fc ff2a 	bl	8000244 <__adddf3>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
			+ CalibrationFactor.Cn) / CalibrationFactor.Divider;
 80033f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033fc:	f7fc ff22 	bl	8000244 <__adddf3>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800340c:	f7fd f9fa 	bl	8000804 <__aeabi_ddiv>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x)
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	f7fd fba2 	bl	8000b60 <__aeabi_d2uiz>
 800341c:	4603      	mov	r3, r0
 800341e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 8003422:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003426:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd f856 	bl	80004dc <__aeabi_i2d>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4620      	mov	r0, r4
 8003436:	4629      	mov	r1, r5
 8003438:	f7fd f8ba 	bl	80005b0 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4690      	mov	r8, r2
 8003442:	4699      	mov	r9, r3
			+ (CalibrationFactor.En * strScreenSample[3].y)
 8003444:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003448:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f845 	bl	80004dc <__aeabi_i2d>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4620      	mov	r0, r4
 8003458:	4629      	mov	r1, r5
 800345a:	f7fd f8a9 	bl	80005b0 <__aeabi_dmul>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4640      	mov	r0, r8
 8003464:	4649      	mov	r1, r9
 8003466:	f7fc feed 	bl	8000244 <__adddf3>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
			+ CalibrationFactor.Fn) / CalibrationFactor.Divider;
 8003472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003476:	f7fc fee5 	bl	8000244 <__adddf3>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003486:	f7fd f9bd 	bl	8000804 <__aeabi_ddiv>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x)
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f7fd fb65 	bl	8000b60 <__aeabi_d2uiz>
 8003496:	4603      	mov	r3, r0
 8003498:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

	usGap_x =
			(usTest_x > strCrossCoordinate[3].x) ?
 800349c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 80034a0:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d906      	bls.n	80034b6 <XPT2046_Touch_Calibrate+0x26a>
					(usTest_x - strCrossCoordinate[3].x) :
 80034a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
	usGap_x =
 80034ac:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	e005      	b.n	80034c2 <XPT2046_Touch_Calibrate+0x276>
					(strCrossCoordinate[3].x - usTest_x);
 80034b6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	usGap_x =
 80034ba:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	usGap_y =
			(usTest_y > strCrossCoordinate[3].y) ?
 80034c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 80034ca:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d906      	bls.n	80034e0 <XPT2046_Touch_Calibrate+0x294>
					(usTest_y - strCrossCoordinate[3].y) :
 80034d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
	usGap_y =
 80034d6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	b29b      	uxth	r3, r3
 80034de:	e005      	b.n	80034ec <XPT2046_Touch_Calibrate+0x2a0>
					(strCrossCoordinate[3].y - usTest_y);
 80034e0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
	usGap_y =
 80034e4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((usGap_x > 10) || (usGap_y > 10))
 80034f0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80034f4:	2b0a      	cmp	r3, #10
 80034f6:	d877      	bhi.n	80035e8 <XPT2046_Touch_Calibrate+0x39c>
 80034f8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80034fc:	2b0a      	cmp	r3, #10
 80034fe:	d873      	bhi.n	80035e8 <XPT2046_Touch_Calibrate+0x39c>
		goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8003500:	e9d7 0100 	ldrd	r0, r1, [r7]
			/ CalibrationFactor.Divider;
 8003504:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003508:	f7fd f97c 	bl	8000804 <__aeabi_ddiv>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0)
 8003510:	4932      	ldr	r1, [pc, #200]	; (80035dc <XPT2046_Touch_Calibrate+0x390>)
 8003512:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8003516:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
			/ CalibrationFactor.Divider;
 800351a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800351e:	f7fd f971 	bl	8000804 <__aeabi_ddiv>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0)
 8003526:	492d      	ldr	r1, [pc, #180]	; (80035dc <XPT2046_Touch_Calibrate+0x390>)
 8003528:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 800352c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
			/ CalibrationFactor.Divider;
 8003530:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003534:	f7fd f966 	bl	8000804 <__aeabi_ddiv>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0)
 800353c:	4927      	ldr	r1, [pc, #156]	; (80035dc <XPT2046_Touch_Calibrate+0x390>)
 800353e:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 8003542:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
			/ CalibrationFactor.Divider;
 8003546:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800354a:	f7fd f95b 	bl	8000804 <__aeabi_ddiv>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0)
 8003552:	4922      	ldr	r1, [pc, #136]	; (80035dc <XPT2046_Touch_Calibrate+0x390>)
 8003554:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8003558:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
			/ CalibrationFactor.Divider;
 800355c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003560:	f7fd f950 	bl	8000804 <__aeabi_ddiv>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0)
 8003568:	491c      	ldr	r1, [pc, #112]	; (80035dc <XPT2046_Touch_Calibrate+0x390>)
 800356a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 800356e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
			/ CalibrationFactor.Divider;
 8003572:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003576:	f7fd f945 	bl	8000804 <__aeabi_ddiv>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0)
 800357e:	4917      	ldr	r1, [pc, #92]	; (80035dc <XPT2046_Touch_Calibrate+0x390>)
 8003580:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

#endif

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 8003584:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003588:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800358c:	2100      	movs	r1, #0
 800358e:	2000      	movs	r0, #0
 8003590:	f7fe f802 	bl	8001598 <LCD_Clear>

	pStr = "Welcome !";
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <XPT2046_Touch_Calibrate+0x394>)
 8003596:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 8003598:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800359c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800359e:	f7fc fe43 	bl	8000228 <strlen>
 80035a2:	4603      	mov	r3, r0
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	1ae3      	subs	r3, r4, r3
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	b298      	uxth	r0, r3
 80035ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	b299      	uxth	r1, r3
 80035b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035c0:	f7fe f938 	bl	8001834 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(200000);
 80035c4:	4807      	ldr	r0, [pc, #28]	; (80035e4 <XPT2046_Touch_Calibrate+0x398>)
 80035c6:	f7ff fad5 	bl	8002b74 <XPT2046_DelayUS>

	return 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e04b      	b.n	8003666 <XPT2046_Touch_Calibrate+0x41a>
		goto Failure;
 80035ce:	bf00      	nop
 80035d0:	e00b      	b.n	80035ea <XPT2046_Touch_Calibrate+0x39e>
 80035d2:	bf00      	nop
 80035d4:	0800a5cc 	.word	0x0800a5cc
 80035d8:	000186a0 	.word	0x000186a0
 80035dc:	20000008 	.word	0x20000008
 80035e0:	0800a5e4 	.word	0x0800a5e4
 80035e4:	00030d40 	.word	0x00030d40
		goto Failure;
 80035e8:	bf00      	nop

	Failure:

	LCD_Clear(0, 0, usScreenWidth, usScreenHeigth);
 80035ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035ee:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80035f2:	2100      	movs	r1, #0
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7fd ffcf 	bl	8001598 <LCD_Clear>

	pStr = "Calibrate fail";
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <XPT2046_Touch_Calibrate+0x424>)
 80035fc:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 80035fe:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003602:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003604:	f7fc fe10 	bl	8000228 <strlen>
 8003608:	4603      	mov	r3, r0
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	1ae3      	subs	r3, r4, r3
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	b298      	uxth	r0, r3
 8003612:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	b299      	uxth	r1, r3
 800361a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003624:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003626:	f7fe f905 	bl	8001834 <LCD_DrawString_Color>
			usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	pStr = "try again";
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <XPT2046_Touch_Calibrate+0x428>)
 800362c:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1,
 800362e:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003632:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003634:	f7fc fdf8 	bl	8000228 <strlen>
 8003638:	4603      	mov	r3, r0
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1ae3      	subs	r3, r4, r3
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	b298      	uxth	r0, r3
 8003642:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	b29b      	uxth	r3, r3
 800364a:	3310      	adds	r3, #16
 800364c:	b299      	uxth	r1, r3
 800364e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003658:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800365a:	f7fe f8eb 	bl	8001834 <LCD_DrawString_Color>
			(usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);
 800365e:	4806      	ldr	r0, [pc, #24]	; (8003678 <XPT2046_Touch_Calibrate+0x42c>)
 8003660:	f7ff fa88 	bl	8002b74 <XPT2046_DelayUS>

	return 0;
 8003664:	2300      	movs	r3, #0

}
 8003666:	4618      	mov	r0, r3
 8003668:	3778      	adds	r7, #120	; 0x78
 800366a:	46bd      	mov	sp, r7
 800366c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003670:	0800a5f0 	.word	0x0800a5f0
 8003674:	0800a600 	.word	0x0800a600
 8003678:	000f4240 	.word	0x000f4240

0800367c <XPT2046_Get_TouchedPoint>:

uint8_t XPT2046_Get_TouchedPoint(strType_XPT2046_Coordinate *pDisplayCoordinate,
		strType_XPT2046_TouchPara *pTouchPara) {
 800367c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]

	strType_XPT2046_Coordinate strScreenCoordinate;

	if (XPT2046_ReadAdc_Smooth_XY(&strScreenCoordinate)) {
 800368c:	f107 0308 	add.w	r3, r7, #8
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fb37 	bl	8002d04 <XPT2046_ReadAdc_Smooth_XY>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d06e      	beq.n	800377a <XPT2046_Get_TouchedPoint+0xfe>
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80036a2:	893b      	ldrh	r3, [r7, #8]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc ff19 	bl	80004dc <__aeabi_i2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4620      	mov	r0, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	f7fc ff7d 	bl	80005b0 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4690      	mov	r8, r2
 80036bc:	4699      	mov	r9, r3
				+ (pTouchPara->dX_Y * strScreenCoordinate.y) + pTouchPara->dX);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80036c4:	897b      	ldrh	r3, [r7, #10]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc ff08 	bl	80004dc <__aeabi_i2d>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4620      	mov	r0, r4
 80036d2:	4629      	mov	r1, r5
 80036d4:	f7fc ff6c 	bl	80005b0 <__aeabi_dmul>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4640      	mov	r0, r8
 80036de:	4649      	mov	r1, r9
 80036e0:	f7fc fdb0 	bl	8000244 <__adddf3>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036f2:	f7fc fda7 	bl	8000244 <__adddf3>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
		pDisplayCoordinate->x = ((pTouchPara->dX_X * strScreenCoordinate.x)
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	f7fd fa2f 	bl	8000b60 <__aeabi_d2uiz>
 8003702:	4603      	mov	r3, r0
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003710:	893b      	ldrh	r3, [r7, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc fee2 	bl	80004dc <__aeabi_i2d>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4620      	mov	r0, r4
 800371e:	4629      	mov	r1, r5
 8003720:	f7fc ff46 	bl	80005b0 <__aeabi_dmul>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4690      	mov	r8, r2
 800372a:	4699      	mov	r9, r3
				+ (pTouchPara->dY_Y * strScreenCoordinate.y) + pTouchPara->dY);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc fed1 	bl	80004dc <__aeabi_i2d>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4620      	mov	r0, r4
 8003740:	4629      	mov	r1, r5
 8003742:	f7fc ff35 	bl	80005b0 <__aeabi_dmul>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4640      	mov	r0, r8
 800374c:	4649      	mov	r1, r9
 800374e:	f7fc fd79 	bl	8000244 <__adddf3>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4610      	mov	r0, r2
 8003758:	4619      	mov	r1, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003760:	f7fc fd70 	bl	8000244 <__adddf3>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
		pDisplayCoordinate->y = ((pTouchPara->dY_X * strScreenCoordinate.x)
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	f7fd f9f8 	bl	8000b60 <__aeabi_d2uiz>
 8003770:	4603      	mov	r3, r0
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	805a      	strh	r2, [r3, #2]
 8003778:	e001      	b.n	800377e <XPT2046_Get_TouchedPoint+0x102>

	}

	else
		ucRet = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]

	return ucRet;
 800377e:	7bfb      	ldrb	r3, [r7, #15]

}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800378a <XPT2046_Reset_TouchPoint>:

void XPT2046_Reset_TouchPoint(strType_XPT2046_Coordinate *pDisplayCoordinate){
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
	//Reset X and Y
	pDisplayCoordinate->x = 0;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	801a      	strh	r2, [r3, #0]
	pDisplayCoordinate->y = 0;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	805a      	strh	r2, [r3, #2]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80037a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80037aa:	e003      	b.n	80037b4 <LoopCopyDataInit>

080037ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80037ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80037b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80037b2:	3104      	adds	r1, #4

080037b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80037b4:	480a      	ldr	r0, [pc, #40]	; (80037e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80037b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80037ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80037bc:	d3f6      	bcc.n	80037ac <CopyDataInit>
  ldr r2, =_sbss
 80037be:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80037c0:	e002      	b.n	80037c8 <LoopFillZerobss>

080037c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80037c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80037c4:	f842 3b04 	str.w	r3, [r2], #4

080037c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80037ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80037cc:	d3f9      	bcc.n	80037c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037ce:	f7ff f97b 	bl	8002ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037d2:	f002 f983 	bl	8005adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037d6:	f7fe f99d 	bl	8001b14 <main>
  bx lr
 80037da:	4770      	bx	lr
  ldr r3, =_sidata
 80037dc:	080201c0 	.word	0x080201c0
  ldr r0, =_sdata
 80037e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80037e4:	200009f0 	.word	0x200009f0
  ldr r2, =_sbss
 80037e8:	200009f0 	.word	0x200009f0
  ldr r3, = _ebss
 80037ec:	20000b80 	.word	0x20000b80

080037f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037f0:	e7fe      	b.n	80037f0 <ADC1_2_IRQHandler>
	...

080037f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_Init+0x28>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a07      	ldr	r2, [pc, #28]	; (800381c <HAL_Init+0x28>)
 80037fe:	f043 0310 	orr.w	r3, r3, #16
 8003802:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003804:	2003      	movs	r0, #3
 8003806:	f000 f943 	bl	8003a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800380a:	2000      	movs	r0, #0
 800380c:	f000 f808 	bl	8003820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003810:	f7fe ff0a 	bl	8002628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40022000 	.word	0x40022000

08003820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_InitTick+0x54>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_InitTick+0x58>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	4619      	mov	r1, r3
 8003832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003836:	fbb3 f3f1 	udiv	r3, r3, r1
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f95b 	bl	8003afa <HAL_SYSTICK_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e00e      	b.n	800386c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d80a      	bhi.n	800386a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003854:	2200      	movs	r2, #0
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	f000 f923 	bl	8003aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003860:	4a06      	ldr	r2, [pc, #24]	; (800387c <HAL_InitTick+0x5c>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000000 	.word	0x20000000
 8003878:	2000003c 	.word	0x2000003c
 800387c:	20000038 	.word	0x20000038

08003880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_IncTick+0x1c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_IncTick+0x20>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4413      	add	r3, r2
 8003890:	4a03      	ldr	r2, [pc, #12]	; (80038a0 <HAL_IncTick+0x20>)
 8003892:	6013      	str	r3, [r2, #0]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	2000003c 	.word	0x2000003c
 80038a0:	20000b40 	.word	0x20000b40

080038a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return uwTick;
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <HAL_GetTick+0x10>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	20000b40 	.word	0x20000b40

080038b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7ff fff0 	bl	80038a4 <HAL_GetTick>
 80038c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d005      	beq.n	80038de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_Delay+0x44>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038de:	bf00      	nop
 80038e0:	f7ff ffe0 	bl	80038a4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d8f7      	bhi.n	80038e0 <HAL_Delay+0x28>
  {
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	2000003c 	.word	0x2000003c

08003900 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <NVIC_SetPriorityGrouping+0x44>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800391c:	4013      	ands	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800392c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003932:	4a04      	ldr	r2, [pc, #16]	; (8003944 <NVIC_SetPriorityGrouping+0x44>)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	60d3      	str	r3, [r2, #12]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800394c:	4b04      	ldr	r3, [pc, #16]	; (8003960 <NVIC_GetPriorityGrouping+0x18>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	f003 0307 	and.w	r3, r3, #7
}
 8003956:	4618      	mov	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	4906      	ldr	r1, [pc, #24]	; (8003990 <NVIC_EnableIRQ+0x2c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2001      	movs	r0, #1
 800397e:	fa00 f202 	lsl.w	r2, r0, r2
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100

08003994 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	da0b      	bge.n	80039c0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	490c      	ldr	r1, [pc, #48]	; (80039e0 <NVIC_SetPriority+0x4c>)
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	3b04      	subs	r3, #4
 80039b6:	0112      	lsls	r2, r2, #4
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	440b      	add	r3, r1
 80039bc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039be:	e009      	b.n	80039d4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	4907      	ldr	r1, [pc, #28]	; (80039e4 <NVIC_SetPriority+0x50>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000ed00 	.word	0xe000ed00
 80039e4:	e000e100 	.word	0xe000e100

080039e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f1c3 0307 	rsb	r3, r3, #7
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf28      	it	cs
 8003a06:	2304      	movcs	r3, #4
 8003a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d902      	bls.n	8003a18 <NVIC_EncodePriority+0x30>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3b03      	subs	r3, #3
 8003a16:	e000      	b.n	8003a1a <NVIC_EncodePriority+0x32>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	43d9      	mvns	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	4313      	orrs	r3, r2
         );
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a5c:	d301      	bcc.n	8003a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00f      	b.n	8003a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <SysTick_Config+0x40>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	f7ff ff90 	bl	8003994 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <SysTick_Config+0x40>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a7a:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <SysTick_Config+0x40>)
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	e000e010 	.word	0xe000e010

08003a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff31 	bl	8003900 <NVIC_SetPriorityGrouping>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab8:	f7ff ff46 	bl	8003948 <NVIC_GetPriorityGrouping>
 8003abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff90 	bl	80039e8 <NVIC_EncodePriority>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff5f 	bl	8003994 <NVIC_SetPriority>
}
 8003ad6:	bf00      	nop
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff39 	bl	8003964 <NVIC_EnableIRQ>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ffa2 	bl	8003a4c <SysTick_Config>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b08b      	sub	sp, #44	; 0x2c
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e179      	b.n	8003e2c <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8003b38:	2201      	movs	r2, #1
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	f040 8168 	bne.w	8003e26 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4a96      	ldr	r2, [pc, #600]	; (8003db4 <HAL_GPIO_Init+0x2a0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d05e      	beq.n	8003c1e <HAL_GPIO_Init+0x10a>
 8003b60:	4a94      	ldr	r2, [pc, #592]	; (8003db4 <HAL_GPIO_Init+0x2a0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d875      	bhi.n	8003c52 <HAL_GPIO_Init+0x13e>
 8003b66:	4a94      	ldr	r2, [pc, #592]	; (8003db8 <HAL_GPIO_Init+0x2a4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d058      	beq.n	8003c1e <HAL_GPIO_Init+0x10a>
 8003b6c:	4a92      	ldr	r2, [pc, #584]	; (8003db8 <HAL_GPIO_Init+0x2a4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d86f      	bhi.n	8003c52 <HAL_GPIO_Init+0x13e>
 8003b72:	4a92      	ldr	r2, [pc, #584]	; (8003dbc <HAL_GPIO_Init+0x2a8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d052      	beq.n	8003c1e <HAL_GPIO_Init+0x10a>
 8003b78:	4a90      	ldr	r2, [pc, #576]	; (8003dbc <HAL_GPIO_Init+0x2a8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d869      	bhi.n	8003c52 <HAL_GPIO_Init+0x13e>
 8003b7e:	4a90      	ldr	r2, [pc, #576]	; (8003dc0 <HAL_GPIO_Init+0x2ac>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d04c      	beq.n	8003c1e <HAL_GPIO_Init+0x10a>
 8003b84:	4a8e      	ldr	r2, [pc, #568]	; (8003dc0 <HAL_GPIO_Init+0x2ac>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d863      	bhi.n	8003c52 <HAL_GPIO_Init+0x13e>
 8003b8a:	4a8e      	ldr	r2, [pc, #568]	; (8003dc4 <HAL_GPIO_Init+0x2b0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d046      	beq.n	8003c1e <HAL_GPIO_Init+0x10a>
 8003b90:	4a8c      	ldr	r2, [pc, #560]	; (8003dc4 <HAL_GPIO_Init+0x2b0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d85d      	bhi.n	8003c52 <HAL_GPIO_Init+0x13e>
 8003b96:	2b12      	cmp	r3, #18
 8003b98:	d82a      	bhi.n	8003bf0 <HAL_GPIO_Init+0xdc>
 8003b9a:	2b12      	cmp	r3, #18
 8003b9c:	d859      	bhi.n	8003c52 <HAL_GPIO_Init+0x13e>
 8003b9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <HAL_GPIO_Init+0x90>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003c1f 	.word	0x08003c1f
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003c0b 	.word	0x08003c0b
 8003bb0:	08003c4d 	.word	0x08003c4d
 8003bb4:	08003c53 	.word	0x08003c53
 8003bb8:	08003c53 	.word	0x08003c53
 8003bbc:	08003c53 	.word	0x08003c53
 8003bc0:	08003c53 	.word	0x08003c53
 8003bc4:	08003c53 	.word	0x08003c53
 8003bc8:	08003c53 	.word	0x08003c53
 8003bcc:	08003c53 	.word	0x08003c53
 8003bd0:	08003c53 	.word	0x08003c53
 8003bd4:	08003c53 	.word	0x08003c53
 8003bd8:	08003c53 	.word	0x08003c53
 8003bdc:	08003c53 	.word	0x08003c53
 8003be0:	08003c53 	.word	0x08003c53
 8003be4:	08003c53 	.word	0x08003c53
 8003be8:	08003c01 	.word	0x08003c01
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	4a75      	ldr	r2, [pc, #468]	; (8003dc8 <HAL_GPIO_Init+0x2b4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bf6:	e02c      	b.n	8003c52 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	623b      	str	r3, [r7, #32]
          break;
 8003bfe:	e029      	b.n	8003c54 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	3304      	adds	r3, #4
 8003c06:	623b      	str	r3, [r7, #32]
          break;
 8003c08:	e024      	b.n	8003c54 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	623b      	str	r3, [r7, #32]
          break;
 8003c12:	e01f      	b.n	8003c54 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	623b      	str	r3, [r7, #32]
          break;
 8003c1c:	e01a      	b.n	8003c54 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c26:	2304      	movs	r3, #4
 8003c28:	623b      	str	r3, [r7, #32]
          break;
 8003c2a:	e013      	b.n	8003c54 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d105      	bne.n	8003c40 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c34:	2308      	movs	r3, #8
 8003c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	611a      	str	r2, [r3, #16]
          break;
 8003c3e:	e009      	b.n	8003c54 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c40:	2308      	movs	r3, #8
 8003c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	615a      	str	r2, [r3, #20]
          break;
 8003c4a:	e003      	b.n	8003c54 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	623b      	str	r3, [r7, #32]
          break;
 8003c50:	e000      	b.n	8003c54 <HAL_GPIO_Init+0x140>
          break;
 8003c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2bff      	cmp	r3, #255	; 0xff
 8003c58:	d801      	bhi.n	8003c5e <HAL_GPIO_Init+0x14a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	e001      	b.n	8003c62 <HAL_GPIO_Init+0x14e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2bff      	cmp	r3, #255	; 0xff
 8003c68:	d802      	bhi.n	8003c70 <HAL_GPIO_Init+0x15c>
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	e002      	b.n	8003c76 <HAL_GPIO_Init+0x162>
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	3b08      	subs	r3, #8
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	210f      	movs	r1, #15
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	401a      	ands	r2, r3
 8003c88:	6a39      	ldr	r1, [r7, #32]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80c1 	beq.w	8003e26 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ca4:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_GPIO_Init+0x2b8>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4a48      	ldr	r2, [pc, #288]	; (8003dcc <HAL_GPIO_Init+0x2b8>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6193      	str	r3, [r2, #24]
 8003cb0:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <HAL_GPIO_Init+0x2b8>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8003cbc:	4a44      	ldr	r2, [pc, #272]	; (8003dd0 <HAL_GPIO_Init+0x2bc>)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	220f      	movs	r2, #15
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3c      	ldr	r2, [pc, #240]	; (8003dd4 <HAL_GPIO_Init+0x2c0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d01f      	beq.n	8003d28 <HAL_GPIO_Init+0x214>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3b      	ldr	r2, [pc, #236]	; (8003dd8 <HAL_GPIO_Init+0x2c4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d019      	beq.n	8003d24 <HAL_GPIO_Init+0x210>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3a      	ldr	r2, [pc, #232]	; (8003ddc <HAL_GPIO_Init+0x2c8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_GPIO_Init+0x20c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a39      	ldr	r2, [pc, #228]	; (8003de0 <HAL_GPIO_Init+0x2cc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00d      	beq.n	8003d1c <HAL_GPIO_Init+0x208>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <HAL_GPIO_Init+0x204>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a37      	ldr	r2, [pc, #220]	; (8003de8 <HAL_GPIO_Init+0x2d4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d101      	bne.n	8003d14 <HAL_GPIO_Init+0x200>
 8003d10:	2305      	movs	r3, #5
 8003d12:	e00a      	b.n	8003d2a <HAL_GPIO_Init+0x216>
 8003d14:	2306      	movs	r3, #6
 8003d16:	e008      	b.n	8003d2a <HAL_GPIO_Init+0x216>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	e006      	b.n	8003d2a <HAL_GPIO_Init+0x216>
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e004      	b.n	8003d2a <HAL_GPIO_Init+0x216>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e002      	b.n	8003d2a <HAL_GPIO_Init+0x216>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <HAL_GPIO_Init+0x216>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	f002 0203 	and.w	r2, r2, #3
 8003d30:	0092      	lsls	r2, r2, #2
 8003d32:	4093      	lsls	r3, r2
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8003d3a:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <HAL_GPIO_Init+0x2bc>)
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	3302      	adds	r3, #2
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d006      	beq.n	8003d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4924      	ldr	r1, [pc, #144]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	4920      	ldr	r1, [pc, #128]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d006      	beq.n	8003d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	491a      	ldr	r1, [pc, #104]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d8a:	4b18      	ldr	r3, [pc, #96]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	4916      	ldr	r1, [pc, #88]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d025      	beq.n	8003df0 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003da4:	4b11      	ldr	r3, [pc, #68]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	4910      	ldr	r1, [pc, #64]	; (8003dec <HAL_GPIO_Init+0x2d8>)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]
 8003db0:	e025      	b.n	8003dfe <HAL_GPIO_Init+0x2ea>
 8003db2:	bf00      	nop
 8003db4:	10320000 	.word	0x10320000
 8003db8:	10310000 	.word	0x10310000
 8003dbc:	10220000 	.word	0x10220000
 8003dc0:	10210000 	.word	0x10210000
 8003dc4:	10120000 	.word	0x10120000
 8003dc8:	10110000 	.word	0x10110000
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40010000 	.word	0x40010000
 8003dd4:	40010800 	.word	0x40010800
 8003dd8:	40010c00 	.word	0x40010c00
 8003ddc:	40011000 	.word	0x40011000
 8003de0:	40011400 	.word	0x40011400
 8003de4:	40011800 	.word	0x40011800
 8003de8:	40011c00 	.word	0x40011c00
 8003dec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_GPIO_Init+0x32c>)
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	4911      	ldr	r1, [pc, #68]	; (8003e40 <HAL_GPIO_Init+0x32c>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_GPIO_Init+0x32c>)
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	490c      	ldr	r1, [pc, #48]	; (8003e40 <HAL_GPIO_Init+0x32c>)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]
 8003e16:	e006      	b.n	8003e26 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_GPIO_Init+0x32c>)
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	4907      	ldr	r1, [pc, #28]	; (8003e40 <HAL_GPIO_Init+0x32c>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	3301      	adds	r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	f67f ae82 	bls.w	8003b38 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	372c      	adds	r7, #44	; 0x2c
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	40010400 	.word	0x40010400

08003e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	887b      	ldrh	r3, [r7, #2]
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
 8003e60:	e001      	b.n	8003e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	807b      	strh	r3, [r7, #2]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e82:	787b      	ldrb	r3, [r7, #1]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e8e:	e003      	b.n	8003e98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	041a      	lsls	r2, r3, #16
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	611a      	str	r2, [r3, #16]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eba:	4a05      	ldr	r2, [pc, #20]	; (8003ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f806 	bl	8003ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <HAL_PWR_EnableBkUpAccess+0x14>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	bf00      	nop
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	420e0020 	.word	0x420e0020

08003f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8087 	beq.w	8004028 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f1a:	4b92      	ldr	r3, [pc, #584]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f26:	4b8f      	ldr	r3, [pc, #572]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d112      	bne.n	8003f58 <HAL_RCC_OscConfig+0x58>
 8003f32:	4b8c      	ldr	r3, [pc, #560]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	4b88      	ldr	r3, [pc, #544]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d06c      	beq.n	8004026 <HAL_RCC_OscConfig+0x126>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d168      	bne.n	8004026 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e22d      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x70>
 8003f62:	4b80      	ldr	r3, [pc, #512]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7f      	ldr	r2, [pc, #508]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e02e      	b.n	8003fce <HAL_RCC_OscConfig+0xce>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCC_OscConfig+0x92>
 8003f78:	4b7a      	ldr	r3, [pc, #488]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a79      	ldr	r2, [pc, #484]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4b77      	ldr	r3, [pc, #476]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a76      	ldr	r2, [pc, #472]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e01d      	b.n	8003fce <HAL_RCC_OscConfig+0xce>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCC_OscConfig+0xb6>
 8003f9c:	4b71      	ldr	r3, [pc, #452]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a70      	ldr	r2, [pc, #448]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b6e      	ldr	r3, [pc, #440]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a6d      	ldr	r2, [pc, #436]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e00b      	b.n	8003fce <HAL_RCC_OscConfig+0xce>
 8003fb6:	4b6b      	ldr	r3, [pc, #428]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6a      	ldr	r2, [pc, #424]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b68      	ldr	r3, [pc, #416]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a67      	ldr	r2, [pc, #412]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fcc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d013      	beq.n	8003ffe <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7ff fc65 	bl	80038a4 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fde:	f7ff fc61 	bl	80038a4 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b64      	cmp	r3, #100	; 0x64
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1e1      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff0:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0xde>
 8003ffc:	e014      	b.n	8004028 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7ff fc51 	bl	80038a4 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004006:	f7ff fc4d 	bl	80038a4 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b64      	cmp	r3, #100	; 0x64
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1cd      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004018:	4b52      	ldr	r3, [pc, #328]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0x106>
 8004024:	e000      	b.n	8004028 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004026:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d063      	beq.n	80040fc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004034:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004040:	4b48      	ldr	r3, [pc, #288]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d11c      	bne.n	8004086 <HAL_RCC_OscConfig+0x186>
 800404c:	4b45      	ldr	r3, [pc, #276]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d116      	bne.n	8004086 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004058:	4b42      	ldr	r3, [pc, #264]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x170>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e1a1      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b3c      	ldr	r3, [pc, #240]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4939      	ldr	r1, [pc, #228]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8004080:	4313      	orrs	r3, r2
 8004082:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004084:	e03a      	b.n	80040fc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d020      	beq.n	80040d0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800408e:	4b36      	ldr	r3, [pc, #216]	; (8004168 <HAL_RCC_OscConfig+0x268>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7ff fc06 	bl	80038a4 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800409c:	f7ff fc02 	bl	80038a4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e182      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ae:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ba:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4926      	ldr	r1, [pc, #152]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
 80040ce:	e015      	b.n	80040fc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <HAL_RCC_OscConfig+0x268>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7ff fbe5 	bl	80038a4 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040de:	f7ff fbe1 	bl	80038a4 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e161      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d039      	beq.n	800417c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d019      	beq.n	8004144 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004110:	4b16      	ldr	r3, [pc, #88]	; (800416c <HAL_RCC_OscConfig+0x26c>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7ff fbc5 	bl	80038a4 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411e:	f7ff fbc1 	bl	80038a4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e141      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCC_OscConfig+0x264>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800413c:	2001      	movs	r0, #1
 800413e:	f000 fadf 	bl	8004700 <RCC_Delay>
 8004142:	e01b      	b.n	800417c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004144:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_RCC_OscConfig+0x26c>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414a:	f7ff fbab 	bl	80038a4 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	e00e      	b.n	8004170 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004152:	f7ff fba7 	bl	80038a4 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d907      	bls.n	8004170 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e127      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
 8004164:	40021000 	.word	0x40021000
 8004168:	42420000 	.word	0x42420000
 800416c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004170:	4b92      	ldr	r3, [pc, #584]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ea      	bne.n	8004152 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80a6 	beq.w	80042d6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418e:	4b8b      	ldr	r3, [pc, #556]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10d      	bne.n	80041b6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419a:	4b88      	ldr	r3, [pc, #544]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	4a87      	ldr	r2, [pc, #540]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80041a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a4:	61d3      	str	r3, [r2, #28]
 80041a6:	4b85      	ldr	r3, [pc, #532]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	4b82      	ldr	r3, [pc, #520]	; (80043c0 <HAL_RCC_OscConfig+0x4c0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d118      	bne.n	80041f4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c2:	4b7f      	ldr	r3, [pc, #508]	; (80043c0 <HAL_RCC_OscConfig+0x4c0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7e      	ldr	r2, [pc, #504]	; (80043c0 <HAL_RCC_OscConfig+0x4c0>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ce:	f7ff fb69 	bl	80038a4 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d6:	f7ff fb65 	bl	80038a4 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b64      	cmp	r3, #100	; 0x64
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0e5      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	4b75      	ldr	r3, [pc, #468]	; (80043c0 <HAL_RCC_OscConfig+0x4c0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d106      	bne.n	800420a <HAL_RCC_OscConfig+0x30a>
 80041fc:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4a6e      	ldr	r2, [pc, #440]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6213      	str	r3, [r2, #32]
 8004208:	e02d      	b.n	8004266 <HAL_RCC_OscConfig+0x366>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x32c>
 8004212:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4a69      	ldr	r2, [pc, #420]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	6213      	str	r3, [r2, #32]
 800421e:	4b67      	ldr	r3, [pc, #412]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	4a66      	ldr	r2, [pc, #408]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004224:	f023 0304 	bic.w	r3, r3, #4
 8004228:	6213      	str	r3, [r2, #32]
 800422a:	e01c      	b.n	8004266 <HAL_RCC_OscConfig+0x366>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d10c      	bne.n	800424e <HAL_RCC_OscConfig+0x34e>
 8004234:	4b61      	ldr	r3, [pc, #388]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4a60      	ldr	r2, [pc, #384]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 800423a:	f043 0304 	orr.w	r3, r3, #4
 800423e:	6213      	str	r3, [r2, #32]
 8004240:	4b5e      	ldr	r3, [pc, #376]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4a5d      	ldr	r2, [pc, #372]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6213      	str	r3, [r2, #32]
 800424c:	e00b      	b.n	8004266 <HAL_RCC_OscConfig+0x366>
 800424e:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4a5a      	ldr	r2, [pc, #360]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6213      	str	r3, [r2, #32]
 800425a:	4b58      	ldr	r3, [pc, #352]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4a57      	ldr	r2, [pc, #348]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004260:	f023 0304 	bic.w	r3, r3, #4
 8004264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d015      	beq.n	800429a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7ff fb19 	bl	80038a4 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004274:	e00a      	b.n	800428c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7ff fb15 	bl	80038a4 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e093      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	4b4b      	ldr	r3, [pc, #300]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ee      	beq.n	8004276 <HAL_RCC_OscConfig+0x376>
 8004298:	e014      	b.n	80042c4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429a:	f7ff fb03 	bl	80038a4 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7ff faff 	bl	80038a4 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e07d      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b8:	4b40      	ldr	r3, [pc, #256]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ee      	bne.n	80042a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d105      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ca:	4b3c      	ldr	r3, [pc, #240]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4a3b      	ldr	r2, [pc, #236]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80042d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d069      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042de:	4b37      	ldr	r3, [pc, #220]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d061      	beq.n	80043ae <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d146      	bne.n	8004380 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7ff fad4 	bl	80038a4 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004300:	f7ff fad0 	bl	80038a4 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e050      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004312:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004326:	d108      	bne.n	800433a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004328:	4b24      	ldr	r3, [pc, #144]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4921      	ldr	r1, [pc, #132]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a19      	ldr	r1, [r3, #32]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	430b      	orrs	r3, r1
 800434c:	491b      	ldr	r1, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7ff faa4 	bl	80038a4 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004360:	f7ff faa0 	bl	80038a4 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e020      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004372:	4b12      	ldr	r3, [pc, #72]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCC_OscConfig+0x460>
 800437e:	e018      	b.n	80043b2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_RCC_OscConfig+0x4c4>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004386:	f7ff fa8d 	bl	80038a4 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438e:	f7ff fa89 	bl	80038a4 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e009      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_OscConfig+0x4bc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x48e>
 80043ac:	e001      	b.n	80043b2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
 80043c4:	42420060 	.word	0x42420060

080043c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80043d6:	4b7e      	ldr	r3, [pc, #504]	; (80045d0 <HAL_RCC_ClockConfig+0x208>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d910      	bls.n	8004406 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e4:	4b7a      	ldr	r3, [pc, #488]	; (80045d0 <HAL_RCC_ClockConfig+0x208>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 0207 	bic.w	r2, r3, #7
 80043ec:	4978      	ldr	r1, [pc, #480]	; (80045d0 <HAL_RCC_ClockConfig+0x208>)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043f4:	4b76      	ldr	r3, [pc, #472]	; (80045d0 <HAL_RCC_ClockConfig+0x208>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d001      	beq.n	8004406 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e0e0      	b.n	80045c8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d020      	beq.n	8004454 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800441e:	4b6d      	ldr	r3, [pc, #436]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4a6c      	ldr	r2, [pc, #432]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004424:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004428:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004436:	4b67      	ldr	r3, [pc, #412]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4a66      	ldr	r2, [pc, #408]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 800443c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004440:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004442:	4b64      	ldr	r3, [pc, #400]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	4961      	ldr	r1, [pc, #388]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d06a      	beq.n	8004536 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004468:	4b5a      	ldr	r3, [pc, #360]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d115      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0a7      	b.n	80045c8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004480:	4b54      	ldr	r3, [pc, #336]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e09b      	b.n	80045c8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	4b50      	ldr	r3, [pc, #320]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e093      	b.n	80045c8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a0:	4b4c      	ldr	r3, [pc, #304]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f023 0203 	bic.w	r2, r3, #3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4949      	ldr	r1, [pc, #292]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b2:	f7ff f9f7 	bl	80038a4 <HAL_GetTick>
 80044b6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d112      	bne.n	80044e6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c2:	f7ff f9ef 	bl	80038a4 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e077      	b.n	80045c8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d8:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d1ee      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xfa>
 80044e4:	e027      	b.n	8004536 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d11d      	bne.n	800452a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7ff f9d8 	bl	80038a4 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e060      	b.n	80045c8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004506:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b08      	cmp	r3, #8
 8004510:	d1ee      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x128>
 8004512:	e010      	b.n	8004536 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004514:	f7ff f9c6 	bl	80038a4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e04e      	b.n	80045c8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800452a:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1ee      	bne.n	8004514 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <HAL_RCC_ClockConfig+0x208>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d210      	bcs.n	8004566 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004544:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <HAL_RCC_ClockConfig+0x208>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 0207 	bic.w	r2, r3, #7
 800454c:	4920      	ldr	r1, [pc, #128]	; (80045d0 <HAL_RCC_ClockConfig+0x208>)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004554:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <HAL_RCC_ClockConfig+0x208>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d001      	beq.n	8004566 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e030      	b.n	80045c8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004572:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	4915      	ldr	r1, [pc, #84]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	490d      	ldr	r1, [pc, #52]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a4:	f000 f81c 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <HAL_RCC_ClockConfig+0x20c>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	4908      	ldr	r1, [pc, #32]	; (80045d8 <HAL_RCC_ClockConfig+0x210>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
 80045bc:	4a07      	ldr	r2, [pc, #28]	; (80045dc <HAL_RCC_ClockConfig+0x214>)
 80045be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80045c0:	2000      	movs	r0, #0
 80045c2:	f7ff f92d 	bl	8003820 <HAL_InitTick>
  
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40022000 	.word	0x40022000
 80045d4:	40021000 	.word	0x40021000
 80045d8:	0801fdfc 	.word	0x0801fdfc
 80045dc:	20000000 	.word	0x20000000

080045e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b490      	push	{r4, r7}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <HAL_RCC_GetSysClockFreq+0xac>)
 80045e8:	1d3c      	adds	r4, r7, #4
 80045ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045f0:	f240 2301 	movw	r3, #513	; 0x201
 80045f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <HAL_RCC_GetSysClockFreq+0xb0>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b04      	cmp	r3, #4
 8004618:	d002      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x40>
 800461a:	2b08      	cmp	r3, #8
 800461c:	d003      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x46>
 800461e:	e02b      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004620:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004622:	623b      	str	r3, [r7, #32]
      break;
 8004624:	e02b      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	0c9b      	lsrs	r3, r3, #18
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	3328      	adds	r3, #40	; 0x28
 8004630:	443b      	add	r3, r7
 8004632:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004636:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004642:	4b13      	ldr	r3, [pc, #76]	; (8004690 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	0c5b      	lsrs	r3, r3, #17
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	3328      	adds	r3, #40	; 0x28
 800464e:	443b      	add	r3, r7
 8004650:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004654:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb4>)
 800465a:	fb03 f202 	mul.w	r2, r3, r2
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	e004      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800466c:	fb02 f303 	mul.w	r3, r2, r3
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	623b      	str	r3, [r7, #32]
      break;
 8004676:	e002      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb4>)
 800467a:	623b      	str	r3, [r7, #32]
      break;
 800467c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467e:	6a3b      	ldr	r3, [r7, #32]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3728      	adds	r7, #40	; 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	bc90      	pop	{r4, r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	0800a60c 	.word	0x0800a60c
 8004690:	40021000 	.word	0x40021000
 8004694:	007a1200 	.word	0x007a1200
 8004698:	003d0900 	.word	0x003d0900

0800469c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a0:	4b02      	ldr	r3, [pc, #8]	; (80046ac <HAL_RCC_GetHCLKFreq+0x10>)
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	20000000 	.word	0x20000000

080046b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046b4:	f7ff fff2 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}    
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40021000 	.word	0x40021000
 80046d4:	0801fe0c 	.word	0x0801fe0c

080046d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046dc:	f7ff ffde 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	0adb      	lsrs	r3, r3, #11
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000
 80046fc:	0801fe0c 	.word	0x0801fe0c

08004700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <RCC_Delay+0x38>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0b      	ldr	r2, [pc, #44]	; (800473c <RCC_Delay+0x3c>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	0a5b      	lsrs	r3, r3, #9
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800471c:	bf00      	nop
}
 800471e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e5a      	subs	r2, r3, #1
 8004724:	60fa      	str	r2, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f8      	bne.n	800471c <RCC_Delay+0x1c>
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000000 	.word	0x20000000
 800473c:	10624dd3 	.word	0x10624dd3

08004740 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d07d      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800475c:	2300      	movs	r3, #0
 800475e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004760:	4b4f      	ldr	r3, [pc, #316]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10d      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800476c:	4b4c      	ldr	r3, [pc, #304]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	4a4b      	ldr	r2, [pc, #300]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004776:	61d3      	str	r3, [r2, #28]
 8004778:	4b49      	ldr	r3, [pc, #292]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004784:	2301      	movs	r3, #1
 8004786:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d118      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004794:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a42      	ldr	r2, [pc, #264]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800479a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a0:	f7ff f880 	bl	80038a4 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a6:	e008      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a8:	f7ff f87c 	bl	80038a4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e06d      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ba:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c6:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ce:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d02e      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d027      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e4:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ee:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047f4:	4b2c      	ldr	r3, [pc, #176]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047fa:	4a29      	ldr	r2, [pc, #164]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d014      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7ff f84b 	bl	80038a4 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7ff f847 	bl	80038a4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e036      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ee      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4917      	ldr	r1, [pc, #92]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004842:	4313      	orrs	r3, r2
 8004844:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004846:	7dfb      	ldrb	r3, [r7, #23]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004856:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004864:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	490b      	ldr	r1, [pc, #44]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004872:	4313      	orrs	r3, r2
 8004874:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	4904      	ldr	r1, [pc, #16]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40007000 	.word	0x40007000
 80048a8:	42420440 	.word	0x42420440

080048ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048ac:	b590      	push	{r4, r7, lr}
 80048ae:	b08d      	sub	sp, #52	; 0x34
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048b4:	4b6b      	ldr	r3, [pc, #428]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80048b6:	f107 040c 	add.w	r4, r7, #12
 80048ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048c0:	f240 2301 	movw	r3, #513	; 0x201
 80048c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	2300      	movs	r3, #0
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ce:	2300      	movs	r3, #0
 80048d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	2300      	movs	r3, #0
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3b01      	subs	r3, #1
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	f200 80b7 	bhi.w	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 80048e4:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	080049cb 	.word	0x080049cb
 80048f0:	08004a37 	.word	0x08004a37
 80048f4:	08004a53 	.word	0x08004a53
 80048f8:	080049bb 	.word	0x080049bb
 80048fc:	08004a53 	.word	0x08004a53
 8004900:	08004a53 	.word	0x08004a53
 8004904:	08004a53 	.word	0x08004a53
 8004908:	080049c3 	.word	0x080049c3
 800490c:	08004a53 	.word	0x08004a53
 8004910:	08004a53 	.word	0x08004a53
 8004914:	08004a53 	.word	0x08004a53
 8004918:	08004a53 	.word	0x08004a53
 800491c:	08004a53 	.word	0x08004a53
 8004920:	08004a53 	.word	0x08004a53
 8004924:	08004a53 	.word	0x08004a53
 8004928:	0800492d 	.word	0x0800492d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800492c:	4b4e      	ldr	r3, [pc, #312]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8004932:	4b4d      	ldr	r3, [pc, #308]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 808b 	beq.w	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	0c9b      	lsrs	r3, r3, #18
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	3330      	adds	r3, #48	; 0x30
 800494a:	443b      	add	r3, r7
 800494c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004950:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d017      	beq.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800495c:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	0c5b      	lsrs	r3, r3, #17
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	3330      	adds	r3, #48	; 0x30
 8004968:	443b      	add	r3, r7
 800496a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800497a:	4a3c      	ldr	r2, [pc, #240]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	fb02 f303 	mul.w	r3, r2, r3
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498a:	e004      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	4a38      	ldr	r2, [pc, #224]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004996:	4b34      	ldr	r3, [pc, #208]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a2:	d102      	bne.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80049a8:	e055      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          frequency = (pllclk * 2) / 3;
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4a31      	ldr	r2, [pc, #196]	; (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049b8:	e04d      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80049ba:	f7ff fe11 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 80049be:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80049c0:	e04a      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80049c2:	f7ff fe0d 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 80049c6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80049c8:	e046      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049da:	d108      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ec:	e022      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f8:	d109      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80049fa:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8004a06:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0c:	e012      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a18:	d109      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004a1a:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = HSE_VALUE / 128U;
 8004a26:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2c:	e002      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004a32:	e011      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004a34:	e010      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a36:	f7ff fe4f 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	0b9b      	lsrs	r3, r3, #14
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	3301      	adds	r3, #1
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a50:	e002      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
  default: 
    {
      break;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      break;
 8004a56:	bf00      	nop
    }
  }
  return(frequency);
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3734      	adds	r7, #52	; 0x34
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd90      	pop	{r4, r7, pc}
 8004a62:	bf00      	nop
 8004a64:	0800a61c 	.word	0x0800a61c
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	007a1200 	.word	0x007a1200
 8004a70:	003d0900 	.word	0x003d0900
 8004a74:	aaaaaaab 	.word	0xaaaaaaab

08004a78 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e084      	b.n	8004b98 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	7c5b      	ldrb	r3, [r3, #17]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fd fdf4 	bl	800268c <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f87a 	bl	8004ba4 <HAL_RTC_WaitForSynchro>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e06b      	b.n	8004b98 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f89c 	bl	8004bfe <RTC_EnterInitMode>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e060      	b.n	8004b98 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0207 	bic.w	r2, r2, #7
 8004ae4:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004aee:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <HAL_RTC_Init+0x128>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <HAL_RTC_Init+0x128>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004afa:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_RTC_Init+0x128>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4926      	ldr	r1, [pc, #152]	; (8004ba0 <HAL_RTC_Init+0x128>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d003      	beq.n	8004b1e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e00e      	b.n	8004b3c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f7ff fec4 	bl	80048ac <HAL_RCCEx_GetPeriphCLKFreq>
 8004b24:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e030      	b.n	8004b98 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 010f 	bic.w	r1, r3, #15
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	0c1a      	lsrs	r2, r3, #16
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	0c1b      	lsrs	r3, r3, #16
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	b291      	uxth	r1, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f870 	bl	8004c4e <RTC_ExitInitMode>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d004      	beq.n	8004b7e <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2204      	movs	r2, #4
 8004b78:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e00c      	b.n	8004b98 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40006c00 	.word	0x40006c00

08004ba4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e01d      	b.n	8004bf6 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0208 	bic.w	r2, r2, #8
 8004bc8:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8004bca:	f7fe fe6b 	bl	80038a4 <HAL_GetTick>
 8004bce:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004bd0:	e009      	b.n	8004be6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8004bd2:	f7fe fe67 	bl	80038a4 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be0:	d901      	bls.n	8004be6 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e007      	b.n	8004bf6 <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ee      	beq.n	8004bd2 <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8004c0a:	f7fe fe4b 	bl	80038a4 <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c10:	e009      	b.n	8004c26 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c12:	f7fe fe47 	bl	80038a4 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c20:	d901      	bls.n	8004c26 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e00f      	b.n	8004c46 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ee      	beq.n	8004c12 <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0210 	orr.w	r2, r2, #16
 8004c42:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0210 	bic.w	r2, r2, #16
 8004c68:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8004c6a:	f7fe fe1b 	bl	80038a4 <HAL_GetTick>
 8004c6e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c70:	e009      	b.n	8004c86 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c72:	f7fe fe17 	bl	80038a4 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c80:	d901      	bls.n	8004c86 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e007      	b.n	8004c96 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ee      	beq.n	8004c72 <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <HAL_RTCEx_BKUPWrite+0x30>)
 8004cb2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4413      	add	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	40006c00 	.word	0x40006c00

08004cd4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_RTCEx_BKUPRead+0x34>)
 8004ce8:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr
 8004d08:	40006c00 	.word	0x40006c00

08004d0c <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e034      	b.n	8004d8c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7fd fd94 	bl	8002864 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3308      	adds	r3, #8
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f000 fdd6 	bl	80058f8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	461a      	mov	r2, r3
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	f000 fe4e 	bl	80059f8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6858      	ldr	r0, [r3, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	f000 fe79 	bl	8005a60 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	6892      	ldr	r2, [r2, #8]
 8004d76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6892      	ldr	r2, [r2, #8]
 8004d82:	f041 0101 	orr.w	r1, r1, #1
 8004d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e01d      	b.n	8004de2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fd fc8a 	bl	80026d4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f000 fab2 	bl	800533c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a1a      	ldr	r2, [r3, #32]
 8004e34:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e38:	4013      	ands	r3, r2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <HAL_TIM_Base_Stop+0x40>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	f240 4344 	movw	r3, #1092	; 0x444
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d107      	bne.n	8004e5e <HAL_TIM_Base_Stop+0x40>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10f      	bne.n	8004eee <HAL_TIM_Base_Stop_IT+0x48>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d107      	bne.n	8004eee <HAL_TIM_Base_Stop_IT+0x48>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr

08004efa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d122      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d11b      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f06f 0202 	mvn.w	r2, #2
 8004f26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f9e1 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 8004f42:	e005      	b.n	8004f50 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f9d4 	bl	80052f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f9e3 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d122      	bne.n	8004faa <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d11b      	bne.n	8004faa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f06f 0204 	mvn.w	r2, #4
 8004f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f9b7 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 8004f96:	e005      	b.n	8004fa4 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f9aa 	bl	80052f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9b9 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d122      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d11b      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0208 	mvn.w	r2, #8
 8004fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f98d 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 8004fea:	e005      	b.n	8004ff8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f980 	bl	80052f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f98f 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b10      	cmp	r3, #16
 800500a:	d122      	bne.n	8005052 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b10      	cmp	r3, #16
 8005018:	d11b      	bne.n	8005052 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0210 	mvn.w	r2, #16
 8005022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2208      	movs	r2, #8
 8005028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f963 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 800503e:	e005      	b.n	800504c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f956 	bl	80052f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f965 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10e      	bne.n	800507e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f06f 0201 	mvn.w	r2, #1
 8005076:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f931 	bl	80052e0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	2b80      	cmp	r3, #128	; 0x80
 800508a:	d10e      	bne.n	80050aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d107      	bne.n	80050aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fab9 	bl	800561c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b40      	cmp	r3, #64	; 0x40
 80050b6:	d10e      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d107      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f929 	bl	8005328 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d10e      	bne.n	8005102 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d107      	bne.n	8005102 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f06f 0220 	mvn.w	r2, #32
 80050fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fa84 	bl	800560a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_TIM_ConfigClockSource+0x1c>
 8005122:	2302      	movs	r3, #2
 8005124:	e0d8      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x1ce>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005144:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800514c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515e:	d052      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xfc>
 8005160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005164:	f200 80ae 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1ba>
 8005168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516c:	d027      	beq.n	80051be <HAL_TIM_ConfigClockSource+0xb4>
 800516e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005172:	f200 80a7 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1ba>
 8005176:	2b70      	cmp	r3, #112	; 0x70
 8005178:	d02a      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0xc6>
 800517a:	2b70      	cmp	r3, #112	; 0x70
 800517c:	f200 80a2 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1ba>
 8005180:	2b60      	cmp	r3, #96	; 0x60
 8005182:	d063      	beq.n	800524c <HAL_TIM_ConfigClockSource+0x142>
 8005184:	2b60      	cmp	r3, #96	; 0x60
 8005186:	f200 809d 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1ba>
 800518a:	2b50      	cmp	r3, #80	; 0x50
 800518c:	d04e      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x122>
 800518e:	2b50      	cmp	r3, #80	; 0x50
 8005190:	f200 8098 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1ba>
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d069      	beq.n	800526c <HAL_TIM_ConfigClockSource+0x162>
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	f200 8093 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1ba>
 800519e:	2b30      	cmp	r3, #48	; 0x30
 80051a0:	f000 8089 	beq.w	80052b6 <HAL_TIM_ConfigClockSource+0x1ac>
 80051a4:	2b30      	cmp	r3, #48	; 0x30
 80051a6:	f200 808d 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1ba>
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d07c      	beq.n	80052a8 <HAL_TIM_ConfigClockSource+0x19e>
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	f200 8088 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x1ba>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d069      	beq.n	800528c <HAL_TIM_ConfigClockSource+0x182>
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d06e      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80051bc:	e082      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0207 	bic.w	r2, r2, #7
 80051cc:	609a      	str	r2, [r3, #8]
    break;
 80051ce:	e07a      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	6899      	ldr	r1, [r3, #8]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f000 f9ae 	bl	8005540 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	609a      	str	r2, [r3, #8]
    break;
 8005204:	e05f      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6899      	ldr	r1, [r3, #8]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f000 f993 	bl	8005540 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005228:	609a      	str	r2, [r3, #8]
    break;
 800522a:	e04c      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6859      	ldr	r1, [r3, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	461a      	mov	r2, r3
 800523a:	f000 f8fd 	bl	8005438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2150      	movs	r1, #80	; 0x50
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f95c 	bl	8005502 <TIM_ITRx_SetConfig>
    break;
 800524a:	e03c      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	461a      	mov	r2, r3
 800525a:	f000 f91f 	bl	800549c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2160      	movs	r1, #96	; 0x60
 8005264:	4618      	mov	r0, r3
 8005266:	f000 f94c 	bl	8005502 <TIM_ITRx_SetConfig>
    break;
 800526a:	e02c      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	461a      	mov	r2, r3
 800527a:	f000 f8dd 	bl	8005438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2140      	movs	r1, #64	; 0x40
 8005284:	4618      	mov	r0, r3
 8005286:	f000 f93c 	bl	8005502 <TIM_ITRx_SetConfig>
    break;
 800528a:	e01c      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2100      	movs	r1, #0
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f935 	bl	8005502 <TIM_ITRx_SetConfig>
    break;
 8005298:	e015      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2110      	movs	r1, #16
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f92e 	bl	8005502 <TIM_ITRx_SetConfig>
    break;
 80052a6:	e00e      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2120      	movs	r1, #32
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f927 	bl	8005502 <TIM_ITRx_SetConfig>
    break;
 80052b4:	e007      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2130      	movs	r1, #48	; 0x30
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 f920 	bl	8005502 <TIM_ITRx_SetConfig>
    break;
 80052c2:	e000      	b.n	80052c6 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 80052c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
	...

0800533c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a34      	ldr	r2, [pc, #208]	; (8005424 <TIM_Base_SetConfig+0xe8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <TIM_Base_SetConfig+0x44>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a33      	ldr	r2, [pc, #204]	; (8005428 <TIM_Base_SetConfig+0xec>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00f      	beq.n	8005380 <TIM_Base_SetConfig+0x44>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d00b      	beq.n	8005380 <TIM_Base_SetConfig+0x44>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a30      	ldr	r2, [pc, #192]	; (800542c <TIM_Base_SetConfig+0xf0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_Base_SetConfig+0x44>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a2f      	ldr	r2, [pc, #188]	; (8005430 <TIM_Base_SetConfig+0xf4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_Base_SetConfig+0x44>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a2e      	ldr	r2, [pc, #184]	; (8005434 <TIM_Base_SetConfig+0xf8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d108      	bne.n	8005392 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a23      	ldr	r2, [pc, #140]	; (8005424 <TIM_Base_SetConfig+0xe8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <TIM_Base_SetConfig+0x86>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a22      	ldr	r2, [pc, #136]	; (8005428 <TIM_Base_SetConfig+0xec>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00f      	beq.n	80053c2 <TIM_Base_SetConfig+0x86>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d00b      	beq.n	80053c2 <TIM_Base_SetConfig+0x86>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a1f      	ldr	r2, [pc, #124]	; (800542c <TIM_Base_SetConfig+0xf0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d007      	beq.n	80053c2 <TIM_Base_SetConfig+0x86>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <TIM_Base_SetConfig+0xf4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d003      	beq.n	80053c2 <TIM_Base_SetConfig+0x86>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1d      	ldr	r2, [pc, #116]	; (8005434 <TIM_Base_SetConfig+0xf8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d108      	bne.n	80053d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053da:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a09      	ldr	r2, [pc, #36]	; (8005424 <TIM_Base_SetConfig+0xe8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_Base_SetConfig+0xd0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a08      	ldr	r2, [pc, #32]	; (8005428 <TIM_Base_SetConfig+0xec>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d103      	bne.n	8005414 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	615a      	str	r2, [r3, #20]
}
 800541a:	bf00      	nop
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40013400 	.word	0x40013400
 800542c:	40000400 	.word	0x40000400
 8005430:	40000800 	.word	0x40000800
 8005434:	40000c00 	.word	0x40000c00

08005438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f023 0201 	bic.w	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800546a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f023 030a 	bic.w	r3, r3, #10
 800547c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f023 0210 	bic.w	r2, r3, #16
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	031b      	lsls	r3, r3, #12
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	621a      	str	r2, [r3, #32]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr

08005502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005520:	887b      	ldrh	r3, [r7, #2]
 8005522:	f043 0307 	orr.w	r3, r3, #7
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	609a      	str	r2, [r3, #8]
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800555e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	431a      	orrs	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4313      	orrs	r3, r2
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	609a      	str	r2, [r3, #8]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005596:	2302      	movs	r3, #2
 8005598:	e032      	b.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80055b8:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055da:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6899      	ldr	r1, [r3, #8]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e03f      	b.n	80056c0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7fd f875 	bl	8002744 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2224      	movs	r2, #36	; 0x24
 800565e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005670:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f828 	bl	80056c8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005686:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005696:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056a6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800570a:	f023 030c 	bic.w	r3, r3, #12
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	430b      	orrs	r3, r1
 8005716:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6f      	ldr	r2, [pc, #444]	; (80058f0 <UART_SetConfig+0x228>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d16b      	bne.n	8005810 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005738:	f7fe ffce 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 800573c:	4602      	mov	r2, r0
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009a      	lsls	r2, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005752:	4a68      	ldr	r2, [pc, #416]	; (80058f4 <UART_SetConfig+0x22c>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	011c      	lsls	r4, r3, #4
 800575c:	f7fe ffbc 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 8005760:	4602      	mov	r2, r0
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009a      	lsls	r2, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	fbb2 f5f3 	udiv	r5, r2, r3
 8005776:	f7fe ffaf 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 800577a:	4602      	mov	r2, r0
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009a      	lsls	r2, r3, #2
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	4a58      	ldr	r2, [pc, #352]	; (80058f4 <UART_SetConfig+0x22c>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2264      	movs	r2, #100	; 0x64
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	1aeb      	subs	r3, r5, r3
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	3332      	adds	r3, #50	; 0x32
 80057a4:	4a53      	ldr	r2, [pc, #332]	; (80058f4 <UART_SetConfig+0x22c>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b0:	441c      	add	r4, r3
 80057b2:	f7fe ff91 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 80057b6:	4602      	mov	r2, r0
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	009a      	lsls	r2, r3, #2
 80057c0:	441a      	add	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80057cc:	f7fe ff84 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009a      	lsls	r2, r3, #2
 80057da:	441a      	add	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	4a43      	ldr	r2, [pc, #268]	; (80058f4 <UART_SetConfig+0x22c>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	2264      	movs	r2, #100	; 0x64
 80057f0:	fb02 f303 	mul.w	r3, r2, r3
 80057f4:	1aeb      	subs	r3, r5, r3
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	3332      	adds	r3, #50	; 0x32
 80057fa:	4a3e      	ldr	r2, [pc, #248]	; (80058f4 <UART_SetConfig+0x22c>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	f003 020f 	and.w	r2, r3, #15
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4422      	add	r2, r4
 800580c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800580e:	e06a      	b.n	80058e6 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005810:	f7fe ff4e 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8005814:	4602      	mov	r2, r0
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009a      	lsls	r2, r3, #2
 800581e:	441a      	add	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	fbb2 f3f3 	udiv	r3, r2, r3
 800582a:	4a32      	ldr	r2, [pc, #200]	; (80058f4 <UART_SetConfig+0x22c>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	011c      	lsls	r4, r3, #4
 8005834:	f7fe ff3c 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8005838:	4602      	mov	r2, r0
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009a      	lsls	r2, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	fbb2 f5f3 	udiv	r5, r2, r3
 800584e:	f7fe ff2f 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8005852:	4602      	mov	r2, r0
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009a      	lsls	r2, r3, #2
 800585c:	441a      	add	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <UART_SetConfig+0x22c>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	2264      	movs	r2, #100	; 0x64
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	1aeb      	subs	r3, r5, r3
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	3332      	adds	r3, #50	; 0x32
 800587c:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <UART_SetConfig+0x22c>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005888:	441c      	add	r4, r3
 800588a:	f7fe ff11 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 800588e:	4602      	mov	r2, r0
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009a      	lsls	r2, r3, #2
 8005898:	441a      	add	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80058a4:	f7fe ff04 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 80058a8:	4602      	mov	r2, r0
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009a      	lsls	r2, r3, #2
 80058b2:	441a      	add	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	4a0d      	ldr	r2, [pc, #52]	; (80058f4 <UART_SetConfig+0x22c>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	2264      	movs	r2, #100	; 0x64
 80058c8:	fb02 f303 	mul.w	r3, r2, r3
 80058cc:	1aeb      	subs	r3, r5, r3
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	3332      	adds	r3, #50	; 0x32
 80058d2:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <UART_SetConfig+0x22c>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	f003 020f 	and.w	r2, r3, #15
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4422      	add	r2, r4
 80058e4:	609a      	str	r2, [r3, #8]
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bdb0      	pop	{r4, r5, r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40013800 	.word	0x40013800
 80058f4:	51eb851f 	.word	0x51eb851f

080058f8 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	f023 0101 	bic.w	r1, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b08      	cmp	r3, #8
 8005920:	d132      	bne.n	8005988 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800592c:	4b31      	ldr	r3, [pc, #196]	; (80059f4 <FSMC_NORSRAM_Init+0xfc>)
 800592e:	4013      	ands	r3, r2
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	6851      	ldr	r1, [r2, #4]
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	6892      	ldr	r2, [r2, #8]
 8005938:	4311      	orrs	r1, r2
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	68d2      	ldr	r2, [r2, #12]
 800593e:	4311      	orrs	r1, r2
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	6912      	ldr	r2, [r2, #16]
 8005944:	4311      	orrs	r1, r2
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	6952      	ldr	r2, [r2, #20]
 800594a:	4311      	orrs	r1, r2
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	6992      	ldr	r2, [r2, #24]
 8005950:	4311      	orrs	r1, r2
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	69d2      	ldr	r2, [r2, #28]
 8005956:	4311      	orrs	r1, r2
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	6a12      	ldr	r2, [r2, #32]
 800595c:	4311      	orrs	r1, r2
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005962:	4311      	orrs	r1, r2
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005968:	4311      	orrs	r1, r2
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800596e:	4311      	orrs	r1, r2
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005974:	430a      	orrs	r2, r1
 8005976:	4313      	orrs	r3, r2
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005986:	e02f      	b.n	80059e8 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005992:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <FSMC_NORSRAM_Init+0xfc>)
 8005994:	4013      	ands	r3, r2
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	6851      	ldr	r1, [r2, #4]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	6892      	ldr	r2, [r2, #8]
 800599e:	4311      	orrs	r1, r2
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	68d2      	ldr	r2, [r2, #12]
 80059a4:	4311      	orrs	r1, r2
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	6912      	ldr	r2, [r2, #16]
 80059aa:	4311      	orrs	r1, r2
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	6952      	ldr	r2, [r2, #20]
 80059b0:	4311      	orrs	r1, r2
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	6992      	ldr	r2, [r2, #24]
 80059b6:	4311      	orrs	r1, r2
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	69d2      	ldr	r2, [r2, #28]
 80059bc:	4311      	orrs	r1, r2
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	6a12      	ldr	r2, [r2, #32]
 80059c2:	4311      	orrs	r1, r2
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059c8:	4311      	orrs	r1, r2
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80059ce:	4311      	orrs	r1, r2
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059d4:	4311      	orrs	r1, r2
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059da:	4311      	orrs	r1, r2
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	6812      	ldr	r2, [r2, #0]
 80059e0:	4319      	orrs	r1, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr
 80059f4:	fff70081 	.word	0xfff70081

080059f8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	431a      	orrs	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	041b      	lsls	r3, r3, #16
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	051b      	lsls	r3, r3, #20
 8005a36:	431a      	orrs	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	3b02      	subs	r3, #2
 8005a3e:	061b      	lsls	r3, r3, #24
 8005a40:	431a      	orrs	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	3201      	adds	r2, #1
 8005a4c:	4319      	orrs	r1, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a74:	d11d      	bne.n	8005ab2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	6852      	ldr	r2, [r2, #4]
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	4311      	orrs	r1, r2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	6892      	ldr	r2, [r2, #8]
 8005a92:	0212      	lsls	r2, r2, #8
 8005a94:	4311      	orrs	r1, r2
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	6992      	ldr	r2, [r2, #24]
 8005a9a:	4311      	orrs	r1, r2
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	68d2      	ldr	r2, [r2, #12]
 8005aa0:	0412      	lsls	r2, r2, #16
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	ea43 0102 	orr.w	r1, r3, r2
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005ab0:	e005      	b.n	8005abe <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	cff00000 	.word	0xcff00000

08005ad0 <__errno>:
 8005ad0:	4b01      	ldr	r3, [pc, #4]	; (8005ad8 <__errno+0x8>)
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20000040 	.word	0x20000040

08005adc <__libc_init_array>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	2600      	movs	r6, #0
 8005ae0:	4d0c      	ldr	r5, [pc, #48]	; (8005b14 <__libc_init_array+0x38>)
 8005ae2:	4c0d      	ldr	r4, [pc, #52]	; (8005b18 <__libc_init_array+0x3c>)
 8005ae4:	1b64      	subs	r4, r4, r5
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	42a6      	cmp	r6, r4
 8005aea:	d109      	bne.n	8005b00 <__libc_init_array+0x24>
 8005aec:	f004 fd04 	bl	800a4f8 <_init>
 8005af0:	2600      	movs	r6, #0
 8005af2:	4d0a      	ldr	r5, [pc, #40]	; (8005b1c <__libc_init_array+0x40>)
 8005af4:	4c0a      	ldr	r4, [pc, #40]	; (8005b20 <__libc_init_array+0x44>)
 8005af6:	1b64      	subs	r4, r4, r5
 8005af8:	10a4      	asrs	r4, r4, #2
 8005afa:	42a6      	cmp	r6, r4
 8005afc:	d105      	bne.n	8005b0a <__libc_init_array+0x2e>
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b04:	4798      	blx	r3
 8005b06:	3601      	adds	r6, #1
 8005b08:	e7ee      	b.n	8005ae8 <__libc_init_array+0xc>
 8005b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0e:	4798      	blx	r3
 8005b10:	3601      	adds	r6, #1
 8005b12:	e7f2      	b.n	8005afa <__libc_init_array+0x1e>
 8005b14:	080201b4 	.word	0x080201b4
 8005b18:	080201b4 	.word	0x080201b4
 8005b1c:	080201b4 	.word	0x080201b4
 8005b20:	080201bc 	.word	0x080201bc

08005b24 <memset>:
 8005b24:	4603      	mov	r3, r0
 8005b26:	4402      	add	r2, r0
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d100      	bne.n	8005b2e <memset+0xa>
 8005b2c:	4770      	bx	lr
 8005b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b32:	e7f9      	b.n	8005b28 <memset+0x4>

08005b34 <sprintf>:
 8005b34:	b40e      	push	{r1, r2, r3}
 8005b36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b3a:	b500      	push	{lr}
 8005b3c:	b09c      	sub	sp, #112	; 0x70
 8005b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b40:	9002      	str	r0, [sp, #8]
 8005b42:	9006      	str	r0, [sp, #24]
 8005b44:	9107      	str	r1, [sp, #28]
 8005b46:	9104      	str	r1, [sp, #16]
 8005b48:	4808      	ldr	r0, [pc, #32]	; (8005b6c <sprintf+0x38>)
 8005b4a:	4909      	ldr	r1, [pc, #36]	; (8005b70 <sprintf+0x3c>)
 8005b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b50:	9105      	str	r1, [sp, #20]
 8005b52:	6800      	ldr	r0, [r0, #0]
 8005b54:	a902      	add	r1, sp, #8
 8005b56:	9301      	str	r3, [sp, #4]
 8005b58:	f000 f80c 	bl	8005b74 <_svfprintf_r>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	9b02      	ldr	r3, [sp, #8]
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	b01c      	add	sp, #112	; 0x70
 8005b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b68:	b003      	add	sp, #12
 8005b6a:	4770      	bx	lr
 8005b6c:	20000040 	.word	0x20000040
 8005b70:	ffff0208 	.word	0xffff0208

08005b74 <_svfprintf_r>:
 8005b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	b0d3      	sub	sp, #332	; 0x14c
 8005b7a:	468b      	mov	fp, r1
 8005b7c:	4692      	mov	sl, r2
 8005b7e:	461e      	mov	r6, r3
 8005b80:	4681      	mov	r9, r0
 8005b82:	f002 f945 	bl	8007e10 <_localeconv_r>
 8005b86:	6803      	ldr	r3, [r0, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b8c:	f7fa fb4c 	bl	8000228 <strlen>
 8005b90:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005b94:	9012      	str	r0, [sp, #72]	; 0x48
 8005b96:	0618      	lsls	r0, r3, #24
 8005b98:	d518      	bpl.n	8005bcc <_svfprintf_r+0x58>
 8005b9a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005b9e:	b9ab      	cbnz	r3, 8005bcc <_svfprintf_r+0x58>
 8005ba0:	2140      	movs	r1, #64	; 0x40
 8005ba2:	4648      	mov	r0, r9
 8005ba4:	f002 f93c 	bl	8007e20 <_malloc_r>
 8005ba8:	f8cb 0000 	str.w	r0, [fp]
 8005bac:	f8cb 0010 	str.w	r0, [fp, #16]
 8005bb0:	b948      	cbnz	r0, 8005bc6 <_svfprintf_r+0x52>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	f8c9 3000 	str.w	r3, [r9]
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bbe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005bc0:	b053      	add	sp, #332	; 0x14c
 8005bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc6:	2340      	movs	r3, #64	; 0x40
 8005bc8:	f8cb 3014 	str.w	r3, [fp, #20]
 8005bcc:	2500      	movs	r5, #0
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 8005bd6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005bda:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 8005bde:	ac29      	add	r4, sp, #164	; 0xa4
 8005be0:	9426      	str	r4, [sp, #152]	; 0x98
 8005be2:	9509      	str	r5, [sp, #36]	; 0x24
 8005be4:	950d      	str	r5, [sp, #52]	; 0x34
 8005be6:	9515      	str	r5, [sp, #84]	; 0x54
 8005be8:	9518      	str	r5, [sp, #96]	; 0x60
 8005bea:	950f      	str	r5, [sp, #60]	; 0x3c
 8005bec:	4653      	mov	r3, sl
 8005bee:	461d      	mov	r5, r3
 8005bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bf4:	b10a      	cbz	r2, 8005bfa <_svfprintf_r+0x86>
 8005bf6:	2a25      	cmp	r2, #37	; 0x25
 8005bf8:	d1f9      	bne.n	8005bee <_svfprintf_r+0x7a>
 8005bfa:	ebb5 070a 	subs.w	r7, r5, sl
 8005bfe:	d00d      	beq.n	8005c1c <_svfprintf_r+0xa8>
 8005c00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c02:	e9c4 a700 	strd	sl, r7, [r4]
 8005c06:	443b      	add	r3, r7
 8005c08:	9328      	str	r3, [sp, #160]	; 0xa0
 8005c0a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	2b07      	cmp	r3, #7
 8005c10:	9327      	str	r3, [sp, #156]	; 0x9c
 8005c12:	dc79      	bgt.n	8005d08 <_svfprintf_r+0x194>
 8005c14:	3408      	adds	r4, #8
 8005c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c18:	443b      	add	r3, r7
 8005c1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c1c:	782b      	ldrb	r3, [r5, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f001 813a 	beq.w	8006e98 <_svfprintf_r+0x1324>
 8005c24:	2300      	movs	r3, #0
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	4698      	mov	r8, r3
 8005c2c:	9207      	str	r2, [sp, #28]
 8005c2e:	270a      	movs	r7, #10
 8005c30:	222b      	movs	r2, #43	; 0x2b
 8005c32:	3501      	adds	r5, #1
 8005c34:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005c38:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c3a:	462b      	mov	r3, r5
 8005c3c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005c40:	910a      	str	r1, [sp, #40]	; 0x28
 8005c42:	930e      	str	r3, [sp, #56]	; 0x38
 8005c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c46:	3b20      	subs	r3, #32
 8005c48:	2b5a      	cmp	r3, #90	; 0x5a
 8005c4a:	f200 85ac 	bhi.w	80067a6 <_svfprintf_r+0xc32>
 8005c4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005c52:	007e      	.short	0x007e
 8005c54:	05aa05aa 	.word	0x05aa05aa
 8005c58:	05aa0086 	.word	0x05aa0086
 8005c5c:	05aa05aa 	.word	0x05aa05aa
 8005c60:	05aa0065 	.word	0x05aa0065
 8005c64:	008905aa 	.word	0x008905aa
 8005c68:	05aa0093 	.word	0x05aa0093
 8005c6c:	00960090 	.word	0x00960090
 8005c70:	00b305aa 	.word	0x00b305aa
 8005c74:	00b600b6 	.word	0x00b600b6
 8005c78:	00b600b6 	.word	0x00b600b6
 8005c7c:	00b600b6 	.word	0x00b600b6
 8005c80:	00b600b6 	.word	0x00b600b6
 8005c84:	05aa00b6 	.word	0x05aa00b6
 8005c88:	05aa05aa 	.word	0x05aa05aa
 8005c8c:	05aa05aa 	.word	0x05aa05aa
 8005c90:	05aa05aa 	.word	0x05aa05aa
 8005c94:	05aa0125 	.word	0x05aa0125
 8005c98:	00f600e3 	.word	0x00f600e3
 8005c9c:	01250125 	.word	0x01250125
 8005ca0:	05aa0125 	.word	0x05aa0125
 8005ca4:	05aa05aa 	.word	0x05aa05aa
 8005ca8:	00c605aa 	.word	0x00c605aa
 8005cac:	05aa05aa 	.word	0x05aa05aa
 8005cb0:	05aa0482 	.word	0x05aa0482
 8005cb4:	05aa05aa 	.word	0x05aa05aa
 8005cb8:	05aa04cd 	.word	0x05aa04cd
 8005cbc:	05aa04ee 	.word	0x05aa04ee
 8005cc0:	051005aa 	.word	0x051005aa
 8005cc4:	05aa05aa 	.word	0x05aa05aa
 8005cc8:	05aa05aa 	.word	0x05aa05aa
 8005ccc:	05aa05aa 	.word	0x05aa05aa
 8005cd0:	05aa05aa 	.word	0x05aa05aa
 8005cd4:	05aa0125 	.word	0x05aa0125
 8005cd8:	00f800e3 	.word	0x00f800e3
 8005cdc:	01250125 	.word	0x01250125
 8005ce0:	00c90125 	.word	0x00c90125
 8005ce4:	00dd00f8 	.word	0x00dd00f8
 8005ce8:	00d605aa 	.word	0x00d605aa
 8005cec:	045d05aa 	.word	0x045d05aa
 8005cf0:	04bb0484 	.word	0x04bb0484
 8005cf4:	05aa00dd 	.word	0x05aa00dd
 8005cf8:	007c04cd 	.word	0x007c04cd
 8005cfc:	05aa04f0 	.word	0x05aa04f0
 8005d00:	052f05aa 	.word	0x052f05aa
 8005d04:	007c05aa 	.word	0x007c05aa
 8005d08:	4659      	mov	r1, fp
 8005d0a:	4648      	mov	r0, r9
 8005d0c:	aa26      	add	r2, sp, #152	; 0x98
 8005d0e:	f002 fe76 	bl	80089fe <__ssprint_r>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f040 812f 	bne.w	8005f76 <_svfprintf_r+0x402>
 8005d18:	ac29      	add	r4, sp, #164	; 0xa4
 8005d1a:	e77c      	b.n	8005c16 <_svfprintf_r+0xa2>
 8005d1c:	4648      	mov	r0, r9
 8005d1e:	f002 f877 	bl	8007e10 <_localeconv_r>
 8005d22:	6843      	ldr	r3, [r0, #4]
 8005d24:	4618      	mov	r0, r3
 8005d26:	9318      	str	r3, [sp, #96]	; 0x60
 8005d28:	f7fa fa7e 	bl	8000228 <strlen>
 8005d2c:	9015      	str	r0, [sp, #84]	; 0x54
 8005d2e:	4648      	mov	r0, r9
 8005d30:	f002 f86e 	bl	8007e10 <_localeconv_r>
 8005d34:	6883      	ldr	r3, [r0, #8]
 8005d36:	222b      	movs	r2, #43	; 0x2b
 8005d38:	930d      	str	r3, [sp, #52]	; 0x34
 8005d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d3c:	b12b      	cbz	r3, 8005d4a <_svfprintf_r+0x1d6>
 8005d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d40:	b11b      	cbz	r3, 8005d4a <_svfprintf_r+0x1d6>
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b10b      	cbz	r3, 8005d4a <_svfprintf_r+0x1d6>
 8005d46:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8005d4a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005d4c:	e775      	b.n	8005c3a <_svfprintf_r+0xc6>
 8005d4e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f9      	bne.n	8005d4a <_svfprintf_r+0x1d6>
 8005d56:	2320      	movs	r3, #32
 8005d58:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005d5c:	e7f5      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005d5e:	f048 0801 	orr.w	r8, r8, #1
 8005d62:	e7f2      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005d64:	f856 3b04 	ldr.w	r3, [r6], #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d6c:	daed      	bge.n	8005d4a <_svfprintf_r+0x1d6>
 8005d6e:	425b      	negs	r3, r3
 8005d70:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d72:	f048 0804 	orr.w	r8, r8, #4
 8005d76:	e7e8      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005d78:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8005d7c:	e7e5      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005d7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005d80:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d84:	2b2a      	cmp	r3, #42	; 0x2a
 8005d86:	930a      	str	r3, [sp, #40]	; 0x28
 8005d88:	d113      	bne.n	8005db2 <_svfprintf_r+0x23e>
 8005d8a:	f856 0b04 	ldr.w	r0, [r6], #4
 8005d8e:	950e      	str	r5, [sp, #56]	; 0x38
 8005d90:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8005d94:	9307      	str	r3, [sp, #28]
 8005d96:	e7d8      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005d98:	9907      	ldr	r1, [sp, #28]
 8005d9a:	fb07 3301 	mla	r3, r7, r1, r3
 8005d9e:	9307      	str	r3, [sp, #28]
 8005da0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005da4:	930a      	str	r3, [sp, #40]	; 0x28
 8005da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da8:	3b30      	subs	r3, #48	; 0x30
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	d9f4      	bls.n	8005d98 <_svfprintf_r+0x224>
 8005dae:	950e      	str	r5, [sp, #56]	; 0x38
 8005db0:	e748      	b.n	8005c44 <_svfprintf_r+0xd0>
 8005db2:	2300      	movs	r3, #0
 8005db4:	9307      	str	r3, [sp, #28]
 8005db6:	e7f6      	b.n	8005da6 <_svfprintf_r+0x232>
 8005db8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8005dbc:	e7c5      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005dc2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005dc8:	3b30      	subs	r3, #48	; 0x30
 8005dca:	fb07 3301 	mla	r3, r7, r1, r3
 8005dce:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dd0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8005dd6:	3b30      	subs	r3, #48	; 0x30
 8005dd8:	2b09      	cmp	r3, #9
 8005dda:	d9f3      	bls.n	8005dc4 <_svfprintf_r+0x250>
 8005ddc:	e7e7      	b.n	8005dae <_svfprintf_r+0x23a>
 8005dde:	f048 0808 	orr.w	r8, r8, #8
 8005de2:	e7b2      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b68      	cmp	r3, #104	; 0x68
 8005dea:	bf01      	itttt	eq
 8005dec:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8005dee:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8005df2:	3301      	addeq	r3, #1
 8005df4:	930e      	streq	r3, [sp, #56]	; 0x38
 8005df6:	bf18      	it	ne
 8005df8:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8005dfc:	e7a5      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b6c      	cmp	r3, #108	; 0x6c
 8005e04:	d105      	bne.n	8005e12 <_svfprintf_r+0x29e>
 8005e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e08:	3301      	adds	r3, #1
 8005e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8005e0c:	f048 0820 	orr.w	r8, r8, #32
 8005e10:	e79b      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005e12:	f048 0810 	orr.w	r8, r8, #16
 8005e16:	e798      	b.n	8005d4a <_svfprintf_r+0x1d6>
 8005e18:	4632      	mov	r2, r6
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f852 3b04 	ldr.w	r3, [r2], #4
 8005e20:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8005e24:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e26:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	4606      	mov	r6, r0
 8005e30:	4605      	mov	r5, r0
 8005e32:	9008      	str	r0, [sp, #32]
 8005e34:	9307      	str	r3, [sp, #28]
 8005e36:	900c      	str	r0, [sp, #48]	; 0x30
 8005e38:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8005e3c:	e1b0      	b.n	80061a0 <_svfprintf_r+0x62c>
 8005e3e:	f048 0810 	orr.w	r8, r8, #16
 8005e42:	f018 0f20 	tst.w	r8, #32
 8005e46:	d011      	beq.n	8005e6c <_svfprintf_r+0x2f8>
 8005e48:	1df3      	adds	r3, r6, #7
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f852 6b08 	ldr.w	r6, [r2], #8
 8005e54:	685f      	ldr	r7, [r3, #4]
 8005e56:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e58:	2f00      	cmp	r7, #0
 8005e5a:	da05      	bge.n	8005e68 <_svfprintf_r+0x2f4>
 8005e5c:	232d      	movs	r3, #45	; 0x2d
 8005e5e:	4276      	negs	r6, r6
 8005e60:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005e64:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e387      	b.n	800657c <_svfprintf_r+0xa08>
 8005e6c:	4633      	mov	r3, r6
 8005e6e:	f853 7b04 	ldr.w	r7, [r3], #4
 8005e72:	f018 0f10 	tst.w	r8, #16
 8005e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e78:	d002      	beq.n	8005e80 <_svfprintf_r+0x30c>
 8005e7a:	463e      	mov	r6, r7
 8005e7c:	17ff      	asrs	r7, r7, #31
 8005e7e:	e7eb      	b.n	8005e58 <_svfprintf_r+0x2e4>
 8005e80:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005e84:	d003      	beq.n	8005e8e <_svfprintf_r+0x31a>
 8005e86:	b23e      	sxth	r6, r7
 8005e88:	f347 37c0 	sbfx	r7, r7, #15, #1
 8005e8c:	e7e4      	b.n	8005e58 <_svfprintf_r+0x2e4>
 8005e8e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8005e92:	d0f2      	beq.n	8005e7a <_svfprintf_r+0x306>
 8005e94:	b27e      	sxtb	r6, r7
 8005e96:	f347 17c0 	sbfx	r7, r7, #7, #1
 8005e9a:	e7dd      	b.n	8005e58 <_svfprintf_r+0x2e4>
 8005e9c:	3607      	adds	r6, #7
 8005e9e:	f026 0307 	bic.w	r3, r6, #7
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005ea8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005eac:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 8005eb0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005eb4:	910b      	str	r1, [sp, #44]	; 0x2c
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eba:	4630      	mov	r0, r6
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4b3a      	ldr	r3, [pc, #232]	; (8005fa8 <_svfprintf_r+0x434>)
 8005ec0:	f7fa fe10 	bl	8000ae4 <__aeabi_dcmpun>
 8005ec4:	bb18      	cbnz	r0, 8005f0e <_svfprintf_r+0x39a>
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	4630      	mov	r0, r6
 8005ecc:	4629      	mov	r1, r5
 8005ece:	4b36      	ldr	r3, [pc, #216]	; (8005fa8 <_svfprintf_r+0x434>)
 8005ed0:	f7fa fdea 	bl	8000aa8 <__aeabi_dcmple>
 8005ed4:	b9d8      	cbnz	r0, 8005f0e <_svfprintf_r+0x39a>
 8005ed6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005eda:	2200      	movs	r2, #0
 8005edc:	2300      	movs	r3, #0
 8005ede:	f7fa fdd9 	bl	8000a94 <__aeabi_dcmplt>
 8005ee2:	b110      	cbz	r0, 8005eea <_svfprintf_r+0x376>
 8005ee4:	232d      	movs	r3, #45	; 0x2d
 8005ee6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005eea:	4a30      	ldr	r2, [pc, #192]	; (8005fac <_svfprintf_r+0x438>)
 8005eec:	4830      	ldr	r0, [pc, #192]	; (8005fb0 <_svfprintf_r+0x43c>)
 8005eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	2b47      	cmp	r3, #71	; 0x47
 8005ef4:	bfd4      	ite	le
 8005ef6:	4692      	movle	sl, r2
 8005ef8:	4682      	movgt	sl, r0
 8005efa:	2303      	movs	r3, #3
 8005efc:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8005f00:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8005f04:	2700      	movs	r7, #0
 8005f06:	463e      	mov	r6, r7
 8005f08:	463b      	mov	r3, r7
 8005f0a:	f000 bfff 	b.w	8006f0c <_svfprintf_r+0x1398>
 8005f0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f12:	4610      	mov	r0, r2
 8005f14:	4619      	mov	r1, r3
 8005f16:	f7fa fde5 	bl	8000ae4 <__aeabi_dcmpun>
 8005f1a:	b148      	cbz	r0, 8005f30 <_svfprintf_r+0x3bc>
 8005f1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f1e:	4a25      	ldr	r2, [pc, #148]	; (8005fb4 <_svfprintf_r+0x440>)
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfb8      	it	lt
 8005f24:	232d      	movlt	r3, #45	; 0x2d
 8005f26:	4824      	ldr	r0, [pc, #144]	; (8005fb8 <_svfprintf_r+0x444>)
 8005f28:	bfb8      	it	lt
 8005f2a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8005f2e:	e7de      	b.n	8005eee <_svfprintf_r+0x37a>
 8005f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f32:	f023 0320 	bic.w	r3, r3, #32
 8005f36:	2b41      	cmp	r3, #65	; 0x41
 8005f38:	930c      	str	r3, [sp, #48]	; 0x30
 8005f3a:	d125      	bne.n	8005f88 <_svfprintf_r+0x414>
 8005f3c:	2330      	movs	r3, #48	; 0x30
 8005f3e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8005f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f44:	f048 0802 	orr.w	r8, r8, #2
 8005f48:	2b61      	cmp	r3, #97	; 0x61
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2378      	moveq	r3, #120	; 0x78
 8005f4e:	2358      	movne	r3, #88	; 0x58
 8005f50:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8005f54:	9b07      	ldr	r3, [sp, #28]
 8005f56:	2b63      	cmp	r3, #99	; 0x63
 8005f58:	dd30      	ble.n	8005fbc <_svfprintf_r+0x448>
 8005f5a:	4648      	mov	r0, r9
 8005f5c:	1c59      	adds	r1, r3, #1
 8005f5e:	f001 ff5f 	bl	8007e20 <_malloc_r>
 8005f62:	4682      	mov	sl, r0
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f040 81f7 	bne.w	8006358 <_svfprintf_r+0x7e4>
 8005f6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f72:	f8ab 300c 	strh.w	r3, [fp, #12]
 8005f76:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005f7a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f80:	bf18      	it	ne
 8005f82:	f04f 33ff 	movne.w	r3, #4294967295
 8005f86:	e619      	b.n	8005bbc <_svfprintf_r+0x48>
 8005f88:	9b07      	ldr	r3, [sp, #28]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	f000 81e6 	beq.w	800635c <_svfprintf_r+0x7e8>
 8005f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f92:	2b47      	cmp	r3, #71	; 0x47
 8005f94:	f040 81e5 	bne.w	8006362 <_svfprintf_r+0x7ee>
 8005f98:	9b07      	ldr	r3, [sp, #28]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f040 81e1 	bne.w	8006362 <_svfprintf_r+0x7ee>
 8005fa0:	9308      	str	r3, [sp, #32]
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	9307      	str	r3, [sp, #28]
 8005fa6:	e00c      	b.n	8005fc2 <_svfprintf_r+0x44e>
 8005fa8:	7fefffff 	.word	0x7fefffff
 8005fac:	0801fe18 	.word	0x0801fe18
 8005fb0:	0801fe1c 	.word	0x0801fe1c
 8005fb4:	0801fe20 	.word	0x0801fe20
 8005fb8:	0801fe24 	.word	0x0801fe24
 8005fbc:	9008      	str	r0, [sp, #32]
 8005fbe:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8005fc2:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8005fc6:	9314      	str	r3, [sp, #80]	; 0x50
 8005fc8:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 8005fcc:	1e1d      	subs	r5, r3, #0
 8005fce:	bfae      	itee	ge
 8005fd0:	2300      	movge	r3, #0
 8005fd2:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8005fd6:	232d      	movlt	r3, #45	; 0x2d
 8005fd8:	931c      	str	r3, [sp, #112]	; 0x70
 8005fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fdc:	2b41      	cmp	r3, #65	; 0x41
 8005fde:	f040 81d8 	bne.w	8006392 <_svfprintf_r+0x81e>
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	aa20      	add	r2, sp, #128	; 0x80
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f002 fcb2 	bl	8008950 <frexp>
 8005fec:	2200      	movs	r2, #0
 8005fee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005ff2:	f7fa fadd 	bl	80005b0 <__aeabi_dmul>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	460f      	mov	r7, r1
 8005ffe:	f7fa fd3f 	bl	8000a80 <__aeabi_dcmpeq>
 8006002:	b108      	cbz	r0, 8006008 <_svfprintf_r+0x494>
 8006004:	2301      	movs	r3, #1
 8006006:	9320      	str	r3, [sp, #128]	; 0x80
 8006008:	4bad      	ldr	r3, [pc, #692]	; (80062c0 <_svfprintf_r+0x74c>)
 800600a:	4aae      	ldr	r2, [pc, #696]	; (80062c4 <_svfprintf_r+0x750>)
 800600c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800600e:	4655      	mov	r5, sl
 8006010:	2961      	cmp	r1, #97	; 0x61
 8006012:	bf18      	it	ne
 8006014:	461a      	movne	r2, r3
 8006016:	9b07      	ldr	r3, [sp, #28]
 8006018:	921b      	str	r2, [sp, #108]	; 0x6c
 800601a:	3b01      	subs	r3, #1
 800601c:	9309      	str	r3, [sp, #36]	; 0x24
 800601e:	2200      	movs	r2, #0
 8006020:	4ba9      	ldr	r3, [pc, #676]	; (80062c8 <_svfprintf_r+0x754>)
 8006022:	4630      	mov	r0, r6
 8006024:	4639      	mov	r1, r7
 8006026:	f7fa fac3 	bl	80005b0 <__aeabi_dmul>
 800602a:	460f      	mov	r7, r1
 800602c:	4606      	mov	r6, r0
 800602e:	f7fa fd6f 	bl	8000b10 <__aeabi_d2iz>
 8006032:	901d      	str	r0, [sp, #116]	; 0x74
 8006034:	f7fa fa52 	bl	80004dc <__aeabi_i2d>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4630      	mov	r0, r6
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa f8fe 	bl	8000240 <__aeabi_dsub>
 8006044:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006048:	4606      	mov	r6, r0
 800604a:	5c9b      	ldrb	r3, [r3, r2]
 800604c:	460f      	mov	r7, r1
 800604e:	f805 3b01 	strb.w	r3, [r5], #1
 8006052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	9316      	str	r3, [sp, #88]	; 0x58
 8006058:	d007      	beq.n	800606a <_svfprintf_r+0x4f6>
 800605a:	3b01      	subs	r3, #1
 800605c:	9309      	str	r3, [sp, #36]	; 0x24
 800605e:	2200      	movs	r2, #0
 8006060:	2300      	movs	r3, #0
 8006062:	f7fa fd0d 	bl	8000a80 <__aeabi_dcmpeq>
 8006066:	2800      	cmp	r0, #0
 8006068:	d0d9      	beq.n	800601e <_svfprintf_r+0x4aa>
 800606a:	2200      	movs	r2, #0
 800606c:	4630      	mov	r0, r6
 800606e:	4639      	mov	r1, r7
 8006070:	4b96      	ldr	r3, [pc, #600]	; (80062cc <_svfprintf_r+0x758>)
 8006072:	f7fa fd2d 	bl	8000ad0 <__aeabi_dcmpgt>
 8006076:	b960      	cbnz	r0, 8006092 <_svfprintf_r+0x51e>
 8006078:	2200      	movs	r2, #0
 800607a:	4630      	mov	r0, r6
 800607c:	4639      	mov	r1, r7
 800607e:	4b93      	ldr	r3, [pc, #588]	; (80062cc <_svfprintf_r+0x758>)
 8006080:	f7fa fcfe 	bl	8000a80 <__aeabi_dcmpeq>
 8006084:	2800      	cmp	r0, #0
 8006086:	f000 817f 	beq.w	8006388 <_svfprintf_r+0x814>
 800608a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800608c:	07db      	lsls	r3, r3, #31
 800608e:	f140 817b 	bpl.w	8006388 <_svfprintf_r+0x814>
 8006092:	2030      	movs	r0, #48	; 0x30
 8006094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006096:	9524      	str	r5, [sp, #144]	; 0x90
 8006098:	7bd9      	ldrb	r1, [r3, #15]
 800609a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800609c:	1e53      	subs	r3, r2, #1
 800609e:	9324      	str	r3, [sp, #144]	; 0x90
 80060a0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80060a4:	428b      	cmp	r3, r1
 80060a6:	f000 815e 	beq.w	8006366 <_svfprintf_r+0x7f2>
 80060aa:	2b39      	cmp	r3, #57	; 0x39
 80060ac:	bf0b      	itete	eq
 80060ae:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 80060b0:	3301      	addne	r3, #1
 80060b2:	7a9b      	ldrbeq	r3, [r3, #10]
 80060b4:	b2db      	uxtbne	r3, r3
 80060b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060ba:	eba5 030a 	sub.w	r3, r5, sl
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060c2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80060c4:	2b47      	cmp	r3, #71	; 0x47
 80060c6:	f040 81b1 	bne.w	800642c <_svfprintf_r+0x8b8>
 80060ca:	1cef      	adds	r7, r5, #3
 80060cc:	db03      	blt.n	80060d6 <_svfprintf_r+0x562>
 80060ce:	9b07      	ldr	r3, [sp, #28]
 80060d0:	42ab      	cmp	r3, r5
 80060d2:	f280 81d6 	bge.w	8006482 <_svfprintf_r+0x90e>
 80060d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d8:	3b02      	subs	r3, #2
 80060da:	930a      	str	r3, [sp, #40]	; 0x28
 80060dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060de:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80060e2:	f021 0120 	bic.w	r1, r1, #32
 80060e6:	2941      	cmp	r1, #65	; 0x41
 80060e8:	bf08      	it	eq
 80060ea:	320f      	addeq	r2, #15
 80060ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80060f0:	bf06      	itte	eq
 80060f2:	b2d2      	uxtbeq	r2, r2
 80060f4:	2101      	moveq	r1, #1
 80060f6:	2100      	movne	r1, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80060fe:	bfb4      	ite	lt
 8006100:	222d      	movlt	r2, #45	; 0x2d
 8006102:	222b      	movge	r2, #43	; 0x2b
 8006104:	9320      	str	r3, [sp, #128]	; 0x80
 8006106:	bfb8      	it	lt
 8006108:	f1c5 0301 	rsblt	r3, r5, #1
 800610c:	2b09      	cmp	r3, #9
 800610e:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8006112:	f340 81a4 	ble.w	800645e <_svfprintf_r+0x8ea>
 8006116:	260a      	movs	r6, #10
 8006118:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800611c:	fb93 f5f6 	sdiv	r5, r3, r6
 8006120:	4611      	mov	r1, r2
 8006122:	fb06 3015 	mls	r0, r6, r5, r3
 8006126:	3030      	adds	r0, #48	; 0x30
 8006128:	f801 0c01 	strb.w	r0, [r1, #-1]
 800612c:	4618      	mov	r0, r3
 800612e:	2863      	cmp	r0, #99	; 0x63
 8006130:	462b      	mov	r3, r5
 8006132:	f102 32ff 	add.w	r2, r2, #4294967295
 8006136:	dcf1      	bgt.n	800611c <_svfprintf_r+0x5a8>
 8006138:	3330      	adds	r3, #48	; 0x30
 800613a:	1e88      	subs	r0, r1, #2
 800613c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006140:	4603      	mov	r3, r0
 8006142:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8006146:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 800614a:	42ab      	cmp	r3, r5
 800614c:	f0c0 8182 	bcc.w	8006454 <_svfprintf_r+0x8e0>
 8006150:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 8006154:	1a52      	subs	r2, r2, r1
 8006156:	42a8      	cmp	r0, r5
 8006158:	bf88      	it	hi
 800615a:	2200      	movhi	r2, #0
 800615c:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8006160:	441a      	add	r2, r3
 8006162:	ab22      	add	r3, sp, #136	; 0x88
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006168:	9319      	str	r3, [sp, #100]	; 0x64
 800616a:	2a01      	cmp	r2, #1
 800616c:	4413      	add	r3, r2
 800616e:	9307      	str	r3, [sp, #28]
 8006170:	dc02      	bgt.n	8006178 <_svfprintf_r+0x604>
 8006172:	f018 0f01 	tst.w	r8, #1
 8006176:	d003      	beq.n	8006180 <_svfprintf_r+0x60c>
 8006178:	9b07      	ldr	r3, [sp, #28]
 800617a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800617c:	4413      	add	r3, r2
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	2600      	movs	r6, #0
 8006182:	4635      	mov	r5, r6
 8006184:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8006188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618c:	9314      	str	r3, [sp, #80]	; 0x50
 800618e:	960c      	str	r6, [sp, #48]	; 0x30
 8006190:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006192:	b113      	cbz	r3, 800619a <_svfprintf_r+0x626>
 8006194:	232d      	movs	r3, #45	; 0x2d
 8006196:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800619a:	2700      	movs	r7, #0
 800619c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80061a0:	9b07      	ldr	r3, [sp, #28]
 80061a2:	42bb      	cmp	r3, r7
 80061a4:	bfb8      	it	lt
 80061a6:	463b      	movlt	r3, r7
 80061a8:	9314      	str	r3, [sp, #80]	; 0x50
 80061aa:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80061ae:	b113      	cbz	r3, 80061b6 <_svfprintf_r+0x642>
 80061b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061b2:	3301      	adds	r3, #1
 80061b4:	9314      	str	r3, [sp, #80]	; 0x50
 80061b6:	f018 0302 	ands.w	r3, r8, #2
 80061ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80061bc:	bf1e      	ittt	ne
 80061be:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 80061c0:	3302      	addne	r3, #2
 80061c2:	9314      	strne	r3, [sp, #80]	; 0x50
 80061c4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80061c8:	931c      	str	r3, [sp, #112]	; 0x70
 80061ca:	d121      	bne.n	8006210 <_svfprintf_r+0x69c>
 80061cc:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	9316      	str	r3, [sp, #88]	; 0x58
 80061d6:	dd1b      	ble.n	8006210 <_svfprintf_r+0x69c>
 80061d8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80061dc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80061de:	3201      	adds	r2, #1
 80061e0:	2810      	cmp	r0, #16
 80061e2:	483b      	ldr	r0, [pc, #236]	; (80062d0 <_svfprintf_r+0x75c>)
 80061e4:	f104 0108 	add.w	r1, r4, #8
 80061e8:	6020      	str	r0, [r4, #0]
 80061ea:	f300 82eb 	bgt.w	80067c4 <_svfprintf_r+0xc50>
 80061ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 80061f0:	2a07      	cmp	r2, #7
 80061f2:	4403      	add	r3, r0
 80061f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80061f8:	6060      	str	r0, [r4, #4]
 80061fa:	f340 82f8 	ble.w	80067ee <_svfprintf_r+0xc7a>
 80061fe:	4659      	mov	r1, fp
 8006200:	4648      	mov	r0, r9
 8006202:	aa26      	add	r2, sp, #152	; 0x98
 8006204:	f002 fbfb 	bl	80089fe <__ssprint_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 8623 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 800620e:	ac29      	add	r4, sp, #164	; 0xa4
 8006210:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8006214:	b173      	cbz	r3, 8006234 <_svfprintf_r+0x6c0>
 8006216:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	2301      	movs	r3, #1
 800621e:	6063      	str	r3, [r4, #4]
 8006220:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006222:	3301      	adds	r3, #1
 8006224:	9328      	str	r3, [sp, #160]	; 0xa0
 8006226:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006228:	3301      	adds	r3, #1
 800622a:	2b07      	cmp	r3, #7
 800622c:	9327      	str	r3, [sp, #156]	; 0x9c
 800622e:	f300 82e0 	bgt.w	80067f2 <_svfprintf_r+0xc7e>
 8006232:	3408      	adds	r4, #8
 8006234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006236:	b16b      	cbz	r3, 8006254 <_svfprintf_r+0x6e0>
 8006238:	ab1f      	add	r3, sp, #124	; 0x7c
 800623a:	6023      	str	r3, [r4, #0]
 800623c:	2302      	movs	r3, #2
 800623e:	6063      	str	r3, [r4, #4]
 8006240:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006242:	3302      	adds	r3, #2
 8006244:	9328      	str	r3, [sp, #160]	; 0xa0
 8006246:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006248:	3301      	adds	r3, #1
 800624a:	2b07      	cmp	r3, #7
 800624c:	9327      	str	r3, [sp, #156]	; 0x9c
 800624e:	f300 82da 	bgt.w	8006806 <_svfprintf_r+0xc92>
 8006252:	3408      	adds	r4, #8
 8006254:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006256:	2b80      	cmp	r3, #128	; 0x80
 8006258:	d121      	bne.n	800629e <_svfprintf_r+0x72a>
 800625a:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	9316      	str	r3, [sp, #88]	; 0x58
 8006264:	dd1b      	ble.n	800629e <_svfprintf_r+0x72a>
 8006266:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800626a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800626c:	3201      	adds	r2, #1
 800626e:	2810      	cmp	r0, #16
 8006270:	4818      	ldr	r0, [pc, #96]	; (80062d4 <_svfprintf_r+0x760>)
 8006272:	f104 0108 	add.w	r1, r4, #8
 8006276:	6020      	str	r0, [r4, #0]
 8006278:	f300 82cf 	bgt.w	800681a <_svfprintf_r+0xca6>
 800627c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800627e:	2a07      	cmp	r2, #7
 8006280:	4403      	add	r3, r0
 8006282:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006286:	6060      	str	r0, [r4, #4]
 8006288:	f340 82dc 	ble.w	8006844 <_svfprintf_r+0xcd0>
 800628c:	4659      	mov	r1, fp
 800628e:	4648      	mov	r0, r9
 8006290:	aa26      	add	r2, sp, #152	; 0x98
 8006292:	f002 fbb4 	bl	80089fe <__ssprint_r>
 8006296:	2800      	cmp	r0, #0
 8006298:	f040 85dc 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 800629c:	ac29      	add	r4, sp, #164	; 0xa4
 800629e:	9b07      	ldr	r3, [sp, #28]
 80062a0:	1aff      	subs	r7, r7, r3
 80062a2:	2f00      	cmp	r7, #0
 80062a4:	dd28      	ble.n	80062f8 <_svfprintf_r+0x784>
 80062a6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80062aa:	480a      	ldr	r0, [pc, #40]	; (80062d4 <_svfprintf_r+0x760>)
 80062ac:	2f10      	cmp	r7, #16
 80062ae:	f103 0301 	add.w	r3, r3, #1
 80062b2:	f104 0108 	add.w	r1, r4, #8
 80062b6:	6020      	str	r0, [r4, #0]
 80062b8:	f300 82c6 	bgt.w	8006848 <_svfprintf_r+0xcd4>
 80062bc:	e00c      	b.n	80062d8 <_svfprintf_r+0x764>
 80062be:	bf00      	nop
 80062c0:	0801fe39 	.word	0x0801fe39
 80062c4:	0801fe28 	.word	0x0801fe28
 80062c8:	40300000 	.word	0x40300000
 80062cc:	3fe00000 	.word	0x3fe00000
 80062d0:	0801fe4c 	.word	0x0801fe4c
 80062d4:	0801fe5c 	.word	0x0801fe5c
 80062d8:	6067      	str	r7, [r4, #4]
 80062da:	2b07      	cmp	r3, #7
 80062dc:	4417      	add	r7, r2
 80062de:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 80062e2:	f340 82c4 	ble.w	800686e <_svfprintf_r+0xcfa>
 80062e6:	4659      	mov	r1, fp
 80062e8:	4648      	mov	r0, r9
 80062ea:	aa26      	add	r2, sp, #152	; 0x98
 80062ec:	f002 fb87 	bl	80089fe <__ssprint_r>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	f040 85af 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 80062f6:	ac29      	add	r4, sp, #164	; 0xa4
 80062f8:	f418 7f80 	tst.w	r8, #256	; 0x100
 80062fc:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 80062fe:	f040 82bd 	bne.w	800687c <_svfprintf_r+0xd08>
 8006302:	9b07      	ldr	r3, [sp, #28]
 8006304:	f8c4 a000 	str.w	sl, [r4]
 8006308:	441f      	add	r7, r3
 800630a:	6063      	str	r3, [r4, #4]
 800630c:	9728      	str	r7, [sp, #160]	; 0xa0
 800630e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006310:	3301      	adds	r3, #1
 8006312:	2b07      	cmp	r3, #7
 8006314:	9327      	str	r3, [sp, #156]	; 0x9c
 8006316:	f300 82f6 	bgt.w	8006906 <_svfprintf_r+0xd92>
 800631a:	3408      	adds	r4, #8
 800631c:	f018 0f04 	tst.w	r8, #4
 8006320:	f040 857a 	bne.w	8006e18 <_svfprintf_r+0x12a4>
 8006324:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 8006328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800632a:	428a      	cmp	r2, r1
 800632c:	bfac      	ite	ge
 800632e:	189b      	addge	r3, r3, r2
 8006330:	185b      	addlt	r3, r3, r1
 8006332:	930f      	str	r3, [sp, #60]	; 0x3c
 8006334:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006336:	b13b      	cbz	r3, 8006348 <_svfprintf_r+0x7d4>
 8006338:	4659      	mov	r1, fp
 800633a:	4648      	mov	r0, r9
 800633c:	aa26      	add	r2, sp, #152	; 0x98
 800633e:	f002 fb5e 	bl	80089fe <__ssprint_r>
 8006342:	2800      	cmp	r0, #0
 8006344:	f040 8586 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006348:	2300      	movs	r3, #0
 800634a:	9327      	str	r3, [sp, #156]	; 0x9c
 800634c:	9b08      	ldr	r3, [sp, #32]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 859c 	bne.w	8006e8c <_svfprintf_r+0x1318>
 8006354:	ac29      	add	r4, sp, #164	; 0xa4
 8006356:	e0e4      	b.n	8006522 <_svfprintf_r+0x9ae>
 8006358:	9008      	str	r0, [sp, #32]
 800635a:	e632      	b.n	8005fc2 <_svfprintf_r+0x44e>
 800635c:	2306      	movs	r3, #6
 800635e:	9008      	str	r0, [sp, #32]
 8006360:	e620      	b.n	8005fa4 <_svfprintf_r+0x430>
 8006362:	9008      	str	r0, [sp, #32]
 8006364:	e62d      	b.n	8005fc2 <_svfprintf_r+0x44e>
 8006366:	f802 0c01 	strb.w	r0, [r2, #-1]
 800636a:	e696      	b.n	800609a <_svfprintf_r+0x526>
 800636c:	f803 0b01 	strb.w	r0, [r3], #1
 8006370:	1aca      	subs	r2, r1, r3
 8006372:	2a00      	cmp	r2, #0
 8006374:	dafa      	bge.n	800636c <_svfprintf_r+0x7f8>
 8006376:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800637a:	3201      	adds	r2, #1
 800637c:	f103 0301 	add.w	r3, r3, #1
 8006380:	bfb8      	it	lt
 8006382:	2300      	movlt	r3, #0
 8006384:	441d      	add	r5, r3
 8006386:	e698      	b.n	80060ba <_svfprintf_r+0x546>
 8006388:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800638a:	462b      	mov	r3, r5
 800638c:	2030      	movs	r0, #48	; 0x30
 800638e:	18a9      	adds	r1, r5, r2
 8006390:	e7ee      	b.n	8006370 <_svfprintf_r+0x7fc>
 8006392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006394:	2b46      	cmp	r3, #70	; 0x46
 8006396:	d005      	beq.n	80063a4 <_svfprintf_r+0x830>
 8006398:	2b45      	cmp	r3, #69	; 0x45
 800639a:	d11b      	bne.n	80063d4 <_svfprintf_r+0x860>
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	1c5e      	adds	r6, r3, #1
 80063a0:	2302      	movs	r3, #2
 80063a2:	e001      	b.n	80063a8 <_svfprintf_r+0x834>
 80063a4:	2303      	movs	r3, #3
 80063a6:	9e07      	ldr	r6, [sp, #28]
 80063a8:	aa24      	add	r2, sp, #144	; 0x90
 80063aa:	9204      	str	r2, [sp, #16]
 80063ac:	aa21      	add	r2, sp, #132	; 0x84
 80063ae:	9203      	str	r2, [sp, #12]
 80063b0:	aa20      	add	r2, sp, #128	; 0x80
 80063b2:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	463a      	mov	r2, r7
 80063ba:	462b      	mov	r3, r5
 80063bc:	4648      	mov	r0, r9
 80063be:	f000 fe4b 	bl	8007058 <_dtoa_r>
 80063c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063c4:	4682      	mov	sl, r0
 80063c6:	2b47      	cmp	r3, #71	; 0x47
 80063c8:	d106      	bne.n	80063d8 <_svfprintf_r+0x864>
 80063ca:	f018 0f01 	tst.w	r8, #1
 80063ce:	d103      	bne.n	80063d8 <_svfprintf_r+0x864>
 80063d0:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80063d2:	e672      	b.n	80060ba <_svfprintf_r+0x546>
 80063d4:	9e07      	ldr	r6, [sp, #28]
 80063d6:	e7e3      	b.n	80063a0 <_svfprintf_r+0x82c>
 80063d8:	eb0a 0306 	add.w	r3, sl, r6
 80063dc:	9309      	str	r3, [sp, #36]	; 0x24
 80063de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063e0:	2b46      	cmp	r3, #70	; 0x46
 80063e2:	d111      	bne.n	8006408 <_svfprintf_r+0x894>
 80063e4:	f89a 3000 	ldrb.w	r3, [sl]
 80063e8:	2b30      	cmp	r3, #48	; 0x30
 80063ea:	d109      	bne.n	8006400 <_svfprintf_r+0x88c>
 80063ec:	2200      	movs	r2, #0
 80063ee:	2300      	movs	r3, #0
 80063f0:	4638      	mov	r0, r7
 80063f2:	4629      	mov	r1, r5
 80063f4:	f7fa fb44 	bl	8000a80 <__aeabi_dcmpeq>
 80063f8:	b910      	cbnz	r0, 8006400 <_svfprintf_r+0x88c>
 80063fa:	f1c6 0601 	rsb	r6, r6, #1
 80063fe:	9620      	str	r6, [sp, #128]	; 0x80
 8006400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006402:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006404:	441a      	add	r2, r3
 8006406:	9209      	str	r2, [sp, #36]	; 0x24
 8006408:	2200      	movs	r2, #0
 800640a:	2300      	movs	r3, #0
 800640c:	4638      	mov	r0, r7
 800640e:	4629      	mov	r1, r5
 8006410:	f7fa fb36 	bl	8000a80 <__aeabi_dcmpeq>
 8006414:	b108      	cbz	r0, 800641a <_svfprintf_r+0x8a6>
 8006416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006418:	9324      	str	r3, [sp, #144]	; 0x90
 800641a:	2230      	movs	r2, #48	; 0x30
 800641c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800641e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006420:	4299      	cmp	r1, r3
 8006422:	d9d5      	bls.n	80063d0 <_svfprintf_r+0x85c>
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	9124      	str	r1, [sp, #144]	; 0x90
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e7f7      	b.n	800641c <_svfprintf_r+0x8a8>
 800642c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800642e:	2b46      	cmp	r3, #70	; 0x46
 8006430:	f47f ae54 	bne.w	80060dc <_svfprintf_r+0x568>
 8006434:	9a07      	ldr	r2, [sp, #28]
 8006436:	f008 0301 	and.w	r3, r8, #1
 800643a:	2d00      	cmp	r5, #0
 800643c:	ea43 0302 	orr.w	r3, r3, r2
 8006440:	dd1a      	ble.n	8006478 <_svfprintf_r+0x904>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d034      	beq.n	80064b0 <_svfprintf_r+0x93c>
 8006446:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006448:	18eb      	adds	r3, r5, r3
 800644a:	441a      	add	r2, r3
 800644c:	9207      	str	r2, [sp, #28]
 800644e:	2366      	movs	r3, #102	; 0x66
 8006450:	930a      	str	r3, [sp, #40]	; 0x28
 8006452:	e033      	b.n	80064bc <_svfprintf_r+0x948>
 8006454:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006458:	f802 6b01 	strb.w	r6, [r2], #1
 800645c:	e675      	b.n	800614a <_svfprintf_r+0x5d6>
 800645e:	b941      	cbnz	r1, 8006472 <_svfprintf_r+0x8fe>
 8006460:	2230      	movs	r2, #48	; 0x30
 8006462:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8006466:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 800646a:	3330      	adds	r3, #48	; 0x30
 800646c:	f802 3b01 	strb.w	r3, [r2], #1
 8006470:	e677      	b.n	8006162 <_svfprintf_r+0x5ee>
 8006472:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8006476:	e7f8      	b.n	800646a <_svfprintf_r+0x8f6>
 8006478:	b1e3      	cbz	r3, 80064b4 <_svfprintf_r+0x940>
 800647a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800647c:	9a07      	ldr	r2, [sp, #28]
 800647e:	3301      	adds	r3, #1
 8006480:	e7e3      	b.n	800644a <_svfprintf_r+0x8d6>
 8006482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006484:	429d      	cmp	r5, r3
 8006486:	db07      	blt.n	8006498 <_svfprintf_r+0x924>
 8006488:	f018 0f01 	tst.w	r8, #1
 800648c:	d02b      	beq.n	80064e6 <_svfprintf_r+0x972>
 800648e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006490:	18eb      	adds	r3, r5, r3
 8006492:	9307      	str	r3, [sp, #28]
 8006494:	2367      	movs	r3, #103	; 0x67
 8006496:	e7db      	b.n	8006450 <_svfprintf_r+0x8dc>
 8006498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800649c:	2d00      	cmp	r5, #0
 800649e:	4413      	add	r3, r2
 80064a0:	9307      	str	r3, [sp, #28]
 80064a2:	dcf7      	bgt.n	8006494 <_svfprintf_r+0x920>
 80064a4:	9a07      	ldr	r2, [sp, #28]
 80064a6:	f1c5 0301 	rsb	r3, r5, #1
 80064aa:	441a      	add	r2, r3
 80064ac:	9207      	str	r2, [sp, #28]
 80064ae:	e7f1      	b.n	8006494 <_svfprintf_r+0x920>
 80064b0:	9507      	str	r5, [sp, #28]
 80064b2:	e7cc      	b.n	800644e <_svfprintf_r+0x8da>
 80064b4:	2366      	movs	r3, #102	; 0x66
 80064b6:	930a      	str	r3, [sp, #40]	; 0x28
 80064b8:	2301      	movs	r3, #1
 80064ba:	9307      	str	r3, [sp, #28]
 80064bc:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 80064c0:	930c      	str	r3, [sp, #48]	; 0x30
 80064c2:	d021      	beq.n	8006508 <_svfprintf_r+0x994>
 80064c4:	2600      	movs	r6, #0
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	960c      	str	r6, [sp, #48]	; 0x30
 80064ca:	f77f ae61 	ble.w	8006190 <_svfprintf_r+0x61c>
 80064ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2bff      	cmp	r3, #255	; 0xff
 80064d4:	d109      	bne.n	80064ea <_svfprintf_r+0x976>
 80064d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064d8:	9a07      	ldr	r2, [sp, #28]
 80064da:	9915      	ldr	r1, [sp, #84]	; 0x54
 80064dc:	4433      	add	r3, r6
 80064de:	fb01 2303 	mla	r3, r1, r3, r2
 80064e2:	9307      	str	r3, [sp, #28]
 80064e4:	e654      	b.n	8006190 <_svfprintf_r+0x61c>
 80064e6:	9507      	str	r5, [sp, #28]
 80064e8:	e7d4      	b.n	8006494 <_svfprintf_r+0x920>
 80064ea:	42ab      	cmp	r3, r5
 80064ec:	daf3      	bge.n	80064d6 <_svfprintf_r+0x962>
 80064ee:	1aed      	subs	r5, r5, r3
 80064f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	b133      	cbz	r3, 8006504 <_svfprintf_r+0x990>
 80064f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064f8:	3301      	adds	r3, #1
 80064fa:	930c      	str	r3, [sp, #48]	; 0x30
 80064fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064fe:	3301      	adds	r3, #1
 8006500:	930d      	str	r3, [sp, #52]	; 0x34
 8006502:	e7e4      	b.n	80064ce <_svfprintf_r+0x95a>
 8006504:	3601      	adds	r6, #1
 8006506:	e7e2      	b.n	80064ce <_svfprintf_r+0x95a>
 8006508:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800650a:	e641      	b.n	8006190 <_svfprintf_r+0x61c>
 800650c:	1d33      	adds	r3, r6, #4
 800650e:	f018 0f20 	tst.w	r8, #32
 8006512:	930b      	str	r3, [sp, #44]	; 0x2c
 8006514:	d00a      	beq.n	800652c <_svfprintf_r+0x9b8>
 8006516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006518:	6833      	ldr	r3, [r6, #0]
 800651a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800651c:	17d2      	asrs	r2, r2, #31
 800651e:	e9c3 1200 	strd	r1, r2, [r3]
 8006522:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006524:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8006528:	f7ff bb60 	b.w	8005bec <_svfprintf_r+0x78>
 800652c:	f018 0f10 	tst.w	r8, #16
 8006530:	d003      	beq.n	800653a <_svfprintf_r+0x9c6>
 8006532:	6833      	ldr	r3, [r6, #0]
 8006534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e7f3      	b.n	8006522 <_svfprintf_r+0x9ae>
 800653a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800653e:	d003      	beq.n	8006548 <_svfprintf_r+0x9d4>
 8006540:	6833      	ldr	r3, [r6, #0]
 8006542:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e7ec      	b.n	8006522 <_svfprintf_r+0x9ae>
 8006548:	f418 7f00 	tst.w	r8, #512	; 0x200
 800654c:	d0f1      	beq.n	8006532 <_svfprintf_r+0x9be>
 800654e:	6833      	ldr	r3, [r6, #0]
 8006550:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e7e5      	b.n	8006522 <_svfprintf_r+0x9ae>
 8006556:	f048 0810 	orr.w	r8, r8, #16
 800655a:	f018 0320 	ands.w	r3, r8, #32
 800655e:	d020      	beq.n	80065a2 <_svfprintf_r+0xa2e>
 8006560:	1df3      	adds	r3, r6, #7
 8006562:	f023 0307 	bic.w	r3, r3, #7
 8006566:	461a      	mov	r2, r3
 8006568:	f852 6b08 	ldr.w	r6, [r2], #8
 800656c:	685f      	ldr	r7, [r3, #4]
 800656e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006570:	2300      	movs	r3, #0
 8006572:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8006576:	2200      	movs	r2, #0
 8006578:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800657c:	9a07      	ldr	r2, [sp, #28]
 800657e:	3201      	adds	r2, #1
 8006580:	f000 8495 	beq.w	8006eae <_svfprintf_r+0x133a>
 8006584:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8006588:	9208      	str	r2, [sp, #32]
 800658a:	ea56 0207 	orrs.w	r2, r6, r7
 800658e:	f040 8494 	bne.w	8006eba <_svfprintf_r+0x1346>
 8006592:	9a07      	ldr	r2, [sp, #28]
 8006594:	2a00      	cmp	r2, #0
 8006596:	f000 80fb 	beq.w	8006790 <_svfprintf_r+0xc1c>
 800659a:	2b01      	cmp	r3, #1
 800659c:	f040 8490 	bne.w	8006ec0 <_svfprintf_r+0x134c>
 80065a0:	e09f      	b.n	80066e2 <_svfprintf_r+0xb6e>
 80065a2:	4632      	mov	r2, r6
 80065a4:	f852 6b04 	ldr.w	r6, [r2], #4
 80065a8:	f018 0710 	ands.w	r7, r8, #16
 80065ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80065ae:	d001      	beq.n	80065b4 <_svfprintf_r+0xa40>
 80065b0:	461f      	mov	r7, r3
 80065b2:	e7dd      	b.n	8006570 <_svfprintf_r+0x9fc>
 80065b4:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 80065b8:	d001      	beq.n	80065be <_svfprintf_r+0xa4a>
 80065ba:	b2b6      	uxth	r6, r6
 80065bc:	e7d8      	b.n	8006570 <_svfprintf_r+0x9fc>
 80065be:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 80065c2:	d0d5      	beq.n	8006570 <_svfprintf_r+0x9fc>
 80065c4:	b2f6      	uxtb	r6, r6
 80065c6:	e7f3      	b.n	80065b0 <_svfprintf_r+0xa3c>
 80065c8:	4633      	mov	r3, r6
 80065ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80065ce:	2278      	movs	r2, #120	; 0x78
 80065d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d2:	2330      	movs	r3, #48	; 0x30
 80065d4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80065d8:	4ba6      	ldr	r3, [pc, #664]	; (8006874 <_svfprintf_r+0xd00>)
 80065da:	2700      	movs	r7, #0
 80065dc:	931a      	str	r3, [sp, #104]	; 0x68
 80065de:	f048 0802 	orr.w	r8, r8, #2
 80065e2:	2302      	movs	r3, #2
 80065e4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 80065e8:	920a      	str	r2, [sp, #40]	; 0x28
 80065ea:	e7c4      	b.n	8006576 <_svfprintf_r+0xa02>
 80065ec:	4633      	mov	r3, r6
 80065ee:	2500      	movs	r5, #0
 80065f0:	f853 ab04 	ldr.w	sl, [r3], #4
 80065f4:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 80065f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80065fa:	9b07      	ldr	r3, [sp, #28]
 80065fc:	1c58      	adds	r0, r3, #1
 80065fe:	d010      	beq.n	8006622 <_svfprintf_r+0xaae>
 8006600:	461a      	mov	r2, r3
 8006602:	4629      	mov	r1, r5
 8006604:	4650      	mov	r0, sl
 8006606:	f001 fe47 	bl	8008298 <memchr>
 800660a:	9008      	str	r0, [sp, #32]
 800660c:	2800      	cmp	r0, #0
 800660e:	f000 80d6 	beq.w	80067be <_svfprintf_r+0xc4a>
 8006612:	eba0 030a 	sub.w	r3, r0, sl
 8006616:	462f      	mov	r7, r5
 8006618:	462e      	mov	r6, r5
 800661a:	e9cd 3507 	strd	r3, r5, [sp, #28]
 800661e:	950c      	str	r5, [sp, #48]	; 0x30
 8006620:	e5be      	b.n	80061a0 <_svfprintf_r+0x62c>
 8006622:	4650      	mov	r0, sl
 8006624:	f7f9 fe00 	bl	8000228 <strlen>
 8006628:	e9cd 0507 	strd	r0, r5, [sp, #28]
 800662c:	e46a      	b.n	8005f04 <_svfprintf_r+0x390>
 800662e:	f048 0810 	orr.w	r8, r8, #16
 8006632:	f018 0320 	ands.w	r3, r8, #32
 8006636:	d009      	beq.n	800664c <_svfprintf_r+0xad8>
 8006638:	1df3      	adds	r3, r6, #7
 800663a:	f023 0307 	bic.w	r3, r3, #7
 800663e:	461a      	mov	r2, r3
 8006640:	f852 6b08 	ldr.w	r6, [r2], #8
 8006644:	685f      	ldr	r7, [r3, #4]
 8006646:	920b      	str	r2, [sp, #44]	; 0x2c
 8006648:	2301      	movs	r3, #1
 800664a:	e794      	b.n	8006576 <_svfprintf_r+0xa02>
 800664c:	4632      	mov	r2, r6
 800664e:	f852 6b04 	ldr.w	r6, [r2], #4
 8006652:	f018 0710 	ands.w	r7, r8, #16
 8006656:	920b      	str	r2, [sp, #44]	; 0x2c
 8006658:	d001      	beq.n	800665e <_svfprintf_r+0xaea>
 800665a:	461f      	mov	r7, r3
 800665c:	e7f4      	b.n	8006648 <_svfprintf_r+0xad4>
 800665e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8006662:	d001      	beq.n	8006668 <_svfprintf_r+0xaf4>
 8006664:	b2b6      	uxth	r6, r6
 8006666:	e7ef      	b.n	8006648 <_svfprintf_r+0xad4>
 8006668:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800666c:	d0ec      	beq.n	8006648 <_svfprintf_r+0xad4>
 800666e:	b2f6      	uxtb	r6, r6
 8006670:	e7f3      	b.n	800665a <_svfprintf_r+0xae6>
 8006672:	4b81      	ldr	r3, [pc, #516]	; (8006878 <_svfprintf_r+0xd04>)
 8006674:	931a      	str	r3, [sp, #104]	; 0x68
 8006676:	f018 0320 	ands.w	r3, r8, #32
 800667a:	d01b      	beq.n	80066b4 <_svfprintf_r+0xb40>
 800667c:	1df3      	adds	r3, r6, #7
 800667e:	f023 0307 	bic.w	r3, r3, #7
 8006682:	461a      	mov	r2, r3
 8006684:	f852 6b08 	ldr.w	r6, [r2], #8
 8006688:	685f      	ldr	r7, [r3, #4]
 800668a:	920b      	str	r2, [sp, #44]	; 0x2c
 800668c:	f018 0f01 	tst.w	r8, #1
 8006690:	d00a      	beq.n	80066a8 <_svfprintf_r+0xb34>
 8006692:	ea56 0307 	orrs.w	r3, r6, r7
 8006696:	d007      	beq.n	80066a8 <_svfprintf_r+0xb34>
 8006698:	2330      	movs	r3, #48	; 0x30
 800669a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800669e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a0:	f048 0802 	orr.w	r8, r8, #2
 80066a4:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80066a8:	2302      	movs	r3, #2
 80066aa:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80066ae:	e762      	b.n	8006576 <_svfprintf_r+0xa02>
 80066b0:	4b70      	ldr	r3, [pc, #448]	; (8006874 <_svfprintf_r+0xd00>)
 80066b2:	e7df      	b.n	8006674 <_svfprintf_r+0xb00>
 80066b4:	4632      	mov	r2, r6
 80066b6:	f852 6b04 	ldr.w	r6, [r2], #4
 80066ba:	f018 0710 	ands.w	r7, r8, #16
 80066be:	920b      	str	r2, [sp, #44]	; 0x2c
 80066c0:	d001      	beq.n	80066c6 <_svfprintf_r+0xb52>
 80066c2:	461f      	mov	r7, r3
 80066c4:	e7e2      	b.n	800668c <_svfprintf_r+0xb18>
 80066c6:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 80066ca:	d001      	beq.n	80066d0 <_svfprintf_r+0xb5c>
 80066cc:	b2b6      	uxth	r6, r6
 80066ce:	e7dd      	b.n	800668c <_svfprintf_r+0xb18>
 80066d0:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 80066d4:	d0da      	beq.n	800668c <_svfprintf_r+0xb18>
 80066d6:	b2f6      	uxtb	r6, r6
 80066d8:	e7f3      	b.n	80066c2 <_svfprintf_r+0xb4e>
 80066da:	2e0a      	cmp	r6, #10
 80066dc:	f177 0300 	sbcs.w	r3, r7, #0
 80066e0:	d206      	bcs.n	80066f0 <_svfprintf_r+0xb7c>
 80066e2:	3630      	adds	r6, #48	; 0x30
 80066e4:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 80066e8:	f20d 1a47 	addw	sl, sp, #327	; 0x147
 80066ec:	f000 bc04 	b.w	8006ef8 <_svfprintf_r+0x1384>
 80066f0:	2300      	movs	r3, #0
 80066f2:	9309      	str	r3, [sp, #36]	; 0x24
 80066f4:	9b08      	ldr	r3, [sp, #32]
 80066f6:	ad52      	add	r5, sp, #328	; 0x148
 80066f8:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 80066fc:	220a      	movs	r2, #10
 80066fe:	2300      	movs	r3, #0
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7fa fa4c 	bl	8000ba0 <__aeabi_uldivmod>
 8006708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670a:	3230      	adds	r2, #48	; 0x30
 800670c:	3301      	adds	r3, #1
 800670e:	f105 3aff 	add.w	sl, r5, #4294967295
 8006712:	f805 2c01 	strb.w	r2, [r5, #-1]
 8006716:	9309      	str	r3, [sp, #36]	; 0x24
 8006718:	f1b8 0f00 	cmp.w	r8, #0
 800671c:	d019      	beq.n	8006752 <_svfprintf_r+0xbde>
 800671e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d114      	bne.n	8006752 <_svfprintf_r+0xbde>
 8006728:	2aff      	cmp	r2, #255	; 0xff
 800672a:	d012      	beq.n	8006752 <_svfprintf_r+0xbde>
 800672c:	2e0a      	cmp	r6, #10
 800672e:	f177 0300 	sbcs.w	r3, r7, #0
 8006732:	d30e      	bcc.n	8006752 <_svfprintf_r+0xbde>
 8006734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006736:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006738:	ebaa 0a03 	sub.w	sl, sl, r3
 800673c:	461a      	mov	r2, r3
 800673e:	4650      	mov	r0, sl
 8006740:	f002 f94a 	bl	80089d8 <strncpy>
 8006744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006746:	785d      	ldrb	r5, [r3, #1]
 8006748:	b195      	cbz	r5, 8006770 <_svfprintf_r+0xbfc>
 800674a:	3301      	adds	r3, #1
 800674c:	930d      	str	r3, [sp, #52]	; 0x34
 800674e:	2300      	movs	r3, #0
 8006750:	9309      	str	r3, [sp, #36]	; 0x24
 8006752:	2300      	movs	r3, #0
 8006754:	220a      	movs	r2, #10
 8006756:	4630      	mov	r0, r6
 8006758:	4639      	mov	r1, r7
 800675a:	f7fa fa21 	bl	8000ba0 <__aeabi_uldivmod>
 800675e:	2e0a      	cmp	r6, #10
 8006760:	f177 0300 	sbcs.w	r3, r7, #0
 8006764:	f0c0 83c8 	bcc.w	8006ef8 <_svfprintf_r+0x1384>
 8006768:	4606      	mov	r6, r0
 800676a:	460f      	mov	r7, r1
 800676c:	4655      	mov	r5, sl
 800676e:	e7c5      	b.n	80066fc <_svfprintf_r+0xb88>
 8006770:	9509      	str	r5, [sp, #36]	; 0x24
 8006772:	e7ee      	b.n	8006752 <_svfprintf_r+0xbde>
 8006774:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006776:	f006 030f 	and.w	r3, r6, #15
 800677a:	5cd3      	ldrb	r3, [r2, r3]
 800677c:	0936      	lsrs	r6, r6, #4
 800677e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8006782:	093f      	lsrs	r7, r7, #4
 8006784:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8006788:	ea56 0307 	orrs.w	r3, r6, r7
 800678c:	d1f2      	bne.n	8006774 <_svfprintf_r+0xc00>
 800678e:	e3b3      	b.n	8006ef8 <_svfprintf_r+0x1384>
 8006790:	b933      	cbnz	r3, 80067a0 <_svfprintf_r+0xc2c>
 8006792:	f018 0f01 	tst.w	r8, #1
 8006796:	d003      	beq.n	80067a0 <_svfprintf_r+0xc2c>
 8006798:	2330      	movs	r3, #48	; 0x30
 800679a:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 800679e:	e7a3      	b.n	80066e8 <_svfprintf_r+0xb74>
 80067a0:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 80067a4:	e3a8      	b.n	8006ef8 <_svfprintf_r+0x1384>
 80067a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8375 	beq.w	8006e98 <_svfprintf_r+0x1324>
 80067ae:	2000      	movs	r0, #0
 80067b0:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80067b4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80067b8:	960b      	str	r6, [sp, #44]	; 0x2c
 80067ba:	f7ff bb36 	b.w	8005e2a <_svfprintf_r+0x2b6>
 80067be:	9f08      	ldr	r7, [sp, #32]
 80067c0:	f7ff bba1 	b.w	8005f06 <_svfprintf_r+0x392>
 80067c4:	2010      	movs	r0, #16
 80067c6:	2a07      	cmp	r2, #7
 80067c8:	4403      	add	r3, r0
 80067ca:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80067ce:	6060      	str	r0, [r4, #4]
 80067d0:	dd08      	ble.n	80067e4 <_svfprintf_r+0xc70>
 80067d2:	4659      	mov	r1, fp
 80067d4:	4648      	mov	r0, r9
 80067d6:	aa26      	add	r2, sp, #152	; 0x98
 80067d8:	f002 f911 	bl	80089fe <__ssprint_r>
 80067dc:	2800      	cmp	r0, #0
 80067de:	f040 8339 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 80067e2:	a929      	add	r1, sp, #164	; 0xa4
 80067e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067e6:	460c      	mov	r4, r1
 80067e8:	3b10      	subs	r3, #16
 80067ea:	9316      	str	r3, [sp, #88]	; 0x58
 80067ec:	e4f4      	b.n	80061d8 <_svfprintf_r+0x664>
 80067ee:	460c      	mov	r4, r1
 80067f0:	e50e      	b.n	8006210 <_svfprintf_r+0x69c>
 80067f2:	4659      	mov	r1, fp
 80067f4:	4648      	mov	r0, r9
 80067f6:	aa26      	add	r2, sp, #152	; 0x98
 80067f8:	f002 f901 	bl	80089fe <__ssprint_r>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f040 8329 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006802:	ac29      	add	r4, sp, #164	; 0xa4
 8006804:	e516      	b.n	8006234 <_svfprintf_r+0x6c0>
 8006806:	4659      	mov	r1, fp
 8006808:	4648      	mov	r0, r9
 800680a:	aa26      	add	r2, sp, #152	; 0x98
 800680c:	f002 f8f7 	bl	80089fe <__ssprint_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	f040 831f 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006816:	ac29      	add	r4, sp, #164	; 0xa4
 8006818:	e51c      	b.n	8006254 <_svfprintf_r+0x6e0>
 800681a:	2010      	movs	r0, #16
 800681c:	2a07      	cmp	r2, #7
 800681e:	4403      	add	r3, r0
 8006820:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006824:	6060      	str	r0, [r4, #4]
 8006826:	dd08      	ble.n	800683a <_svfprintf_r+0xcc6>
 8006828:	4659      	mov	r1, fp
 800682a:	4648      	mov	r0, r9
 800682c:	aa26      	add	r2, sp, #152	; 0x98
 800682e:	f002 f8e6 	bl	80089fe <__ssprint_r>
 8006832:	2800      	cmp	r0, #0
 8006834:	f040 830e 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006838:	a929      	add	r1, sp, #164	; 0xa4
 800683a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800683c:	460c      	mov	r4, r1
 800683e:	3b10      	subs	r3, #16
 8006840:	9316      	str	r3, [sp, #88]	; 0x58
 8006842:	e510      	b.n	8006266 <_svfprintf_r+0x6f2>
 8006844:	460c      	mov	r4, r1
 8006846:	e52a      	b.n	800629e <_svfprintf_r+0x72a>
 8006848:	2010      	movs	r0, #16
 800684a:	2b07      	cmp	r3, #7
 800684c:	4402      	add	r2, r0
 800684e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006852:	6060      	str	r0, [r4, #4]
 8006854:	dd08      	ble.n	8006868 <_svfprintf_r+0xcf4>
 8006856:	4659      	mov	r1, fp
 8006858:	4648      	mov	r0, r9
 800685a:	aa26      	add	r2, sp, #152	; 0x98
 800685c:	f002 f8cf 	bl	80089fe <__ssprint_r>
 8006860:	2800      	cmp	r0, #0
 8006862:	f040 82f7 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006866:	a929      	add	r1, sp, #164	; 0xa4
 8006868:	460c      	mov	r4, r1
 800686a:	3f10      	subs	r7, #16
 800686c:	e51b      	b.n	80062a6 <_svfprintf_r+0x732>
 800686e:	460c      	mov	r4, r1
 8006870:	e542      	b.n	80062f8 <_svfprintf_r+0x784>
 8006872:	bf00      	nop
 8006874:	0801fe28 	.word	0x0801fe28
 8006878:	0801fe39 	.word	0x0801fe39
 800687c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687e:	2b65      	cmp	r3, #101	; 0x65
 8006880:	f340 8230 	ble.w	8006ce4 <_svfprintf_r+0x1170>
 8006884:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006888:	2200      	movs	r2, #0
 800688a:	2300      	movs	r3, #0
 800688c:	f7fa f8f8 	bl	8000a80 <__aeabi_dcmpeq>
 8006890:	2800      	cmp	r0, #0
 8006892:	d068      	beq.n	8006966 <_svfprintf_r+0xdf2>
 8006894:	4b6d      	ldr	r3, [pc, #436]	; (8006a4c <_svfprintf_r+0xed8>)
 8006896:	6023      	str	r3, [r4, #0]
 8006898:	2301      	movs	r3, #1
 800689a:	441f      	add	r7, r3
 800689c:	6063      	str	r3, [r4, #4]
 800689e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80068a0:	9728      	str	r7, [sp, #160]	; 0xa0
 80068a2:	3301      	adds	r3, #1
 80068a4:	2b07      	cmp	r3, #7
 80068a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80068a8:	dc37      	bgt.n	800691a <_svfprintf_r+0xda6>
 80068aa:	3408      	adds	r4, #8
 80068ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b0:	4293      	cmp	r3, r2
 80068b2:	db03      	blt.n	80068bc <_svfprintf_r+0xd48>
 80068b4:	f018 0f01 	tst.w	r8, #1
 80068b8:	f43f ad30 	beq.w	800631c <_svfprintf_r+0x7a8>
 80068bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80068c8:	4413      	add	r3, r2
 80068ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80068cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80068ce:	3301      	adds	r3, #1
 80068d0:	2b07      	cmp	r3, #7
 80068d2:	9327      	str	r3, [sp, #156]	; 0x9c
 80068d4:	dc2b      	bgt.n	800692e <_svfprintf_r+0xdba>
 80068d6:	3408      	adds	r4, #8
 80068d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068da:	1e5d      	subs	r5, r3, #1
 80068dc:	2d00      	cmp	r5, #0
 80068de:	f77f ad1d 	ble.w	800631c <_svfprintf_r+0x7a8>
 80068e2:	2710      	movs	r7, #16
 80068e4:	4e5a      	ldr	r6, [pc, #360]	; (8006a50 <_svfprintf_r+0xedc>)
 80068e6:	2d10      	cmp	r5, #16
 80068e8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80068ec:	f104 0108 	add.w	r1, r4, #8
 80068f0:	f103 0301 	add.w	r3, r3, #1
 80068f4:	6026      	str	r6, [r4, #0]
 80068f6:	dc24      	bgt.n	8006942 <_svfprintf_r+0xdce>
 80068f8:	6065      	str	r5, [r4, #4]
 80068fa:	2b07      	cmp	r3, #7
 80068fc:	4415      	add	r5, r2
 80068fe:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8006902:	f340 8286 	ble.w	8006e12 <_svfprintf_r+0x129e>
 8006906:	4659      	mov	r1, fp
 8006908:	4648      	mov	r0, r9
 800690a:	aa26      	add	r2, sp, #152	; 0x98
 800690c:	f002 f877 	bl	80089fe <__ssprint_r>
 8006910:	2800      	cmp	r0, #0
 8006912:	f040 829f 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006916:	ac29      	add	r4, sp, #164	; 0xa4
 8006918:	e500      	b.n	800631c <_svfprintf_r+0x7a8>
 800691a:	4659      	mov	r1, fp
 800691c:	4648      	mov	r0, r9
 800691e:	aa26      	add	r2, sp, #152	; 0x98
 8006920:	f002 f86d 	bl	80089fe <__ssprint_r>
 8006924:	2800      	cmp	r0, #0
 8006926:	f040 8295 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 800692a:	ac29      	add	r4, sp, #164	; 0xa4
 800692c:	e7be      	b.n	80068ac <_svfprintf_r+0xd38>
 800692e:	4659      	mov	r1, fp
 8006930:	4648      	mov	r0, r9
 8006932:	aa26      	add	r2, sp, #152	; 0x98
 8006934:	f002 f863 	bl	80089fe <__ssprint_r>
 8006938:	2800      	cmp	r0, #0
 800693a:	f040 828b 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 800693e:	ac29      	add	r4, sp, #164	; 0xa4
 8006940:	e7ca      	b.n	80068d8 <_svfprintf_r+0xd64>
 8006942:	3210      	adds	r2, #16
 8006944:	2b07      	cmp	r3, #7
 8006946:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800694a:	6067      	str	r7, [r4, #4]
 800694c:	dd08      	ble.n	8006960 <_svfprintf_r+0xdec>
 800694e:	4659      	mov	r1, fp
 8006950:	4648      	mov	r0, r9
 8006952:	aa26      	add	r2, sp, #152	; 0x98
 8006954:	f002 f853 	bl	80089fe <__ssprint_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	f040 827b 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 800695e:	a929      	add	r1, sp, #164	; 0xa4
 8006960:	460c      	mov	r4, r1
 8006962:	3d10      	subs	r5, #16
 8006964:	e7bf      	b.n	80068e6 <_svfprintf_r+0xd72>
 8006966:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006968:	2b00      	cmp	r3, #0
 800696a:	dc73      	bgt.n	8006a54 <_svfprintf_r+0xee0>
 800696c:	4b37      	ldr	r3, [pc, #220]	; (8006a4c <_svfprintf_r+0xed8>)
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	2301      	movs	r3, #1
 8006972:	441f      	add	r7, r3
 8006974:	6063      	str	r3, [r4, #4]
 8006976:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006978:	9728      	str	r7, [sp, #160]	; 0xa0
 800697a:	3301      	adds	r3, #1
 800697c:	2b07      	cmp	r3, #7
 800697e:	9327      	str	r3, [sp, #156]	; 0x9c
 8006980:	dc3d      	bgt.n	80069fe <_svfprintf_r+0xe8a>
 8006982:	3408      	adds	r4, #8
 8006984:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006986:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006988:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800698a:	430a      	orrs	r2, r1
 800698c:	f008 0101 	and.w	r1, r8, #1
 8006990:	430a      	orrs	r2, r1
 8006992:	f43f acc3 	beq.w	800631c <_svfprintf_r+0x7a8>
 8006996:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006998:	6022      	str	r2, [r4, #0]
 800699a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800699c:	4413      	add	r3, r2
 800699e:	9328      	str	r3, [sp, #160]	; 0xa0
 80069a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80069a2:	6062      	str	r2, [r4, #4]
 80069a4:	3301      	adds	r3, #1
 80069a6:	2b07      	cmp	r3, #7
 80069a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80069aa:	dc32      	bgt.n	8006a12 <_svfprintf_r+0xe9e>
 80069ac:	3408      	adds	r4, #8
 80069ae:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80069b0:	2d00      	cmp	r5, #0
 80069b2:	da1b      	bge.n	80069ec <_svfprintf_r+0xe78>
 80069b4:	4623      	mov	r3, r4
 80069b6:	2710      	movs	r7, #16
 80069b8:	4e25      	ldr	r6, [pc, #148]	; (8006a50 <_svfprintf_r+0xedc>)
 80069ba:	426d      	negs	r5, r5
 80069bc:	2d10      	cmp	r5, #16
 80069be:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 80069c2:	f104 0408 	add.w	r4, r4, #8
 80069c6:	f102 0201 	add.w	r2, r2, #1
 80069ca:	601e      	str	r6, [r3, #0]
 80069cc:	dc2b      	bgt.n	8006a26 <_svfprintf_r+0xeb2>
 80069ce:	605d      	str	r5, [r3, #4]
 80069d0:	2a07      	cmp	r2, #7
 80069d2:	440d      	add	r5, r1
 80069d4:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 80069d8:	dd08      	ble.n	80069ec <_svfprintf_r+0xe78>
 80069da:	4659      	mov	r1, fp
 80069dc:	4648      	mov	r0, r9
 80069de:	aa26      	add	r2, sp, #152	; 0x98
 80069e0:	f002 f80d 	bl	80089fe <__ssprint_r>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f040 8235 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 80069ea:	ac29      	add	r4, sp, #164	; 0xa4
 80069ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f0:	6063      	str	r3, [r4, #4]
 80069f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80069f4:	f8c4 a000 	str.w	sl, [r4]
 80069f8:	4413      	add	r3, r2
 80069fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80069fc:	e487      	b.n	800630e <_svfprintf_r+0x79a>
 80069fe:	4659      	mov	r1, fp
 8006a00:	4648      	mov	r0, r9
 8006a02:	aa26      	add	r2, sp, #152	; 0x98
 8006a04:	f001 fffb 	bl	80089fe <__ssprint_r>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f040 8223 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006a0e:	ac29      	add	r4, sp, #164	; 0xa4
 8006a10:	e7b8      	b.n	8006984 <_svfprintf_r+0xe10>
 8006a12:	4659      	mov	r1, fp
 8006a14:	4648      	mov	r0, r9
 8006a16:	aa26      	add	r2, sp, #152	; 0x98
 8006a18:	f001 fff1 	bl	80089fe <__ssprint_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f040 8219 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006a22:	ac29      	add	r4, sp, #164	; 0xa4
 8006a24:	e7c3      	b.n	80069ae <_svfprintf_r+0xe3a>
 8006a26:	3110      	adds	r1, #16
 8006a28:	2a07      	cmp	r2, #7
 8006a2a:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8006a2e:	605f      	str	r7, [r3, #4]
 8006a30:	dd08      	ble.n	8006a44 <_svfprintf_r+0xed0>
 8006a32:	4659      	mov	r1, fp
 8006a34:	4648      	mov	r0, r9
 8006a36:	aa26      	add	r2, sp, #152	; 0x98
 8006a38:	f001 ffe1 	bl	80089fe <__ssprint_r>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f040 8209 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006a42:	ac29      	add	r4, sp, #164	; 0xa4
 8006a44:	4623      	mov	r3, r4
 8006a46:	3d10      	subs	r5, #16
 8006a48:	e7b8      	b.n	80069bc <_svfprintf_r+0xe48>
 8006a4a:	bf00      	nop
 8006a4c:	0801fe4a 	.word	0x0801fe4a
 8006a50:	0801fe5c 	.word	0x0801fe5c
 8006a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a56:	42ab      	cmp	r3, r5
 8006a58:	bfa8      	it	ge
 8006a5a:	462b      	movge	r3, r5
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	9307      	str	r3, [sp, #28]
 8006a60:	dd0a      	ble.n	8006a78 <_svfprintf_r+0xf04>
 8006a62:	441f      	add	r7, r3
 8006a64:	e9c4 a300 	strd	sl, r3, [r4]
 8006a68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006a6a:	9728      	str	r7, [sp, #160]	; 0xa0
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	2b07      	cmp	r3, #7
 8006a70:	9327      	str	r3, [sp, #156]	; 0x9c
 8006a72:	f300 8085 	bgt.w	8006b80 <_svfprintf_r+0x100c>
 8006a76:	3408      	adds	r4, #8
 8006a78:	9b07      	ldr	r3, [sp, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bfb4      	ite	lt
 8006a7e:	462f      	movlt	r7, r5
 8006a80:	1aef      	subge	r7, r5, r3
 8006a82:	2f00      	cmp	r7, #0
 8006a84:	dd19      	ble.n	8006aba <_svfprintf_r+0xf46>
 8006a86:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006a8a:	4895      	ldr	r0, [pc, #596]	; (8006ce0 <_svfprintf_r+0x116c>)
 8006a8c:	2f10      	cmp	r7, #16
 8006a8e:	f103 0301 	add.w	r3, r3, #1
 8006a92:	f104 0108 	add.w	r1, r4, #8
 8006a96:	6020      	str	r0, [r4, #0]
 8006a98:	dc7c      	bgt.n	8006b94 <_svfprintf_r+0x1020>
 8006a9a:	6067      	str	r7, [r4, #4]
 8006a9c:	2b07      	cmp	r3, #7
 8006a9e:	4417      	add	r7, r2
 8006aa0:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8006aa4:	f340 8089 	ble.w	8006bba <_svfprintf_r+0x1046>
 8006aa8:	4659      	mov	r1, fp
 8006aaa:	4648      	mov	r0, r9
 8006aac:	aa26      	add	r2, sp, #152	; 0x98
 8006aae:	f001 ffa6 	bl	80089fe <__ssprint_r>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	f040 81ce 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006ab8:	ac29      	add	r4, sp, #164	; 0xa4
 8006aba:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8006abe:	4455      	add	r5, sl
 8006ac0:	d009      	beq.n	8006ad6 <_svfprintf_r+0xf62>
 8006ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d17a      	bne.n	8006bbe <_svfprintf_r+0x104a>
 8006ac8:	2e00      	cmp	r6, #0
 8006aca:	d17a      	bne.n	8006bc2 <_svfprintf_r+0x104e>
 8006acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ace:	4453      	add	r3, sl
 8006ad0:	429d      	cmp	r5, r3
 8006ad2:	bf28      	it	cs
 8006ad4:	461d      	movcs	r5, r3
 8006ad6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ada:	4293      	cmp	r3, r2
 8006adc:	db02      	blt.n	8006ae4 <_svfprintf_r+0xf70>
 8006ade:	f018 0f01 	tst.w	r8, #1
 8006ae2:	d00e      	beq.n	8006b02 <_svfprintf_r+0xf8e>
 8006ae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ae6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aec:	6063      	str	r3, [r4, #4]
 8006aee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006af0:	4413      	add	r3, r2
 8006af2:	9328      	str	r3, [sp, #160]	; 0xa0
 8006af4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006af6:	3301      	adds	r3, #1
 8006af8:	2b07      	cmp	r3, #7
 8006afa:	9327      	str	r3, [sp, #156]	; 0x9c
 8006afc:	f300 80db 	bgt.w	8006cb6 <_svfprintf_r+0x1142>
 8006b00:	3408      	adds	r4, #8
 8006b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b04:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8006b06:	eb0a 0203 	add.w	r2, sl, r3
 8006b0a:	1b9e      	subs	r6, r3, r6
 8006b0c:	1b52      	subs	r2, r2, r5
 8006b0e:	4296      	cmp	r6, r2
 8006b10:	bfa8      	it	ge
 8006b12:	4616      	movge	r6, r2
 8006b14:	2e00      	cmp	r6, #0
 8006b16:	dd0b      	ble.n	8006b30 <_svfprintf_r+0xfbc>
 8006b18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b1a:	e9c4 5600 	strd	r5, r6, [r4]
 8006b1e:	4433      	add	r3, r6
 8006b20:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b22:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006b24:	3301      	adds	r3, #1
 8006b26:	2b07      	cmp	r3, #7
 8006b28:	9327      	str	r3, [sp, #156]	; 0x9c
 8006b2a:	f300 80ce 	bgt.w	8006cca <_svfprintf_r+0x1156>
 8006b2e:	3408      	adds	r4, #8
 8006b30:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b34:	2e00      	cmp	r6, #0
 8006b36:	eba3 0505 	sub.w	r5, r3, r5
 8006b3a:	bfa8      	it	ge
 8006b3c:	1bad      	subge	r5, r5, r6
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	f77f abec 	ble.w	800631c <_svfprintf_r+0x7a8>
 8006b44:	2710      	movs	r7, #16
 8006b46:	4e66      	ldr	r6, [pc, #408]	; (8006ce0 <_svfprintf_r+0x116c>)
 8006b48:	2d10      	cmp	r5, #16
 8006b4a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006b4e:	f104 0108 	add.w	r1, r4, #8
 8006b52:	f103 0301 	add.w	r3, r3, #1
 8006b56:	6026      	str	r6, [r4, #0]
 8006b58:	f77f aece 	ble.w	80068f8 <_svfprintf_r+0xd84>
 8006b5c:	3210      	adds	r2, #16
 8006b5e:	2b07      	cmp	r3, #7
 8006b60:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006b64:	6067      	str	r7, [r4, #4]
 8006b66:	dd08      	ble.n	8006b7a <_svfprintf_r+0x1006>
 8006b68:	4659      	mov	r1, fp
 8006b6a:	4648      	mov	r0, r9
 8006b6c:	aa26      	add	r2, sp, #152	; 0x98
 8006b6e:	f001 ff46 	bl	80089fe <__ssprint_r>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	f040 816e 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006b78:	a929      	add	r1, sp, #164	; 0xa4
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	3d10      	subs	r5, #16
 8006b7e:	e7e3      	b.n	8006b48 <_svfprintf_r+0xfd4>
 8006b80:	4659      	mov	r1, fp
 8006b82:	4648      	mov	r0, r9
 8006b84:	aa26      	add	r2, sp, #152	; 0x98
 8006b86:	f001 ff3a 	bl	80089fe <__ssprint_r>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	f040 8162 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006b90:	ac29      	add	r4, sp, #164	; 0xa4
 8006b92:	e771      	b.n	8006a78 <_svfprintf_r+0xf04>
 8006b94:	2010      	movs	r0, #16
 8006b96:	2b07      	cmp	r3, #7
 8006b98:	4402      	add	r2, r0
 8006b9a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006b9e:	6060      	str	r0, [r4, #4]
 8006ba0:	dd08      	ble.n	8006bb4 <_svfprintf_r+0x1040>
 8006ba2:	4659      	mov	r1, fp
 8006ba4:	4648      	mov	r0, r9
 8006ba6:	aa26      	add	r2, sp, #152	; 0x98
 8006ba8:	f001 ff29 	bl	80089fe <__ssprint_r>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	f040 8151 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006bb2:	a929      	add	r1, sp, #164	; 0xa4
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	3f10      	subs	r7, #16
 8006bb8:	e765      	b.n	8006a86 <_svfprintf_r+0xf12>
 8006bba:	460c      	mov	r4, r1
 8006bbc:	e77d      	b.n	8006aba <_svfprintf_r+0xf46>
 8006bbe:	2e00      	cmp	r6, #0
 8006bc0:	d049      	beq.n	8006c56 <_svfprintf_r+0x10e2>
 8006bc2:	3e01      	subs	r6, #1
 8006bc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006bc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bcc:	6063      	str	r3, [r4, #4]
 8006bce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006bd0:	4413      	add	r3, r2
 8006bd2:	9328      	str	r3, [sp, #160]	; 0xa0
 8006bd4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	2b07      	cmp	r3, #7
 8006bda:	9327      	str	r3, [sp, #156]	; 0x9c
 8006bdc:	dc42      	bgt.n	8006c64 <_svfprintf_r+0x10f0>
 8006bde:	3408      	adds	r4, #8
 8006be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006be4:	4453      	add	r3, sl
 8006be6:	7812      	ldrb	r2, [r2, #0]
 8006be8:	1b5b      	subs	r3, r3, r5
 8006bea:	429a      	cmp	r2, r3
 8006bec:	bfa8      	it	ge
 8006bee:	461a      	movge	r2, r3
 8006bf0:	2a00      	cmp	r2, #0
 8006bf2:	9207      	str	r2, [sp, #28]
 8006bf4:	dd0a      	ble.n	8006c0c <_svfprintf_r+0x1098>
 8006bf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006bf8:	e9c4 5200 	strd	r5, r2, [r4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	9328      	str	r3, [sp, #160]	; 0xa0
 8006c00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006c02:	3301      	adds	r3, #1
 8006c04:	2b07      	cmp	r3, #7
 8006c06:	9327      	str	r3, [sp, #156]	; 0x9c
 8006c08:	dc36      	bgt.n	8006c78 <_svfprintf_r+0x1104>
 8006c0a:	3408      	adds	r4, #8
 8006c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c0e:	781f      	ldrb	r7, [r3, #0]
 8006c10:	9b07      	ldr	r3, [sp, #28]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bfa8      	it	ge
 8006c16:	1aff      	subge	r7, r7, r3
 8006c18:	2f00      	cmp	r7, #0
 8006c1a:	dd18      	ble.n	8006c4e <_svfprintf_r+0x10da>
 8006c1c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006c20:	482f      	ldr	r0, [pc, #188]	; (8006ce0 <_svfprintf_r+0x116c>)
 8006c22:	2f10      	cmp	r7, #16
 8006c24:	f103 0301 	add.w	r3, r3, #1
 8006c28:	f104 0108 	add.w	r1, r4, #8
 8006c2c:	6020      	str	r0, [r4, #0]
 8006c2e:	dc2d      	bgt.n	8006c8c <_svfprintf_r+0x1118>
 8006c30:	443a      	add	r2, r7
 8006c32:	2b07      	cmp	r3, #7
 8006c34:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006c38:	6067      	str	r7, [r4, #4]
 8006c3a:	dd3a      	ble.n	8006cb2 <_svfprintf_r+0x113e>
 8006c3c:	4659      	mov	r1, fp
 8006c3e:	4648      	mov	r0, r9
 8006c40:	aa26      	add	r2, sp, #152	; 0x98
 8006c42:	f001 fedc 	bl	80089fe <__ssprint_r>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f040 8104 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006c4c:	ac29      	add	r4, sp, #164	; 0xa4
 8006c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	441d      	add	r5, r3
 8006c54:	e735      	b.n	8006ac2 <_svfprintf_r+0xf4e>
 8006c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8006c5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	930c      	str	r3, [sp, #48]	; 0x30
 8006c62:	e7af      	b.n	8006bc4 <_svfprintf_r+0x1050>
 8006c64:	4659      	mov	r1, fp
 8006c66:	4648      	mov	r0, r9
 8006c68:	aa26      	add	r2, sp, #152	; 0x98
 8006c6a:	f001 fec8 	bl	80089fe <__ssprint_r>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f040 80f0 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006c74:	ac29      	add	r4, sp, #164	; 0xa4
 8006c76:	e7b3      	b.n	8006be0 <_svfprintf_r+0x106c>
 8006c78:	4659      	mov	r1, fp
 8006c7a:	4648      	mov	r0, r9
 8006c7c:	aa26      	add	r2, sp, #152	; 0x98
 8006c7e:	f001 febe 	bl	80089fe <__ssprint_r>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	f040 80e6 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006c88:	ac29      	add	r4, sp, #164	; 0xa4
 8006c8a:	e7bf      	b.n	8006c0c <_svfprintf_r+0x1098>
 8006c8c:	2010      	movs	r0, #16
 8006c8e:	2b07      	cmp	r3, #7
 8006c90:	4402      	add	r2, r0
 8006c92:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006c96:	6060      	str	r0, [r4, #4]
 8006c98:	dd08      	ble.n	8006cac <_svfprintf_r+0x1138>
 8006c9a:	4659      	mov	r1, fp
 8006c9c:	4648      	mov	r0, r9
 8006c9e:	aa26      	add	r2, sp, #152	; 0x98
 8006ca0:	f001 fead 	bl	80089fe <__ssprint_r>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f040 80d5 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006caa:	a929      	add	r1, sp, #164	; 0xa4
 8006cac:	460c      	mov	r4, r1
 8006cae:	3f10      	subs	r7, #16
 8006cb0:	e7b4      	b.n	8006c1c <_svfprintf_r+0x10a8>
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	e7cb      	b.n	8006c4e <_svfprintf_r+0x10da>
 8006cb6:	4659      	mov	r1, fp
 8006cb8:	4648      	mov	r0, r9
 8006cba:	aa26      	add	r2, sp, #152	; 0x98
 8006cbc:	f001 fe9f 	bl	80089fe <__ssprint_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	f040 80c7 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006cc6:	ac29      	add	r4, sp, #164	; 0xa4
 8006cc8:	e71b      	b.n	8006b02 <_svfprintf_r+0xf8e>
 8006cca:	4659      	mov	r1, fp
 8006ccc:	4648      	mov	r0, r9
 8006cce:	aa26      	add	r2, sp, #152	; 0x98
 8006cd0:	f001 fe95 	bl	80089fe <__ssprint_r>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	f040 80bd 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006cda:	ac29      	add	r4, sp, #164	; 0xa4
 8006cdc:	e728      	b.n	8006b30 <_svfprintf_r+0xfbc>
 8006cde:	bf00      	nop
 8006ce0:	0801fe5c 	.word	0x0801fe5c
 8006ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ce6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006ce8:	2a01      	cmp	r2, #1
 8006cea:	f107 0701 	add.w	r7, r7, #1
 8006cee:	f103 0301 	add.w	r3, r3, #1
 8006cf2:	f104 0508 	add.w	r5, r4, #8
 8006cf6:	dc02      	bgt.n	8006cfe <_svfprintf_r+0x118a>
 8006cf8:	f018 0f01 	tst.w	r8, #1
 8006cfc:	d07e      	beq.n	8006dfc <_svfprintf_r+0x1288>
 8006cfe:	2201      	movs	r2, #1
 8006d00:	2b07      	cmp	r3, #7
 8006d02:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8006d06:	f8c4 a000 	str.w	sl, [r4]
 8006d0a:	6062      	str	r2, [r4, #4]
 8006d0c:	dd08      	ble.n	8006d20 <_svfprintf_r+0x11ac>
 8006d0e:	4659      	mov	r1, fp
 8006d10:	4648      	mov	r0, r9
 8006d12:	aa26      	add	r2, sp, #152	; 0x98
 8006d14:	f001 fe73 	bl	80089fe <__ssprint_r>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	f040 809b 	bne.w	8006e54 <_svfprintf_r+0x12e0>
 8006d1e:	ad29      	add	r5, sp, #164	; 0xa4
 8006d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d24:	602b      	str	r3, [r5, #0]
 8006d26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d28:	606b      	str	r3, [r5, #4]
 8006d2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d2c:	4413      	add	r3, r2
 8006d2e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006d30:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006d32:	3301      	adds	r3, #1
 8006d34:	2b07      	cmp	r3, #7
 8006d36:	9327      	str	r3, [sp, #156]	; 0x9c
 8006d38:	dc32      	bgt.n	8006da0 <_svfprintf_r+0x122c>
 8006d3a:	3508      	adds	r5, #8
 8006d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3e:	2200      	movs	r2, #0
 8006d40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d44:	1e5c      	subs	r4, r3, #1
 8006d46:	2300      	movs	r3, #0
 8006d48:	f7f9 fe9a 	bl	8000a80 <__aeabi_dcmpeq>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d130      	bne.n	8006db2 <_svfprintf_r+0x123e>
 8006d50:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006d52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d56:	3101      	adds	r1, #1
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	f10a 0001 	add.w	r0, sl, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	2907      	cmp	r1, #7
 8006d62:	e9c5 0400 	strd	r0, r4, [r5]
 8006d66:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 8006d6a:	dd50      	ble.n	8006e0e <_svfprintf_r+0x129a>
 8006d6c:	4659      	mov	r1, fp
 8006d6e:	4648      	mov	r0, r9
 8006d70:	aa26      	add	r2, sp, #152	; 0x98
 8006d72:	f001 fe44 	bl	80089fe <__ssprint_r>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d16c      	bne.n	8006e54 <_svfprintf_r+0x12e0>
 8006d7a:	ad29      	add	r5, sp, #164	; 0xa4
 8006d7c:	ab22      	add	r3, sp, #136	; 0x88
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d84:	606b      	str	r3, [r5, #4]
 8006d86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d88:	4413      	add	r3, r2
 8006d8a:	9328      	str	r3, [sp, #160]	; 0xa0
 8006d8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006d8e:	3301      	adds	r3, #1
 8006d90:	2b07      	cmp	r3, #7
 8006d92:	9327      	str	r3, [sp, #156]	; 0x9c
 8006d94:	f73f adb7 	bgt.w	8006906 <_svfprintf_r+0xd92>
 8006d98:	f105 0408 	add.w	r4, r5, #8
 8006d9c:	f7ff babe 	b.w	800631c <_svfprintf_r+0x7a8>
 8006da0:	4659      	mov	r1, fp
 8006da2:	4648      	mov	r0, r9
 8006da4:	aa26      	add	r2, sp, #152	; 0x98
 8006da6:	f001 fe2a 	bl	80089fe <__ssprint_r>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d152      	bne.n	8006e54 <_svfprintf_r+0x12e0>
 8006dae:	ad29      	add	r5, sp, #164	; 0xa4
 8006db0:	e7c4      	b.n	8006d3c <_svfprintf_r+0x11c8>
 8006db2:	2c00      	cmp	r4, #0
 8006db4:	dde2      	ble.n	8006d7c <_svfprintf_r+0x1208>
 8006db6:	2710      	movs	r7, #16
 8006db8:	4e56      	ldr	r6, [pc, #344]	; (8006f14 <_svfprintf_r+0x13a0>)
 8006dba:	2c10      	cmp	r4, #16
 8006dbc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006dc0:	f105 0108 	add.w	r1, r5, #8
 8006dc4:	f103 0301 	add.w	r3, r3, #1
 8006dc8:	602e      	str	r6, [r5, #0]
 8006dca:	dc07      	bgt.n	8006ddc <_svfprintf_r+0x1268>
 8006dcc:	606c      	str	r4, [r5, #4]
 8006dce:	2b07      	cmp	r3, #7
 8006dd0:	4414      	add	r4, r2
 8006dd2:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8006dd6:	dcc9      	bgt.n	8006d6c <_svfprintf_r+0x11f8>
 8006dd8:	460d      	mov	r5, r1
 8006dda:	e7cf      	b.n	8006d7c <_svfprintf_r+0x1208>
 8006ddc:	3210      	adds	r2, #16
 8006dde:	2b07      	cmp	r3, #7
 8006de0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006de4:	606f      	str	r7, [r5, #4]
 8006de6:	dd06      	ble.n	8006df6 <_svfprintf_r+0x1282>
 8006de8:	4659      	mov	r1, fp
 8006dea:	4648      	mov	r0, r9
 8006dec:	aa26      	add	r2, sp, #152	; 0x98
 8006dee:	f001 fe06 	bl	80089fe <__ssprint_r>
 8006df2:	bb78      	cbnz	r0, 8006e54 <_svfprintf_r+0x12e0>
 8006df4:	a929      	add	r1, sp, #164	; 0xa4
 8006df6:	460d      	mov	r5, r1
 8006df8:	3c10      	subs	r4, #16
 8006dfa:	e7de      	b.n	8006dba <_svfprintf_r+0x1246>
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	2b07      	cmp	r3, #7
 8006e00:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8006e04:	f8c4 a000 	str.w	sl, [r4]
 8006e08:	6062      	str	r2, [r4, #4]
 8006e0a:	ddb7      	ble.n	8006d7c <_svfprintf_r+0x1208>
 8006e0c:	e7ae      	b.n	8006d6c <_svfprintf_r+0x11f8>
 8006e0e:	3508      	adds	r5, #8
 8006e10:	e7b4      	b.n	8006d7c <_svfprintf_r+0x1208>
 8006e12:	460c      	mov	r4, r1
 8006e14:	f7ff ba82 	b.w	800631c <_svfprintf_r+0x7a8>
 8006e18:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8006e1c:	1a9d      	subs	r5, r3, r2
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	f77f aa80 	ble.w	8006324 <_svfprintf_r+0x7b0>
 8006e24:	2710      	movs	r7, #16
 8006e26:	4e3c      	ldr	r6, [pc, #240]	; (8006f18 <_svfprintf_r+0x13a4>)
 8006e28:	2d10      	cmp	r5, #16
 8006e2a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006e2e:	6026      	str	r6, [r4, #0]
 8006e30:	f103 0301 	add.w	r3, r3, #1
 8006e34:	dc18      	bgt.n	8006e68 <_svfprintf_r+0x12f4>
 8006e36:	6065      	str	r5, [r4, #4]
 8006e38:	2b07      	cmp	r3, #7
 8006e3a:	4415      	add	r5, r2
 8006e3c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8006e40:	f77f aa70 	ble.w	8006324 <_svfprintf_r+0x7b0>
 8006e44:	4659      	mov	r1, fp
 8006e46:	4648      	mov	r0, r9
 8006e48:	aa26      	add	r2, sp, #152	; 0x98
 8006e4a:	f001 fdd8 	bl	80089fe <__ssprint_r>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f43f aa68 	beq.w	8006324 <_svfprintf_r+0x7b0>
 8006e54:	9b08      	ldr	r3, [sp, #32]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f43f a88d 	beq.w	8005f76 <_svfprintf_r+0x402>
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4648      	mov	r0, r9
 8006e60:	f000 ff16 	bl	8007c90 <_free_r>
 8006e64:	f7ff b887 	b.w	8005f76 <_svfprintf_r+0x402>
 8006e68:	3210      	adds	r2, #16
 8006e6a:	2b07      	cmp	r3, #7
 8006e6c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006e70:	6067      	str	r7, [r4, #4]
 8006e72:	dc02      	bgt.n	8006e7a <_svfprintf_r+0x1306>
 8006e74:	3408      	adds	r4, #8
 8006e76:	3d10      	subs	r5, #16
 8006e78:	e7d6      	b.n	8006e28 <_svfprintf_r+0x12b4>
 8006e7a:	4659      	mov	r1, fp
 8006e7c:	4648      	mov	r0, r9
 8006e7e:	aa26      	add	r2, sp, #152	; 0x98
 8006e80:	f001 fdbd 	bl	80089fe <__ssprint_r>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d1e5      	bne.n	8006e54 <_svfprintf_r+0x12e0>
 8006e88:	ac29      	add	r4, sp, #164	; 0xa4
 8006e8a:	e7f4      	b.n	8006e76 <_svfprintf_r+0x1302>
 8006e8c:	4648      	mov	r0, r9
 8006e8e:	9908      	ldr	r1, [sp, #32]
 8006e90:	f000 fefe 	bl	8007c90 <_free_r>
 8006e94:	f7ff ba5e 	b.w	8006354 <_svfprintf_r+0x7e0>
 8006e98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f43f a86b 	beq.w	8005f76 <_svfprintf_r+0x402>
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	4648      	mov	r0, r9
 8006ea4:	aa26      	add	r2, sp, #152	; 0x98
 8006ea6:	f001 fdaa 	bl	80089fe <__ssprint_r>
 8006eaa:	f7ff b864 	b.w	8005f76 <_svfprintf_r+0x402>
 8006eae:	ea56 0207 	orrs.w	r2, r6, r7
 8006eb2:	f8cd 8020 	str.w	r8, [sp, #32]
 8006eb6:	f43f ab70 	beq.w	800659a <_svfprintf_r+0xa26>
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	f43f ac0d 	beq.w	80066da <_svfprintf_r+0xb66>
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8006ec6:	f43f ac55 	beq.w	8006774 <_svfprintf_r+0xc00>
 8006eca:	f006 0307 	and.w	r3, r6, #7
 8006ece:	08f6      	lsrs	r6, r6, #3
 8006ed0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8006ed4:	08ff      	lsrs	r7, r7, #3
 8006ed6:	3330      	adds	r3, #48	; 0x30
 8006ed8:	ea56 0107 	orrs.w	r1, r6, r7
 8006edc:	4652      	mov	r2, sl
 8006ede:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8006ee2:	d1f2      	bne.n	8006eca <_svfprintf_r+0x1356>
 8006ee4:	9908      	ldr	r1, [sp, #32]
 8006ee6:	07c9      	lsls	r1, r1, #31
 8006ee8:	d506      	bpl.n	8006ef8 <_svfprintf_r+0x1384>
 8006eea:	2b30      	cmp	r3, #48	; 0x30
 8006eec:	d004      	beq.n	8006ef8 <_svfprintf_r+0x1384>
 8006eee:	2330      	movs	r3, #48	; 0x30
 8006ef0:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8006ef4:	f1a2 0a02 	sub.w	sl, r2, #2
 8006ef8:	ab52      	add	r3, sp, #328	; 0x148
 8006efa:	eba3 030a 	sub.w	r3, r3, sl
 8006efe:	9f07      	ldr	r7, [sp, #28]
 8006f00:	9307      	str	r3, [sp, #28]
 8006f02:	2300      	movs	r3, #0
 8006f04:	461e      	mov	r6, r3
 8006f06:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f0a:	9308      	str	r3, [sp, #32]
 8006f0c:	461d      	mov	r5, r3
 8006f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f10:	f7ff b946 	b.w	80061a0 <_svfprintf_r+0x62c>
 8006f14:	0801fe5c 	.word	0x0801fe5c
 8006f18:	0801fe4c 	.word	0x0801fe4c

08006f1c <register_fini>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <register_fini+0xc>)
 8006f1e:	b113      	cbz	r3, 8006f26 <register_fini+0xa>
 8006f20:	4802      	ldr	r0, [pc, #8]	; (8006f2c <register_fini+0x10>)
 8006f22:	f000 b805 	b.w	8006f30 <atexit>
 8006f26:	4770      	bx	lr
 8006f28:	00000000 	.word	0x00000000
 8006f2c:	08007bc1 	.word	0x08007bc1

08006f30 <atexit>:
 8006f30:	2300      	movs	r3, #0
 8006f32:	4601      	mov	r1, r0
 8006f34:	461a      	mov	r2, r3
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 bdea 	b.w	8008b10 <__register_exitproc>

08006f3c <quorem>:
 8006f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f40:	6903      	ldr	r3, [r0, #16]
 8006f42:	690c      	ldr	r4, [r1, #16]
 8006f44:	4607      	mov	r7, r0
 8006f46:	42a3      	cmp	r3, r4
 8006f48:	f2c0 8082 	blt.w	8007050 <quorem+0x114>
 8006f4c:	3c01      	subs	r4, #1
 8006f4e:	f100 0514 	add.w	r5, r0, #20
 8006f52:	f101 0814 	add.w	r8, r1, #20
 8006f56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f5a:	9301      	str	r3, [sp, #4]
 8006f5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f64:	3301      	adds	r3, #1
 8006f66:	429a      	cmp	r2, r3
 8006f68:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f74:	d331      	bcc.n	8006fda <quorem+0x9e>
 8006f76:	f04f 0e00 	mov.w	lr, #0
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	46ac      	mov	ip, r5
 8006f7e:	46f2      	mov	sl, lr
 8006f80:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f84:	b293      	uxth	r3, r2
 8006f86:	fb06 e303 	mla	r3, r6, r3, lr
 8006f8a:	0c12      	lsrs	r2, r2, #16
 8006f8c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	fb06 e202 	mla	r2, r6, r2, lr
 8006f96:	ebaa 0303 	sub.w	r3, sl, r3
 8006f9a:	f8dc a000 	ldr.w	sl, [ip]
 8006f9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fa2:	fa1f fa8a 	uxth.w	sl, sl
 8006fa6:	4453      	add	r3, sl
 8006fa8:	f8dc a000 	ldr.w	sl, [ip]
 8006fac:	b292      	uxth	r2, r2
 8006fae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fbc:	4581      	cmp	r9, r0
 8006fbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fc2:	f84c 3b04 	str.w	r3, [ip], #4
 8006fc6:	d2db      	bcs.n	8006f80 <quorem+0x44>
 8006fc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fcc:	b92b      	cbnz	r3, 8006fda <quorem+0x9e>
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	3b04      	subs	r3, #4
 8006fd2:	429d      	cmp	r5, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	d32f      	bcc.n	8007038 <quorem+0xfc>
 8006fd8:	613c      	str	r4, [r7, #16]
 8006fda:	4638      	mov	r0, r7
 8006fdc:	f001 fbb4 	bl	8008748 <__mcmp>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	db25      	blt.n	8007030 <quorem+0xf4>
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f04f 0c00 	mov.w	ip, #0
 8006fea:	3601      	adds	r6, #1
 8006fec:	f858 1b04 	ldr.w	r1, [r8], #4
 8006ff0:	f8d0 e000 	ldr.w	lr, [r0]
 8006ff4:	b28b      	uxth	r3, r1
 8006ff6:	ebac 0303 	sub.w	r3, ip, r3
 8006ffa:	fa1f f28e 	uxth.w	r2, lr
 8006ffe:	4413      	add	r3, r2
 8007000:	0c0a      	lsrs	r2, r1, #16
 8007002:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007006:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800700a:	b29b      	uxth	r3, r3
 800700c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007010:	45c1      	cmp	r9, r8
 8007012:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007016:	f840 3b04 	str.w	r3, [r0], #4
 800701a:	d2e7      	bcs.n	8006fec <quorem+0xb0>
 800701c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007020:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007024:	b922      	cbnz	r2, 8007030 <quorem+0xf4>
 8007026:	3b04      	subs	r3, #4
 8007028:	429d      	cmp	r5, r3
 800702a:	461a      	mov	r2, r3
 800702c:	d30a      	bcc.n	8007044 <quorem+0x108>
 800702e:	613c      	str	r4, [r7, #16]
 8007030:	4630      	mov	r0, r6
 8007032:	b003      	add	sp, #12
 8007034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	3b04      	subs	r3, #4
 800703c:	2a00      	cmp	r2, #0
 800703e:	d1cb      	bne.n	8006fd8 <quorem+0x9c>
 8007040:	3c01      	subs	r4, #1
 8007042:	e7c6      	b.n	8006fd2 <quorem+0x96>
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	3b04      	subs	r3, #4
 8007048:	2a00      	cmp	r2, #0
 800704a:	d1f0      	bne.n	800702e <quorem+0xf2>
 800704c:	3c01      	subs	r4, #1
 800704e:	e7eb      	b.n	8007028 <quorem+0xec>
 8007050:	2000      	movs	r0, #0
 8007052:	e7ee      	b.n	8007032 <quorem+0xf6>
 8007054:	0000      	movs	r0, r0
	...

08007058 <_dtoa_r>:
 8007058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800705e:	b097      	sub	sp, #92	; 0x5c
 8007060:	4681      	mov	r9, r0
 8007062:	4614      	mov	r4, r2
 8007064:	461d      	mov	r5, r3
 8007066:	4692      	mov	sl, r2
 8007068:	469b      	mov	fp, r3
 800706a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800706c:	b149      	cbz	r1, 8007082 <_dtoa_r+0x2a>
 800706e:	2301      	movs	r3, #1
 8007070:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007072:	4093      	lsls	r3, r2
 8007074:	608b      	str	r3, [r1, #8]
 8007076:	604a      	str	r2, [r1, #4]
 8007078:	f001 f95b 	bl	8008332 <_Bfree>
 800707c:	2300      	movs	r3, #0
 800707e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8007082:	1e2b      	subs	r3, r5, #0
 8007084:	bfad      	iteet	ge
 8007086:	2300      	movge	r3, #0
 8007088:	2201      	movlt	r2, #1
 800708a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800708e:	6033      	strge	r3, [r6, #0]
 8007090:	4b9f      	ldr	r3, [pc, #636]	; (8007310 <_dtoa_r+0x2b8>)
 8007092:	bfb8      	it	lt
 8007094:	6032      	strlt	r2, [r6, #0]
 8007096:	ea33 030b 	bics.w	r3, r3, fp
 800709a:	d119      	bne.n	80070d0 <_dtoa_r+0x78>
 800709c:	f242 730f 	movw	r3, #9999	; 0x270f
 80070a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070a8:	4323      	orrs	r3, r4
 80070aa:	f000 8574 	beq.w	8007b96 <_dtoa_r+0xb3e>
 80070ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070b0:	b90b      	cbnz	r3, 80070b6 <_dtoa_r+0x5e>
 80070b2:	4b98      	ldr	r3, [pc, #608]	; (8007314 <_dtoa_r+0x2bc>)
 80070b4:	e020      	b.n	80070f8 <_dtoa_r+0xa0>
 80070b6:	4b97      	ldr	r3, [pc, #604]	; (8007314 <_dtoa_r+0x2bc>)
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	3303      	adds	r3, #3
 80070bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	9804      	ldr	r0, [sp, #16]
 80070c2:	b017      	add	sp, #92	; 0x5c
 80070c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c8:	4b93      	ldr	r3, [pc, #588]	; (8007318 <_dtoa_r+0x2c0>)
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	3308      	adds	r3, #8
 80070ce:	e7f5      	b.n	80070bc <_dtoa_r+0x64>
 80070d0:	2200      	movs	r2, #0
 80070d2:	2300      	movs	r3, #0
 80070d4:	4650      	mov	r0, sl
 80070d6:	4659      	mov	r1, fp
 80070d8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80070dc:	f7f9 fcd0 	bl	8000a80 <__aeabi_dcmpeq>
 80070e0:	4607      	mov	r7, r0
 80070e2:	b158      	cbz	r0, 80070fc <_dtoa_r+0xa4>
 80070e4:	2301      	movs	r3, #1
 80070e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 854f 	beq.w	8007b90 <_dtoa_r+0xb38>
 80070f2:	488a      	ldr	r0, [pc, #552]	; (800731c <_dtoa_r+0x2c4>)
 80070f4:	6018      	str	r0, [r3, #0]
 80070f6:	1e43      	subs	r3, r0, #1
 80070f8:	9304      	str	r3, [sp, #16]
 80070fa:	e7e1      	b.n	80070c0 <_dtoa_r+0x68>
 80070fc:	ab14      	add	r3, sp, #80	; 0x50
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	ab15      	add	r3, sp, #84	; 0x54
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	4648      	mov	r0, r9
 8007106:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800710a:	f001 fbc5 	bl	8008898 <__d2b>
 800710e:	f3cb 560a 	ubfx	r6, fp, #20, #11
 8007112:	9003      	str	r0, [sp, #12]
 8007114:	2e00      	cmp	r6, #0
 8007116:	d07c      	beq.n	8007212 <_dtoa_r+0x1ba>
 8007118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800711c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800711e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8007122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007126:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800712a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800712e:	9713      	str	r7, [sp, #76]	; 0x4c
 8007130:	2200      	movs	r2, #0
 8007132:	4b7b      	ldr	r3, [pc, #492]	; (8007320 <_dtoa_r+0x2c8>)
 8007134:	f7f9 f884 	bl	8000240 <__aeabi_dsub>
 8007138:	a36f      	add	r3, pc, #444	; (adr r3, 80072f8 <_dtoa_r+0x2a0>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 fa37 	bl	80005b0 <__aeabi_dmul>
 8007142:	a36f      	add	r3, pc, #444	; (adr r3, 8007300 <_dtoa_r+0x2a8>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f7f9 f87c 	bl	8000244 <__adddf3>
 800714c:	4604      	mov	r4, r0
 800714e:	4630      	mov	r0, r6
 8007150:	460d      	mov	r5, r1
 8007152:	f7f9 f9c3 	bl	80004dc <__aeabi_i2d>
 8007156:	a36c      	add	r3, pc, #432	; (adr r3, 8007308 <_dtoa_r+0x2b0>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f7f9 fa28 	bl	80005b0 <__aeabi_dmul>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	f7f9 f86c 	bl	8000244 <__adddf3>
 800716c:	4604      	mov	r4, r0
 800716e:	460d      	mov	r5, r1
 8007170:	f7f9 fcce 	bl	8000b10 <__aeabi_d2iz>
 8007174:	2200      	movs	r2, #0
 8007176:	4680      	mov	r8, r0
 8007178:	2300      	movs	r3, #0
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	f7f9 fc89 	bl	8000a94 <__aeabi_dcmplt>
 8007182:	b148      	cbz	r0, 8007198 <_dtoa_r+0x140>
 8007184:	4640      	mov	r0, r8
 8007186:	f7f9 f9a9 	bl	80004dc <__aeabi_i2d>
 800718a:	4622      	mov	r2, r4
 800718c:	462b      	mov	r3, r5
 800718e:	f7f9 fc77 	bl	8000a80 <__aeabi_dcmpeq>
 8007192:	b908      	cbnz	r0, 8007198 <_dtoa_r+0x140>
 8007194:	f108 38ff 	add.w	r8, r8, #4294967295
 8007198:	f1b8 0f16 	cmp.w	r8, #22
 800719c:	d856      	bhi.n	800724c <_dtoa_r+0x1f4>
 800719e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071a2:	4b60      	ldr	r3, [pc, #384]	; (8007324 <_dtoa_r+0x2cc>)
 80071a4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f7f9 fc72 	bl	8000a94 <__aeabi_dcmplt>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d04d      	beq.n	8007250 <_dtoa_r+0x1f8>
 80071b4:	2300      	movs	r3, #0
 80071b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80071ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80071bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071be:	1b9e      	subs	r6, r3, r6
 80071c0:	1e73      	subs	r3, r6, #1
 80071c2:	9309      	str	r3, [sp, #36]	; 0x24
 80071c4:	bf49      	itett	mi
 80071c6:	f1c6 0301 	rsbmi	r3, r6, #1
 80071ca:	2300      	movpl	r3, #0
 80071cc:	9306      	strmi	r3, [sp, #24]
 80071ce:	2300      	movmi	r3, #0
 80071d0:	bf54      	ite	pl
 80071d2:	9306      	strpl	r3, [sp, #24]
 80071d4:	9309      	strmi	r3, [sp, #36]	; 0x24
 80071d6:	f1b8 0f00 	cmp.w	r8, #0
 80071da:	db3b      	blt.n	8007254 <_dtoa_r+0x1fc>
 80071dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071de:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80071e2:	4443      	add	r3, r8
 80071e4:	9309      	str	r3, [sp, #36]	; 0x24
 80071e6:	2300      	movs	r3, #0
 80071e8:	930a      	str	r3, [sp, #40]	; 0x28
 80071ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071ec:	2b09      	cmp	r3, #9
 80071ee:	d86b      	bhi.n	80072c8 <_dtoa_r+0x270>
 80071f0:	2b05      	cmp	r3, #5
 80071f2:	bfc4      	itt	gt
 80071f4:	3b04      	subgt	r3, #4
 80071f6:	9320      	strgt	r3, [sp, #128]	; 0x80
 80071f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071fa:	bfc8      	it	gt
 80071fc:	2400      	movgt	r4, #0
 80071fe:	f1a3 0302 	sub.w	r3, r3, #2
 8007202:	bfd8      	it	le
 8007204:	2401      	movle	r4, #1
 8007206:	2b03      	cmp	r3, #3
 8007208:	d869      	bhi.n	80072de <_dtoa_r+0x286>
 800720a:	e8df f003 	tbb	[pc, r3]
 800720e:	3a2d      	.short	0x3a2d
 8007210:	5b38      	.short	0x5b38
 8007212:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 8007216:	441e      	add	r6, r3
 8007218:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800721c:	2b20      	cmp	r3, #32
 800721e:	bfc3      	ittte	gt
 8007220:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007224:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
 8007228:	fa0b f303 	lslgt.w	r3, fp, r3
 800722c:	f1c3 0320 	rsble	r3, r3, #32
 8007230:	bfc6      	itte	gt
 8007232:	fa24 f000 	lsrgt.w	r0, r4, r0
 8007236:	4318      	orrgt	r0, r3
 8007238:	fa04 f003 	lslle.w	r0, r4, r3
 800723c:	f7f9 f93e 	bl	80004bc <__aeabi_ui2d>
 8007240:	2301      	movs	r3, #1
 8007242:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007246:	3e01      	subs	r6, #1
 8007248:	9313      	str	r3, [sp, #76]	; 0x4c
 800724a:	e771      	b.n	8007130 <_dtoa_r+0xd8>
 800724c:	2301      	movs	r3, #1
 800724e:	e7b4      	b.n	80071ba <_dtoa_r+0x162>
 8007250:	900f      	str	r0, [sp, #60]	; 0x3c
 8007252:	e7b3      	b.n	80071bc <_dtoa_r+0x164>
 8007254:	9b06      	ldr	r3, [sp, #24]
 8007256:	eba3 0308 	sub.w	r3, r3, r8
 800725a:	9306      	str	r3, [sp, #24]
 800725c:	f1c8 0300 	rsb	r3, r8, #0
 8007260:	930a      	str	r3, [sp, #40]	; 0x28
 8007262:	2300      	movs	r3, #0
 8007264:	930e      	str	r3, [sp, #56]	; 0x38
 8007266:	e7c0      	b.n	80071ea <_dtoa_r+0x192>
 8007268:	2300      	movs	r3, #0
 800726a:	930b      	str	r3, [sp, #44]	; 0x2c
 800726c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800726e:	2b00      	cmp	r3, #0
 8007270:	dc38      	bgt.n	80072e4 <_dtoa_r+0x28c>
 8007272:	2301      	movs	r3, #1
 8007274:	461a      	mov	r2, r3
 8007276:	9308      	str	r3, [sp, #32]
 8007278:	9305      	str	r3, [sp, #20]
 800727a:	9221      	str	r2, [sp, #132]	; 0x84
 800727c:	e00b      	b.n	8007296 <_dtoa_r+0x23e>
 800727e:	2301      	movs	r3, #1
 8007280:	e7f3      	b.n	800726a <_dtoa_r+0x212>
 8007282:	2300      	movs	r3, #0
 8007284:	930b      	str	r3, [sp, #44]	; 0x2c
 8007286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007288:	4443      	add	r3, r8
 800728a:	9308      	str	r3, [sp, #32]
 800728c:	3301      	adds	r3, #1
 800728e:	2b01      	cmp	r3, #1
 8007290:	9305      	str	r3, [sp, #20]
 8007292:	bfb8      	it	lt
 8007294:	2301      	movlt	r3, #1
 8007296:	2200      	movs	r2, #0
 8007298:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 800729c:	2204      	movs	r2, #4
 800729e:	f102 0014 	add.w	r0, r2, #20
 80072a2:	4298      	cmp	r0, r3
 80072a4:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 80072a8:	d920      	bls.n	80072ec <_dtoa_r+0x294>
 80072aa:	4648      	mov	r0, r9
 80072ac:	f001 f81c 	bl	80082e8 <_Balloc>
 80072b0:	9004      	str	r0, [sp, #16]
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d13c      	bne.n	8007330 <_dtoa_r+0x2d8>
 80072b6:	4602      	mov	r2, r0
 80072b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072bc:	4b1a      	ldr	r3, [pc, #104]	; (8007328 <_dtoa_r+0x2d0>)
 80072be:	481b      	ldr	r0, [pc, #108]	; (800732c <_dtoa_r+0x2d4>)
 80072c0:	f001 fc68 	bl	8008b94 <__assert_func>
 80072c4:	2301      	movs	r3, #1
 80072c6:	e7dd      	b.n	8007284 <_dtoa_r+0x22c>
 80072c8:	2401      	movs	r4, #1
 80072ca:	2300      	movs	r3, #0
 80072cc:	940b      	str	r4, [sp, #44]	; 0x2c
 80072ce:	9320      	str	r3, [sp, #128]	; 0x80
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295
 80072d4:	2200      	movs	r2, #0
 80072d6:	9308      	str	r3, [sp, #32]
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	2312      	movs	r3, #18
 80072dc:	e7cd      	b.n	800727a <_dtoa_r+0x222>
 80072de:	2301      	movs	r3, #1
 80072e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072e2:	e7f5      	b.n	80072d0 <_dtoa_r+0x278>
 80072e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e6:	9308      	str	r3, [sp, #32]
 80072e8:	9305      	str	r3, [sp, #20]
 80072ea:	e7d4      	b.n	8007296 <_dtoa_r+0x23e>
 80072ec:	3101      	adds	r1, #1
 80072ee:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80072f2:	0052      	lsls	r2, r2, #1
 80072f4:	e7d3      	b.n	800729e <_dtoa_r+0x246>
 80072f6:	bf00      	nop
 80072f8:	636f4361 	.word	0x636f4361
 80072fc:	3fd287a7 	.word	0x3fd287a7
 8007300:	8b60c8b3 	.word	0x8b60c8b3
 8007304:	3fc68a28 	.word	0x3fc68a28
 8007308:	509f79fb 	.word	0x509f79fb
 800730c:	3fd34413 	.word	0x3fd34413
 8007310:	7ff00000 	.word	0x7ff00000
 8007314:	0801fe6c 	.word	0x0801fe6c
 8007318:	0801fe70 	.word	0x0801fe70
 800731c:	0801fe4b 	.word	0x0801fe4b
 8007320:	3ff80000 	.word	0x3ff80000
 8007324:	0801ff70 	.word	0x0801ff70
 8007328:	0801fe79 	.word	0x0801fe79
 800732c:	0801fe8a 	.word	0x0801fe8a
 8007330:	9b04      	ldr	r3, [sp, #16]
 8007332:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8007336:	9b05      	ldr	r3, [sp, #20]
 8007338:	2b0e      	cmp	r3, #14
 800733a:	f200 80a1 	bhi.w	8007480 <_dtoa_r+0x428>
 800733e:	2c00      	cmp	r4, #0
 8007340:	f000 809e 	beq.w	8007480 <_dtoa_r+0x428>
 8007344:	f1b8 0f00 	cmp.w	r8, #0
 8007348:	dd34      	ble.n	80073b4 <_dtoa_r+0x35c>
 800734a:	4a96      	ldr	r2, [pc, #600]	; (80075a4 <_dtoa_r+0x54c>)
 800734c:	f008 030f 	and.w	r3, r8, #15
 8007350:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007354:	f418 7f80 	tst.w	r8, #256	; 0x100
 8007358:	e9d3 3400 	ldrd	r3, r4, [r3]
 800735c:	ea4f 1528 	mov.w	r5, r8, asr #4
 8007360:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007364:	d016      	beq.n	8007394 <_dtoa_r+0x33c>
 8007366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800736a:	4b8f      	ldr	r3, [pc, #572]	; (80075a8 <_dtoa_r+0x550>)
 800736c:	2603      	movs	r6, #3
 800736e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007372:	f7f9 fa47 	bl	8000804 <__aeabi_ddiv>
 8007376:	4682      	mov	sl, r0
 8007378:	468b      	mov	fp, r1
 800737a:	f005 050f 	and.w	r5, r5, #15
 800737e:	4c8a      	ldr	r4, [pc, #552]	; (80075a8 <_dtoa_r+0x550>)
 8007380:	b955      	cbnz	r5, 8007398 <_dtoa_r+0x340>
 8007382:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007386:	4650      	mov	r0, sl
 8007388:	4659      	mov	r1, fp
 800738a:	f7f9 fa3b 	bl	8000804 <__aeabi_ddiv>
 800738e:	4682      	mov	sl, r0
 8007390:	468b      	mov	fp, r1
 8007392:	e028      	b.n	80073e6 <_dtoa_r+0x38e>
 8007394:	2602      	movs	r6, #2
 8007396:	e7f2      	b.n	800737e <_dtoa_r+0x326>
 8007398:	07e9      	lsls	r1, r5, #31
 800739a:	d508      	bpl.n	80073ae <_dtoa_r+0x356>
 800739c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073a0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80073a4:	f7f9 f904 	bl	80005b0 <__aeabi_dmul>
 80073a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073ac:	3601      	adds	r6, #1
 80073ae:	106d      	asrs	r5, r5, #1
 80073b0:	3408      	adds	r4, #8
 80073b2:	e7e5      	b.n	8007380 <_dtoa_r+0x328>
 80073b4:	f000 809e 	beq.w	80074f4 <_dtoa_r+0x49c>
 80073b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073bc:	f1c8 0400 	rsb	r4, r8, #0
 80073c0:	4b78      	ldr	r3, [pc, #480]	; (80075a4 <_dtoa_r+0x54c>)
 80073c2:	f004 020f 	and.w	r2, r4, #15
 80073c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f9 f8ef 	bl	80005b0 <__aeabi_dmul>
 80073d2:	2602      	movs	r6, #2
 80073d4:	4682      	mov	sl, r0
 80073d6:	468b      	mov	fp, r1
 80073d8:	2300      	movs	r3, #0
 80073da:	4d73      	ldr	r5, [pc, #460]	; (80075a8 <_dtoa_r+0x550>)
 80073dc:	1124      	asrs	r4, r4, #4
 80073de:	2c00      	cmp	r4, #0
 80073e0:	d17d      	bne.n	80074de <_dtoa_r+0x486>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1d3      	bne.n	800738e <_dtoa_r+0x336>
 80073e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8085 	beq.w	80074f8 <_dtoa_r+0x4a0>
 80073ee:	2200      	movs	r2, #0
 80073f0:	4650      	mov	r0, sl
 80073f2:	4659      	mov	r1, fp
 80073f4:	4b6d      	ldr	r3, [pc, #436]	; (80075ac <_dtoa_r+0x554>)
 80073f6:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80073fa:	f7f9 fb4b 	bl	8000a94 <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d07a      	beq.n	80074f8 <_dtoa_r+0x4a0>
 8007402:	9b05      	ldr	r3, [sp, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d077      	beq.n	80074f8 <_dtoa_r+0x4a0>
 8007408:	9b08      	ldr	r3, [sp, #32]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd36      	ble.n	800747c <_dtoa_r+0x424>
 800740e:	4650      	mov	r0, sl
 8007410:	4659      	mov	r1, fp
 8007412:	2200      	movs	r2, #0
 8007414:	4b66      	ldr	r3, [pc, #408]	; (80075b0 <_dtoa_r+0x558>)
 8007416:	f7f9 f8cb 	bl	80005b0 <__aeabi_dmul>
 800741a:	4682      	mov	sl, r0
 800741c:	468b      	mov	fp, r1
 800741e:	9c08      	ldr	r4, [sp, #32]
 8007420:	f108 35ff 	add.w	r5, r8, #4294967295
 8007424:	3601      	adds	r6, #1
 8007426:	4630      	mov	r0, r6
 8007428:	f7f9 f858 	bl	80004dc <__aeabi_i2d>
 800742c:	4652      	mov	r2, sl
 800742e:	465b      	mov	r3, fp
 8007430:	f7f9 f8be 	bl	80005b0 <__aeabi_dmul>
 8007434:	2200      	movs	r2, #0
 8007436:	4b5f      	ldr	r3, [pc, #380]	; (80075b4 <_dtoa_r+0x55c>)
 8007438:	f7f8 ff04 	bl	8000244 <__adddf3>
 800743c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007440:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007444:	9611      	str	r6, [sp, #68]	; 0x44
 8007446:	2c00      	cmp	r4, #0
 8007448:	d159      	bne.n	80074fe <_dtoa_r+0x4a6>
 800744a:	2200      	movs	r2, #0
 800744c:	4650      	mov	r0, sl
 800744e:	4659      	mov	r1, fp
 8007450:	4b59      	ldr	r3, [pc, #356]	; (80075b8 <_dtoa_r+0x560>)
 8007452:	f7f8 fef5 	bl	8000240 <__aeabi_dsub>
 8007456:	4633      	mov	r3, r6
 8007458:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800745a:	4682      	mov	sl, r0
 800745c:	468b      	mov	fp, r1
 800745e:	f7f9 fb37 	bl	8000ad0 <__aeabi_dcmpgt>
 8007462:	2800      	cmp	r0, #0
 8007464:	f040 828b 	bne.w	800797e <_dtoa_r+0x926>
 8007468:	4650      	mov	r0, sl
 800746a:	4659      	mov	r1, fp
 800746c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800746e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007472:	f7f9 fb0f 	bl	8000a94 <__aeabi_dcmplt>
 8007476:	2800      	cmp	r0, #0
 8007478:	f040 827f 	bne.w	800797a <_dtoa_r+0x922>
 800747c:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 8007480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007482:	2b00      	cmp	r3, #0
 8007484:	f2c0 814d 	blt.w	8007722 <_dtoa_r+0x6ca>
 8007488:	f1b8 0f0e 	cmp.w	r8, #14
 800748c:	f300 8149 	bgt.w	8007722 <_dtoa_r+0x6ca>
 8007490:	4b44      	ldr	r3, [pc, #272]	; (80075a4 <_dtoa_r+0x54c>)
 8007492:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007496:	e9d3 3400 	ldrd	r3, r4, [r3]
 800749a:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800749e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f280 80d6 	bge.w	8007652 <_dtoa_r+0x5fa>
 80074a6:	9b05      	ldr	r3, [sp, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f300 80d2 	bgt.w	8007652 <_dtoa_r+0x5fa>
 80074ae:	f040 8263 	bne.w	8007978 <_dtoa_r+0x920>
 80074b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074b6:	2200      	movs	r2, #0
 80074b8:	4b3f      	ldr	r3, [pc, #252]	; (80075b8 <_dtoa_r+0x560>)
 80074ba:	f7f9 f879 	bl	80005b0 <__aeabi_dmul>
 80074be:	4652      	mov	r2, sl
 80074c0:	465b      	mov	r3, fp
 80074c2:	f7f9 fafb 	bl	8000abc <__aeabi_dcmpge>
 80074c6:	9c05      	ldr	r4, [sp, #20]
 80074c8:	4625      	mov	r5, r4
 80074ca:	2800      	cmp	r0, #0
 80074cc:	f040 823c 	bne.w	8007948 <_dtoa_r+0x8f0>
 80074d0:	2331      	movs	r3, #49	; 0x31
 80074d2:	9e04      	ldr	r6, [sp, #16]
 80074d4:	f108 0801 	add.w	r8, r8, #1
 80074d8:	f806 3b01 	strb.w	r3, [r6], #1
 80074dc:	e238      	b.n	8007950 <_dtoa_r+0x8f8>
 80074de:	07e2      	lsls	r2, r4, #31
 80074e0:	d505      	bpl.n	80074ee <_dtoa_r+0x496>
 80074e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074e6:	f7f9 f863 	bl	80005b0 <__aeabi_dmul>
 80074ea:	2301      	movs	r3, #1
 80074ec:	3601      	adds	r6, #1
 80074ee:	1064      	asrs	r4, r4, #1
 80074f0:	3508      	adds	r5, #8
 80074f2:	e774      	b.n	80073de <_dtoa_r+0x386>
 80074f4:	2602      	movs	r6, #2
 80074f6:	e776      	b.n	80073e6 <_dtoa_r+0x38e>
 80074f8:	4645      	mov	r5, r8
 80074fa:	9c05      	ldr	r4, [sp, #20]
 80074fc:	e793      	b.n	8007426 <_dtoa_r+0x3ce>
 80074fe:	9904      	ldr	r1, [sp, #16]
 8007500:	4b28      	ldr	r3, [pc, #160]	; (80075a4 <_dtoa_r+0x54c>)
 8007502:	4421      	add	r1, r4
 8007504:	9112      	str	r1, [sp, #72]	; 0x48
 8007506:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007508:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800750c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007510:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007514:	2900      	cmp	r1, #0
 8007516:	d053      	beq.n	80075c0 <_dtoa_r+0x568>
 8007518:	2000      	movs	r0, #0
 800751a:	4928      	ldr	r1, [pc, #160]	; (80075bc <_dtoa_r+0x564>)
 800751c:	f7f9 f972 	bl	8000804 <__aeabi_ddiv>
 8007520:	4632      	mov	r2, r6
 8007522:	463b      	mov	r3, r7
 8007524:	f7f8 fe8c 	bl	8000240 <__aeabi_dsub>
 8007528:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800752c:	9e04      	ldr	r6, [sp, #16]
 800752e:	4659      	mov	r1, fp
 8007530:	4650      	mov	r0, sl
 8007532:	f7f9 faed 	bl	8000b10 <__aeabi_d2iz>
 8007536:	4604      	mov	r4, r0
 8007538:	f7f8 ffd0 	bl	80004dc <__aeabi_i2d>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4650      	mov	r0, sl
 8007542:	4659      	mov	r1, fp
 8007544:	f7f8 fe7c 	bl	8000240 <__aeabi_dsub>
 8007548:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800754c:	3430      	adds	r4, #48	; 0x30
 800754e:	f806 4b01 	strb.w	r4, [r6], #1
 8007552:	4682      	mov	sl, r0
 8007554:	468b      	mov	fp, r1
 8007556:	f7f9 fa9d 	bl	8000a94 <__aeabi_dcmplt>
 800755a:	2800      	cmp	r0, #0
 800755c:	d171      	bne.n	8007642 <_dtoa_r+0x5ea>
 800755e:	4652      	mov	r2, sl
 8007560:	465b      	mov	r3, fp
 8007562:	2000      	movs	r0, #0
 8007564:	4911      	ldr	r1, [pc, #68]	; (80075ac <_dtoa_r+0x554>)
 8007566:	f7f8 fe6b 	bl	8000240 <__aeabi_dsub>
 800756a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800756e:	f7f9 fa91 	bl	8000a94 <__aeabi_dcmplt>
 8007572:	2800      	cmp	r0, #0
 8007574:	f040 80b7 	bne.w	80076e6 <_dtoa_r+0x68e>
 8007578:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800757a:	429e      	cmp	r6, r3
 800757c:	f43f af7e 	beq.w	800747c <_dtoa_r+0x424>
 8007580:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007584:	2200      	movs	r2, #0
 8007586:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <_dtoa_r+0x558>)
 8007588:	f7f9 f812 	bl	80005b0 <__aeabi_dmul>
 800758c:	2200      	movs	r2, #0
 800758e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007592:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <_dtoa_r+0x558>)
 8007594:	4650      	mov	r0, sl
 8007596:	4659      	mov	r1, fp
 8007598:	f7f9 f80a 	bl	80005b0 <__aeabi_dmul>
 800759c:	4682      	mov	sl, r0
 800759e:	468b      	mov	fp, r1
 80075a0:	e7c5      	b.n	800752e <_dtoa_r+0x4d6>
 80075a2:	bf00      	nop
 80075a4:	0801ff70 	.word	0x0801ff70
 80075a8:	0801ff48 	.word	0x0801ff48
 80075ac:	3ff00000 	.word	0x3ff00000
 80075b0:	40240000 	.word	0x40240000
 80075b4:	401c0000 	.word	0x401c0000
 80075b8:	40140000 	.word	0x40140000
 80075bc:	3fe00000 	.word	0x3fe00000
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f8 fff4 	bl	80005b0 <__aeabi_dmul>
 80075c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075cc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80075ce:	9e04      	ldr	r6, [sp, #16]
 80075d0:	4659      	mov	r1, fp
 80075d2:	4650      	mov	r0, sl
 80075d4:	f7f9 fa9c 	bl	8000b10 <__aeabi_d2iz>
 80075d8:	4604      	mov	r4, r0
 80075da:	f7f8 ff7f 	bl	80004dc <__aeabi_i2d>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4650      	mov	r0, sl
 80075e4:	4659      	mov	r1, fp
 80075e6:	f7f8 fe2b 	bl	8000240 <__aeabi_dsub>
 80075ea:	3430      	adds	r4, #48	; 0x30
 80075ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075ee:	f806 4b01 	strb.w	r4, [r6], #1
 80075f2:	429e      	cmp	r6, r3
 80075f4:	4682      	mov	sl, r0
 80075f6:	468b      	mov	fp, r1
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	d123      	bne.n	8007646 <_dtoa_r+0x5ee>
 80075fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007602:	4baf      	ldr	r3, [pc, #700]	; (80078c0 <_dtoa_r+0x868>)
 8007604:	f7f8 fe1e 	bl	8000244 <__adddf3>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4650      	mov	r0, sl
 800760e:	4659      	mov	r1, fp
 8007610:	f7f9 fa5e 	bl	8000ad0 <__aeabi_dcmpgt>
 8007614:	2800      	cmp	r0, #0
 8007616:	d166      	bne.n	80076e6 <_dtoa_r+0x68e>
 8007618:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800761c:	2000      	movs	r0, #0
 800761e:	49a8      	ldr	r1, [pc, #672]	; (80078c0 <_dtoa_r+0x868>)
 8007620:	f7f8 fe0e 	bl	8000240 <__aeabi_dsub>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4650      	mov	r0, sl
 800762a:	4659      	mov	r1, fp
 800762c:	f7f9 fa32 	bl	8000a94 <__aeabi_dcmplt>
 8007630:	2800      	cmp	r0, #0
 8007632:	f43f af23 	beq.w	800747c <_dtoa_r+0x424>
 8007636:	463e      	mov	r6, r7
 8007638:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800763c:	3f01      	subs	r7, #1
 800763e:	2b30      	cmp	r3, #48	; 0x30
 8007640:	d0f9      	beq.n	8007636 <_dtoa_r+0x5de>
 8007642:	46a8      	mov	r8, r5
 8007644:	e03e      	b.n	80076c4 <_dtoa_r+0x66c>
 8007646:	4b9f      	ldr	r3, [pc, #636]	; (80078c4 <_dtoa_r+0x86c>)
 8007648:	f7f8 ffb2 	bl	80005b0 <__aeabi_dmul>
 800764c:	4682      	mov	sl, r0
 800764e:	468b      	mov	fp, r1
 8007650:	e7be      	b.n	80075d0 <_dtoa_r+0x578>
 8007652:	4654      	mov	r4, sl
 8007654:	f04f 0a00 	mov.w	sl, #0
 8007658:	465d      	mov	r5, fp
 800765a:	9e04      	ldr	r6, [sp, #16]
 800765c:	f8df b264 	ldr.w	fp, [pc, #612]	; 80078c4 <_dtoa_r+0x86c>
 8007660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007664:	4620      	mov	r0, r4
 8007666:	4629      	mov	r1, r5
 8007668:	f7f9 f8cc 	bl	8000804 <__aeabi_ddiv>
 800766c:	f7f9 fa50 	bl	8000b10 <__aeabi_d2iz>
 8007670:	4607      	mov	r7, r0
 8007672:	f7f8 ff33 	bl	80004dc <__aeabi_i2d>
 8007676:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800767a:	f7f8 ff99 	bl	80005b0 <__aeabi_dmul>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4620      	mov	r0, r4
 8007684:	4629      	mov	r1, r5
 8007686:	f7f8 fddb 	bl	8000240 <__aeabi_dsub>
 800768a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800768e:	f806 4b01 	strb.w	r4, [r6], #1
 8007692:	9c04      	ldr	r4, [sp, #16]
 8007694:	9d05      	ldr	r5, [sp, #20]
 8007696:	1b34      	subs	r4, r6, r4
 8007698:	42a5      	cmp	r5, r4
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	d133      	bne.n	8007708 <_dtoa_r+0x6b0>
 80076a0:	f7f8 fdd0 	bl	8000244 <__adddf3>
 80076a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076a8:	4604      	mov	r4, r0
 80076aa:	460d      	mov	r5, r1
 80076ac:	f7f9 fa10 	bl	8000ad0 <__aeabi_dcmpgt>
 80076b0:	b9c0      	cbnz	r0, 80076e4 <_dtoa_r+0x68c>
 80076b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7f9 f9e1 	bl	8000a80 <__aeabi_dcmpeq>
 80076be:	b108      	cbz	r0, 80076c4 <_dtoa_r+0x66c>
 80076c0:	07fb      	lsls	r3, r7, #31
 80076c2:	d40f      	bmi.n	80076e4 <_dtoa_r+0x68c>
 80076c4:	4648      	mov	r0, r9
 80076c6:	9903      	ldr	r1, [sp, #12]
 80076c8:	f000 fe33 	bl	8008332 <_Bfree>
 80076cc:	2300      	movs	r3, #0
 80076ce:	7033      	strb	r3, [r6, #0]
 80076d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076d2:	f108 0001 	add.w	r0, r8, #1
 80076d6:	6018      	str	r0, [r3, #0]
 80076d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f43f acf0 	beq.w	80070c0 <_dtoa_r+0x68>
 80076e0:	601e      	str	r6, [r3, #0]
 80076e2:	e4ed      	b.n	80070c0 <_dtoa_r+0x68>
 80076e4:	4645      	mov	r5, r8
 80076e6:	4633      	mov	r3, r6
 80076e8:	461e      	mov	r6, r3
 80076ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ee:	2a39      	cmp	r2, #57	; 0x39
 80076f0:	d106      	bne.n	8007700 <_dtoa_r+0x6a8>
 80076f2:	9a04      	ldr	r2, [sp, #16]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d1f7      	bne.n	80076e8 <_dtoa_r+0x690>
 80076f8:	2230      	movs	r2, #48	; 0x30
 80076fa:	9904      	ldr	r1, [sp, #16]
 80076fc:	3501      	adds	r5, #1
 80076fe:	700a      	strb	r2, [r1, #0]
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	3201      	adds	r2, #1
 8007704:	701a      	strb	r2, [r3, #0]
 8007706:	e79c      	b.n	8007642 <_dtoa_r+0x5ea>
 8007708:	4652      	mov	r2, sl
 800770a:	465b      	mov	r3, fp
 800770c:	f7f8 ff50 	bl	80005b0 <__aeabi_dmul>
 8007710:	2200      	movs	r2, #0
 8007712:	2300      	movs	r3, #0
 8007714:	4604      	mov	r4, r0
 8007716:	460d      	mov	r5, r1
 8007718:	f7f9 f9b2 	bl	8000a80 <__aeabi_dcmpeq>
 800771c:	2800      	cmp	r0, #0
 800771e:	d09f      	beq.n	8007660 <_dtoa_r+0x608>
 8007720:	e7d0      	b.n	80076c4 <_dtoa_r+0x66c>
 8007722:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007724:	2a00      	cmp	r2, #0
 8007726:	f000 80cf 	beq.w	80078c8 <_dtoa_r+0x870>
 800772a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800772c:	2a01      	cmp	r2, #1
 800772e:	f300 80ad 	bgt.w	800788c <_dtoa_r+0x834>
 8007732:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007734:	2a00      	cmp	r2, #0
 8007736:	f000 80a5 	beq.w	8007884 <_dtoa_r+0x82c>
 800773a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800773e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007740:	9e06      	ldr	r6, [sp, #24]
 8007742:	9a06      	ldr	r2, [sp, #24]
 8007744:	2101      	movs	r1, #1
 8007746:	441a      	add	r2, r3
 8007748:	9206      	str	r2, [sp, #24]
 800774a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800774c:	4648      	mov	r0, r9
 800774e:	441a      	add	r2, r3
 8007750:	9209      	str	r2, [sp, #36]	; 0x24
 8007752:	f000 fe8b 	bl	800846c <__i2b>
 8007756:	4605      	mov	r5, r0
 8007758:	2e00      	cmp	r6, #0
 800775a:	dd0c      	ble.n	8007776 <_dtoa_r+0x71e>
 800775c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775e:	2b00      	cmp	r3, #0
 8007760:	dd09      	ble.n	8007776 <_dtoa_r+0x71e>
 8007762:	42b3      	cmp	r3, r6
 8007764:	bfa8      	it	ge
 8007766:	4633      	movge	r3, r6
 8007768:	9a06      	ldr	r2, [sp, #24]
 800776a:	1af6      	subs	r6, r6, r3
 800776c:	1ad2      	subs	r2, r2, r3
 800776e:	9206      	str	r2, [sp, #24]
 8007770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	9309      	str	r3, [sp, #36]	; 0x24
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	b1f3      	cbz	r3, 80077b8 <_dtoa_r+0x760>
 800777a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80a7 	beq.w	80078d0 <_dtoa_r+0x878>
 8007782:	2c00      	cmp	r4, #0
 8007784:	dd10      	ble.n	80077a8 <_dtoa_r+0x750>
 8007786:	4629      	mov	r1, r5
 8007788:	4622      	mov	r2, r4
 800778a:	4648      	mov	r0, r9
 800778c:	f000 ff2c 	bl	80085e8 <__pow5mult>
 8007790:	9a03      	ldr	r2, [sp, #12]
 8007792:	4601      	mov	r1, r0
 8007794:	4605      	mov	r5, r0
 8007796:	4648      	mov	r0, r9
 8007798:	f000 fe7e 	bl	8008498 <__multiply>
 800779c:	4607      	mov	r7, r0
 800779e:	9903      	ldr	r1, [sp, #12]
 80077a0:	4648      	mov	r0, r9
 80077a2:	f000 fdc6 	bl	8008332 <_Bfree>
 80077a6:	9703      	str	r7, [sp, #12]
 80077a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077aa:	1b1a      	subs	r2, r3, r4
 80077ac:	d004      	beq.n	80077b8 <_dtoa_r+0x760>
 80077ae:	4648      	mov	r0, r9
 80077b0:	9903      	ldr	r1, [sp, #12]
 80077b2:	f000 ff19 	bl	80085e8 <__pow5mult>
 80077b6:	9003      	str	r0, [sp, #12]
 80077b8:	2101      	movs	r1, #1
 80077ba:	4648      	mov	r0, r9
 80077bc:	f000 fe56 	bl	800846c <__i2b>
 80077c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c2:	4604      	mov	r4, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f340 8085 	ble.w	80078d4 <_dtoa_r+0x87c>
 80077ca:	461a      	mov	r2, r3
 80077cc:	4601      	mov	r1, r0
 80077ce:	4648      	mov	r0, r9
 80077d0:	f000 ff0a 	bl	80085e8 <__pow5mult>
 80077d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077d6:	4604      	mov	r4, r0
 80077d8:	2b01      	cmp	r3, #1
 80077da:	dd7e      	ble.n	80078da <_dtoa_r+0x882>
 80077dc:	2700      	movs	r7, #0
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077e4:	6918      	ldr	r0, [r3, #16]
 80077e6:	f000 fdf3 	bl	80083d0 <__hi0bits>
 80077ea:	f1c0 0020 	rsb	r0, r0, #32
 80077ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f0:	4418      	add	r0, r3
 80077f2:	f010 001f 	ands.w	r0, r0, #31
 80077f6:	f000 808e 	beq.w	8007916 <_dtoa_r+0x8be>
 80077fa:	f1c0 0320 	rsb	r3, r0, #32
 80077fe:	2b04      	cmp	r3, #4
 8007800:	f340 8087 	ble.w	8007912 <_dtoa_r+0x8ba>
 8007804:	f1c0 001c 	rsb	r0, r0, #28
 8007808:	9b06      	ldr	r3, [sp, #24]
 800780a:	4406      	add	r6, r0
 800780c:	4403      	add	r3, r0
 800780e:	9306      	str	r3, [sp, #24]
 8007810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007812:	4403      	add	r3, r0
 8007814:	9309      	str	r3, [sp, #36]	; 0x24
 8007816:	9b06      	ldr	r3, [sp, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	dd05      	ble.n	8007828 <_dtoa_r+0x7d0>
 800781c:	461a      	mov	r2, r3
 800781e:	4648      	mov	r0, r9
 8007820:	9903      	ldr	r1, [sp, #12]
 8007822:	f000 ff21 	bl	8008668 <__lshift>
 8007826:	9003      	str	r0, [sp, #12]
 8007828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	dd05      	ble.n	800783a <_dtoa_r+0x7e2>
 800782e:	4621      	mov	r1, r4
 8007830:	461a      	mov	r2, r3
 8007832:	4648      	mov	r0, r9
 8007834:	f000 ff18 	bl	8008668 <__lshift>
 8007838:	4604      	mov	r4, r0
 800783a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d06c      	beq.n	800791a <_dtoa_r+0x8c2>
 8007840:	4621      	mov	r1, r4
 8007842:	9803      	ldr	r0, [sp, #12]
 8007844:	f000 ff80 	bl	8008748 <__mcmp>
 8007848:	2800      	cmp	r0, #0
 800784a:	da66      	bge.n	800791a <_dtoa_r+0x8c2>
 800784c:	2300      	movs	r3, #0
 800784e:	220a      	movs	r2, #10
 8007850:	4648      	mov	r0, r9
 8007852:	9903      	ldr	r1, [sp, #12]
 8007854:	f000 fd76 	bl	8008344 <__multadd>
 8007858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785a:	f108 38ff 	add.w	r8, r8, #4294967295
 800785e:	9003      	str	r0, [sp, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 819f 	beq.w	8007ba4 <_dtoa_r+0xb4c>
 8007866:	2300      	movs	r3, #0
 8007868:	4629      	mov	r1, r5
 800786a:	220a      	movs	r2, #10
 800786c:	4648      	mov	r0, r9
 800786e:	f000 fd69 	bl	8008344 <__multadd>
 8007872:	9b08      	ldr	r3, [sp, #32]
 8007874:	4605      	mov	r5, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	f300 808a 	bgt.w	8007990 <_dtoa_r+0x938>
 800787c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800787e:	2b02      	cmp	r3, #2
 8007880:	dc53      	bgt.n	800792a <_dtoa_r+0x8d2>
 8007882:	e085      	b.n	8007990 <_dtoa_r+0x938>
 8007884:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007886:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800788a:	e758      	b.n	800773e <_dtoa_r+0x6e6>
 800788c:	9b05      	ldr	r3, [sp, #20]
 800788e:	1e5c      	subs	r4, r3, #1
 8007890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007892:	42a3      	cmp	r3, r4
 8007894:	bfb7      	itett	lt
 8007896:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007898:	1b1c      	subge	r4, r3, r4
 800789a:	1ae2      	sublt	r2, r4, r3
 800789c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800789e:	bfbe      	ittt	lt
 80078a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80078a2:	189b      	addlt	r3, r3, r2
 80078a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80078a6:	9b05      	ldr	r3, [sp, #20]
 80078a8:	bfb8      	it	lt
 80078aa:	2400      	movlt	r4, #0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bfb7      	itett	lt
 80078b0:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 80078b4:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 80078b8:	1a9e      	sublt	r6, r3, r2
 80078ba:	2300      	movlt	r3, #0
 80078bc:	e741      	b.n	8007742 <_dtoa_r+0x6ea>
 80078be:	bf00      	nop
 80078c0:	3fe00000 	.word	0x3fe00000
 80078c4:	40240000 	.word	0x40240000
 80078c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078ca:	9e06      	ldr	r6, [sp, #24]
 80078cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80078ce:	e743      	b.n	8007758 <_dtoa_r+0x700>
 80078d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d2:	e76c      	b.n	80077ae <_dtoa_r+0x756>
 80078d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	dc17      	bgt.n	800790a <_dtoa_r+0x8b2>
 80078da:	f1ba 0f00 	cmp.w	sl, #0
 80078de:	d114      	bne.n	800790a <_dtoa_r+0x8b2>
 80078e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078e4:	b99b      	cbnz	r3, 800790e <_dtoa_r+0x8b6>
 80078e6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80078ea:	0d3f      	lsrs	r7, r7, #20
 80078ec:	053f      	lsls	r7, r7, #20
 80078ee:	b137      	cbz	r7, 80078fe <_dtoa_r+0x8a6>
 80078f0:	2701      	movs	r7, #1
 80078f2:	9b06      	ldr	r3, [sp, #24]
 80078f4:	3301      	adds	r3, #1
 80078f6:	9306      	str	r3, [sp, #24]
 80078f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fa:	3301      	adds	r3, #1
 80078fc:	9309      	str	r3, [sp, #36]	; 0x24
 80078fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007900:	2b00      	cmp	r3, #0
 8007902:	f47f af6c 	bne.w	80077de <_dtoa_r+0x786>
 8007906:	2001      	movs	r0, #1
 8007908:	e771      	b.n	80077ee <_dtoa_r+0x796>
 800790a:	2700      	movs	r7, #0
 800790c:	e7f7      	b.n	80078fe <_dtoa_r+0x8a6>
 800790e:	4657      	mov	r7, sl
 8007910:	e7f5      	b.n	80078fe <_dtoa_r+0x8a6>
 8007912:	d080      	beq.n	8007816 <_dtoa_r+0x7be>
 8007914:	4618      	mov	r0, r3
 8007916:	301c      	adds	r0, #28
 8007918:	e776      	b.n	8007808 <_dtoa_r+0x7b0>
 800791a:	9b05      	ldr	r3, [sp, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dc31      	bgt.n	8007984 <_dtoa_r+0x92c>
 8007920:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007922:	2b02      	cmp	r3, #2
 8007924:	dd2e      	ble.n	8007984 <_dtoa_r+0x92c>
 8007926:	9b05      	ldr	r3, [sp, #20]
 8007928:	9308      	str	r3, [sp, #32]
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	b963      	cbnz	r3, 8007948 <_dtoa_r+0x8f0>
 800792e:	4621      	mov	r1, r4
 8007930:	2205      	movs	r2, #5
 8007932:	4648      	mov	r0, r9
 8007934:	f000 fd06 	bl	8008344 <__multadd>
 8007938:	4601      	mov	r1, r0
 800793a:	4604      	mov	r4, r0
 800793c:	9803      	ldr	r0, [sp, #12]
 800793e:	f000 ff03 	bl	8008748 <__mcmp>
 8007942:	2800      	cmp	r0, #0
 8007944:	f73f adc4 	bgt.w	80074d0 <_dtoa_r+0x478>
 8007948:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800794a:	9e04      	ldr	r6, [sp, #16]
 800794c:	ea6f 0803 	mvn.w	r8, r3
 8007950:	2700      	movs	r7, #0
 8007952:	4621      	mov	r1, r4
 8007954:	4648      	mov	r0, r9
 8007956:	f000 fcec 	bl	8008332 <_Bfree>
 800795a:	2d00      	cmp	r5, #0
 800795c:	f43f aeb2 	beq.w	80076c4 <_dtoa_r+0x66c>
 8007960:	b12f      	cbz	r7, 800796e <_dtoa_r+0x916>
 8007962:	42af      	cmp	r7, r5
 8007964:	d003      	beq.n	800796e <_dtoa_r+0x916>
 8007966:	4639      	mov	r1, r7
 8007968:	4648      	mov	r0, r9
 800796a:	f000 fce2 	bl	8008332 <_Bfree>
 800796e:	4629      	mov	r1, r5
 8007970:	4648      	mov	r0, r9
 8007972:	f000 fcde 	bl	8008332 <_Bfree>
 8007976:	e6a5      	b.n	80076c4 <_dtoa_r+0x66c>
 8007978:	2400      	movs	r4, #0
 800797a:	4625      	mov	r5, r4
 800797c:	e7e4      	b.n	8007948 <_dtoa_r+0x8f0>
 800797e:	46a8      	mov	r8, r5
 8007980:	4625      	mov	r5, r4
 8007982:	e5a5      	b.n	80074d0 <_dtoa_r+0x478>
 8007984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 80c4 	beq.w	8007b14 <_dtoa_r+0xabc>
 800798c:	9b05      	ldr	r3, [sp, #20]
 800798e:	9308      	str	r3, [sp, #32]
 8007990:	2e00      	cmp	r6, #0
 8007992:	dd05      	ble.n	80079a0 <_dtoa_r+0x948>
 8007994:	4629      	mov	r1, r5
 8007996:	4632      	mov	r2, r6
 8007998:	4648      	mov	r0, r9
 800799a:	f000 fe65 	bl	8008668 <__lshift>
 800799e:	4605      	mov	r5, r0
 80079a0:	2f00      	cmp	r7, #0
 80079a2:	d058      	beq.n	8007a56 <_dtoa_r+0x9fe>
 80079a4:	4648      	mov	r0, r9
 80079a6:	6869      	ldr	r1, [r5, #4]
 80079a8:	f000 fc9e 	bl	80082e8 <_Balloc>
 80079ac:	4606      	mov	r6, r0
 80079ae:	b920      	cbnz	r0, 80079ba <_dtoa_r+0x962>
 80079b0:	4602      	mov	r2, r0
 80079b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079b6:	4b7f      	ldr	r3, [pc, #508]	; (8007bb4 <_dtoa_r+0xb5c>)
 80079b8:	e481      	b.n	80072be <_dtoa_r+0x266>
 80079ba:	692a      	ldr	r2, [r5, #16]
 80079bc:	f105 010c 	add.w	r1, r5, #12
 80079c0:	3202      	adds	r2, #2
 80079c2:	0092      	lsls	r2, r2, #2
 80079c4:	300c      	adds	r0, #12
 80079c6:	f000 fc75 	bl	80082b4 <memcpy>
 80079ca:	2201      	movs	r2, #1
 80079cc:	4631      	mov	r1, r6
 80079ce:	4648      	mov	r0, r9
 80079d0:	f000 fe4a 	bl	8008668 <__lshift>
 80079d4:	462f      	mov	r7, r5
 80079d6:	4605      	mov	r5, r0
 80079d8:	9b04      	ldr	r3, [sp, #16]
 80079da:	9a04      	ldr	r2, [sp, #16]
 80079dc:	3301      	adds	r3, #1
 80079de:	9305      	str	r3, [sp, #20]
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	4413      	add	r3, r2
 80079e4:	930a      	str	r3, [sp, #40]	; 0x28
 80079e6:	f00a 0301 	and.w	r3, sl, #1
 80079ea:	9309      	str	r3, [sp, #36]	; 0x24
 80079ec:	9b05      	ldr	r3, [sp, #20]
 80079ee:	4621      	mov	r1, r4
 80079f0:	9803      	ldr	r0, [sp, #12]
 80079f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80079f6:	f7ff faa1 	bl	8006f3c <quorem>
 80079fa:	4639      	mov	r1, r7
 80079fc:	9006      	str	r0, [sp, #24]
 80079fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a02:	9803      	ldr	r0, [sp, #12]
 8007a04:	f000 fea0 	bl	8008748 <__mcmp>
 8007a08:	462a      	mov	r2, r5
 8007a0a:	9008      	str	r0, [sp, #32]
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4648      	mov	r0, r9
 8007a10:	f000 feb6 	bl	8008780 <__mdiff>
 8007a14:	68c2      	ldr	r2, [r0, #12]
 8007a16:	4606      	mov	r6, r0
 8007a18:	b9fa      	cbnz	r2, 8007a5a <_dtoa_r+0xa02>
 8007a1a:	4601      	mov	r1, r0
 8007a1c:	9803      	ldr	r0, [sp, #12]
 8007a1e:	f000 fe93 	bl	8008748 <__mcmp>
 8007a22:	4602      	mov	r2, r0
 8007a24:	4631      	mov	r1, r6
 8007a26:	4648      	mov	r0, r9
 8007a28:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a2a:	f000 fc82 	bl	8008332 <_Bfree>
 8007a2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a32:	9e05      	ldr	r6, [sp, #20]
 8007a34:	ea43 0102 	orr.w	r1, r3, r2
 8007a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	d10f      	bne.n	8007a5e <_dtoa_r+0xa06>
 8007a3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a42:	d028      	beq.n	8007a96 <_dtoa_r+0xa3e>
 8007a44:	9b08      	ldr	r3, [sp, #32]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dd02      	ble.n	8007a50 <_dtoa_r+0x9f8>
 8007a4a:	9b06      	ldr	r3, [sp, #24]
 8007a4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a50:	f88b a000 	strb.w	sl, [fp]
 8007a54:	e77d      	b.n	8007952 <_dtoa_r+0x8fa>
 8007a56:	4628      	mov	r0, r5
 8007a58:	e7bc      	b.n	80079d4 <_dtoa_r+0x97c>
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	e7e2      	b.n	8007a24 <_dtoa_r+0x9cc>
 8007a5e:	9b08      	ldr	r3, [sp, #32]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	db04      	blt.n	8007a6e <_dtoa_r+0xa16>
 8007a64:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007a66:	430b      	orrs	r3, r1
 8007a68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	d120      	bne.n	8007ab0 <_dtoa_r+0xa58>
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	ddee      	ble.n	8007a50 <_dtoa_r+0x9f8>
 8007a72:	2201      	movs	r2, #1
 8007a74:	9903      	ldr	r1, [sp, #12]
 8007a76:	4648      	mov	r0, r9
 8007a78:	f000 fdf6 	bl	8008668 <__lshift>
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	9003      	str	r0, [sp, #12]
 8007a80:	f000 fe62 	bl	8008748 <__mcmp>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	dc03      	bgt.n	8007a90 <_dtoa_r+0xa38>
 8007a88:	d1e2      	bne.n	8007a50 <_dtoa_r+0x9f8>
 8007a8a:	f01a 0f01 	tst.w	sl, #1
 8007a8e:	d0df      	beq.n	8007a50 <_dtoa_r+0x9f8>
 8007a90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a94:	d1d9      	bne.n	8007a4a <_dtoa_r+0x9f2>
 8007a96:	2339      	movs	r3, #57	; 0x39
 8007a98:	f88b 3000 	strb.w	r3, [fp]
 8007a9c:	4633      	mov	r3, r6
 8007a9e:	461e      	mov	r6, r3
 8007aa0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	2a39      	cmp	r2, #57	; 0x39
 8007aa8:	d06a      	beq.n	8007b80 <_dtoa_r+0xb28>
 8007aaa:	3201      	adds	r2, #1
 8007aac:	701a      	strb	r2, [r3, #0]
 8007aae:	e750      	b.n	8007952 <_dtoa_r+0x8fa>
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	dd07      	ble.n	8007ac4 <_dtoa_r+0xa6c>
 8007ab4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ab8:	d0ed      	beq.n	8007a96 <_dtoa_r+0xa3e>
 8007aba:	f10a 0301 	add.w	r3, sl, #1
 8007abe:	f88b 3000 	strb.w	r3, [fp]
 8007ac2:	e746      	b.n	8007952 <_dtoa_r+0x8fa>
 8007ac4:	9b05      	ldr	r3, [sp, #20]
 8007ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ac8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d041      	beq.n	8007b54 <_dtoa_r+0xafc>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	220a      	movs	r2, #10
 8007ad4:	9903      	ldr	r1, [sp, #12]
 8007ad6:	4648      	mov	r0, r9
 8007ad8:	f000 fc34 	bl	8008344 <__multadd>
 8007adc:	42af      	cmp	r7, r5
 8007ade:	9003      	str	r0, [sp, #12]
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	f04f 020a 	mov.w	r2, #10
 8007ae8:	4639      	mov	r1, r7
 8007aea:	4648      	mov	r0, r9
 8007aec:	d107      	bne.n	8007afe <_dtoa_r+0xaa6>
 8007aee:	f000 fc29 	bl	8008344 <__multadd>
 8007af2:	4607      	mov	r7, r0
 8007af4:	4605      	mov	r5, r0
 8007af6:	9b05      	ldr	r3, [sp, #20]
 8007af8:	3301      	adds	r3, #1
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	e776      	b.n	80079ec <_dtoa_r+0x994>
 8007afe:	f000 fc21 	bl	8008344 <__multadd>
 8007b02:	4629      	mov	r1, r5
 8007b04:	4607      	mov	r7, r0
 8007b06:	2300      	movs	r3, #0
 8007b08:	220a      	movs	r2, #10
 8007b0a:	4648      	mov	r0, r9
 8007b0c:	f000 fc1a 	bl	8008344 <__multadd>
 8007b10:	4605      	mov	r5, r0
 8007b12:	e7f0      	b.n	8007af6 <_dtoa_r+0xa9e>
 8007b14:	9b05      	ldr	r3, [sp, #20]
 8007b16:	9308      	str	r3, [sp, #32]
 8007b18:	9e04      	ldr	r6, [sp, #16]
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	9803      	ldr	r0, [sp, #12]
 8007b1e:	f7ff fa0d 	bl	8006f3c <quorem>
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b28:	f806 ab01 	strb.w	sl, [r6], #1
 8007b2c:	1af2      	subs	r2, r6, r3
 8007b2e:	9b08      	ldr	r3, [sp, #32]
 8007b30:	4293      	cmp	r3, r2
 8007b32:	dd07      	ble.n	8007b44 <_dtoa_r+0xaec>
 8007b34:	2300      	movs	r3, #0
 8007b36:	220a      	movs	r2, #10
 8007b38:	4648      	mov	r0, r9
 8007b3a:	9903      	ldr	r1, [sp, #12]
 8007b3c:	f000 fc02 	bl	8008344 <__multadd>
 8007b40:	9003      	str	r0, [sp, #12]
 8007b42:	e7ea      	b.n	8007b1a <_dtoa_r+0xac2>
 8007b44:	9b08      	ldr	r3, [sp, #32]
 8007b46:	2700      	movs	r7, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bfcc      	ite	gt
 8007b4c:	461e      	movgt	r6, r3
 8007b4e:	2601      	movle	r6, #1
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	441e      	add	r6, r3
 8007b54:	2201      	movs	r2, #1
 8007b56:	9903      	ldr	r1, [sp, #12]
 8007b58:	4648      	mov	r0, r9
 8007b5a:	f000 fd85 	bl	8008668 <__lshift>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	9003      	str	r0, [sp, #12]
 8007b62:	f000 fdf1 	bl	8008748 <__mcmp>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	dc98      	bgt.n	8007a9c <_dtoa_r+0xa44>
 8007b6a:	d102      	bne.n	8007b72 <_dtoa_r+0xb1a>
 8007b6c:	f01a 0f01 	tst.w	sl, #1
 8007b70:	d194      	bne.n	8007a9c <_dtoa_r+0xa44>
 8007b72:	4633      	mov	r3, r6
 8007b74:	461e      	mov	r6, r3
 8007b76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b7a:	2a30      	cmp	r2, #48	; 0x30
 8007b7c:	d0fa      	beq.n	8007b74 <_dtoa_r+0xb1c>
 8007b7e:	e6e8      	b.n	8007952 <_dtoa_r+0x8fa>
 8007b80:	9a04      	ldr	r2, [sp, #16]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d18b      	bne.n	8007a9e <_dtoa_r+0xa46>
 8007b86:	2331      	movs	r3, #49	; 0x31
 8007b88:	f108 0801 	add.w	r8, r8, #1
 8007b8c:	7013      	strb	r3, [r2, #0]
 8007b8e:	e6e0      	b.n	8007952 <_dtoa_r+0x8fa>
 8007b90:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <_dtoa_r+0xb60>)
 8007b92:	f7ff bab1 	b.w	80070f8 <_dtoa_r+0xa0>
 8007b96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f47f aa95 	bne.w	80070c8 <_dtoa_r+0x70>
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <_dtoa_r+0xb64>)
 8007ba0:	f7ff baaa 	b.w	80070f8 <_dtoa_r+0xa0>
 8007ba4:	9b08      	ldr	r3, [sp, #32]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dcb6      	bgt.n	8007b18 <_dtoa_r+0xac0>
 8007baa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	f73f aebc 	bgt.w	800792a <_dtoa_r+0x8d2>
 8007bb2:	e7b1      	b.n	8007b18 <_dtoa_r+0xac0>
 8007bb4:	0801fe79 	.word	0x0801fe79
 8007bb8:	0801fe4a 	.word	0x0801fe4a
 8007bbc:	0801fe70 	.word	0x0801fe70

08007bc0 <__libc_fini_array>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4d07      	ldr	r5, [pc, #28]	; (8007be0 <__libc_fini_array+0x20>)
 8007bc4:	4c07      	ldr	r4, [pc, #28]	; (8007be4 <__libc_fini_array+0x24>)
 8007bc6:	1b64      	subs	r4, r4, r5
 8007bc8:	10a4      	asrs	r4, r4, #2
 8007bca:	b91c      	cbnz	r4, 8007bd4 <__libc_fini_array+0x14>
 8007bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bd0:	f002 bc98 	b.w	800a504 <_fini>
 8007bd4:	3c01      	subs	r4, #1
 8007bd6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007bda:	4798      	blx	r3
 8007bdc:	e7f5      	b.n	8007bca <__libc_fini_array+0xa>
 8007bde:	bf00      	nop
 8007be0:	080201bc 	.word	0x080201bc
 8007be4:	080201c0 	.word	0x080201c0

08007be8 <_malloc_trim_r>:
 8007be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bec:	4606      	mov	r6, r0
 8007bee:	2008      	movs	r0, #8
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	f000 ff7f 	bl	8008af4 <sysconf>
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	4f22      	ldr	r7, [pc, #136]	; (8007c84 <_malloc_trim_r+0x9c>)
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f000 fb68 	bl	80082d0 <__malloc_lock>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	685d      	ldr	r5, [r3, #4]
 8007c04:	f025 0503 	bic.w	r5, r5, #3
 8007c08:	1b2c      	subs	r4, r5, r4
 8007c0a:	3c11      	subs	r4, #17
 8007c0c:	4444      	add	r4, r8
 8007c0e:	fbb4 f4f8 	udiv	r4, r4, r8
 8007c12:	3c01      	subs	r4, #1
 8007c14:	fb08 f404 	mul.w	r4, r8, r4
 8007c18:	45a0      	cmp	r8, r4
 8007c1a:	dd05      	ble.n	8007c28 <_malloc_trim_r+0x40>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f000 fb5d 	bl	80082dc <__malloc_unlock>
 8007c22:	2000      	movs	r0, #0
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f000 fec4 	bl	80089b8 <_sbrk_r>
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	442b      	add	r3, r5
 8007c34:	4298      	cmp	r0, r3
 8007c36:	d1f1      	bne.n	8007c1c <_malloc_trim_r+0x34>
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4261      	negs	r1, r4
 8007c3c:	f000 febc 	bl	80089b8 <_sbrk_r>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d110      	bne.n	8007c66 <_malloc_trim_r+0x7e>
 8007c44:	2100      	movs	r1, #0
 8007c46:	4630      	mov	r0, r6
 8007c48:	f000 feb6 	bl	80089b8 <_sbrk_r>
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	1a83      	subs	r3, r0, r2
 8007c50:	2b0f      	cmp	r3, #15
 8007c52:	dde3      	ble.n	8007c1c <_malloc_trim_r+0x34>
 8007c54:	490c      	ldr	r1, [pc, #48]	; (8007c88 <_malloc_trim_r+0xa0>)
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	6809      	ldr	r1, [r1, #0]
 8007c5c:	6053      	str	r3, [r2, #4]
 8007c5e:	1a40      	subs	r0, r0, r1
 8007c60:	490a      	ldr	r1, [pc, #40]	; (8007c8c <_malloc_trim_r+0xa4>)
 8007c62:	6008      	str	r0, [r1, #0]
 8007c64:	e7da      	b.n	8007c1c <_malloc_trim_r+0x34>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4a08      	ldr	r2, [pc, #32]	; (8007c8c <_malloc_trim_r+0xa4>)
 8007c6a:	1b2d      	subs	r5, r5, r4
 8007c6c:	f045 0501 	orr.w	r5, r5, #1
 8007c70:	605d      	str	r5, [r3, #4]
 8007c72:	6813      	ldr	r3, [r2, #0]
 8007c74:	4630      	mov	r0, r6
 8007c76:	1b1b      	subs	r3, r3, r4
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	f000 fb2f 	bl	80082dc <__malloc_unlock>
 8007c7e:	2001      	movs	r0, #1
 8007c80:	e7d0      	b.n	8007c24 <_malloc_trim_r+0x3c>
 8007c82:	bf00      	nop
 8007c84:	20000474 	.word	0x20000474
 8007c88:	2000087c 	.word	0x2000087c
 8007c8c:	20000b48 	.word	0x20000b48

08007c90 <_free_r>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	4605      	mov	r5, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	2900      	cmp	r1, #0
 8007c98:	f000 80b1 	beq.w	8007dfe <_free_r+0x16e>
 8007c9c:	f000 fb18 	bl	80082d0 <__malloc_lock>
 8007ca0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007ca4:	4856      	ldr	r0, [pc, #344]	; (8007e00 <_free_r+0x170>)
 8007ca6:	f022 0401 	bic.w	r4, r2, #1
 8007caa:	f1a7 0308 	sub.w	r3, r7, #8
 8007cae:	eb03 0c04 	add.w	ip, r3, r4
 8007cb2:	6881      	ldr	r1, [r0, #8]
 8007cb4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007cb8:	4561      	cmp	r1, ip
 8007cba:	f026 0603 	bic.w	r6, r6, #3
 8007cbe:	f002 0201 	and.w	r2, r2, #1
 8007cc2:	d11b      	bne.n	8007cfc <_free_r+0x6c>
 8007cc4:	4434      	add	r4, r6
 8007cc6:	b93a      	cbnz	r2, 8007cd8 <_free_r+0x48>
 8007cc8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	4414      	add	r4, r2
 8007cd0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8007cd4:	60ca      	str	r2, [r1, #12]
 8007cd6:	6091      	str	r1, [r2, #8]
 8007cd8:	f044 0201 	orr.w	r2, r4, #1
 8007cdc:	605a      	str	r2, [r3, #4]
 8007cde:	6083      	str	r3, [r0, #8]
 8007ce0:	4b48      	ldr	r3, [pc, #288]	; (8007e04 <_free_r+0x174>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	d804      	bhi.n	8007cf2 <_free_r+0x62>
 8007ce8:	4b47      	ldr	r3, [pc, #284]	; (8007e08 <_free_r+0x178>)
 8007cea:	4628      	mov	r0, r5
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	f7ff ff7b 	bl	8007be8 <_malloc_trim_r>
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cf8:	f000 baf0 	b.w	80082dc <__malloc_unlock>
 8007cfc:	f8cc 6004 	str.w	r6, [ip, #4]
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	d138      	bne.n	8007d76 <_free_r+0xe6>
 8007d04:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8007d08:	f100 0708 	add.w	r7, r0, #8
 8007d0c:	1a5b      	subs	r3, r3, r1
 8007d0e:	440c      	add	r4, r1
 8007d10:	6899      	ldr	r1, [r3, #8]
 8007d12:	42b9      	cmp	r1, r7
 8007d14:	d031      	beq.n	8007d7a <_free_r+0xea>
 8007d16:	68df      	ldr	r7, [r3, #12]
 8007d18:	60cf      	str	r7, [r1, #12]
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	eb0c 0106 	add.w	r1, ip, r6
 8007d20:	6849      	ldr	r1, [r1, #4]
 8007d22:	07c9      	lsls	r1, r1, #31
 8007d24:	d40b      	bmi.n	8007d3e <_free_r+0xae>
 8007d26:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007d2a:	4434      	add	r4, r6
 8007d2c:	bb3a      	cbnz	r2, 8007d7e <_free_r+0xee>
 8007d2e:	4e37      	ldr	r6, [pc, #220]	; (8007e0c <_free_r+0x17c>)
 8007d30:	42b1      	cmp	r1, r6
 8007d32:	d124      	bne.n	8007d7e <_free_r+0xee>
 8007d34:	2201      	movs	r2, #1
 8007d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d3a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007d3e:	f044 0101 	orr.w	r1, r4, #1
 8007d42:	6059      	str	r1, [r3, #4]
 8007d44:	511c      	str	r4, [r3, r4]
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	d1d3      	bne.n	8007cf2 <_free_r+0x62>
 8007d4a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8007d4e:	d21b      	bcs.n	8007d88 <_free_r+0xf8>
 8007d50:	0961      	lsrs	r1, r4, #5
 8007d52:	08e2      	lsrs	r2, r4, #3
 8007d54:	2401      	movs	r4, #1
 8007d56:	408c      	lsls	r4, r1
 8007d58:	6841      	ldr	r1, [r0, #4]
 8007d5a:	3201      	adds	r2, #1
 8007d5c:	430c      	orrs	r4, r1
 8007d5e:	6044      	str	r4, [r0, #4]
 8007d60:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8007d64:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8007d68:	3908      	subs	r1, #8
 8007d6a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8007d6e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8007d72:	60e3      	str	r3, [r4, #12]
 8007d74:	e7bd      	b.n	8007cf2 <_free_r+0x62>
 8007d76:	2200      	movs	r2, #0
 8007d78:	e7d0      	b.n	8007d1c <_free_r+0x8c>
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	e7ce      	b.n	8007d1c <_free_r+0x8c>
 8007d7e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8007d82:	60ce      	str	r6, [r1, #12]
 8007d84:	60b1      	str	r1, [r6, #8]
 8007d86:	e7da      	b.n	8007d3e <_free_r+0xae>
 8007d88:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8007d8c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8007d90:	d214      	bcs.n	8007dbc <_free_r+0x12c>
 8007d92:	09a2      	lsrs	r2, r4, #6
 8007d94:	3238      	adds	r2, #56	; 0x38
 8007d96:	1c51      	adds	r1, r2, #1
 8007d98:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8007d9c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8007da0:	428e      	cmp	r6, r1
 8007da2:	d125      	bne.n	8007df0 <_free_r+0x160>
 8007da4:	2401      	movs	r4, #1
 8007da6:	1092      	asrs	r2, r2, #2
 8007da8:	fa04 f202 	lsl.w	r2, r4, r2
 8007dac:	6844      	ldr	r4, [r0, #4]
 8007dae:	4322      	orrs	r2, r4
 8007db0:	6042      	str	r2, [r0, #4]
 8007db2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8007db6:	60b3      	str	r3, [r6, #8]
 8007db8:	60cb      	str	r3, [r1, #12]
 8007dba:	e79a      	b.n	8007cf2 <_free_r+0x62>
 8007dbc:	2a14      	cmp	r2, #20
 8007dbe:	d801      	bhi.n	8007dc4 <_free_r+0x134>
 8007dc0:	325b      	adds	r2, #91	; 0x5b
 8007dc2:	e7e8      	b.n	8007d96 <_free_r+0x106>
 8007dc4:	2a54      	cmp	r2, #84	; 0x54
 8007dc6:	d802      	bhi.n	8007dce <_free_r+0x13e>
 8007dc8:	0b22      	lsrs	r2, r4, #12
 8007dca:	326e      	adds	r2, #110	; 0x6e
 8007dcc:	e7e3      	b.n	8007d96 <_free_r+0x106>
 8007dce:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007dd2:	d802      	bhi.n	8007dda <_free_r+0x14a>
 8007dd4:	0be2      	lsrs	r2, r4, #15
 8007dd6:	3277      	adds	r2, #119	; 0x77
 8007dd8:	e7dd      	b.n	8007d96 <_free_r+0x106>
 8007dda:	f240 5154 	movw	r1, #1364	; 0x554
 8007dde:	428a      	cmp	r2, r1
 8007de0:	bf96      	itet	ls
 8007de2:	0ca2      	lsrls	r2, r4, #18
 8007de4:	227e      	movhi	r2, #126	; 0x7e
 8007de6:	327c      	addls	r2, #124	; 0x7c
 8007de8:	e7d5      	b.n	8007d96 <_free_r+0x106>
 8007dea:	6889      	ldr	r1, [r1, #8]
 8007dec:	428e      	cmp	r6, r1
 8007dee:	d004      	beq.n	8007dfa <_free_r+0x16a>
 8007df0:	684a      	ldr	r2, [r1, #4]
 8007df2:	f022 0203 	bic.w	r2, r2, #3
 8007df6:	42a2      	cmp	r2, r4
 8007df8:	d8f7      	bhi.n	8007dea <_free_r+0x15a>
 8007dfa:	68ce      	ldr	r6, [r1, #12]
 8007dfc:	e7d9      	b.n	8007db2 <_free_r+0x122>
 8007dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e00:	20000474 	.word	0x20000474
 8007e04:	20000880 	.word	0x20000880
 8007e08:	20000b78 	.word	0x20000b78
 8007e0c:	2000047c 	.word	0x2000047c

08007e10 <_localeconv_r>:
 8007e10:	4800      	ldr	r0, [pc, #0]	; (8007e14 <_localeconv_r+0x4>)
 8007e12:	4770      	bx	lr
 8007e14:	20000974 	.word	0x20000974

08007e18 <__retarget_lock_init_recursive>:
 8007e18:	4770      	bx	lr

08007e1a <__retarget_lock_close_recursive>:
 8007e1a:	4770      	bx	lr

08007e1c <__retarget_lock_acquire_recursive>:
 8007e1c:	4770      	bx	lr

08007e1e <__retarget_lock_release_recursive>:
 8007e1e:	4770      	bx	lr

08007e20 <_malloc_r>:
 8007e20:	f101 030b 	add.w	r3, r1, #11
 8007e24:	2b16      	cmp	r3, #22
 8007e26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	d906      	bls.n	8007e3c <_malloc_r+0x1c>
 8007e2e:	f033 0707 	bics.w	r7, r3, #7
 8007e32:	d504      	bpl.n	8007e3e <_malloc_r+0x1e>
 8007e34:	230c      	movs	r3, #12
 8007e36:	602b      	str	r3, [r5, #0]
 8007e38:	2400      	movs	r4, #0
 8007e3a:	e1a3      	b.n	8008184 <_malloc_r+0x364>
 8007e3c:	2710      	movs	r7, #16
 8007e3e:	42b9      	cmp	r1, r7
 8007e40:	d8f8      	bhi.n	8007e34 <_malloc_r+0x14>
 8007e42:	4628      	mov	r0, r5
 8007e44:	f000 fa44 	bl	80082d0 <__malloc_lock>
 8007e48:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8007e4c:	4eaf      	ldr	r6, [pc, #700]	; (800810c <_malloc_r+0x2ec>)
 8007e4e:	d237      	bcs.n	8007ec0 <_malloc_r+0xa0>
 8007e50:	f107 0208 	add.w	r2, r7, #8
 8007e54:	4432      	add	r2, r6
 8007e56:	6854      	ldr	r4, [r2, #4]
 8007e58:	f1a2 0108 	sub.w	r1, r2, #8
 8007e5c:	428c      	cmp	r4, r1
 8007e5e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8007e62:	d102      	bne.n	8007e6a <_malloc_r+0x4a>
 8007e64:	68d4      	ldr	r4, [r2, #12]
 8007e66:	42a2      	cmp	r2, r4
 8007e68:	d010      	beq.n	8007e8c <_malloc_r+0x6c>
 8007e6a:	6863      	ldr	r3, [r4, #4]
 8007e6c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007e70:	f023 0303 	bic.w	r3, r3, #3
 8007e74:	60ca      	str	r2, [r1, #12]
 8007e76:	4423      	add	r3, r4
 8007e78:	6091      	str	r1, [r2, #8]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	f042 0201 	orr.w	r2, r2, #1
 8007e80:	605a      	str	r2, [r3, #4]
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 fa2a 	bl	80082dc <__malloc_unlock>
 8007e88:	3408      	adds	r4, #8
 8007e8a:	e17b      	b.n	8008184 <_malloc_r+0x364>
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	6934      	ldr	r4, [r6, #16]
 8007e90:	499f      	ldr	r1, [pc, #636]	; (8008110 <_malloc_r+0x2f0>)
 8007e92:	428c      	cmp	r4, r1
 8007e94:	d077      	beq.n	8007f86 <_malloc_r+0x166>
 8007e96:	6862      	ldr	r2, [r4, #4]
 8007e98:	f022 0c03 	bic.w	ip, r2, #3
 8007e9c:	ebac 0007 	sub.w	r0, ip, r7
 8007ea0:	280f      	cmp	r0, #15
 8007ea2:	dd48      	ble.n	8007f36 <_malloc_r+0x116>
 8007ea4:	19e2      	adds	r2, r4, r7
 8007ea6:	f040 0301 	orr.w	r3, r0, #1
 8007eaa:	f047 0701 	orr.w	r7, r7, #1
 8007eae:	6067      	str	r7, [r4, #4]
 8007eb0:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8007eb4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8007eb8:	6053      	str	r3, [r2, #4]
 8007eba:	f844 000c 	str.w	r0, [r4, ip]
 8007ebe:	e7e0      	b.n	8007e82 <_malloc_r+0x62>
 8007ec0:	0a7b      	lsrs	r3, r7, #9
 8007ec2:	d02a      	beq.n	8007f1a <_malloc_r+0xfa>
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d812      	bhi.n	8007eee <_malloc_r+0xce>
 8007ec8:	09bb      	lsrs	r3, r7, #6
 8007eca:	3338      	adds	r3, #56	; 0x38
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8007ed2:	6854      	ldr	r4, [r2, #4]
 8007ed4:	f1a2 0c08 	sub.w	ip, r2, #8
 8007ed8:	4564      	cmp	r4, ip
 8007eda:	d006      	beq.n	8007eea <_malloc_r+0xca>
 8007edc:	6862      	ldr	r2, [r4, #4]
 8007ede:	f022 0203 	bic.w	r2, r2, #3
 8007ee2:	1bd0      	subs	r0, r2, r7
 8007ee4:	280f      	cmp	r0, #15
 8007ee6:	dd1c      	ble.n	8007f22 <_malloc_r+0x102>
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	3301      	adds	r3, #1
 8007eec:	e7cf      	b.n	8007e8e <_malloc_r+0x6e>
 8007eee:	2b14      	cmp	r3, #20
 8007ef0:	d801      	bhi.n	8007ef6 <_malloc_r+0xd6>
 8007ef2:	335b      	adds	r3, #91	; 0x5b
 8007ef4:	e7ea      	b.n	8007ecc <_malloc_r+0xac>
 8007ef6:	2b54      	cmp	r3, #84	; 0x54
 8007ef8:	d802      	bhi.n	8007f00 <_malloc_r+0xe0>
 8007efa:	0b3b      	lsrs	r3, r7, #12
 8007efc:	336e      	adds	r3, #110	; 0x6e
 8007efe:	e7e5      	b.n	8007ecc <_malloc_r+0xac>
 8007f00:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007f04:	d802      	bhi.n	8007f0c <_malloc_r+0xec>
 8007f06:	0bfb      	lsrs	r3, r7, #15
 8007f08:	3377      	adds	r3, #119	; 0x77
 8007f0a:	e7df      	b.n	8007ecc <_malloc_r+0xac>
 8007f0c:	f240 5254 	movw	r2, #1364	; 0x554
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d804      	bhi.n	8007f1e <_malloc_r+0xfe>
 8007f14:	0cbb      	lsrs	r3, r7, #18
 8007f16:	337c      	adds	r3, #124	; 0x7c
 8007f18:	e7d8      	b.n	8007ecc <_malloc_r+0xac>
 8007f1a:	233f      	movs	r3, #63	; 0x3f
 8007f1c:	e7d6      	b.n	8007ecc <_malloc_r+0xac>
 8007f1e:	237e      	movs	r3, #126	; 0x7e
 8007f20:	e7d4      	b.n	8007ecc <_malloc_r+0xac>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	68e1      	ldr	r1, [r4, #12]
 8007f26:	db04      	blt.n	8007f32 <_malloc_r+0x112>
 8007f28:	68a3      	ldr	r3, [r4, #8]
 8007f2a:	60d9      	str	r1, [r3, #12]
 8007f2c:	608b      	str	r3, [r1, #8]
 8007f2e:	18a3      	adds	r3, r4, r2
 8007f30:	e7a3      	b.n	8007e7a <_malloc_r+0x5a>
 8007f32:	460c      	mov	r4, r1
 8007f34:	e7d0      	b.n	8007ed8 <_malloc_r+0xb8>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8007f3c:	db07      	blt.n	8007f4e <_malloc_r+0x12e>
 8007f3e:	44a4      	add	ip, r4
 8007f40:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007f44:	f043 0301 	orr.w	r3, r3, #1
 8007f48:	f8cc 3004 	str.w	r3, [ip, #4]
 8007f4c:	e799      	b.n	8007e82 <_malloc_r+0x62>
 8007f4e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007f52:	6870      	ldr	r0, [r6, #4]
 8007f54:	f080 8094 	bcs.w	8008080 <_malloc_r+0x260>
 8007f58:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8007f5c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8007f60:	f04f 0c01 	mov.w	ip, #1
 8007f64:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007f68:	ea4c 0000 	orr.w	r0, ip, r0
 8007f6c:	3201      	adds	r2, #1
 8007f6e:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8007f72:	6070      	str	r0, [r6, #4]
 8007f74:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8007f78:	3808      	subs	r0, #8
 8007f7a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8007f7e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8007f82:	f8cc 400c 	str.w	r4, [ip, #12]
 8007f86:	2001      	movs	r0, #1
 8007f88:	109a      	asrs	r2, r3, #2
 8007f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8007f8e:	6870      	ldr	r0, [r6, #4]
 8007f90:	4290      	cmp	r0, r2
 8007f92:	d326      	bcc.n	8007fe2 <_malloc_r+0x1c2>
 8007f94:	4210      	tst	r0, r2
 8007f96:	d106      	bne.n	8007fa6 <_malloc_r+0x186>
 8007f98:	f023 0303 	bic.w	r3, r3, #3
 8007f9c:	0052      	lsls	r2, r2, #1
 8007f9e:	4210      	tst	r0, r2
 8007fa0:	f103 0304 	add.w	r3, r3, #4
 8007fa4:	d0fa      	beq.n	8007f9c <_malloc_r+0x17c>
 8007fa6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8007faa:	46c1      	mov	r9, r8
 8007fac:	469e      	mov	lr, r3
 8007fae:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007fb2:	454c      	cmp	r4, r9
 8007fb4:	f040 80b8 	bne.w	8008128 <_malloc_r+0x308>
 8007fb8:	f10e 0e01 	add.w	lr, lr, #1
 8007fbc:	f01e 0f03 	tst.w	lr, #3
 8007fc0:	f109 0908 	add.w	r9, r9, #8
 8007fc4:	d1f3      	bne.n	8007fae <_malloc_r+0x18e>
 8007fc6:	0798      	lsls	r0, r3, #30
 8007fc8:	f040 80e2 	bne.w	8008190 <_malloc_r+0x370>
 8007fcc:	6873      	ldr	r3, [r6, #4]
 8007fce:	ea23 0302 	bic.w	r3, r3, r2
 8007fd2:	6073      	str	r3, [r6, #4]
 8007fd4:	6870      	ldr	r0, [r6, #4]
 8007fd6:	0052      	lsls	r2, r2, #1
 8007fd8:	4290      	cmp	r0, r2
 8007fda:	d302      	bcc.n	8007fe2 <_malloc_r+0x1c2>
 8007fdc:	2a00      	cmp	r2, #0
 8007fde:	f040 80e3 	bne.w	80081a8 <_malloc_r+0x388>
 8007fe2:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8007fe6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007fea:	f023 0903 	bic.w	r9, r3, #3
 8007fee:	45b9      	cmp	r9, r7
 8007ff0:	d304      	bcc.n	8007ffc <_malloc_r+0x1dc>
 8007ff2:	eba9 0207 	sub.w	r2, r9, r7
 8007ff6:	2a0f      	cmp	r2, #15
 8007ff8:	f300 8141 	bgt.w	800827e <_malloc_r+0x45e>
 8007ffc:	4b45      	ldr	r3, [pc, #276]	; (8008114 <_malloc_r+0x2f4>)
 8007ffe:	2008      	movs	r0, #8
 8008000:	6819      	ldr	r1, [r3, #0]
 8008002:	eb0a 0b09 	add.w	fp, sl, r9
 8008006:	3110      	adds	r1, #16
 8008008:	4439      	add	r1, r7
 800800a:	9101      	str	r1, [sp, #4]
 800800c:	f000 fd72 	bl	8008af4 <sysconf>
 8008010:	4a41      	ldr	r2, [pc, #260]	; (8008118 <_malloc_r+0x2f8>)
 8008012:	9901      	ldr	r1, [sp, #4]
 8008014:	6813      	ldr	r3, [r2, #0]
 8008016:	4680      	mov	r8, r0
 8008018:	3301      	adds	r3, #1
 800801a:	bf1f      	itttt	ne
 800801c:	f101 31ff 	addne.w	r1, r1, #4294967295
 8008020:	1809      	addne	r1, r1, r0
 8008022:	4243      	negne	r3, r0
 8008024:	4019      	andne	r1, r3
 8008026:	4628      	mov	r0, r5
 8008028:	9101      	str	r1, [sp, #4]
 800802a:	f000 fcc5 	bl	80089b8 <_sbrk_r>
 800802e:	1c42      	adds	r2, r0, #1
 8008030:	4604      	mov	r4, r0
 8008032:	f000 80f7 	beq.w	8008224 <_malloc_r+0x404>
 8008036:	4583      	cmp	fp, r0
 8008038:	9901      	ldr	r1, [sp, #4]
 800803a:	4a37      	ldr	r2, [pc, #220]	; (8008118 <_malloc_r+0x2f8>)
 800803c:	d902      	bls.n	8008044 <_malloc_r+0x224>
 800803e:	45b2      	cmp	sl, r6
 8008040:	f040 80f0 	bne.w	8008224 <_malloc_r+0x404>
 8008044:	4b35      	ldr	r3, [pc, #212]	; (800811c <_malloc_r+0x2fc>)
 8008046:	45a3      	cmp	fp, r4
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	f108 3cff 	add.w	ip, r8, #4294967295
 800804e:	4408      	add	r0, r1
 8008050:	6018      	str	r0, [r3, #0]
 8008052:	f040 80ab 	bne.w	80081ac <_malloc_r+0x38c>
 8008056:	ea1b 0f0c 	tst.w	fp, ip
 800805a:	f040 80a7 	bne.w	80081ac <_malloc_r+0x38c>
 800805e:	68b2      	ldr	r2, [r6, #8]
 8008060:	4449      	add	r1, r9
 8008062:	f041 0101 	orr.w	r1, r1, #1
 8008066:	6051      	str	r1, [r2, #4]
 8008068:	4a2d      	ldr	r2, [pc, #180]	; (8008120 <_malloc_r+0x300>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6811      	ldr	r1, [r2, #0]
 800806e:	428b      	cmp	r3, r1
 8008070:	bf88      	it	hi
 8008072:	6013      	strhi	r3, [r2, #0]
 8008074:	4a2b      	ldr	r2, [pc, #172]	; (8008124 <_malloc_r+0x304>)
 8008076:	6811      	ldr	r1, [r2, #0]
 8008078:	428b      	cmp	r3, r1
 800807a:	bf88      	it	hi
 800807c:	6013      	strhi	r3, [r2, #0]
 800807e:	e0d1      	b.n	8008224 <_malloc_r+0x404>
 8008080:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8008084:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8008088:	d218      	bcs.n	80080bc <_malloc_r+0x29c>
 800808a:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800808e:	3238      	adds	r2, #56	; 0x38
 8008090:	f102 0e01 	add.w	lr, r2, #1
 8008094:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8008098:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800809c:	45f0      	cmp	r8, lr
 800809e:	d12b      	bne.n	80080f8 <_malloc_r+0x2d8>
 80080a0:	f04f 0c01 	mov.w	ip, #1
 80080a4:	1092      	asrs	r2, r2, #2
 80080a6:	fa0c f202 	lsl.w	r2, ip, r2
 80080aa:	4310      	orrs	r0, r2
 80080ac:	6070      	str	r0, [r6, #4]
 80080ae:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80080b2:	f8c8 4008 	str.w	r4, [r8, #8]
 80080b6:	f8ce 400c 	str.w	r4, [lr, #12]
 80080ba:	e764      	b.n	8007f86 <_malloc_r+0x166>
 80080bc:	2a14      	cmp	r2, #20
 80080be:	d801      	bhi.n	80080c4 <_malloc_r+0x2a4>
 80080c0:	325b      	adds	r2, #91	; 0x5b
 80080c2:	e7e5      	b.n	8008090 <_malloc_r+0x270>
 80080c4:	2a54      	cmp	r2, #84	; 0x54
 80080c6:	d803      	bhi.n	80080d0 <_malloc_r+0x2b0>
 80080c8:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80080cc:	326e      	adds	r2, #110	; 0x6e
 80080ce:	e7df      	b.n	8008090 <_malloc_r+0x270>
 80080d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80080d4:	d803      	bhi.n	80080de <_malloc_r+0x2be>
 80080d6:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80080da:	3277      	adds	r2, #119	; 0x77
 80080dc:	e7d8      	b.n	8008090 <_malloc_r+0x270>
 80080de:	f240 5e54 	movw	lr, #1364	; 0x554
 80080e2:	4572      	cmp	r2, lr
 80080e4:	bf96      	itet	ls
 80080e6:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80080ea:	227e      	movhi	r2, #126	; 0x7e
 80080ec:	327c      	addls	r2, #124	; 0x7c
 80080ee:	e7cf      	b.n	8008090 <_malloc_r+0x270>
 80080f0:	f8de e008 	ldr.w	lr, [lr, #8]
 80080f4:	45f0      	cmp	r8, lr
 80080f6:	d005      	beq.n	8008104 <_malloc_r+0x2e4>
 80080f8:	f8de 2004 	ldr.w	r2, [lr, #4]
 80080fc:	f022 0203 	bic.w	r2, r2, #3
 8008100:	4562      	cmp	r2, ip
 8008102:	d8f5      	bhi.n	80080f0 <_malloc_r+0x2d0>
 8008104:	f8de 800c 	ldr.w	r8, [lr, #12]
 8008108:	e7d1      	b.n	80080ae <_malloc_r+0x28e>
 800810a:	bf00      	nop
 800810c:	20000474 	.word	0x20000474
 8008110:	2000047c 	.word	0x2000047c
 8008114:	20000b78 	.word	0x20000b78
 8008118:	2000087c 	.word	0x2000087c
 800811c:	20000b48 	.word	0x20000b48
 8008120:	20000b70 	.word	0x20000b70
 8008124:	20000b74 	.word	0x20000b74
 8008128:	6860      	ldr	r0, [r4, #4]
 800812a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800812e:	f020 0003 	bic.w	r0, r0, #3
 8008132:	eba0 0a07 	sub.w	sl, r0, r7
 8008136:	f1ba 0f0f 	cmp.w	sl, #15
 800813a:	dd12      	ble.n	8008162 <_malloc_r+0x342>
 800813c:	68a3      	ldr	r3, [r4, #8]
 800813e:	19e2      	adds	r2, r4, r7
 8008140:	f047 0701 	orr.w	r7, r7, #1
 8008144:	6067      	str	r7, [r4, #4]
 8008146:	f8c3 c00c 	str.w	ip, [r3, #12]
 800814a:	f8cc 3008 	str.w	r3, [ip, #8]
 800814e:	f04a 0301 	orr.w	r3, sl, #1
 8008152:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8008156:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800815a:	6053      	str	r3, [r2, #4]
 800815c:	f844 a000 	str.w	sl, [r4, r0]
 8008160:	e68f      	b.n	8007e82 <_malloc_r+0x62>
 8008162:	f1ba 0f00 	cmp.w	sl, #0
 8008166:	db11      	blt.n	800818c <_malloc_r+0x36c>
 8008168:	4420      	add	r0, r4
 800816a:	6843      	ldr	r3, [r0, #4]
 800816c:	f043 0301 	orr.w	r3, r3, #1
 8008170:	6043      	str	r3, [r0, #4]
 8008172:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8008176:	4628      	mov	r0, r5
 8008178:	f8c3 c00c 	str.w	ip, [r3, #12]
 800817c:	f8cc 3008 	str.w	r3, [ip, #8]
 8008180:	f000 f8ac 	bl	80082dc <__malloc_unlock>
 8008184:	4620      	mov	r0, r4
 8008186:	b003      	add	sp, #12
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818c:	4664      	mov	r4, ip
 800818e:	e710      	b.n	8007fb2 <_malloc_r+0x192>
 8008190:	f858 0908 	ldr.w	r0, [r8], #-8
 8008194:	3b01      	subs	r3, #1
 8008196:	4540      	cmp	r0, r8
 8008198:	f43f af15 	beq.w	8007fc6 <_malloc_r+0x1a6>
 800819c:	e71a      	b.n	8007fd4 <_malloc_r+0x1b4>
 800819e:	3304      	adds	r3, #4
 80081a0:	0052      	lsls	r2, r2, #1
 80081a2:	4210      	tst	r0, r2
 80081a4:	d0fb      	beq.n	800819e <_malloc_r+0x37e>
 80081a6:	e6fe      	b.n	8007fa6 <_malloc_r+0x186>
 80081a8:	4673      	mov	r3, lr
 80081aa:	e7fa      	b.n	80081a2 <_malloc_r+0x382>
 80081ac:	f8d2 e000 	ldr.w	lr, [r2]
 80081b0:	f1be 3fff 	cmp.w	lr, #4294967295
 80081b4:	bf1b      	ittet	ne
 80081b6:	eba4 0b0b 	subne.w	fp, r4, fp
 80081ba:	eb0b 0200 	addne.w	r2, fp, r0
 80081be:	6014      	streq	r4, [r2, #0]
 80081c0:	601a      	strne	r2, [r3, #0]
 80081c2:	f014 0b07 	ands.w	fp, r4, #7
 80081c6:	bf0e      	itee	eq
 80081c8:	4658      	moveq	r0, fp
 80081ca:	f1cb 0008 	rsbne	r0, fp, #8
 80081ce:	1824      	addne	r4, r4, r0
 80081d0:	1862      	adds	r2, r4, r1
 80081d2:	ea02 010c 	and.w	r1, r2, ip
 80081d6:	4480      	add	r8, r0
 80081d8:	eba8 0801 	sub.w	r8, r8, r1
 80081dc:	ea08 080c 	and.w	r8, r8, ip
 80081e0:	4641      	mov	r1, r8
 80081e2:	4628      	mov	r0, r5
 80081e4:	9201      	str	r2, [sp, #4]
 80081e6:	f000 fbe7 	bl	80089b8 <_sbrk_r>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	9a01      	ldr	r2, [sp, #4]
 80081ee:	4b29      	ldr	r3, [pc, #164]	; (8008294 <_malloc_r+0x474>)
 80081f0:	d107      	bne.n	8008202 <_malloc_r+0x3e2>
 80081f2:	f1bb 0f00 	cmp.w	fp, #0
 80081f6:	d023      	beq.n	8008240 <_malloc_r+0x420>
 80081f8:	f04f 0800 	mov.w	r8, #0
 80081fc:	f1ab 0008 	sub.w	r0, fp, #8
 8008200:	4410      	add	r0, r2
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	1b00      	subs	r0, r0, r4
 8008206:	4440      	add	r0, r8
 8008208:	4442      	add	r2, r8
 800820a:	f040 0001 	orr.w	r0, r0, #1
 800820e:	45b2      	cmp	sl, r6
 8008210:	60b4      	str	r4, [r6, #8]
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	6060      	str	r0, [r4, #4]
 8008216:	f43f af27 	beq.w	8008068 <_malloc_r+0x248>
 800821a:	f1b9 0f0f 	cmp.w	r9, #15
 800821e:	d812      	bhi.n	8008246 <_malloc_r+0x426>
 8008220:	2301      	movs	r3, #1
 8008222:	6063      	str	r3, [r4, #4]
 8008224:	68b3      	ldr	r3, [r6, #8]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f023 0303 	bic.w	r3, r3, #3
 800822c:	42bb      	cmp	r3, r7
 800822e:	eba3 0207 	sub.w	r2, r3, r7
 8008232:	d301      	bcc.n	8008238 <_malloc_r+0x418>
 8008234:	2a0f      	cmp	r2, #15
 8008236:	dc22      	bgt.n	800827e <_malloc_r+0x45e>
 8008238:	4628      	mov	r0, r5
 800823a:	f000 f84f 	bl	80082dc <__malloc_unlock>
 800823e:	e5fb      	b.n	8007e38 <_malloc_r+0x18>
 8008240:	4610      	mov	r0, r2
 8008242:	46d8      	mov	r8, fp
 8008244:	e7dd      	b.n	8008202 <_malloc_r+0x3e2>
 8008246:	2105      	movs	r1, #5
 8008248:	f8da 2004 	ldr.w	r2, [sl, #4]
 800824c:	f1a9 090c 	sub.w	r9, r9, #12
 8008250:	f029 0907 	bic.w	r9, r9, #7
 8008254:	f002 0201 	and.w	r2, r2, #1
 8008258:	ea42 0209 	orr.w	r2, r2, r9
 800825c:	f8ca 2004 	str.w	r2, [sl, #4]
 8008260:	f1b9 0f0f 	cmp.w	r9, #15
 8008264:	eb0a 0209 	add.w	r2, sl, r9
 8008268:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800826c:	f67f aefc 	bls.w	8008068 <_malloc_r+0x248>
 8008270:	4628      	mov	r0, r5
 8008272:	f10a 0108 	add.w	r1, sl, #8
 8008276:	f7ff fd0b 	bl	8007c90 <_free_r>
 800827a:	4b06      	ldr	r3, [pc, #24]	; (8008294 <_malloc_r+0x474>)
 800827c:	e6f4      	b.n	8008068 <_malloc_r+0x248>
 800827e:	68b4      	ldr	r4, [r6, #8]
 8008280:	f047 0301 	orr.w	r3, r7, #1
 8008284:	f042 0201 	orr.w	r2, r2, #1
 8008288:	4427      	add	r7, r4
 800828a:	6063      	str	r3, [r4, #4]
 800828c:	60b7      	str	r7, [r6, #8]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	e5f7      	b.n	8007e82 <_malloc_r+0x62>
 8008292:	bf00      	nop
 8008294:	20000b48 	.word	0x20000b48

08008298 <memchr>:
 8008298:	4603      	mov	r3, r0
 800829a:	b510      	push	{r4, lr}
 800829c:	b2c9      	uxtb	r1, r1
 800829e:	4402      	add	r2, r0
 80082a0:	4293      	cmp	r3, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	d101      	bne.n	80082aa <memchr+0x12>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e003      	b.n	80082b2 <memchr+0x1a>
 80082aa:	7804      	ldrb	r4, [r0, #0]
 80082ac:	3301      	adds	r3, #1
 80082ae:	428c      	cmp	r4, r1
 80082b0:	d1f6      	bne.n	80082a0 <memchr+0x8>
 80082b2:	bd10      	pop	{r4, pc}

080082b4 <memcpy>:
 80082b4:	440a      	add	r2, r1
 80082b6:	4291      	cmp	r1, r2
 80082b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082bc:	d100      	bne.n	80082c0 <memcpy+0xc>
 80082be:	4770      	bx	lr
 80082c0:	b510      	push	{r4, lr}
 80082c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c6:	4291      	cmp	r1, r2
 80082c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082cc:	d1f9      	bne.n	80082c2 <memcpy+0xe>
 80082ce:	bd10      	pop	{r4, pc}

080082d0 <__malloc_lock>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__malloc_lock+0x8>)
 80082d2:	f7ff bda3 	b.w	8007e1c <__retarget_lock_acquire_recursive>
 80082d6:	bf00      	nop
 80082d8:	20000b45 	.word	0x20000b45

080082dc <__malloc_unlock>:
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <__malloc_unlock+0x8>)
 80082de:	f7ff bd9e 	b.w	8007e1e <__retarget_lock_release_recursive>
 80082e2:	bf00      	nop
 80082e4:	20000b45 	.word	0x20000b45

080082e8 <_Balloc>:
 80082e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80082ea:	b570      	push	{r4, r5, r6, lr}
 80082ec:	4605      	mov	r5, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	b17b      	cbz	r3, 8008312 <_Balloc+0x2a>
 80082f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80082f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80082f8:	b9a0      	cbnz	r0, 8008324 <_Balloc+0x3c>
 80082fa:	2101      	movs	r1, #1
 80082fc:	fa01 f604 	lsl.w	r6, r1, r4
 8008300:	1d72      	adds	r2, r6, #5
 8008302:	4628      	mov	r0, r5
 8008304:	0092      	lsls	r2, r2, #2
 8008306:	f000 fc63 	bl	8008bd0 <_calloc_r>
 800830a:	b148      	cbz	r0, 8008320 <_Balloc+0x38>
 800830c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008310:	e00b      	b.n	800832a <_Balloc+0x42>
 8008312:	2221      	movs	r2, #33	; 0x21
 8008314:	2104      	movs	r1, #4
 8008316:	f000 fc5b 	bl	8008bd0 <_calloc_r>
 800831a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800831c:	2800      	cmp	r0, #0
 800831e:	d1e8      	bne.n	80082f2 <_Balloc+0xa>
 8008320:	2000      	movs	r0, #0
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	6802      	ldr	r2, [r0, #0]
 8008326:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800832a:	2300      	movs	r3, #0
 800832c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008330:	e7f7      	b.n	8008322 <_Balloc+0x3a>

08008332 <_Bfree>:
 8008332:	b131      	cbz	r1, 8008342 <_Bfree+0x10>
 8008334:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008336:	684a      	ldr	r2, [r1, #4]
 8008338:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800833c:	6008      	str	r0, [r1, #0]
 800833e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008342:	4770      	bx	lr

08008344 <__multadd>:
 8008344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008348:	4607      	mov	r7, r0
 800834a:	460c      	mov	r4, r1
 800834c:	461e      	mov	r6, r3
 800834e:	2000      	movs	r0, #0
 8008350:	690d      	ldr	r5, [r1, #16]
 8008352:	f101 0c14 	add.w	ip, r1, #20
 8008356:	f8dc 3000 	ldr.w	r3, [ip]
 800835a:	3001      	adds	r0, #1
 800835c:	b299      	uxth	r1, r3
 800835e:	fb02 6101 	mla	r1, r2, r1, r6
 8008362:	0c1e      	lsrs	r6, r3, #16
 8008364:	0c0b      	lsrs	r3, r1, #16
 8008366:	fb02 3306 	mla	r3, r2, r6, r3
 800836a:	b289      	uxth	r1, r1
 800836c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008370:	4285      	cmp	r5, r0
 8008372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008376:	f84c 1b04 	str.w	r1, [ip], #4
 800837a:	dcec      	bgt.n	8008356 <__multadd+0x12>
 800837c:	b30e      	cbz	r6, 80083c2 <__multadd+0x7e>
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	42ab      	cmp	r3, r5
 8008382:	dc19      	bgt.n	80083b8 <__multadd+0x74>
 8008384:	6861      	ldr	r1, [r4, #4]
 8008386:	4638      	mov	r0, r7
 8008388:	3101      	adds	r1, #1
 800838a:	f7ff ffad 	bl	80082e8 <_Balloc>
 800838e:	4680      	mov	r8, r0
 8008390:	b928      	cbnz	r0, 800839e <__multadd+0x5a>
 8008392:	4602      	mov	r2, r0
 8008394:	21b5      	movs	r1, #181	; 0xb5
 8008396:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <__multadd+0x84>)
 8008398:	480c      	ldr	r0, [pc, #48]	; (80083cc <__multadd+0x88>)
 800839a:	f000 fbfb 	bl	8008b94 <__assert_func>
 800839e:	6922      	ldr	r2, [r4, #16]
 80083a0:	f104 010c 	add.w	r1, r4, #12
 80083a4:	3202      	adds	r2, #2
 80083a6:	0092      	lsls	r2, r2, #2
 80083a8:	300c      	adds	r0, #12
 80083aa:	f7ff ff83 	bl	80082b4 <memcpy>
 80083ae:	4621      	mov	r1, r4
 80083b0:	4638      	mov	r0, r7
 80083b2:	f7ff ffbe 	bl	8008332 <_Bfree>
 80083b6:	4644      	mov	r4, r8
 80083b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083bc:	3501      	adds	r5, #1
 80083be:	615e      	str	r6, [r3, #20]
 80083c0:	6125      	str	r5, [r4, #16]
 80083c2:	4620      	mov	r0, r4
 80083c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c8:	0801fe79 	.word	0x0801fe79
 80083cc:	0801fee5 	.word	0x0801fee5

080083d0 <__hi0bits>:
 80083d0:	0c02      	lsrs	r2, r0, #16
 80083d2:	0412      	lsls	r2, r2, #16
 80083d4:	4603      	mov	r3, r0
 80083d6:	b9ca      	cbnz	r2, 800840c <__hi0bits+0x3c>
 80083d8:	0403      	lsls	r3, r0, #16
 80083da:	2010      	movs	r0, #16
 80083dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083e0:	bf04      	itt	eq
 80083e2:	021b      	lsleq	r3, r3, #8
 80083e4:	3008      	addeq	r0, #8
 80083e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083ea:	bf04      	itt	eq
 80083ec:	011b      	lsleq	r3, r3, #4
 80083ee:	3004      	addeq	r0, #4
 80083f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083f4:	bf04      	itt	eq
 80083f6:	009b      	lsleq	r3, r3, #2
 80083f8:	3002      	addeq	r0, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	db05      	blt.n	800840a <__hi0bits+0x3a>
 80083fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008402:	f100 0001 	add.w	r0, r0, #1
 8008406:	bf08      	it	eq
 8008408:	2020      	moveq	r0, #32
 800840a:	4770      	bx	lr
 800840c:	2000      	movs	r0, #0
 800840e:	e7e5      	b.n	80083dc <__hi0bits+0xc>

08008410 <__lo0bits>:
 8008410:	6803      	ldr	r3, [r0, #0]
 8008412:	4602      	mov	r2, r0
 8008414:	f013 0007 	ands.w	r0, r3, #7
 8008418:	d00b      	beq.n	8008432 <__lo0bits+0x22>
 800841a:	07d9      	lsls	r1, r3, #31
 800841c:	d421      	bmi.n	8008462 <__lo0bits+0x52>
 800841e:	0798      	lsls	r0, r3, #30
 8008420:	bf49      	itett	mi
 8008422:	085b      	lsrmi	r3, r3, #1
 8008424:	089b      	lsrpl	r3, r3, #2
 8008426:	2001      	movmi	r0, #1
 8008428:	6013      	strmi	r3, [r2, #0]
 800842a:	bf5c      	itt	pl
 800842c:	2002      	movpl	r0, #2
 800842e:	6013      	strpl	r3, [r2, #0]
 8008430:	4770      	bx	lr
 8008432:	b299      	uxth	r1, r3
 8008434:	b909      	cbnz	r1, 800843a <__lo0bits+0x2a>
 8008436:	2010      	movs	r0, #16
 8008438:	0c1b      	lsrs	r3, r3, #16
 800843a:	b2d9      	uxtb	r1, r3
 800843c:	b909      	cbnz	r1, 8008442 <__lo0bits+0x32>
 800843e:	3008      	adds	r0, #8
 8008440:	0a1b      	lsrs	r3, r3, #8
 8008442:	0719      	lsls	r1, r3, #28
 8008444:	bf04      	itt	eq
 8008446:	091b      	lsreq	r3, r3, #4
 8008448:	3004      	addeq	r0, #4
 800844a:	0799      	lsls	r1, r3, #30
 800844c:	bf04      	itt	eq
 800844e:	089b      	lsreq	r3, r3, #2
 8008450:	3002      	addeq	r0, #2
 8008452:	07d9      	lsls	r1, r3, #31
 8008454:	d403      	bmi.n	800845e <__lo0bits+0x4e>
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	f100 0001 	add.w	r0, r0, #1
 800845c:	d003      	beq.n	8008466 <__lo0bits+0x56>
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	4770      	bx	lr
 8008462:	2000      	movs	r0, #0
 8008464:	4770      	bx	lr
 8008466:	2020      	movs	r0, #32
 8008468:	4770      	bx	lr
	...

0800846c <__i2b>:
 800846c:	b510      	push	{r4, lr}
 800846e:	460c      	mov	r4, r1
 8008470:	2101      	movs	r1, #1
 8008472:	f7ff ff39 	bl	80082e8 <_Balloc>
 8008476:	4602      	mov	r2, r0
 8008478:	b928      	cbnz	r0, 8008486 <__i2b+0x1a>
 800847a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <__i2b+0x24>)
 8008480:	4804      	ldr	r0, [pc, #16]	; (8008494 <__i2b+0x28>)
 8008482:	f000 fb87 	bl	8008b94 <__assert_func>
 8008486:	2301      	movs	r3, #1
 8008488:	6144      	str	r4, [r0, #20]
 800848a:	6103      	str	r3, [r0, #16]
 800848c:	bd10      	pop	{r4, pc}
 800848e:	bf00      	nop
 8008490:	0801fe79 	.word	0x0801fe79
 8008494:	0801fee5 	.word	0x0801fee5

08008498 <__multiply>:
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	4691      	mov	r9, r2
 800849e:	690a      	ldr	r2, [r1, #16]
 80084a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084a4:	460c      	mov	r4, r1
 80084a6:	429a      	cmp	r2, r3
 80084a8:	bfbe      	ittt	lt
 80084aa:	460b      	movlt	r3, r1
 80084ac:	464c      	movlt	r4, r9
 80084ae:	4699      	movlt	r9, r3
 80084b0:	6927      	ldr	r7, [r4, #16]
 80084b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	6861      	ldr	r1, [r4, #4]
 80084ba:	eb07 060a 	add.w	r6, r7, sl
 80084be:	42b3      	cmp	r3, r6
 80084c0:	b085      	sub	sp, #20
 80084c2:	bfb8      	it	lt
 80084c4:	3101      	addlt	r1, #1
 80084c6:	f7ff ff0f 	bl	80082e8 <_Balloc>
 80084ca:	b930      	cbnz	r0, 80084da <__multiply+0x42>
 80084cc:	4602      	mov	r2, r0
 80084ce:	f240 115d 	movw	r1, #349	; 0x15d
 80084d2:	4b43      	ldr	r3, [pc, #268]	; (80085e0 <__multiply+0x148>)
 80084d4:	4843      	ldr	r0, [pc, #268]	; (80085e4 <__multiply+0x14c>)
 80084d6:	f000 fb5d 	bl	8008b94 <__assert_func>
 80084da:	f100 0514 	add.w	r5, r0, #20
 80084de:	462b      	mov	r3, r5
 80084e0:	2200      	movs	r2, #0
 80084e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084e6:	4543      	cmp	r3, r8
 80084e8:	d321      	bcc.n	800852e <__multiply+0x96>
 80084ea:	f104 0314 	add.w	r3, r4, #20
 80084ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084f2:	f109 0314 	add.w	r3, r9, #20
 80084f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084fa:	9202      	str	r2, [sp, #8]
 80084fc:	1b3a      	subs	r2, r7, r4
 80084fe:	3a15      	subs	r2, #21
 8008500:	f022 0203 	bic.w	r2, r2, #3
 8008504:	3204      	adds	r2, #4
 8008506:	f104 0115 	add.w	r1, r4, #21
 800850a:	428f      	cmp	r7, r1
 800850c:	bf38      	it	cc
 800850e:	2204      	movcc	r2, #4
 8008510:	9201      	str	r2, [sp, #4]
 8008512:	9a02      	ldr	r2, [sp, #8]
 8008514:	9303      	str	r3, [sp, #12]
 8008516:	429a      	cmp	r2, r3
 8008518:	d80c      	bhi.n	8008534 <__multiply+0x9c>
 800851a:	2e00      	cmp	r6, #0
 800851c:	dd03      	ble.n	8008526 <__multiply+0x8e>
 800851e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008522:	2b00      	cmp	r3, #0
 8008524:	d059      	beq.n	80085da <__multiply+0x142>
 8008526:	6106      	str	r6, [r0, #16]
 8008528:	b005      	add	sp, #20
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	f843 2b04 	str.w	r2, [r3], #4
 8008532:	e7d8      	b.n	80084e6 <__multiply+0x4e>
 8008534:	f8b3 a000 	ldrh.w	sl, [r3]
 8008538:	f1ba 0f00 	cmp.w	sl, #0
 800853c:	d023      	beq.n	8008586 <__multiply+0xee>
 800853e:	46a9      	mov	r9, r5
 8008540:	f04f 0c00 	mov.w	ip, #0
 8008544:	f104 0e14 	add.w	lr, r4, #20
 8008548:	f85e 2b04 	ldr.w	r2, [lr], #4
 800854c:	f8d9 1000 	ldr.w	r1, [r9]
 8008550:	fa1f fb82 	uxth.w	fp, r2
 8008554:	b289      	uxth	r1, r1
 8008556:	fb0a 110b 	mla	r1, sl, fp, r1
 800855a:	4461      	add	r1, ip
 800855c:	f8d9 c000 	ldr.w	ip, [r9]
 8008560:	0c12      	lsrs	r2, r2, #16
 8008562:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008566:	fb0a c202 	mla	r2, sl, r2, ip
 800856a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800856e:	b289      	uxth	r1, r1
 8008570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008574:	4577      	cmp	r7, lr
 8008576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800857a:	f849 1b04 	str.w	r1, [r9], #4
 800857e:	d8e3      	bhi.n	8008548 <__multiply+0xb0>
 8008580:	9a01      	ldr	r2, [sp, #4]
 8008582:	f845 c002 	str.w	ip, [r5, r2]
 8008586:	9a03      	ldr	r2, [sp, #12]
 8008588:	3304      	adds	r3, #4
 800858a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800858e:	f1b9 0f00 	cmp.w	r9, #0
 8008592:	d020      	beq.n	80085d6 <__multiply+0x13e>
 8008594:	46ae      	mov	lr, r5
 8008596:	f04f 0a00 	mov.w	sl, #0
 800859a:	6829      	ldr	r1, [r5, #0]
 800859c:	f104 0c14 	add.w	ip, r4, #20
 80085a0:	f8bc b000 	ldrh.w	fp, [ip]
 80085a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085a8:	b289      	uxth	r1, r1
 80085aa:	fb09 220b 	mla	r2, r9, fp, r2
 80085ae:	4492      	add	sl, r2
 80085b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085b4:	f84e 1b04 	str.w	r1, [lr], #4
 80085b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085bc:	f8be 1000 	ldrh.w	r1, [lr]
 80085c0:	0c12      	lsrs	r2, r2, #16
 80085c2:	fb09 1102 	mla	r1, r9, r2, r1
 80085c6:	4567      	cmp	r7, ip
 80085c8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085d0:	d8e6      	bhi.n	80085a0 <__multiply+0x108>
 80085d2:	9a01      	ldr	r2, [sp, #4]
 80085d4:	50a9      	str	r1, [r5, r2]
 80085d6:	3504      	adds	r5, #4
 80085d8:	e79b      	b.n	8008512 <__multiply+0x7a>
 80085da:	3e01      	subs	r6, #1
 80085dc:	e79d      	b.n	800851a <__multiply+0x82>
 80085de:	bf00      	nop
 80085e0:	0801fe79 	.word	0x0801fe79
 80085e4:	0801fee5 	.word	0x0801fee5

080085e8 <__pow5mult>:
 80085e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ec:	4615      	mov	r5, r2
 80085ee:	f012 0203 	ands.w	r2, r2, #3
 80085f2:	4606      	mov	r6, r0
 80085f4:	460f      	mov	r7, r1
 80085f6:	d007      	beq.n	8008608 <__pow5mult+0x20>
 80085f8:	4c1a      	ldr	r4, [pc, #104]	; (8008664 <__pow5mult+0x7c>)
 80085fa:	3a01      	subs	r2, #1
 80085fc:	2300      	movs	r3, #0
 80085fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008602:	f7ff fe9f 	bl	8008344 <__multadd>
 8008606:	4607      	mov	r7, r0
 8008608:	10ad      	asrs	r5, r5, #2
 800860a:	d027      	beq.n	800865c <__pow5mult+0x74>
 800860c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800860e:	b944      	cbnz	r4, 8008622 <__pow5mult+0x3a>
 8008610:	f240 2171 	movw	r1, #625	; 0x271
 8008614:	4630      	mov	r0, r6
 8008616:	f7ff ff29 	bl	800846c <__i2b>
 800861a:	2300      	movs	r3, #0
 800861c:	4604      	mov	r4, r0
 800861e:	64b0      	str	r0, [r6, #72]	; 0x48
 8008620:	6003      	str	r3, [r0, #0]
 8008622:	f04f 0900 	mov.w	r9, #0
 8008626:	07eb      	lsls	r3, r5, #31
 8008628:	d50a      	bpl.n	8008640 <__pow5mult+0x58>
 800862a:	4639      	mov	r1, r7
 800862c:	4622      	mov	r2, r4
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff ff32 	bl	8008498 <__multiply>
 8008634:	4680      	mov	r8, r0
 8008636:	4639      	mov	r1, r7
 8008638:	4630      	mov	r0, r6
 800863a:	f7ff fe7a 	bl	8008332 <_Bfree>
 800863e:	4647      	mov	r7, r8
 8008640:	106d      	asrs	r5, r5, #1
 8008642:	d00b      	beq.n	800865c <__pow5mult+0x74>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	b938      	cbnz	r0, 8008658 <__pow5mult+0x70>
 8008648:	4622      	mov	r2, r4
 800864a:	4621      	mov	r1, r4
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff ff23 	bl	8008498 <__multiply>
 8008652:	6020      	str	r0, [r4, #0]
 8008654:	f8c0 9000 	str.w	r9, [r0]
 8008658:	4604      	mov	r4, r0
 800865a:	e7e4      	b.n	8008626 <__pow5mult+0x3e>
 800865c:	4638      	mov	r0, r7
 800865e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008662:	bf00      	nop
 8008664:	08020038 	.word	0x08020038

08008668 <__lshift>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	4607      	mov	r7, r0
 8008670:	4691      	mov	r9, r2
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	6849      	ldr	r1, [r1, #4]
 8008676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800867a:	68a3      	ldr	r3, [r4, #8]
 800867c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008680:	f108 0601 	add.w	r6, r8, #1
 8008684:	42b3      	cmp	r3, r6
 8008686:	db0b      	blt.n	80086a0 <__lshift+0x38>
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff fe2d 	bl	80082e8 <_Balloc>
 800868e:	4605      	mov	r5, r0
 8008690:	b948      	cbnz	r0, 80086a6 <__lshift+0x3e>
 8008692:	4602      	mov	r2, r0
 8008694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008698:	4b29      	ldr	r3, [pc, #164]	; (8008740 <__lshift+0xd8>)
 800869a:	482a      	ldr	r0, [pc, #168]	; (8008744 <__lshift+0xdc>)
 800869c:	f000 fa7a 	bl	8008b94 <__assert_func>
 80086a0:	3101      	adds	r1, #1
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	e7ee      	b.n	8008684 <__lshift+0x1c>
 80086a6:	2300      	movs	r3, #0
 80086a8:	f100 0114 	add.w	r1, r0, #20
 80086ac:	f100 0210 	add.w	r2, r0, #16
 80086b0:	4618      	mov	r0, r3
 80086b2:	4553      	cmp	r3, sl
 80086b4:	db37      	blt.n	8008726 <__lshift+0xbe>
 80086b6:	6920      	ldr	r0, [r4, #16]
 80086b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086bc:	f104 0314 	add.w	r3, r4, #20
 80086c0:	f019 091f 	ands.w	r9, r9, #31
 80086c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80086cc:	d02f      	beq.n	800872e <__lshift+0xc6>
 80086ce:	468a      	mov	sl, r1
 80086d0:	f04f 0c00 	mov.w	ip, #0
 80086d4:	f1c9 0e20 	rsb	lr, r9, #32
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	fa02 f209 	lsl.w	r2, r2, r9
 80086de:	ea42 020c 	orr.w	r2, r2, ip
 80086e2:	f84a 2b04 	str.w	r2, [sl], #4
 80086e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ea:	4298      	cmp	r0, r3
 80086ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80086f0:	d8f2      	bhi.n	80086d8 <__lshift+0x70>
 80086f2:	1b03      	subs	r3, r0, r4
 80086f4:	3b15      	subs	r3, #21
 80086f6:	f023 0303 	bic.w	r3, r3, #3
 80086fa:	3304      	adds	r3, #4
 80086fc:	f104 0215 	add.w	r2, r4, #21
 8008700:	4290      	cmp	r0, r2
 8008702:	bf38      	it	cc
 8008704:	2304      	movcc	r3, #4
 8008706:	f841 c003 	str.w	ip, [r1, r3]
 800870a:	f1bc 0f00 	cmp.w	ip, #0
 800870e:	d001      	beq.n	8008714 <__lshift+0xac>
 8008710:	f108 0602 	add.w	r6, r8, #2
 8008714:	3e01      	subs	r6, #1
 8008716:	4638      	mov	r0, r7
 8008718:	4621      	mov	r1, r4
 800871a:	612e      	str	r6, [r5, #16]
 800871c:	f7ff fe09 	bl	8008332 <_Bfree>
 8008720:	4628      	mov	r0, r5
 8008722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008726:	f842 0f04 	str.w	r0, [r2, #4]!
 800872a:	3301      	adds	r3, #1
 800872c:	e7c1      	b.n	80086b2 <__lshift+0x4a>
 800872e:	3904      	subs	r1, #4
 8008730:	f853 2b04 	ldr.w	r2, [r3], #4
 8008734:	4298      	cmp	r0, r3
 8008736:	f841 2f04 	str.w	r2, [r1, #4]!
 800873a:	d8f9      	bhi.n	8008730 <__lshift+0xc8>
 800873c:	e7ea      	b.n	8008714 <__lshift+0xac>
 800873e:	bf00      	nop
 8008740:	0801fe79 	.word	0x0801fe79
 8008744:	0801fee5 	.word	0x0801fee5

08008748 <__mcmp>:
 8008748:	4603      	mov	r3, r0
 800874a:	690a      	ldr	r2, [r1, #16]
 800874c:	6900      	ldr	r0, [r0, #16]
 800874e:	b530      	push	{r4, r5, lr}
 8008750:	1a80      	subs	r0, r0, r2
 8008752:	d10d      	bne.n	8008770 <__mcmp+0x28>
 8008754:	3314      	adds	r3, #20
 8008756:	3114      	adds	r1, #20
 8008758:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800875c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008768:	4295      	cmp	r5, r2
 800876a:	d002      	beq.n	8008772 <__mcmp+0x2a>
 800876c:	d304      	bcc.n	8008778 <__mcmp+0x30>
 800876e:	2001      	movs	r0, #1
 8008770:	bd30      	pop	{r4, r5, pc}
 8008772:	42a3      	cmp	r3, r4
 8008774:	d3f4      	bcc.n	8008760 <__mcmp+0x18>
 8008776:	e7fb      	b.n	8008770 <__mcmp+0x28>
 8008778:	f04f 30ff 	mov.w	r0, #4294967295
 800877c:	e7f8      	b.n	8008770 <__mcmp+0x28>
	...

08008780 <__mdiff>:
 8008780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	460d      	mov	r5, r1
 8008786:	4607      	mov	r7, r0
 8008788:	4611      	mov	r1, r2
 800878a:	4628      	mov	r0, r5
 800878c:	4614      	mov	r4, r2
 800878e:	f7ff ffdb 	bl	8008748 <__mcmp>
 8008792:	1e06      	subs	r6, r0, #0
 8008794:	d111      	bne.n	80087ba <__mdiff+0x3a>
 8008796:	4631      	mov	r1, r6
 8008798:	4638      	mov	r0, r7
 800879a:	f7ff fda5 	bl	80082e8 <_Balloc>
 800879e:	4602      	mov	r2, r0
 80087a0:	b928      	cbnz	r0, 80087ae <__mdiff+0x2e>
 80087a2:	f240 2132 	movw	r1, #562	; 0x232
 80087a6:	4b3a      	ldr	r3, [pc, #232]	; (8008890 <__mdiff+0x110>)
 80087a8:	483a      	ldr	r0, [pc, #232]	; (8008894 <__mdiff+0x114>)
 80087aa:	f000 f9f3 	bl	8008b94 <__assert_func>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80087b4:	4610      	mov	r0, r2
 80087b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ba:	bfa4      	itt	ge
 80087bc:	4623      	movge	r3, r4
 80087be:	462c      	movge	r4, r5
 80087c0:	4638      	mov	r0, r7
 80087c2:	6861      	ldr	r1, [r4, #4]
 80087c4:	bfa6      	itte	ge
 80087c6:	461d      	movge	r5, r3
 80087c8:	2600      	movge	r6, #0
 80087ca:	2601      	movlt	r6, #1
 80087cc:	f7ff fd8c 	bl	80082e8 <_Balloc>
 80087d0:	4602      	mov	r2, r0
 80087d2:	b918      	cbnz	r0, 80087dc <__mdiff+0x5c>
 80087d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80087d8:	4b2d      	ldr	r3, [pc, #180]	; (8008890 <__mdiff+0x110>)
 80087da:	e7e5      	b.n	80087a8 <__mdiff+0x28>
 80087dc:	f102 0814 	add.w	r8, r2, #20
 80087e0:	46c2      	mov	sl, r8
 80087e2:	f04f 0c00 	mov.w	ip, #0
 80087e6:	6927      	ldr	r7, [r4, #16]
 80087e8:	60c6      	str	r6, [r0, #12]
 80087ea:	692e      	ldr	r6, [r5, #16]
 80087ec:	f104 0014 	add.w	r0, r4, #20
 80087f0:	f105 0914 	add.w	r9, r5, #20
 80087f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80087f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087fc:	3410      	adds	r4, #16
 80087fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008802:	f859 3b04 	ldr.w	r3, [r9], #4
 8008806:	fa1f f18b 	uxth.w	r1, fp
 800880a:	448c      	add	ip, r1
 800880c:	b299      	uxth	r1, r3
 800880e:	0c1b      	lsrs	r3, r3, #16
 8008810:	ebac 0101 	sub.w	r1, ip, r1
 8008814:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008818:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800881c:	b289      	uxth	r1, r1
 800881e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008822:	454e      	cmp	r6, r9
 8008824:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008828:	f84a 3b04 	str.w	r3, [sl], #4
 800882c:	d8e7      	bhi.n	80087fe <__mdiff+0x7e>
 800882e:	1b73      	subs	r3, r6, r5
 8008830:	3b15      	subs	r3, #21
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	3515      	adds	r5, #21
 8008838:	3304      	adds	r3, #4
 800883a:	42ae      	cmp	r6, r5
 800883c:	bf38      	it	cc
 800883e:	2304      	movcc	r3, #4
 8008840:	4418      	add	r0, r3
 8008842:	4443      	add	r3, r8
 8008844:	461e      	mov	r6, r3
 8008846:	4605      	mov	r5, r0
 8008848:	4575      	cmp	r5, lr
 800884a:	d30e      	bcc.n	800886a <__mdiff+0xea>
 800884c:	f10e 0103 	add.w	r1, lr, #3
 8008850:	1a09      	subs	r1, r1, r0
 8008852:	f021 0103 	bic.w	r1, r1, #3
 8008856:	3803      	subs	r0, #3
 8008858:	4586      	cmp	lr, r0
 800885a:	bf38      	it	cc
 800885c:	2100      	movcc	r1, #0
 800885e:	4419      	add	r1, r3
 8008860:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008864:	b18b      	cbz	r3, 800888a <__mdiff+0x10a>
 8008866:	6117      	str	r7, [r2, #16]
 8008868:	e7a4      	b.n	80087b4 <__mdiff+0x34>
 800886a:	f855 8b04 	ldr.w	r8, [r5], #4
 800886e:	fa1f f188 	uxth.w	r1, r8
 8008872:	4461      	add	r1, ip
 8008874:	140c      	asrs	r4, r1, #16
 8008876:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800887a:	b289      	uxth	r1, r1
 800887c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008880:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008884:	f846 1b04 	str.w	r1, [r6], #4
 8008888:	e7de      	b.n	8008848 <__mdiff+0xc8>
 800888a:	3f01      	subs	r7, #1
 800888c:	e7e8      	b.n	8008860 <__mdiff+0xe0>
 800888e:	bf00      	nop
 8008890:	0801fe79 	.word	0x0801fe79
 8008894:	0801fee5 	.word	0x0801fee5

08008898 <__d2b>:
 8008898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800889c:	2101      	movs	r1, #1
 800889e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80088a2:	4690      	mov	r8, r2
 80088a4:	461d      	mov	r5, r3
 80088a6:	f7ff fd1f 	bl	80082e8 <_Balloc>
 80088aa:	4604      	mov	r4, r0
 80088ac:	b930      	cbnz	r0, 80088bc <__d2b+0x24>
 80088ae:	4602      	mov	r2, r0
 80088b0:	f240 310a 	movw	r1, #778	; 0x30a
 80088b4:	4b24      	ldr	r3, [pc, #144]	; (8008948 <__d2b+0xb0>)
 80088b6:	4825      	ldr	r0, [pc, #148]	; (800894c <__d2b+0xb4>)
 80088b8:	f000 f96c 	bl	8008b94 <__assert_func>
 80088bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80088c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80088c4:	bb2d      	cbnz	r5, 8008912 <__d2b+0x7a>
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	f1b8 0300 	subs.w	r3, r8, #0
 80088cc:	d026      	beq.n	800891c <__d2b+0x84>
 80088ce:	4668      	mov	r0, sp
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	f7ff fd9d 	bl	8008410 <__lo0bits>
 80088d6:	9900      	ldr	r1, [sp, #0]
 80088d8:	b1f0      	cbz	r0, 8008918 <__d2b+0x80>
 80088da:	9a01      	ldr	r2, [sp, #4]
 80088dc:	f1c0 0320 	rsb	r3, r0, #32
 80088e0:	fa02 f303 	lsl.w	r3, r2, r3
 80088e4:	430b      	orrs	r3, r1
 80088e6:	40c2      	lsrs	r2, r0
 80088e8:	6163      	str	r3, [r4, #20]
 80088ea:	9201      	str	r2, [sp, #4]
 80088ec:	9b01      	ldr	r3, [sp, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bf14      	ite	ne
 80088f2:	2102      	movne	r1, #2
 80088f4:	2101      	moveq	r1, #1
 80088f6:	61a3      	str	r3, [r4, #24]
 80088f8:	6121      	str	r1, [r4, #16]
 80088fa:	b1c5      	cbz	r5, 800892e <__d2b+0x96>
 80088fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008900:	4405      	add	r5, r0
 8008902:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008906:	603d      	str	r5, [r7, #0]
 8008908:	6030      	str	r0, [r6, #0]
 800890a:	4620      	mov	r0, r4
 800890c:	b002      	add	sp, #8
 800890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008916:	e7d6      	b.n	80088c6 <__d2b+0x2e>
 8008918:	6161      	str	r1, [r4, #20]
 800891a:	e7e7      	b.n	80088ec <__d2b+0x54>
 800891c:	a801      	add	r0, sp, #4
 800891e:	f7ff fd77 	bl	8008410 <__lo0bits>
 8008922:	2101      	movs	r1, #1
 8008924:	9b01      	ldr	r3, [sp, #4]
 8008926:	6121      	str	r1, [r4, #16]
 8008928:	6163      	str	r3, [r4, #20]
 800892a:	3020      	adds	r0, #32
 800892c:	e7e5      	b.n	80088fa <__d2b+0x62>
 800892e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008932:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008936:	6038      	str	r0, [r7, #0]
 8008938:	6918      	ldr	r0, [r3, #16]
 800893a:	f7ff fd49 	bl	80083d0 <__hi0bits>
 800893e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008942:	6031      	str	r1, [r6, #0]
 8008944:	e7e1      	b.n	800890a <__d2b+0x72>
 8008946:	bf00      	nop
 8008948:	0801fe79 	.word	0x0801fe79
 800894c:	0801fee5 	.word	0x0801fee5

08008950 <frexp>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	4617      	mov	r7, r2
 8008954:	2200      	movs	r2, #0
 8008956:	603a      	str	r2, [r7, #0]
 8008958:	4a14      	ldr	r2, [pc, #80]	; (80089ac <frexp+0x5c>)
 800895a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800895e:	4296      	cmp	r6, r2
 8008960:	4604      	mov	r4, r0
 8008962:	460d      	mov	r5, r1
 8008964:	460b      	mov	r3, r1
 8008966:	dc1e      	bgt.n	80089a6 <frexp+0x56>
 8008968:	4602      	mov	r2, r0
 800896a:	4332      	orrs	r2, r6
 800896c:	d01b      	beq.n	80089a6 <frexp+0x56>
 800896e:	4a10      	ldr	r2, [pc, #64]	; (80089b0 <frexp+0x60>)
 8008970:	400a      	ands	r2, r1
 8008972:	b952      	cbnz	r2, 800898a <frexp+0x3a>
 8008974:	2200      	movs	r2, #0
 8008976:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <frexp+0x64>)
 8008978:	f7f7 fe1a 	bl	80005b0 <__aeabi_dmul>
 800897c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8008980:	4604      	mov	r4, r0
 8008982:	460b      	mov	r3, r1
 8008984:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008988:	603a      	str	r2, [r7, #0]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	1536      	asrs	r6, r6, #20
 800898e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008992:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 8008996:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800899a:	4416      	add	r6, r2
 800899c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80089a0:	603e      	str	r6, [r7, #0]
 80089a2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80089a6:	4620      	mov	r0, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ac:	7fefffff 	.word	0x7fefffff
 80089b0:	7ff00000 	.word	0x7ff00000
 80089b4:	43500000 	.word	0x43500000

080089b8 <_sbrk_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	2300      	movs	r3, #0
 80089bc:	4d05      	ldr	r5, [pc, #20]	; (80089d4 <_sbrk_r+0x1c>)
 80089be:	4604      	mov	r4, r0
 80089c0:	4608      	mov	r0, r1
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	f7fa f84a 	bl	8002a5c <_sbrk>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_sbrk_r+0x1a>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_sbrk_r+0x1a>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	20000b7c 	.word	0x20000b7c

080089d8 <strncpy>:
 80089d8:	4603      	mov	r3, r0
 80089da:	b510      	push	{r4, lr}
 80089dc:	3901      	subs	r1, #1
 80089de:	b132      	cbz	r2, 80089ee <strncpy+0x16>
 80089e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80089e4:	3a01      	subs	r2, #1
 80089e6:	f803 4b01 	strb.w	r4, [r3], #1
 80089ea:	2c00      	cmp	r4, #0
 80089ec:	d1f7      	bne.n	80089de <strncpy+0x6>
 80089ee:	2100      	movs	r1, #0
 80089f0:	441a      	add	r2, r3
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d100      	bne.n	80089f8 <strncpy+0x20>
 80089f6:	bd10      	pop	{r4, pc}
 80089f8:	f803 1b01 	strb.w	r1, [r3], #1
 80089fc:	e7f9      	b.n	80089f2 <strncpy+0x1a>

080089fe <__ssprint_r>:
 80089fe:	6893      	ldr	r3, [r2, #8]
 8008a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	4680      	mov	r8, r0
 8008a06:	460c      	mov	r4, r1
 8008a08:	4617      	mov	r7, r2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d061      	beq.n	8008ad2 <__ssprint_r+0xd4>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	469b      	mov	fp, r3
 8008a12:	f8d2 a000 	ldr.w	sl, [r2]
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	f1bb 0f00 	cmp.w	fp, #0
 8008a1c:	d02b      	beq.n	8008a76 <__ssprint_r+0x78>
 8008a1e:	68a6      	ldr	r6, [r4, #8]
 8008a20:	455e      	cmp	r6, fp
 8008a22:	d844      	bhi.n	8008aae <__ssprint_r+0xb0>
 8008a24:	89a2      	ldrh	r2, [r4, #12]
 8008a26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a2a:	d03e      	beq.n	8008aaa <__ssprint_r+0xac>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	6921      	ldr	r1, [r4, #16]
 8008a30:	6965      	ldr	r5, [r4, #20]
 8008a32:	eba0 0901 	sub.w	r9, r0, r1
 8008a36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a3e:	f109 0001 	add.w	r0, r9, #1
 8008a42:	106d      	asrs	r5, r5, #1
 8008a44:	4458      	add	r0, fp
 8008a46:	4285      	cmp	r5, r0
 8008a48:	bf38      	it	cc
 8008a4a:	4605      	movcc	r5, r0
 8008a4c:	0553      	lsls	r3, r2, #21
 8008a4e:	d545      	bpl.n	8008adc <__ssprint_r+0xde>
 8008a50:	4629      	mov	r1, r5
 8008a52:	4640      	mov	r0, r8
 8008a54:	f7ff f9e4 	bl	8007e20 <_malloc_r>
 8008a58:	4606      	mov	r6, r0
 8008a5a:	b9a0      	cbnz	r0, 8008a86 <__ssprint_r+0x88>
 8008a5c:	230c      	movs	r3, #12
 8008a5e:	f8c8 3000 	str.w	r3, [r8]
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a6c:	81a3      	strh	r3, [r4, #12]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8008a74:	e02f      	b.n	8008ad6 <__ssprint_r+0xd8>
 8008a76:	f8da 3000 	ldr.w	r3, [sl]
 8008a7a:	f8da b004 	ldr.w	fp, [sl, #4]
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	f10a 0a08 	add.w	sl, sl, #8
 8008a84:	e7c8      	b.n	8008a18 <__ssprint_r+0x1a>
 8008a86:	464a      	mov	r2, r9
 8008a88:	6921      	ldr	r1, [r4, #16]
 8008a8a:	f7ff fc13 	bl	80082b4 <memcpy>
 8008a8e:	89a2      	ldrh	r2, [r4, #12]
 8008a90:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008a94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a98:	81a2      	strh	r2, [r4, #12]
 8008a9a:	6126      	str	r6, [r4, #16]
 8008a9c:	444e      	add	r6, r9
 8008a9e:	6026      	str	r6, [r4, #0]
 8008aa0:	465e      	mov	r6, fp
 8008aa2:	6165      	str	r5, [r4, #20]
 8008aa4:	eba5 0509 	sub.w	r5, r5, r9
 8008aa8:	60a5      	str	r5, [r4, #8]
 8008aaa:	455e      	cmp	r6, fp
 8008aac:	d900      	bls.n	8008ab0 <__ssprint_r+0xb2>
 8008aae:	465e      	mov	r6, fp
 8008ab0:	4632      	mov	r2, r6
 8008ab2:	9901      	ldr	r1, [sp, #4]
 8008ab4:	6820      	ldr	r0, [r4, #0]
 8008ab6:	f000 f8eb 	bl	8008c90 <memmove>
 8008aba:	68a2      	ldr	r2, [r4, #8]
 8008abc:	1b92      	subs	r2, r2, r6
 8008abe:	60a2      	str	r2, [r4, #8]
 8008ac0:	6822      	ldr	r2, [r4, #0]
 8008ac2:	4432      	add	r2, r6
 8008ac4:	6022      	str	r2, [r4, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	eba2 030b 	sub.w	r3, r2, fp
 8008acc:	60bb      	str	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1d1      	bne.n	8008a76 <__ssprint_r+0x78>
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	b003      	add	sp, #12
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	462a      	mov	r2, r5
 8008ade:	4640      	mov	r0, r8
 8008ae0:	f000 f8f0 	bl	8008cc4 <_realloc_r>
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d1d7      	bne.n	8008a9a <__ssprint_r+0x9c>
 8008aea:	4640      	mov	r0, r8
 8008aec:	6921      	ldr	r1, [r4, #16]
 8008aee:	f7ff f8cf 	bl	8007c90 <_free_r>
 8008af2:	e7b3      	b.n	8008a5c <__ssprint_r+0x5e>

08008af4 <sysconf>:
 8008af4:	2808      	cmp	r0, #8
 8008af6:	b508      	push	{r3, lr}
 8008af8:	d006      	beq.n	8008b08 <sysconf+0x14>
 8008afa:	f7fc ffe9 	bl	8005ad0 <__errno>
 8008afe:	2316      	movs	r3, #22
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	f04f 30ff 	mov.w	r0, #4294967295
 8008b06:	bd08      	pop	{r3, pc}
 8008b08:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008b0c:	e7fb      	b.n	8008b06 <sysconf+0x12>
	...

08008b10 <__register_exitproc>:
 8008b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b14:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008b8c <__register_exitproc+0x7c>
 8008b18:	4606      	mov	r6, r0
 8008b1a:	f8da 0000 	ldr.w	r0, [sl]
 8008b1e:	4698      	mov	r8, r3
 8008b20:	460f      	mov	r7, r1
 8008b22:	4691      	mov	r9, r2
 8008b24:	f7ff f97a 	bl	8007e1c <__retarget_lock_acquire_recursive>
 8008b28:	4b19      	ldr	r3, [pc, #100]	; (8008b90 <__register_exitproc+0x80>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8008b30:	b91c      	cbnz	r4, 8008b3a <__register_exitproc+0x2a>
 8008b32:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8008b36:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8008b3a:	6865      	ldr	r5, [r4, #4]
 8008b3c:	f8da 0000 	ldr.w	r0, [sl]
 8008b40:	2d1f      	cmp	r5, #31
 8008b42:	dd05      	ble.n	8008b50 <__register_exitproc+0x40>
 8008b44:	f7ff f96b 	bl	8007e1e <__retarget_lock_release_recursive>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b50:	b19e      	cbz	r6, 8008b7a <__register_exitproc+0x6a>
 8008b52:	2201      	movs	r2, #1
 8008b54:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8008b58:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8008b5c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8008b60:	40aa      	lsls	r2, r5
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8008b68:	2e02      	cmp	r6, #2
 8008b6a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8008b6e:	bf02      	ittt	eq
 8008b70:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8008b74:	4313      	orreq	r3, r2
 8008b76:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8008b7a:	1c6b      	adds	r3, r5, #1
 8008b7c:	3502      	adds	r5, #2
 8008b7e:	6063      	str	r3, [r4, #4]
 8008b80:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8008b84:	f7ff f94b 	bl	8007e1e <__retarget_lock_release_recursive>
 8008b88:	2000      	movs	r0, #0
 8008b8a:	e7df      	b.n	8008b4c <__register_exitproc+0x3c>
 8008b8c:	20000470 	.word	0x20000470
 8008b90:	0801fe14 	.word	0x0801fe14

08008b94 <__assert_func>:
 8008b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b96:	4614      	mov	r4, r2
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4b09      	ldr	r3, [pc, #36]	; (8008bc0 <__assert_func+0x2c>)
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68d8      	ldr	r0, [r3, #12]
 8008ba2:	b14c      	cbz	r4, 8008bb8 <__assert_func+0x24>
 8008ba4:	4b07      	ldr	r3, [pc, #28]	; (8008bc4 <__assert_func+0x30>)
 8008ba6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008baa:	9100      	str	r1, [sp, #0]
 8008bac:	462b      	mov	r3, r5
 8008bae:	4906      	ldr	r1, [pc, #24]	; (8008bc8 <__assert_func+0x34>)
 8008bb0:	f000 f844 	bl	8008c3c <fiprintf>
 8008bb4:	f000 ff94 	bl	8009ae0 <abort>
 8008bb8:	4b04      	ldr	r3, [pc, #16]	; (8008bcc <__assert_func+0x38>)
 8008bba:	461c      	mov	r4, r3
 8008bbc:	e7f3      	b.n	8008ba6 <__assert_func+0x12>
 8008bbe:	bf00      	nop
 8008bc0:	20000040 	.word	0x20000040
 8008bc4:	08020044 	.word	0x08020044
 8008bc8:	08020051 	.word	0x08020051
 8008bcc:	0802007f 	.word	0x0802007f

08008bd0 <_calloc_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	fba1 1502 	umull	r1, r5, r1, r2
 8008bd6:	b92d      	cbnz	r5, 8008be4 <_calloc_r+0x14>
 8008bd8:	f7ff f922 	bl	8007e20 <_malloc_r>
 8008bdc:	4604      	mov	r4, r0
 8008bde:	b938      	cbnz	r0, 8008bf0 <_calloc_r+0x20>
 8008be0:	4620      	mov	r0, r4
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	f7fc ff74 	bl	8005ad0 <__errno>
 8008be8:	230c      	movs	r3, #12
 8008bea:	2400      	movs	r4, #0
 8008bec:	6003      	str	r3, [r0, #0]
 8008bee:	e7f7      	b.n	8008be0 <_calloc_r+0x10>
 8008bf0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008bf4:	f022 0203 	bic.w	r2, r2, #3
 8008bf8:	3a04      	subs	r2, #4
 8008bfa:	2a24      	cmp	r2, #36	; 0x24
 8008bfc:	d819      	bhi.n	8008c32 <_calloc_r+0x62>
 8008bfe:	2a13      	cmp	r2, #19
 8008c00:	d915      	bls.n	8008c2e <_calloc_r+0x5e>
 8008c02:	2a1b      	cmp	r2, #27
 8008c04:	e9c0 5500 	strd	r5, r5, [r0]
 8008c08:	d806      	bhi.n	8008c18 <_calloc_r+0x48>
 8008c0a:	f100 0308 	add.w	r3, r0, #8
 8008c0e:	2200      	movs	r2, #0
 8008c10:	e9c3 2200 	strd	r2, r2, [r3]
 8008c14:	609a      	str	r2, [r3, #8]
 8008c16:	e7e3      	b.n	8008be0 <_calloc_r+0x10>
 8008c18:	2a24      	cmp	r2, #36	; 0x24
 8008c1a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8008c1e:	bf11      	iteee	ne
 8008c20:	f100 0310 	addne.w	r3, r0, #16
 8008c24:	6105      	streq	r5, [r0, #16]
 8008c26:	f100 0318 	addeq.w	r3, r0, #24
 8008c2a:	6145      	streq	r5, [r0, #20]
 8008c2c:	e7ef      	b.n	8008c0e <_calloc_r+0x3e>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	e7ed      	b.n	8008c0e <_calloc_r+0x3e>
 8008c32:	4629      	mov	r1, r5
 8008c34:	f7fc ff76 	bl	8005b24 <memset>
 8008c38:	e7d2      	b.n	8008be0 <_calloc_r+0x10>
	...

08008c3c <fiprintf>:
 8008c3c:	b40e      	push	{r1, r2, r3}
 8008c3e:	b503      	push	{r0, r1, lr}
 8008c40:	4601      	mov	r1, r0
 8008c42:	ab03      	add	r3, sp, #12
 8008c44:	4805      	ldr	r0, [pc, #20]	; (8008c5c <fiprintf+0x20>)
 8008c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4a:	6800      	ldr	r0, [r0, #0]
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	f000 fa13 	bl	8009078 <_vfiprintf_r>
 8008c52:	b002      	add	sp, #8
 8008c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c58:	b003      	add	sp, #12
 8008c5a:	4770      	bx	lr
 8008c5c:	20000040 	.word	0x20000040

08008c60 <__locale_mb_cur_max>:
 8008c60:	4b01      	ldr	r3, [pc, #4]	; (8008c68 <__locale_mb_cur_max+0x8>)
 8008c62:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008c66:	4770      	bx	lr
 8008c68:	20000884 	.word	0x20000884

08008c6c <__ascii_mbtowc>:
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	b901      	cbnz	r1, 8008c72 <__ascii_mbtowc+0x6>
 8008c70:	a901      	add	r1, sp, #4
 8008c72:	b142      	cbz	r2, 8008c86 <__ascii_mbtowc+0x1a>
 8008c74:	b14b      	cbz	r3, 8008c8a <__ascii_mbtowc+0x1e>
 8008c76:	7813      	ldrb	r3, [r2, #0]
 8008c78:	600b      	str	r3, [r1, #0]
 8008c7a:	7812      	ldrb	r2, [r2, #0]
 8008c7c:	1e10      	subs	r0, r2, #0
 8008c7e:	bf18      	it	ne
 8008c80:	2001      	movne	r0, #1
 8008c82:	b002      	add	sp, #8
 8008c84:	4770      	bx	lr
 8008c86:	4610      	mov	r0, r2
 8008c88:	e7fb      	b.n	8008c82 <__ascii_mbtowc+0x16>
 8008c8a:	f06f 0001 	mvn.w	r0, #1
 8008c8e:	e7f8      	b.n	8008c82 <__ascii_mbtowc+0x16>

08008c90 <memmove>:
 8008c90:	4288      	cmp	r0, r1
 8008c92:	b510      	push	{r4, lr}
 8008c94:	eb01 0402 	add.w	r4, r1, r2
 8008c98:	d902      	bls.n	8008ca0 <memmove+0x10>
 8008c9a:	4284      	cmp	r4, r0
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	d807      	bhi.n	8008cb0 <memmove+0x20>
 8008ca0:	1e43      	subs	r3, r0, #1
 8008ca2:	42a1      	cmp	r1, r4
 8008ca4:	d008      	beq.n	8008cb8 <memmove+0x28>
 8008ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cae:	e7f8      	b.n	8008ca2 <memmove+0x12>
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	4402      	add	r2, r0
 8008cb4:	428a      	cmp	r2, r1
 8008cb6:	d100      	bne.n	8008cba <memmove+0x2a>
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cc2:	e7f7      	b.n	8008cb4 <memmove+0x24>

08008cc4 <_realloc_r>:
 8008cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4681      	mov	r9, r0
 8008ccc:	4611      	mov	r1, r2
 8008cce:	b924      	cbnz	r4, 8008cda <_realloc_r+0x16>
 8008cd0:	b003      	add	sp, #12
 8008cd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd6:	f7ff b8a3 	b.w	8007e20 <_malloc_r>
 8008cda:	9201      	str	r2, [sp, #4]
 8008cdc:	f7ff faf8 	bl	80082d0 <__malloc_lock>
 8008ce0:	9901      	ldr	r1, [sp, #4]
 8008ce2:	f101 080b 	add.w	r8, r1, #11
 8008ce6:	f1b8 0f16 	cmp.w	r8, #22
 8008cea:	d90b      	bls.n	8008d04 <_realloc_r+0x40>
 8008cec:	f038 0807 	bics.w	r8, r8, #7
 8008cf0:	d50a      	bpl.n	8008d08 <_realloc_r+0x44>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	f04f 0b00 	mov.w	fp, #0
 8008cf8:	f8c9 3000 	str.w	r3, [r9]
 8008cfc:	4658      	mov	r0, fp
 8008cfe:	b003      	add	sp, #12
 8008d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d04:	f04f 0810 	mov.w	r8, #16
 8008d08:	4588      	cmp	r8, r1
 8008d0a:	d3f2      	bcc.n	8008cf2 <_realloc_r+0x2e>
 8008d0c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008d10:	f1a4 0a08 	sub.w	sl, r4, #8
 8008d14:	f025 0603 	bic.w	r6, r5, #3
 8008d18:	45b0      	cmp	r8, r6
 8008d1a:	f340 8171 	ble.w	8009000 <_realloc_r+0x33c>
 8008d1e:	4a9c      	ldr	r2, [pc, #624]	; (8008f90 <_realloc_r+0x2cc>)
 8008d20:	eb0a 0306 	add.w	r3, sl, r6
 8008d24:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	459c      	cmp	ip, r3
 8008d2c:	d005      	beq.n	8008d3a <_realloc_r+0x76>
 8008d2e:	f022 0001 	bic.w	r0, r2, #1
 8008d32:	4418      	add	r0, r3
 8008d34:	6840      	ldr	r0, [r0, #4]
 8008d36:	07c7      	lsls	r7, r0, #31
 8008d38:	d427      	bmi.n	8008d8a <_realloc_r+0xc6>
 8008d3a:	f022 0203 	bic.w	r2, r2, #3
 8008d3e:	459c      	cmp	ip, r3
 8008d40:	eb06 0702 	add.w	r7, r6, r2
 8008d44:	d119      	bne.n	8008d7a <_realloc_r+0xb6>
 8008d46:	f108 0010 	add.w	r0, r8, #16
 8008d4a:	42b8      	cmp	r0, r7
 8008d4c:	dc1f      	bgt.n	8008d8e <_realloc_r+0xca>
 8008d4e:	4a90      	ldr	r2, [pc, #576]	; (8008f90 <_realloc_r+0x2cc>)
 8008d50:	eba7 0708 	sub.w	r7, r7, r8
 8008d54:	eb0a 0308 	add.w	r3, sl, r8
 8008d58:	f047 0701 	orr.w	r7, r7, #1
 8008d5c:	6093      	str	r3, [r2, #8]
 8008d5e:	605f      	str	r7, [r3, #4]
 8008d60:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008d64:	4648      	mov	r0, r9
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	ea43 0308 	orr.w	r3, r3, r8
 8008d6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d72:	f7ff fab3 	bl	80082dc <__malloc_unlock>
 8008d76:	46a3      	mov	fp, r4
 8008d78:	e7c0      	b.n	8008cfc <_realloc_r+0x38>
 8008d7a:	45b8      	cmp	r8, r7
 8008d7c:	dc07      	bgt.n	8008d8e <_realloc_r+0xca>
 8008d7e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8008d82:	60da      	str	r2, [r3, #12]
 8008d84:	6093      	str	r3, [r2, #8]
 8008d86:	4655      	mov	r5, sl
 8008d88:	e080      	b.n	8008e8c <_realloc_r+0x1c8>
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	07e8      	lsls	r0, r5, #31
 8008d90:	f100 80e8 	bmi.w	8008f64 <_realloc_r+0x2a0>
 8008d94:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008d98:	ebaa 0505 	sub.w	r5, sl, r5
 8008d9c:	6868      	ldr	r0, [r5, #4]
 8008d9e:	f020 0003 	bic.w	r0, r0, #3
 8008da2:	eb00 0b06 	add.w	fp, r0, r6
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80a7 	beq.w	8008efa <_realloc_r+0x236>
 8008dac:	459c      	cmp	ip, r3
 8008dae:	eb02 070b 	add.w	r7, r2, fp
 8008db2:	d14b      	bne.n	8008e4c <_realloc_r+0x188>
 8008db4:	f108 0310 	add.w	r3, r8, #16
 8008db8:	42bb      	cmp	r3, r7
 8008dba:	f300 809e 	bgt.w	8008efa <_realloc_r+0x236>
 8008dbe:	46ab      	mov	fp, r5
 8008dc0:	68eb      	ldr	r3, [r5, #12]
 8008dc2:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8008dc6:	60d3      	str	r3, [r2, #12]
 8008dc8:	609a      	str	r2, [r3, #8]
 8008dca:	1f32      	subs	r2, r6, #4
 8008dcc:	2a24      	cmp	r2, #36	; 0x24
 8008dce:	d838      	bhi.n	8008e42 <_realloc_r+0x17e>
 8008dd0:	2a13      	cmp	r2, #19
 8008dd2:	d934      	bls.n	8008e3e <_realloc_r+0x17a>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	2a1b      	cmp	r2, #27
 8008dd8:	60ab      	str	r3, [r5, #8]
 8008dda:	6863      	ldr	r3, [r4, #4]
 8008ddc:	60eb      	str	r3, [r5, #12]
 8008dde:	d81b      	bhi.n	8008e18 <_realloc_r+0x154>
 8008de0:	3408      	adds	r4, #8
 8008de2:	f105 0310 	add.w	r3, r5, #16
 8008de6:	6822      	ldr	r2, [r4, #0]
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	6862      	ldr	r2, [r4, #4]
 8008dec:	605a      	str	r2, [r3, #4]
 8008dee:	68a2      	ldr	r2, [r4, #8]
 8008df0:	609a      	str	r2, [r3, #8]
 8008df2:	4a67      	ldr	r2, [pc, #412]	; (8008f90 <_realloc_r+0x2cc>)
 8008df4:	eba7 0708 	sub.w	r7, r7, r8
 8008df8:	eb05 0308 	add.w	r3, r5, r8
 8008dfc:	f047 0701 	orr.w	r7, r7, #1
 8008e00:	6093      	str	r3, [r2, #8]
 8008e02:	605f      	str	r7, [r3, #4]
 8008e04:	686b      	ldr	r3, [r5, #4]
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	ea43 0308 	orr.w	r3, r3, r8
 8008e0e:	606b      	str	r3, [r5, #4]
 8008e10:	4648      	mov	r0, r9
 8008e12:	f7ff fa63 	bl	80082dc <__malloc_unlock>
 8008e16:	e771      	b.n	8008cfc <_realloc_r+0x38>
 8008e18:	68a3      	ldr	r3, [r4, #8]
 8008e1a:	2a24      	cmp	r2, #36	; 0x24
 8008e1c:	612b      	str	r3, [r5, #16]
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	bf18      	it	ne
 8008e22:	3410      	addne	r4, #16
 8008e24:	616b      	str	r3, [r5, #20]
 8008e26:	bf09      	itett	eq
 8008e28:	6923      	ldreq	r3, [r4, #16]
 8008e2a:	f105 0318 	addne.w	r3, r5, #24
 8008e2e:	61ab      	streq	r3, [r5, #24]
 8008e30:	6962      	ldreq	r2, [r4, #20]
 8008e32:	bf02      	ittt	eq
 8008e34:	f105 0320 	addeq.w	r3, r5, #32
 8008e38:	61ea      	streq	r2, [r5, #28]
 8008e3a:	3418      	addeq	r4, #24
 8008e3c:	e7d3      	b.n	8008de6 <_realloc_r+0x122>
 8008e3e:	465b      	mov	r3, fp
 8008e40:	e7d1      	b.n	8008de6 <_realloc_r+0x122>
 8008e42:	4621      	mov	r1, r4
 8008e44:	4658      	mov	r0, fp
 8008e46:	f7ff ff23 	bl	8008c90 <memmove>
 8008e4a:	e7d2      	b.n	8008df2 <_realloc_r+0x12e>
 8008e4c:	45b8      	cmp	r8, r7
 8008e4e:	dc54      	bgt.n	8008efa <_realloc_r+0x236>
 8008e50:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8008e54:	4628      	mov	r0, r5
 8008e56:	60da      	str	r2, [r3, #12]
 8008e58:	6093      	str	r3, [r2, #8]
 8008e5a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008e5e:	68eb      	ldr	r3, [r5, #12]
 8008e60:	60d3      	str	r3, [r2, #12]
 8008e62:	609a      	str	r2, [r3, #8]
 8008e64:	1f32      	subs	r2, r6, #4
 8008e66:	2a24      	cmp	r2, #36	; 0x24
 8008e68:	d843      	bhi.n	8008ef2 <_realloc_r+0x22e>
 8008e6a:	2a13      	cmp	r2, #19
 8008e6c:	d908      	bls.n	8008e80 <_realloc_r+0x1bc>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	2a1b      	cmp	r2, #27
 8008e72:	60ab      	str	r3, [r5, #8]
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	60eb      	str	r3, [r5, #12]
 8008e78:	d828      	bhi.n	8008ecc <_realloc_r+0x208>
 8008e7a:	3408      	adds	r4, #8
 8008e7c:	f105 0010 	add.w	r0, r5, #16
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	6003      	str	r3, [r0, #0]
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	6043      	str	r3, [r0, #4]
 8008e88:	68a3      	ldr	r3, [r4, #8]
 8008e8a:	6083      	str	r3, [r0, #8]
 8008e8c:	686b      	ldr	r3, [r5, #4]
 8008e8e:	eba7 0008 	sub.w	r0, r7, r8
 8008e92:	280f      	cmp	r0, #15
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	eb05 0207 	add.w	r2, r5, r7
 8008e9c:	f240 80b2 	bls.w	8009004 <_realloc_r+0x340>
 8008ea0:	eb05 0108 	add.w	r1, r5, r8
 8008ea4:	ea48 0303 	orr.w	r3, r8, r3
 8008ea8:	f040 0001 	orr.w	r0, r0, #1
 8008eac:	606b      	str	r3, [r5, #4]
 8008eae:	6048      	str	r0, [r1, #4]
 8008eb0:	6853      	ldr	r3, [r2, #4]
 8008eb2:	4648      	mov	r0, r9
 8008eb4:	f043 0301 	orr.w	r3, r3, #1
 8008eb8:	6053      	str	r3, [r2, #4]
 8008eba:	3108      	adds	r1, #8
 8008ebc:	f7fe fee8 	bl	8007c90 <_free_r>
 8008ec0:	4648      	mov	r0, r9
 8008ec2:	f7ff fa0b 	bl	80082dc <__malloc_unlock>
 8008ec6:	f105 0b08 	add.w	fp, r5, #8
 8008eca:	e717      	b.n	8008cfc <_realloc_r+0x38>
 8008ecc:	68a3      	ldr	r3, [r4, #8]
 8008ece:	2a24      	cmp	r2, #36	; 0x24
 8008ed0:	612b      	str	r3, [r5, #16]
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	bf18      	it	ne
 8008ed6:	f105 0018 	addne.w	r0, r5, #24
 8008eda:	616b      	str	r3, [r5, #20]
 8008edc:	bf09      	itett	eq
 8008ede:	6923      	ldreq	r3, [r4, #16]
 8008ee0:	3410      	addne	r4, #16
 8008ee2:	61ab      	streq	r3, [r5, #24]
 8008ee4:	6963      	ldreq	r3, [r4, #20]
 8008ee6:	bf02      	ittt	eq
 8008ee8:	f105 0020 	addeq.w	r0, r5, #32
 8008eec:	61eb      	streq	r3, [r5, #28]
 8008eee:	3418      	addeq	r4, #24
 8008ef0:	e7c6      	b.n	8008e80 <_realloc_r+0x1bc>
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f7ff fecc 	bl	8008c90 <memmove>
 8008ef8:	e7c8      	b.n	8008e8c <_realloc_r+0x1c8>
 8008efa:	45d8      	cmp	r8, fp
 8008efc:	dc32      	bgt.n	8008f64 <_realloc_r+0x2a0>
 8008efe:	4628      	mov	r0, r5
 8008f00:	68eb      	ldr	r3, [r5, #12]
 8008f02:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008f06:	60d3      	str	r3, [r2, #12]
 8008f08:	609a      	str	r2, [r3, #8]
 8008f0a:	1f32      	subs	r2, r6, #4
 8008f0c:	2a24      	cmp	r2, #36	; 0x24
 8008f0e:	d825      	bhi.n	8008f5c <_realloc_r+0x298>
 8008f10:	2a13      	cmp	r2, #19
 8008f12:	d908      	bls.n	8008f26 <_realloc_r+0x262>
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	2a1b      	cmp	r2, #27
 8008f18:	60ab      	str	r3, [r5, #8]
 8008f1a:	6863      	ldr	r3, [r4, #4]
 8008f1c:	60eb      	str	r3, [r5, #12]
 8008f1e:	d80a      	bhi.n	8008f36 <_realloc_r+0x272>
 8008f20:	3408      	adds	r4, #8
 8008f22:	f105 0010 	add.w	r0, r5, #16
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	6003      	str	r3, [r0, #0]
 8008f2a:	6863      	ldr	r3, [r4, #4]
 8008f2c:	6043      	str	r3, [r0, #4]
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	6083      	str	r3, [r0, #8]
 8008f32:	465f      	mov	r7, fp
 8008f34:	e7aa      	b.n	8008e8c <_realloc_r+0x1c8>
 8008f36:	68a3      	ldr	r3, [r4, #8]
 8008f38:	2a24      	cmp	r2, #36	; 0x24
 8008f3a:	612b      	str	r3, [r5, #16]
 8008f3c:	68e3      	ldr	r3, [r4, #12]
 8008f3e:	bf18      	it	ne
 8008f40:	f105 0018 	addne.w	r0, r5, #24
 8008f44:	616b      	str	r3, [r5, #20]
 8008f46:	bf09      	itett	eq
 8008f48:	6923      	ldreq	r3, [r4, #16]
 8008f4a:	3410      	addne	r4, #16
 8008f4c:	61ab      	streq	r3, [r5, #24]
 8008f4e:	6963      	ldreq	r3, [r4, #20]
 8008f50:	bf02      	ittt	eq
 8008f52:	f105 0020 	addeq.w	r0, r5, #32
 8008f56:	61eb      	streq	r3, [r5, #28]
 8008f58:	3418      	addeq	r4, #24
 8008f5a:	e7e4      	b.n	8008f26 <_realloc_r+0x262>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	f7ff fe97 	bl	8008c90 <memmove>
 8008f62:	e7e6      	b.n	8008f32 <_realloc_r+0x26e>
 8008f64:	4648      	mov	r0, r9
 8008f66:	f7fe ff5b 	bl	8007e20 <_malloc_r>
 8008f6a:	4683      	mov	fp, r0
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	f43f af4f 	beq.w	8008e10 <_realloc_r+0x14c>
 8008f72:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008f76:	f1a0 0208 	sub.w	r2, r0, #8
 8008f7a:	f023 0301 	bic.w	r3, r3, #1
 8008f7e:	4453      	add	r3, sl
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d107      	bne.n	8008f94 <_realloc_r+0x2d0>
 8008f84:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8008f88:	f027 0703 	bic.w	r7, r7, #3
 8008f8c:	4437      	add	r7, r6
 8008f8e:	e6fa      	b.n	8008d86 <_realloc_r+0xc2>
 8008f90:	20000474 	.word	0x20000474
 8008f94:	1f32      	subs	r2, r6, #4
 8008f96:	2a24      	cmp	r2, #36	; 0x24
 8008f98:	d82e      	bhi.n	8008ff8 <_realloc_r+0x334>
 8008f9a:	2a13      	cmp	r2, #19
 8008f9c:	d929      	bls.n	8008ff2 <_realloc_r+0x32e>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	2a1b      	cmp	r2, #27
 8008fa2:	6003      	str	r3, [r0, #0]
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	6043      	str	r3, [r0, #4]
 8008fa8:	d80e      	bhi.n	8008fc8 <_realloc_r+0x304>
 8008faa:	f104 0208 	add.w	r2, r4, #8
 8008fae:	f100 0308 	add.w	r3, r0, #8
 8008fb2:	6811      	ldr	r1, [r2, #0]
 8008fb4:	6019      	str	r1, [r3, #0]
 8008fb6:	6851      	ldr	r1, [r2, #4]
 8008fb8:	6059      	str	r1, [r3, #4]
 8008fba:	6892      	ldr	r2, [r2, #8]
 8008fbc:	609a      	str	r2, [r3, #8]
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4648      	mov	r0, r9
 8008fc2:	f7fe fe65 	bl	8007c90 <_free_r>
 8008fc6:	e723      	b.n	8008e10 <_realloc_r+0x14c>
 8008fc8:	68a3      	ldr	r3, [r4, #8]
 8008fca:	2a24      	cmp	r2, #36	; 0x24
 8008fcc:	6083      	str	r3, [r0, #8]
 8008fce:	68e3      	ldr	r3, [r4, #12]
 8008fd0:	bf18      	it	ne
 8008fd2:	f104 0210 	addne.w	r2, r4, #16
 8008fd6:	60c3      	str	r3, [r0, #12]
 8008fd8:	bf09      	itett	eq
 8008fda:	6923      	ldreq	r3, [r4, #16]
 8008fdc:	f100 0310 	addne.w	r3, r0, #16
 8008fe0:	6103      	streq	r3, [r0, #16]
 8008fe2:	6961      	ldreq	r1, [r4, #20]
 8008fe4:	bf02      	ittt	eq
 8008fe6:	f104 0218 	addeq.w	r2, r4, #24
 8008fea:	f100 0318 	addeq.w	r3, r0, #24
 8008fee:	6141      	streq	r1, [r0, #20]
 8008ff0:	e7df      	b.n	8008fb2 <_realloc_r+0x2ee>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	e7dc      	b.n	8008fb2 <_realloc_r+0x2ee>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	f7ff fe49 	bl	8008c90 <memmove>
 8008ffe:	e7de      	b.n	8008fbe <_realloc_r+0x2fa>
 8009000:	4637      	mov	r7, r6
 8009002:	e6c0      	b.n	8008d86 <_realloc_r+0xc2>
 8009004:	431f      	orrs	r7, r3
 8009006:	606f      	str	r7, [r5, #4]
 8009008:	6853      	ldr	r3, [r2, #4]
 800900a:	f043 0301 	orr.w	r3, r3, #1
 800900e:	6053      	str	r3, [r2, #4]
 8009010:	e756      	b.n	8008ec0 <_realloc_r+0x1fc>
 8009012:	bf00      	nop

08009014 <__sprint_r>:
 8009014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	6893      	ldr	r3, [r2, #8]
 800901a:	4680      	mov	r8, r0
 800901c:	460f      	mov	r7, r1
 800901e:	4614      	mov	r4, r2
 8009020:	b91b      	cbnz	r3, 800902a <__sprint_r+0x16>
 8009022:	4618      	mov	r0, r3
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800902c:	049d      	lsls	r5, r3, #18
 800902e:	d520      	bpl.n	8009072 <__sprint_r+0x5e>
 8009030:	6815      	ldr	r5, [r2, #0]
 8009032:	3508      	adds	r5, #8
 8009034:	f04f 0900 	mov.w	r9, #0
 8009038:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800903c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8009040:	45ca      	cmp	sl, r9
 8009042:	dc0b      	bgt.n	800905c <__sprint_r+0x48>
 8009044:	68a0      	ldr	r0, [r4, #8]
 8009046:	f026 0603 	bic.w	r6, r6, #3
 800904a:	1b80      	subs	r0, r0, r6
 800904c:	60a0      	str	r0, [r4, #8]
 800904e:	3508      	adds	r5, #8
 8009050:	2800      	cmp	r0, #0
 8009052:	d1ef      	bne.n	8009034 <__sprint_r+0x20>
 8009054:	2300      	movs	r3, #0
 8009056:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800905a:	e7e4      	b.n	8009026 <__sprint_r+0x12>
 800905c:	463a      	mov	r2, r7
 800905e:	4640      	mov	r0, r8
 8009060:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8009064:	f000 fea3 	bl	8009dae <_fputwc_r>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d0f3      	beq.n	8009054 <__sprint_r+0x40>
 800906c:	f109 0901 	add.w	r9, r9, #1
 8009070:	e7e6      	b.n	8009040 <__sprint_r+0x2c>
 8009072:	f000 fec5 	bl	8009e00 <__sfvwrite_r>
 8009076:	e7ed      	b.n	8009054 <__sprint_r+0x40>

08009078 <_vfiprintf_r>:
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	b0bb      	sub	sp, #236	; 0xec
 800907e:	460f      	mov	r7, r1
 8009080:	461d      	mov	r5, r3
 8009082:	461c      	mov	r4, r3
 8009084:	4681      	mov	r9, r0
 8009086:	9202      	str	r2, [sp, #8]
 8009088:	b118      	cbz	r0, 8009092 <_vfiprintf_r+0x1a>
 800908a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800908c:	b90b      	cbnz	r3, 8009092 <_vfiprintf_r+0x1a>
 800908e:	f000 fe25 	bl	8009cdc <__sinit>
 8009092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009094:	07d8      	lsls	r0, r3, #31
 8009096:	d405      	bmi.n	80090a4 <_vfiprintf_r+0x2c>
 8009098:	89bb      	ldrh	r3, [r7, #12]
 800909a:	0599      	lsls	r1, r3, #22
 800909c:	d402      	bmi.n	80090a4 <_vfiprintf_r+0x2c>
 800909e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80090a0:	f7fe febc 	bl	8007e1c <__retarget_lock_acquire_recursive>
 80090a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80090a8:	049a      	lsls	r2, r3, #18
 80090aa:	d406      	bmi.n	80090ba <_vfiprintf_r+0x42>
 80090ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090b0:	81bb      	strh	r3, [r7, #12]
 80090b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090b8:	667b      	str	r3, [r7, #100]	; 0x64
 80090ba:	89bb      	ldrh	r3, [r7, #12]
 80090bc:	071e      	lsls	r6, r3, #28
 80090be:	d501      	bpl.n	80090c4 <_vfiprintf_r+0x4c>
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	b9ab      	cbnz	r3, 80090f0 <_vfiprintf_r+0x78>
 80090c4:	4639      	mov	r1, r7
 80090c6:	4648      	mov	r0, r9
 80090c8:	f000 fcb2 	bl	8009a30 <__swsetup_r>
 80090cc:	b180      	cbz	r0, 80090f0 <_vfiprintf_r+0x78>
 80090ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090d0:	07d8      	lsls	r0, r3, #31
 80090d2:	d506      	bpl.n	80090e2 <_vfiprintf_r+0x6a>
 80090d4:	f04f 33ff 	mov.w	r3, #4294967295
 80090d8:	9303      	str	r3, [sp, #12]
 80090da:	9803      	ldr	r0, [sp, #12]
 80090dc:	b03b      	add	sp, #236	; 0xec
 80090de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e2:	89bb      	ldrh	r3, [r7, #12]
 80090e4:	0599      	lsls	r1, r3, #22
 80090e6:	d4f5      	bmi.n	80090d4 <_vfiprintf_r+0x5c>
 80090e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80090ea:	f7fe fe98 	bl	8007e1e <__retarget_lock_release_recursive>
 80090ee:	e7f1      	b.n	80090d4 <_vfiprintf_r+0x5c>
 80090f0:	89bb      	ldrh	r3, [r7, #12]
 80090f2:	f003 021a 	and.w	r2, r3, #26
 80090f6:	2a0a      	cmp	r2, #10
 80090f8:	d114      	bne.n	8009124 <_vfiprintf_r+0xac>
 80090fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80090fe:	2a00      	cmp	r2, #0
 8009100:	db10      	blt.n	8009124 <_vfiprintf_r+0xac>
 8009102:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009104:	07d2      	lsls	r2, r2, #31
 8009106:	d404      	bmi.n	8009112 <_vfiprintf_r+0x9a>
 8009108:	059e      	lsls	r6, r3, #22
 800910a:	d402      	bmi.n	8009112 <_vfiprintf_r+0x9a>
 800910c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800910e:	f7fe fe86 	bl	8007e1e <__retarget_lock_release_recursive>
 8009112:	462b      	mov	r3, r5
 8009114:	4639      	mov	r1, r7
 8009116:	4648      	mov	r0, r9
 8009118:	9a02      	ldr	r2, [sp, #8]
 800911a:	b03b      	add	sp, #236	; 0xec
 800911c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009120:	f000 bc38 	b.w	8009994 <__sbprintf>
 8009124:	2300      	movs	r3, #0
 8009126:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800912a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800912e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8009132:	ae11      	add	r6, sp, #68	; 0x44
 8009134:	960e      	str	r6, [sp, #56]	; 0x38
 8009136:	9303      	str	r3, [sp, #12]
 8009138:	9b02      	ldr	r3, [sp, #8]
 800913a:	461d      	mov	r5, r3
 800913c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009140:	b10a      	cbz	r2, 8009146 <_vfiprintf_r+0xce>
 8009142:	2a25      	cmp	r2, #37	; 0x25
 8009144:	d1f9      	bne.n	800913a <_vfiprintf_r+0xc2>
 8009146:	9b02      	ldr	r3, [sp, #8]
 8009148:	ebb5 0803 	subs.w	r8, r5, r3
 800914c:	d00d      	beq.n	800916a <_vfiprintf_r+0xf2>
 800914e:	e9c6 3800 	strd	r3, r8, [r6]
 8009152:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009154:	4443      	add	r3, r8
 8009156:	9310      	str	r3, [sp, #64]	; 0x40
 8009158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800915a:	3301      	adds	r3, #1
 800915c:	2b07      	cmp	r3, #7
 800915e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009160:	dc75      	bgt.n	800924e <_vfiprintf_r+0x1d6>
 8009162:	3608      	adds	r6, #8
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	4443      	add	r3, r8
 8009168:	9303      	str	r3, [sp, #12]
 800916a:	782b      	ldrb	r3, [r5, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 83d5 	beq.w	800991c <_vfiprintf_r+0x8a4>
 8009172:	2300      	movs	r3, #0
 8009174:	f04f 31ff 	mov.w	r1, #4294967295
 8009178:	469a      	mov	sl, r3
 800917a:	1c6a      	adds	r2, r5, #1
 800917c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8009180:	9101      	str	r1, [sp, #4]
 8009182:	9304      	str	r3, [sp, #16]
 8009184:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009188:	9202      	str	r2, [sp, #8]
 800918a:	f1a3 0220 	sub.w	r2, r3, #32
 800918e:	2a5a      	cmp	r2, #90	; 0x5a
 8009190:	f200 831d 	bhi.w	80097ce <_vfiprintf_r+0x756>
 8009194:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009198:	031b009a 	.word	0x031b009a
 800919c:	00a2031b 	.word	0x00a2031b
 80091a0:	031b031b 	.word	0x031b031b
 80091a4:	0082031b 	.word	0x0082031b
 80091a8:	031b031b 	.word	0x031b031b
 80091ac:	00af00a5 	.word	0x00af00a5
 80091b0:	00ac031b 	.word	0x00ac031b
 80091b4:	031b00b1 	.word	0x031b00b1
 80091b8:	00cf00cc 	.word	0x00cf00cc
 80091bc:	00cf00cf 	.word	0x00cf00cf
 80091c0:	00cf00cf 	.word	0x00cf00cf
 80091c4:	00cf00cf 	.word	0x00cf00cf
 80091c8:	00cf00cf 	.word	0x00cf00cf
 80091cc:	031b031b 	.word	0x031b031b
 80091d0:	031b031b 	.word	0x031b031b
 80091d4:	031b031b 	.word	0x031b031b
 80091d8:	031b031b 	.word	0x031b031b
 80091dc:	00f9031b 	.word	0x00f9031b
 80091e0:	031b0107 	.word	0x031b0107
 80091e4:	031b031b 	.word	0x031b031b
 80091e8:	031b031b 	.word	0x031b031b
 80091ec:	031b031b 	.word	0x031b031b
 80091f0:	031b031b 	.word	0x031b031b
 80091f4:	0156031b 	.word	0x0156031b
 80091f8:	031b031b 	.word	0x031b031b
 80091fc:	01a0031b 	.word	0x01a0031b
 8009200:	027d031b 	.word	0x027d031b
 8009204:	031b031b 	.word	0x031b031b
 8009208:	031b029d 	.word	0x031b029d
 800920c:	031b031b 	.word	0x031b031b
 8009210:	031b031b 	.word	0x031b031b
 8009214:	031b031b 	.word	0x031b031b
 8009218:	031b031b 	.word	0x031b031b
 800921c:	00f9031b 	.word	0x00f9031b
 8009220:	031b0109 	.word	0x031b0109
 8009224:	031b031b 	.word	0x031b031b
 8009228:	010900df 	.word	0x010900df
 800922c:	031b00f3 	.word	0x031b00f3
 8009230:	031b00ec 	.word	0x031b00ec
 8009234:	01580134 	.word	0x01580134
 8009238:	00f3018d 	.word	0x00f3018d
 800923c:	01a0031b 	.word	0x01a0031b
 8009240:	027f0098 	.word	0x027f0098
 8009244:	031b031b 	.word	0x031b031b
 8009248:	031b0065 	.word	0x031b0065
 800924c:	0098      	.short	0x0098
 800924e:	4639      	mov	r1, r7
 8009250:	4648      	mov	r0, r9
 8009252:	aa0e      	add	r2, sp, #56	; 0x38
 8009254:	f7ff fede 	bl	8009014 <__sprint_r>
 8009258:	2800      	cmp	r0, #0
 800925a:	f040 833e 	bne.w	80098da <_vfiprintf_r+0x862>
 800925e:	ae11      	add	r6, sp, #68	; 0x44
 8009260:	e780      	b.n	8009164 <_vfiprintf_r+0xec>
 8009262:	4a9c      	ldr	r2, [pc, #624]	; (80094d4 <_vfiprintf_r+0x45c>)
 8009264:	9206      	str	r2, [sp, #24]
 8009266:	f01a 0220 	ands.w	r2, sl, #32
 800926a:	f000 8234 	beq.w	80096d6 <_vfiprintf_r+0x65e>
 800926e:	3407      	adds	r4, #7
 8009270:	f024 0207 	bic.w	r2, r4, #7
 8009274:	4693      	mov	fp, r2
 8009276:	6855      	ldr	r5, [r2, #4]
 8009278:	f85b 4b08 	ldr.w	r4, [fp], #8
 800927c:	f01a 0f01 	tst.w	sl, #1
 8009280:	d009      	beq.n	8009296 <_vfiprintf_r+0x21e>
 8009282:	ea54 0205 	orrs.w	r2, r4, r5
 8009286:	bf1f      	itttt	ne
 8009288:	2230      	movne	r2, #48	; 0x30
 800928a:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800928e:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 8009292:	f04a 0a02 	orrne.w	sl, sl, #2
 8009296:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800929a:	e118      	b.n	80094ce <_vfiprintf_r+0x456>
 800929c:	4648      	mov	r0, r9
 800929e:	f7fe fdb7 	bl	8007e10 <_localeconv_r>
 80092a2:	6843      	ldr	r3, [r0, #4]
 80092a4:	4618      	mov	r0, r3
 80092a6:	9309      	str	r3, [sp, #36]	; 0x24
 80092a8:	f7f6 ffbe 	bl	8000228 <strlen>
 80092ac:	9008      	str	r0, [sp, #32]
 80092ae:	4648      	mov	r0, r9
 80092b0:	f7fe fdae 	bl	8007e10 <_localeconv_r>
 80092b4:	6883      	ldr	r3, [r0, #8]
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	b12b      	cbz	r3, 80092c8 <_vfiprintf_r+0x250>
 80092bc:	9b07      	ldr	r3, [sp, #28]
 80092be:	b11b      	cbz	r3, 80092c8 <_vfiprintf_r+0x250>
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	b10b      	cbz	r3, 80092c8 <_vfiprintf_r+0x250>
 80092c4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80092c8:	9a02      	ldr	r2, [sp, #8]
 80092ca:	e75b      	b.n	8009184 <_vfiprintf_r+0x10c>
 80092cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1f9      	bne.n	80092c8 <_vfiprintf_r+0x250>
 80092d4:	2320      	movs	r3, #32
 80092d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80092da:	e7f5      	b.n	80092c8 <_vfiprintf_r+0x250>
 80092dc:	f04a 0a01 	orr.w	sl, sl, #1
 80092e0:	e7f2      	b.n	80092c8 <_vfiprintf_r+0x250>
 80092e2:	f854 3b04 	ldr.w	r3, [r4], #4
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	daed      	bge.n	80092c8 <_vfiprintf_r+0x250>
 80092ec:	425b      	negs	r3, r3
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	f04a 0a04 	orr.w	sl, sl, #4
 80092f4:	e7e8      	b.n	80092c8 <_vfiprintf_r+0x250>
 80092f6:	232b      	movs	r3, #43	; 0x2b
 80092f8:	e7ed      	b.n	80092d6 <_vfiprintf_r+0x25e>
 80092fa:	9a02      	ldr	r2, [sp, #8]
 80092fc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009300:	2b2a      	cmp	r3, #42	; 0x2a
 8009302:	d112      	bne.n	800932a <_vfiprintf_r+0x2b2>
 8009304:	f854 0b04 	ldr.w	r0, [r4], #4
 8009308:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800930c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009310:	e7da      	b.n	80092c8 <_vfiprintf_r+0x250>
 8009312:	200a      	movs	r0, #10
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	fb00 1303 	mla	r3, r0, r3, r1
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009320:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009324:	2909      	cmp	r1, #9
 8009326:	d9f4      	bls.n	8009312 <_vfiprintf_r+0x29a>
 8009328:	e72e      	b.n	8009188 <_vfiprintf_r+0x110>
 800932a:	2100      	movs	r1, #0
 800932c:	9101      	str	r1, [sp, #4]
 800932e:	e7f7      	b.n	8009320 <_vfiprintf_r+0x2a8>
 8009330:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8009334:	e7c8      	b.n	80092c8 <_vfiprintf_r+0x250>
 8009336:	2100      	movs	r1, #0
 8009338:	9a02      	ldr	r2, [sp, #8]
 800933a:	9104      	str	r1, [sp, #16]
 800933c:	200a      	movs	r0, #10
 800933e:	9904      	ldr	r1, [sp, #16]
 8009340:	3b30      	subs	r3, #48	; 0x30
 8009342:	fb00 3301 	mla	r3, r0, r1, r3
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	f812 3b01 	ldrb.w	r3, [r2], #1
 800934c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009350:	2909      	cmp	r1, #9
 8009352:	d9f3      	bls.n	800933c <_vfiprintf_r+0x2c4>
 8009354:	e718      	b.n	8009188 <_vfiprintf_r+0x110>
 8009356:	9b02      	ldr	r3, [sp, #8]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	2b68      	cmp	r3, #104	; 0x68
 800935c:	bf01      	itttt	eq
 800935e:	9b02      	ldreq	r3, [sp, #8]
 8009360:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8009364:	3301      	addeq	r3, #1
 8009366:	9302      	streq	r3, [sp, #8]
 8009368:	bf18      	it	ne
 800936a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800936e:	e7ab      	b.n	80092c8 <_vfiprintf_r+0x250>
 8009370:	9b02      	ldr	r3, [sp, #8]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b6c      	cmp	r3, #108	; 0x6c
 8009376:	d105      	bne.n	8009384 <_vfiprintf_r+0x30c>
 8009378:	9b02      	ldr	r3, [sp, #8]
 800937a:	3301      	adds	r3, #1
 800937c:	9302      	str	r3, [sp, #8]
 800937e:	f04a 0a20 	orr.w	sl, sl, #32
 8009382:	e7a1      	b.n	80092c8 <_vfiprintf_r+0x250>
 8009384:	f04a 0a10 	orr.w	sl, sl, #16
 8009388:	e79e      	b.n	80092c8 <_vfiprintf_r+0x250>
 800938a:	46a3      	mov	fp, r4
 800938c:	2100      	movs	r1, #0
 800938e:	f85b 3b04 	ldr.w	r3, [fp], #4
 8009392:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 8009396:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800939a:	2301      	movs	r3, #1
 800939c:	460d      	mov	r5, r1
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 80093a4:	e0ad      	b.n	8009502 <_vfiprintf_r+0x48a>
 80093a6:	f04a 0a10 	orr.w	sl, sl, #16
 80093aa:	f01a 0f20 	tst.w	sl, #32
 80093ae:	d010      	beq.n	80093d2 <_vfiprintf_r+0x35a>
 80093b0:	3407      	adds	r4, #7
 80093b2:	f024 0307 	bic.w	r3, r4, #7
 80093b6:	469b      	mov	fp, r3
 80093b8:	685d      	ldr	r5, [r3, #4]
 80093ba:	f85b 4b08 	ldr.w	r4, [fp], #8
 80093be:	2d00      	cmp	r5, #0
 80093c0:	da05      	bge.n	80093ce <_vfiprintf_r+0x356>
 80093c2:	232d      	movs	r3, #45	; 0x2d
 80093c4:	4264      	negs	r4, r4
 80093c6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80093ca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80093ce:	2301      	movs	r3, #1
 80093d0:	e04a      	b.n	8009468 <_vfiprintf_r+0x3f0>
 80093d2:	46a3      	mov	fp, r4
 80093d4:	f01a 0f10 	tst.w	sl, #16
 80093d8:	f85b 5b04 	ldr.w	r5, [fp], #4
 80093dc:	d002      	beq.n	80093e4 <_vfiprintf_r+0x36c>
 80093de:	462c      	mov	r4, r5
 80093e0:	17ed      	asrs	r5, r5, #31
 80093e2:	e7ec      	b.n	80093be <_vfiprintf_r+0x346>
 80093e4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80093e8:	d003      	beq.n	80093f2 <_vfiprintf_r+0x37a>
 80093ea:	b22c      	sxth	r4, r5
 80093ec:	f345 35c0 	sbfx	r5, r5, #15, #1
 80093f0:	e7e5      	b.n	80093be <_vfiprintf_r+0x346>
 80093f2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80093f6:	d0f2      	beq.n	80093de <_vfiprintf_r+0x366>
 80093f8:	b26c      	sxtb	r4, r5
 80093fa:	f345 15c0 	sbfx	r5, r5, #7, #1
 80093fe:	e7de      	b.n	80093be <_vfiprintf_r+0x346>
 8009400:	f01a 0f20 	tst.w	sl, #32
 8009404:	f104 0b04 	add.w	fp, r4, #4
 8009408:	d007      	beq.n	800941a <_vfiprintf_r+0x3a2>
 800940a:	9a03      	ldr	r2, [sp, #12]
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	9903      	ldr	r1, [sp, #12]
 8009410:	17d2      	asrs	r2, r2, #31
 8009412:	e9c3 1200 	strd	r1, r2, [r3]
 8009416:	465c      	mov	r4, fp
 8009418:	e68e      	b.n	8009138 <_vfiprintf_r+0xc0>
 800941a:	f01a 0f10 	tst.w	sl, #16
 800941e:	d003      	beq.n	8009428 <_vfiprintf_r+0x3b0>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	9a03      	ldr	r2, [sp, #12]
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	e7f6      	b.n	8009416 <_vfiprintf_r+0x39e>
 8009428:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800942c:	d003      	beq.n	8009436 <_vfiprintf_r+0x3be>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	9a03      	ldr	r2, [sp, #12]
 8009432:	801a      	strh	r2, [r3, #0]
 8009434:	e7ef      	b.n	8009416 <_vfiprintf_r+0x39e>
 8009436:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800943a:	d0f1      	beq.n	8009420 <_vfiprintf_r+0x3a8>
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	9a03      	ldr	r2, [sp, #12]
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	e7e8      	b.n	8009416 <_vfiprintf_r+0x39e>
 8009444:	f04a 0a10 	orr.w	sl, sl, #16
 8009448:	f01a 0320 	ands.w	r3, sl, #32
 800944c:	d01f      	beq.n	800948e <_vfiprintf_r+0x416>
 800944e:	3407      	adds	r4, #7
 8009450:	f024 0307 	bic.w	r3, r4, #7
 8009454:	469b      	mov	fp, r3
 8009456:	685d      	ldr	r5, [r3, #4]
 8009458:	f85b 4b08 	ldr.w	r4, [fp], #8
 800945c:	2300      	movs	r3, #0
 800945e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009462:	2200      	movs	r2, #0
 8009464:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8009468:	9a01      	ldr	r2, [sp, #4]
 800946a:	3201      	adds	r2, #1
 800946c:	f000 8263 	beq.w	8009936 <_vfiprintf_r+0x8be>
 8009470:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8009474:	9205      	str	r2, [sp, #20]
 8009476:	ea54 0205 	orrs.w	r2, r4, r5
 800947a:	f040 8262 	bne.w	8009942 <_vfiprintf_r+0x8ca>
 800947e:	9a01      	ldr	r2, [sp, #4]
 8009480:	2a00      	cmp	r2, #0
 8009482:	f000 8199 	beq.w	80097b8 <_vfiprintf_r+0x740>
 8009486:	2b01      	cmp	r3, #1
 8009488:	f040 825e 	bne.w	8009948 <_vfiprintf_r+0x8d0>
 800948c:	e13a      	b.n	8009704 <_vfiprintf_r+0x68c>
 800948e:	46a3      	mov	fp, r4
 8009490:	f01a 0510 	ands.w	r5, sl, #16
 8009494:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009498:	d001      	beq.n	800949e <_vfiprintf_r+0x426>
 800949a:	461d      	mov	r5, r3
 800949c:	e7de      	b.n	800945c <_vfiprintf_r+0x3e4>
 800949e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80094a2:	d001      	beq.n	80094a8 <_vfiprintf_r+0x430>
 80094a4:	b2a4      	uxth	r4, r4
 80094a6:	e7d9      	b.n	800945c <_vfiprintf_r+0x3e4>
 80094a8:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80094ac:	d0d6      	beq.n	800945c <_vfiprintf_r+0x3e4>
 80094ae:	b2e4      	uxtb	r4, r4
 80094b0:	e7f3      	b.n	800949a <_vfiprintf_r+0x422>
 80094b2:	2330      	movs	r3, #48	; 0x30
 80094b4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80094b8:	2378      	movs	r3, #120	; 0x78
 80094ba:	46a3      	mov	fp, r4
 80094bc:	2500      	movs	r5, #0
 80094be:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80094c2:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <_vfiprintf_r+0x45c>)
 80094c4:	f85b 4b04 	ldr.w	r4, [fp], #4
 80094c8:	f04a 0a02 	orr.w	sl, sl, #2
 80094cc:	9306      	str	r3, [sp, #24]
 80094ce:	2302      	movs	r3, #2
 80094d0:	e7c7      	b.n	8009462 <_vfiprintf_r+0x3ea>
 80094d2:	bf00      	nop
 80094d4:	0801fe28 	.word	0x0801fe28
 80094d8:	46a3      	mov	fp, r4
 80094da:	2500      	movs	r5, #0
 80094dc:	9b01      	ldr	r3, [sp, #4]
 80094de:	f85b 8b04 	ldr.w	r8, [fp], #4
 80094e2:	1c5c      	adds	r4, r3, #1
 80094e4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 80094e8:	f000 80ce 	beq.w	8009688 <_vfiprintf_r+0x610>
 80094ec:	461a      	mov	r2, r3
 80094ee:	4629      	mov	r1, r5
 80094f0:	4640      	mov	r0, r8
 80094f2:	f7fe fed1 	bl	8008298 <memchr>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f000 8173 	beq.w	80097e2 <_vfiprintf_r+0x76a>
 80094fc:	eba0 0308 	sub.w	r3, r0, r8
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	9b01      	ldr	r3, [sp, #4]
 8009504:	42ab      	cmp	r3, r5
 8009506:	bfb8      	it	lt
 8009508:	462b      	movlt	r3, r5
 800950a:	9305      	str	r3, [sp, #20]
 800950c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009510:	b113      	cbz	r3, 8009518 <_vfiprintf_r+0x4a0>
 8009512:	9b05      	ldr	r3, [sp, #20]
 8009514:	3301      	adds	r3, #1
 8009516:	9305      	str	r3, [sp, #20]
 8009518:	f01a 0302 	ands.w	r3, sl, #2
 800951c:	930a      	str	r3, [sp, #40]	; 0x28
 800951e:	bf1e      	ittt	ne
 8009520:	9b05      	ldrne	r3, [sp, #20]
 8009522:	3302      	addne	r3, #2
 8009524:	9305      	strne	r3, [sp, #20]
 8009526:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800952a:	930b      	str	r3, [sp, #44]	; 0x2c
 800952c:	d11f      	bne.n	800956e <_vfiprintf_r+0x4f6>
 800952e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009532:	1a9c      	subs	r4, r3, r2
 8009534:	2c00      	cmp	r4, #0
 8009536:	dd1a      	ble.n	800956e <_vfiprintf_r+0x4f6>
 8009538:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800953c:	48aa      	ldr	r0, [pc, #680]	; (80097e8 <_vfiprintf_r+0x770>)
 800953e:	2c10      	cmp	r4, #16
 8009540:	f103 0301 	add.w	r3, r3, #1
 8009544:	f106 0108 	add.w	r1, r6, #8
 8009548:	6030      	str	r0, [r6, #0]
 800954a:	f300 8153 	bgt.w	80097f4 <_vfiprintf_r+0x77c>
 800954e:	6074      	str	r4, [r6, #4]
 8009550:	2b07      	cmp	r3, #7
 8009552:	4414      	add	r4, r2
 8009554:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8009558:	f340 815e 	ble.w	8009818 <_vfiprintf_r+0x7a0>
 800955c:	4639      	mov	r1, r7
 800955e:	4648      	mov	r0, r9
 8009560:	aa0e      	add	r2, sp, #56	; 0x38
 8009562:	f7ff fd57 	bl	8009014 <__sprint_r>
 8009566:	2800      	cmp	r0, #0
 8009568:	f040 81b7 	bne.w	80098da <_vfiprintf_r+0x862>
 800956c:	ae11      	add	r6, sp, #68	; 0x44
 800956e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009572:	b173      	cbz	r3, 8009592 <_vfiprintf_r+0x51a>
 8009574:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009578:	6032      	str	r2, [r6, #0]
 800957a:	2201      	movs	r2, #1
 800957c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800957e:	6072      	str	r2, [r6, #4]
 8009580:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009582:	3301      	adds	r3, #1
 8009584:	3201      	adds	r2, #1
 8009586:	2b07      	cmp	r3, #7
 8009588:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800958c:	f300 8146 	bgt.w	800981c <_vfiprintf_r+0x7a4>
 8009590:	3608      	adds	r6, #8
 8009592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009594:	b16b      	cbz	r3, 80095b2 <_vfiprintf_r+0x53a>
 8009596:	aa0d      	add	r2, sp, #52	; 0x34
 8009598:	6032      	str	r2, [r6, #0]
 800959a:	2202      	movs	r2, #2
 800959c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800959e:	6072      	str	r2, [r6, #4]
 80095a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095a2:	3301      	adds	r3, #1
 80095a4:	3202      	adds	r2, #2
 80095a6:	2b07      	cmp	r3, #7
 80095a8:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 80095ac:	f300 813f 	bgt.w	800982e <_vfiprintf_r+0x7b6>
 80095b0:	3608      	adds	r6, #8
 80095b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b4:	2b80      	cmp	r3, #128	; 0x80
 80095b6:	d11f      	bne.n	80095f8 <_vfiprintf_r+0x580>
 80095b8:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80095bc:	1a9c      	subs	r4, r3, r2
 80095be:	2c00      	cmp	r4, #0
 80095c0:	dd1a      	ble.n	80095f8 <_vfiprintf_r+0x580>
 80095c2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80095c6:	4889      	ldr	r0, [pc, #548]	; (80097ec <_vfiprintf_r+0x774>)
 80095c8:	2c10      	cmp	r4, #16
 80095ca:	f103 0301 	add.w	r3, r3, #1
 80095ce:	f106 0108 	add.w	r1, r6, #8
 80095d2:	6030      	str	r0, [r6, #0]
 80095d4:	f300 8134 	bgt.w	8009840 <_vfiprintf_r+0x7c8>
 80095d8:	6074      	str	r4, [r6, #4]
 80095da:	2b07      	cmp	r3, #7
 80095dc:	4414      	add	r4, r2
 80095de:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 80095e2:	f340 813f 	ble.w	8009864 <_vfiprintf_r+0x7ec>
 80095e6:	4639      	mov	r1, r7
 80095e8:	4648      	mov	r0, r9
 80095ea:	aa0e      	add	r2, sp, #56	; 0x38
 80095ec:	f7ff fd12 	bl	8009014 <__sprint_r>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	f040 8172 	bne.w	80098da <_vfiprintf_r+0x862>
 80095f6:	ae11      	add	r6, sp, #68	; 0x44
 80095f8:	9b01      	ldr	r3, [sp, #4]
 80095fa:	1aec      	subs	r4, r5, r3
 80095fc:	2c00      	cmp	r4, #0
 80095fe:	dd1a      	ble.n	8009636 <_vfiprintf_r+0x5be>
 8009600:	4d7a      	ldr	r5, [pc, #488]	; (80097ec <_vfiprintf_r+0x774>)
 8009602:	2c10      	cmp	r4, #16
 8009604:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 8009608:	f106 0208 	add.w	r2, r6, #8
 800960c:	f103 0301 	add.w	r3, r3, #1
 8009610:	6035      	str	r5, [r6, #0]
 8009612:	f300 8129 	bgt.w	8009868 <_vfiprintf_r+0x7f0>
 8009616:	6074      	str	r4, [r6, #4]
 8009618:	2b07      	cmp	r3, #7
 800961a:	440c      	add	r4, r1
 800961c:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8009620:	f340 8133 	ble.w	800988a <_vfiprintf_r+0x812>
 8009624:	4639      	mov	r1, r7
 8009626:	4648      	mov	r0, r9
 8009628:	aa0e      	add	r2, sp, #56	; 0x38
 800962a:	f7ff fcf3 	bl	8009014 <__sprint_r>
 800962e:	2800      	cmp	r0, #0
 8009630:	f040 8153 	bne.w	80098da <_vfiprintf_r+0x862>
 8009634:	ae11      	add	r6, sp, #68	; 0x44
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	9810      	ldr	r0, [sp, #64]	; 0x40
 800963a:	6073      	str	r3, [r6, #4]
 800963c:	4418      	add	r0, r3
 800963e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009640:	f8c6 8000 	str.w	r8, [r6]
 8009644:	3301      	adds	r3, #1
 8009646:	2b07      	cmp	r3, #7
 8009648:	9010      	str	r0, [sp, #64]	; 0x40
 800964a:	930f      	str	r3, [sp, #60]	; 0x3c
 800964c:	f300 811f 	bgt.w	800988e <_vfiprintf_r+0x816>
 8009650:	f106 0308 	add.w	r3, r6, #8
 8009654:	f01a 0f04 	tst.w	sl, #4
 8009658:	f040 8121 	bne.w	800989e <_vfiprintf_r+0x826>
 800965c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009660:	9905      	ldr	r1, [sp, #20]
 8009662:	428a      	cmp	r2, r1
 8009664:	bfac      	ite	ge
 8009666:	189b      	addge	r3, r3, r2
 8009668:	185b      	addlt	r3, r3, r1
 800966a:	9303      	str	r3, [sp, #12]
 800966c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800966e:	b13b      	cbz	r3, 8009680 <_vfiprintf_r+0x608>
 8009670:	4639      	mov	r1, r7
 8009672:	4648      	mov	r0, r9
 8009674:	aa0e      	add	r2, sp, #56	; 0x38
 8009676:	f7ff fccd 	bl	8009014 <__sprint_r>
 800967a:	2800      	cmp	r0, #0
 800967c:	f040 812d 	bne.w	80098da <_vfiprintf_r+0x862>
 8009680:	2300      	movs	r3, #0
 8009682:	ae11      	add	r6, sp, #68	; 0x44
 8009684:	930f      	str	r3, [sp, #60]	; 0x3c
 8009686:	e6c6      	b.n	8009416 <_vfiprintf_r+0x39e>
 8009688:	4640      	mov	r0, r8
 800968a:	f7f6 fdcd 	bl	8000228 <strlen>
 800968e:	9001      	str	r0, [sp, #4]
 8009690:	e737      	b.n	8009502 <_vfiprintf_r+0x48a>
 8009692:	f04a 0a10 	orr.w	sl, sl, #16
 8009696:	f01a 0320 	ands.w	r3, sl, #32
 800969a:	d008      	beq.n	80096ae <_vfiprintf_r+0x636>
 800969c:	3407      	adds	r4, #7
 800969e:	f024 0307 	bic.w	r3, r4, #7
 80096a2:	469b      	mov	fp, r3
 80096a4:	685d      	ldr	r5, [r3, #4]
 80096a6:	f85b 4b08 	ldr.w	r4, [fp], #8
 80096aa:	2301      	movs	r3, #1
 80096ac:	e6d9      	b.n	8009462 <_vfiprintf_r+0x3ea>
 80096ae:	46a3      	mov	fp, r4
 80096b0:	f01a 0510 	ands.w	r5, sl, #16
 80096b4:	f85b 4b04 	ldr.w	r4, [fp], #4
 80096b8:	d001      	beq.n	80096be <_vfiprintf_r+0x646>
 80096ba:	461d      	mov	r5, r3
 80096bc:	e7f5      	b.n	80096aa <_vfiprintf_r+0x632>
 80096be:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80096c2:	d001      	beq.n	80096c8 <_vfiprintf_r+0x650>
 80096c4:	b2a4      	uxth	r4, r4
 80096c6:	e7f0      	b.n	80096aa <_vfiprintf_r+0x632>
 80096c8:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80096cc:	d0ed      	beq.n	80096aa <_vfiprintf_r+0x632>
 80096ce:	b2e4      	uxtb	r4, r4
 80096d0:	e7f3      	b.n	80096ba <_vfiprintf_r+0x642>
 80096d2:	4a47      	ldr	r2, [pc, #284]	; (80097f0 <_vfiprintf_r+0x778>)
 80096d4:	e5c6      	b.n	8009264 <_vfiprintf_r+0x1ec>
 80096d6:	46a3      	mov	fp, r4
 80096d8:	f01a 0510 	ands.w	r5, sl, #16
 80096dc:	f85b 4b04 	ldr.w	r4, [fp], #4
 80096e0:	d001      	beq.n	80096e6 <_vfiprintf_r+0x66e>
 80096e2:	4615      	mov	r5, r2
 80096e4:	e5ca      	b.n	800927c <_vfiprintf_r+0x204>
 80096e6:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 80096ea:	d001      	beq.n	80096f0 <_vfiprintf_r+0x678>
 80096ec:	b2a4      	uxth	r4, r4
 80096ee:	e5c5      	b.n	800927c <_vfiprintf_r+0x204>
 80096f0:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80096f4:	f43f adc2 	beq.w	800927c <_vfiprintf_r+0x204>
 80096f8:	b2e4      	uxtb	r4, r4
 80096fa:	e7f2      	b.n	80096e2 <_vfiprintf_r+0x66a>
 80096fc:	2c0a      	cmp	r4, #10
 80096fe:	f175 0300 	sbcs.w	r3, r5, #0
 8009702:	d205      	bcs.n	8009710 <_vfiprintf_r+0x698>
 8009704:	3430      	adds	r4, #48	; 0x30
 8009706:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800970a:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 800970e:	e137      	b.n	8009980 <_vfiprintf_r+0x908>
 8009710:	f04f 0a00 	mov.w	sl, #0
 8009714:	ab3a      	add	r3, sp, #232	; 0xe8
 8009716:	930a      	str	r3, [sp, #40]	; 0x28
 8009718:	9b05      	ldr	r3, [sp, #20]
 800971a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800971e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009722:	220a      	movs	r2, #10
 8009724:	4620      	mov	r0, r4
 8009726:	4629      	mov	r1, r5
 8009728:	f103 38ff 	add.w	r8, r3, #4294967295
 800972c:	2300      	movs	r3, #0
 800972e:	f7f7 fa37 	bl	8000ba0 <__aeabi_uldivmod>
 8009732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009734:	3230      	adds	r2, #48	; 0x30
 8009736:	f803 2c01 	strb.w	r2, [r3, #-1]
 800973a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800973c:	f10a 0a01 	add.w	sl, sl, #1
 8009740:	b1d3      	cbz	r3, 8009778 <_vfiprintf_r+0x700>
 8009742:	9b07      	ldr	r3, [sp, #28]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	4553      	cmp	r3, sl
 8009748:	d116      	bne.n	8009778 <_vfiprintf_r+0x700>
 800974a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800974e:	d013      	beq.n	8009778 <_vfiprintf_r+0x700>
 8009750:	2c0a      	cmp	r4, #10
 8009752:	f175 0300 	sbcs.w	r3, r5, #0
 8009756:	d30f      	bcc.n	8009778 <_vfiprintf_r+0x700>
 8009758:	9b08      	ldr	r3, [sp, #32]
 800975a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800975c:	eba8 0803 	sub.w	r8, r8, r3
 8009760:	461a      	mov	r2, r3
 8009762:	4640      	mov	r0, r8
 8009764:	f7ff f938 	bl	80089d8 <strncpy>
 8009768:	9b07      	ldr	r3, [sp, #28]
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	b1a3      	cbz	r3, 8009798 <_vfiprintf_r+0x720>
 800976e:	f04f 0a00 	mov.w	sl, #0
 8009772:	9b07      	ldr	r3, [sp, #28]
 8009774:	3301      	adds	r3, #1
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	2300      	movs	r3, #0
 800977a:	220a      	movs	r2, #10
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f7 fa0e 	bl	8000ba0 <__aeabi_uldivmod>
 8009784:	2c0a      	cmp	r4, #10
 8009786:	f175 0300 	sbcs.w	r3, r5, #0
 800978a:	f0c0 80f9 	bcc.w	8009980 <_vfiprintf_r+0x908>
 800978e:	4604      	mov	r4, r0
 8009790:	460d      	mov	r5, r1
 8009792:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009796:	e7c3      	b.n	8009720 <_vfiprintf_r+0x6a8>
 8009798:	469a      	mov	sl, r3
 800979a:	e7ed      	b.n	8009778 <_vfiprintf_r+0x700>
 800979c:	9a06      	ldr	r2, [sp, #24]
 800979e:	f004 030f 	and.w	r3, r4, #15
 80097a2:	5cd3      	ldrb	r3, [r2, r3]
 80097a4:	0924      	lsrs	r4, r4, #4
 80097a6:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80097aa:	092d      	lsrs	r5, r5, #4
 80097ac:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80097b0:	ea54 0305 	orrs.w	r3, r4, r5
 80097b4:	d1f2      	bne.n	800979c <_vfiprintf_r+0x724>
 80097b6:	e0e3      	b.n	8009980 <_vfiprintf_r+0x908>
 80097b8:	b933      	cbnz	r3, 80097c8 <_vfiprintf_r+0x750>
 80097ba:	f01a 0f01 	tst.w	sl, #1
 80097be:	d003      	beq.n	80097c8 <_vfiprintf_r+0x750>
 80097c0:	2330      	movs	r3, #48	; 0x30
 80097c2:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 80097c6:	e7a0      	b.n	800970a <_vfiprintf_r+0x692>
 80097c8:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 80097cc:	e0d8      	b.n	8009980 <_vfiprintf_r+0x908>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f000 80a4 	beq.w	800991c <_vfiprintf_r+0x8a4>
 80097d4:	2100      	movs	r1, #0
 80097d6:	46a3      	mov	fp, r4
 80097d8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80097dc:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 80097e0:	e5db      	b.n	800939a <_vfiprintf_r+0x322>
 80097e2:	4605      	mov	r5, r0
 80097e4:	e68d      	b.n	8009502 <_vfiprintf_r+0x48a>
 80097e6:	bf00      	nop
 80097e8:	0802008a 	.word	0x0802008a
 80097ec:	0802009a 	.word	0x0802009a
 80097f0:	0801fe39 	.word	0x0801fe39
 80097f4:	2010      	movs	r0, #16
 80097f6:	2b07      	cmp	r3, #7
 80097f8:	4402      	add	r2, r0
 80097fa:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 80097fe:	6070      	str	r0, [r6, #4]
 8009800:	dd07      	ble.n	8009812 <_vfiprintf_r+0x79a>
 8009802:	4639      	mov	r1, r7
 8009804:	4648      	mov	r0, r9
 8009806:	aa0e      	add	r2, sp, #56	; 0x38
 8009808:	f7ff fc04 	bl	8009014 <__sprint_r>
 800980c:	2800      	cmp	r0, #0
 800980e:	d164      	bne.n	80098da <_vfiprintf_r+0x862>
 8009810:	a911      	add	r1, sp, #68	; 0x44
 8009812:	460e      	mov	r6, r1
 8009814:	3c10      	subs	r4, #16
 8009816:	e68f      	b.n	8009538 <_vfiprintf_r+0x4c0>
 8009818:	460e      	mov	r6, r1
 800981a:	e6a8      	b.n	800956e <_vfiprintf_r+0x4f6>
 800981c:	4639      	mov	r1, r7
 800981e:	4648      	mov	r0, r9
 8009820:	aa0e      	add	r2, sp, #56	; 0x38
 8009822:	f7ff fbf7 	bl	8009014 <__sprint_r>
 8009826:	2800      	cmp	r0, #0
 8009828:	d157      	bne.n	80098da <_vfiprintf_r+0x862>
 800982a:	ae11      	add	r6, sp, #68	; 0x44
 800982c:	e6b1      	b.n	8009592 <_vfiprintf_r+0x51a>
 800982e:	4639      	mov	r1, r7
 8009830:	4648      	mov	r0, r9
 8009832:	aa0e      	add	r2, sp, #56	; 0x38
 8009834:	f7ff fbee 	bl	8009014 <__sprint_r>
 8009838:	2800      	cmp	r0, #0
 800983a:	d14e      	bne.n	80098da <_vfiprintf_r+0x862>
 800983c:	ae11      	add	r6, sp, #68	; 0x44
 800983e:	e6b8      	b.n	80095b2 <_vfiprintf_r+0x53a>
 8009840:	2010      	movs	r0, #16
 8009842:	2b07      	cmp	r3, #7
 8009844:	4402      	add	r2, r0
 8009846:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800984a:	6070      	str	r0, [r6, #4]
 800984c:	dd07      	ble.n	800985e <_vfiprintf_r+0x7e6>
 800984e:	4639      	mov	r1, r7
 8009850:	4648      	mov	r0, r9
 8009852:	aa0e      	add	r2, sp, #56	; 0x38
 8009854:	f7ff fbde 	bl	8009014 <__sprint_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	d13e      	bne.n	80098da <_vfiprintf_r+0x862>
 800985c:	a911      	add	r1, sp, #68	; 0x44
 800985e:	460e      	mov	r6, r1
 8009860:	3c10      	subs	r4, #16
 8009862:	e6ae      	b.n	80095c2 <_vfiprintf_r+0x54a>
 8009864:	460e      	mov	r6, r1
 8009866:	e6c7      	b.n	80095f8 <_vfiprintf_r+0x580>
 8009868:	2010      	movs	r0, #16
 800986a:	2b07      	cmp	r3, #7
 800986c:	4401      	add	r1, r0
 800986e:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 8009872:	6070      	str	r0, [r6, #4]
 8009874:	dd06      	ble.n	8009884 <_vfiprintf_r+0x80c>
 8009876:	4639      	mov	r1, r7
 8009878:	4648      	mov	r0, r9
 800987a:	aa0e      	add	r2, sp, #56	; 0x38
 800987c:	f7ff fbca 	bl	8009014 <__sprint_r>
 8009880:	bb58      	cbnz	r0, 80098da <_vfiprintf_r+0x862>
 8009882:	aa11      	add	r2, sp, #68	; 0x44
 8009884:	4616      	mov	r6, r2
 8009886:	3c10      	subs	r4, #16
 8009888:	e6bb      	b.n	8009602 <_vfiprintf_r+0x58a>
 800988a:	4616      	mov	r6, r2
 800988c:	e6d3      	b.n	8009636 <_vfiprintf_r+0x5be>
 800988e:	4639      	mov	r1, r7
 8009890:	4648      	mov	r0, r9
 8009892:	aa0e      	add	r2, sp, #56	; 0x38
 8009894:	f7ff fbbe 	bl	8009014 <__sprint_r>
 8009898:	b9f8      	cbnz	r0, 80098da <_vfiprintf_r+0x862>
 800989a:	ab11      	add	r3, sp, #68	; 0x44
 800989c:	e6da      	b.n	8009654 <_vfiprintf_r+0x5dc>
 800989e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80098a2:	1a54      	subs	r4, r2, r1
 80098a4:	2c00      	cmp	r4, #0
 80098a6:	f77f aed9 	ble.w	800965c <_vfiprintf_r+0x5e4>
 80098aa:	2610      	movs	r6, #16
 80098ac:	4d38      	ldr	r5, [pc, #224]	; (8009990 <_vfiprintf_r+0x918>)
 80098ae:	2c10      	cmp	r4, #16
 80098b0:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80098b4:	601d      	str	r5, [r3, #0]
 80098b6:	f102 0201 	add.w	r2, r2, #1
 80098ba:	dc1d      	bgt.n	80098f8 <_vfiprintf_r+0x880>
 80098bc:	605c      	str	r4, [r3, #4]
 80098be:	2a07      	cmp	r2, #7
 80098c0:	440c      	add	r4, r1
 80098c2:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 80098c6:	f77f aec9 	ble.w	800965c <_vfiprintf_r+0x5e4>
 80098ca:	4639      	mov	r1, r7
 80098cc:	4648      	mov	r0, r9
 80098ce:	aa0e      	add	r2, sp, #56	; 0x38
 80098d0:	f7ff fba0 	bl	8009014 <__sprint_r>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f43f aec1 	beq.w	800965c <_vfiprintf_r+0x5e4>
 80098da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098dc:	07d9      	lsls	r1, r3, #31
 80098de:	d405      	bmi.n	80098ec <_vfiprintf_r+0x874>
 80098e0:	89bb      	ldrh	r3, [r7, #12]
 80098e2:	059a      	lsls	r2, r3, #22
 80098e4:	d402      	bmi.n	80098ec <_vfiprintf_r+0x874>
 80098e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80098e8:	f7fe fa99 	bl	8007e1e <__retarget_lock_release_recursive>
 80098ec:	89bb      	ldrh	r3, [r7, #12]
 80098ee:	065b      	lsls	r3, r3, #25
 80098f0:	f57f abf3 	bpl.w	80090da <_vfiprintf_r+0x62>
 80098f4:	f7ff bbee 	b.w	80090d4 <_vfiprintf_r+0x5c>
 80098f8:	3110      	adds	r1, #16
 80098fa:	2a07      	cmp	r2, #7
 80098fc:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8009900:	605e      	str	r6, [r3, #4]
 8009902:	dc02      	bgt.n	800990a <_vfiprintf_r+0x892>
 8009904:	3308      	adds	r3, #8
 8009906:	3c10      	subs	r4, #16
 8009908:	e7d1      	b.n	80098ae <_vfiprintf_r+0x836>
 800990a:	4639      	mov	r1, r7
 800990c:	4648      	mov	r0, r9
 800990e:	aa0e      	add	r2, sp, #56	; 0x38
 8009910:	f7ff fb80 	bl	8009014 <__sprint_r>
 8009914:	2800      	cmp	r0, #0
 8009916:	d1e0      	bne.n	80098da <_vfiprintf_r+0x862>
 8009918:	ab11      	add	r3, sp, #68	; 0x44
 800991a:	e7f4      	b.n	8009906 <_vfiprintf_r+0x88e>
 800991c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800991e:	b913      	cbnz	r3, 8009926 <_vfiprintf_r+0x8ae>
 8009920:	2300      	movs	r3, #0
 8009922:	930f      	str	r3, [sp, #60]	; 0x3c
 8009924:	e7d9      	b.n	80098da <_vfiprintf_r+0x862>
 8009926:	4639      	mov	r1, r7
 8009928:	4648      	mov	r0, r9
 800992a:	aa0e      	add	r2, sp, #56	; 0x38
 800992c:	f7ff fb72 	bl	8009014 <__sprint_r>
 8009930:	2800      	cmp	r0, #0
 8009932:	d0f5      	beq.n	8009920 <_vfiprintf_r+0x8a8>
 8009934:	e7d1      	b.n	80098da <_vfiprintf_r+0x862>
 8009936:	ea54 0205 	orrs.w	r2, r4, r5
 800993a:	f8cd a014 	str.w	sl, [sp, #20]
 800993e:	f43f ada2 	beq.w	8009486 <_vfiprintf_r+0x40e>
 8009942:	2b01      	cmp	r3, #1
 8009944:	f43f aeda 	beq.w	80096fc <_vfiprintf_r+0x684>
 8009948:	2b02      	cmp	r3, #2
 800994a:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800994e:	f43f af25 	beq.w	800979c <_vfiprintf_r+0x724>
 8009952:	f004 0307 	and.w	r3, r4, #7
 8009956:	08e4      	lsrs	r4, r4, #3
 8009958:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800995c:	08ed      	lsrs	r5, r5, #3
 800995e:	3330      	adds	r3, #48	; 0x30
 8009960:	ea54 0105 	orrs.w	r1, r4, r5
 8009964:	4642      	mov	r2, r8
 8009966:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800996a:	d1f2      	bne.n	8009952 <_vfiprintf_r+0x8da>
 800996c:	9905      	ldr	r1, [sp, #20]
 800996e:	07c8      	lsls	r0, r1, #31
 8009970:	d506      	bpl.n	8009980 <_vfiprintf_r+0x908>
 8009972:	2b30      	cmp	r3, #48	; 0x30
 8009974:	d004      	beq.n	8009980 <_vfiprintf_r+0x908>
 8009976:	2330      	movs	r3, #48	; 0x30
 8009978:	f808 3c01 	strb.w	r3, [r8, #-1]
 800997c:	f1a2 0802 	sub.w	r8, r2, #2
 8009980:	ab3a      	add	r3, sp, #232	; 0xe8
 8009982:	eba3 0308 	sub.w	r3, r3, r8
 8009986:	9d01      	ldr	r5, [sp, #4]
 8009988:	f8dd a014 	ldr.w	sl, [sp, #20]
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	e5b8      	b.n	8009502 <_vfiprintf_r+0x48a>
 8009990:	0802008a 	.word	0x0802008a

08009994 <__sbprintf>:
 8009994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009996:	461f      	mov	r7, r3
 8009998:	898b      	ldrh	r3, [r1, #12]
 800999a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800999e:	f023 0302 	bic.w	r3, r3, #2
 80099a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80099a6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80099a8:	4615      	mov	r5, r2
 80099aa:	9319      	str	r3, [sp, #100]	; 0x64
 80099ac:	89cb      	ldrh	r3, [r1, #14]
 80099ae:	4606      	mov	r6, r0
 80099b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80099b4:	69cb      	ldr	r3, [r1, #28]
 80099b6:	a816      	add	r0, sp, #88	; 0x58
 80099b8:	9307      	str	r3, [sp, #28]
 80099ba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80099bc:	460c      	mov	r4, r1
 80099be:	9309      	str	r3, [sp, #36]	; 0x24
 80099c0:	ab1a      	add	r3, sp, #104	; 0x68
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	9304      	str	r3, [sp, #16]
 80099c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ca:	9302      	str	r3, [sp, #8]
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	2300      	movs	r3, #0
 80099d0:	9306      	str	r3, [sp, #24]
 80099d2:	f7fe fa21 	bl	8007e18 <__retarget_lock_init_recursive>
 80099d6:	462a      	mov	r2, r5
 80099d8:	463b      	mov	r3, r7
 80099da:	4669      	mov	r1, sp
 80099dc:	4630      	mov	r0, r6
 80099de:	f7ff fb4b 	bl	8009078 <_vfiprintf_r>
 80099e2:	1e05      	subs	r5, r0, #0
 80099e4:	db07      	blt.n	80099f6 <__sbprintf+0x62>
 80099e6:	4669      	mov	r1, sp
 80099e8:	4630      	mov	r0, r6
 80099ea:	f000 f90b 	bl	8009c04 <_fflush_r>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	bf18      	it	ne
 80099f2:	f04f 35ff 	movne.w	r5, #4294967295
 80099f6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80099fa:	9816      	ldr	r0, [sp, #88]	; 0x58
 80099fc:	065b      	lsls	r3, r3, #25
 80099fe:	bf42      	ittt	mi
 8009a00:	89a3      	ldrhmi	r3, [r4, #12]
 8009a02:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009a06:	81a3      	strhmi	r3, [r4, #12]
 8009a08:	f7fe fa07 	bl	8007e1a <__retarget_lock_close_recursive>
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8009a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a14 <__ascii_wctomb>:
 8009a14:	4603      	mov	r3, r0
 8009a16:	4608      	mov	r0, r1
 8009a18:	b141      	cbz	r1, 8009a2c <__ascii_wctomb+0x18>
 8009a1a:	2aff      	cmp	r2, #255	; 0xff
 8009a1c:	d904      	bls.n	8009a28 <__ascii_wctomb+0x14>
 8009a1e:	228a      	movs	r2, #138	; 0x8a
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	4770      	bx	lr
 8009a28:	2001      	movs	r0, #1
 8009a2a:	700a      	strb	r2, [r1, #0]
 8009a2c:	4770      	bx	lr
	...

08009a30 <__swsetup_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4b2a      	ldr	r3, [pc, #168]	; (8009adc <__swsetup_r+0xac>)
 8009a34:	4605      	mov	r5, r0
 8009a36:	6818      	ldr	r0, [r3, #0]
 8009a38:	460c      	mov	r4, r1
 8009a3a:	b118      	cbz	r0, 8009a44 <__swsetup_r+0x14>
 8009a3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009a3e:	b90b      	cbnz	r3, 8009a44 <__swsetup_r+0x14>
 8009a40:	f000 f94c 	bl	8009cdc <__sinit>
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a4a:	0718      	lsls	r0, r3, #28
 8009a4c:	d422      	bmi.n	8009a94 <__swsetup_r+0x64>
 8009a4e:	06d9      	lsls	r1, r3, #27
 8009a50:	d407      	bmi.n	8009a62 <__swsetup_r+0x32>
 8009a52:	2309      	movs	r3, #9
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	e034      	b.n	8009acc <__swsetup_r+0x9c>
 8009a62:	0758      	lsls	r0, r3, #29
 8009a64:	d512      	bpl.n	8009a8c <__swsetup_r+0x5c>
 8009a66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009a68:	b141      	cbz	r1, 8009a7c <__swsetup_r+0x4c>
 8009a6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009a6e:	4299      	cmp	r1, r3
 8009a70:	d002      	beq.n	8009a78 <__swsetup_r+0x48>
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7fe f90c 	bl	8007c90 <_free_r>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a82:	81a3      	strh	r3, [r4, #12]
 8009a84:	2300      	movs	r3, #0
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f043 0308 	orr.w	r3, r3, #8
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	b94b      	cbnz	r3, 8009aac <__swsetup_r+0x7c>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aa2:	d003      	beq.n	8009aac <__swsetup_r+0x7c>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f000 fb3e 	bl	800a128 <__smakebuf_r>
 8009aac:	89a0      	ldrh	r0, [r4, #12]
 8009aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ab2:	f010 0301 	ands.w	r3, r0, #1
 8009ab6:	d00a      	beq.n	8009ace <__swsetup_r+0x9e>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60a3      	str	r3, [r4, #8]
 8009abc:	6963      	ldr	r3, [r4, #20]
 8009abe:	425b      	negs	r3, r3
 8009ac0:	61a3      	str	r3, [r4, #24]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	b943      	cbnz	r3, 8009ad8 <__swsetup_r+0xa8>
 8009ac6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aca:	d1c4      	bne.n	8009a56 <__swsetup_r+0x26>
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	0781      	lsls	r1, r0, #30
 8009ad0:	bf58      	it	pl
 8009ad2:	6963      	ldrpl	r3, [r4, #20]
 8009ad4:	60a3      	str	r3, [r4, #8]
 8009ad6:	e7f4      	b.n	8009ac2 <__swsetup_r+0x92>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e7f7      	b.n	8009acc <__swsetup_r+0x9c>
 8009adc:	20000040 	.word	0x20000040

08009ae0 <abort>:
 8009ae0:	2006      	movs	r0, #6
 8009ae2:	b508      	push	{r3, lr}
 8009ae4:	f000 fb8a 	bl	800a1fc <raise>
 8009ae8:	2001      	movs	r0, #1
 8009aea:	f7f8 ff44 	bl	8002976 <_exit>
	...

08009af0 <__sflush_r>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	898b      	ldrh	r3, [r1, #12]
 8009af4:	4605      	mov	r5, r0
 8009af6:	0718      	lsls	r0, r3, #28
 8009af8:	460c      	mov	r4, r1
 8009afa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009afe:	d45e      	bmi.n	8009bbe <__sflush_r+0xce>
 8009b00:	684b      	ldr	r3, [r1, #4]
 8009b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	818a      	strh	r2, [r1, #12]
 8009b0a:	dc04      	bgt.n	8009b16 <__sflush_r+0x26>
 8009b0c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dc01      	bgt.n	8009b16 <__sflush_r+0x26>
 8009b12:	2000      	movs	r0, #0
 8009b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b18:	2e00      	cmp	r6, #0
 8009b1a:	d0fa      	beq.n	8009b12 <__sflush_r+0x22>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b22:	682f      	ldr	r7, [r5, #0]
 8009b24:	602b      	str	r3, [r5, #0]
 8009b26:	d036      	beq.n	8009b96 <__sflush_r+0xa6>
 8009b28:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	075a      	lsls	r2, r3, #29
 8009b2e:	d505      	bpl.n	8009b3c <__sflush_r+0x4c>
 8009b30:	6863      	ldr	r3, [r4, #4]
 8009b32:	1ac0      	subs	r0, r0, r3
 8009b34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b36:	b10b      	cbz	r3, 8009b3c <__sflush_r+0x4c>
 8009b38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b3a:	1ac0      	subs	r0, r0, r3
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4602      	mov	r2, r0
 8009b40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b42:	4628      	mov	r0, r5
 8009b44:	69e1      	ldr	r1, [r4, #28]
 8009b46:	47b0      	blx	r6
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	d106      	bne.n	8009b5c <__sflush_r+0x6c>
 8009b4e:	6829      	ldr	r1, [r5, #0]
 8009b50:	291d      	cmp	r1, #29
 8009b52:	d830      	bhi.n	8009bb6 <__sflush_r+0xc6>
 8009b54:	4a2a      	ldr	r2, [pc, #168]	; (8009c00 <__sflush_r+0x110>)
 8009b56:	40ca      	lsrs	r2, r1
 8009b58:	07d6      	lsls	r6, r2, #31
 8009b5a:	d52c      	bpl.n	8009bb6 <__sflush_r+0xc6>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b62:	b21b      	sxth	r3, r3
 8009b64:	6062      	str	r2, [r4, #4]
 8009b66:	6922      	ldr	r2, [r4, #16]
 8009b68:	04d9      	lsls	r1, r3, #19
 8009b6a:	81a3      	strh	r3, [r4, #12]
 8009b6c:	6022      	str	r2, [r4, #0]
 8009b6e:	d504      	bpl.n	8009b7a <__sflush_r+0x8a>
 8009b70:	1c42      	adds	r2, r0, #1
 8009b72:	d101      	bne.n	8009b78 <__sflush_r+0x88>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b903      	cbnz	r3, 8009b7a <__sflush_r+0x8a>
 8009b78:	6520      	str	r0, [r4, #80]	; 0x50
 8009b7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b7c:	602f      	str	r7, [r5, #0]
 8009b7e:	2900      	cmp	r1, #0
 8009b80:	d0c7      	beq.n	8009b12 <__sflush_r+0x22>
 8009b82:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009b86:	4299      	cmp	r1, r3
 8009b88:	d002      	beq.n	8009b90 <__sflush_r+0xa0>
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f7fe f880 	bl	8007c90 <_free_r>
 8009b90:	2000      	movs	r0, #0
 8009b92:	6320      	str	r0, [r4, #48]	; 0x30
 8009b94:	e7be      	b.n	8009b14 <__sflush_r+0x24>
 8009b96:	69e1      	ldr	r1, [r4, #28]
 8009b98:	2301      	movs	r3, #1
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	47b0      	blx	r6
 8009b9e:	1c41      	adds	r1, r0, #1
 8009ba0:	d1c3      	bne.n	8009b2a <__sflush_r+0x3a>
 8009ba2:	682b      	ldr	r3, [r5, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0c0      	beq.n	8009b2a <__sflush_r+0x3a>
 8009ba8:	2b1d      	cmp	r3, #29
 8009baa:	d001      	beq.n	8009bb0 <__sflush_r+0xc0>
 8009bac:	2b16      	cmp	r3, #22
 8009bae:	d101      	bne.n	8009bb4 <__sflush_r+0xc4>
 8009bb0:	602f      	str	r7, [r5, #0]
 8009bb2:	e7ae      	b.n	8009b12 <__sflush_r+0x22>
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bba:	81a3      	strh	r3, [r4, #12]
 8009bbc:	e7aa      	b.n	8009b14 <__sflush_r+0x24>
 8009bbe:	690f      	ldr	r7, [r1, #16]
 8009bc0:	2f00      	cmp	r7, #0
 8009bc2:	d0a6      	beq.n	8009b12 <__sflush_r+0x22>
 8009bc4:	079b      	lsls	r3, r3, #30
 8009bc6:	bf18      	it	ne
 8009bc8:	2300      	movne	r3, #0
 8009bca:	680e      	ldr	r6, [r1, #0]
 8009bcc:	bf08      	it	eq
 8009bce:	694b      	ldreq	r3, [r1, #20]
 8009bd0:	1bf6      	subs	r6, r6, r7
 8009bd2:	600f      	str	r7, [r1, #0]
 8009bd4:	608b      	str	r3, [r1, #8]
 8009bd6:	2e00      	cmp	r6, #0
 8009bd8:	dd9b      	ble.n	8009b12 <__sflush_r+0x22>
 8009bda:	4633      	mov	r3, r6
 8009bdc:	463a      	mov	r2, r7
 8009bde:	4628      	mov	r0, r5
 8009be0:	69e1      	ldr	r1, [r4, #28]
 8009be2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8009be6:	47e0      	blx	ip
 8009be8:	2800      	cmp	r0, #0
 8009bea:	dc06      	bgt.n	8009bfa <__sflush_r+0x10a>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	e78c      	b.n	8009b14 <__sflush_r+0x24>
 8009bfa:	4407      	add	r7, r0
 8009bfc:	1a36      	subs	r6, r6, r0
 8009bfe:	e7ea      	b.n	8009bd6 <__sflush_r+0xe6>
 8009c00:	20400001 	.word	0x20400001

08009c04 <_fflush_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	460c      	mov	r4, r1
 8009c08:	4605      	mov	r5, r0
 8009c0a:	b118      	cbz	r0, 8009c14 <_fflush_r+0x10>
 8009c0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c0e:	b90b      	cbnz	r3, 8009c14 <_fflush_r+0x10>
 8009c10:	f000 f864 	bl	8009cdc <__sinit>
 8009c14:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009c18:	b1b8      	cbz	r0, 8009c4a <_fflush_r+0x46>
 8009c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c1c:	07db      	lsls	r3, r3, #31
 8009c1e:	d404      	bmi.n	8009c2a <_fflush_r+0x26>
 8009c20:	0581      	lsls	r1, r0, #22
 8009c22:	d402      	bmi.n	8009c2a <_fflush_r+0x26>
 8009c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c26:	f7fe f8f9 	bl	8007e1c <__retarget_lock_acquire_recursive>
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	f7ff ff5f 	bl	8009af0 <__sflush_r>
 8009c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c34:	4605      	mov	r5, r0
 8009c36:	07da      	lsls	r2, r3, #31
 8009c38:	d405      	bmi.n	8009c46 <_fflush_r+0x42>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	059b      	lsls	r3, r3, #22
 8009c3e:	d402      	bmi.n	8009c46 <_fflush_r+0x42>
 8009c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c42:	f7fe f8ec 	bl	8007e1e <__retarget_lock_release_recursive>
 8009c46:	4628      	mov	r0, r5
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	e7fb      	b.n	8009c46 <_fflush_r+0x42>
	...

08009c50 <std>:
 8009c50:	2300      	movs	r3, #0
 8009c52:	b510      	push	{r4, lr}
 8009c54:	4604      	mov	r4, r0
 8009c56:	e9c0 3300 	strd	r3, r3, [r0]
 8009c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c5e:	6083      	str	r3, [r0, #8]
 8009c60:	8181      	strh	r1, [r0, #12]
 8009c62:	6643      	str	r3, [r0, #100]	; 0x64
 8009c64:	81c2      	strh	r2, [r0, #14]
 8009c66:	6183      	str	r3, [r0, #24]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	2208      	movs	r2, #8
 8009c6c:	305c      	adds	r0, #92	; 0x5c
 8009c6e:	f7fb ff59 	bl	8005b24 <memset>
 8009c72:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <std+0x40>)
 8009c74:	61e4      	str	r4, [r4, #28]
 8009c76:	6223      	str	r3, [r4, #32]
 8009c78:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <std+0x44>)
 8009c7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c7e:	6263      	str	r3, [r4, #36]	; 0x24
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <std+0x48>)
 8009c82:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c84:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <std+0x4c>)
 8009c86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c8c:	f7fe b8c4 	b.w	8007e18 <__retarget_lock_init_recursive>
 8009c90:	0800a235 	.word	0x0800a235
 8009c94:	0800a257 	.word	0x0800a257
 8009c98:	0800a28f 	.word	0x0800a28f
 8009c9c:	0800a2b3 	.word	0x0800a2b3

08009ca0 <_cleanup_r>:
 8009ca0:	4901      	ldr	r1, [pc, #4]	; (8009ca8 <_cleanup_r+0x8>)
 8009ca2:	f000 b9f5 	b.w	800a090 <_fwalk_reent>
 8009ca6:	bf00      	nop
 8009ca8:	0800a3bd 	.word	0x0800a3bd

08009cac <__sfp_lock_acquire>:
 8009cac:	4801      	ldr	r0, [pc, #4]	; (8009cb4 <__sfp_lock_acquire+0x8>)
 8009cae:	f7fe b8b5 	b.w	8007e1c <__retarget_lock_acquire_recursive>
 8009cb2:	bf00      	nop
 8009cb4:	20000b46 	.word	0x20000b46

08009cb8 <__sfp_lock_release>:
 8009cb8:	4801      	ldr	r0, [pc, #4]	; (8009cc0 <__sfp_lock_release+0x8>)
 8009cba:	f7fe b8b0 	b.w	8007e1e <__retarget_lock_release_recursive>
 8009cbe:	bf00      	nop
 8009cc0:	20000b46 	.word	0x20000b46

08009cc4 <__sinit_lock_acquire>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	; (8009ccc <__sinit_lock_acquire+0x8>)
 8009cc6:	f7fe b8a9 	b.w	8007e1c <__retarget_lock_acquire_recursive>
 8009cca:	bf00      	nop
 8009ccc:	20000b47 	.word	0x20000b47

08009cd0 <__sinit_lock_release>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	; (8009cd8 <__sinit_lock_release+0x8>)
 8009cd2:	f7fe b8a4 	b.w	8007e1e <__retarget_lock_release_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	20000b47 	.word	0x20000b47

08009cdc <__sinit>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4604      	mov	r4, r0
 8009ce0:	f7ff fff0 	bl	8009cc4 <__sinit_lock_acquire>
 8009ce4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ce6:	b11a      	cbz	r2, 8009cf0 <__sinit+0x14>
 8009ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cec:	f7ff bff0 	b.w	8009cd0 <__sinit_lock_release>
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <__sinit+0x4c>)
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8009cfc:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8009d00:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8009d04:	6860      	ldr	r0, [r4, #4]
 8009d06:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8009d0a:	f7ff ffa1 	bl	8009c50 <std>
 8009d0e:	2201      	movs	r2, #1
 8009d10:	2109      	movs	r1, #9
 8009d12:	68a0      	ldr	r0, [r4, #8]
 8009d14:	f7ff ff9c 	bl	8009c50 <std>
 8009d18:	2202      	movs	r2, #2
 8009d1a:	2112      	movs	r1, #18
 8009d1c:	68e0      	ldr	r0, [r4, #12]
 8009d1e:	f7ff ff97 	bl	8009c50 <std>
 8009d22:	2301      	movs	r3, #1
 8009d24:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d26:	e7df      	b.n	8009ce8 <__sinit+0xc>
 8009d28:	08009ca1 	.word	0x08009ca1

08009d2c <__fputwc>:
 8009d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	4680      	mov	r8, r0
 8009d32:	460e      	mov	r6, r1
 8009d34:	4615      	mov	r5, r2
 8009d36:	f7fe ff93 	bl	8008c60 <__locale_mb_cur_max>
 8009d3a:	2801      	cmp	r0, #1
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	d11b      	bne.n	8009d78 <__fputwc+0x4c>
 8009d40:	1e73      	subs	r3, r6, #1
 8009d42:	2bfe      	cmp	r3, #254	; 0xfe
 8009d44:	d818      	bhi.n	8009d78 <__fputwc+0x4c>
 8009d46:	f88d 6004 	strb.w	r6, [sp, #4]
 8009d4a:	2700      	movs	r7, #0
 8009d4c:	f10d 0904 	add.w	r9, sp, #4
 8009d50:	42a7      	cmp	r7, r4
 8009d52:	d020      	beq.n	8009d96 <__fputwc+0x6a>
 8009d54:	68ab      	ldr	r3, [r5, #8]
 8009d56:	f817 1009 	ldrb.w	r1, [r7, r9]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	60ab      	str	r3, [r5, #8]
 8009d60:	da04      	bge.n	8009d6c <__fputwc+0x40>
 8009d62:	69aa      	ldr	r2, [r5, #24]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	db1a      	blt.n	8009d9e <__fputwc+0x72>
 8009d68:	290a      	cmp	r1, #10
 8009d6a:	d018      	beq.n	8009d9e <__fputwc+0x72>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	602a      	str	r2, [r5, #0]
 8009d72:	7019      	strb	r1, [r3, #0]
 8009d74:	3701      	adds	r7, #1
 8009d76:	e7eb      	b.n	8009d50 <__fputwc+0x24>
 8009d78:	4632      	mov	r2, r6
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8009d80:	a901      	add	r1, sp, #4
 8009d82:	f000 fae3 	bl	800a34c <_wcrtomb_r>
 8009d86:	1c42      	adds	r2, r0, #1
 8009d88:	4604      	mov	r4, r0
 8009d8a:	d1de      	bne.n	8009d4a <__fputwc+0x1e>
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d94:	81ab      	strh	r3, [r5, #12]
 8009d96:	4630      	mov	r0, r6
 8009d98:	b003      	add	sp, #12
 8009d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d9e:	462a      	mov	r2, r5
 8009da0:	4640      	mov	r0, r8
 8009da2:	f000 fa8a 	bl	800a2ba <__swbuf_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d1e4      	bne.n	8009d74 <__fputwc+0x48>
 8009daa:	4606      	mov	r6, r0
 8009dac:	e7f3      	b.n	8009d96 <__fputwc+0x6a>

08009dae <_fputwc_r>:
 8009dae:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	07db      	lsls	r3, r3, #31
 8009db4:	4605      	mov	r5, r0
 8009db6:	460e      	mov	r6, r1
 8009db8:	4614      	mov	r4, r2
 8009dba:	d405      	bmi.n	8009dc8 <_fputwc_r+0x1a>
 8009dbc:	8993      	ldrh	r3, [r2, #12]
 8009dbe:	0598      	lsls	r0, r3, #22
 8009dc0:	d402      	bmi.n	8009dc8 <_fputwc_r+0x1a>
 8009dc2:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8009dc4:	f7fe f82a 	bl	8007e1c <__retarget_lock_acquire_recursive>
 8009dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dcc:	0499      	lsls	r1, r3, #18
 8009dce:	d406      	bmi.n	8009dde <_fputwc_r+0x30>
 8009dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ddc:	6663      	str	r3, [r4, #100]	; 0x64
 8009dde:	4622      	mov	r2, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	4631      	mov	r1, r6
 8009de4:	f7ff ffa2 	bl	8009d2c <__fputwc>
 8009de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dea:	4605      	mov	r5, r0
 8009dec:	07da      	lsls	r2, r3, #31
 8009dee:	d405      	bmi.n	8009dfc <_fputwc_r+0x4e>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	059b      	lsls	r3, r3, #22
 8009df4:	d402      	bmi.n	8009dfc <_fputwc_r+0x4e>
 8009df6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009df8:	f7fe f811 	bl	8007e1e <__retarget_lock_release_recursive>
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	bd70      	pop	{r4, r5, r6, pc}

08009e00 <__sfvwrite_r>:
 8009e00:	6893      	ldr	r3, [r2, #8]
 8009e02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e06:	4606      	mov	r6, r0
 8009e08:	460c      	mov	r4, r1
 8009e0a:	4690      	mov	r8, r2
 8009e0c:	b91b      	cbnz	r3, 8009e16 <__sfvwrite_r+0x16>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	b003      	add	sp, #12
 8009e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e16:	898b      	ldrh	r3, [r1, #12]
 8009e18:	0718      	lsls	r0, r3, #28
 8009e1a:	d550      	bpl.n	8009ebe <__sfvwrite_r+0xbe>
 8009e1c:	690b      	ldr	r3, [r1, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d04d      	beq.n	8009ebe <__sfvwrite_r+0xbe>
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	f8d8 7000 	ldr.w	r7, [r8]
 8009e28:	f013 0902 	ands.w	r9, r3, #2
 8009e2c:	d16b      	bne.n	8009f06 <__sfvwrite_r+0x106>
 8009e2e:	f013 0301 	ands.w	r3, r3, #1
 8009e32:	f000 809b 	beq.w	8009f6c <__sfvwrite_r+0x16c>
 8009e36:	4648      	mov	r0, r9
 8009e38:	46ca      	mov	sl, r9
 8009e3a:	46cb      	mov	fp, r9
 8009e3c:	f1bb 0f00 	cmp.w	fp, #0
 8009e40:	f000 8102 	beq.w	800a048 <__sfvwrite_r+0x248>
 8009e44:	b950      	cbnz	r0, 8009e5c <__sfvwrite_r+0x5c>
 8009e46:	465a      	mov	r2, fp
 8009e48:	210a      	movs	r1, #10
 8009e4a:	4650      	mov	r0, sl
 8009e4c:	f7fe fa24 	bl	8008298 <memchr>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	f000 80fe 	beq.w	800a052 <__sfvwrite_r+0x252>
 8009e56:	3001      	adds	r0, #1
 8009e58:	eba0 090a 	sub.w	r9, r0, sl
 8009e5c:	6820      	ldr	r0, [r4, #0]
 8009e5e:	6921      	ldr	r1, [r4, #16]
 8009e60:	45d9      	cmp	r9, fp
 8009e62:	464a      	mov	r2, r9
 8009e64:	bf28      	it	cs
 8009e66:	465a      	movcs	r2, fp
 8009e68:	4288      	cmp	r0, r1
 8009e6a:	6963      	ldr	r3, [r4, #20]
 8009e6c:	f240 80f4 	bls.w	800a058 <__sfvwrite_r+0x258>
 8009e70:	68a5      	ldr	r5, [r4, #8]
 8009e72:	441d      	add	r5, r3
 8009e74:	42aa      	cmp	r2, r5
 8009e76:	f340 80ef 	ble.w	800a058 <__sfvwrite_r+0x258>
 8009e7a:	4651      	mov	r1, sl
 8009e7c:	462a      	mov	r2, r5
 8009e7e:	f7fe ff07 	bl	8008c90 <memmove>
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	4621      	mov	r1, r4
 8009e86:	442b      	add	r3, r5
 8009e88:	4630      	mov	r0, r6
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	f7ff feba 	bl	8009c04 <_fflush_r>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d166      	bne.n	8009f62 <__sfvwrite_r+0x162>
 8009e94:	ebb9 0905 	subs.w	r9, r9, r5
 8009e98:	f040 80f6 	bne.w	800a088 <__sfvwrite_r+0x288>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7ff feb0 	bl	8009c04 <_fflush_r>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d15c      	bne.n	8009f62 <__sfvwrite_r+0x162>
 8009ea8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009eac:	44aa      	add	sl, r5
 8009eae:	ebab 0b05 	sub.w	fp, fp, r5
 8009eb2:	1b55      	subs	r5, r2, r5
 8009eb4:	f8c8 5008 	str.w	r5, [r8, #8]
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	d1bf      	bne.n	8009e3c <__sfvwrite_r+0x3c>
 8009ebc:	e7a7      	b.n	8009e0e <__sfvwrite_r+0xe>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f7ff fdb5 	bl	8009a30 <__swsetup_r>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d0ab      	beq.n	8009e22 <__sfvwrite_r+0x22>
 8009eca:	f04f 30ff 	mov.w	r0, #4294967295
 8009ece:	e79f      	b.n	8009e10 <__sfvwrite_r+0x10>
 8009ed0:	e9d7 b500 	ldrd	fp, r5, [r7]
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	d0fa      	beq.n	8009ed0 <__sfvwrite_r+0xd0>
 8009eda:	4555      	cmp	r5, sl
 8009edc:	462b      	mov	r3, r5
 8009ede:	465a      	mov	r2, fp
 8009ee0:	bf28      	it	cs
 8009ee2:	4653      	movcs	r3, sl
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	69e1      	ldr	r1, [r4, #28]
 8009ee8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8009eec:	47e0      	blx	ip
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	dd37      	ble.n	8009f62 <__sfvwrite_r+0x162>
 8009ef2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ef6:	4483      	add	fp, r0
 8009ef8:	1a2d      	subs	r5, r5, r0
 8009efa:	1a18      	subs	r0, r3, r0
 8009efc:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d1e8      	bne.n	8009ed6 <__sfvwrite_r+0xd6>
 8009f04:	e783      	b.n	8009e0e <__sfvwrite_r+0xe>
 8009f06:	f04f 0b00 	mov.w	fp, #0
 8009f0a:	f8df a180 	ldr.w	sl, [pc, #384]	; 800a08c <__sfvwrite_r+0x28c>
 8009f0e:	465d      	mov	r5, fp
 8009f10:	e7e1      	b.n	8009ed6 <__sfvwrite_r+0xd6>
 8009f12:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8009f16:	3708      	adds	r7, #8
 8009f18:	f1ba 0f00 	cmp.w	sl, #0
 8009f1c:	d0f9      	beq.n	8009f12 <__sfvwrite_r+0x112>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	0599      	lsls	r1, r3, #22
 8009f24:	68a2      	ldr	r2, [r4, #8]
 8009f26:	d563      	bpl.n	8009ff0 <__sfvwrite_r+0x1f0>
 8009f28:	4552      	cmp	r2, sl
 8009f2a:	d836      	bhi.n	8009f9a <__sfvwrite_r+0x19a>
 8009f2c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009f30:	d033      	beq.n	8009f9a <__sfvwrite_r+0x19a>
 8009f32:	6921      	ldr	r1, [r4, #16]
 8009f34:	6965      	ldr	r5, [r4, #20]
 8009f36:	eba0 0b01 	sub.w	fp, r0, r1
 8009f3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f42:	f10b 0201 	add.w	r2, fp, #1
 8009f46:	106d      	asrs	r5, r5, #1
 8009f48:	4452      	add	r2, sl
 8009f4a:	4295      	cmp	r5, r2
 8009f4c:	bf38      	it	cc
 8009f4e:	4615      	movcc	r5, r2
 8009f50:	055b      	lsls	r3, r3, #21
 8009f52:	d53d      	bpl.n	8009fd0 <__sfvwrite_r+0x1d0>
 8009f54:	4629      	mov	r1, r5
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7fd ff62 	bl	8007e20 <_malloc_r>
 8009f5c:	b948      	cbnz	r0, 8009f72 <__sfvwrite_r+0x172>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	6033      	str	r3, [r6, #0]
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	e7ae      	b.n	8009eca <__sfvwrite_r+0xca>
 8009f6c:	4699      	mov	r9, r3
 8009f6e:	469a      	mov	sl, r3
 8009f70:	e7d2      	b.n	8009f18 <__sfvwrite_r+0x118>
 8009f72:	465a      	mov	r2, fp
 8009f74:	6921      	ldr	r1, [r4, #16]
 8009f76:	9001      	str	r0, [sp, #4]
 8009f78:	f7fe f99c 	bl	80082b4 <memcpy>
 8009f7c:	89a2      	ldrh	r2, [r4, #12]
 8009f7e:	9b01      	ldr	r3, [sp, #4]
 8009f80:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009f84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f88:	81a2      	strh	r2, [r4, #12]
 8009f8a:	4652      	mov	r2, sl
 8009f8c:	6123      	str	r3, [r4, #16]
 8009f8e:	6165      	str	r5, [r4, #20]
 8009f90:	445b      	add	r3, fp
 8009f92:	eba5 050b 	sub.w	r5, r5, fp
 8009f96:	6023      	str	r3, [r4, #0]
 8009f98:	60a5      	str	r5, [r4, #8]
 8009f9a:	4552      	cmp	r2, sl
 8009f9c:	bf28      	it	cs
 8009f9e:	4652      	movcs	r2, sl
 8009fa0:	4655      	mov	r5, sl
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	6820      	ldr	r0, [r4, #0]
 8009fa6:	9201      	str	r2, [sp, #4]
 8009fa8:	f7fe fe72 	bl	8008c90 <memmove>
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	9a01      	ldr	r2, [sp, #4]
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	441a      	add	r2, r3
 8009fb8:	6022      	str	r2, [r4, #0]
 8009fba:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8009fbe:	44a9      	add	r9, r5
 8009fc0:	ebaa 0a05 	sub.w	sl, sl, r5
 8009fc4:	1b45      	subs	r5, r0, r5
 8009fc6:	f8c8 5008 	str.w	r5, [r8, #8]
 8009fca:	2d00      	cmp	r5, #0
 8009fcc:	d1a4      	bne.n	8009f18 <__sfvwrite_r+0x118>
 8009fce:	e71e      	b.n	8009e0e <__sfvwrite_r+0xe>
 8009fd0:	462a      	mov	r2, r5
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7fe fe76 	bl	8008cc4 <_realloc_r>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d1d5      	bne.n	8009f8a <__sfvwrite_r+0x18a>
 8009fde:	4630      	mov	r0, r6
 8009fe0:	6921      	ldr	r1, [r4, #16]
 8009fe2:	f7fd fe55 	bl	8007c90 <_free_r>
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	e7b6      	b.n	8009f5e <__sfvwrite_r+0x15e>
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	4283      	cmp	r3, r0
 8009ff4:	d302      	bcc.n	8009ffc <__sfvwrite_r+0x1fc>
 8009ff6:	6961      	ldr	r1, [r4, #20]
 8009ff8:	4551      	cmp	r1, sl
 8009ffa:	d915      	bls.n	800a028 <__sfvwrite_r+0x228>
 8009ffc:	4552      	cmp	r2, sl
 8009ffe:	bf28      	it	cs
 800a000:	4652      	movcs	r2, sl
 800a002:	4615      	mov	r5, r2
 800a004:	4649      	mov	r1, r9
 800a006:	f7fe fe43 	bl	8008c90 <memmove>
 800a00a:	68a3      	ldr	r3, [r4, #8]
 800a00c:	6822      	ldr	r2, [r4, #0]
 800a00e:	1b5b      	subs	r3, r3, r5
 800a010:	442a      	add	r2, r5
 800a012:	60a3      	str	r3, [r4, #8]
 800a014:	6022      	str	r2, [r4, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1cf      	bne.n	8009fba <__sfvwrite_r+0x1ba>
 800a01a:	4621      	mov	r1, r4
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7ff fdf1 	bl	8009c04 <_fflush_r>
 800a022:	2800      	cmp	r0, #0
 800a024:	d0c9      	beq.n	8009fba <__sfvwrite_r+0x1ba>
 800a026:	e79c      	b.n	8009f62 <__sfvwrite_r+0x162>
 800a028:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a02c:	459a      	cmp	sl, r3
 800a02e:	bf38      	it	cc
 800a030:	4653      	movcc	r3, sl
 800a032:	fb93 f3f1 	sdiv	r3, r3, r1
 800a036:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a038:	434b      	muls	r3, r1
 800a03a:	464a      	mov	r2, r9
 800a03c:	4630      	mov	r0, r6
 800a03e:	69e1      	ldr	r1, [r4, #28]
 800a040:	47a8      	blx	r5
 800a042:	1e05      	subs	r5, r0, #0
 800a044:	dcb9      	bgt.n	8009fba <__sfvwrite_r+0x1ba>
 800a046:	e78c      	b.n	8009f62 <__sfvwrite_r+0x162>
 800a048:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a04c:	2000      	movs	r0, #0
 800a04e:	3708      	adds	r7, #8
 800a050:	e6f4      	b.n	8009e3c <__sfvwrite_r+0x3c>
 800a052:	f10b 0901 	add.w	r9, fp, #1
 800a056:	e701      	b.n	8009e5c <__sfvwrite_r+0x5c>
 800a058:	4293      	cmp	r3, r2
 800a05a:	dc08      	bgt.n	800a06e <__sfvwrite_r+0x26e>
 800a05c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a05e:	4652      	mov	r2, sl
 800a060:	4630      	mov	r0, r6
 800a062:	69e1      	ldr	r1, [r4, #28]
 800a064:	47a8      	blx	r5
 800a066:	1e05      	subs	r5, r0, #0
 800a068:	f73f af14 	bgt.w	8009e94 <__sfvwrite_r+0x94>
 800a06c:	e779      	b.n	8009f62 <__sfvwrite_r+0x162>
 800a06e:	4651      	mov	r1, sl
 800a070:	9201      	str	r2, [sp, #4]
 800a072:	f7fe fe0d 	bl	8008c90 <memmove>
 800a076:	9a01      	ldr	r2, [sp, #4]
 800a078:	68a3      	ldr	r3, [r4, #8]
 800a07a:	4615      	mov	r5, r2
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	60a3      	str	r3, [r4, #8]
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	4413      	add	r3, r2
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	e705      	b.n	8009e94 <__sfvwrite_r+0x94>
 800a088:	2001      	movs	r0, #1
 800a08a:	e70d      	b.n	8009ea8 <__sfvwrite_r+0xa8>
 800a08c:	7ffffc00 	.word	0x7ffffc00

0800a090 <_fwalk_reent>:
 800a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a094:	4606      	mov	r6, r0
 800a096:	4688      	mov	r8, r1
 800a098:	2700      	movs	r7, #0
 800a09a:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800a09e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0a2:	f1b9 0901 	subs.w	r9, r9, #1
 800a0a6:	d505      	bpl.n	800a0b4 <_fwalk_reent+0x24>
 800a0a8:	6824      	ldr	r4, [r4, #0]
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	d1f7      	bne.n	800a09e <_fwalk_reent+0xe>
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b4:	89ab      	ldrh	r3, [r5, #12]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d907      	bls.n	800a0ca <_fwalk_reent+0x3a>
 800a0ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	d003      	beq.n	800a0ca <_fwalk_reent+0x3a>
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	47c0      	blx	r8
 800a0c8:	4307      	orrs	r7, r0
 800a0ca:	3568      	adds	r5, #104	; 0x68
 800a0cc:	e7e9      	b.n	800a0a2 <_fwalk_reent+0x12>

0800a0ce <__swhatbuf_r>:
 800a0ce:	b570      	push	{r4, r5, r6, lr}
 800a0d0:	460e      	mov	r6, r1
 800a0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d6:	4614      	mov	r4, r2
 800a0d8:	2900      	cmp	r1, #0
 800a0da:	461d      	mov	r5, r3
 800a0dc:	b096      	sub	sp, #88	; 0x58
 800a0de:	da0a      	bge.n	800a0f6 <__swhatbuf_r+0x28>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800a0e6:	602b      	str	r3, [r5, #0]
 800a0e8:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800a0ec:	d116      	bne.n	800a11c <__swhatbuf_r+0x4e>
 800a0ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f2:	6023      	str	r3, [r4, #0]
 800a0f4:	e015      	b.n	800a122 <__swhatbuf_r+0x54>
 800a0f6:	466a      	mov	r2, sp
 800a0f8:	f000 f9b8 	bl	800a46c <_fstat_r>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	dbef      	blt.n	800a0e0 <__swhatbuf_r+0x12>
 800a100:	9a01      	ldr	r2, [sp, #4]
 800a102:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a106:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a10a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a10e:	425a      	negs	r2, r3
 800a110:	415a      	adcs	r2, r3
 800a112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a116:	602a      	str	r2, [r5, #0]
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	e002      	b.n	800a122 <__swhatbuf_r+0x54>
 800a11c:	2240      	movs	r2, #64	; 0x40
 800a11e:	4618      	mov	r0, r3
 800a120:	6022      	str	r2, [r4, #0]
 800a122:	b016      	add	sp, #88	; 0x58
 800a124:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a128 <__smakebuf_r>:
 800a128:	898b      	ldrh	r3, [r1, #12]
 800a12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a12c:	079d      	lsls	r5, r3, #30
 800a12e:	4606      	mov	r6, r0
 800a130:	460c      	mov	r4, r1
 800a132:	d507      	bpl.n	800a144 <__smakebuf_r+0x1c>
 800a134:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	2301      	movs	r3, #1
 800a13e:	6163      	str	r3, [r4, #20]
 800a140:	b002      	add	sp, #8
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	466a      	mov	r2, sp
 800a146:	ab01      	add	r3, sp, #4
 800a148:	f7ff ffc1 	bl	800a0ce <__swhatbuf_r>
 800a14c:	9900      	ldr	r1, [sp, #0]
 800a14e:	4605      	mov	r5, r0
 800a150:	4630      	mov	r0, r6
 800a152:	f7fd fe65 	bl	8007e20 <_malloc_r>
 800a156:	b948      	cbnz	r0, 800a16c <__smakebuf_r+0x44>
 800a158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15c:	059a      	lsls	r2, r3, #22
 800a15e:	d4ef      	bmi.n	800a140 <__smakebuf_r+0x18>
 800a160:	f023 0303 	bic.w	r3, r3, #3
 800a164:	f043 0302 	orr.w	r3, r3, #2
 800a168:	81a3      	strh	r3, [r4, #12]
 800a16a:	e7e3      	b.n	800a134 <__smakebuf_r+0xc>
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <__smakebuf_r+0x7c>)
 800a16e:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	6020      	str	r0, [r4, #0]
 800a174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	9b00      	ldr	r3, [sp, #0]
 800a17c:	6120      	str	r0, [r4, #16]
 800a17e:	6163      	str	r3, [r4, #20]
 800a180:	9b01      	ldr	r3, [sp, #4]
 800a182:	b15b      	cbz	r3, 800a19c <__smakebuf_r+0x74>
 800a184:	4630      	mov	r0, r6
 800a186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a18a:	f000 f981 	bl	800a490 <_isatty_r>
 800a18e:	b128      	cbz	r0, 800a19c <__smakebuf_r+0x74>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f023 0303 	bic.w	r3, r3, #3
 800a196:	f043 0301 	orr.w	r3, r3, #1
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	89a0      	ldrh	r0, [r4, #12]
 800a19e:	4305      	orrs	r5, r0
 800a1a0:	81a5      	strh	r5, [r4, #12]
 800a1a2:	e7cd      	b.n	800a140 <__smakebuf_r+0x18>
 800a1a4:	08009ca1 	.word	0x08009ca1

0800a1a8 <_raise_r>:
 800a1a8:	291f      	cmp	r1, #31
 800a1aa:	b538      	push	{r3, r4, r5, lr}
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	460d      	mov	r5, r1
 800a1b0:	d904      	bls.n	800a1bc <_raise_r+0x14>
 800a1b2:	2316      	movs	r3, #22
 800a1b4:	6003      	str	r3, [r0, #0]
 800a1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a1c0:	b112      	cbz	r2, 800a1c8 <_raise_r+0x20>
 800a1c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1c6:	b94b      	cbnz	r3, 800a1dc <_raise_r+0x34>
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 f831 	bl	800a230 <_getpid_r>
 800a1ce:	462a      	mov	r2, r5
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1d8:	f000 b818 	b.w	800a20c <_kill_r>
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d00a      	beq.n	800a1f6 <_raise_r+0x4e>
 800a1e0:	1c59      	adds	r1, r3, #1
 800a1e2:	d103      	bne.n	800a1ec <_raise_r+0x44>
 800a1e4:	2316      	movs	r3, #22
 800a1e6:	6003      	str	r3, [r0, #0]
 800a1e8:	2001      	movs	r0, #1
 800a1ea:	e7e6      	b.n	800a1ba <_raise_r+0x12>
 800a1ec:	2400      	movs	r4, #0
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1f4:	4798      	blx	r3
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e7df      	b.n	800a1ba <_raise_r+0x12>
	...

0800a1fc <raise>:
 800a1fc:	4b02      	ldr	r3, [pc, #8]	; (800a208 <raise+0xc>)
 800a1fe:	4601      	mov	r1, r0
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	f7ff bfd1 	b.w	800a1a8 <_raise_r>
 800a206:	bf00      	nop
 800a208:	20000040 	.word	0x20000040

0800a20c <_kill_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	2300      	movs	r3, #0
 800a210:	4d06      	ldr	r5, [pc, #24]	; (800a22c <_kill_r+0x20>)
 800a212:	4604      	mov	r4, r0
 800a214:	4608      	mov	r0, r1
 800a216:	4611      	mov	r1, r2
 800a218:	602b      	str	r3, [r5, #0]
 800a21a:	f7f8 fb9c 	bl	8002956 <_kill>
 800a21e:	1c43      	adds	r3, r0, #1
 800a220:	d102      	bne.n	800a228 <_kill_r+0x1c>
 800a222:	682b      	ldr	r3, [r5, #0]
 800a224:	b103      	cbz	r3, 800a228 <_kill_r+0x1c>
 800a226:	6023      	str	r3, [r4, #0]
 800a228:	bd38      	pop	{r3, r4, r5, pc}
 800a22a:	bf00      	nop
 800a22c:	20000b7c 	.word	0x20000b7c

0800a230 <_getpid_r>:
 800a230:	f7f8 bb8a 	b.w	8002948 <_getpid>

0800a234 <__sread>:
 800a234:	b510      	push	{r4, lr}
 800a236:	460c      	mov	r4, r1
 800a238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23c:	f000 f94a 	bl	800a4d4 <_read_r>
 800a240:	2800      	cmp	r0, #0
 800a242:	bfab      	itete	ge
 800a244:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800a246:	89a3      	ldrhlt	r3, [r4, #12]
 800a248:	181b      	addge	r3, r3, r0
 800a24a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a24e:	bfac      	ite	ge
 800a250:	6523      	strge	r3, [r4, #80]	; 0x50
 800a252:	81a3      	strhlt	r3, [r4, #12]
 800a254:	bd10      	pop	{r4, pc}

0800a256 <__swrite>:
 800a256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a25a:	461f      	mov	r7, r3
 800a25c:	898b      	ldrh	r3, [r1, #12]
 800a25e:	4605      	mov	r5, r0
 800a260:	05db      	lsls	r3, r3, #23
 800a262:	460c      	mov	r4, r1
 800a264:	4616      	mov	r6, r2
 800a266:	d505      	bpl.n	800a274 <__swrite+0x1e>
 800a268:	2302      	movs	r3, #2
 800a26a:	2200      	movs	r2, #0
 800a26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a270:	f000 f91e 	bl	800a4b0 <_lseek_r>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	4632      	mov	r2, r6
 800a278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a27c:	81a3      	strh	r3, [r4, #12]
 800a27e:	4628      	mov	r0, r5
 800a280:	463b      	mov	r3, r7
 800a282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a28a:	f000 b875 	b.w	800a378 <_write_r>

0800a28e <__sseek>:
 800a28e:	b510      	push	{r4, lr}
 800a290:	460c      	mov	r4, r1
 800a292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a296:	f000 f90b 	bl	800a4b0 <_lseek_r>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	bf15      	itete	ne
 800a2a0:	6520      	strne	r0, [r4, #80]	; 0x50
 800a2a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2aa:	81a3      	strheq	r3, [r4, #12]
 800a2ac:	bf18      	it	ne
 800a2ae:	81a3      	strhne	r3, [r4, #12]
 800a2b0:	bd10      	pop	{r4, pc}

0800a2b2 <__sclose>:
 800a2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b6:	f000 b871 	b.w	800a39c <_close_r>

0800a2ba <__swbuf_r>:
 800a2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2bc:	460e      	mov	r6, r1
 800a2be:	4614      	mov	r4, r2
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	b118      	cbz	r0, 800a2cc <__swbuf_r+0x12>
 800a2c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a2c6:	b90b      	cbnz	r3, 800a2cc <__swbuf_r+0x12>
 800a2c8:	f7ff fd08 	bl	8009cdc <__sinit>
 800a2cc:	69a3      	ldr	r3, [r4, #24]
 800a2ce:	60a3      	str	r3, [r4, #8]
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	0719      	lsls	r1, r3, #28
 800a2d4:	d529      	bpl.n	800a32a <__swbuf_r+0x70>
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	b33b      	cbz	r3, 800a32a <__swbuf_r+0x70>
 800a2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2de:	b2f6      	uxtb	r6, r6
 800a2e0:	049a      	lsls	r2, r3, #18
 800a2e2:	4637      	mov	r7, r6
 800a2e4:	d52a      	bpl.n	800a33c <__swbuf_r+0x82>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	6920      	ldr	r0, [r4, #16]
 800a2ea:	1a18      	subs	r0, r3, r0
 800a2ec:	6963      	ldr	r3, [r4, #20]
 800a2ee:	4283      	cmp	r3, r0
 800a2f0:	dc04      	bgt.n	800a2fc <__swbuf_r+0x42>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f7ff fc85 	bl	8009c04 <_fflush_r>
 800a2fa:	b9e0      	cbnz	r0, 800a336 <__swbuf_r+0x7c>
 800a2fc:	68a3      	ldr	r3, [r4, #8]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	60a3      	str	r3, [r4, #8]
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	6022      	str	r2, [r4, #0]
 800a308:	701e      	strb	r6, [r3, #0]
 800a30a:	6962      	ldr	r2, [r4, #20]
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	429a      	cmp	r2, r3
 800a310:	d004      	beq.n	800a31c <__swbuf_r+0x62>
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	07db      	lsls	r3, r3, #31
 800a316:	d506      	bpl.n	800a326 <__swbuf_r+0x6c>
 800a318:	2e0a      	cmp	r6, #10
 800a31a:	d104      	bne.n	800a326 <__swbuf_r+0x6c>
 800a31c:	4621      	mov	r1, r4
 800a31e:	4628      	mov	r0, r5
 800a320:	f7ff fc70 	bl	8009c04 <_fflush_r>
 800a324:	b938      	cbnz	r0, 800a336 <__swbuf_r+0x7c>
 800a326:	4638      	mov	r0, r7
 800a328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a32a:	4621      	mov	r1, r4
 800a32c:	4628      	mov	r0, r5
 800a32e:	f7ff fb7f 	bl	8009a30 <__swsetup_r>
 800a332:	2800      	cmp	r0, #0
 800a334:	d0d1      	beq.n	800a2da <__swbuf_r+0x20>
 800a336:	f04f 37ff 	mov.w	r7, #4294967295
 800a33a:	e7f4      	b.n	800a326 <__swbuf_r+0x6c>
 800a33c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a348:	6663      	str	r3, [r4, #100]	; 0x64
 800a34a:	e7cc      	b.n	800a2e6 <__swbuf_r+0x2c>

0800a34c <_wcrtomb_r>:
 800a34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a34e:	4c09      	ldr	r4, [pc, #36]	; (800a374 <_wcrtomb_r+0x28>)
 800a350:	4605      	mov	r5, r0
 800a352:	461e      	mov	r6, r3
 800a354:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800a358:	b085      	sub	sp, #20
 800a35a:	b909      	cbnz	r1, 800a360 <_wcrtomb_r+0x14>
 800a35c:	460a      	mov	r2, r1
 800a35e:	a901      	add	r1, sp, #4
 800a360:	47b8      	blx	r7
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	bf01      	itttt	eq
 800a366:	2300      	moveq	r3, #0
 800a368:	6033      	streq	r3, [r6, #0]
 800a36a:	238a      	moveq	r3, #138	; 0x8a
 800a36c:	602b      	streq	r3, [r5, #0]
 800a36e:	b005      	add	sp, #20
 800a370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a372:	bf00      	nop
 800a374:	20000884 	.word	0x20000884

0800a378 <_write_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4604      	mov	r4, r0
 800a37c:	4608      	mov	r0, r1
 800a37e:	4611      	mov	r1, r2
 800a380:	2200      	movs	r2, #0
 800a382:	4d05      	ldr	r5, [pc, #20]	; (800a398 <_write_r+0x20>)
 800a384:	602a      	str	r2, [r5, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	f7f8 fb1c 	bl	80029c4 <_write>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_write_r+0x1e>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	b103      	cbz	r3, 800a396 <_write_r+0x1e>
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	20000b7c 	.word	0x20000b7c

0800a39c <_close_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	2300      	movs	r3, #0
 800a3a0:	4d05      	ldr	r5, [pc, #20]	; (800a3b8 <_close_r+0x1c>)
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	602b      	str	r3, [r5, #0]
 800a3a8:	f7f8 fb28 	bl	80029fc <_close>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_close_r+0x1a>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_close_r+0x1a>
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	20000b7c 	.word	0x20000b7c

0800a3bc <_fclose_r>:
 800a3bc:	b570      	push	{r4, r5, r6, lr}
 800a3be:	4606      	mov	r6, r0
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	b911      	cbnz	r1, 800a3ca <_fclose_r+0xe>
 800a3c4:	2500      	movs	r5, #0
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ca:	b118      	cbz	r0, 800a3d4 <_fclose_r+0x18>
 800a3cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a3ce:	b90b      	cbnz	r3, 800a3d4 <_fclose_r+0x18>
 800a3d0:	f7ff fc84 	bl	8009cdc <__sinit>
 800a3d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3d6:	07d8      	lsls	r0, r3, #31
 800a3d8:	d405      	bmi.n	800a3e6 <_fclose_r+0x2a>
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	0599      	lsls	r1, r3, #22
 800a3de:	d402      	bmi.n	800a3e6 <_fclose_r+0x2a>
 800a3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e2:	f7fd fd1b 	bl	8007e1c <__retarget_lock_acquire_recursive>
 800a3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ea:	b93b      	cbnz	r3, 800a3fc <_fclose_r+0x40>
 800a3ec:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a3ee:	f015 0501 	ands.w	r5, r5, #1
 800a3f2:	d1e7      	bne.n	800a3c4 <_fclose_r+0x8>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f6:	f7fd fd12 	bl	8007e1e <__retarget_lock_release_recursive>
 800a3fa:	e7e4      	b.n	800a3c6 <_fclose_r+0xa>
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	4630      	mov	r0, r6
 800a400:	f7ff fb76 	bl	8009af0 <__sflush_r>
 800a404:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a406:	4605      	mov	r5, r0
 800a408:	b133      	cbz	r3, 800a418 <_fclose_r+0x5c>
 800a40a:	4630      	mov	r0, r6
 800a40c:	69e1      	ldr	r1, [r4, #28]
 800a40e:	4798      	blx	r3
 800a410:	2800      	cmp	r0, #0
 800a412:	bfb8      	it	lt
 800a414:	f04f 35ff 	movlt.w	r5, #4294967295
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	061a      	lsls	r2, r3, #24
 800a41c:	d503      	bpl.n	800a426 <_fclose_r+0x6a>
 800a41e:	4630      	mov	r0, r6
 800a420:	6921      	ldr	r1, [r4, #16]
 800a422:	f7fd fc35 	bl	8007c90 <_free_r>
 800a426:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a428:	b141      	cbz	r1, 800a43c <_fclose_r+0x80>
 800a42a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a42e:	4299      	cmp	r1, r3
 800a430:	d002      	beq.n	800a438 <_fclose_r+0x7c>
 800a432:	4630      	mov	r0, r6
 800a434:	f7fd fc2c 	bl	8007c90 <_free_r>
 800a438:	2300      	movs	r3, #0
 800a43a:	6323      	str	r3, [r4, #48]	; 0x30
 800a43c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a43e:	b121      	cbz	r1, 800a44a <_fclose_r+0x8e>
 800a440:	4630      	mov	r0, r6
 800a442:	f7fd fc25 	bl	8007c90 <_free_r>
 800a446:	2300      	movs	r3, #0
 800a448:	6463      	str	r3, [r4, #68]	; 0x44
 800a44a:	f7ff fc2f 	bl	8009cac <__sfp_lock_acquire>
 800a44e:	2300      	movs	r3, #0
 800a450:	81a3      	strh	r3, [r4, #12]
 800a452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a454:	07db      	lsls	r3, r3, #31
 800a456:	d402      	bmi.n	800a45e <_fclose_r+0xa2>
 800a458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45a:	f7fd fce0 	bl	8007e1e <__retarget_lock_release_recursive>
 800a45e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a460:	f7fd fcdb 	bl	8007e1a <__retarget_lock_close_recursive>
 800a464:	f7ff fc28 	bl	8009cb8 <__sfp_lock_release>
 800a468:	e7ad      	b.n	800a3c6 <_fclose_r+0xa>
	...

0800a46c <_fstat_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	2300      	movs	r3, #0
 800a470:	4d06      	ldr	r5, [pc, #24]	; (800a48c <_fstat_r+0x20>)
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	f7f8 faca 	bl	8002a12 <_fstat>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	d102      	bne.n	800a488 <_fstat_r+0x1c>
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	b103      	cbz	r3, 800a488 <_fstat_r+0x1c>
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	20000b7c 	.word	0x20000b7c

0800a490 <_isatty_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	2300      	movs	r3, #0
 800a494:	4d05      	ldr	r5, [pc, #20]	; (800a4ac <_isatty_r+0x1c>)
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	602b      	str	r3, [r5, #0]
 800a49c:	f7f8 fac8 	bl	8002a30 <_isatty>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_isatty_r+0x1a>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_isatty_r+0x1a>
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	20000b7c 	.word	0x20000b7c

0800a4b0 <_lseek_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	4d05      	ldr	r5, [pc, #20]	; (800a4d0 <_lseek_r+0x20>)
 800a4bc:	602a      	str	r2, [r5, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f7f8 fac0 	bl	8002a44 <_lseek>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d102      	bne.n	800a4ce <_lseek_r+0x1e>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	b103      	cbz	r3, 800a4ce <_lseek_r+0x1e>
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	bd38      	pop	{r3, r4, r5, pc}
 800a4d0:	20000b7c 	.word	0x20000b7c

0800a4d4 <_read_r>:
 800a4d4:	b538      	push	{r3, r4, r5, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	4608      	mov	r0, r1
 800a4da:	4611      	mov	r1, r2
 800a4dc:	2200      	movs	r2, #0
 800a4de:	4d05      	ldr	r5, [pc, #20]	; (800a4f4 <_read_r+0x20>)
 800a4e0:	602a      	str	r2, [r5, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f7f8 fa51 	bl	800298a <_read>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_read_r+0x1e>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_read_r+0x1e>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	20000b7c 	.word	0x20000b7c

0800a4f8 <_init>:
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fa:	bf00      	nop
 800a4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fe:	bc08      	pop	{r3}
 800a500:	469e      	mov	lr, r3
 800a502:	4770      	bx	lr

0800a504 <_fini>:
 800a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a506:	bf00      	nop
 800a508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50a:	bc08      	pop	{r3}
 800a50c:	469e      	mov	lr, r3
 800a50e:	4770      	bx	lr
